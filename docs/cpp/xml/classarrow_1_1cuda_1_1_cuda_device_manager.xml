<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1cuda_1_1_cuda_device_manager" kind="class" language="C++" prot="public">
    <compoundname>arrow::cuda::CudaDeviceManager</compoundname>
    <includes refid="cuda__context_8h" local="no">arrow/gpu/cuda_context.h</includes>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classarrow_1_1cuda_1_1_cuda_device_manager_1a85732d49f940cf904d59cbac3e63ca58" prot="private" static="yes" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classarrow_1_1cuda_1_1_cuda_device_manager" kindref="compound">CudaDeviceManager</ref> &gt;</type>
        <definition>std::unique_ptr&lt;CudaDeviceManager&gt; arrow::cuda::CudaDeviceManager::instance_</definition>
        <argsstring></argsstring>
        <name>instance_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="101" column="1" bodyfile="/arrow/cpp/src/arrow/gpu/cuda_context.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classarrow_1_1cuda_1_1_cuda_device_manager_1ab73196aaee7021e532b4a4a8c96638c9" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; Impl &gt;</type>
        <definition>std::unique_ptr&lt;Impl&gt; arrow::cuda::CudaDeviceManager::impl_</definition>
        <argsstring></argsstring>
        <name>impl_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="104" column="1" bodyfile="/arrow/cpp/src/arrow/gpu/cuda_context.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classarrow_1_1cuda_1_1_cuda_device_manager_1a7aa0a2f5bdafbd79c27ead26fa52e3f6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class CudaContext</definition>
        <argsstring></argsstring>
        <name>CudaContext</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="106" column="1" bodyfile="/arrow/cpp/src/arrow/gpu/cuda_context.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classarrow_1_1cuda_1_1_cuda_device_manager_1af8631e429d4a54336e15c1272492651c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class CudaDevice</definition>
        <argsstring></argsstring>
        <name>CudaDevice</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="107" column="1" bodyfile="/arrow/cpp/src/arrow/gpu/cuda_context.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_device_manager_1aa1f735398ab10b3240b126b64a81bf48" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; <ref refid="classarrow_1_1cuda_1_1_cuda_device_manager" kindref="compound">CudaDeviceManager</ref> * &gt;</type>
        <definition>static Result&lt;CudaDeviceManager*&gt; arrow::cuda::CudaDeviceManager::Instance</definition>
        <argsstring>()</argsstring>
        <name>Instance</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_device_manager_1a83ba59b746ae205a3fdcd2c91e43fb9a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::cuda::CudaDeviceManager::GetInstance</definition>
        <argsstring>(CudaDeviceManager **manager)</argsstring>
        <name>GetInstance</name>
        <param>
          <type><ref refid="classarrow_1_1cuda_1_1_cuda_device_manager" kindref="compound">CudaDeviceManager</ref> **</type>
          <declname>manager</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="47" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_device_manager_1a058b9715b0e89cba4bad41bd0751e2c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1cuda_1_1_cuda_device" kindref="compound">CudaDevice</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;CudaDevice&gt; &gt; arrow::cuda::CudaDeviceManager::GetDevice</definition>
        <argsstring>(int device_number)</argsstring>
        <name>GetDevice</name>
        <param>
          <type>int</type>
          <declname>device_number</declname>
        </param>
        <briefdescription>
<para>Get a <ref refid="classarrow_1_1cuda_1_1_cuda_device" kindref="compound">CudaDevice</ref> instance for a particular device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">device_number</parametername>
</parameternamelist>
<parameterdescription>
<para>the CUDA device number </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_device_manager_1ad8e08e0964987873b48762cbf2e583b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1cuda_1_1_cuda_context" kindref="compound">CudaContext</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;CudaContext&gt; &gt; arrow::cuda::CudaDeviceManager::GetContext</definition>
        <argsstring>(int device_number)</argsstring>
        <name>GetContext</name>
        <param>
          <type>int</type>
          <declname>device_number</declname>
        </param>
        <briefdescription>
<para>Get the CUDA driver context for a particular device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">device_number</parametername>
</parameternamelist>
<parameterdescription>
<para>the CUDA device number </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>cached context </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="56" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_device_manager_1adc1ff0b5f95c10dd495cd05360c04a0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::cuda::CudaDeviceManager::GetContext</definition>
        <argsstring>(int device_number, std::shared_ptr&lt; CudaContext &gt; *out)</argsstring>
        <name>GetContext</name>
        <param>
          <type>int</type>
          <declname>device_number</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1cuda_1_1_cuda_context" kindref="compound">CudaContext</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Get the CUDA driver context for a particular device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">device_number</parametername>
</parameternamelist>
<parameterdescription>
<para>the CUDA device number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>cached context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_device_manager_1ad9704d65a4001cf9caae5b345746aeab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1cuda_1_1_cuda_context" kindref="compound">CudaContext</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;CudaContext&gt; &gt; arrow::cuda::CudaDeviceManager::GetSharedContext</definition>
        <argsstring>(int device_number, void *handle)</argsstring>
        <name>GetSharedContext</name>
        <param>
          <type>int</type>
          <declname>device_number</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Get the shared CUDA driver context for a particular device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">device_number</parametername>
</parameternamelist>
<parameterdescription>
<para>the CUDA device number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CUDA context handle created by another library </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>shared context </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_device_manager_1ae5f94e2ba45981c752842ef5c3d96237" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::cuda::CudaDeviceManager::GetSharedContext</definition>
        <argsstring>(int device_number, void *handle, std::shared_ptr&lt; CudaContext &gt; *out)</argsstring>
        <name>GetSharedContext</name>
        <param>
          <type>int</type>
          <declname>device_number</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1cuda_1_1_cuda_context" kindref="compound">CudaContext</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Get the shared CUDA driver context for a particular device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">device_number</parametername>
</parameternamelist>
<parameterdescription>
<para>the CUDA device number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CUDA context handle created by another library </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>shared context </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_device_manager_1a1f28a70a715fbc23c6aedc7f621f7bea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1cuda_1_1_cuda_host_buffer" kindref="compound">CudaHostBuffer</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;CudaHostBuffer&gt; &gt; arrow::cuda::CudaDeviceManager::AllocateHost</definition>
        <argsstring>(int device_number, int64_t nbytes)</argsstring>
        <name>AllocateHost</name>
        <param>
          <type>int</type>
          <declname>device_number</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
<para>Allocate host memory with fast access to given GPU device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">device_number</parametername>
</parameternamelist>
<parameterdescription>
<para>the CUDA device number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Host buffer or <ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="82" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_device_manager_1ad59e2b01a763993fc028a1856f40c6f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::cuda::CudaDeviceManager::AllocateHost</definition>
        <argsstring>(int device_number, int64_t nbytes, std::shared_ptr&lt; CudaHostBuffer &gt; *out)</argsstring>
        <name>AllocateHost</name>
        <param>
          <type>int</type>
          <declname>device_number</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1cuda_1_1_cuda_host_buffer" kindref="compound">CudaHostBuffer</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Allocate host memory with fast access to given GPU device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">device_number</parametername>
</parameternamelist>
<parameterdescription>
<para>the CUDA device number </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the allocated buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_device_manager_1ab1d79b1bfa5d3256f8c8005921ca573e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::cuda::CudaDeviceManager::FreeHost</definition>
        <argsstring>(void *data, int64_t nbytes)</argsstring>
        <name>FreeHost</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
<para>Free host memory. </para>        </briefdescription>
        <detaileddescription>
<para>The given memory pointer must have been allocated with AllocateHost. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_device_manager_1aa330bcabe7e9c67872dd9c2b33ffe226" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int arrow::cuda::CudaDeviceManager::num_devices</definition>
        <argsstring>() const</argsstring>
        <name>num_devices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="97" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_device_manager_1a167927844ea647241ecc216595f2f33d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::cuda::CudaDeviceManager::CudaDeviceManager</definition>
        <argsstring>()</argsstring>
        <name>CudaDeviceManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="100" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="42" column="1" bodyfile="/arrow/cpp/src/arrow/gpu/cuda_context.h" bodystart="42" bodyend="108"/>
    <listofallmembers>
      <member refid="classarrow_1_1cuda_1_1_cuda_device_manager_1a1f28a70a715fbc23c6aedc7f621f7bea" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaDeviceManager</scope><name>AllocateHost</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_device_manager_1ad59e2b01a763993fc028a1856f40c6f2" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaDeviceManager</scope><name>AllocateHost</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_device_manager_1a167927844ea647241ecc216595f2f33d" prot="private" virt="non-virtual"><scope>arrow::cuda::CudaDeviceManager</scope><name>CudaDeviceManager</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_device_manager_1ab1d79b1bfa5d3256f8c8005921ca573e" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaDeviceManager</scope><name>FreeHost</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_device_manager_1ad8e08e0964987873b48762cbf2e583b7" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaDeviceManager</scope><name>GetContext</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_device_manager_1adc1ff0b5f95c10dd495cd05360c04a0e" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaDeviceManager</scope><name>GetContext</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_device_manager_1a058b9715b0e89cba4bad41bd0751e2c9" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaDeviceManager</scope><name>GetDevice</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_device_manager_1a83ba59b746ae205a3fdcd2c91e43fb9a" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaDeviceManager</scope><name>GetInstance</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_device_manager_1ad9704d65a4001cf9caae5b345746aeab" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaDeviceManager</scope><name>GetSharedContext</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_device_manager_1ae5f94e2ba45981c752842ef5c3d96237" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaDeviceManager</scope><name>GetSharedContext</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_device_manager_1ab73196aaee7021e532b4a4a8c96638c9" prot="private" virt="non-virtual"><scope>arrow::cuda::CudaDeviceManager</scope><name>impl_</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_device_manager_1aa1f735398ab10b3240b126b64a81bf48" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaDeviceManager</scope><name>Instance</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_device_manager_1a85732d49f940cf904d59cbac3e63ca58" prot="private" virt="non-virtual"><scope>arrow::cuda::CudaDeviceManager</scope><name>instance_</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_device_manager_1aa330bcabe7e9c67872dd9c2b33ffe226" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaDeviceManager</scope><name>num_devices</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
