<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_chunked_array" kind="class" language="C++" prot="public">
    <compoundname>arrow::ChunkedArray</compoundname>
    <includes refid="table_8h" local="no">arrow/table.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="group__concat-tables_1ga438707b92386f68a63348c30743bc159" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacearrow_1ad77c54b51dac02d857f3a26d11ed58b3" kindref="member">ArrayVector</ref></type>
        <definition>ArrayVector arrow::ChunkedArray::chunks_</definition>
        <argsstring></argsstring>
        <name>chunks_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="132" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__concat-tables_1ga4d2fc435340a18c488a3001ce88018c4" prot="protected" static="no" mutable="no">
        <type>int64_t</type>
        <definition>int64_t arrow::ChunkedArray::length_</definition>
        <argsstring></argsstring>
        <name>length_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="133" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__concat-tables_1ga45ef30e6a7823f1666b0f50ecde903a7" prot="protected" static="no" mutable="no">
        <type>int64_t</type>
        <definition>int64_t arrow::ChunkedArray::null_count_</definition>
        <argsstring></argsstring>
        <name>null_count_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="134" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__concat-tables_1ga42911a6e758dd14bcc47a2108eed7bd0" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::ChunkedArray::type_</definition>
        <argsstring></argsstring>
        <name>type_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="135" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="group__concat-tables_1ga20e9e43c646d7f55d57b3c039bbabde1" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::ChunkedArray::ChunkedArray</definition>
        <argsstring>(ArrayVector chunks)</argsstring>
        <name>ChunkedArray</name>
        <param>
          <type><ref refid="namespacearrow_1ad77c54b51dac02d857f3a26d11ed58b3" kindref="member">ArrayVector</ref></type>
          <declname>chunks</declname>
        </param>
        <briefdescription>
<para>Construct a chunked array from a vector of arrays. </para>        </briefdescription>
        <detaileddescription>
<para>The vector must be non-empty and all its elements must have the same data type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="43" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga2d66448b2733e29fe02d6334defa7e47" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::ChunkedArray::ChunkedArray</definition>
        <argsstring>(std::shared_ptr&lt; Array &gt; chunk)</argsstring>
        <name>ChunkedArray</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt;</type>
          <declname>chunk</declname>
        </param>
        <briefdescription>
<para>Construct a chunked array from a single <ref refid="classarrow_1_1_array" kindref="compound">Array</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="46" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="46" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga8b8947395f527581001a0d9c06e8f9b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::ChunkedArray::ChunkedArray</definition>
        <argsstring>(ArrayVector chunks, std::shared_ptr&lt; DataType &gt; type)</argsstring>
        <name>ChunkedArray</name>
        <param>
          <type><ref refid="namespacearrow_1ad77c54b51dac02d857f3a26d11ed58b3" kindref="member">ArrayVector</ref></type>
          <declname>chunks</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Construct a chunked array from a vector of arrays and a data type. </para>        </briefdescription>
        <detaileddescription>
<para>As the data type is passed explicitly, the vector may be empty. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga4df41bf1a05cd1083a2c4502e0a85f87" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t arrow::ChunkedArray::length</definition>
        <argsstring>() const</argsstring>
        <name>length</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the total length of the chunked array; computed on construction </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="55" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="55" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga962541b044ac5a7a6a87499cef7957bb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t arrow::ChunkedArray::null_count</definition>
        <argsstring>() const</argsstring>
        <name>null_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the total number of nulls among all chunks </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="58" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="58" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1gafa477fd2e9a3ce9131d9d7f4391de52b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int arrow::ChunkedArray::num_chunks</definition>
        <argsstring>() const</argsstring>
        <name>num_chunks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="60" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="60" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga92ec02f5904ac3e4dac5328e44ebf0fb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Array&gt; arrow::ChunkedArray::chunk</definition>
        <argsstring>(int i) const</argsstring>
        <name>chunk</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>chunk a particular chunk from the chunked array </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="63" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="63" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1gaf53b92e2594cbe9d84710256e295586a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespacearrow_1ad77c54b51dac02d857f3a26d11ed58b3" kindref="member">ArrayVector</ref> &amp;</type>
        <definition>const ArrayVector&amp; arrow::ChunkedArray::chunks</definition>
        <argsstring>() const</argsstring>
        <name>chunks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="65" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga99573028501f20b3f0707d85e8cce2ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_chunked_array" kindref="compound">ChunkedArray</ref> &gt;</type>
        <definition>std::shared_ptr&lt;ChunkedArray&gt; arrow::ChunkedArray::Slice</definition>
        <argsstring>(int64_t offset, int64_t length) const</argsstring>
        <name>Slice</name>
        <param>
          <type>int64_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Construct a zero-copy slice of the chunked array with the indicated offset and length. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>the position of the first element in the constructed slice </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>the length of the slice. If there are not enough elements in the chunked array, the length will be adjusted accordingly</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a new object wrapped in std::shared_ptr&lt;ChunkedArray&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1gabf30b26c92cf037191e8574763e22a2e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_chunked_array" kindref="compound">ChunkedArray</ref> &gt;</type>
        <definition>std::shared_ptr&lt;ChunkedArray&gt; arrow::ChunkedArray::Slice</definition>
        <argsstring>(int64_t offset) const</argsstring>
        <name>Slice</name>
        <param>
          <type>int64_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Slice from offset until end of the chunked array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1gac4fd4aa712dd636d52dc3199c8276c2c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_chunked_array" kindref="compound">ChunkedArray</ref> &gt; &gt; &gt;</type>
        <definition>Result&lt;std::vector&lt;std::shared_ptr&lt;ChunkedArray&gt; &gt; &gt; arrow::ChunkedArray::Flatten</definition>
        <argsstring>(MemoryPool *pool=default_memory_pool()) const</argsstring>
        <name>Flatten</name>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
          <defval><ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">default_memory_pool</ref>()</defval>
        </param>
        <briefdescription>
<para>Flatten this chunked array as a vector of chunked arrays, one for each struct field. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool for buffer allocations, if any </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga8d4af28e378addf17162ad421bc0cdd6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::ChunkedArray::Flatten</definition>
        <argsstring>(MemoryPool *pool, std::vector&lt; std::shared_ptr&lt; ChunkedArray &gt;&gt; *out) const</argsstring>
        <name>Flatten</name>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_chunked_array" kindref="compound">ChunkedArray</ref> &gt;&gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga6486c77d9ba68feb3a0205691f5bc7d4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_chunked_array" kindref="compound">ChunkedArray</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;ChunkedArray&gt; &gt; arrow::ChunkedArray::View</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;type) const</argsstring>
        <name>View</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Construct a zero-copy view of this chunked array with the given type. </para>        </briefdescription>
        <detaileddescription>
<para>Calls <ref refid="classarrow_1_1_array_1aa2b5f248c09a41c089e1fbc911beecb0" kindref="member">Array::View</ref> on each constituent chunk. Always succeeds if there are zero chunks </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1gad5d7f457d2b87d9e28045b69b1ae9efb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::ChunkedArray::View</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;type, std::shared_ptr&lt; ChunkedArray &gt; *out) const</argsstring>
        <name>View</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_chunked_array" kindref="compound">ChunkedArray</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="97" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1gadb15afa228802d9fab0f3993a4f82df2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::ChunkedArray::type</definition>
        <argsstring>() const</argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="100" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1gab7ad74cc587d5d622c7e62cbf1b0b9f9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::ChunkedArray::Equals</definition>
        <argsstring>(const ChunkedArray &amp;other) const</argsstring>
        <name>Equals</name>
        <param>
          <type>const <ref refid="classarrow_1_1_chunked_array" kindref="compound">ChunkedArray</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Determine if two chunked arrays are equal. </para>        </briefdescription>
        <detaileddescription>
<para>Two chunked arrays can be equal only if they have equal datatypes. However, they may be equal even if they have different chunkings. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga67c23032d122d1a87acf0bc2b2e52d54" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::ChunkedArray::Equals</definition>
        <argsstring>(const std::shared_ptr&lt; ChunkedArray &gt; &amp;other) const</argsstring>
        <name>Equals</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_chunked_array" kindref="compound">ChunkedArray</ref> &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Determine if two chunked arrays are equal. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1gaba4644e58ea8d1b43080691a4e945ca8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arrow::ChunkedArray::ToString</definition>
        <argsstring>() const</argsstring>
        <name>ToString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>PrettyPrint representation suitable for debugging </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga06ca5def32987d58b7577db269e39520" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::ChunkedArray::Validate</definition>
        <argsstring>() const</argsstring>
        <name>Validate</name>
        <briefdescription>
<para>Perform cheap validation checks to determine obvious inconsistencies within the chunk array&apos;s internal data. </para>        </briefdescription>
        <detaileddescription>
<para>This is O(k*m) where k is the number of array descendents, and m is the number of chunks.</para><para><simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga85899961a35888fcdfed462418ba6498" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::ChunkedArray::ValidateFull</definition>
        <argsstring>() const</argsstring>
        <name>ValidateFull</name>
        <briefdescription>
<para>Perform extensive validation checks to determine inconsistencies within the chunk array&apos;s internal data. </para>        </briefdescription>
        <detaileddescription>
<para>This is O(k*n) where k is the number of array descendents, and n is the length in elements.</para><para><simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="129" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="group__concat-tables_1ga38e53e9f6ad293ed25315f8d3f140e69" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::ChunkedArray::ARROW_DISALLOW_COPY_AND_ASSIGN</definition>
        <argsstring>(ChunkedArray)</argsstring>
        <name>ARROW_DISALLOW_COPY_AND_ASSIGN</name>
        <param>
          <type><ref refid="classarrow_1_1_chunked_array" kindref="compound">ChunkedArray</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="138" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A data structure managing a list of primitive Arrow arrays logically as one large array. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/arrow/table.h" line="37" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="37" bodyend="139"/>
    <listofallmembers>
      <member refid="group__concat-tables_1ga38e53e9f6ad293ed25315f8d3f140e69" prot="private" virt="non-virtual"><scope>arrow::ChunkedArray</scope><name>ARROW_DISALLOW_COPY_AND_ASSIGN</name></member>
      <member refid="group__concat-tables_1ga92ec02f5904ac3e4dac5328e44ebf0fb" prot="public" virt="non-virtual"><scope>arrow::ChunkedArray</scope><name>chunk</name></member>
      <member refid="group__concat-tables_1ga20e9e43c646d7f55d57b3c039bbabde1" prot="public" virt="non-virtual"><scope>arrow::ChunkedArray</scope><name>ChunkedArray</name></member>
      <member refid="group__concat-tables_1ga2d66448b2733e29fe02d6334defa7e47" prot="public" virt="non-virtual"><scope>arrow::ChunkedArray</scope><name>ChunkedArray</name></member>
      <member refid="group__concat-tables_1ga8b8947395f527581001a0d9c06e8f9b3" prot="public" virt="non-virtual"><scope>arrow::ChunkedArray</scope><name>ChunkedArray</name></member>
      <member refid="group__concat-tables_1gaf53b92e2594cbe9d84710256e295586a" prot="public" virt="non-virtual"><scope>arrow::ChunkedArray</scope><name>chunks</name></member>
      <member refid="group__concat-tables_1ga438707b92386f68a63348c30743bc159" prot="protected" virt="non-virtual"><scope>arrow::ChunkedArray</scope><name>chunks_</name></member>
      <member refid="group__concat-tables_1gab7ad74cc587d5d622c7e62cbf1b0b9f9" prot="public" virt="non-virtual"><scope>arrow::ChunkedArray</scope><name>Equals</name></member>
      <member refid="group__concat-tables_1ga67c23032d122d1a87acf0bc2b2e52d54" prot="public" virt="non-virtual"><scope>arrow::ChunkedArray</scope><name>Equals</name></member>
      <member refid="group__concat-tables_1gac4fd4aa712dd636d52dc3199c8276c2c" prot="public" virt="non-virtual"><scope>arrow::ChunkedArray</scope><name>Flatten</name></member>
      <member refid="group__concat-tables_1ga8d4af28e378addf17162ad421bc0cdd6" prot="public" virt="non-virtual"><scope>arrow::ChunkedArray</scope><name>Flatten</name></member>
      <member refid="group__concat-tables_1ga4df41bf1a05cd1083a2c4502e0a85f87" prot="public" virt="non-virtual"><scope>arrow::ChunkedArray</scope><name>length</name></member>
      <member refid="group__concat-tables_1ga4d2fc435340a18c488a3001ce88018c4" prot="protected" virt="non-virtual"><scope>arrow::ChunkedArray</scope><name>length_</name></member>
      <member refid="group__concat-tables_1ga962541b044ac5a7a6a87499cef7957bb" prot="public" virt="non-virtual"><scope>arrow::ChunkedArray</scope><name>null_count</name></member>
      <member refid="group__concat-tables_1ga45ef30e6a7823f1666b0f50ecde903a7" prot="protected" virt="non-virtual"><scope>arrow::ChunkedArray</scope><name>null_count_</name></member>
      <member refid="group__concat-tables_1gafa477fd2e9a3ce9131d9d7f4391de52b" prot="public" virt="non-virtual"><scope>arrow::ChunkedArray</scope><name>num_chunks</name></member>
      <member refid="group__concat-tables_1ga99573028501f20b3f0707d85e8cce2ad" prot="public" virt="non-virtual"><scope>arrow::ChunkedArray</scope><name>Slice</name></member>
      <member refid="group__concat-tables_1gabf30b26c92cf037191e8574763e22a2e" prot="public" virt="non-virtual"><scope>arrow::ChunkedArray</scope><name>Slice</name></member>
      <member refid="group__concat-tables_1gaba4644e58ea8d1b43080691a4e945ca8" prot="public" virt="non-virtual"><scope>arrow::ChunkedArray</scope><name>ToString</name></member>
      <member refid="group__concat-tables_1gadb15afa228802d9fab0f3993a4f82df2" prot="public" virt="non-virtual"><scope>arrow::ChunkedArray</scope><name>type</name></member>
      <member refid="group__concat-tables_1ga42911a6e758dd14bcc47a2108eed7bd0" prot="protected" virt="non-virtual"><scope>arrow::ChunkedArray</scope><name>type_</name></member>
      <member refid="group__concat-tables_1ga06ca5def32987d58b7577db269e39520" prot="public" virt="non-virtual"><scope>arrow::ChunkedArray</scope><name>Validate</name></member>
      <member refid="group__concat-tables_1ga85899961a35888fcdfed462418ba6498" prot="public" virt="non-virtual"><scope>arrow::ChunkedArray</scope><name>ValidateFull</name></member>
      <member refid="group__concat-tables_1ga6486c77d9ba68feb3a0205691f5bc7d4" prot="public" virt="non-virtual"><scope>arrow::ChunkedArray</scope><name>View</name></member>
      <member refid="group__concat-tables_1gad5d7f457d2b87d9e28045b69b1ae9efb" prot="public" virt="non-virtual"><scope>arrow::ChunkedArray</scope><name>View</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
