<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1ipc_1_1_message" kind="class" language="C++" prot="public">
    <compoundname>arrow::ipc::Message</compoundname>
    <includes refid="message_8h" local="no">arrow/ipc/message.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classarrow_1_1ipc_1_1_message_1a6d6973b3b03de50d7be9dbab4db910db" prot="public" static="no">
        <name>Type</name>
        <enumvalue id="classarrow_1_1ipc_1_1_message_1a6d6973b3b03de50d7be9dbab4db910dba421c980d162a5a5cd8c11586af54ecb0" prot="public">
          <name>NONE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classarrow_1_1ipc_1_1_message_1a6d6973b3b03de50d7be9dbab4db910dbadd37198990318877501c5bf3941cd5e9" prot="public">
          <name>SCHEMA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classarrow_1_1ipc_1_1_message_1a6d6973b3b03de50d7be9dbab4db910dba35131e9b4eb445c0bcc0c877f74d6194" prot="public">
          <name>DICTIONARY_BATCH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classarrow_1_1ipc_1_1_message_1a6d6973b3b03de50d7be9dbab4db910dbafb3a9ffbfd87e8a292b54e424a23c358" prot="public">
          <name>RECORD_BATCH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classarrow_1_1ipc_1_1_message_1a6d6973b3b03de50d7be9dbab4db910dba922f830b7824073c7ee80d869632a067" prot="public">
          <name>TENSOR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classarrow_1_1ipc_1_1_message_1a6d6973b3b03de50d7be9dbab4db910dbafa6f46202431590abbe006c2b1142104" prot="public">
          <name>SPARSE_TENSOR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/message.h" line="70" column="1" bodyfile="/arrow/cpp/src/arrow/ipc/message.h" bodystart="70" bodyend="70"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classarrow_1_1ipc_1_1_message_1a561549483184d9472d637e76ac723069" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; MessageImpl &gt;</type>
        <definition>std::unique_ptr&lt;MessageImpl&gt; arrow::ipc::Message::impl_</definition>
        <argsstring></argsstring>
        <name>impl_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/message.h" line="176" column="1" bodyfile="/arrow/cpp/src/arrow/ipc/message.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_message_1ad9e13a808673a07b57e0ab7f7dad6b21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::ipc::Message::Message</definition>
        <argsstring>(std::shared_ptr&lt; Buffer &gt; metadata, std::shared_ptr&lt; Buffer &gt; body)</argsstring>
        <name>Message</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;</type>
          <declname>metadata</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;</type>
          <declname>body</declname>
        </param>
        <briefdescription>
<para>Construct message, but do not validate. </para>        </briefdescription>
        <detaileddescription>
<para>Use at your own risk; <ref refid="classarrow_1_1ipc_1_1_message_1adb7e109de65179903783204886798d48" kindref="member">Message::Open</ref> has more metadata validation </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/message.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_message_1a683d80c4cd28b3e1657a20accc2a644f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::ipc::Message::~Message</definition>
        <argsstring>()</argsstring>
        <name>~Message</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/message.h" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_message_1a09638849ca30e6927ea4c80db82c575b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::ipc::Message::Equals</definition>
        <argsstring>(const Message &amp;other) const</argsstring>
        <name>Equals</name>
        <param>
          <type>const <ref refid="classarrow_1_1ipc_1_1_message" kindref="compound">Message</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Return true if message type and contents are equal. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>other</parametername>
</parameternamelist>
<parameterdescription>
<para>another message </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if contents equal </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/message.h" line="130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_message_1a8576bf515d0c89a05e88f9d35b22abc8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Buffer&gt; arrow::ipc::Message::metadata</definition>
        <argsstring>() const</argsstring>
        <name>metadata</name>
        <briefdescription>
<para>the <ref refid="classarrow_1_1ipc_1_1_message" kindref="compound">Message</ref> metadata </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>buffer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/message.h" line="135" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_message_1a916c670e0dd21c9aedcb1d50f0c16bc7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::shared_ptr&lt; const <ref refid="classarrow_1_1_key_value_metadata" kindref="compound">KeyValueMetadata</ref> &gt; &amp;</type>
        <definition>const std::shared_ptr&lt;const KeyValueMetadata&gt;&amp; arrow::ipc::Message::custom_metadata</definition>
        <argsstring>() const</argsstring>
        <name>custom_metadata</name>
        <briefdescription>
<para>Custom metadata serialized in metadata Flatbuffer. </para>        </briefdescription>
        <detaileddescription>
<para>Returns nullptr when none set </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/message.h" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_message_1a22b16d852c30e70a4a6825c4376c67e3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Buffer&gt; arrow::ipc::Message::body</definition>
        <argsstring>() const</argsstring>
        <name>body</name>
        <briefdescription>
<para>the <ref refid="classarrow_1_1ipc_1_1_message" kindref="compound">Message</ref> body, if any </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>buffer is null if no body </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/message.h" line="144" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_message_1aed695edd0f1091bf650409f37c8409d6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t arrow::ipc::Message::body_length</definition>
        <argsstring>() const</argsstring>
        <name>body_length</name>
        <briefdescription>
<para>The expected body length according to the metadata, for verification purposes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/message.h" line="148" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_message_1ac35d37942c386ee92eb436381744d6c9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1ipc_1_1_message_1a6d6973b3b03de50d7be9dbab4db910db" kindref="member">Type</ref></type>
        <definition>Type arrow::ipc::Message::type</definition>
        <argsstring>() const</argsstring>
        <name>type</name>
        <briefdescription>
<para>The <ref refid="classarrow_1_1ipc_1_1_message" kindref="compound">Message</ref> type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/message.h" line="151" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_message_1a2f64085955886f84817cb1676cf63b54" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacearrow_1_1ipc_1aa5d7ec68a8c707271bab98af9bc0ac77" kindref="member">MetadataVersion</ref></type>
        <definition>MetadataVersion arrow::ipc::Message::metadata_version</definition>
        <argsstring>() const</argsstring>
        <name>metadata_version</name>
        <briefdescription>
<para>The <ref refid="classarrow_1_1ipc_1_1_message" kindref="compound">Message</ref> metadata version. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/message.h" line="154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_message_1a68fda3f801ed4cd05f5e9530dcfe8a34" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const void *</type>
        <definition>const void* arrow::ipc::Message::header</definition>
        <argsstring>() const</argsstring>
        <name>header</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/message.h" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_message_1ac2aa696e1d1d0bc014d22eaa3fbbdf89" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::ipc::Message::SerializeTo</definition>
        <argsstring>(io::OutputStream *file, const IpcWriteOptions &amp;options, int64_t *output_length) const</argsstring>
        <name>SerializeTo</name>
        <param>
          <type><ref refid="classarrow_1_1io_1_1_output_stream" kindref="compound">io::OutputStream</ref> *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1ipc_1_1_ipc_write_options" kindref="compound">IpcWriteOptions</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>output_length</declname>
        </param>
        <briefdescription>
<para>Write length-prefixed metadata and body to output stream. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">file</parametername>
</parameternamelist>
<parameterdescription>
<para>output stream to write to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">options</parametername>
</parameternamelist>
<parameterdescription>
<para>IPC writing options including alignment </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">output_length</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bytes written </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/message.h" line="164" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_message_1a9f38b204ad2b802dada3877abb6b1fde" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::ipc::Message::Verify</definition>
        <argsstring>() const</argsstring>
        <name>Verify</name>
        <briefdescription>
<para>Return true if the <ref refid="classarrow_1_1ipc_1_1_message" kindref="compound">Message</ref> metadata passes Flatbuffer validation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/message.h" line="168" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_message_1adb7e109de65179903783204886798d48" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::unique_ptr&lt; <ref refid="classarrow_1_1ipc_1_1_message" kindref="compound">Message</ref> &gt; &gt;</type>
        <definition>static Result&lt;std::unique_ptr&lt;Message&gt; &gt; arrow::ipc::Message::Open</definition>
        <argsstring>(std::shared_ptr&lt; Buffer &gt; metadata, std::shared_ptr&lt; Buffer &gt; body)</argsstring>
        <name>Open</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;</type>
          <declname>metadata</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;</type>
          <declname>body</declname>
        </param>
        <briefdescription>
<para>Create and validate a <ref refid="classarrow_1_1ipc_1_1_message" kindref="compound">Message</ref> instance from two buffers. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">metadata</parametername>
</parameternamelist>
<parameterdescription>
<para>a buffer containing the Flatbuffer metadata </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">body</parametername>
</parameternamelist>
<parameterdescription>
<para>a buffer containing the message body, which may be null </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the created message </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/message.h" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_message_1ac5355af471fa5305790e959fe369f8cb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::ipc::Message::Open</definition>
        <argsstring>(const std::shared_ptr&lt; Buffer &gt; &amp;metadata, const std::shared_ptr&lt; Buffer &gt; &amp;body, std::unique_ptr&lt; Message &gt; *out)</argsstring>
        <name>Open</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &amp;</type>
          <declname>metadata</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &amp;</type>
          <declname>body</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classarrow_1_1ipc_1_1_message" kindref="compound">Message</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/message.h" line="88" column="1" bodyfile="/arrow/cpp/src/arrow/ipc/message.h" bodystart="88" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_message_1a932d003388a9a7100d8570b75af3cd61" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::unique_ptr&lt; <ref refid="classarrow_1_1ipc_1_1_message" kindref="compound">Message</ref> &gt; &gt;</type>
        <definition>static Result&lt;std::unique_ptr&lt;Message&gt; &gt; arrow::ipc::Message::ReadFrom</definition>
        <argsstring>(std::shared_ptr&lt; Buffer &gt; metadata, io::InputStream *stream)</argsstring>
        <name>ReadFrom</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;</type>
          <declname>metadata</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1io_1_1_input_stream" kindref="compound">io::InputStream</ref> *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Read message body and create <ref refid="classarrow_1_1ipc_1_1_message" kindref="compound">Message</ref> given Flatbuffer metadata. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">metadata</parametername>
</parameternamelist>
<parameterdescription>
<para>containing a serialized <ref refid="classarrow_1_1ipc_1_1_message" kindref="compound">Message</ref> flatbuffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>an InputStream </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the created <ref refid="classarrow_1_1ipc_1_1_message" kindref="compound">Message</ref></para></simplesect>
<simplesect kind="note"><para>If stream supports zero-copy, this is zero-copy </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/message.h" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_message_1aafbce3ffcae83275e5f002d40de1b983" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::ipc::Message::ReadFrom</definition>
        <argsstring>(std::shared_ptr&lt; Buffer &gt; metadata, io::InputStream *stream, std::unique_ptr&lt; Message &gt; *out)</argsstring>
        <name>ReadFrom</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;</type>
          <declname>metadata</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1io_1_1_input_stream" kindref="compound">io::InputStream</ref> *</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classarrow_1_1ipc_1_1_message" kindref="compound">Message</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/message.h" line="103" column="1" bodyfile="/arrow/cpp/src/arrow/ipc/message.h" bodystart="103" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_message_1a07f529baebd4d3a0baa83058be6e90c6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::unique_ptr&lt; <ref refid="classarrow_1_1ipc_1_1_message" kindref="compound">Message</ref> &gt; &gt;</type>
        <definition>static Result&lt;std::unique_ptr&lt;Message&gt; &gt; arrow::ipc::Message::ReadFrom</definition>
        <argsstring>(const int64_t offset, std::shared_ptr&lt; Buffer &gt; metadata, io::RandomAccessFile *file)</argsstring>
        <name>ReadFrom</name>
        <param>
          <type>const int64_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;</type>
          <declname>metadata</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1io_1_1_random_access_file" kindref="compound">io::RandomAccessFile</ref> *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
<para>Read message body from position in file, and create <ref refid="classarrow_1_1ipc_1_1_message" kindref="compound">Message</ref> given the Flatbuffer metadata. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>the position in the file where the message body starts. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">metadata</parametername>
</parameternamelist>
<parameterdescription>
<para>containing a serialized <ref refid="classarrow_1_1ipc_1_1_message" kindref="compound">Message</ref> flatbuffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">file</parametername>
</parameternamelist>
<parameterdescription>
<para>the seekable file interface to read from </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the created <ref refid="classarrow_1_1ipc_1_1_message" kindref="compound">Message</ref></para></simplesect>
<simplesect kind="note"><para>If file supports zero-copy, this is zero-copy </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/message.h" line="116" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_message_1a1120921c127a835c9c60e5871e58e8a0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::ipc::Message::ReadFrom</definition>
        <argsstring>(const int64_t offset, std::shared_ptr&lt; Buffer &gt; metadata, io::RandomAccessFile *file, std::unique_ptr&lt; Message &gt; *out)</argsstring>
        <name>ReadFrom</name>
        <param>
          <type>const int64_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;</type>
          <declname>metadata</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1io_1_1_random_access_file" kindref="compound">io::RandomAccessFile</ref> *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classarrow_1_1ipc_1_1_message" kindref="compound">Message</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/message.h" line="121" column="1" bodyfile="/arrow/cpp/src/arrow/ipc/message.h" bodystart="121" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_message_1a9656083cd5545252733857995aacf9ae" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool arrow::ipc::Message::HasBody</definition>
        <argsstring>(Type type)</argsstring>
        <name>HasBody</name>
        <param>
          <type><ref refid="classarrow_1_1ipc_1_1_message_1a6d6973b3b03de50d7be9dbab4db910db" kindref="member">Type</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Whether a given message type needs a body. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/message.h" line="171" column="1" bodyfile="/arrow/cpp/src/arrow/ipc/message.h" bodystart="171" bodyend="171"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_message_1a1513da676e2f8610e0fb90e137549dd6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::ipc::Message::ARROW_DISALLOW_COPY_AND_ASSIGN</definition>
        <argsstring>(Message)</argsstring>
        <name>ARROW_DISALLOW_COPY_AND_ASSIGN</name>
        <param>
          <type><ref refid="classarrow_1_1ipc_1_1_message" kindref="compound">Message</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/message.h" line="178" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An IPC message including metadata and body. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/arrow/ipc/message.h" line="68" column="1" bodyfile="/arrow/cpp/src/arrow/ipc/message.h" bodystart="68" bodyend="179"/>
    <listofallmembers>
      <member refid="classarrow_1_1ipc_1_1_message_1a1513da676e2f8610e0fb90e137549dd6" prot="private" virt="non-virtual"><scope>arrow::ipc::Message</scope><name>ARROW_DISALLOW_COPY_AND_ASSIGN</name></member>
      <member refid="classarrow_1_1ipc_1_1_message_1a22b16d852c30e70a4a6825c4376c67e3" prot="public" virt="non-virtual"><scope>arrow::ipc::Message</scope><name>body</name></member>
      <member refid="classarrow_1_1ipc_1_1_message_1aed695edd0f1091bf650409f37c8409d6" prot="public" virt="non-virtual"><scope>arrow::ipc::Message</scope><name>body_length</name></member>
      <member refid="classarrow_1_1ipc_1_1_message_1a916c670e0dd21c9aedcb1d50f0c16bc7" prot="public" virt="non-virtual"><scope>arrow::ipc::Message</scope><name>custom_metadata</name></member>
      <member refid="classarrow_1_1ipc_1_1_message_1a6d6973b3b03de50d7be9dbab4db910dba35131e9b4eb445c0bcc0c877f74d6194" prot="public" virt="non-virtual"><scope>arrow::ipc::Message</scope><name>DICTIONARY_BATCH</name></member>
      <member refid="classarrow_1_1ipc_1_1_message_1a09638849ca30e6927ea4c80db82c575b" prot="public" virt="non-virtual"><scope>arrow::ipc::Message</scope><name>Equals</name></member>
      <member refid="classarrow_1_1ipc_1_1_message_1a9656083cd5545252733857995aacf9ae" prot="public" virt="non-virtual"><scope>arrow::ipc::Message</scope><name>HasBody</name></member>
      <member refid="classarrow_1_1ipc_1_1_message_1a68fda3f801ed4cd05f5e9530dcfe8a34" prot="public" virt="non-virtual"><scope>arrow::ipc::Message</scope><name>header</name></member>
      <member refid="classarrow_1_1ipc_1_1_message_1a561549483184d9472d637e76ac723069" prot="private" virt="non-virtual"><scope>arrow::ipc::Message</scope><name>impl_</name></member>
      <member refid="classarrow_1_1ipc_1_1_message_1ad9e13a808673a07b57e0ab7f7dad6b21" prot="public" virt="non-virtual"><scope>arrow::ipc::Message</scope><name>Message</name></member>
      <member refid="classarrow_1_1ipc_1_1_message_1a8576bf515d0c89a05e88f9d35b22abc8" prot="public" virt="non-virtual"><scope>arrow::ipc::Message</scope><name>metadata</name></member>
      <member refid="classarrow_1_1ipc_1_1_message_1a2f64085955886f84817cb1676cf63b54" prot="public" virt="non-virtual"><scope>arrow::ipc::Message</scope><name>metadata_version</name></member>
      <member refid="classarrow_1_1ipc_1_1_message_1a6d6973b3b03de50d7be9dbab4db910dba421c980d162a5a5cd8c11586af54ecb0" prot="public" virt="non-virtual"><scope>arrow::ipc::Message</scope><name>NONE</name></member>
      <member refid="classarrow_1_1ipc_1_1_message_1adb7e109de65179903783204886798d48" prot="public" virt="non-virtual"><scope>arrow::ipc::Message</scope><name>Open</name></member>
      <member refid="classarrow_1_1ipc_1_1_message_1ac5355af471fa5305790e959fe369f8cb" prot="public" virt="non-virtual"><scope>arrow::ipc::Message</scope><name>Open</name></member>
      <member refid="classarrow_1_1ipc_1_1_message_1a932d003388a9a7100d8570b75af3cd61" prot="public" virt="non-virtual"><scope>arrow::ipc::Message</scope><name>ReadFrom</name></member>
      <member refid="classarrow_1_1ipc_1_1_message_1aafbce3ffcae83275e5f002d40de1b983" prot="public" virt="non-virtual"><scope>arrow::ipc::Message</scope><name>ReadFrom</name></member>
      <member refid="classarrow_1_1ipc_1_1_message_1a07f529baebd4d3a0baa83058be6e90c6" prot="public" virt="non-virtual"><scope>arrow::ipc::Message</scope><name>ReadFrom</name></member>
      <member refid="classarrow_1_1ipc_1_1_message_1a1120921c127a835c9c60e5871e58e8a0" prot="public" virt="non-virtual"><scope>arrow::ipc::Message</scope><name>ReadFrom</name></member>
      <member refid="classarrow_1_1ipc_1_1_message_1a6d6973b3b03de50d7be9dbab4db910dbafb3a9ffbfd87e8a292b54e424a23c358" prot="public" virt="non-virtual"><scope>arrow::ipc::Message</scope><name>RECORD_BATCH</name></member>
      <member refid="classarrow_1_1ipc_1_1_message_1a6d6973b3b03de50d7be9dbab4db910dbadd37198990318877501c5bf3941cd5e9" prot="public" virt="non-virtual"><scope>arrow::ipc::Message</scope><name>SCHEMA</name></member>
      <member refid="classarrow_1_1ipc_1_1_message_1ac2aa696e1d1d0bc014d22eaa3fbbdf89" prot="public" virt="non-virtual"><scope>arrow::ipc::Message</scope><name>SerializeTo</name></member>
      <member refid="classarrow_1_1ipc_1_1_message_1a6d6973b3b03de50d7be9dbab4db910dbafa6f46202431590abbe006c2b1142104" prot="public" virt="non-virtual"><scope>arrow::ipc::Message</scope><name>SPARSE_TENSOR</name></member>
      <member refid="classarrow_1_1ipc_1_1_message_1a6d6973b3b03de50d7be9dbab4db910dba922f830b7824073c7ee80d869632a067" prot="public" virt="non-virtual"><scope>arrow::ipc::Message</scope><name>TENSOR</name></member>
      <member refid="classarrow_1_1ipc_1_1_message_1ac35d37942c386ee92eb436381744d6c9" prot="public" virt="non-virtual"><scope>arrow::ipc::Message</scope><name>type</name></member>
      <member refid="classarrow_1_1ipc_1_1_message_1a6d6973b3b03de50d7be9dbab4db910db" prot="public" virt="non-virtual"><scope>arrow::ipc::Message</scope><name>Type</name></member>
      <member refid="classarrow_1_1ipc_1_1_message_1a9f38b204ad2b802dada3877abb6b1fde" prot="public" virt="non-virtual"><scope>arrow::ipc::Message</scope><name>Verify</name></member>
      <member refid="classarrow_1_1ipc_1_1_message_1a683d80c4cd28b3e1657a20accc2a644f" prot="public" virt="non-virtual"><scope>arrow::ipc::Message</scope><name>~Message</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
