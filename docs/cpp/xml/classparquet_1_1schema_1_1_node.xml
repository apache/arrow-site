<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classparquet_1_1schema_1_1_node" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>parquet::schema::Node</compoundname>
    <derivedcompoundref refid="classparquet_1_1schema_1_1_group_node" prot="public" virt="non-virtual">parquet::schema::GroupNode</derivedcompoundref>
    <derivedcompoundref refid="classparquet_1_1schema_1_1_primitive_node" prot="public" virt="non-virtual">parquet::schema::PrimitiveNode</derivedcompoundref>
    <includes refid="schema_8h" local="no">parquet/schema.h</includes>
    <innerclass refid="classparquet_1_1schema_1_1_node_1_1_const_visitor" prot="public">parquet::schema::Node::ConstVisitor</innerclass>
    <innerclass refid="classparquet_1_1schema_1_1_node_1_1_visitor" prot="public">parquet::schema::Node::Visitor</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classparquet_1_1schema_1_1_node_1aab450ce50c75c565dde2d550311c5020" prot="public" static="no">
        <name>type</name>
        <enumvalue id="classparquet_1_1schema_1_1_node_1aab450ce50c75c565dde2d550311c5020a937da11d2024ff231f447c3053e74d88" prot="public">
          <name>PRIMITIVE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classparquet_1_1schema_1_1_node_1aab450ce50c75c565dde2d550311c5020af049b3443056c6e12e06dd41630bc0db" prot="public">
          <name>GROUP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="99" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="99" bodyend="99"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classparquet_1_1schema_1_1_node_1ab65d0d081821369cf38f231ba1a5e013" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class GroupNode</definition>
        <argsstring></argsstring>
        <name>GroupNode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="157" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="157" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classparquet_1_1schema_1_1_node_1a77bbfa65c2f78dfa5fe9410376da9ec6" prot="protected" static="no" mutable="no">
        <type><ref refid="classparquet_1_1schema_1_1_node_1aab450ce50c75c565dde2d550311c5020" kindref="member">Node::type</ref></type>
        <definition>Node::type parquet::schema::Node::type_</definition>
        <argsstring></argsstring>
        <name>type_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="177" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="177" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classparquet_1_1schema_1_1_node_1a7e2ce16cdf24f982f7d87f45ed8be209" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string parquet::schema::Node::name_</definition>
        <argsstring></argsstring>
        <name>name_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="178" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classparquet_1_1schema_1_1_node_1a759b242d4a25fd8f4198c5f27a2f7733" prot="protected" static="no" mutable="no">
        <type><ref refid="structparquet_1_1_repetition_1a7e942dfcd49240c465cdf3e1dc011af4" kindref="member">Repetition::type</ref></type>
        <definition>Repetition::type parquet::schema::Node::repetition_</definition>
        <argsstring></argsstring>
        <name>repetition_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="179" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classparquet_1_1schema_1_1_node_1aea0bd0c888704ff9c0fa832124f8e5ad" prot="protected" static="no" mutable="no">
        <type><ref refid="structparquet_1_1_converted_type_1a4c93674b47bffc29042acda48281e198" kindref="member">ConvertedType::type</ref></type>
        <definition>ConvertedType::type parquet::schema::Node::converted_type_</definition>
        <argsstring></argsstring>
        <name>converted_type_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="180" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classparquet_1_1schema_1_1_node_1ad26ec60df1d8805b768d6fb742c8c122" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; const <ref refid="classparquet_1_1_logical_type" kindref="compound">LogicalType</ref> &gt;</type>
        <definition>std::shared_ptr&lt;const LogicalType&gt; parquet::schema::Node::logical_type_</definition>
        <argsstring></argsstring>
        <name>logical_type_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="181" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classparquet_1_1schema_1_1_node_1a97de05e7887acfe99dd2891e904e61f6" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int parquet::schema::Node::field_id_</definition>
        <argsstring></argsstring>
        <name>field_id_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="182" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classparquet_1_1schema_1_1_node_1a04e7addaf1850c92e6bc49e05b08d1ab" prot="protected" static="no" mutable="no">
        <type>const <ref refid="classparquet_1_1schema_1_1_node" kindref="compound">Node</ref> *</type>
        <definition>const Node* parquet::schema::Node::parent_</definition>
        <argsstring></argsstring>
        <name>parent_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="184" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classparquet_1_1schema_1_1_node_1a5aa34e85de9d924de494185b4c954e00" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual parquet::schema::Node::~Node</definition>
        <argsstring>()</argsstring>
        <name>~Node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="101" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="101" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_node_1a16e05d4314f205ddde0f06a8c98c30a5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool parquet::schema::Node::is_primitive</definition>
        <argsstring>() const</argsstring>
        <name>is_primitive</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="103" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="103" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_node_1a4876454789f5bb9c7d9b5d2cf0619850" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool parquet::schema::Node::is_group</definition>
        <argsstring>() const</argsstring>
        <name>is_group</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="105" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="105" bodyend="105"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_node_1a0b3015fc760df30425b643541f34051d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool parquet::schema::Node::is_optional</definition>
        <argsstring>() const</argsstring>
        <name>is_optional</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="107" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_node_1afa2f550a4fe582d22eb5850082722d92" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool parquet::schema::Node::is_repeated</definition>
        <argsstring>() const</argsstring>
        <name>is_repeated</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="109" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="109" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_node_1ac43e59ae65df7e224e2ba5308e6620c2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool parquet::schema::Node::is_required</definition>
        <argsstring>() const</argsstring>
        <name>is_required</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="111" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_node_1a1b045de58dcd6db5a9ccebfa3f182832" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool parquet::schema::Node::Equals</definition>
        <argsstring>(const Node *other) const =0</argsstring>
        <name>Equals</name>
        <reimplementedby refid="classparquet_1_1schema_1_1_primitive_node_1a031007998bec9d792b4327e74c66d79b">Equals</reimplementedby>
        <reimplementedby refid="classparquet_1_1schema_1_1_group_node_1ad67f06fd3370febe80b41e2d4a96d7e4">Equals</reimplementedby>
        <param>
          <type>const <ref refid="classparquet_1_1schema_1_1_node" kindref="compound">Node</ref> *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_node_1ac84aeaa2ec13ffc81f5756f2f39911bd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; parquet::schema::Node::name</definition>
        <argsstring>() const</argsstring>
        <name>name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="115" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="115" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_node_1a094fa7e3ff9b5a8ecd07e2d9fd4d2f22" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classparquet_1_1schema_1_1_node_1aab450ce50c75c565dde2d550311c5020" kindref="member">Node::type</ref></type>
        <definition>Node::type parquet::schema::Node::node_type</definition>
        <argsstring>() const</argsstring>
        <name>node_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="117" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="117" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_node_1ac1541fa1f8d0a6db7bc12ba3855e0373" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structparquet_1_1_repetition_1a7e942dfcd49240c465cdf3e1dc011af4" kindref="member">Repetition::type</ref></type>
        <definition>Repetition::type parquet::schema::Node::repetition</definition>
        <argsstring>() const</argsstring>
        <name>repetition</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="119" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="119" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_node_1aa2175d7164787a0f1bd8d93233bc5934" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structparquet_1_1_converted_type_1a4c93674b47bffc29042acda48281e198" kindref="member">ConvertedType::type</ref></type>
        <definition>ConvertedType::type parquet::schema::Node::converted_type</definition>
        <argsstring>() const</argsstring>
        <name>converted_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="121" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="121" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_node_1a7906213a612cdd2ba7ec9695467534ec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::shared_ptr&lt; const <ref refid="classparquet_1_1_logical_type" kindref="compound">LogicalType</ref> &gt; &amp;</type>
        <definition>const std::shared_ptr&lt;const LogicalType&gt;&amp; parquet::schema::Node::logical_type</definition>
        <argsstring>() const</argsstring>
        <name>logical_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="123" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="123" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_node_1aa6442e18cc800110e673e13819c85b53" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int parquet::schema::Node::field_id</definition>
        <argsstring>() const</argsstring>
        <name>field_id</name>
        <briefdescription>
<para>The field_id value for the serialized SchemaElement. </para>        </briefdescription>
        <detaileddescription>
<para>If the field_id is less than 0 (e.g. -1), it will not be set when serialized to Thrift. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="128" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="128" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_node_1ab255f7cc073220cf4718eee621b6f992" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>parquet::schema::Node::PARQUET_DEPRECATED</definition>
        <argsstring>(&quot;id() is deprecated. Use field_id() instead&quot;) int id() const</argsstring>
        <name>PARQUET_DEPRECATED</name>
        <param>
          <type>&quot;id() is deprecated. Use <ref refid="classparquet_1_1schema_1_1_node_1aa6442e18cc800110e673e13819c85b53" kindref="member">field_id</ref>() instead&quot;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="130" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="130" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_node_1a6a6a7d17ebacfd44a495dd6e6dcf388f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classparquet_1_1schema_1_1_node" kindref="compound">Node</ref> *</type>
        <definition>const Node* parquet::schema::Node::parent</definition>
        <argsstring>() const</argsstring>
        <name>parent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="133" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="133" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_node_1a0bb5393f695b41088adfd84cda835e78" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::shared_ptr&lt; <ref refid="classparquet_1_1schema_1_1_column_path" kindref="compound">ColumnPath</ref> &gt;</type>
        <definition>const std::shared_ptr&lt;ColumnPath&gt; parquet::schema::Node::path</definition>
        <argsstring>() const</argsstring>
        <name>path</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="135" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_node_1a7876879459998b3d197d1f3d9208b573" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void parquet::schema::Node::ToParquet</definition>
        <argsstring>(void *element) const =0</argsstring>
        <name>ToParquet</name>
        <reimplementedby refid="classparquet_1_1schema_1_1_primitive_node_1a2b54f49531cb7ec02c396dcc505bc626">ToParquet</reimplementedby>
        <reimplementedby refid="classparquet_1_1schema_1_1_group_node_1a49eb54279aab4615345404aaeaeec6cc">ToParquet</reimplementedby>
        <param>
          <type>void *</type>
          <declname>element</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_node_1aa5737bec0a433a471277d242e82ee4e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void parquet::schema::Node::Visit</definition>
        <argsstring>(Visitor *visitor)=0</argsstring>
        <name>Visit</name>
        <reimplementedby refid="classparquet_1_1schema_1_1_primitive_node_1aa1f00c5fafabf4b458a13067fbfedf54">Visit</reimplementedby>
        <reimplementedby refid="classparquet_1_1schema_1_1_group_node_1a7111d90d737f09657e4edc90ce09efff">Visit</reimplementedby>
        <param>
          <type><ref refid="classparquet_1_1schema_1_1_node_1_1_visitor" kindref="compound">Visitor</ref> *</type>
          <declname>visitor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="153" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_node_1a3a83130adcdb8f7976a9ddc061c4e117" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void parquet::schema::Node::VisitConst</definition>
        <argsstring>(ConstVisitor *visitor) const =0</argsstring>
        <name>VisitConst</name>
        <reimplementedby refid="classparquet_1_1schema_1_1_primitive_node_1ae5faa5690b30d5e88982008b056b5f1e">VisitConst</reimplementedby>
        <reimplementedby refid="classparquet_1_1schema_1_1_group_node_1ad7ff56839788061e2561bd7ec1fab6b0">VisitConst</reimplementedby>
        <param>
          <type><ref refid="classparquet_1_1schema_1_1_node_1_1_const_visitor" kindref="compound">ConstVisitor</ref> *</type>
          <declname>visitor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="154" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classparquet_1_1schema_1_1_node_1a38014237d7d0ac0ccfa170568a1e7bd6" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>parquet::schema::Node::Node</definition>
        <argsstring>(Node::type type, const std::string &amp;name, Repetition::type repetition, ConvertedType::type converted_type=ConvertedType::NONE, int field_id=-1)</argsstring>
        <name>Node</name>
        <param>
          <type><ref refid="classparquet_1_1schema_1_1_node_1aab450ce50c75c565dde2d550311c5020" kindref="member">Node::type</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structparquet_1_1_repetition_1a7e942dfcd49240c465cdf3e1dc011af4" kindref="member">Repetition::type</ref></type>
          <declname>repetition</declname>
        </param>
        <param>
          <type><ref refid="structparquet_1_1_converted_type_1a4c93674b47bffc29042acda48281e198" kindref="member">ConvertedType::type</ref></type>
          <declname>converted_type</declname>
          <defval><ref refid="structparquet_1_1_converted_type_1a4c93674b47bffc29042acda48281e198adeb8756102a33f6619ada0dafcdf4167" kindref="member">ConvertedType::NONE</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>field_id</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="159" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="159" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_node_1af53a3215e176399423ea5c2ce010ade0" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>parquet::schema::Node::Node</definition>
        <argsstring>(Node::type type, const std::string &amp;name, Repetition::type repetition, std::shared_ptr&lt; const LogicalType &gt; logical_type, int field_id=-1)</argsstring>
        <name>Node</name>
        <param>
          <type><ref refid="classparquet_1_1schema_1_1_node_1aab450ce50c75c565dde2d550311c5020" kindref="member">Node::type</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structparquet_1_1_repetition_1a7e942dfcd49240c465cdf3e1dc011af4" kindref="member">Repetition::type</ref></type>
          <declname>repetition</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; const <ref refid="classparquet_1_1_logical_type" kindref="compound">LogicalType</ref> &gt;</type>
          <declname>logical_type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>field_id</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="168" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="168" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_node_1a8fe067fc9c2ded42ddfb589f4d40cf08" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool parquet::schema::Node::EqualsInternal</definition>
        <argsstring>(const Node *other) const</argsstring>
        <name>EqualsInternal</name>
        <param>
          <type>const <ref refid="classparquet_1_1schema_1_1_node" kindref="compound">Node</ref> *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="186" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_node_1a73bd2add8d170bcfefd8c667b47780c4" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parquet::schema::Node::SetParent</definition>
        <argsstring>(const Node *p_parent)</argsstring>
        <name>SetParent</name>
        <param>
          <type>const <ref refid="classparquet_1_1schema_1_1_node" kindref="compound">Node</ref> *</type>
          <declname>p_parent</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="187" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classparquet_1_1schema_1_1_node_1aa1245d6f377b032abbb20bf6de51e857" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>parquet::schema::Node::PARQUET_DISALLOW_COPY_AND_ASSIGN</definition>
        <argsstring>(Node)</argsstring>
        <name>PARQUET_DISALLOW_COPY_AND_ASSIGN</name>
        <param>
          <type><ref refid="classparquet_1_1schema_1_1_node" kindref="compound">Node</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="190" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3145">
        <label>parquet::schema::GroupNode</label>
        <link refid="classparquet_1_1schema_1_1_group_node"/>
        <childnode refid="3144" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3144">
        <label>parquet::schema::Node</label>
        <link refid="classparquet_1_1schema_1_1_node"/>
      </node>
      <node id="3146">
        <label>parquet::schema::PrimitiveNode</label>
        <link refid="classparquet_1_1schema_1_1_primitive_node"/>
        <childnode refid="3144" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3147">
        <label>parquet::schema::Node</label>
        <link refid="classparquet_1_1schema_1_1_node"/>
        <childnode refid="3147" relation="usage">
          <edgelabel>parent_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/parquet/schema.h" line="97" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="97" bodyend="191"/>
    <listofallmembers>
      <member refid="classparquet_1_1schema_1_1_node_1aa2175d7164787a0f1bd8d93233bc5934" prot="public" virt="non-virtual"><scope>parquet::schema::Node</scope><name>converted_type</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1aea0bd0c888704ff9c0fa832124f8e5ad" prot="protected" virt="non-virtual"><scope>parquet::schema::Node</scope><name>converted_type_</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a1b045de58dcd6db5a9ccebfa3f182832" prot="public" virt="pure-virtual"><scope>parquet::schema::Node</scope><name>Equals</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a8fe067fc9c2ded42ddfb589f4d40cf08" prot="protected" virt="non-virtual"><scope>parquet::schema::Node</scope><name>EqualsInternal</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1aa6442e18cc800110e673e13819c85b53" prot="public" virt="non-virtual"><scope>parquet::schema::Node</scope><name>field_id</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a97de05e7887acfe99dd2891e904e61f6" prot="protected" virt="non-virtual"><scope>parquet::schema::Node</scope><name>field_id_</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1aab450ce50c75c565dde2d550311c5020af049b3443056c6e12e06dd41630bc0db" prot="public" virt="non-virtual"><scope>parquet::schema::Node</scope><name>GROUP</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a4876454789f5bb9c7d9b5d2cf0619850" prot="public" virt="non-virtual"><scope>parquet::schema::Node</scope><name>is_group</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a0b3015fc760df30425b643541f34051d" prot="public" virt="non-virtual"><scope>parquet::schema::Node</scope><name>is_optional</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a16e05d4314f205ddde0f06a8c98c30a5" prot="public" virt="non-virtual"><scope>parquet::schema::Node</scope><name>is_primitive</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1afa2f550a4fe582d22eb5850082722d92" prot="public" virt="non-virtual"><scope>parquet::schema::Node</scope><name>is_repeated</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1ac43e59ae65df7e224e2ba5308e6620c2" prot="public" virt="non-virtual"><scope>parquet::schema::Node</scope><name>is_required</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a7906213a612cdd2ba7ec9695467534ec" prot="public" virt="non-virtual"><scope>parquet::schema::Node</scope><name>logical_type</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1ad26ec60df1d8805b768d6fb742c8c122" prot="protected" virt="non-virtual"><scope>parquet::schema::Node</scope><name>logical_type_</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1ac84aeaa2ec13ffc81f5756f2f39911bd" prot="public" virt="non-virtual"><scope>parquet::schema::Node</scope><name>name</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a7e2ce16cdf24f982f7d87f45ed8be209" prot="protected" virt="non-virtual"><scope>parquet::schema::Node</scope><name>name_</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a38014237d7d0ac0ccfa170568a1e7bd6" prot="protected" virt="non-virtual"><scope>parquet::schema::Node</scope><name>Node</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1af53a3215e176399423ea5c2ce010ade0" prot="protected" virt="non-virtual"><scope>parquet::schema::Node</scope><name>Node</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a094fa7e3ff9b5a8ecd07e2d9fd4d2f22" prot="public" virt="non-virtual"><scope>parquet::schema::Node</scope><name>node_type</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a6a6a7d17ebacfd44a495dd6e6dcf388f" prot="public" virt="non-virtual"><scope>parquet::schema::Node</scope><name>parent</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a04e7addaf1850c92e6bc49e05b08d1ab" prot="protected" virt="non-virtual"><scope>parquet::schema::Node</scope><name>parent_</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1ab255f7cc073220cf4718eee621b6f992" prot="public" virt="non-virtual"><scope>parquet::schema::Node</scope><name>PARQUET_DEPRECATED</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1aa1245d6f377b032abbb20bf6de51e857" prot="private" virt="non-virtual"><scope>parquet::schema::Node</scope><name>PARQUET_DISALLOW_COPY_AND_ASSIGN</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a0bb5393f695b41088adfd84cda835e78" prot="public" virt="non-virtual"><scope>parquet::schema::Node</scope><name>path</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1aab450ce50c75c565dde2d550311c5020a937da11d2024ff231f447c3053e74d88" prot="public" virt="non-virtual"><scope>parquet::schema::Node</scope><name>PRIMITIVE</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1ac1541fa1f8d0a6db7bc12ba3855e0373" prot="public" virt="non-virtual"><scope>parquet::schema::Node</scope><name>repetition</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a759b242d4a25fd8f4198c5f27a2f7733" prot="protected" virt="non-virtual"><scope>parquet::schema::Node</scope><name>repetition_</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a73bd2add8d170bcfefd8c667b47780c4" prot="protected" virt="non-virtual"><scope>parquet::schema::Node</scope><name>SetParent</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a7876879459998b3d197d1f3d9208b573" prot="public" virt="pure-virtual"><scope>parquet::schema::Node</scope><name>ToParquet</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1aab450ce50c75c565dde2d550311c5020" prot="public" virt="non-virtual"><scope>parquet::schema::Node</scope><name>type</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a77bbfa65c2f78dfa5fe9410376da9ec6" prot="protected" virt="non-virtual"><scope>parquet::schema::Node</scope><name>type_</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1aa5737bec0a433a471277d242e82ee4e4" prot="public" virt="pure-virtual"><scope>parquet::schema::Node</scope><name>Visit</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a3a83130adcdb8f7976a9ddc061c4e117" prot="public" virt="pure-virtual"><scope>parquet::schema::Node</scope><name>VisitConst</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a5aa34e85de9d924de494185b4c954e00" prot="public" virt="virtual"><scope>parquet::schema::Node</scope><name>~Node</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
