<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_struct_type" kind="class" language="C++" prot="public">
    <compoundname>arrow::StructType</compoundname>
    <basecompoundref refid="classarrow_1_1_nested_type" prot="public" virt="non-virtual">arrow::NestedType</basecompoundref>
    <includes refid="type_8h" local="no">arrow/type.h</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classarrow_1_1_struct_type_1a9a372413a92743e6da9448e2f462fdd1" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref></type>
        <definition>constexpr Type::type arrow::StructType::type_id</definition>
        <argsstring></argsstring>
        <name>type_id</name>
        <initializer>= <ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44aaa028b35c4e6a047c0e510ef1b0389ef" kindref="member">Type::STRUCT</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="913" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="913" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classarrow_1_1_struct_type_1a9499e242348b088a937935f660106f2a" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; Impl &gt;</type>
        <definition>std::unique_ptr&lt;Impl&gt; arrow::StructType::impl_</definition>
        <argsstring></argsstring>
        <name>impl_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="945" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="944" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1_struct_type_1a0059f564e6a85500c83f93968a9380b4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const char *</type>
        <definition>static constexpr const char* arrow::StructType::type_name</definition>
        <argsstring>()</argsstring>
        <name>type_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="915" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="915" bodyend="915"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1_struct_type_1a5802d949fcd89d1d806f75c1b7c4981f" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::StructType::StructType</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; Field &gt;&gt; &amp;fields)</argsstring>
        <name>StructType</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt;&gt; &amp;</type>
          <declname>fields</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="917" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_struct_type_1a1c78330bb1f4444fb641121f9c39fcbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::StructType::~StructType</definition>
        <argsstring>() override</argsstring>
        <name>~StructType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="919" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_struct_type_1a5c4c6bfa924d21316798b936ec37d18d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="structarrow_1_1_data_type_layout" kindref="compound">DataTypeLayout</ref></type>
        <definition>DataTypeLayout arrow::StructType::layout</definition>
        <argsstring>() const override</argsstring>
        <name>layout</name>
        <reimplements refid="classarrow_1_1_data_type_1a4fe70f6a45eda029ea118c8470ff925e">layout</reimplements>
        <briefdescription>
<para>Return the data type layout. </para>        </briefdescription>
        <detaileddescription>
<para>Children are not included.</para><para><simplesect kind="note"><para>Experimental API </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="921" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="921" bodyend="923"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_struct_type_1a61ef958c691895c85bf1f3d297b14351" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string arrow::StructType::ToString</definition>
        <argsstring>() const override</argsstring>
        <name>ToString</name>
        <reimplements refid="classarrow_1_1_data_type_1a944727354fb11138ebd46368319598f2">ToString</reimplements>
        <briefdescription>
<para>A string representation of the type, including any children. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="925" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_struct_type_1a5a6f3d58e837712a49e507925e2b40ec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string arrow::StructType::name</definition>
        <argsstring>() const override</argsstring>
        <name>name</name>
        <reimplements refid="classarrow_1_1_data_type_1a94985d12273f5dd353d6142921299d4d">name</reimplements>
        <briefdescription>
<para>A string name of the type, omitting any child fields. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Experimental API </para></simplesect>
<simplesect kind="since"><para>0.7.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="926" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="926" bodyend="926"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_struct_type_1a949bf4c4d7333dbb148fa2af3541f066" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Field&gt; arrow::StructType::GetFieldByName</definition>
        <argsstring>(const std::string &amp;name) const</argsstring>
        <name>GetFieldByName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Returns null if name not found. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="929" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_struct_type_1a1bb82c72b691ba80b7e802e028d7fc87" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;Field&gt; &gt; arrow::StructType::GetAllFieldsByName</definition>
        <argsstring>(const std::string &amp;name) const</argsstring>
        <name>GetAllFieldsByName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Return all fields having this name. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="932" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_struct_type_1a341d4fe0dfc1c693c781de79a178f0e5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int arrow::StructType::GetFieldIndex</definition>
        <argsstring>(const std::string &amp;name) const</argsstring>
        <name>GetFieldIndex</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Returns -1 if name not found or if there are multiple fields having the same name. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="936" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_struct_type_1a81d2d1599aba5cd3f2c90e8aae1c9f46" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt;int&gt; arrow::StructType::GetAllFieldIndices</definition>
        <argsstring>(const std::string &amp;name) const</argsstring>
        <name>GetAllFieldIndices</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Return the indices of all fields having this name in sorted order. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="939" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classarrow_1_1_struct_type_1a6e37374bd1f4898dcb06e1315147e778" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arrow::StructType::ComputeFingerprint</definition>
        <argsstring>() const override</argsstring>
        <name>ComputeFingerprint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="942" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Concrete type class for struct data. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4432">
        <label>arrow::ParametricType</label>
        <link refid="classarrow_1_1_parametric_type"/>
      </node>
      <node id="4429">
        <label>arrow::NestedType</label>
        <link refid="classarrow_1_1_nested_type"/>
        <childnode refid="4430" relation="public-inheritance">
        </childnode>
        <childnode refid="4432" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4428">
        <label>arrow::StructType</label>
        <link refid="classarrow_1_1_struct_type"/>
        <childnode refid="4429" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4430">
        <label>arrow::DataType</label>
        <link refid="classarrow_1_1_data_type"/>
        <childnode refid="4431" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4431">
        <label>arrow::detail::Fingerprintable</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4437">
        <label>arrow::ParametricType</label>
        <link refid="classarrow_1_1_parametric_type"/>
      </node>
      <node id="4434">
        <label>arrow::NestedType</label>
        <link refid="classarrow_1_1_nested_type"/>
        <childnode refid="4435" relation="public-inheritance">
        </childnode>
        <childnode refid="4437" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4433">
        <label>arrow::StructType</label>
        <link refid="classarrow_1_1_struct_type"/>
        <childnode refid="4434" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4435">
        <label>arrow::DataType</label>
        <link refid="classarrow_1_1_data_type"/>
        <childnode refid="4436" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4436">
        <label>arrow::detail::Fingerprintable</label>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/type.h" line="911" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="911" bodyend="946"/>
    <listofallmembers>
      <member refid="classarrow_1_1_data_type_1a97571c4039e363f7ebcb09f7c789064a" prot="public" virt="non-virtual"><scope>arrow::StructType</scope><name>Accept</name></member>
      <member refid="classarrow_1_1_data_type_1a3c9f77b8d895abd8618566386cbeb7c0" prot="public" virt="non-virtual"><scope>arrow::StructType</scope><name>child</name></member>
      <member refid="classarrow_1_1_data_type_1a36061c037a2e6e974cc3b22dfb6a5bac" prot="public" virt="non-virtual"><scope>arrow::StructType</scope><name>children</name></member>
      <member refid="classarrow_1_1_data_type_1a8dd2f042289733133c386463afcea902" prot="protected" virt="non-virtual"><scope>arrow::StructType</scope><name>children_</name></member>
      <member refid="classarrow_1_1_struct_type_1a6e37374bd1f4898dcb06e1315147e778" prot="private" virt="non-virtual"><scope>arrow::StructType</scope><name>ComputeFingerprint</name></member>
      <member refid="classarrow_1_1_data_type_1a1e0bf7cc98ce39872b8044f375d7de6b" prot="protected" virt="non-virtual"><scope>arrow::StructType</scope><name>ComputeMetadataFingerprint</name></member>
      <member refid="classarrow_1_1_data_type_1a1b8a7ece05983649f67396177f40e844" prot="public" virt="non-virtual"><scope>arrow::StructType</scope><name>DataType</name></member>
      <member refid="classarrow_1_1_data_type_1aaf003113bb8f4c51a03a16f4b27a52bb" prot="public" virt="non-virtual"><scope>arrow::StructType</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_data_type_1ae974f4c707ef998d25368d278818af6b" prot="public" virt="non-virtual"><scope>arrow::StructType</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_struct_type_1a81d2d1599aba5cd3f2c90e8aae1c9f46" prot="public" virt="non-virtual"><scope>arrow::StructType</scope><name>GetAllFieldIndices</name></member>
      <member refid="classarrow_1_1_struct_type_1a1bb82c72b691ba80b7e802e028d7fc87" prot="public" virt="non-virtual"><scope>arrow::StructType</scope><name>GetAllFieldsByName</name></member>
      <member refid="classarrow_1_1_struct_type_1a949bf4c4d7333dbb148fa2af3541f066" prot="public" virt="non-virtual"><scope>arrow::StructType</scope><name>GetFieldByName</name></member>
      <member refid="classarrow_1_1_struct_type_1a341d4fe0dfc1c693c781de79a178f0e5" prot="public" virt="non-virtual"><scope>arrow::StructType</scope><name>GetFieldIndex</name></member>
      <member refid="classarrow_1_1_data_type_1a5ec6a1c93420c68e9c8065d4a56ad645" prot="public" virt="non-virtual"><scope>arrow::StructType</scope><name>id</name></member>
      <member refid="classarrow_1_1_data_type_1aa2704f1cfc50018d02e109b32f67e422" prot="protected" virt="non-virtual"><scope>arrow::StructType</scope><name>id_</name></member>
      <member refid="classarrow_1_1_struct_type_1a9499e242348b088a937935f660106f2a" prot="private" virt="non-virtual"><scope>arrow::StructType</scope><name>impl_</name></member>
      <member refid="classarrow_1_1_struct_type_1a5c4c6bfa924d21316798b936ec37d18d" prot="public" virt="virtual"><scope>arrow::StructType</scope><name>layout</name></member>
      <member refid="classarrow_1_1_struct_type_1a5a6f3d58e837712a49e507925e2b40ec" prot="public" virt="virtual"><scope>arrow::StructType</scope><name>name</name></member>
      <member refid="classarrow_1_1_data_type_1ac8920179a6c1e7f434c495d5ec4662f1" prot="public" virt="non-virtual"><scope>arrow::StructType</scope><name>num_children</name></member>
      <member refid="classarrow_1_1_struct_type_1a5802d949fcd89d1d806f75c1b7c4981f" prot="public" virt="non-virtual"><scope>arrow::StructType</scope><name>StructType</name></member>
      <member refid="classarrow_1_1_struct_type_1a61ef958c691895c85bf1f3d297b14351" prot="public" virt="virtual"><scope>arrow::StructType</scope><name>ToString</name></member>
      <member refid="classarrow_1_1_struct_type_1a9a372413a92743e6da9448e2f462fdd1" prot="public" virt="non-virtual"><scope>arrow::StructType</scope><name>type_id</name></member>
      <member refid="classarrow_1_1_struct_type_1a0059f564e6a85500c83f93968a9380b4" prot="public" virt="non-virtual"><scope>arrow::StructType</scope><name>type_name</name></member>
      <member refid="classarrow_1_1_data_type_1a268b7e57ebec17a48930c73d8c0605d2" prot="public" virt="non-virtual"><scope>arrow::StructType</scope><name>~DataType</name></member>
      <member refid="classarrow_1_1_struct_type_1a1c78330bb1f4444fb641121f9c39fcbb" prot="public" virt="non-virtual"><scope>arrow::StructType</scope><name>~StructType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
