<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_basic_decimal128" kind="class" language="C++" prot="public">
    <compoundname>arrow::BasicDecimal128</compoundname>
    <derivedcompoundref refid="classarrow_1_1_decimal128" prot="public" virt="non-virtual">arrow::Decimal128</derivedcompoundref>
    <includes refid="basic__decimal_8h" local="no">arrow/util/basic_decimal.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classarrow_1_1_basic_decimal128_1a1b2298246f9b34fa1b48227a8476e4b6" prot="private" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t arrow::BasicDecimal128::low_bits_</definition>
        <argsstring></argsstring>
        <name>low_bits_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/basic_decimal.h" line="151" column="1" bodyfile="/arrow/cpp/src/arrow/util/basic_decimal.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_basic_decimal128_1acb1e74c123e29823964a33b0fdf1e58d" prot="private" static="no" mutable="no">
        <type>int64_t</type>
        <definition>int64_t arrow::BasicDecimal128::high_bits_</definition>
        <argsstring></argsstring>
        <name>high_bits_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/basic_decimal.h" line="152" column="1" bodyfile="/arrow/cpp/src/arrow/util/basic_decimal.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1_basic_decimal128_1ab8dbd8183a4e271acf6810a2a220b846" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr arrow::BasicDecimal128::BasicDecimal128</definition>
        <argsstring>(int64_t high, uint64_t low) noexcept</argsstring>
        <name>BasicDecimal128</name>
        <param>
          <type>int64_t</type>
          <declname>high</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>low</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref> from the two&apos;s complement representation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/basic_decimal.h" line="46" column="1" bodyfile="/arrow/cpp/src/arrow/util/basic_decimal.h" bodystart="46" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_basic_decimal128_1abd9623ff9a68dddc986d799669b755c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr arrow::BasicDecimal128::BasicDecimal128</definition>
        <argsstring>() noexcept</argsstring>
        <name>BasicDecimal128</name>
        <briefdescription>
<para>Empty constructor creates a <ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref> with a value of 0. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/basic_decimal.h" line="50" column="1" bodyfile="/arrow/cpp/src/arrow/util/basic_decimal.h" bodystart="50" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_basic_decimal128_1a5a2c65217e065edf4489d5d0577335ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>typename std::enable_if&lt;std::is_integral&lt;T&gt;::value, T&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>constexpr</type>
        <definition>constexpr arrow::BasicDecimal128::BasicDecimal128</definition>
        <argsstring>(T value) noexcept</argsstring>
        <name>BasicDecimal128</name>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Convert any integer value into a <ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/basic_decimal.h" line="55" column="1" bodyfile="/arrow/cpp/src/arrow/util/basic_decimal.h" bodystart="55" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_basic_decimal128_1aaa95f171daf1652e342b40c020d44505" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::BasicDecimal128::BasicDecimal128</definition>
        <argsstring>(const uint8_t *bytes)</argsstring>
        <name>BasicDecimal128</name>
        <param>
          <type>const uint8_t *</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref> from an array of bytes. </para>        </briefdescription>
        <detaileddescription>
<para>Bytes are assumed to be in little-endian byte order. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/basic_decimal.h" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_basic_decimal128_1a1e8fa38d5be5b81c7b53e2a18be1aaf0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref> &amp;</type>
        <definition>BasicDecimal128&amp; arrow::BasicDecimal128::Negate</definition>
        <argsstring>()</argsstring>
        <name>Negate</name>
        <briefdescription>
<para>Negate the current value (in-place) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/basic_decimal.h" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_basic_decimal128_1af1a7ebfd2c856eb2982cf4b86f88a49d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref> &amp;</type>
        <definition>BasicDecimal128&amp; arrow::BasicDecimal128::Abs</definition>
        <argsstring>()</argsstring>
        <name>Abs</name>
        <briefdescription>
<para>Absolute value (in-place) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/basic_decimal.h" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_basic_decimal128_1aca86073f3ee5d0672bed198e14f350a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref> &amp;</type>
        <definition>BasicDecimal128&amp; arrow::BasicDecimal128::operator+=</definition>
        <argsstring>(const BasicDecimal128 &amp;right)</argsstring>
        <name>operator+=</name>
        <param>
          <type>const <ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Add a number to this one. The result is truncated to 128 bits. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/basic_decimal.h" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_basic_decimal128_1a74fe3043a70380a2b4cc0f81ba8807ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref> &amp;</type>
        <definition>BasicDecimal128&amp; arrow::BasicDecimal128::operator-=</definition>
        <argsstring>(const BasicDecimal128 &amp;right)</argsstring>
        <name>operator-=</name>
        <param>
          <type>const <ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Subtract a number from this one. The result is truncated to 128 bits. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/basic_decimal.h" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_basic_decimal128_1ac38cf238f610c5357954f8be48453a3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref> &amp;</type>
        <definition>BasicDecimal128&amp; arrow::BasicDecimal128::operator*=</definition>
        <argsstring>(const BasicDecimal128 &amp;right)</argsstring>
        <name>operator*=</name>
        <param>
          <type>const <ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Multiply this number by another number. The result is truncated to 128 bits. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/basic_decimal.h" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_basic_decimal128_1a57c2f0b06d30549cbca281d9174c3b65" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacearrow_1a57a966e51cab768580c6f9a9427f34d2" kindref="member">DecimalStatus</ref></type>
        <definition>DecimalStatus arrow::BasicDecimal128::Divide</definition>
        <argsstring>(const BasicDecimal128 &amp;divisor, BasicDecimal128 *result, BasicDecimal128 *remainder) const</argsstring>
        <name>Divide</name>
        <param>
          <type>const <ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref> &amp;</type>
          <declname>divisor</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref> *</type>
          <declname>result</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref> *</type>
          <declname>remainder</declname>
        </param>
        <briefdescription>
<para>Divide this number by right and return the result. </para>        </briefdescription>
        <detaileddescription>
<para>This operation is not destructive. The answer rounds to zero. Signs work like: 21 / 5 -&gt; 4, 1 -21 / 5 -&gt; -4, -1 21 / -5 -&gt; -4, 1 -21 / -5 -&gt; 4, -1 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">divisor</parametername>
</parameternamelist>
<parameterdescription>
<para>the number to divide by </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>the quotient </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">remainder</parametername>
</parameternamelist>
<parameterdescription>
<para>the remainder after the division </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/basic_decimal.h" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_basic_decimal128_1a54c2cfd2eddf89c16fa0ec729fc7f572" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref> &amp;</type>
        <definition>BasicDecimal128&amp; arrow::BasicDecimal128::operator/=</definition>
        <argsstring>(const BasicDecimal128 &amp;right)</argsstring>
        <name>operator/=</name>
        <param>
          <type>const <ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>In-place division. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/basic_decimal.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_basic_decimal128_1ac18e2a4f0dae6a527309fa75adbf5b1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref> &amp;</type>
        <definition>BasicDecimal128&amp; arrow::BasicDecimal128::operator|=</definition>
        <argsstring>(const BasicDecimal128 &amp;right)</argsstring>
        <name>operator|=</name>
        <param>
          <type>const <ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Bitwise &quot;or&quot; between two <ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/basic_decimal.h" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_basic_decimal128_1a57dcaabfe2dd72c1537fa64b39f2d157" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref> &amp;</type>
        <definition>BasicDecimal128&amp; arrow::BasicDecimal128::operator&amp;=</definition>
        <argsstring>(const BasicDecimal128 &amp;right)</argsstring>
        <name>operator &amp;=</name>
        <param>
          <type>const <ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
<para>Bitwise &quot;and&quot; between two <ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/basic_decimal.h" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_basic_decimal128_1a41d9fc39b7a1abee5a97d88449f7c669" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref> &amp;</type>
        <definition>BasicDecimal128&amp; arrow::BasicDecimal128::operator&lt;&lt;=</definition>
        <argsstring>(uint32_t bits)</argsstring>
        <name>operator&lt;&lt;=</name>
        <param>
          <type>uint32_t</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Shift left by the given number of bits. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/basic_decimal.h" line="105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_basic_decimal128_1a2b8c66bf8404e54d85a331d93e3e6ee7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref> &amp;</type>
        <definition>BasicDecimal128&amp; arrow::BasicDecimal128::operator&gt;&gt;=</definition>
        <argsstring>(uint32_t bits)</argsstring>
        <name>operator&gt;&gt;=</name>
        <param>
          <type>uint32_t</type>
          <declname>bits</declname>
        </param>
        <briefdescription>
<para>Shift right by the given number of bits. Negative values will. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/basic_decimal.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_basic_decimal128_1a37cbf86250dd19b6e99bc2fcaf7faffe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t arrow::BasicDecimal128::high_bits</definition>
        <argsstring>() const</argsstring>
        <name>high_bits</name>
        <briefdescription>
<para>Get the high bits of the two&apos;s complement representation of the number. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/basic_decimal.h" line="111" column="1" bodyfile="/arrow/cpp/src/arrow/util/basic_decimal.h" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_basic_decimal128_1aa666ec294a59f7f84ae7b1efa29d8f1b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t arrow::BasicDecimal128::low_bits</definition>
        <argsstring>() const</argsstring>
        <name>low_bits</name>
        <briefdescription>
<para>Get the low bits of the two&apos;s complement representation of the number. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/basic_decimal.h" line="114" column="1" bodyfile="/arrow/cpp/src/arrow/util/basic_decimal.h" bodystart="114" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_basic_decimal128_1a4972ec4c2efa635d665919de8343bd9b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::array&lt; uint8_t, 16 &gt;</type>
        <definition>std::array&lt;uint8_t, 16&gt; arrow::BasicDecimal128::ToBytes</definition>
        <argsstring>() const</argsstring>
        <name>ToBytes</name>
        <briefdescription>
<para>Return the raw bytes of the value in little-endian byte order. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/basic_decimal.h" line="117" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_basic_decimal128_1a1bd7aadfb51bcb66408da0c56bfa3926" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void arrow::BasicDecimal128::ToBytes</definition>
        <argsstring>(uint8_t *out) const</argsstring>
        <name>ToBytes</name>
        <param>
          <type>uint8_t *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/basic_decimal.h" line="118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_basic_decimal128_1a4cf2dc8694a1cd69d93d3b5e24eef93f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void arrow::BasicDecimal128::GetWholeAndFraction</definition>
        <argsstring>(int32_t scale, BasicDecimal128 *whole, BasicDecimal128 *fraction) const</argsstring>
        <name>GetWholeAndFraction</name>
        <param>
          <type>int32_t</type>
          <declname>scale</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref> *</type>
          <declname>whole</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref> *</type>
          <declname>fraction</declname>
        </param>
        <briefdescription>
<para>separate the integer and fractional parts for the given scale. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/basic_decimal.h" line="121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_basic_decimal128_1a9c10a2f738aff0ac546fad1836b526e3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacearrow_1a57a966e51cab768580c6f9a9427f34d2" kindref="member">DecimalStatus</ref></type>
        <definition>DecimalStatus arrow::BasicDecimal128::Rescale</definition>
        <argsstring>(int32_t original_scale, int32_t new_scale, BasicDecimal128 *out) const</argsstring>
        <name>Rescale</name>
        <param>
          <type>int32_t</type>
          <declname>original_scale</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>new_scale</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Convert <ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref> from one scale to another. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/basic_decimal.h" line="128" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_basic_decimal128_1aa3fda3252de7b0b98622a4c74a681791" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref></type>
        <definition>BasicDecimal128 arrow::BasicDecimal128::IncreaseScaleBy</definition>
        <argsstring>(int32_t increase_by) const</argsstring>
        <name>IncreaseScaleBy</name>
        <param>
          <type>int32_t</type>
          <declname>increase_by</declname>
        </param>
        <briefdescription>
<para>Scale up. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/basic_decimal.h" line="132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_basic_decimal128_1ad101c677c1bb3792fc9368b5d7a0e3d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref></type>
        <definition>BasicDecimal128 arrow::BasicDecimal128::ReduceScaleBy</definition>
        <argsstring>(int32_t reduce_by, bool round=true) const</argsstring>
        <name>ReduceScaleBy</name>
        <param>
          <type>int32_t</type>
          <declname>reduce_by</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>round</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Scale down. </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>If &apos;round&apos; is true, the right-most digits are dropped and the result value is rounded up (+1 for +ve, -1 for -ve) based on the value of the dropped digits (&gt;= 10^reduce_by / 2).</para></listitem><listitem><para>If &apos;round&apos; is false, the right-most digits are simply dropped. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/basic_decimal.h" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_basic_decimal128_1a57946ec32781f328df74209d9b88253e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t arrow::BasicDecimal128::Sign</definition>
        <argsstring>() const</argsstring>
        <name>Sign</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/basic_decimal.h" line="142" column="1" bodyfile="/arrow/cpp/src/arrow/util/basic_decimal.h" bodystart="142" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_basic_decimal128_1a7f76fdf66e454102dff13093563bb830" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t arrow::BasicDecimal128::CountLeadingBinaryZeros</definition>
        <argsstring>() const</argsstring>
        <name>CountLeadingBinaryZeros</name>
        <briefdescription>
<para>count the number of leading binary zeroes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/basic_decimal.h" line="145" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1_basic_decimal128_1abf9d597ea47ea49fc1658841a17c9584" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref></type>
        <definition>static BasicDecimal128 arrow::BasicDecimal128::Abs</definition>
        <argsstring>(const BasicDecimal128 &amp;left)</argsstring>
        <name>Abs</name>
        <param>
          <type>const <ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <briefdescription>
<para>Absolute value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/basic_decimal.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_basic_decimal128_1a371b7a31bbf63f3fd841b9a17e95f1c0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref> &amp;</type>
        <definition>static const BasicDecimal128&amp; arrow::BasicDecimal128::GetScaleMultiplier</definition>
        <argsstring>(int32_t scale)</argsstring>
        <name>GetScaleMultiplier</name>
        <param>
          <type>int32_t</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
<para>Scale multiplier for given scale value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/basic_decimal.h" line="125" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_basic_decimal128_1aaacb1464877b0e4eabd6cf15600301f4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref> &amp;</type>
        <definition>static const BasicDecimal128&amp; arrow::BasicDecimal128::GetMaxValue</definition>
        <argsstring>()</argsstring>
        <name>GetMaxValue</name>
        <briefdescription>
<para>Get the maximum valid unscaled decimal value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/basic_decimal.h" line="148" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a signed 128-bit integer in two&apos;s complement. </para>    </briefdescription>
    <detaileddescription>
<para>This class is also compiled into LLVM IR - so, it should not have cpp references like streams and boost. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="264">
        <label>arrow::BasicDecimal128</label>
        <link refid="classarrow_1_1_basic_decimal128"/>
      </node>
      <node id="265">
        <label>arrow::Decimal128</label>
        <link refid="classarrow_1_1_decimal128"/>
        <childnode refid="264" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/arrow/cpp/src/arrow/util/basic_decimal.h" line="43" column="1" bodyfile="/arrow/cpp/src/arrow/util/basic_decimal.h" bodystart="43" bodyend="153"/>
    <listofallmembers>
      <member refid="classarrow_1_1_basic_decimal128_1af1a7ebfd2c856eb2982cf4b86f88a49d" prot="public" virt="non-virtual"><scope>arrow::BasicDecimal128</scope><name>Abs</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1abf9d597ea47ea49fc1658841a17c9584" prot="public" virt="non-virtual"><scope>arrow::BasicDecimal128</scope><name>Abs</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1ab8dbd8183a4e271acf6810a2a220b846" prot="public" virt="non-virtual"><scope>arrow::BasicDecimal128</scope><name>BasicDecimal128</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1abd9623ff9a68dddc986d799669b755c6" prot="public" virt="non-virtual"><scope>arrow::BasicDecimal128</scope><name>BasicDecimal128</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1a5a2c65217e065edf4489d5d0577335ed" prot="public" virt="non-virtual"><scope>arrow::BasicDecimal128</scope><name>BasicDecimal128</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1aaa95f171daf1652e342b40c020d44505" prot="public" virt="non-virtual"><scope>arrow::BasicDecimal128</scope><name>BasicDecimal128</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1a7f76fdf66e454102dff13093563bb830" prot="public" virt="non-virtual"><scope>arrow::BasicDecimal128</scope><name>CountLeadingBinaryZeros</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1a57c2f0b06d30549cbca281d9174c3b65" prot="public" virt="non-virtual"><scope>arrow::BasicDecimal128</scope><name>Divide</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1aaacb1464877b0e4eabd6cf15600301f4" prot="public" virt="non-virtual"><scope>arrow::BasicDecimal128</scope><name>GetMaxValue</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1a371b7a31bbf63f3fd841b9a17e95f1c0" prot="public" virt="non-virtual"><scope>arrow::BasicDecimal128</scope><name>GetScaleMultiplier</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1a4cf2dc8694a1cd69d93d3b5e24eef93f" prot="public" virt="non-virtual"><scope>arrow::BasicDecimal128</scope><name>GetWholeAndFraction</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1a37cbf86250dd19b6e99bc2fcaf7faffe" prot="public" virt="non-virtual"><scope>arrow::BasicDecimal128</scope><name>high_bits</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1acb1e74c123e29823964a33b0fdf1e58d" prot="private" virt="non-virtual"><scope>arrow::BasicDecimal128</scope><name>high_bits_</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1aa3fda3252de7b0b98622a4c74a681791" prot="public" virt="non-virtual"><scope>arrow::BasicDecimal128</scope><name>IncreaseScaleBy</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1aa666ec294a59f7f84ae7b1efa29d8f1b" prot="public" virt="non-virtual"><scope>arrow::BasicDecimal128</scope><name>low_bits</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1a1b2298246f9b34fa1b48227a8476e4b6" prot="private" virt="non-virtual"><scope>arrow::BasicDecimal128</scope><name>low_bits_</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1a1e8fa38d5be5b81c7b53e2a18be1aaf0" prot="public" virt="non-virtual"><scope>arrow::BasicDecimal128</scope><name>Negate</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1a57dcaabfe2dd72c1537fa64b39f2d157" prot="public" virt="non-virtual"><scope>arrow::BasicDecimal128</scope><name>operator &amp;=</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1ac38cf238f610c5357954f8be48453a3b" prot="public" virt="non-virtual"><scope>arrow::BasicDecimal128</scope><name>operator*=</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1aca86073f3ee5d0672bed198e14f350a9" prot="public" virt="non-virtual"><scope>arrow::BasicDecimal128</scope><name>operator+=</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1a74fe3043a70380a2b4cc0f81ba8807ca" prot="public" virt="non-virtual"><scope>arrow::BasicDecimal128</scope><name>operator-=</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1a54c2cfd2eddf89c16fa0ec729fc7f572" prot="public" virt="non-virtual"><scope>arrow::BasicDecimal128</scope><name>operator/=</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1a41d9fc39b7a1abee5a97d88449f7c669" prot="public" virt="non-virtual"><scope>arrow::BasicDecimal128</scope><name>operator&lt;&lt;=</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1a2b8c66bf8404e54d85a331d93e3e6ee7" prot="public" virt="non-virtual"><scope>arrow::BasicDecimal128</scope><name>operator&gt;&gt;=</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1ac18e2a4f0dae6a527309fa75adbf5b1f" prot="public" virt="non-virtual"><scope>arrow::BasicDecimal128</scope><name>operator|=</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1ad101c677c1bb3792fc9368b5d7a0e3d1" prot="public" virt="non-virtual"><scope>arrow::BasicDecimal128</scope><name>ReduceScaleBy</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1a9c10a2f738aff0ac546fad1836b526e3" prot="public" virt="non-virtual"><scope>arrow::BasicDecimal128</scope><name>Rescale</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1a57946ec32781f328df74209d9b88253e" prot="public" virt="non-virtual"><scope>arrow::BasicDecimal128</scope><name>Sign</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1a4972ec4c2efa635d665919de8343bd9b" prot="public" virt="non-virtual"><scope>arrow::BasicDecimal128</scope><name>ToBytes</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1a1bd7aadfb51bcb66408da0c56bfa3926" prot="public" virt="non-virtual"><scope>arrow::BasicDecimal128</scope><name>ToBytes</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
