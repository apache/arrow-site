<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="bloom__filter_8h" kind="file" language="C++">
    <compoundname>bloom_filter.h</compoundname>
    <includes local="no">cmath</includes>
    <includes local="no">cstdint</includes>
    <includes local="no">memory</includes>
    <includes refid="arrow_2util_2logging_8h" local="yes">arrow/util/logging.h</includes>
    <includes refid="hasher_8h" local="yes">parquet/hasher.h</includes>
    <includes refid="parquet_2platform_8h" local="yes">parquet/platform.h</includes>
    <includes refid="parquet_2types_8h" local="yes">parquet/types.h</includes>
    <incdepgraph>
      <node id="18739">
        <label>/arrow/cpp/src/parquet/bloom_filter.h</label>
        <link refid="bloom__filter_8h"/>
        <childnode refid="18740" relation="include">
        </childnode>
        <childnode refid="18741" relation="include">
        </childnode>
        <childnode refid="18742" relation="include">
        </childnode>
        <childnode refid="18743" relation="include">
        </childnode>
        <childnode refid="18748" relation="include">
        </childnode>
        <childnode refid="18758" relation="include">
        </childnode>
        <childnode refid="18749" relation="include">
        </childnode>
      </node>
      <node id="18776">
        <label>atomic</label>
      </node>
      <node id="18765">
        <label>arrow/util/compare.h</label>
        <link refid="util_2compare_8h"/>
        <childnode refid="18742" relation="include">
        </childnode>
        <childnode refid="18755" relation="include">
        </childnode>
        <childnode refid="18760" relation="include">
        </childnode>
        <childnode refid="18746" relation="include">
        </childnode>
      </node>
      <node id="18754">
        <label>limits</label>
      </node>
      <node id="18741">
        <label>cstdint</label>
      </node>
      <node id="18759">
        <label>arrow/buffer.h</label>
        <link refid="buffer_8h"/>
        <childnode refid="18741" relation="include">
        </childnode>
        <childnode refid="18751" relation="include">
        </childnode>
        <childnode refid="18742" relation="include">
        </childnode>
        <childnode refid="18745" relation="include">
        </childnode>
        <childnode refid="18755" relation="include">
        </childnode>
        <childnode refid="18760" relation="include">
        </childnode>
        <childnode refid="18761" relation="include">
        </childnode>
        <childnode refid="18762" relation="include">
        </childnode>
        <childnode refid="18763" relation="include">
        </childnode>
        <childnode refid="18766" relation="include">
        </childnode>
        <childnode refid="18764" relation="include">
        </childnode>
        <childnode refid="18746" relation="include">
        </childnode>
        <childnode refid="18756" relation="include">
        </childnode>
        <childnode refid="18747" relation="include">
        </childnode>
      </node>
      <node id="18778">
        <label>endian.h</label>
      </node>
      <node id="18766">
        <label>arrow/status.h</label>
        <link refid="status_8h"/>
        <childnode refid="18751" relation="include">
        </childnode>
        <childnode refid="18767" relation="include">
        </childnode>
        <childnode refid="18742" relation="include">
        </childnode>
        <childnode refid="18745" relation="include">
        </childnode>
        <childnode refid="18760" relation="include">
        </childnode>
        <childnode refid="18765" relation="include">
        </childnode>
        <childnode refid="18746" relation="include">
        </childnode>
        <childnode refid="18768" relation="include">
        </childnode>
        <childnode refid="18747" relation="include">
        </childnode>
      </node>
      <node id="18782">
        <label>arrow/util/functional.h</label>
        <link refid="functional_8h"/>
        <childnode refid="18783" relation="include">
        </childnode>
        <childnode refid="18755" relation="include">
        </childnode>
        <childnode refid="18746" relation="include">
        </childnode>
      </node>
      <node id="18764">
        <label>arrow/type_fwd.h</label>
        <link refid="type__fwd_8h"/>
        <childnode refid="18742" relation="include">
        </childnode>
        <childnode refid="18745" relation="include">
        </childnode>
        <childnode refid="18761" relation="include">
        </childnode>
        <childnode refid="18746" relation="include">
        </childnode>
        <childnode refid="18747" relation="include">
        </childnode>
      </node>
      <node id="18758">
        <label>parquet/platform.h</label>
        <link refid="parquet_2platform_8h"/>
        <childnode refid="18741" relation="include">
        </childnode>
        <childnode refid="18742" relation="include">
        </childnode>
        <childnode refid="18759" relation="include">
        </childnode>
        <childnode refid="18769" relation="include">
        </childnode>
        <childnode refid="18770" relation="include">
        </childnode>
        <childnode refid="18775" relation="include">
        </childnode>
        <childnode refid="18766" relation="include">
        </childnode>
        <childnode refid="18777" relation="include">
        </childnode>
        <childnode refid="18785" relation="include">
        </childnode>
        <childnode refid="18746" relation="include">
        </childnode>
        <childnode refid="18756" relation="include">
        </childnode>
      </node>
      <node id="18769">
        <label>arrow/io/interfaces.h</label>
        <link refid="interfaces_8h"/>
        <childnode refid="18741" relation="include">
        </childnode>
        <childnode refid="18742" relation="include">
        </childnode>
        <childnode refid="18745" relation="include">
        </childnode>
        <childnode refid="18761" relation="include">
        </childnode>
        <childnode refid="18763" relation="include">
        </childnode>
        <childnode refid="18764" relation="include">
        </childnode>
        <childnode refid="18746" relation="include">
        </childnode>
        <childnode refid="18756" relation="include">
        </childnode>
        <childnode refid="18747" relation="include">
        </childnode>
      </node>
      <node id="18740">
        <label>cmath</label>
      </node>
      <node id="18781">
        <label>cassert</label>
      </node>
      <node id="18774">
        <label>arrow/util/checked_cast.h</label>
        <link refid="checked__cast_8h"/>
        <childnode refid="18742" relation="include">
        </childnode>
        <childnode refid="18755" relation="include">
        </childnode>
      </node>
      <node id="18745">
        <label>string</label>
      </node>
      <node id="18757">
        <label>arrow/vendored/string_view.hpp</label>
      </node>
      <node id="18744">
        <label>ostream</label>
      </node>
      <node id="18747">
        <label>arrow/util/visibility.h</label>
        <link refid="arrow_2util_2visibility_8h"/>
      </node>
      <node id="18743">
        <label>arrow/util/logging.h</label>
        <link refid="arrow_2util_2logging_8h"/>
        <childnode refid="18742" relation="include">
        </childnode>
        <childnode refid="18744" relation="include">
        </childnode>
        <childnode refid="18745" relation="include">
        </childnode>
        <childnode refid="18746" relation="include">
        </childnode>
        <childnode refid="18747" relation="include">
        </childnode>
      </node>
      <node id="18762">
        <label>arrow/device.h</label>
        <link refid="device_8h"/>
        <childnode refid="18741" relation="include">
        </childnode>
        <childnode refid="18742" relation="include">
        </childnode>
        <childnode refid="18745" relation="include">
        </childnode>
        <childnode refid="18763" relation="include">
        </childnode>
        <childnode refid="18764" relation="include">
        </childnode>
        <childnode refid="18765" relation="include">
        </childnode>
        <childnode refid="18746" relation="include">
        </childnode>
        <childnode refid="18747" relation="include">
        </childnode>
      </node>
      <node id="18775">
        <label>arrow/memory_pool.h</label>
        <link refid="memory__pool_8h"/>
        <childnode refid="18776" relation="include">
        </childnode>
        <childnode refid="18741" relation="include">
        </childnode>
        <childnode refid="18742" relation="include">
        </childnode>
        <childnode refid="18745" relation="include">
        </childnode>
        <childnode refid="18766" relation="include">
        </childnode>
        <childnode refid="18764" relation="include">
        </childnode>
        <childnode refid="18747" relation="include">
        </childnode>
      </node>
      <node id="18777">
        <label>arrow/util/bit_util.h</label>
        <link refid="bit__util_8h"/>
        <childnode refid="18778" relation="include">
        </childnode>
        <childnode refid="18750" relation="include">
        </childnode>
        <childnode refid="18779" relation="include">
        </childnode>
        <childnode refid="18780" relation="include">
        </childnode>
        <childnode refid="18781" relation="include">
        </childnode>
        <childnode refid="18740" relation="include">
        </childnode>
        <childnode refid="18741" relation="include">
        </childnode>
        <childnode refid="18751" relation="include">
        </childnode>
        <childnode refid="18754" relation="include">
        </childnode>
        <childnode refid="18742" relation="include">
        </childnode>
        <childnode refid="18745" relation="include">
        </childnode>
        <childnode refid="18755" relation="include">
        </childnode>
        <childnode refid="18760" relation="include">
        </childnode>
        <childnode refid="18761" relation="include">
        </childnode>
        <childnode refid="18759" relation="include">
        </childnode>
        <childnode refid="18772" relation="include">
        </childnode>
        <childnode refid="18765" relation="include">
        </childnode>
        <childnode refid="18782" relation="include">
        </childnode>
        <childnode refid="18746" relation="include">
        </childnode>
        <childnode refid="18768" relation="include">
        </childnode>
        <childnode refid="18756" relation="include">
        </childnode>
        <childnode refid="18784" relation="include">
        </childnode>
        <childnode refid="18747" relation="include">
        </childnode>
      </node>
      <node id="18780">
        <label>bitset</label>
      </node>
      <node id="18783">
        <label>tuple</label>
      </node>
      <node id="18761">
        <label>vector</label>
      </node>
      <node id="18773">
        <label>new</label>
      </node>
      <node id="18760">
        <label>utility</label>
      </node>
      <node id="18756">
        <label>arrow/util/string_view.h</label>
        <link refid="string__view_8h"/>
        <childnode refid="18741" relation="include">
        </childnode>
        <childnode refid="18745" relation="include">
        </childnode>
        <childnode refid="18757" relation="include">
        </childnode>
      </node>
      <node id="18779">
        <label>array</label>
      </node>
      <node id="18752">
        <label>sstream</label>
      </node>
      <node id="18770">
        <label>arrow/io/memory.h</label>
        <link refid="io_2memory_8h"/>
        <childnode refid="18741" relation="include">
        </childnode>
        <childnode refid="18742" relation="include">
        </childnode>
        <childnode refid="18771" relation="include">
        </childnode>
        <childnode refid="18769" relation="include">
        </childnode>
        <childnode refid="18764" relation="include">
        </childnode>
        <childnode refid="18756" relation="include">
        </childnode>
        <childnode refid="18747" relation="include">
        </childnode>
      </node>
      <node id="18763">
        <label>arrow/io/type_fwd.h</label>
        <link refid="io_2type__fwd_8h"/>
      </node>
      <node id="18767">
        <label>iosfwd</label>
      </node>
      <node id="18771">
        <label>arrow/io/concurrency.h</label>
        <link refid="concurrency_8h"/>
        <childnode refid="18742" relation="include">
        </childnode>
        <childnode refid="18769" relation="include">
        </childnode>
        <childnode refid="18772" relation="include">
        </childnode>
        <childnode refid="18766" relation="include">
        </childnode>
        <childnode refid="18774" relation="include">
        </childnode>
        <childnode refid="18746" relation="include">
        </childnode>
        <childnode refid="18747" relation="include">
        </childnode>
      </node>
      <node id="18772">
        <label>arrow/result.h</label>
        <link refid="result_8h"/>
        <childnode refid="18773" relation="include">
        </childnode>
        <childnode refid="18745" relation="include">
        </childnode>
        <childnode refid="18755" relation="include">
        </childnode>
        <childnode refid="18760" relation="include">
        </childnode>
        <childnode refid="18766" relation="include">
        </childnode>
        <childnode refid="18765" relation="include">
        </childnode>
      </node>
      <node id="18755">
        <label>type_traits</label>
      </node>
      <node id="18785">
        <label>arrow/util/compression.h</label>
        <link refid="compression_8h"/>
        <childnode refid="18741" relation="include">
        </childnode>
        <childnode refid="18754" relation="include">
        </childnode>
        <childnode refid="18742" relation="include">
        </childnode>
        <childnode refid="18745" relation="include">
        </childnode>
        <childnode refid="18772" relation="include">
        </childnode>
        <childnode refid="18766" relation="include">
        </childnode>
        <childnode refid="18747" relation="include">
        </childnode>
      </node>
      <node id="18750">
        <label>algorithm</label>
      </node>
      <node id="18748">
        <label>parquet/hasher.h</label>
        <link refid="hasher_8h"/>
        <childnode refid="18741" relation="include">
        </childnode>
        <childnode refid="18749" relation="include">
        </childnode>
      </node>
      <node id="18753">
        <label>arrow/util/int_util.h</label>
        <link refid="int__util_8h"/>
        <childnode refid="18741" relation="include">
        </childnode>
        <childnode refid="18754" relation="include">
        </childnode>
        <childnode refid="18755" relation="include">
        </childnode>
        <childnode refid="18747" relation="include">
        </childnode>
      </node>
      <node id="18751">
        <label>cstring</label>
      </node>
      <node id="18749">
        <label>parquet/types.h</label>
        <link refid="parquet_2types_8h"/>
        <childnode refid="18750" relation="include">
        </childnode>
        <childnode refid="18741" relation="include">
        </childnode>
        <childnode refid="18751" relation="include">
        </childnode>
        <childnode refid="18742" relation="include">
        </childnode>
        <childnode refid="18752" relation="include">
        </childnode>
        <childnode refid="18745" relation="include">
        </childnode>
        <childnode refid="18753" relation="include">
        </childnode>
        <childnode refid="18756" relation="include">
        </childnode>
        <childnode refid="18758" relation="include">
        </childnode>
      </node>
      <node id="18768">
        <label>arrow/util/string_builder.h</label>
        <link refid="string__builder_8h"/>
        <childnode refid="18742" relation="include">
        </childnode>
        <childnode refid="18744" relation="include">
        </childnode>
        <childnode refid="18745" relation="include">
        </childnode>
        <childnode refid="18760" relation="include">
        </childnode>
        <childnode refid="18747" relation="include">
        </childnode>
      </node>
      <node id="18742">
        <label>memory</label>
      </node>
      <node id="18746">
        <label>arrow/util/macros.h</label>
        <link refid="macros_8h"/>
        <childnode refid="18741" relation="include">
        </childnode>
      </node>
      <node id="18784">
        <label>arrow/util/type_traits.h</label>
        <link refid="util_2type__traits_8h"/>
        <childnode refid="18755" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="classparquet_1_1_bloom_filter" prot="public">parquet::BloomFilter</innerclass>
    <innerclass refid="classparquet_1_1_block_split_bloom_filter" prot="public">parquet::BlockSplitBloomFilter</innerclass>
    <innerclass refid="structparquet_1_1_block_split_bloom_filter_1_1_block_mask" prot="private">parquet::BlockSplitBloomFilter::BlockMask</innerclass>
    <innernamespace refid="namespaceparquet">parquet</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="arrow_2util_2logging_8h" kindref="compound">arrow/util/logging.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="hasher_8h" kindref="compound">parquet/hasher.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="parquet_2platform_8h" kindref="compound">parquet/platform.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="parquet_2types_8h" kindref="compound">parquet/types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceparquet" kindref="compound">parquet</ref><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>Bloom<sp/>filter<sp/>is<sp/>a<sp/>compact<sp/>structure<sp/>to<sp/>indicate<sp/>whether<sp/>an<sp/>item<sp/>is<sp/>not<sp/>in<sp/>a<sp/>set<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="comment">//<sp/>probably<sp/>in<sp/>a<sp/>set.<sp/>The<sp/>Bloom<sp/>filter<sp/>usually<sp/>consists<sp/>of<sp/>a<sp/>bit<sp/>set<sp/>that<sp/>represents<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">//<sp/>set<sp/>of<sp/>elements,<sp/>a<sp/>hash<sp/>strategy<sp/>and<sp/>a<sp/>Bloom<sp/>filter<sp/>algorithm.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="classparquet_1_1_bloom_filter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">PARQUET_EXPORT<sp/><ref refid="classparquet_1_1_bloom_filter" kindref="compound">BloomFilter</ref><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Maximum<sp/>Bloom<sp/>filter<sp/>size,<sp/>it<sp/>sets<sp/>to<sp/>HDFS<sp/>default<sp/>block<sp/>size<sp/>128MB</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>value<sp/>will<sp/>be<sp/>reconsidered<sp/>when<sp/>implementing<sp/>Bloom<sp/>filter<sp/>producer.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="classparquet_1_1_bloom_filter_1a1458b5b834eadd23acf273fd18e8fe26" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>uint32_t<sp/>kMaximumBloomFilterBytes<sp/>=<sp/>128<sp/>*<sp/>1024<sp/>*<sp/>1024;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>FindHash(uint64_t<sp/>hash)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InsertHash(uint64_t<sp/>hash)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WriteTo(<ref refid="classarrow_1_1io_1_1_output_stream" kindref="compound">ArrowOutputStream</ref>*<sp/>sink)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>uint32_t<sp/>GetBitsetSize()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>uint64_t<sp/>Hash(int32_t<sp/>value)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>uint64_t<sp/>Hash(int64_t<sp/>value)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>uint64_t<sp/>Hash(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>uint64_t<sp/>Hash(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>uint64_t<sp/>Hash(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Int96*<sp/>value)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>uint64_t<sp/>Hash(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structparquet_1_1_byte_array" kindref="compound">ByteArray</ref>*<sp/>value)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>uint64_t<sp/>Hash(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structparquet_1_1_fixed_len_byte_array" kindref="compound">FLBA</ref>*<sp/>value,<sp/>uint32_t<sp/>len)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="classparquet_1_1_bloom_filter_1a29b5b7306a69010e7ac649cf48c47e3e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_bloom_filter_1a29b5b7306a69010e7ac649cf48c47e3e" kindref="member">~BloomFilter</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Hash<sp/>strategy<sp/>available<sp/>for<sp/>Bloom<sp/>filter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="classparquet_1_1_bloom_filter_1ae6b809e8dae61f2e9de9b41d91ed15a0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_bloom_filter_1ae6b809e8dae61f2e9de9b41d91ed15a0" kindref="member">HashStrategy</ref><sp/>:<sp/>uint32_t<sp/>{<sp/>MURMUR3_X64_128<sp/>=<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Bloom<sp/>filter<sp/>algorithm.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="classparquet_1_1_bloom_filter_1a12154d2067f3e8a564b5c2be92b28511" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_bloom_filter_1a12154d2067f3e8a564b5c2be92b28511" kindref="member">Algorithm</ref><sp/>:<sp/>uint32_t<sp/>{<sp/>BLOCK<sp/>=<sp/>0<sp/>};</highlight></codeline>
<codeline lineno="111"><highlight class="normal">};</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>BlockSplitBloomFilter<sp/>is<sp/>implemented<sp/>using<sp/>block-based<sp/>Bloom<sp/>filters<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Putze<sp/>et<sp/>al.&apos;s<sp/>&quot;Cache-,Hash-<sp/>and<sp/>Space-Efficient<sp/>Bloom<sp/>filters&quot;.<sp/>The<sp/>basic<sp/>idea<sp/>is<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">//<sp/>hash<sp/>the<sp/>item<sp/>to<sp/>a<sp/>tiny<sp/>Bloom<sp/>filter<sp/>which<sp/>size<sp/>fit<sp/>a<sp/>single<sp/>cache<sp/>line<sp/>or<sp/>smaller.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>implementation<sp/>sets<sp/>8<sp/>bits<sp/>in<sp/>each<sp/>tiny<sp/>Bloom<sp/>filter.<sp/>Each<sp/>tiny<sp/>Bloom</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight><highlight class="comment">//<sp/>filter<sp/>is<sp/>32<sp/>bytes<sp/>to<sp/>take<sp/>advantage<sp/>of<sp/>32-byte<sp/>SIMD<sp/>instructions.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="classparquet_1_1_block_split_bloom_filter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">PARQUET_EXPORT<sp/><ref refid="classparquet_1_1_block_split_bloom_filter" kindref="compound">BlockSplitBloomFilter</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_bloom_filter" kindref="compound">BloomFilter</ref><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><ref refid="classparquet_1_1_block_split_bloom_filter" kindref="compound">BlockSplitBloomFilter</ref>();</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Init(uint32_t<sp/>num_bytes);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Init(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>bitset,<sp/>uint32_t<sp/>num_bytes);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Minimum<sp/>Bloom<sp/>filter<sp/>size,<sp/>it<sp/>sets<sp/>to<sp/>32<sp/>bytes<sp/>to<sp/>fit<sp/>a<sp/>tiny<sp/>Bloom<sp/>filter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143" refid="classparquet_1_1_block_split_bloom_filter_1a21d630ac74c445fa531e1007f390b285" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>uint32_t<sp/>kMinimumBloomFilterBytes<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="152" refid="classparquet_1_1_block_split_bloom_filter_1a7466a7729f145c09a2fac2ff64c0a0d7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>uint32_t<sp/><ref refid="classparquet_1_1_block_split_bloom_filter_1a7466a7729f145c09a2fac2ff64c0a0d7" kindref="member">OptimalNumOfBits</ref>(uint32_t<sp/>ndv,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fpp)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="arrow_2util_2logging_8h_1afbcf38b795bbece32e47b67a15463fd5" kindref="member">DCHECK</ref>(fpp<sp/>&gt;<sp/>0.0<sp/>&amp;&amp;<sp/>fpp<sp/>&lt;<sp/>1.0);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m<sp/>=<sp/>-8.0<sp/>*<sp/>ndv<sp/>/<sp/>log(1<sp/>-<sp/>pow(fpp,<sp/>1.0<sp/>/<sp/>8));</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>num_bits;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Handle<sp/>overflow.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(m<sp/>&lt;<sp/>0<sp/>||<sp/>m<sp/>&gt;<sp/>kMaximumBloomFilterBytes<sp/>&lt;&lt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>num_bits<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kMaximumBloomFilterBytes<sp/>&lt;&lt;<sp/>3);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>num_bits<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(m);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Round<sp/>up<sp/>to<sp/>lower<sp/>bound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_bits<sp/>&lt;<sp/>kMinimumBloomFilterBytes<sp/>&lt;&lt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>num_bits<sp/>=<sp/>kMinimumBloomFilterBytes<sp/>&lt;&lt;<sp/>3;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>next<sp/>power<sp/>of<sp/>2<sp/>if<sp/>bits<sp/>is<sp/>not<sp/>power<sp/>of<sp/>2.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((num_bits<sp/>&amp;<sp/>(num_bits<sp/>-<sp/>1))<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>num_bits<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(::arrow::BitUtil::NextPower2(num_bits));</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Round<sp/>down<sp/>to<sp/>upper<sp/>bound</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_bits<sp/>&gt;<sp/>kMaximumBloomFilterBytes<sp/>&lt;&lt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>num_bits<sp/>=<sp/>kMaximumBloomFilterBytes<sp/>&lt;&lt;<sp/>3;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num_bits;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>FindHash(uint64_t<sp/>hash)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InsertHash(uint64_t<sp/>hash)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>WriteTo(<ref refid="classarrow_1_1io_1_1_output_stream" kindref="compound">ArrowOutputStream</ref>*<sp/>sink)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="185" refid="classparquet_1_1_block_split_bloom_filter_1a8d1c4ae9c27a83b0e37e78e922e0ec03" refkind="member"><highlight class="normal"><sp/><sp/>uint32_t<sp/><ref refid="classparquet_1_1_block_split_bloom_filter_1a8d1c4ae9c27a83b0e37e78e922e0ec03" kindref="member">GetBitsetSize</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num_bytes_;<sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187" refid="classparquet_1_1_block_split_bloom_filter_1a0fa967ac464ea71f124edb3586a2ca73" refkind="member"><highlight class="normal"><sp/><sp/>uint64_t<sp/><ref refid="classparquet_1_1_block_split_bloom_filter_1a0fa967ac464ea71f124edb3586a2ca73" kindref="member">Hash</ref>(int64_t<sp/>value)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hasher_-&gt;Hash(value);<sp/>}</highlight></codeline>
<codeline lineno="188" refid="classparquet_1_1_block_split_bloom_filter_1a8f5e50eb36aaea9bab24198dcc4f9ed0" refkind="member"><highlight class="normal"><sp/><sp/>uint64_t<sp/><ref refid="classparquet_1_1_block_split_bloom_filter_1a8f5e50eb36aaea9bab24198dcc4f9ed0" kindref="member">Hash</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>value)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hasher_-&gt;Hash(value);<sp/>}</highlight></codeline>
<codeline lineno="189" refid="classparquet_1_1_block_split_bloom_filter_1a294707e73f6095590d2e8c664553bcca" refkind="member"><highlight class="normal"><sp/><sp/>uint64_t<sp/><ref refid="classparquet_1_1_block_split_bloom_filter_1a294707e73f6095590d2e8c664553bcca" kindref="member">Hash</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>value)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hasher_-&gt;Hash(value);<sp/>}</highlight></codeline>
<codeline lineno="190" refid="classparquet_1_1_block_split_bloom_filter_1af4e98941311adc5c6dfc398abdc16ffd" refkind="member"><highlight class="normal"><sp/><sp/>uint64_t<sp/><ref refid="classparquet_1_1_block_split_bloom_filter_1af4e98941311adc5c6dfc398abdc16ffd" kindref="member">Hash</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Int96*<sp/>value)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hasher_-&gt;Hash(value);<sp/>}</highlight></codeline>
<codeline lineno="191" refid="classparquet_1_1_block_split_bloom_filter_1a6200699b9172d02ec00b6cc1083ea749" refkind="member"><highlight class="normal"><sp/><sp/>uint64_t<sp/><ref refid="classparquet_1_1_block_split_bloom_filter_1a6200699b9172d02ec00b6cc1083ea749" kindref="member">Hash</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structparquet_1_1_byte_array" kindref="compound">ByteArray</ref>*<sp/>value)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hasher_-&gt;Hash(value);<sp/>}</highlight></codeline>
<codeline lineno="192" refid="classparquet_1_1_block_split_bloom_filter_1a621a1474ffaea85c29cdffcc0821e16d" refkind="member"><highlight class="normal"><sp/><sp/>uint64_t<sp/><ref refid="classparquet_1_1_block_split_bloom_filter_1a621a1474ffaea85c29cdffcc0821e16d" kindref="member">Hash</ref>(int32_t<sp/>value)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hasher_-&gt;Hash(value);<sp/>}</highlight></codeline>
<codeline lineno="193" refid="classparquet_1_1_block_split_bloom_filter_1a57dbf045a3cfeae211531fa34db7622f" refkind="member"><highlight class="normal"><sp/><sp/>uint64_t<sp/><ref refid="classparquet_1_1_block_split_bloom_filter_1a57dbf045a3cfeae211531fa34db7622f" kindref="member">Hash</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structparquet_1_1_fixed_len_byte_array" kindref="compound">FLBA</ref>*<sp/>value,<sp/>uint32_t<sp/>len)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hasher_-&gt;Hash(value,<sp/>len);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_block_split_bloom_filter" kindref="compound">BlockSplitBloomFilter</ref><sp/>Deserialize(<ref refid="classarrow_1_1io_1_1_input_stream" kindref="compound">ArrowInputStream</ref>*<sp/>input_stream);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Bytes<sp/>in<sp/>a<sp/>tiny<sp/>Bloom<sp/>filter<sp/>block.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kBytesPerFilterBlock<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>number<sp/>of<sp/>bits<sp/>to<sp/>be<sp/>set<sp/>in<sp/>each<sp/>tiny<sp/>Bloom<sp/>filter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kBitsSetPerBlock<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>mask<sp/>structure<sp/>used<sp/>to<sp/>set<sp/>bits<sp/>in<sp/>each<sp/>tiny<sp/>Bloom<sp/>filter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">BlockMask<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>item[kBitsSetPerBlock];</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>block-based<sp/>algorithm<sp/>needs<sp/>eight<sp/>odd<sp/>SALT<sp/>values<sp/>to<sp/>calculate<sp/>eight<sp/>indexes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>bit<sp/>to<sp/>set,<sp/>one<sp/>bit<sp/>in<sp/>each<sp/>32-bit<sp/>word.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>uint32_t<sp/>SALT[kBitsSetPerBlock]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x47b6137bU,<sp/>0x44974d91U,<sp/>0x8824ad5bU,<sp/>0xa2b7289dU,</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>0x705495c7U,<sp/>0x2df1424bU,<sp/>0x9efc4947U,<sp/>0x5c6bfb31U};</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetMask(uint32_t<sp/>key,<sp/>BlockMask&amp;<sp/>mask)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Memory<sp/>pool<sp/>to<sp/>allocate<sp/>aligned<sp/>buffer<sp/>for<sp/>bitset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_memory_pool" kindref="compound">::arrow::MemoryPool</ref>*<sp/>pool_;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>underlying<sp/>buffer<sp/>of<sp/>bitset.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Buffer&gt;<sp/>data_;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>number<sp/>of<sp/>bytes<sp/>of<sp/>Bloom<sp/>filter<sp/>bitset.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>uint32_t<sp/>num_bytes_;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Hash<sp/>strategy<sp/>used<sp/>in<sp/>this<sp/>Bloom<sp/>filter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><ref refid="classparquet_1_1_bloom_filter_1ae6b809e8dae61f2e9de9b41d91ed15a0" kindref="member">HashStrategy</ref><sp/>hash_strategy_;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Algorithm<sp/>used<sp/>in<sp/>this<sp/>Bloom<sp/>filter.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><ref refid="classparquet_1_1_bloom_filter_1a12154d2067f3e8a564b5c2be92b28511" kindref="member">Algorithm</ref><sp/>algorithm_;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>hash<sp/>pointer<sp/>points<sp/>to<sp/>actual<sp/>hash<sp/>class<sp/>used.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;Hasher&gt;<sp/>hasher_;</highlight></codeline>
<codeline lineno="244"><highlight class="normal">};</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>parquet</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/arrow/cpp/src/parquet/bloom_filter.h"/>
  </compounddef>
</doxygen>
