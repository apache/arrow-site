<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structarrow_1_1stl_1_1_conversion_traits_3_01_optional_00_01enable__if__optional__like_3_01_optional_01_4_01_4" kind="struct" language="C++" prot="public">
    <compoundname>arrow::stl::ConversionTraits&lt; Optional, enable_if_optional_like&lt; Optional &gt; &gt;</compoundname>
    <basecompoundref refid="structarrow_1_1_c_type_traits" prot="public" virt="non-virtual">arrow::CTypeTraits&lt; std::decay&lt; decltype(*std::declval&lt; Optional &gt;())&gt;::type &gt;</basecompoundref>
    <includes refid="stl_8h" local="no">arrow/stl.h</includes>
    <templateparamlist>
      <param>
        <type>typename Optional</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structarrow_1_1stl_1_1_conversion_traits_3_01_optional_00_01enable__if__optional__like_3_01_optional_01_4_01_4_1a863084dc52d47c0811efe8588d8f39e1" prot="public" static="no">
        <type>typename std::decay&lt; decltype(*std::declval&lt; Optional &gt;())&gt;::type</type>
        <definition>using arrow::stl::ConversionTraits&lt; Optional, enable_if_optional_like&lt; Optional &gt; &gt;::OptionalInnerType =  typename std::decay&lt;decltype(*std::declval&lt;Optional&gt;())&gt;::type</definition>
        <argsstring></argsstring>
        <name>OptionalInnerType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/stl.h" line="190" column="1" bodyfile="/arrow/cpp/src/arrow/stl.h" bodystart="191" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structarrow_1_1stl_1_1_conversion_traits_3_01_optional_00_01enable__if__optional__like_3_01_optional_01_4_01_4_1a454f355dddf6a03adc592ad4a96ffc8e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::stl::ConversionTraits&lt; Optional, enable_if_optional_like&lt; Optional &gt; &gt;::AppendRow</definition>
        <argsstring>(typename TypeTraits&lt; ArrowType &gt;::BuilderType &amp;builder, const Optional &amp;cell)</argsstring>
        <name>AppendRow</name>
        <param>
          <type>typename <ref refid="structarrow_1_1_type_traits" kindref="compound">TypeTraits</ref>&lt; ArrowType &gt;::BuilderType &amp;</type>
          <declname>builder</declname>
        </param>
        <param>
          <type>const Optional &amp;</type>
          <declname>cell</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/stl.h" line="195" column="1" bodyfile="/arrow/cpp/src/arrow/stl.h" bodystart="195" bodyend="202"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="692">
        <label>arrow::CTypeTraits&lt; std::decay&lt; decltype(*std::declval&lt; Optional &gt;())&gt;::type &gt;</label>
        <link refid="structarrow_1_1_c_type_traits"/>
      </node>
      <node id="691">
        <label>arrow::stl::ConversionTraits&lt; Optional, enable_if_optional_like&lt; Optional &gt; &gt;</label>
        <link refid="structarrow_1_1stl_1_1_conversion_traits_3_01_optional_00_01enable__if__optional__like_3_01_optional_01_4_01_4"/>
        <childnode refid="692" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="694">
        <label>arrow::CTypeTraits&lt; std::decay&lt; decltype(*std::declval&lt; Optional &gt;())&gt;::type &gt;</label>
        <link refid="structarrow_1_1_c_type_traits"/>
      </node>
      <node id="693">
        <label>arrow::stl::ConversionTraits&lt; Optional, enable_if_optional_like&lt; Optional &gt; &gt;</label>
        <link refid="structarrow_1_1stl_1_1_conversion_traits_3_01_optional_00_01enable__if__optional__like_3_01_optional_01_4_01_4"/>
        <childnode refid="694" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/stl.h" line="189" column="1" bodyfile="/arrow/cpp/src/arrow/stl.h" bodystart="188" bodyend="203"/>
    <listofallmembers>
      <member refid="structarrow_1_1stl_1_1_conversion_traits_3_01_optional_00_01enable__if__optional__like_3_01_optional_01_4_01_4_1a454f355dddf6a03adc592ad4a96ffc8e" prot="public" virt="non-virtual"><scope>arrow::stl::ConversionTraits&lt; Optional, enable_if_optional_like&lt; Optional &gt; &gt;</scope><name>AppendRow</name></member>
      <member refid="structarrow_1_1stl_1_1_conversion_traits_3_01_optional_00_01enable__if__optional__like_3_01_optional_01_4_01_4_1a863084dc52d47c0811efe8588d8f39e1" prot="public" virt="non-virtual"><scope>arrow::stl::ConversionTraits&lt; Optional, enable_if_optional_like&lt; Optional &gt; &gt;</scope><name>OptionalInnerType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
