<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="io__util_8h" kind="file" language="C++">
    <compoundname>io_util.h</compoundname>
    <includes local="no">memory</includes>
    <includes local="no">string</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes local="no">signal.h</includes>
    <includes refid="interfaces_8h" local="yes">arrow/io/interfaces.h</includes>
    <includes refid="type__fwd_8h" local="yes">arrow/type_fwd.h</includes>
    <includes refid="macros_8h" local="yes">arrow/util/macros.h</includes>
    <includes refid="windows__fixup_8h" local="yes">arrow/util/windows_fixup.h</includes>
    <incdepgraph>
      <node id="12753">
        <label>arrow/util/windows_fixup.h</label>
        <link refid="windows__fixup_8h"/>
      </node>
      <node id="12746">
        <label>cstdint</label>
      </node>
      <node id="12748">
        <label>arrow/type_fwd.h</label>
        <link refid="type__fwd_8h"/>
        <childnode refid="12740" relation="include">
        </childnode>
        <childnode refid="12741" relation="include">
        </childnode>
        <childnode refid="12743" relation="include">
        </childnode>
        <childnode refid="12749" relation="include">
        </childnode>
        <childnode refid="12750" relation="include">
        </childnode>
      </node>
      <node id="12745">
        <label>arrow/io/interfaces.h</label>
        <link refid="interfaces_8h"/>
        <childnode refid="12746" relation="include">
        </childnode>
        <childnode refid="12740" relation="include">
        </childnode>
        <childnode refid="12741" relation="include">
        </childnode>
        <childnode refid="12743" relation="include">
        </childnode>
        <childnode refid="12747" relation="include">
        </childnode>
        <childnode refid="12748" relation="include">
        </childnode>
        <childnode refid="12749" relation="include">
        </childnode>
        <childnode refid="12751" relation="include">
        </childnode>
        <childnode refid="12750" relation="include">
        </childnode>
      </node>
      <node id="12741">
        <label>string</label>
      </node>
      <node id="12752">
        <label>arrow/vendored/string_view.hpp</label>
      </node>
      <node id="12750">
        <label>arrow/util/visibility.h</label>
        <link refid="arrow_2util_2visibility_8h"/>
      </node>
      <node id="12739">
        <label>/arrow/cpp/src/arrow/util/io_util.h</label>
        <link refid="io__util_8h"/>
        <childnode refid="12740" relation="include">
        </childnode>
        <childnode refid="12741" relation="include">
        </childnode>
        <childnode refid="12742" relation="include">
        </childnode>
        <childnode refid="12743" relation="include">
        </childnode>
        <childnode refid="12744" relation="include">
        </childnode>
        <childnode refid="12745" relation="include">
        </childnode>
        <childnode refid="12748" relation="include">
        </childnode>
        <childnode refid="12749" relation="include">
        </childnode>
        <childnode refid="12753" relation="include">
        </childnode>
      </node>
      <node id="12743">
        <label>vector</label>
      </node>
      <node id="12744">
        <label>signal.h</label>
      </node>
      <node id="12742">
        <label>utility</label>
      </node>
      <node id="12751">
        <label>arrow/util/string_view.h</label>
        <link refid="string__view_8h"/>
        <childnode refid="12746" relation="include">
        </childnode>
        <childnode refid="12741" relation="include">
        </childnode>
        <childnode refid="12752" relation="include">
        </childnode>
      </node>
      <node id="12747">
        <label>arrow/io/type_fwd.h</label>
        <link refid="io_2type__fwd_8h"/>
      </node>
      <node id="12740">
        <label>memory</label>
      </node>
      <node id="12749">
        <label>arrow/util/macros.h</label>
        <link refid="macros_8h"/>
        <childnode refid="12746" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="classarrow_1_1io_1_1_stdout_stream" prot="public">arrow::io::StdoutStream</innerclass>
    <innerclass refid="classarrow_1_1io_1_1_stderr_stream" prot="public">arrow::io::StderrStream</innerclass>
    <innerclass refid="classarrow_1_1io_1_1_stdin_stream" prot="public">arrow::io::StdinStream</innerclass>
    <innernamespace refid="namespacearrow">arrow</innernamespace>
    <innernamespace refid="namespacearrow_1_1io">arrow::io</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="io__util_8h_1a7500878293a38c68d959dcebdb5445e3" prot="public" static="no">
        <name>ARROW_HAVE_SIGACTION</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/io_util.h" line="21" column="9" bodyfile="/arrow/cpp/src/arrow/util/io_util.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="io__util_8h_1a7500878293a38c68d959dcebdb5445e3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ARROW_HAVE_SIGACTION<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>ARROW_HAVE_SIGACTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;signal.h&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Needed<sp/>for<sp/>struct<sp/>sigaction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="interfaces_8h" kindref="compound">arrow/io/interfaces.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type__fwd_8h" kindref="compound">arrow/type_fwd.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="macros_8h" kindref="compound">arrow/util/macros.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="windows__fixup_8h" kindref="compound">arrow/util/windows_fixup.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacearrow" kindref="compound">arrow</ref><sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="namespaceparquet_1abad5a6612a34e123346ad35eb4933d80" kindref="member">Buffer</ref>;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">io<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Output<sp/>stream<sp/>that<sp/>just<sp/>writes<sp/>to<sp/>stdout.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="classarrow_1_1io_1_1_stdout_stream" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1io_1_1_stdout_stream" kindref="compound">StdoutStream</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1io_1_1_output_stream" kindref="compound">OutputStream</ref><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1io_1_1_stdout_stream" kindref="compound">StdoutStream</ref>();</highlight></codeline>
<codeline lineno="48" refid="classarrow_1_1io_1_1_stdout_stream_1a3d06d6e04614245ea97d74d95c6bd058" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1io_1_1_stdout_stream_1a3d06d6e04614245ea97d74d95c6bd058" kindref="member">~StdoutStream</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>Close()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>closed()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;int64_t&gt;</ref><sp/>Tell()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>Write(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>,<sp/>int64_t<sp/>nbytes)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/>int64_t<sp/>pos_;</highlight></codeline>
<codeline lineno="59"><highlight class="normal">};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Output<sp/>stream<sp/>that<sp/>just<sp/>writes<sp/>to<sp/>stderr.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="classarrow_1_1io_1_1_stderr_stream" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1io_1_1_stderr_stream" kindref="compound">StderrStream</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1io_1_1_output_stream" kindref="compound">OutputStream</ref><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1io_1_1_stderr_stream" kindref="compound">StderrStream</ref>();</highlight></codeline>
<codeline lineno="65" refid="classarrow_1_1io_1_1_stderr_stream_1a8939700d23ace263af3a556d49ec8fe3" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1io_1_1_stderr_stream_1a8939700d23ace263af3a556d49ec8fe3" kindref="member">~StderrStream</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>Close()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>closed()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;int64_t&gt;</ref><sp/>Tell()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>Write(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>,<sp/>int64_t<sp/>nbytes)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/>int64_t<sp/>pos_;</highlight></codeline>
<codeline lineno="76"><highlight class="normal">};</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Input<sp/>stream<sp/>that<sp/>just<sp/>reads<sp/>from<sp/>stdin.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="classarrow_1_1io_1_1_stdin_stream" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1io_1_1_stdin_stream" kindref="compound">StdinStream</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1io_1_1_input_stream" kindref="compound">InputStream</ref><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1io_1_1_stdin_stream" kindref="compound">StdinStream</ref>();</highlight></codeline>
<codeline lineno="82" refid="classarrow_1_1io_1_1_stdin_stream_1a4baea940525b78a32a06c885d54f6c0b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1io_1_1_stdin_stream_1a4baea940525b78a32a06c885d54f6c0b" kindref="member">~StdinStream</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>Close()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>closed()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;int64_t&gt;</ref><sp/>Tell()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;int64_t&gt;</ref><sp/>Read(int64_t<sp/>nbytes,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>out)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;Buffer&gt;</ref>&gt;<sp/>Read(int64_t<sp/>nbytes)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>int64_t<sp/>pos_;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">};</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>io</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NOTE:<sp/>8-bit<sp/>path<sp/>strings<sp/>on<sp/>Windows<sp/>are<sp/>encoded<sp/>using<sp/>UTF-8.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Using<sp/>MBCS<sp/>would<sp/>fail<sp/>encoding<sp/>some<sp/>paths.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_WIN32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>NativePathString<sp/>=<sp/>std::wstring;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>NativePathString<sp/>=<sp/>std::string;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/>PlatformFilename<sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Impl;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>~PlatformFilename();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>PlatformFilename();</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>PlatformFilename(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PlatformFilename&amp;);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>PlatformFilename(PlatformFilename&amp;&amp;);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>PlatformFilename&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PlatformFilename&amp;);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>PlatformFilename&amp;<sp/>operator=(PlatformFilename&amp;&amp;);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>PlatformFilename(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NativePathString&amp;<sp/>path);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>PlatformFilename(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NativePathString::value_type*<sp/>path);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NativePathString&amp;<sp/>ToNative()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>PlatformFilename<sp/>Parent()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>functions<sp/>can<sp/>fail<sp/>for<sp/>character<sp/>encoding<sp/>reasons.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;PlatformFilename&gt;</ref><sp/>FromString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>file_name);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;PlatformFilename&gt;</ref><sp/>Join(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>child_name)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/>PlatformFilename<sp/>Join(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PlatformFilename&amp;<sp/>child_name)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacearrow_1acbf9e156c4a8a01745d20c33a22f1f28" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PlatformFilename&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacearrow_1ae7e5d5239907d98d4d80c80616f8bee7" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PlatformFilename&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Made<sp/>public<sp/>to<sp/>avoid<sp/>the<sp/>proliferation<sp/>of<sp/>friend<sp/>declarations.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Impl*<sp/>impl()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl_.get();<sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;Impl&gt;<sp/>impl_;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>PlatformFilename(Impl<sp/>impl);</highlight></codeline>
<codeline lineno="144"><highlight class="normal">};</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;bool&gt;</ref><sp/>CreateDir(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PlatformFilename&amp;<sp/>dir_path);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;bool&gt;</ref><sp/>CreateDirTree(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PlatformFilename&amp;<sp/>dir_path);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;bool&gt;</ref><sp/>DeleteDirContents(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PlatformFilename&amp;<sp/>dir_path,</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allow_not_found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;bool&gt;</ref><sp/>DeleteDirTree(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PlatformFilename&amp;<sp/>dir_path,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allow_not_found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Non-recursively<sp/>list<sp/>the<sp/>contents<sp/>of<sp/>the<sp/>given<sp/>directory.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>returned<sp/>names<sp/>are<sp/>the<sp/>children&apos;s<sp/>base<sp/>names,<sp/>not<sp/>including<sp/>dir_path.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::vector&lt;PlatformFilename&gt;</ref>&gt;<sp/>ListDir(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PlatformFilename&amp;<sp/>dir_path);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;bool&gt;</ref><sp/>DeleteFile(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PlatformFilename&amp;<sp/>file_path,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allow_not_found<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;bool&gt;</ref><sp/>FileExists(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PlatformFilename&amp;<sp/>path);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;int&gt;</ref><sp/>FileOpenReadable(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PlatformFilename&amp;<sp/>file_name);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;int&gt;</ref><sp/>FileOpenWritable(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PlatformFilename&amp;<sp/>file_name,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>write_only<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>truncate<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>append<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;int64_t&gt;</ref><sp/>FileRead(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/>uint8_t*<sp/>buffer,<sp/>int64_t<sp/>nbytes);</highlight></codeline>
<codeline lineno="199"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;int64_t&gt;</ref><sp/>FileReadAt(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/>uint8_t*<sp/>buffer,<sp/>int64_t<sp/>position,<sp/>int64_t<sp/>nbytes);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>FileWrite(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>buffer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>nbytes);</highlight></codeline>
<codeline lineno="204"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>FileTruncate(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>size);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>FileSeek(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/>int64_t<sp/>pos);</highlight></codeline>
<codeline lineno="209"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>FileSeek(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/>int64_t<sp/>pos,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>whence);</highlight></codeline>
<codeline lineno="211"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;int64_t&gt;</ref><sp/>FileTell(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd);</highlight></codeline>
<codeline lineno="213"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;int64_t&gt;</ref><sp/>FileGetSize(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>FileClose(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Pipe<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>rfd;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>wfd;</highlight></codeline>
<codeline lineno="222"><highlight class="normal">};</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;Pipe&gt;</ref><sp/>CreatePipe();</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>MemoryMapRemap(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>addr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>old_size,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>new_size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fildes,</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>new_addr);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::string&gt;</ref><sp/>GetEnvVar(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name);</highlight></codeline>
<codeline lineno="233"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::string&gt;</ref><sp/>GetEnvVar(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name);</highlight></codeline>
<codeline lineno="235"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;NativePathString&gt;</ref><sp/>GetEnvVarNative(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name);</highlight></codeline>
<codeline lineno="237"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;NativePathString&gt;</ref><sp/>GetEnvVarNative(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>SetEnvVar(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>value);</highlight></codeline>
<codeline lineno="242"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>SetEnvVar(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>value);</highlight></codeline>
<codeline lineno="244"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>DelEnvVar(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name);</highlight></codeline>
<codeline lineno="246"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>DelEnvVar(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="250"><highlight class="normal">std::string<sp/>ErrnoMessage(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errnum);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="253"><highlight class="normal">std::string<sp/>WinErrorMessage(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errnum);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="257"><highlight class="normal">std::shared_ptr&lt;StatusDetail&gt;<sp/>StatusDetailFromErrno(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errnum);</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="260"><highlight class="normal">std::shared_ptr&lt;StatusDetail&gt;<sp/>StatusDetailFromWinError(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errnum);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>StatusFromErrno(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errnum,<sp/><ref refid="namespacearrow_1a331ad1dbd1c157c8be168cb6548d188f" kindref="member">StatusCode</ref><sp/>code,<sp/>Args&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1a11049f6c5cbc558821d26cbedb3882e6" kindref="member">Status::FromDetailAndArgs</ref>(code,<sp/>StatusDetailFromErrno(errnum),</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="267"><highlight class="normal">}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>IOErrorFromErrno(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errnum,<sp/>Args&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusFromErrno(errnum,<sp/><ref refid="namespacearrow_1a331ad1dbd1c157c8be168cb6548d188fa5206bd7472156351d2d9a99633ac9580" kindref="member">StatusCode::IOError</ref>,<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="272"><highlight class="normal">}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>StatusFromWinError(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errnum,<sp/><ref refid="namespacearrow_1a331ad1dbd1c157c8be168cb6548d188f" kindref="member">StatusCode</ref><sp/>code,<sp/>Args&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1a11049f6c5cbc558821d26cbedb3882e6" kindref="member">Status::FromDetailAndArgs</ref>(code,<sp/>StatusDetailFromWinError(errnum),</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="279"><highlight class="normal">}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>IOErrorFromWinError(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>errnum,<sp/>Args&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>StatusFromWinError(errnum,<sp/><ref refid="namespacearrow_1a331ad1dbd1c157c8be168cb6548d188fa5206bd7472156351d2d9a99633ac9580" kindref="member">StatusCode::IOError</ref>,<sp/>std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="284"><highlight class="normal">}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ErrnoFromStatus(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref>&amp;);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Always<sp/>returns<sp/>0<sp/>on<sp/>non-Windows<sp/>platforms<sp/>(for<sp/>Python).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>WinErrorFromStatus(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref>&amp;);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/>TemporaryDir<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>~TemporaryDir();</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>PlatformFilename&amp;<sp/>path()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>path_;<sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::unique_ptr&lt;TemporaryDir&gt;</ref>&gt;<sp/>Make(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>prefix);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>PlatformFilename<sp/>path_;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>TemporaryDir(PlatformFilename&amp;&amp;);</highlight></codeline>
<codeline lineno="309"><highlight class="normal">};</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/>SignalHandler<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>void<sp/>(*Callback)(int);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>SignalHandler();</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>SignalHandler(Callback<sp/>cb);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>ARROW_HAVE_SIGACTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>SignalHandler(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/>sigaction&amp;<sp/>sa);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>Callback<sp/>callback()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>ARROW_HAVE_SIGACTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sigaction&amp;<sp/>action()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>ARROW_HAVE_SIGACTION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Storing<sp/>the<sp/>full<sp/>sigaction<sp/>allows<sp/>to<sp/>restore<sp/>the<sp/>entire<sp/>signal<sp/>handling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>configuration.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">sigaction<sp/>sa_;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>Callback<sp/>cb_;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal">};</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;SignalHandler&gt;</ref><sp/>GetSignalHandler(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>signum);</highlight></codeline>
<codeline lineno="342"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;SignalHandler&gt;</ref><sp/>SetSignalHandler(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>signum,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SignalHandler&amp;<sp/>handler);</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>arrow</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/arrow/cpp/src/arrow/util/io_util.h"/>
  </compounddef>
</doxygen>
