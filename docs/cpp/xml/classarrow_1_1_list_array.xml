<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_list_array" kind="class" language="C++" prot="public">
    <compoundname>arrow::ListArray</compoundname>
    <basecompoundref refid="classarrow_1_1_base_list_array" prot="public" virt="non-virtual">arrow::BaseListArray&lt; ListType &gt;</basecompoundref>
    <derivedcompoundref refid="classarrow_1_1_map_array" prot="public" virt="non-virtual">arrow::MapArray</derivedcompoundref>
    <includes refid="array_8h" local="no">arrow/array.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1_list_array_1a286f6f2af2320069cdc1286c56b6f5dd" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::ListArray::ListArray</definition>
        <argsstring>(const std::shared_ptr&lt; ArrayData &gt; &amp;data)</argsstring>
        <name>ListArray</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="618" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_list_array_1ac88f1f9d30c092593c332f47f879fa97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::ListArray::ListArray</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;type, int64_t length, const std::shared_ptr&lt; Buffer &gt; &amp;value_offsets, const std::shared_ptr&lt; Array &gt; &amp;values, const std::shared_ptr&lt; Buffer &gt; &amp;null_bitmap=NULLPTR, int64_t null_count=kUnknownNullCount, int64_t offset=0)</argsstring>
        <name>ListArray</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &amp;</type>
          <declname>value_offsets</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; &amp;</type>
          <declname>values</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &amp;</type>
          <declname>null_bitmap</declname>
          <defval><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></defval>
        </param>
        <param>
          <type>int64_t</type>
          <declname>null_count</declname>
          <defval><ref refid="namespacearrow_1a2bc89c993234944fd7bdbdfe95812080" kindref="member">kUnknownNullCount</ref></defval>
        </param>
        <param>
          <type>int64_t</type>
          <declname>offset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="620" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_list_array_1a7b2872001debb71704dec19e59d45fdc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;Array&gt; &gt; arrow::ListArray::Flatten</definition>
        <argsstring>(MemoryPool *memory_pool=default_memory_pool()) const</argsstring>
        <name>Flatten</name>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>memory_pool</declname>
          <defval><ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">default_memory_pool</ref>()</defval>
        </param>
        <briefdescription>
<para>Return an <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> that is a concatenation of the lists in this array. </para>        </briefdescription>
        <detaileddescription>
<para>Note that it&apos;s different from <computeroutput><ref refid="classarrow_1_1_base_list_array_1a9a1ed59bfbcc91df5fa44892b2597609" kindref="member">values()</ref></computeroutput> in that it takes into consideration of this array&apos;s offsets as well as null elements backed by non-empty lists (they are skipped, thus copying may be needed). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="651" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1_list_array_1a21a8d88688a8c1a36d9b5584ff622e17" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;Array&gt; &gt; arrow::ListArray::FromArrays</definition>
        <argsstring>(const Array &amp;offsets, const Array &amp;values, MemoryPool *pool=default_memory_pool())</argsstring>
        <name>FromArrays</name>
        <param>
          <type>const <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>offsets</declname>
        </param>
        <param>
          <type>const <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>values</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
          <defval><ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">default_memory_pool</ref>()</defval>
        </param>
        <briefdescription>
<para>Construct <ref refid="classarrow_1_1_list_array" kindref="compound">ListArray</ref> from array of offsets and child value array. </para>        </briefdescription>
        <detaileddescription>
<para>This function does the bare minimum of validation of the offsets and input types, and will allocate a new offsets array if necessary (i.e. if the offsets contain any nulls). If the offsets do not have nulls, they are assumed to be well-formed</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">offsets</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classarrow_1_1_array" kindref="compound">Array</ref> containing n + 1 offsets encoding length and size. Must be of int32 type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">values</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classarrow_1_1_array" kindref="compound">Array</ref> containing list values </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pool</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> in case new offsets array needs to be allocated because of null values </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="638" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_list_array_1a62dff3a3932441aeeaa0d768adec91ca" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::ListArray::FromArrays</definition>
        <argsstring>(const Array &amp;offsets, const Array &amp;values, MemoryPool *pool, std::shared_ptr&lt; Array &gt; *out)</argsstring>
        <name>FromArrays</name>
        <param>
          <type>const <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>offsets</declname>
        </param>
        <param>
          <type>const <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>values</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="643" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classarrow_1_1_list_array_1afeac8f509730b14aa41ee95e6a98c50e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::ListArray::ListArray</definition>
        <argsstring>()=default</argsstring>
        <name>ListArray</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="656" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_list_array_1a7130643a83dd8fc41dd4996e83cae039" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void arrow::ListArray::SetData</definition>
        <argsstring>(const std::shared_ptr&lt; ArrayData &gt; &amp;data, Type::type expected_type_id=Type::LIST)</argsstring>
        <name>SetData</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref></type>
          <declname>expected_type_id</declname>
          <defval><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44ad074f9c02567b5945293b9114f84f210" kindref="member">Type::LIST</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="657" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Concrete <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> class for list data. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2831">
        <label>arrow::Array</label>
        <link refid="classarrow_1_1_array"/>
      </node>
      <node id="2830">
        <label>arrow::BaseListArray&lt; ListType &gt;</label>
        <link refid="classarrow_1_1_base_list_array"/>
        <childnode refid="2831" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2832">
        <label>arrow::MapArray</label>
        <link refid="classarrow_1_1_map_array"/>
        <childnode refid="2829" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2829">
        <label>arrow::ListArray</label>
        <link refid="classarrow_1_1_list_array"/>
        <childnode refid="2830" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2835">
        <label>arrow::Array</label>
        <link refid="classarrow_1_1_array"/>
      </node>
      <node id="2834">
        <label>arrow::BaseListArray&lt; ListType &gt;</label>
        <link refid="classarrow_1_1_base_list_array"/>
        <childnode refid="2835" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2833">
        <label>arrow::ListArray</label>
        <link refid="classarrow_1_1_list_array"/>
        <childnode refid="2834" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/array.h" line="616" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="616" bodyend="659"/>
    <listofallmembers>
      <member refid="classarrow_1_1_array_1a168f3ec5c96688dadeaf015692e4bef8" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>Accept</name></member>
      <member refid="classarrow_1_1_array_1a381e6469686eccd2545cf1dc171f6cb7" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>ApproxEquals</name></member>
      <member refid="classarrow_1_1_array_1a2ed35161e2e2200bf4dcadb6ff11d7fb" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>ApproxEquals</name></member>
      <member refid="classarrow_1_1_array_1ae44d3c2fae3a8578fe829da20c6732f8" prot="protected" virt="non-virtual"><scope>arrow::ListArray</scope><name>Array</name></member>
      <member refid="classarrow_1_1_array_1aeca84e9b3a1f1e6e3f83a61c90e376a9" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>data</name></member>
      <member refid="classarrow_1_1_array_1a2631dce1d5868216cba0a140e81ef14e" prot="protected" virt="non-virtual"><scope>arrow::ListArray</scope><name>data_</name></member>
      <member refid="classarrow_1_1_array_1a95ff1c7489e9d2fd5ff52fde1b8b5c46" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>Diff</name></member>
      <member refid="classarrow_1_1_array_1a686cf58bab513d8ecfe3a285f4562eab" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_array_1a99913841c11eb73c61a25c018f57ca40" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_list_array_1a7b2872001debb71704dec19e59d45fdc" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>Flatten</name></member>
      <member refid="classarrow_1_1_list_array_1a21a8d88688a8c1a36d9b5584ff622e17" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>FromArrays</name></member>
      <member refid="classarrow_1_1_list_array_1a62dff3a3932441aeeaa0d768adec91ca" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>FromArrays</name></member>
      <member refid="classarrow_1_1_array_1a18c61cd4c8c158a30f30023eabc83acb" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>IsNull</name></member>
      <member refid="classarrow_1_1_array_1ae554bfb313cd6b161f63fb2966dbd662" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>IsValid</name></member>
      <member refid="classarrow_1_1_array_1a49c7fb3f73d2d43e7338591c5a8bd8bf" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>length</name></member>
      <member refid="classarrow_1_1_base_list_array_1a1679d66c5b9c09efe11ccc442c264214" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>list_type</name></member>
      <member refid="classarrow_1_1_base_list_array_1a1a4b076880f003e0e091834b057935a5" prot="protected" virt="non-virtual"><scope>arrow::ListArray</scope><name>list_type_</name></member>
      <member refid="classarrow_1_1_list_array_1a286f6f2af2320069cdc1286c56b6f5dd" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>ListArray</name></member>
      <member refid="classarrow_1_1_list_array_1ac88f1f9d30c092593c332f47f879fa97" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>ListArray</name></member>
      <member refid="classarrow_1_1_list_array_1afeac8f509730b14aa41ee95e6a98c50e" prot="protected" virt="non-virtual"><scope>arrow::ListArray</scope><name>ListArray</name></member>
      <member refid="classarrow_1_1_array_1a76c4756ac85b29f9135064d68d2ef908" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>null_bitmap</name></member>
      <member refid="classarrow_1_1_array_1a7a8838fbc97b9b3b8ca15cb163b2027c" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>null_bitmap_data</name></member>
      <member refid="classarrow_1_1_array_1aed59d9e8608229ff3808983cdc908ccd" prot="protected" virt="non-virtual"><scope>arrow::ListArray</scope><name>null_bitmap_data_</name></member>
      <member refid="classarrow_1_1_array_1a0537d3b69a889b951e88be2fe9f3d96a" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>null_count</name></member>
      <member refid="classarrow_1_1_array_1a183e69c91c531609f42a29b593119d58" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>num_fields</name></member>
      <member refid="classarrow_1_1_array_1a1a0c6c1aa06cffd1dcb3813f0d24b2fd" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>offset</name></member>
      <member refid="classarrow_1_1_base_list_array_1a2edc91b360b5147b82d5a42daffd954c" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>offset_type</name></member>
      <member refid="classarrow_1_1_array_1ace5ac1affa59422d70a8b3f6929b70bc" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>RangeEquals</name></member>
      <member refid="classarrow_1_1_array_1a537467bcecb4471b18d3271f14ca9ad2" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>RangeEquals</name></member>
      <member refid="classarrow_1_1_array_1acf138d427e7f8a8c56cac7f9d9e64db3" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>RangeEquals</name></member>
      <member refid="classarrow_1_1_array_1a28f8f8d92439489bbd1727392123b0f7" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>RangeEquals</name></member>
      <member refid="classarrow_1_1_base_list_array_1ab29ce049771d7ceb0756fe1f835f51d1" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>raw_value_offsets</name></member>
      <member refid="classarrow_1_1_base_list_array_1a71410a0160aa5c3e6e8e68e207f7eeec" prot="protected" virt="non-virtual"><scope>arrow::ListArray</scope><name>raw_value_offsets_</name></member>
      <member refid="classarrow_1_1_list_array_1a7130643a83dd8fc41dd4996e83cae039" prot="protected" virt="non-virtual"><scope>arrow::ListArray</scope><name>SetData</name></member>
      <member refid="classarrow_1_1_array_1a7053d3600bccd9cd34fcb6f5470a75c1" prot="protected" virt="non-virtual" ambiguityscope="BaseListArray&lt; ListType &gt;::"><scope>arrow::ListArray</scope><name>SetData</name></member>
      <member refid="classarrow_1_1_array_1ae32f72c78fe10ce17f0a817e302e17d1" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>Slice</name></member>
      <member refid="classarrow_1_1_array_1a5cf4c3330e850670aa52dab3b21869ea" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>Slice</name></member>
      <member refid="classarrow_1_1_array_1a41c7af0e40ac55f2ce11785fea3e051e" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>ToString</name></member>
      <member refid="classarrow_1_1_array_1a635a694fbadb0bfa731beb97df2ef7ea" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>type</name></member>
      <member refid="classarrow_1_1_array_1a155d9d827415438f976e3cb31e0a55f6" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>type_id</name></member>
      <member refid="classarrow_1_1_base_list_array_1a696a01784c7bad9658a4f4580842f09a" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>TypeClass</name></member>
      <member refid="classarrow_1_1_array_1ad62bad8fde2bb8fbd5a52df3fa4bd56c" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>Validate</name></member>
      <member refid="classarrow_1_1_array_1a793321da66d2d1839e6c89a956e4cb07" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>ValidateFull</name></member>
      <member refid="classarrow_1_1_base_list_array_1ae5acff45549424221ae00865bc674ff2" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>value_length</name></member>
      <member refid="classarrow_1_1_base_list_array_1a38821c957c8feaee60734c7aff8763d7" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>value_offset</name></member>
      <member refid="classarrow_1_1_base_list_array_1aa5f74bf28ec1a493ce54525ca7055c1f" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>value_offsets</name></member>
      <member refid="classarrow_1_1_base_list_array_1a37af8ed233357849d9c76495106943c6" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>value_slice</name></member>
      <member refid="classarrow_1_1_base_list_array_1ad4fe8a53d1a06ce4942210223ce50564" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>value_type</name></member>
      <member refid="classarrow_1_1_base_list_array_1a9a1ed59bfbcc91df5fa44892b2597609" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>values</name></member>
      <member refid="classarrow_1_1_base_list_array_1a0a23bd7a40ce3eb96a7ea61508d42ec8" prot="protected" virt="non-virtual"><scope>arrow::ListArray</scope><name>values_</name></member>
      <member refid="classarrow_1_1_array_1aa2b5f248c09a41c089e1fbc911beecb0" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>View</name></member>
      <member refid="classarrow_1_1_array_1ad015904c8c6e5e2513c791fb577f2679" prot="public" virt="non-virtual"><scope>arrow::ListArray</scope><name>View</name></member>
      <member refid="classarrow_1_1_array_1addd582eec9488bca2b3379b71fef6ce5" prot="public" virt="virtual"><scope>arrow::ListArray</scope><name>~Array</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
