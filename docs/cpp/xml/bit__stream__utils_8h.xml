<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="bit__stream__utils_8h" kind="file" language="C++">
    <compoundname>bit_stream_utils.h</compoundname>
    <includes refid="string_8h" local="no">string.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">cstdint</includes>
    <includes refid="bit__util_8h" local="yes">arrow/util/bit_util.h</includes>
    <includes refid="bpacking_8h" local="yes">arrow/util/bpacking.h</includes>
    <includes refid="arrow_2util_2logging_8h" local="yes">arrow/util/logging.h</includes>
    <includes refid="macros_8h" local="yes">arrow/util/macros.h</includes>
    <includedby refid="rle__encoding_8h" local="yes">/arrow/cpp/src/arrow/util/rle_encoding.h</includedby>
    <incdepgraph>
      <node id="11796">
        <label>arrow/util/compare.h</label>
        <link refid="util_2compare_8h"/>
        <childnode refid="11788" relation="include">
        </childnode>
        <childnode refid="11789" relation="include">
        </childnode>
        <childnode refid="11790" relation="include">
        </childnode>
        <childnode refid="11795" relation="include">
        </childnode>
      </node>
      <node id="11809">
        <label>arrow/util/bpacking_default.h</label>
        <link refid="bpacking__default_8h"/>
      </node>
      <node id="11787">
        <label>limits</label>
      </node>
      <node id="11776">
        <label>cstdint</label>
      </node>
      <node id="11791">
        <label>arrow/buffer.h</label>
        <link refid="buffer_8h"/>
        <childnode refid="11776" relation="include">
        </childnode>
        <childnode refid="11786" relation="include">
        </childnode>
        <childnode refid="11788" relation="include">
        </childnode>
        <childnode refid="11773" relation="include">
        </childnode>
        <childnode refid="11789" relation="include">
        </childnode>
        <childnode refid="11790" relation="include">
        </childnode>
        <childnode refid="11774" relation="include">
        </childnode>
        <childnode refid="11792" relation="include">
        </childnode>
        <childnode refid="11793" relation="include">
        </childnode>
        <childnode refid="11797" relation="include">
        </childnode>
        <childnode refid="11794" relation="include">
        </childnode>
        <childnode refid="11795" relation="include">
        </childnode>
        <childnode refid="11775" relation="include">
        </childnode>
        <childnode refid="11778" relation="include">
        </childnode>
      </node>
      <node id="11781">
        <label>endian.h</label>
      </node>
      <node id="11797">
        <label>arrow/status.h</label>
        <link refid="status_8h"/>
        <childnode refid="11786" relation="include">
        </childnode>
        <childnode refid="11798" relation="include">
        </childnode>
        <childnode refid="11788" relation="include">
        </childnode>
        <childnode refid="11773" relation="include">
        </childnode>
        <childnode refid="11790" relation="include">
        </childnode>
        <childnode refid="11796" relation="include">
        </childnode>
        <childnode refid="11795" relation="include">
        </childnode>
        <childnode refid="11799" relation="include">
        </childnode>
        <childnode refid="11778" relation="include">
        </childnode>
      </node>
      <node id="11803">
        <label>arrow/util/functional.h</label>
        <link refid="functional_8h"/>
        <childnode refid="11804" relation="include">
        </childnode>
        <childnode refid="11789" relation="include">
        </childnode>
        <childnode refid="11795" relation="include">
        </childnode>
      </node>
      <node id="11794">
        <label>arrow/type_fwd.h</label>
        <link refid="type__fwd_8h"/>
        <childnode refid="11788" relation="include">
        </childnode>
        <childnode refid="11773" relation="include">
        </childnode>
        <childnode refid="11774" relation="include">
        </childnode>
        <childnode refid="11795" relation="include">
        </childnode>
        <childnode refid="11778" relation="include">
        </childnode>
      </node>
      <node id="11785">
        <label>cmath</label>
      </node>
      <node id="11784">
        <label>cassert</label>
      </node>
      <node id="11771">
        <label>/arrow/cpp/src/arrow/util/bit_stream_utils.h</label>
        <link refid="bit__stream__utils_8h"/>
        <childnode refid="11772" relation="include">
        </childnode>
        <childnode refid="11779" relation="include">
        </childnode>
        <childnode refid="11776" relation="include">
        </childnode>
        <childnode refid="11780" relation="include">
        </childnode>
        <childnode refid="11806" relation="include">
        </childnode>
        <childnode refid="11807" relation="include">
        </childnode>
        <childnode refid="11795" relation="include">
        </childnode>
      </node>
      <node id="11773">
        <label>string</label>
      </node>
      <node id="11777">
        <label>arrow/vendored/string_view.hpp</label>
      </node>
      <node id="11800">
        <label>ostream</label>
      </node>
      <node id="11778">
        <label>arrow/util/visibility.h</label>
        <link refid="arrow_2util_2visibility_8h"/>
      </node>
      <node id="11807">
        <label>arrow/util/logging.h</label>
        <link refid="arrow_2util_2logging_8h"/>
        <childnode refid="11788" relation="include">
        </childnode>
        <childnode refid="11800" relation="include">
        </childnode>
        <childnode refid="11773" relation="include">
        </childnode>
        <childnode refid="11795" relation="include">
        </childnode>
        <childnode refid="11778" relation="include">
        </childnode>
      </node>
      <node id="11792">
        <label>arrow/device.h</label>
        <link refid="device_8h"/>
        <childnode refid="11776" relation="include">
        </childnode>
        <childnode refid="11788" relation="include">
        </childnode>
        <childnode refid="11773" relation="include">
        </childnode>
        <childnode refid="11793" relation="include">
        </childnode>
        <childnode refid="11794" relation="include">
        </childnode>
        <childnode refid="11796" relation="include">
        </childnode>
        <childnode refid="11795" relation="include">
        </childnode>
        <childnode refid="11778" relation="include">
        </childnode>
      </node>
      <node id="11772">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="11773" relation="include">
        </childnode>
        <childnode refid="11774" relation="include">
        </childnode>
        <childnode refid="11775" relation="include">
        </childnode>
        <childnode refid="11778" relation="include">
        </childnode>
      </node>
      <node id="11780">
        <label>arrow/util/bit_util.h</label>
        <link refid="bit__util_8h"/>
        <childnode refid="11781" relation="include">
        </childnode>
        <childnode refid="11779" relation="include">
        </childnode>
        <childnode refid="11782" relation="include">
        </childnode>
        <childnode refid="11783" relation="include">
        </childnode>
        <childnode refid="11784" relation="include">
        </childnode>
        <childnode refid="11785" relation="include">
        </childnode>
        <childnode refid="11776" relation="include">
        </childnode>
        <childnode refid="11786" relation="include">
        </childnode>
        <childnode refid="11787" relation="include">
        </childnode>
        <childnode refid="11788" relation="include">
        </childnode>
        <childnode refid="11773" relation="include">
        </childnode>
        <childnode refid="11789" relation="include">
        </childnode>
        <childnode refid="11790" relation="include">
        </childnode>
        <childnode refid="11774" relation="include">
        </childnode>
        <childnode refid="11791" relation="include">
        </childnode>
        <childnode refid="11801" relation="include">
        </childnode>
        <childnode refid="11796" relation="include">
        </childnode>
        <childnode refid="11803" relation="include">
        </childnode>
        <childnode refid="11795" relation="include">
        </childnode>
        <childnode refid="11799" relation="include">
        </childnode>
        <childnode refid="11775" relation="include">
        </childnode>
        <childnode refid="11805" relation="include">
        </childnode>
        <childnode refid="11778" relation="include">
        </childnode>
      </node>
      <node id="11783">
        <label>bitset</label>
      </node>
      <node id="11804">
        <label>tuple</label>
      </node>
      <node id="11774">
        <label>vector</label>
      </node>
      <node id="11802">
        <label>new</label>
      </node>
      <node id="11790">
        <label>utility</label>
      </node>
      <node id="11775">
        <label>arrow/util/string_view.h</label>
        <link refid="string__view_8h"/>
        <childnode refid="11776" relation="include">
        </childnode>
        <childnode refid="11773" relation="include">
        </childnode>
        <childnode refid="11777" relation="include">
        </childnode>
      </node>
      <node id="11782">
        <label>array</label>
      </node>
      <node id="11793">
        <label>arrow/io/type_fwd.h</label>
        <link refid="io_2type__fwd_8h"/>
      </node>
      <node id="11798">
        <label>iosfwd</label>
      </node>
      <node id="11801">
        <label>arrow/result.h</label>
        <link refid="result_8h"/>
        <childnode refid="11802" relation="include">
        </childnode>
        <childnode refid="11773" relation="include">
        </childnode>
        <childnode refid="11789" relation="include">
        </childnode>
        <childnode refid="11790" relation="include">
        </childnode>
        <childnode refid="11797" relation="include">
        </childnode>
        <childnode refid="11796" relation="include">
        </childnode>
      </node>
      <node id="11808">
        <label>arrow/util/ubsan.h</label>
        <link refid="ubsan_8h"/>
        <childnode refid="11786" relation="include">
        </childnode>
        <childnode refid="11788" relation="include">
        </childnode>
        <childnode refid="11789" relation="include">
        </childnode>
        <childnode refid="11795" relation="include">
        </childnode>
      </node>
      <node id="11789">
        <label>type_traits</label>
      </node>
      <node id="11779">
        <label>algorithm</label>
      </node>
      <node id="11786">
        <label>cstring</label>
      </node>
      <node id="11799">
        <label>arrow/util/string_builder.h</label>
        <link refid="string__builder_8h"/>
        <childnode refid="11788" relation="include">
        </childnode>
        <childnode refid="11800" relation="include">
        </childnode>
        <childnode refid="11773" relation="include">
        </childnode>
        <childnode refid="11790" relation="include">
        </childnode>
        <childnode refid="11778" relation="include">
        </childnode>
      </node>
      <node id="11788">
        <label>memory</label>
      </node>
      <node id="11795">
        <label>arrow/util/macros.h</label>
        <link refid="macros_8h"/>
        <childnode refid="11776" relation="include">
        </childnode>
      </node>
      <node id="11806">
        <label>arrow/util/bpacking.h</label>
        <link refid="bpacking_8h"/>
        <childnode refid="11807" relation="include">
        </childnode>
        <childnode refid="11808" relation="include">
        </childnode>
        <childnode refid="11809" relation="include">
        </childnode>
      </node>
      <node id="11805">
        <label>arrow/util/type_traits.h</label>
        <link refid="util_2type__traits_8h"/>
        <childnode refid="11789" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="11810">
        <label>/arrow/cpp/src/arrow/util/bit_stream_utils.h</label>
        <link refid="bit__stream__utils_8h"/>
        <childnode refid="11811" relation="include">
        </childnode>
      </node>
      <node id="11811">
        <label>/arrow/cpp/src/arrow/util/rle_encoding.h</label>
        <link refid="rle__encoding_8h"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacearrow">arrow</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>From<sp/>Apache<sp/>Impala<sp/>(incubating)<sp/>as<sp/>of<sp/>2016-01-29</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="string_8h" kindref="compound">string.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="bit__util_8h" kindref="compound">arrow/util/bit_util.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="bpacking_8h" kindref="compound">arrow/util/bpacking.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="arrow_2util_2logging_8h" kindref="compound">arrow/util/logging.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="macros_8h" kindref="compound">arrow/util/macros.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacearrow" kindref="compound">arrow</ref><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacearrow_1_1_bit_util" kindref="compound">BitUtil</ref><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="keyword">class<sp/></highlight><highlight class="normal">BitWriter<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/>BitWriter(uint8_t*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>buffer_len)<sp/>:<sp/>buffer_(buffer),<sp/>max_bytes_(buffer_len)<sp/>{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>Clear();</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Clear()<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>buffered_values_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>byte_offset_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>bit_offset_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes_written()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>byte_offset_<sp/>+<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(BitUtil::BytesForBits(bit_offset_));</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>uint8_t*<sp/>buffer()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buffer_;<sp/>}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>buffer_len()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max_bytes_;<sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PutValue(uint64_t<sp/>v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_bits);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PutAligned(T<sp/>v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_bytes);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PutVlqInt(uint32_t<sp/>v);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Writes<sp/>an<sp/>int<sp/>zigzag<sp/>encoded.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>PutZigZagVlqInt(int32_t<sp/>v);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/>uint8_t*<sp/>GetNextBytePtr(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_bytes<sp/>=<sp/>1);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Flush(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>align<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/>uint8_t*<sp/>buffer_;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_bytes_;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>uint64_t<sp/>buffered_values_;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>byte_offset_;<sp/><sp/></highlight><highlight class="comment">//<sp/>Offset<sp/>in<sp/>buffer_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit_offset_;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Offset<sp/>in<sp/>buffered_values_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal">};</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="keyword">class<sp/></highlight><highlight class="normal">BitReader<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>BitReader(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>buffer_len)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>buffer_(buffer),<sp/>max_bytes_(buffer_len),<sp/>byte_offset_(0),<sp/>bit_offset_(0)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_bytes<sp/>=<sp/>std::min(8,<sp/>max_bytes_<sp/>-<sp/>byte_offset_);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;buffered_values_,<sp/>buffer_<sp/>+<sp/>byte_offset_,<sp/>num_bytes);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/>BitReader()</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>buffer_(NULL),</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_bytes_(0),</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffered_values_(0),</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>byte_offset_(0),</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bit_offset_(0)<sp/>{}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Reset(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>buffer_len)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer_<sp/>=<sp/>buffer;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>max_bytes_<sp/>=<sp/>buffer_len;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>byte_offset_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>bit_offset_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_bytes<sp/>=<sp/>std::min(8,<sp/>max_bytes_<sp/>-<sp/>byte_offset_);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;buffered_values_,<sp/>buffer_<sp/>+<sp/>byte_offset_,<sp/>num_bytes);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>GetValue(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_bits,<sp/>T*<sp/>v);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GetBatch(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_bits,<sp/>T*<sp/>v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>batch_size);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>GetAligned(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_bytes,<sp/>T*<sp/>v);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>GetVlqInt(uint32_t*<sp/>v);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reads<sp/>a<sp/>zigzag<sp/>encoded<sp/>int<sp/>`into`<sp/>v.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>GetZigZagVlqInt(int32_t*<sp/>v);</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes_left()<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max_bytes_<sp/>-</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(byte_offset_<sp/>+<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(BitUtil::BytesForBits(bit_offset_)));</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kMaxVlqByteLength<sp/>=<sp/>5;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>buffer_;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_bytes_;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>uint64_t<sp/>buffered_values_;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>byte_offset_;<sp/><sp/></highlight><highlight class="comment">//<sp/>Offset<sp/>in<sp/>buffer_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit_offset_;<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Offset<sp/>in<sp/>buffered_values_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal">};</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>BitWriter::PutValue(uint64_t<sp/>v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_bits)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>revisit<sp/>this<sp/>limit<sp/>if<sp/>necessary<sp/>(can<sp/>be<sp/>raised<sp/>to<sp/>64<sp/>by<sp/>fixing<sp/>some<sp/>edge<sp/>cases)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><ref refid="arrow_2util_2logging_8h_1a9fe3823537dcd0e93ddd2410d25de11a" kindref="member">DCHECK_LE</ref>(num_bits,<sp/>32);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><ref refid="arrow_2util_2logging_8h_1a41dd12c3206f67dc0b985215522c1013" kindref="member">DCHECK_EQ</ref>(v<sp/>&gt;&gt;<sp/>num_bits,<sp/>0)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;v<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>v<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;,<sp/>num_bits<sp/>=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>num_bits;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="macros_8h_1a6f2ee7ad52872edb915cf48e163ac99c" kindref="member">ARROW_PREDICT_FALSE</ref>(byte_offset_<sp/>*<sp/>8<sp/>+<sp/>bit_offset_<sp/>+<sp/>num_bits<sp/>&gt;<sp/>max_bytes_<sp/>*<sp/>8))</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/>buffered_values_<sp/>|=<sp/>v<sp/>&lt;&lt;<sp/>bit_offset_;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>bit_offset_<sp/>+=<sp/>num_bits;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="macros_8h_1a6f2ee7ad52872edb915cf48e163ac99c" kindref="member">ARROW_PREDICT_FALSE</ref>(bit_offset_<sp/>&gt;=<sp/>64))<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Flush<sp/>buffered_values_<sp/>and<sp/>write<sp/>out<sp/>bits<sp/>of<sp/>v<sp/>that<sp/>did<sp/>not<sp/>fit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(buffer_<sp/>+<sp/>byte_offset_,<sp/>&amp;buffered_values_,<sp/>8);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>buffered_values_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>byte_offset_<sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>bit_offset_<sp/>-=<sp/>64;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>buffered_values_<sp/>=<sp/>v<sp/>&gt;&gt;<sp/>(num_bits<sp/>-<sp/>bit_offset_);</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><ref refid="arrow_2util_2logging_8h_1ac38ad2de0753ea2ed31f4930eca0f566" kindref="member">DCHECK_LT</ref>(bit_offset_,<sp/>64);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="196"><highlight class="normal">}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BitWriter::Flush(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>align)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_bytes<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(BitUtil::BytesForBits(bit_offset_));</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><ref refid="arrow_2util_2logging_8h_1a9fe3823537dcd0e93ddd2410d25de11a" kindref="member">DCHECK_LE</ref>(byte_offset_<sp/>+<sp/>num_bytes,<sp/>max_bytes_);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/>memcpy(buffer_<sp/>+<sp/>byte_offset_,<sp/>&amp;buffered_values_,<sp/>num_bytes);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(align)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>buffered_values_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>byte_offset_<sp/>+=<sp/>num_bytes;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>bit_offset_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint8_t*<sp/>BitWriter::GetNextBytePtr(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_bytes)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/>Flush(</highlight><highlight class="comment">/*<sp/>align<sp/>*/</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><ref refid="arrow_2util_2logging_8h_1a9fe3823537dcd0e93ddd2410d25de11a" kindref="member">DCHECK_LE</ref>(byte_offset_,<sp/>max_bytes_);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(byte_offset_<sp/>+<sp/>num_bytes<sp/>&gt;<sp/>max_bytes_)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NULL;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>uint8_t*<sp/>ptr<sp/>=<sp/>buffer_<sp/>+<sp/>byte_offset_;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>byte_offset_<sp/>+=<sp/>num_bytes;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr;</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>BitWriter::PutAligned(T<sp/>val,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_bytes)<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>uint8_t*<sp/>ptr<sp/>=<sp/>GetNextBytePtr(num_bytes);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ptr<sp/>==<sp/>NULL)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>memcpy(ptr,<sp/>&amp;val,<sp/>num_bytes);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="225"><highlight class="normal">}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GetValue_(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_bits,<sp/>T*<sp/>v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_bytes,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>buffer,</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>bit_offset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>byte_offset,<sp/>uint64_t*<sp/>buffered_values)<sp/>{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(push)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(disable<sp/>:<sp/>4800)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/>*v<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(BitUtil::TrailingBits(*buffered_values,<sp/>*bit_offset<sp/>+<sp/>num_bits)<sp/>&gt;&gt;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*bit_offset);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(pop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/>*bit_offset<sp/>+=<sp/>num_bits;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*bit_offset<sp/>&gt;=<sp/>64)<sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>*byte_offset<sp/>+=<sp/>8;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>*bit_offset<sp/>-=<sp/>64;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes_remaining<sp/>=<sp/>max_bytes<sp/>-<sp/>*byte_offset;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="macros_8h_1a1f418a9edc46d53e62732e7ccd06f329" kindref="member">ARROW_PREDICT_TRUE</ref>(bytes_remaining<sp/>&gt;=<sp/>8))<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(buffered_values,<sp/>buffer<sp/>+<sp/>*byte_offset,<sp/>8);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(buffered_values,<sp/>buffer<sp/>+<sp/>*byte_offset,<sp/>bytes_remaining);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(push)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(disable<sp/>:<sp/>4800<sp/>4805)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>bits<sp/>of<sp/>v<sp/>that<sp/>crossed<sp/>into<sp/>new<sp/>buffered_values_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>*v<sp/>=<sp/>*v<sp/>|<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(BitUtil::TrailingBits(*buffered_values,<sp/>*bit_offset)</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>(num_bits<sp/>-<sp/>*bit_offset));</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(pop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="arrow_2util_2logging_8h_1a9fe3823537dcd0e93ddd2410d25de11a" kindref="member">DCHECK_LE</ref>(*bit_offset,<sp/>64);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>BitReader::GetValue(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_bits,<sp/>T*<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetBatch(num_bits,<sp/>v,<sp/>1)<sp/>==<sp/>1;</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>BitReader::GetBatch(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_bits,<sp/>T*<sp/>v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>batch_size)<sp/>{</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><ref refid="arrow_2util_2logging_8h_1afbcf38b795bbece32e47b67a15463fd5" kindref="member">DCHECK</ref>(buffer_<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>revisit<sp/>this<sp/>limit<sp/>if<sp/>necessary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><ref refid="arrow_2util_2logging_8h_1a9fe3823537dcd0e93ddd2410d25de11a" kindref="member">DCHECK_LE</ref>(num_bits,<sp/>32);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><ref refid="arrow_2util_2logging_8h_1a9fe3823537dcd0e93ddd2410d25de11a" kindref="member">DCHECK_LE</ref>(num_bits,<sp/>static_cast&lt;int&gt;(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>*<sp/>8));</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit_offset<sp/>=<sp/>bit_offset_;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>byte_offset<sp/>=<sp/>byte_offset_;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>uint64_t<sp/>buffered_values<sp/>=<sp/>buffered_values_;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_bytes<sp/>=<sp/>max_bytes_;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>buffer<sp/>=<sp/>buffer_;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>uint64_t<sp/>needed_bits<sp/>=<sp/>num_bits<sp/>*<sp/>batch_size;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>uint64_t<sp/>remaining_bits<sp/>=<sp/>(max_bytes<sp/>-<sp/>byte_offset)<sp/>*<sp/>8<sp/>-<sp/>bit_offset;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remaining_bits<sp/>&lt;<sp/>needed_bits)<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>batch_size<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(remaining_bits)<sp/>/<sp/>num_bits;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="macros_8h_1a6f2ee7ad52872edb915cf48e163ac99c" kindref="member">ARROW_PREDICT_FALSE</ref>(bit_offset<sp/>!=<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>i<sp/>&lt;<sp/>batch_size<sp/>&amp;&amp;<sp/>bit_offset<sp/>!=<sp/>0;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>detail::GetValue_(num_bits,<sp/>&amp;v[i],<sp/>max_bytes,<sp/>buffer,<sp/>&amp;bit_offset,<sp/>&amp;byte_offset,</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;buffered_values);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T)<sp/>==<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_unpacked<sp/>=</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal::unpack32(reinterpret_cast&lt;const<sp/>uint32_t*&gt;(buffer<sp/>+<sp/>byte_offset),</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reinterpret_cast&lt;uint32_t*&gt;(v<sp/>+<sp/>i),<sp/>batch_size<sp/>-<sp/>i,<sp/>num_bits);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>num_unpacked;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>byte_offset<sp/>+=<sp/>num_unpacked<sp/>*<sp/>num_bits<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>buffer_size<sp/>=<sp/>1024;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>unpack_buffer[buffer_size];</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(i<sp/>&lt;<sp/>batch_size)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>unpack_size<sp/>=<sp/>std::min(buffer_size,<sp/>batch_size<sp/>-<sp/>i);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_unpacked<sp/>=</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal::unpack32(reinterpret_cast&lt;const<sp/>uint32_t*&gt;(buffer<sp/>+<sp/>byte_offset),</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>unpack_buffer,<sp/>unpack_size,<sp/>num_bits);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_unpacked<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>num_unpacked;<sp/>++k)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(push)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(disable<sp/>:<sp/>4800)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v[i<sp/>+<sp/>k]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">T</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(unpack_buffer[k]);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_MSC_VER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>warning(pop)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>num_unpacked;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>byte_offset<sp/>+=<sp/>num_unpacked<sp/>*<sp/>num_bits<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes_remaining<sp/>=<sp/>max_bytes<sp/>-<sp/>byte_offset;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes_remaining<sp/>&gt;=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;buffered_values,<sp/>buffer<sp/>+<sp/>byte_offset,<sp/>8);</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;buffered_values,<sp/>buffer<sp/>+<sp/>byte_offset,<sp/>bytes_remaining);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>i<sp/>&lt;<sp/>batch_size;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>detail::GetValue_(num_bits,<sp/>&amp;v[i],<sp/>max_bytes,<sp/>buffer,<sp/>&amp;bit_offset,<sp/>&amp;byte_offset,</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;buffered_values);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/>bit_offset_<sp/>=<sp/>bit_offset;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>byte_offset_<sp/>=<sp/>byte_offset;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/>buffered_values_<sp/>=<sp/>buffered_values;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>batch_size;</highlight></codeline>
<codeline lineno="349"><highlight class="normal">}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>BitReader::GetAligned(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_bytes,<sp/>T*<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="macros_8h_1a6f2ee7ad52872edb915cf48e163ac99c" kindref="member">ARROW_PREDICT_FALSE</ref>(num_bytes<sp/>&gt;<sp/>static_cast&lt;int&gt;(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T))))<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes_read<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(BitUtil::BytesForBits(bit_offset_));</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="macros_8h_1a6f2ee7ad52872edb915cf48e163ac99c" kindref="member">ARROW_PREDICT_FALSE</ref>(byte_offset_<sp/>+<sp/>bytes_read<sp/>+<sp/>num_bytes<sp/>&gt;<sp/>max_bytes_))<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Advance<sp/>byte_offset<sp/>to<sp/>next<sp/>unread<sp/>byte<sp/>and<sp/>read<sp/>num_bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/>byte_offset_<sp/>+=<sp/>bytes_read;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/>memcpy(v,<sp/>buffer_<sp/>+<sp/>byte_offset_,<sp/>num_bytes);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>byte_offset_<sp/>+=<sp/>num_bytes;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>buffered_values_</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>bit_offset_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes_remaining<sp/>=<sp/>max_bytes_<sp/>-<sp/>byte_offset_;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="macros_8h_1a1f418a9edc46d53e62732e7ccd06f329" kindref="member">ARROW_PREDICT_TRUE</ref>(bytes_remaining<sp/>&gt;=<sp/>8))<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;buffered_values_,<sp/>buffer_<sp/>+<sp/>byte_offset_,<sp/>8);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;buffered_values_,<sp/>buffer_<sp/>+<sp/>byte_offset_,<sp/>bytes_remaining);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="376"><highlight class="normal">}</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>BitWriter::PutVlqInt(uint32_t<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((v<sp/>&amp;<sp/>0xFFFFFF80UL)<sp/>!=<sp/>0UL)<sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>result<sp/>&amp;=<sp/>PutAligned&lt;uint8_t&gt;(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((v<sp/>&amp;<sp/>0x7F)<sp/>|<sp/>0x80),<sp/>1);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>&gt;&gt;=<sp/>7;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/>result<sp/>&amp;=<sp/>PutAligned&lt;uint8_t&gt;(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(v<sp/>&amp;<sp/>0x7F),<sp/>1);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result;</highlight></codeline>
<codeline lineno="386"><highlight class="normal">}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>BitReader::GetVlqInt(uint32_t*<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>uint32_t<sp/>tmp<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>kMaxVlqByteLength;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t<sp/>byte<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="macros_8h_1a6f2ee7ad52872edb915cf48e163ac99c" kindref="member">ARROW_PREDICT_FALSE</ref>(!GetAligned&lt;uint8_t&gt;(1,<sp/>&amp;byte)))<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>tmp<sp/>|=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(byte<sp/>&amp;<sp/>0x7F)<sp/>&lt;&lt;<sp/>(7<sp/>*<sp/>i);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((byte<sp/>&amp;<sp/>0x80)<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*v<sp/>=<sp/>tmp;</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="405"><highlight class="normal">}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>BitWriter::PutZigZagVlqInt(int32_t<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>u_v<sp/>=<sp/>::arrow::util::SafeCopy&lt;uint32_t&gt;(v);</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>PutVlqInt((u_v<sp/>&lt;&lt;<sp/>1)<sp/>^<sp/>(u_v<sp/>&gt;&gt;<sp/>31));</highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>BitReader::GetZigZagVlqInt(int32_t*<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>uint32_t<sp/>u;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!GetVlqInt(&amp;u))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/>*v<sp/>=<sp/>::arrow::util::SafeCopy&lt;int32_t&gt;((u<sp/>&gt;&gt;<sp/>1)<sp/>^<sp/>(u<sp/>&lt;&lt;<sp/>31));</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="417"><highlight class="normal">}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>BitUtil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>arrow</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/arrow/cpp/src/arrow/util/bit_stream_utils.h"/>
  </compounddef>
</doxygen>
