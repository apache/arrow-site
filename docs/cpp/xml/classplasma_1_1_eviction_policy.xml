<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classplasma_1_1_eviction_policy" kind="class" language="C++" prot="public">
    <compoundname>plasma::EvictionPolicy</compoundname>
    <derivedcompoundref refid="classplasma_1_1_quota_aware_policy" prot="public" virt="non-virtual">plasma::QuotaAwarePolicy</derivedcompoundref>
    <includes refid="eviction__policy_8h" local="no">plasma/eviction_policy.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classplasma_1_1_eviction_policy_1aae9d0c10bfb3301a99a2ba1d6f85af41" prot="protected" static="no" mutable="no">
        <type>int64_t</type>
        <definition>int64_t plasma::EvictionPolicy::pinned_memory_bytes_</definition>
        <argsstring></argsstring>
        <name>pinned_memory_bytes_</name>
        <briefdescription>
<para>The number of bytes pinned by applications. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/eviction_policy.h" line="201" column="1" bodyfile="/arrow/cpp/src/plasma/eviction_policy.h" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classplasma_1_1_eviction_policy_1a080bf6e4bd6ff04d07a682eeae1ca74b" prot="protected" static="no" mutable="no">
        <type><ref refid="structplasma_1_1_plasma_store_info" kindref="compound">PlasmaStoreInfo</ref> *</type>
        <definition>PlasmaStoreInfo* plasma::EvictionPolicy::store_info_</definition>
        <argsstring></argsstring>
        <name>store_info_</name>
        <briefdescription>
<para>Pointer to the plasma store info. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/eviction_policy.h" line="204" column="1" bodyfile="/arrow/cpp/src/plasma/eviction_policy.h" bodystart="204" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classplasma_1_1_eviction_policy_1ab035814f65b85c6692d15a49987aecbe" prot="protected" static="no" mutable="no">
        <type><ref refid="classplasma_1_1_l_r_u_cache" kindref="compound">LRUCache</ref></type>
        <definition>LRUCache plasma::EvictionPolicy::cache_</definition>
        <argsstring></argsstring>
        <name>cache_</name>
        <briefdescription>
<para>Datastructure for the LRU cache. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/eviction_policy.h" line="206" column="1" bodyfile="/arrow/cpp/src/plasma/eviction_policy.h" bodystart="206" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classplasma_1_1_eviction_policy_1aecc30b5188da8a25aeb813eeac2549c6" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>plasma::EvictionPolicy::EvictionPolicy</definition>
        <argsstring>(PlasmaStoreInfo *store_info, int64_t max_size)</argsstring>
        <name>EvictionPolicy</name>
        <param>
          <type><ref refid="structplasma_1_1_plasma_store_info" kindref="compound">PlasmaStoreInfo</ref> *</type>
          <declname>store_info</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>max_size</declname>
        </param>
        <briefdescription>
<para>Construct an eviction policy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>store_info</parametername>
</parameternamelist>
<parameterdescription>
<para>Information about the Plasma store that is exposed to the eviction policy. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Max size in bytes total of objects to store. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/eviction_policy.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_eviction_policy_1a6eafeafec7f514890b6fc825f4ce712d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual plasma::EvictionPolicy::~EvictionPolicy</definition>
        <argsstring>()</argsstring>
        <name>~EvictionPolicy</name>
        <briefdescription>
<para>Destroy an eviction policy. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/eviction_policy.h" line="103" column="1" bodyfile="/arrow/cpp/src/plasma/eviction_policy.h" bodystart="103" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_eviction_policy_1a444bb25633645dd61a4163f54ea6784b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void plasma::EvictionPolicy::ObjectCreated</definition>
        <argsstring>(const ObjectID &amp;object_id, Client *client, bool is_create)</argsstring>
        <name>ObjectCreated</name>
        <reimplementedby refid="classplasma_1_1_quota_aware_policy_1a2bdd1f9498409b2bb943ddc265e23b43">ObjectCreated</reimplementedby>
        <param>
          <type>const <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &amp;</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type><ref refid="structplasma_1_1_client" kindref="compound">Client</ref> *</type>
          <declname>client</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_create</declname>
        </param>
        <briefdescription>
<para>This method will be called whenever an object is first created in order to add it to the LRU cache. </para>        </briefdescription>
        <detaileddescription>
<para>This is done so that the first time, the Plasma store calls begin_object_access, we can remove the object from the LRU cache.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The object ID of the object that was created. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>client</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to the client. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_create</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether we are creating a new object (vs reading an object). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/eviction_policy.h" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_eviction_policy_1a084fcfb32d14d978bb18d140dcc4c64e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool plasma::EvictionPolicy::SetClientQuota</definition>
        <argsstring>(Client *client, int64_t output_memory_quota)</argsstring>
        <name>SetClientQuota</name>
        <reimplementedby refid="classplasma_1_1_quota_aware_policy_1a2ab5a2897e21ef0d96859947755e2d8a">SetClientQuota</reimplementedby>
        <param>
          <type><ref refid="structplasma_1_1_client" kindref="compound">Client</ref> *</type>
          <declname>client</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>output_memory_quota</declname>
        </param>
        <briefdescription>
<para>Set quota for a client. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>client</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to the client. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output_memory_quota</parametername>
</parameternamelist>
<parameterdescription>
<para>Set the quota for this client. This can only be called once per client. This is effectively the equivalent of giving the client its own LRU cache instance. The memory for this is taken out of the capacity of the global LRU cache for the client lifetime.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if enough space can be reserved for the given client quota. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/eviction_policy.h" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_eviction_policy_1ac4a4c94e0291a5ba533af63077029e89" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool plasma::EvictionPolicy::EnforcePerClientQuota</definition>
        <argsstring>(Client *client, int64_t size, bool is_create, std::vector&lt; ObjectID &gt; *objects_to_evict)</argsstring>
        <name>EnforcePerClientQuota</name>
        <reimplementedby refid="classplasma_1_1_quota_aware_policy_1afaba9f168db19d0e00bdfad7f7965677">EnforcePerClientQuota</reimplementedby>
        <param>
          <type><ref refid="structplasma_1_1_client" kindref="compound">Client</ref> *</type>
          <declname>client</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_create</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &gt; *</type>
          <declname>objects_to_evict</declname>
        </param>
        <briefdescription>
<para>Determine what objects need to be evicted to enforce the given client&apos;s quota. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>client</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to the client creating the object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the object to create. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_create</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether we are creating a new object (vs reading an object). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>objects_to_evict</parametername>
</parameternamelist>
<parameterdescription>
<para>The object IDs that were chosen for eviction will be stored into this vector.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if enough space could be freed and false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/eviction_policy.h" line="135" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_eviction_policy_1aa690a34a5cb611b8676e46e6cd8e6b6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void plasma::EvictionPolicy::ClientDisconnected</definition>
        <argsstring>(Client *client)</argsstring>
        <name>ClientDisconnected</name>
        <reimplementedby refid="classplasma_1_1_quota_aware_policy_1a67365071fc86ce8494ec1871a9ab2456">ClientDisconnected</reimplementedby>
        <param>
          <type><ref refid="structplasma_1_1_client" kindref="compound">Client</ref> *</type>
          <declname>client</declname>
        </param>
        <briefdescription>
<para>Called to clean up any resources allocated by this client. </para>        </briefdescription>
        <detaileddescription>
<para>This merges any per-client LRU queue created by SetClientQuota into the global LRU queue.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>client</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to the client. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/eviction_policy.h" line="142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_eviction_policy_1a27026ab6d95cf2554d5389efbc0912a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>virtual bool plasma::EvictionPolicy::RequireSpace</definition>
        <argsstring>(int64_t size, std::vector&lt; ObjectID &gt; *objects_to_evict)</argsstring>
        <name>RequireSpace</name>
        <param>
          <type>int64_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &gt; *</type>
          <declname>objects_to_evict</declname>
        </param>
        <briefdescription>
<para>This method will be called when the Plasma store needs more space, perhaps to create a new object. </para>        </briefdescription>
        <detaileddescription>
<para>When this method is called, the eviction policy will assume that the objects chosen to be evicted will in fact be evicted from the Plasma store by the caller.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size in bytes of the new object, including both data and metadata. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>objects_to_evict</parametername>
</parameternamelist>
<parameterdescription>
<para>The object IDs that were chosen for eviction will be stored into this vector. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if enough space can be freed and false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/eviction_policy.h" line="154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_eviction_policy_1acb7b3db12819c7f8632ef61a040cea97" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void plasma::EvictionPolicy::BeginObjectAccess</definition>
        <argsstring>(const ObjectID &amp;object_id)</argsstring>
        <name>BeginObjectAccess</name>
        <reimplementedby refid="classplasma_1_1_quota_aware_policy_1a3680e14ede7ac64700140f7941b69b8a">BeginObjectAccess</reimplementedby>
        <param>
          <type>const <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &amp;</type>
          <declname>object_id</declname>
        </param>
        <briefdescription>
<para>This method will be called whenever an unused object in the Plasma store starts to be used. </para>        </briefdescription>
        <detaileddescription>
<para>When this method is called, the eviction policy will assume that the objects chosen to be evicted will in fact be evicted from the Plasma store by the caller.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the object that is now being used. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/eviction_policy.h" line="162" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_eviction_policy_1a176728d8bd0b60646b8db067a9e57be1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void plasma::EvictionPolicy::EndObjectAccess</definition>
        <argsstring>(const ObjectID &amp;object_id)</argsstring>
        <name>EndObjectAccess</name>
        <reimplementedby refid="classplasma_1_1_quota_aware_policy_1a2d8f9f74003f31d79ec9e13d269e3da8">EndObjectAccess</reimplementedby>
        <param>
          <type>const <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &amp;</type>
          <declname>object_id</declname>
        </param>
        <briefdescription>
<para>This method will be called whenever an object in the Plasma store that was being used is no longer being used. </para>        </briefdescription>
        <detaileddescription>
<para>When this method is called, the eviction policy will assume that the objects chosen to be evicted will in fact be evicted from the Plasma store by the caller.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the object that is no longer being used. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/eviction_policy.h" line="170" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_eviction_policy_1a019301658b3c0577de8f3b6f4122a850" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>int64_t</type>
        <definition>virtual int64_t plasma::EvictionPolicy::ChooseObjectsToEvict</definition>
        <argsstring>(int64_t num_bytes_required, std::vector&lt; ObjectID &gt; *objects_to_evict)</argsstring>
        <name>ChooseObjectsToEvict</name>
        <param>
          <type>int64_t</type>
          <declname>num_bytes_required</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &gt; *</type>
          <declname>objects_to_evict</declname>
        </param>
        <briefdescription>
<para>Choose some objects to evict from the Plasma store. </para>        </briefdescription>
        <detaileddescription>
<para>When this method is called, the eviction policy will assume that the objects chosen to be evicted will in fact be evicted from the Plasma store by the caller.</para><para><simplesect kind="note"><para>This method is not part of the API. It is exposed in the header file only for testing.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num_bytes_required</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes of space to try to free up. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>objects_to_evict</parametername>
</parameternamelist>
<parameterdescription>
<para>The object IDs that were chosen for eviction will be stored into this vector. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The total number of bytes of space chosen to be evicted. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/eviction_policy.h" line="183" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_eviction_policy_1ad0ffe94b655665efdfe1beb908b356a9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void plasma::EvictionPolicy::RemoveObject</definition>
        <argsstring>(const ObjectID &amp;object_id)</argsstring>
        <name>RemoveObject</name>
        <reimplementedby refid="classplasma_1_1_quota_aware_policy_1a8d285fc3a0790b952ca9242a6a49a3aa">RemoveObject</reimplementedby>
        <param>
          <type>const <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &amp;</type>
          <declname>object_id</declname>
        </param>
        <briefdescription>
<para>This method will be called when an object is going to be removed. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the object that is now being used. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/eviction_policy.h" line="189" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_eviction_policy_1abc9c15167b5a009763db5515814a313f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void plasma::EvictionPolicy::RefreshObjects</definition>
        <argsstring>(const std::vector&lt; ObjectID &gt; &amp;object_ids)</argsstring>
        <name>RefreshObjects</name>
        <reimplementedby refid="classplasma_1_1_quota_aware_policy_1a4cb58b8cda6140abca62b9d7f6d45cbe">RefreshObjects</reimplementedby>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &gt; &amp;</type>
          <declname>object_ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/eviction_policy.h" line="191" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_eviction_policy_1aa4e68f089858d59db533091c7a8a6f35" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>virtual std::string plasma::EvictionPolicy::DebugString</definition>
        <argsstring>() const</argsstring>
        <name>DebugString</name>
        <reimplementedby refid="classplasma_1_1_quota_aware_policy_1afb58e0563422446314e303e9460598c4">DebugString</reimplementedby>
        <briefdescription>
<para>Returns debugging information for this eviction policy. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/eviction_policy.h" line="194" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classplasma_1_1_eviction_policy_1a118a523789648de2e552a3f571fe23f5" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t plasma::EvictionPolicy::GetObjectSize</definition>
        <argsstring>(const ObjectID &amp;object_id) const</argsstring>
        <name>GetObjectSize</name>
        <param>
          <type>const <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &amp;</type>
          <declname>object_id</declname>
        </param>
        <briefdescription>
<para>Returns the size of the object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/eviction_policy.h" line="198" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The eviction policy. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1421">
        <label>plasma::QuotaAwarePolicy</label>
        <link refid="classplasma_1_1_quota_aware_policy"/>
        <childnode refid="1420" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1420">
        <label>plasma::EvictionPolicy</label>
        <link refid="classplasma_1_1_eviction_policy"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1423">
        <label>plasma::LRUCache</label>
        <link refid="classplasma_1_1_l_r_u_cache"/>
      </node>
      <node id="1422">
        <label>plasma::EvictionPolicy</label>
        <link refid="classplasma_1_1_eviction_policy"/>
        <childnode refid="1423" relation="usage">
          <edgelabel>cache_</edgelabel>
        </childnode>
        <childnode refid="1424" relation="usage">
          <edgelabel>store_info_</edgelabel>
        </childnode>
      </node>
      <node id="1424">
        <label>plasma::PlasmaStoreInfo</label>
        <link refid="structplasma_1_1_plasma_store_info"/>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/plasma/eviction_policy.h" line="93" column="1" bodyfile="/arrow/cpp/src/plasma/eviction_policy.h" bodystart="93" bodyend="207"/>
    <listofallmembers>
      <member refid="classplasma_1_1_eviction_policy_1acb7b3db12819c7f8632ef61a040cea97" prot="public" virt="virtual"><scope>plasma::EvictionPolicy</scope><name>BeginObjectAccess</name></member>
      <member refid="classplasma_1_1_eviction_policy_1ab035814f65b85c6692d15a49987aecbe" prot="protected" virt="non-virtual"><scope>plasma::EvictionPolicy</scope><name>cache_</name></member>
      <member refid="classplasma_1_1_eviction_policy_1a019301658b3c0577de8f3b6f4122a850" prot="public" virt="virtual"><scope>plasma::EvictionPolicy</scope><name>ChooseObjectsToEvict</name></member>
      <member refid="classplasma_1_1_eviction_policy_1aa690a34a5cb611b8676e46e6cd8e6b6a" prot="public" virt="virtual"><scope>plasma::EvictionPolicy</scope><name>ClientDisconnected</name></member>
      <member refid="classplasma_1_1_eviction_policy_1aa4e68f089858d59db533091c7a8a6f35" prot="public" virt="virtual"><scope>plasma::EvictionPolicy</scope><name>DebugString</name></member>
      <member refid="classplasma_1_1_eviction_policy_1a176728d8bd0b60646b8db067a9e57be1" prot="public" virt="virtual"><scope>plasma::EvictionPolicy</scope><name>EndObjectAccess</name></member>
      <member refid="classplasma_1_1_eviction_policy_1ac4a4c94e0291a5ba533af63077029e89" prot="public" virt="virtual"><scope>plasma::EvictionPolicy</scope><name>EnforcePerClientQuota</name></member>
      <member refid="classplasma_1_1_eviction_policy_1aecc30b5188da8a25aeb813eeac2549c6" prot="public" virt="non-virtual"><scope>plasma::EvictionPolicy</scope><name>EvictionPolicy</name></member>
      <member refid="classplasma_1_1_eviction_policy_1a118a523789648de2e552a3f571fe23f5" prot="protected" virt="non-virtual"><scope>plasma::EvictionPolicy</scope><name>GetObjectSize</name></member>
      <member refid="classplasma_1_1_eviction_policy_1a444bb25633645dd61a4163f54ea6784b" prot="public" virt="virtual"><scope>plasma::EvictionPolicy</scope><name>ObjectCreated</name></member>
      <member refid="classplasma_1_1_eviction_policy_1aae9d0c10bfb3301a99a2ba1d6f85af41" prot="protected" virt="non-virtual"><scope>plasma::EvictionPolicy</scope><name>pinned_memory_bytes_</name></member>
      <member refid="classplasma_1_1_eviction_policy_1abc9c15167b5a009763db5515814a313f" prot="public" virt="virtual"><scope>plasma::EvictionPolicy</scope><name>RefreshObjects</name></member>
      <member refid="classplasma_1_1_eviction_policy_1ad0ffe94b655665efdfe1beb908b356a9" prot="public" virt="virtual"><scope>plasma::EvictionPolicy</scope><name>RemoveObject</name></member>
      <member refid="classplasma_1_1_eviction_policy_1a27026ab6d95cf2554d5389efbc0912a8" prot="public" virt="virtual"><scope>plasma::EvictionPolicy</scope><name>RequireSpace</name></member>
      <member refid="classplasma_1_1_eviction_policy_1a084fcfb32d14d978bb18d140dcc4c64e" prot="public" virt="virtual"><scope>plasma::EvictionPolicy</scope><name>SetClientQuota</name></member>
      <member refid="classplasma_1_1_eviction_policy_1a080bf6e4bd6ff04d07a682eeae1ca74b" prot="protected" virt="non-virtual"><scope>plasma::EvictionPolicy</scope><name>store_info_</name></member>
      <member refid="classplasma_1_1_eviction_policy_1a6eafeafec7f514890b6fc825f4ce712d" prot="public" virt="virtual"><scope>plasma::EvictionPolicy</scope><name>~EvictionPolicy</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
