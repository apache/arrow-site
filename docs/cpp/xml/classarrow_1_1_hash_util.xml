<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_hash_util" kind="class" language="C++" prot="public">
    <compoundname>arrow::HashUtil</compoundname>
    <includes refid="hash__util_8h" local="no">arrow/util/hash_util.h</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classarrow_1_1_hash_util_1ae58a991f24ab2b0f80a4953548af68e9" prot="public" static="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool arrow::HashUtil::have_hardware_crc32</definition>
        <argsstring></argsstring>
        <name>have_hardware_crc32</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/hash_util.h" line="73" column="1" bodyfile="/arrow/cpp/src/arrow/util/hash_util.h" bodystart="73" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1_hash_util_1a2db742edf8d7c71d8a5eade7eedfa13c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t arrow::HashUtil::CrcHash</definition>
        <argsstring>(const void *data, int32_t nbytes, uint32_t hash)</argsstring>
        <name>CrcHash</name>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>nbytes</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
<para>Compute the Crc32 hash for data using SSE4/ArmCRC instructions. </para>        </briefdescription>
        <detaileddescription>
<para>The input hash parameter is the current hash/seed value. This should only be called if SSE/ArmCRC is supported. This is ~4x faster than Fnv/Boost Hash. TODO: crc32 hashes with different seeds do not result in different hash functions. The resulting hashes are correlated. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/hash_util.h" line="162" column="1" bodyfile="/arrow/cpp/src/arrow/util/hash_util.h" bodystart="162" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_hash_util_1ada30d1ac0658cfba2c5be34029c36bea" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>static uint64_t arrow::HashUtil::DoubleCrcHash</definition>
        <argsstring>(const void *data, int32_t nbytes, uint64_t hash)</argsstring>
        <name>DoubleCrcHash</name>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>nbytes</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
<para>A variant of CRC32 hashing that computes two independent running CRCs over interleaved halves of the input, giving out a 64-bit integer. </para>        </briefdescription>
        <detaileddescription>
<para>The result&apos;s quality should be improved by a finalization step.</para><para>In addition to producing more bits of output, this should be twice faster than CrcHash on CPUs that can overlap several independent CRC computations. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/hash_util.h" line="195" column="1" bodyfile="/arrow/cpp/src/arrow/util/hash_util.h" bodystart="195" bodyend="247"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Utility class to compute hash values. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/arrow/util/hash_util.h" line="68" column="1" bodyfile="/arrow/cpp/src/arrow/util/hash_util.h" bodystart="68" bodyend="248"/>
    <listofallmembers>
      <member refid="classarrow_1_1_hash_util_1a2db742edf8d7c71d8a5eade7eedfa13c" prot="public" virt="non-virtual"><scope>arrow::HashUtil</scope><name>CrcHash</name></member>
      <member refid="classarrow_1_1_hash_util_1ada30d1ac0658cfba2c5be34029c36bea" prot="public" virt="non-virtual"><scope>arrow::HashUtil</scope><name>DoubleCrcHash</name></member>
      <member refid="classarrow_1_1_hash_util_1ae58a991f24ab2b0f80a4953548af68e9" prot="public" virt="non-virtual"><scope>arrow::HashUtil</scope><name>have_hardware_crc32</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
