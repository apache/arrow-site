<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structarrow_1_1_type_traits_3_01_large_binary_type_01_4" kind="struct" language="C++" prot="public">
    <compoundname>arrow::TypeTraits&lt; LargeBinaryType &gt;</compoundname>
    <includes refid="type__traits_8h" local="no">arrow/type_traits.h</includes>
    <templateparamlist>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structarrow_1_1_type_traits_3_01_large_binary_type_01_4_1ab5c4c7eb2f7e00812093f4d42b3bd5a2" prot="public" static="no">
        <type><ref refid="classarrow_1_1_large_binary_array" kindref="compound">LargeBinaryArray</ref></type>
        <definition>using arrow::TypeTraits&lt; LargeBinaryType &gt;::ArrayType =  LargeBinaryArray</definition>
        <argsstring></argsstring>
        <name>ArrayType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_traits.h" line="250" column="1" bodyfile="/arrow/cpp/src/arrow/type_traits.h" bodystart="250" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structarrow_1_1_type_traits_3_01_large_binary_type_01_4_1af4f82058f08817fb42be1bac8338c752" prot="public" static="no">
        <type><ref refid="classarrow_1_1_large_binary_builder" kindref="compound">LargeBinaryBuilder</ref></type>
        <definition>using arrow::TypeTraits&lt; LargeBinaryType &gt;::BuilderType =  LargeBinaryBuilder</definition>
        <argsstring></argsstring>
        <name>BuilderType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_traits.h" line="251" column="1" bodyfile="/arrow/cpp/src/arrow/type_traits.h" bodystart="251" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structarrow_1_1_type_traits_3_01_large_binary_type_01_4_1a02c5d79723182903386e8bec7b3c60a9" prot="public" static="no">
        <type><ref refid="structarrow_1_1_large_binary_scalar" kindref="compound">LargeBinaryScalar</ref></type>
        <definition>using arrow::TypeTraits&lt; LargeBinaryType &gt;::ScalarType =  LargeBinaryScalar</definition>
        <argsstring></argsstring>
        <name>ScalarType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_traits.h" line="252" column="1" bodyfile="/arrow/cpp/src/arrow/type_traits.h" bodystart="252" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="structarrow_1_1_type_traits_3_01_large_binary_type_01_4_1a71b91ba36c0ca724f7a0b41ea6f43673" prot="public" static="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool arrow::TypeTraits&lt; LargeBinaryType &gt;::is_parameter_free</definition>
        <argsstring></argsstring>
        <name>is_parameter_free</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_traits.h" line="253" column="1" bodyfile="/arrow/cpp/src/arrow/type_traits.h" bodystart="253" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structarrow_1_1_type_traits_3_01_large_binary_type_01_4_1a82a21ea6a2c09abcc8ddd320acc486c7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;DataType&gt; arrow::TypeTraits&lt; LargeBinaryType &gt;::type_singleton</definition>
        <argsstring>()</argsstring>
        <name>type_singleton</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_traits.h" line="254" column="1" bodyfile="/arrow/cpp/src/arrow/type_traits.h" bodystart="254" bodyend="254"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/arrow/type_traits.h" line="249" column="1" bodyfile="/arrow/cpp/src/arrow/type_traits.h" bodystart="249" bodyend="255"/>
    <listofallmembers>
      <member refid="structarrow_1_1_type_traits_3_01_large_binary_type_01_4_1ab5c4c7eb2f7e00812093f4d42b3bd5a2" prot="public" virt="non-virtual"><scope>arrow::TypeTraits&lt; LargeBinaryType &gt;</scope><name>ArrayType</name></member>
      <member refid="structarrow_1_1_type_traits_3_01_large_binary_type_01_4_1af4f82058f08817fb42be1bac8338c752" prot="public" virt="non-virtual"><scope>arrow::TypeTraits&lt; LargeBinaryType &gt;</scope><name>BuilderType</name></member>
      <member refid="structarrow_1_1_type_traits_3_01_large_binary_type_01_4_1a71b91ba36c0ca724f7a0b41ea6f43673" prot="public" virt="non-virtual"><scope>arrow::TypeTraits&lt; LargeBinaryType &gt;</scope><name>is_parameter_free</name></member>
      <member refid="structarrow_1_1_type_traits_3_01_large_binary_type_01_4_1a02c5d79723182903386e8bec7b3c60a9" prot="public" virt="non-virtual"><scope>arrow::TypeTraits&lt; LargeBinaryType &gt;</scope><name>ScalarType</name></member>
      <member refid="structarrow_1_1_type_traits_3_01_large_binary_type_01_4_1a82a21ea6a2c09abcc8ddd320acc486c7" prot="public" virt="non-virtual"><scope>arrow::TypeTraits&lt; LargeBinaryType &gt;</scope><name>type_singleton</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
