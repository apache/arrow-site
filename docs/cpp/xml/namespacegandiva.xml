<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacegandiva" kind="namespace" language="C++">
    <compoundname>gandiva</compoundname>
    <innerclass refid="classgandiva_1_1_annotator" prot="public">gandiva::Annotator</innerclass>
    <innerclass refid="classgandiva_1_1_basic_decimal_scalar128" prot="public">gandiva::BasicDecimalScalar128</innerclass>
    <innerclass refid="classgandiva_1_1_bit_map_accumulator" prot="public">gandiva::BitMapAccumulator</innerclass>
    <innerclass refid="classgandiva_1_1_boolean_and_dex" prot="public">gandiva::BooleanAndDex</innerclass>
    <innerclass refid="classgandiva_1_1_boolean_dex" prot="public">gandiva::BooleanDex</innerclass>
    <innerclass refid="classgandiva_1_1_boolean_node" prot="public">gandiva::BooleanNode</innerclass>
    <innerclass refid="classgandiva_1_1_boolean_or_dex" prot="public">gandiva::BooleanOrDex</innerclass>
    <innerclass refid="classgandiva_1_1_cache" prot="public">gandiva::Cache</innerclass>
    <innerclass refid="classgandiva_1_1_compiled_expr" prot="public">gandiva::CompiledExpr</innerclass>
    <innerclass refid="classgandiva_1_1_condition" prot="public">gandiva::Condition</innerclass>
    <innerclass refid="classgandiva_1_1_config_holder" prot="public">gandiva::ConfigHolder</innerclass>
    <innerclass refid="classgandiva_1_1_configuration" prot="public">gandiva::Configuration</innerclass>
    <innerclass refid="classgandiva_1_1_configuration_builder" prot="public">gandiva::ConfigurationBuilder</innerclass>
    <innerclass refid="classgandiva_1_1_date_utils" prot="public">gandiva::DateUtils</innerclass>
    <innerclass refid="classgandiva_1_1_decimal_i_r" prot="public">gandiva::DecimalIR</innerclass>
    <innerclass refid="classgandiva_1_1_decimal_l_value" prot="public">gandiva::DecimalLValue</innerclass>
    <innerclass refid="classgandiva_1_1_decimal_scalar128" prot="public">gandiva::DecimalScalar128</innerclass>
    <innerclass refid="classgandiva_1_1_decimal_type_util" prot="public">gandiva::DecimalTypeUtil</innerclass>
    <innerclass refid="classgandiva_1_1_dex" prot="public">gandiva::Dex</innerclass>
    <innerclass refid="classgandiva_1_1_dex_default_visitor" prot="public">gandiva::DexDefaultVisitor</innerclass>
    <innerclass refid="classgandiva_1_1_dex_visitor" prot="public">gandiva::DexVisitor</innerclass>
    <innerclass refid="classgandiva_1_1_engine" prot="public">gandiva::Engine</innerclass>
    <innerclass refid="classgandiva_1_1_eval_batch" prot="public">gandiva::EvalBatch</innerclass>
    <innerclass refid="classgandiva_1_1_execution_context" prot="public">gandiva::ExecutionContext</innerclass>
    <innerclass refid="classgandiva_1_1_exported_context_functions" prot="public">gandiva::ExportedContextFunctions</innerclass>
    <innerclass refid="classgandiva_1_1_exported_decimal_functions" prot="public">gandiva::ExportedDecimalFunctions</innerclass>
    <innerclass refid="classgandiva_1_1_exported_funcs_base" prot="public">gandiva::ExportedFuncsBase</innerclass>
    <innerclass refid="classgandiva_1_1_exported_funcs_registry" prot="public">gandiva::ExportedFuncsRegistry</innerclass>
    <innerclass refid="classgandiva_1_1_exported_stub_functions" prot="public">gandiva::ExportedStubFunctions</innerclass>
    <innerclass refid="classgandiva_1_1_exported_time_functions" prot="public">gandiva::ExportedTimeFunctions</innerclass>
    <innerclass refid="classgandiva_1_1_expr_decomposer" prot="public">gandiva::ExprDecomposer</innerclass>
    <innerclass refid="classgandiva_1_1_expression" prot="public">gandiva::Expression</innerclass>
    <innerclass refid="classgandiva_1_1_expression_registry" prot="public">gandiva::ExpressionRegistry</innerclass>
    <innerclass refid="classgandiva_1_1_expr_validator" prot="public">gandiva::ExprValidator</innerclass>
    <innerclass refid="classgandiva_1_1_false_dex" prot="public">gandiva::FalseDex</innerclass>
    <innerclass refid="classgandiva_1_1_field_descriptor" prot="public">gandiva::FieldDescriptor</innerclass>
    <innerclass refid="classgandiva_1_1_field_node" prot="public">gandiva::FieldNode</innerclass>
    <innerclass refid="classgandiva_1_1_filter" prot="public">gandiva::Filter</innerclass>
    <innerclass refid="classgandiva_1_1_filter_cache_key" prot="public">gandiva::FilterCacheKey</innerclass>
    <innerclass refid="classgandiva_1_1_filter_holder" prot="public">gandiva::FilterHolder</innerclass>
    <innerclass refid="classgandiva_1_1_func_descriptor" prot="public">gandiva::FuncDescriptor</innerclass>
    <innerclass refid="classgandiva_1_1_func_dex" prot="public">gandiva::FuncDex</innerclass>
    <innerclass refid="classgandiva_1_1_function_holder" prot="public">gandiva::FunctionHolder</innerclass>
    <innerclass refid="classgandiva_1_1_function_holder_registry" prot="public">gandiva::FunctionHolderRegistry</innerclass>
    <innerclass refid="classgandiva_1_1_function_i_r_builder" prot="public">gandiva::FunctionIRBuilder</innerclass>
    <innerclass refid="classgandiva_1_1_function_node" prot="public">gandiva::FunctionNode</innerclass>
    <innerclass refid="classgandiva_1_1_function_registry" prot="public">gandiva::FunctionRegistry</innerclass>
    <innerclass refid="classgandiva_1_1_function_signature" prot="public">gandiva::FunctionSignature</innerclass>
    <innerclass refid="classgandiva_1_1_id_to_module_map" prot="public">gandiva::IdToModuleMap</innerclass>
    <innerclass refid="classgandiva_1_1_if_dex" prot="public">gandiva::IfDex</innerclass>
    <innerclass refid="classgandiva_1_1_if_node" prot="public">gandiva::IfNode</innerclass>
    <innerclass refid="classgandiva_1_1_in_expr_dex" prot="public">gandiva::InExprDex</innerclass>
    <innerclass refid="classgandiva_1_1_in_expr_dex_3_01int32__t_01_4" prot="public">gandiva::InExprDex&lt; int32_t &gt;</innerclass>
    <innerclass refid="classgandiva_1_1_in_expr_dex_3_01int64__t_01_4" prot="public">gandiva::InExprDex&lt; int64_t &gt;</innerclass>
    <innerclass refid="classgandiva_1_1_in_expr_dex_3_01std_1_1string_01_4" prot="public">gandiva::InExprDex&lt; std::string &gt;</innerclass>
    <innerclass refid="classgandiva_1_1_in_expr_dex_base" prot="public">gandiva::InExprDexBase</innerclass>
    <innerclass refid="classgandiva_1_1_in_expression_node" prot="public">gandiva::InExpressionNode</innerclass>
    <innerclass refid="classgandiva_1_1_in_holder" prot="public">gandiva::InHolder</innerclass>
    <innerclass refid="structgandiva_1_1_key_equals" prot="public">gandiva::KeyEquals</innerclass>
    <innerclass refid="structgandiva_1_1_key_hash" prot="public">gandiva::KeyHash</innerclass>
    <innerclass refid="classgandiva_1_1_like_holder" prot="public">gandiva::LikeHolder</innerclass>
    <innerclass refid="classgandiva_1_1_literal_dex" prot="public">gandiva::LiteralDex</innerclass>
    <innerclass refid="classgandiva_1_1_literal_node" prot="public">gandiva::LiteralNode</innerclass>
    <innerclass refid="classgandiva_1_1_l_l_v_m_generator" prot="public">gandiva::LLVMGenerator</innerclass>
    <innerclass refid="classgandiva_1_1_l_l_v_m_types" prot="public">gandiva::LLVMTypes</innerclass>
    <innerclass refid="classgandiva_1_1_local_bit_maps_holder" prot="public">gandiva::LocalBitMapsHolder</innerclass>
    <innerclass refid="classgandiva_1_1_local_bit_map_validity_dex" prot="public">gandiva::LocalBitMapValidityDex</innerclass>
    <innerclass refid="classgandiva_1_1_lru_cache" prot="public">gandiva::LruCache</innerclass>
    <innerclass refid="classgandiva_1_1_l_value" prot="public">gandiva::LValue</innerclass>
    <innerclass refid="classgandiva_1_1_native_function" prot="public">gandiva::NativeFunction</innerclass>
    <innerclass refid="classgandiva_1_1_node" prot="public">gandiva::Node</innerclass>
    <innerclass refid="classgandiva_1_1_node_visitor" prot="public">gandiva::NodeVisitor</innerclass>
    <innerclass refid="classgandiva_1_1_non_nullable_func_dex" prot="public">gandiva::NonNullableFuncDex</innerclass>
    <innerclass refid="classgandiva_1_1_nullable_internal_func_dex" prot="public">gandiva::NullableInternalFuncDex</innerclass>
    <innerclass refid="classgandiva_1_1_nullable_never_func_dex" prot="public">gandiva::NullableNeverFuncDex</innerclass>
    <innerclass refid="classgandiva_1_1_projector" prot="public">gandiva::Projector</innerclass>
    <innerclass refid="classgandiva_1_1_projector_cache_key" prot="public">gandiva::ProjectorCacheKey</innerclass>
    <innerclass refid="classgandiva_1_1_projector_holder" prot="public">gandiva::ProjectorHolder</innerclass>
    <innerclass refid="classgandiva_1_1_random_generator_holder" prot="public">gandiva::RandomGeneratorHolder</innerclass>
    <innerclass refid="classgandiva_1_1_regex_util" prot="public">gandiva::RegexUtil</innerclass>
    <innerclass refid="classgandiva_1_1_selection_vector" prot="public">gandiva::SelectionVector</innerclass>
    <innerclass refid="classgandiva_1_1_selection_vector_impl" prot="public">gandiva::SelectionVectorImpl</innerclass>
    <innerclass refid="classgandiva_1_1_simple_arena" prot="public">gandiva::SimpleArena</innerclass>
    <innerclass refid="classgandiva_1_1_to_date_holder" prot="public">gandiva::ToDateHolder</innerclass>
    <innerclass refid="classgandiva_1_1_tree_expr_builder" prot="public">gandiva::TreeExprBuilder</innerclass>
    <innerclass refid="classgandiva_1_1_true_dex" prot="public">gandiva::TrueDex</innerclass>
    <innerclass refid="classgandiva_1_1_value_validity_pair" prot="public">gandiva::ValueValidityPair</innerclass>
    <innerclass refid="classgandiva_1_1_vector_read_base_dex" prot="public">gandiva::VectorReadBaseDex</innerclass>
    <innerclass refid="classgandiva_1_1_vector_read_fixed_len_value_dex" prot="public">gandiva::VectorReadFixedLenValueDex</innerclass>
    <innerclass refid="classgandiva_1_1_vector_read_validity_dex" prot="public">gandiva::VectorReadValidityDex</innerclass>
    <innerclass refid="classgandiva_1_1_vector_read_var_len_value_dex" prot="public">gandiva::VectorReadVarLenValueDex</innerclass>
    <innernamespace refid="namespacegandiva_1_1decimalops">gandiva::decimalops</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacegandiva_1a045efef64c8763386c1109f9503484e2" prot="public" static="no">
        <name>ResultNullableType</name>
        <enumvalue id="namespacegandiva_1a045efef64c8763386c1109f9503484e2ad4ede6fe98a24fb9cf340bad9e2d4609" prot="public">
          <name>kResultNullIfNull</name>
          <briefdescription>
<para>result validity is an intersection of the validity of the children. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegandiva_1a045efef64c8763386c1109f9503484e2aa5a9893242a0790c9e45ca1410a4b742" prot="public">
          <name>kResultNullNever</name>
          <briefdescription>
<para>result is always valid. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegandiva_1a045efef64c8763386c1109f9503484e2adcdf0cffaab537d06cc09b14f557d389" prot="public">
          <name>kResultNullInternal</name>
          <briefdescription>
<para>result validity depends on some internal logic. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/native_function.h" line="29" column="1" bodyfile="/arrow/cpp/src/gandiva/native_function.h" bodystart="29" bodyend="36"/>
      </memberdef>
      <memberdef kind="enum" id="namespacegandiva_1a0b8c46d65de777389e7336a37ae183cf" prot="public" static="no">
        <name>TimeFields</name>
        <enumvalue id="namespacegandiva_1a0b8c46d65de777389e7336a37ae183cfa7a4952f45d385dac51aa8464ae13db03" prot="public">
          <name>kYear</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegandiva_1a0b8c46d65de777389e7336a37ae183cfa258d24529c7d28b5776319c07d30cdcc" prot="public">
          <name>kMonth</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegandiva_1a0b8c46d65de777389e7336a37ae183cfa02274ebd48803fda3ead63460d10bf63" prot="public">
          <name>kDay</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegandiva_1a0b8c46d65de777389e7336a37ae183cfa4c2bcf999290536159f7a1170090186b" prot="public">
          <name>kHours</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegandiva_1a0b8c46d65de777389e7336a37ae183cfaee0178c9c55a9d0e2415c54e22962964" prot="public">
          <name>kMinutes</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegandiva_1a0b8c46d65de777389e7336a37ae183cfa4ba5c1b76ef9e92737cf5927285d4870" prot="public">
          <name>kSeconds</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegandiva_1a0b8c46d65de777389e7336a37ae183cfadb6fcdfcceb79861a315ea44358d57dc" prot="public">
          <name>kSubSeconds</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegandiva_1a0b8c46d65de777389e7336a37ae183cfa9130e897c1c8a513dabc5423c9eb1552" prot="public">
          <name>kDisplacementHours</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegandiva_1a0b8c46d65de777389e7336a37ae183cfaf5e6b05cdeeded9b07a4c5cb7be8b852" prot="public">
          <name>kDisplacementMinutes</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacegandiva_1a0b8c46d65de777389e7336a37ae183cfa8ed389f042e030972bce40841df6a491" prot="public">
          <name>kMax</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/precompiled/time_fields.h" line="22" column="1" bodyfile="/arrow/cpp/src/gandiva/precompiled/time_fields.h" bodystart="22" bodyend="33"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacegandiva_1a5c83cd0aabe2fb0ecb4b6f8a802d7801" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">arrow::Array</ref> &gt;</type>
        <definition>using gandiva::ArrayPtr = typedef std::shared_ptr&lt;arrow::Array&gt;</definition>
        <argsstring></argsstring>
        <name>ArrayPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/arrow.h" line="32" column="1" bodyfile="/arrow/cpp/src/gandiva/arrow.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegandiva_1a3e3446d98cf1dcf281b0d3f6c16a65d3" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">arrow::DataType</ref> &gt;</type>
        <definition>using gandiva::DataTypePtr = typedef std::shared_ptr&lt;arrow::DataType&gt;</definition>
        <argsstring></argsstring>
        <name>DataTypePtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/arrow.h" line="34" column="1" bodyfile="/arrow/cpp/src/gandiva/arrow.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegandiva_1ae9130a6d76c9e050968c236e194d4550" prot="public" static="no">
        <type>std::vector&lt; <ref refid="namespacegandiva_1a3e3446d98cf1dcf281b0d3f6c16a65d3" kindref="member">DataTypePtr</ref> &gt;</type>
        <definition>using gandiva::DataTypeVector = typedef std::vector&lt;DataTypePtr&gt;</definition>
        <argsstring></argsstring>
        <name>DataTypeVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/arrow.h" line="35" column="1" bodyfile="/arrow/cpp/src/gandiva/arrow.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegandiva_1a5822af0f79ea1f5ced727ba8f4d038c7" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_decimal128_type" kindref="compound">arrow::Decimal128Type</ref> &gt;</type>
        <definition>using gandiva::Decimal128TypePtr = typedef std::shared_ptr&lt;arrow::Decimal128Type&gt;</definition>
        <argsstring></argsstring>
        <name>Decimal128TypePtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/arrow.h" line="37" column="1" bodyfile="/arrow/cpp/src/gandiva/arrow.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegandiva_1af1ad03d994941c2653489d46f98c94dc" prot="public" static="no">
        <type>std::vector&lt; <ref refid="namespacegandiva_1a5822af0f79ea1f5ced727ba8f4d038c7" kindref="member">Decimal128TypePtr</ref> &gt;</type>
        <definition>using gandiva::Decimal128TypeVector = typedef std::vector&lt;Decimal128TypePtr&gt;</definition>
        <argsstring></argsstring>
        <name>Decimal128TypeVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/arrow.h" line="38" column="1" bodyfile="/arrow/cpp/src/gandiva/arrow.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegandiva_1a8202d69b17c893247edc1c7653412438" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">arrow::Field</ref> &gt;</type>
        <definition>using gandiva::FieldPtr = typedef std::shared_ptr&lt;arrow::Field&gt;</definition>
        <argsstring></argsstring>
        <name>FieldPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/arrow.h" line="40" column="1" bodyfile="/arrow/cpp/src/gandiva/arrow.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegandiva_1adb95d509a13fa694f593ecb37a7c68ac" prot="public" static="no">
        <type>std::vector&lt; <ref refid="namespacegandiva_1a8202d69b17c893247edc1c7653412438" kindref="member">FieldPtr</ref> &gt;</type>
        <definition>using gandiva::FieldVector = typedef std::vector&lt;FieldPtr&gt;</definition>
        <argsstring></argsstring>
        <name>FieldVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/arrow.h" line="41" column="1" bodyfile="/arrow/cpp/src/gandiva/arrow.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegandiva_1ad6aa62e4de6d471a4e5805e204a8f413" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_record_batch" kindref="compound">arrow::RecordBatch</ref> &gt;</type>
        <definition>using gandiva::RecordBatchPtr = typedef std::shared_ptr&lt;arrow::RecordBatch&gt;</definition>
        <argsstring></argsstring>
        <name>RecordBatchPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/arrow.h" line="43" column="1" bodyfile="/arrow/cpp/src/gandiva/arrow.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegandiva_1a650de9b918fc7348689854c307e50d56" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">arrow::Schema</ref> &gt;</type>
        <definition>using gandiva::SchemaPtr = typedef std::shared_ptr&lt;arrow::Schema&gt;</definition>
        <argsstring></argsstring>
        <name>SchemaPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/arrow.h" line="45" column="1" bodyfile="/arrow/cpp/src/gandiva/arrow.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegandiva_1a7843b88b163b4c20c5ccd06c8704fa29" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="structarrow_1_1_array_data" kindref="compound">arrow::ArrayData</ref> &gt;</type>
        <definition>using gandiva::ArrayDataPtr = typedef std::shared_ptr&lt;arrow::ArrayData&gt;</definition>
        <argsstring></argsstring>
        <name>ArrayDataPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/arrow.h" line="47" column="1" bodyfile="/arrow/cpp/src/gandiva/arrow.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegandiva_1a0fbce3498a8553897e2ff8371059c8bd" prot="public" static="no">
        <type>std::vector&lt; <ref refid="namespacegandiva_1a7843b88b163b4c20c5ccd06c8704fa29" kindref="member">ArrayDataPtr</ref> &gt;</type>
        <definition>using gandiva::ArrayDataVector = typedef std::vector&lt;ArrayDataPtr&gt;</definition>
        <argsstring></argsstring>
        <name>ArrayDataVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/arrow.h" line="48" column="1" bodyfile="/arrow/cpp/src/gandiva/arrow.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" prot="public" static="no">
        <type><ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>using gandiva::Status = typedef arrow::Status</definition>
        <argsstring></argsstring>
        <name>Status</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/arrow.h" line="50" column="1" bodyfile="/arrow/cpp/src/gandiva/arrow.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegandiva_1a69568cf407a9c14fd2f49a1ace930868" prot="public" static="no">
        <type><ref refid="namespacearrow_1a331ad1dbd1c157c8be168cb6548d188f" kindref="member">arrow::StatusCode</ref></type>
        <definition>using gandiva::StatusCode = typedef arrow::StatusCode</definition>
        <argsstring></argsstring>
        <name>StatusCode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/arrow.h" line="51" column="1" bodyfile="/arrow/cpp/src/gandiva/arrow.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegandiva_1ac11d23b2dd5a5af603340b4238366fae" prot="public" static="no">
        <type><ref refid="classarrow_1_1_result" kindref="compound">arrow::Result</ref>&lt; T &gt;</type>
        <definition>using gandiva::Result = typedef arrow::Result&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>Result</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/arrow.h" line="54" column="1" bodyfile="/arrow/cpp/src/gandiva/arrow.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegandiva_1a5b196ec78a490338daa389a41aa6be93" prot="public" static="no">
        <type>int(*)(uint8_t **buffers, int64_t *offsets, uint8_t **local_bitmaps, const uint8_t *selection_buffer, int64_t execution_ctx_ptr, int64_t record_count)</type>
        <definition>using gandiva::EvalFunc = typedef int (*)(uint8_t** buffers, int64_t* offsets, uint8_t** local_bitmaps, const uint8_t* selection_buffer, int64_t execution_ctx_ptr, int64_t record_count)</definition>
        <argsstring></argsstring>
        <name>EvalFunc</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/compiled_expr.h" line="27" column="1" bodyfile="/arrow/cpp/src/gandiva/compiled_expr.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegandiva_1a6bcd5f21dcf5814edac6263bdd780af1" prot="public" static="no">
        <type><ref refid="classarrow_1_1_decimal128" kindref="compound">arrow::Decimal128</ref></type>
        <definition>using gandiva::Decimal128 = typedef arrow::Decimal128</definition>
        <argsstring></argsstring>
        <name>Decimal128</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/decimal_scalar.h" line="27" column="1" bodyfile="/arrow/cpp/src/gandiva/decimal_scalar.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegandiva_1a748b73a5c7323e14c5611b55dea1b2b5" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classgandiva_1_1_function_holder" kindref="compound">FunctionHolder</ref> &gt;</type>
        <definition>using gandiva::FunctionHolderPtr = typedef std::shared_ptr&lt;FunctionHolder&gt;</definition>
        <argsstring></argsstring>
        <name>FunctionHolderPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/function_holder.h" line="32" column="1" bodyfile="/arrow/cpp/src/gandiva/function_holder.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegandiva_1a1455aaf2559f8976473905272f0d11f0" prot="public" static="no">
        <type>std::unordered_map&lt; const <ref refid="classgandiva_1_1_function_signature" kindref="compound">FunctionSignature</ref> *, const <ref refid="classgandiva_1_1_native_function" kindref="compound">NativeFunction</ref> *, <ref refid="structgandiva_1_1_key_hash" kindref="compound">KeyHash</ref>, <ref refid="structgandiva_1_1_key_equals" kindref="compound">KeyEquals</ref> &gt;</type>
        <definition>typedef std::unordered_map&lt;const FunctionSignature*, const NativeFunction*, KeyHash, KeyEquals&gt; gandiva::SignatureMap</definition>
        <argsstring></argsstring>
        <name>SignatureMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/function_registry_common.h" line="71" column="1" bodyfile="/arrow/cpp/src/gandiva/function_registry_common.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegandiva_1a90061130771aa24c22b3875b23b473f5" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classgandiva_1_1_dex" kindref="compound">Dex</ref> &gt;</type>
        <definition>using gandiva::DexPtr = typedef std::shared_ptr&lt;Dex&gt;</definition>
        <argsstring></argsstring>
        <name>DexPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/gandiva_aliases.h" line="28" column="1" bodyfile="/arrow/cpp/src/gandiva/gandiva_aliases.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegandiva_1acd54f0b5f98b8202b0cb8b6658dd368b" prot="public" static="no">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classgandiva_1_1_dex" kindref="compound">Dex</ref> &gt; &gt;</type>
        <definition>using gandiva::DexVector = typedef std::vector&lt;std::shared_ptr&lt;Dex&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>DexVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/gandiva_aliases.h" line="29" column="1" bodyfile="/arrow/cpp/src/gandiva/gandiva_aliases.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegandiva_1ac7916e2d63d469d1c3a12e0110d2db80" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classgandiva_1_1_value_validity_pair" kindref="compound">ValueValidityPair</ref> &gt;</type>
        <definition>using gandiva::ValueValidityPairPtr = typedef std::shared_ptr&lt;ValueValidityPair&gt;</definition>
        <argsstring></argsstring>
        <name>ValueValidityPairPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/gandiva_aliases.h" line="32" column="1" bodyfile="/arrow/cpp/src/gandiva/gandiva_aliases.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegandiva_1ab203e6bb3e1b7be4bcb869e3ff847396" prot="public" static="no">
        <type>std::vector&lt; <ref refid="namespacegandiva_1ac7916e2d63d469d1c3a12e0110d2db80" kindref="member">ValueValidityPairPtr</ref> &gt;</type>
        <definition>using gandiva::ValueValidityPairVector = typedef std::vector&lt;ValueValidityPairPtr&gt;</definition>
        <argsstring></argsstring>
        <name>ValueValidityPairVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/gandiva_aliases.h" line="33" column="1" bodyfile="/arrow/cpp/src/gandiva/gandiva_aliases.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegandiva_1a35aabfbc0202ae826625ee230e45e40c" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classgandiva_1_1_field_descriptor" kindref="compound">FieldDescriptor</ref> &gt;</type>
        <definition>using gandiva::FieldDescriptorPtr = typedef std::shared_ptr&lt;FieldDescriptor&gt;</definition>
        <argsstring></argsstring>
        <name>FieldDescriptorPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/gandiva_aliases.h" line="36" column="1" bodyfile="/arrow/cpp/src/gandiva/gandiva_aliases.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegandiva_1a8dfc53f452269d59bc6ee241ca95db75" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classgandiva_1_1_func_descriptor" kindref="compound">FuncDescriptor</ref> &gt;</type>
        <definition>using gandiva::FuncDescriptorPtr = typedef std::shared_ptr&lt;FuncDescriptor&gt;</definition>
        <argsstring></argsstring>
        <name>FuncDescriptorPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/gandiva_aliases.h" line="39" column="1" bodyfile="/arrow/cpp/src/gandiva/gandiva_aliases.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegandiva_1a5a0f2dcb376b5cc9f7b1120407b3f860" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classgandiva_1_1_l_value" kindref="compound">LValue</ref> &gt;</type>
        <definition>using gandiva::LValuePtr = typedef std::shared_ptr&lt;LValue&gt;</definition>
        <argsstring></argsstring>
        <name>LValuePtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/gandiva_aliases.h" line="42" column="1" bodyfile="/arrow/cpp/src/gandiva/gandiva_aliases.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegandiva_1a6735ddd686b37cdc7cda5f33008497c9" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classgandiva_1_1_expression" kindref="compound">Expression</ref> &gt;</type>
        <definition>using gandiva::ExpressionPtr = typedef std::shared_ptr&lt;Expression&gt;</definition>
        <argsstring></argsstring>
        <name>ExpressionPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/gandiva_aliases.h" line="45" column="1" bodyfile="/arrow/cpp/src/gandiva/gandiva_aliases.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegandiva_1aad814820a6a80cb656b0f09decdc4cb9" prot="public" static="no">
        <type>std::vector&lt; <ref refid="namespacegandiva_1a6735ddd686b37cdc7cda5f33008497c9" kindref="member">ExpressionPtr</ref> &gt;</type>
        <definition>using gandiva::ExpressionVector = typedef std::vector&lt;ExpressionPtr&gt;</definition>
        <argsstring></argsstring>
        <name>ExpressionVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/gandiva_aliases.h" line="46" column="1" bodyfile="/arrow/cpp/src/gandiva/gandiva_aliases.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegandiva_1ac50f3d4579d827449480b7d45be3529f" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classgandiva_1_1_condition" kindref="compound">Condition</ref> &gt;</type>
        <definition>using gandiva::ConditionPtr = typedef std::shared_ptr&lt;Condition&gt;</definition>
        <argsstring></argsstring>
        <name>ConditionPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/gandiva_aliases.h" line="49" column="1" bodyfile="/arrow/cpp/src/gandiva/gandiva_aliases.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classgandiva_1_1_node" kindref="compound">Node</ref> &gt;</type>
        <definition>using gandiva::NodePtr = typedef std::shared_ptr&lt;Node&gt;</definition>
        <argsstring></argsstring>
        <name>NodePtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/gandiva_aliases.h" line="52" column="1" bodyfile="/arrow/cpp/src/gandiva/gandiva_aliases.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegandiva_1ab396cd9ee14fd2c9a0ac0bffc034bd62" prot="public" static="no">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classgandiva_1_1_node" kindref="compound">Node</ref> &gt; &gt;</type>
        <definition>using gandiva::NodeVector = typedef std::vector&lt;std::shared_ptr&lt;Node&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>NodeVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/gandiva_aliases.h" line="53" column="1" bodyfile="/arrow/cpp/src/gandiva/gandiva_aliases.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegandiva_1a2fbca35dda4c0ea064157ced8e28ff30" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classgandiva_1_1_eval_batch" kindref="compound">EvalBatch</ref> &gt;</type>
        <definition>using gandiva::EvalBatchPtr = typedef std::shared_ptr&lt;EvalBatch&gt;</definition>
        <argsstring></argsstring>
        <name>EvalBatchPtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/gandiva_aliases.h" line="56" column="1" bodyfile="/arrow/cpp/src/gandiva/gandiva_aliases.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegandiva_1a8c7589aa8ca0ec9c9df288d686444452" prot="public" static="no">
        <type>std::shared_ptr&lt; <ref refid="classgandiva_1_1_function_signature" kindref="compound">FunctionSignature</ref> &gt;</type>
        <definition>using gandiva::FuncSignaturePtr = typedef std::shared_ptr&lt;FunctionSignature&gt;</definition>
        <argsstring></argsstring>
        <name>FuncSignaturePtr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/gandiva_aliases.h" line="59" column="1" bodyfile="/arrow/cpp/src/gandiva/gandiva_aliases.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegandiva_1ac400c05831d8bdbf9fae672d0602f48d" prot="public" static="no">
        <type>std::vector&lt; <ref refid="namespacegandiva_1a8c7589aa8ca0ec9c9df288d686444452" kindref="member">FuncSignaturePtr</ref> &gt;</type>
        <definition>using gandiva::FuncSignatureVector = typedef std::vector&lt;FuncSignaturePtr&gt;</definition>
        <argsstring></argsstring>
        <name>FuncSignatureVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/gandiva_aliases.h" line="60" column="1" bodyfile="/arrow/cpp/src/gandiva/gandiva_aliases.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegandiva_1aa31f7f112a6f719fa79ed0980df84cba" prot="public" static="no">
        <type>arrow::util::variant&lt; bool, float, double, int8_t, int16_t, int32_t, int64_t, uint8_t, uint16_t, uint32_t, uint64_t, std::string, <ref refid="classgandiva_1_1_decimal_scalar128" kindref="compound">DecimalScalar128</ref> &gt;</type>
        <definition>using gandiva::LiteralHolder = typedef arrow::util::variant&lt;bool, float, double, int8_t, int16_t, int32_t, int64_t, uint8_t, uint16_t, uint32_t, uint64_t, std::string, DecimalScalar128&gt;</definition>
        <argsstring></argsstring>
        <name>LiteralHolder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/literal_holder.h" line="29" column="1" bodyfile="/arrow/cpp/src/gandiva/literal_holder.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegandiva_1a3be69416906669a0be3cb20a4e1b64ae" prot="public" static="no">
        <type><ref refid="classgandiva_1_1_selection_vector_impl" kindref="compound">SelectionVectorImpl</ref>&lt; uint16_t, <ref refid="classarrow_1_1_u_int16_type" kindref="compound">arrow::UInt16Type</ref>, <ref refid="classgandiva_1_1_selection_vector_1a6b95945ed4cd8c0a38f643d25e3a8fa0ad8ff7c78f51f9b891d1741e7e3c5b603" kindref="member">SelectionVector::MODE_UINT16</ref> &gt;</type>
        <definition>using gandiva::SelectionVectorInt16 = typedef SelectionVectorImpl&lt;uint16_t, arrow::UInt16Type, SelectionVector::MODE_UINT16&gt;</definition>
        <argsstring></argsstring>
        <name>SelectionVectorInt16</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/selection_vector_impl.h" line="101" column="1" bodyfile="/arrow/cpp/src/gandiva/selection_vector_impl.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegandiva_1a93cbc37bd288ff9254c6b921aa02c276" prot="public" static="no">
        <type><ref refid="classgandiva_1_1_selection_vector_impl" kindref="compound">SelectionVectorImpl</ref>&lt; uint32_t, <ref refid="classarrow_1_1_u_int32_type" kindref="compound">arrow::UInt32Type</ref>, <ref refid="classgandiva_1_1_selection_vector_1a6b95945ed4cd8c0a38f643d25e3a8fa0a92b52a163be405dcaf539d65c27b82d8" kindref="member">SelectionVector::MODE_UINT32</ref> &gt;</type>
        <definition>using gandiva::SelectionVectorInt32 = typedef SelectionVectorImpl&lt;uint32_t, arrow::UInt32Type, SelectionVector::MODE_UINT32&gt;</definition>
        <argsstring></argsstring>
        <name>SelectionVectorInt32</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/selection_vector_impl.h" line="103" column="1" bodyfile="/arrow/cpp/src/gandiva/selection_vector_impl.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacegandiva_1af1508a694f52fd57ed1fa68dd8168cf0" prot="public" static="no">
        <type><ref refid="classgandiva_1_1_selection_vector_impl" kindref="compound">SelectionVectorImpl</ref>&lt; uint64_t, <ref refid="classarrow_1_1_u_int64_type" kindref="compound">arrow::UInt64Type</ref>, <ref refid="classgandiva_1_1_selection_vector_1a6b95945ed4cd8c0a38f643d25e3a8fa0aa4fe7d6e948c662df7249bd8ea2ec093" kindref="member">SelectionVector::MODE_UINT64</ref> &gt;</type>
        <definition>using gandiva::SelectionVectorInt64 = typedef SelectionVectorImpl&lt;uint64_t, arrow::UInt64Type, SelectionVector::MODE_UINT64&gt;</definition>
        <argsstring></argsstring>
        <name>SelectionVectorInt64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/selection_vector_impl.h" line="105" column="1" bodyfile="/arrow/cpp/src/gandiva/selection_vector_impl.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacegandiva_1ade293155365e0dbae13631c0fe07497f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool gandiva::is_decimal_128</definition>
        <argsstring>(DataTypePtr type)</argsstring>
        <name>is_decimal_128</name>
        <param>
          <type><ref refid="namespacegandiva_1a3e3446d98cf1dcf281b0d3f6c16a65d3" kindref="member">DataTypePtr</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/arrow.h" line="56" column="1" bodyfile="/arrow/cpp/src/gandiva/arrow.h" bodystart="56" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespacegandiva_1a051148519f19ff43aabbfc48e333c72e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool gandiva::operator==</definition>
        <argsstring>(const BasicDecimalScalar128 &amp;left, const BasicDecimalScalar128 &amp;right)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classgandiva_1_1_basic_decimal_scalar128" kindref="compound">BasicDecimalScalar128</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="classgandiva_1_1_basic_decimal_scalar128" kindref="compound">BasicDecimalScalar128</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/basic_decimal_scalar.h" line="53" column="1" bodyfile="/arrow/cpp/src/gandiva/basic_decimal_scalar.h" bodystart="53" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespacegandiva_1a23e9d974bdf4ffa15e9fb8ca30f085b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classgandiva_1_1_basic_decimal_scalar128" kindref="compound">BasicDecimalScalar128</ref></type>
        <definition>BasicDecimalScalar128 gandiva::operator-</definition>
        <argsstring>(const BasicDecimalScalar128 &amp;operand)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classgandiva_1_1_basic_decimal_scalar128" kindref="compound">BasicDecimalScalar128</ref> &amp;</type>
          <declname>operand</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/basic_decimal_scalar.h" line="59" column="1" bodyfile="/arrow/cpp/src/gandiva/basic_decimal_scalar.h" bodystart="59" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespacegandiva_1ac32b2665fa70f7dd339895ae5da5aace" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gandiva::REGISTER_EXPORTED_FUNCS</definition>
        <argsstring>(ExportedStubFunctions)</argsstring>
        <name>REGISTER_EXPORTED_FUNCS</name>
        <param>
          <type><ref refid="classgandiva_1_1_exported_stub_functions" kindref="compound">ExportedStubFunctions</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/exported_funcs.h" line="39" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegandiva_1af9a298be5b372c5a634bc3d4a6de4e9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gandiva::REGISTER_EXPORTED_FUNCS</definition>
        <argsstring>(ExportedContextFunctions)</argsstring>
        <name>REGISTER_EXPORTED_FUNCS</name>
        <param>
          <type><ref refid="classgandiva_1_1_exported_context_functions" kindref="compound">ExportedContextFunctions</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/exported_funcs.h" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegandiva_1a24344319e51557293b10433fb828fdd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gandiva::REGISTER_EXPORTED_FUNCS</definition>
        <argsstring>(ExportedTimeFunctions)</argsstring>
        <name>REGISTER_EXPORTED_FUNCS</name>
        <param>
          <type><ref refid="classgandiva_1_1_exported_time_functions" kindref="compound">ExportedTimeFunctions</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/exported_funcs.h" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegandiva_1aaad938a7cc7abf06ec33882a1df7333f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gandiva::REGISTER_EXPORTED_FUNCS</definition>
        <argsstring>(ExportedDecimalFunctions)</argsstring>
        <name>REGISTER_EXPORTED_FUNCS</name>
        <param>
          <type><ref refid="classgandiva_1_1_exported_decimal_functions" kindref="compound">ExportedDecimalFunctions</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/exported_funcs.h" line="57" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegandiva_1ae68e7b2da40b96f03ad7a4ac9a68bcdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="gandiva_2visibility_8h_1a83e5755eccafecad3dfbb97ae7372caf" kindref="member">GANDIVA_EXPORT</ref> std::vector&lt; std::shared_ptr&lt; <ref refid="classgandiva_1_1_function_signature" kindref="compound">FunctionSignature</ref> &gt; &gt;</type>
        <definition>GANDIVA_EXPORT std::vector&lt;std::shared_ptr&lt;FunctionSignature&gt; &gt; gandiva::GetRegisteredFunctionSignatures</definition>
        <argsstring>()</argsstring>
        <name>GetRegisteredFunctionSignatures</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expression_registry.h" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegandiva_1a719ecb266adfea3f07523ad907a6d8c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classgandiva_1_1_native_function" kindref="compound">NativeFunction</ref> &gt;</type>
        <definition>std::vector&lt;NativeFunction&gt; gandiva::GetArithmeticFunctionRegistry</definition>
        <argsstring>()</argsstring>
        <name>GetArithmeticFunctionRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/function_registry_arithmetic.h" line="25" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegandiva_1a66f394b412c5f760e90c5b496abf3e66" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacegandiva_1a3e3446d98cf1dcf281b0d3f6c16a65d3" kindref="member">DataTypePtr</ref></type>
        <definition>DataTypePtr gandiva::time32</definition>
        <argsstring>()</argsstring>
        <name>time32</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/function_registry_common.h" line="52" column="1" bodyfile="/arrow/cpp/src/gandiva/function_registry_common.h" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="namespacegandiva_1a995e4ccc7e74e4be22910f8d9e64e681" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacegandiva_1a3e3446d98cf1dcf281b0d3f6c16a65d3" kindref="member">DataTypePtr</ref></type>
        <definition>DataTypePtr gandiva::time64</definition>
        <argsstring>()</argsstring>
        <name>time64</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/function_registry_common.h" line="54" column="1" bodyfile="/arrow/cpp/src/gandiva/function_registry_common.h" bodystart="54" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespacegandiva_1aa8f66ca2bd8586490ad2acecb0a1e8a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacegandiva_1a3e3446d98cf1dcf281b0d3f6c16a65d3" kindref="member">DataTypePtr</ref></type>
        <definition>DataTypePtr gandiva::timestamp</definition>
        <argsstring>()</argsstring>
        <name>timestamp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/function_registry_common.h" line="56" column="1" bodyfile="/arrow/cpp/src/gandiva/function_registry_common.h" bodystart="56" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespacegandiva_1a51d19a589f3deebae6238c3fce6dee4d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacegandiva_1a3e3446d98cf1dcf281b0d3f6c16a65d3" kindref="member">DataTypePtr</ref></type>
        <definition>DataTypePtr gandiva::decimal128</definition>
        <argsstring>()</argsstring>
        <name>decimal128</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/function_registry_common.h" line="57" column="1" bodyfile="/arrow/cpp/src/gandiva/function_registry_common.h" bodystart="57" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespacegandiva_1af0943109453fb92edc1ca4737c406472" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classgandiva_1_1_native_function" kindref="compound">NativeFunction</ref> &gt;</type>
        <definition>std::vector&lt;NativeFunction&gt; gandiva::GetDateTimeFunctionRegistry</definition>
        <argsstring>()</argsstring>
        <name>GetDateTimeFunctionRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/function_registry_datetime.h" line="25" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegandiva_1a8ccd87b2fcf9ba232f3d27ab6f90a713" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classgandiva_1_1_native_function" kindref="compound">NativeFunction</ref> &gt;</type>
        <definition>std::vector&lt;NativeFunction&gt; gandiva::GetHashFunctionRegistry</definition>
        <argsstring>()</argsstring>
        <name>GetHashFunctionRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/function_registry_hash.h" line="25" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegandiva_1ae4619ce68df9dcc06627a6795f4265af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classgandiva_1_1_native_function" kindref="compound">NativeFunction</ref> &gt;</type>
        <definition>std::vector&lt;NativeFunction&gt; gandiva::GetMathOpsFunctionRegistry</definition>
        <argsstring>()</argsstring>
        <name>GetMathOpsFunctionRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/function_registry_math_ops.h" line="25" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegandiva_1a6299ce5d49a466c397cbab5349f36f4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classgandiva_1_1_native_function" kindref="compound">NativeFunction</ref> &gt;</type>
        <definition>std::vector&lt;NativeFunction&gt; gandiva::GetStringFunctionRegistry</definition>
        <argsstring>()</argsstring>
        <name>GetStringFunctionRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/function_registry_string.h" line="25" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegandiva_1a7b590e503439f16349704597001308e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classgandiva_1_1_native_function" kindref="compound">NativeFunction</ref> &gt;</type>
        <definition>std::vector&lt;NativeFunction&gt; gandiva::GetDateTimeArithmeticFunctionRegistry</definition>
        <argsstring>()</argsstring>
        <name>GetDateTimeArithmeticFunctionRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/function_registry_timestamp_arithmetic.h" line="25" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegandiva_1a8180bae659d734ba6f3ee6c8eebd821e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string gandiva::ToString</definition>
        <argsstring>(const LiteralHolder &amp;holder)</argsstring>
        <name>ToString</name>
        <param>
          <type>const <ref refid="namespacegandiva_1aa31f7f112a6f719fa79ed0980df84cba" kindref="member">LiteralHolder</ref> &amp;</type>
          <declname>holder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/literal_holder.h" line="33" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/gandiva/annotator.h" line="31" column="1"/>
  </compounddef>
</doxygen>
