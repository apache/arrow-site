<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_decimal128" kind="class" language="C++" prot="public">
    <compoundname>arrow::Decimal128</compoundname>
    <basecompoundref refid="classarrow_1_1_basic_decimal128" prot="public" virt="non-virtual">arrow::BasicDecimal128</basecompoundref>
    <includes refid="util_2decimal_8h" local="no">arrow/util/decimal.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1_decimal128_1a28ea319ebcd0aedcdb419d90ca172a4b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr arrow::Decimal128::Decimal128</definition>
        <argsstring>(const BasicDecimal128 &amp;value) noexcept</argsstring>
        <name>Decimal128</name>
        <param>
          <type>const <ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>constructor creates a <ref refid="classarrow_1_1_decimal128" kindref="compound">Decimal128</ref> from a <ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/decimal.h" line="57" column="1" bodyfile="/arrow/cpp/src/arrow/util/decimal.h" bodystart="57" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_decimal128_1ab928a342ae5a879b692f1337a45a111c" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::Decimal128::Decimal128</definition>
        <argsstring>(const std::string &amp;value)</argsstring>
        <name>Decimal128</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Parse the number from a base 10 string representation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/decimal.h" line="60" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_decimal128_1abb83a71038252991eb902634bd7aec7e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr</type>
        <definition>constexpr arrow::Decimal128::Decimal128</definition>
        <argsstring>() noexcept</argsstring>
        <name>Decimal128</name>
        <briefdescription>
<para>Empty constructor creates a <ref refid="classarrow_1_1_decimal128" kindref="compound">Decimal128</ref> with a value of 0. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/decimal.h" line="64" column="1" bodyfile="/arrow/cpp/src/arrow/util/decimal.h" bodystart="64" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_decimal128_1abb1b84dbc516ce7f0d15aee3d310105d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::pair&lt; <ref refid="classarrow_1_1_decimal128" kindref="compound">Decimal128</ref>, <ref refid="classarrow_1_1_decimal128" kindref="compound">Decimal128</ref> &gt; &gt;</type>
        <definition>Result&lt;std::pair&lt;Decimal128, Decimal128&gt; &gt; arrow::Decimal128::Divide</definition>
        <argsstring>(const Decimal128 &amp;divisor) const</argsstring>
        <name>Divide</name>
        <param>
          <type>const <ref refid="classarrow_1_1_decimal128" kindref="compound">Decimal128</ref> &amp;</type>
          <declname>divisor</declname>
        </param>
        <briefdescription>
<para>Divide this number by right and return the result. </para>        </briefdescription>
        <detaileddescription>
<para>This operation is not destructive. The answer rounds to zero. Signs work like: 21 / 5 -&gt; 4, 1 -21 / 5 -&gt; -4, -1 21 / -5 -&gt; -4, 1 -21 / -5 -&gt; 4, -1 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">divisor</parametername>
</parameternamelist>
<parameterdescription>
<para>the number to divide by </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the pair of the quotient and the remainder </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/decimal.h" line="76" column="1" bodyfile="/arrow/cpp/src/arrow/util/decimal.h" bodystart="76" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_decimal128_1a56bb4cf54b15750edc8154887b61a1b3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arrow::Decimal128::ToString</definition>
        <argsstring>(int32_t scale) const</argsstring>
        <name>ToString</name>
        <param>
          <type>int32_t</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
<para>Convert the <ref refid="classarrow_1_1_decimal128" kindref="compound">Decimal128</ref> value to a base 10 decimal string with the given scale. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/decimal.h" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_decimal128_1a94a797c03eefbd9bb00adbfd64aaffd2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arrow::Decimal128::ToIntegerString</definition>
        <argsstring>() const</argsstring>
        <name>ToIntegerString</name>
        <briefdescription>
<para>Convert the value to an integer string. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/decimal.h" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_decimal128_1a225da107a00727ed90e0f6db24a0a263" prot="public" static="no" const="yes" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::Decimal128::operator int64_t</definition>
        <argsstring>() const</argsstring>
        <name>operator int64_t</name>
        <briefdescription>
<para>Cast this value to an int64_t. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/decimal.h" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_decimal128_1ab28d8e0097bd055d15496338f1540f36" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; <ref refid="classarrow_1_1_decimal128" kindref="compound">Decimal128</ref> &gt;</type>
        <definition>Result&lt;Decimal128&gt; arrow::Decimal128::Rescale</definition>
        <argsstring>(int32_t original_scale, int32_t new_scale) const</argsstring>
        <name>Rescale</name>
        <param>
          <type>int32_t</type>
          <declname>original_scale</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>new_scale</declname>
        </param>
        <briefdescription>
<para>Convert <ref refid="classarrow_1_1_decimal128" kindref="compound">Decimal128</ref> from one scale to another. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/decimal.h" line="111" column="1" bodyfile="/arrow/cpp/src/arrow/util/decimal.h" bodystart="111" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_decimal128_1af0a111d3d7bfa35bd5edd6232be7ff85" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>internal::EnableIfIsOneOf&lt;T, int32_t, int64_t&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; T &gt;</type>
        <definition>Result&lt;T&gt; arrow::Decimal128::ToInteger</definition>
        <argsstring>() const</argsstring>
        <name>ToInteger</name>
        <briefdescription>
<para>Convert to a signed integer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/decimal.h" line="120" column="1" bodyfile="/arrow/cpp/src/arrow/util/decimal.h" bodystart="120" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_decimal128_1a6aaec9afc594aefd8d69a560ec79da9c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval>internal::EnableIfIsOneOf&lt;T, int32_t, int64_t&gt;</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::Decimal128::ToInteger</definition>
        <argsstring>(T *out) const</argsstring>
        <name>ToInteger</name>
        <param>
          <type>T *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Convert to a signed integer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/decimal.h" line="133" column="1" bodyfile="/arrow/cpp/src/arrow/util/decimal.h" bodystart="133" bodyend="135"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1_decimal128_1ac74be6199da3f79eafc68c34900dc452" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::Decimal128::FromString</definition>
        <argsstring>(const util::string_view &amp;s, Decimal128 *out, int32_t *precision, int32_t *scale=NULLPTR)</argsstring>
        <name>FromString</name>
        <param>
          <type>const util::string_view &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1_decimal128" kindref="compound">Decimal128</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>precision</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>scale</declname>
          <defval><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></defval>
        </param>
        <briefdescription>
<para>Convert a decimal string to a <ref refid="classarrow_1_1_decimal128" kindref="compound">Decimal128</ref> value, optionally including precision and scale if they&apos;re passed in and not null. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/decimal.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_decimal128_1a0212842784adaf84ecd090965bd2ce15" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::Decimal128::FromString</definition>
        <argsstring>(const std::string &amp;s, Decimal128 *out, int32_t *precision, int32_t *scale=NULLPTR)</argsstring>
        <name>FromString</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1_decimal128" kindref="compound">Decimal128</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>precision</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>scale</declname>
          <defval><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/decimal.h" line="97" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_decimal128_1a77b8d480c8ed541b8ac915a88d2623cc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::Decimal128::FromString</definition>
        <argsstring>(const char *s, Decimal128 *out, int32_t *precision, int32_t *scale=NULLPTR)</argsstring>
        <name>FromString</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1_decimal128" kindref="compound">Decimal128</ref> *</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>precision</declname>
        </param>
        <param>
          <type>int32_t *</type>
          <declname>scale</declname>
          <defval><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/decimal.h" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_decimal128_1a785bbbb9e38d3a7ebacaf12ef9de9566" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; <ref refid="classarrow_1_1_decimal128" kindref="compound">Decimal128</ref> &gt;</type>
        <definition>static Result&lt;Decimal128&gt; arrow::Decimal128::FromString</definition>
        <argsstring>(const util::string_view &amp;s)</argsstring>
        <name>FromString</name>
        <param>
          <type>const util::string_view &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/decimal.h" line="101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_decimal128_1a6aef20d2137897e20c78d76b5b8b6810" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; <ref refid="classarrow_1_1_decimal128" kindref="compound">Decimal128</ref> &gt;</type>
        <definition>static Result&lt;Decimal128&gt; arrow::Decimal128::FromString</definition>
        <argsstring>(const std::string &amp;s)</argsstring>
        <name>FromString</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/decimal.h" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_decimal128_1a5e9f05df1fb7f81554624377dc894510" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; <ref refid="classarrow_1_1_decimal128" kindref="compound">Decimal128</ref> &gt;</type>
        <definition>static Result&lt;Decimal128&gt; arrow::Decimal128::FromString</definition>
        <argsstring>(const char *s)</argsstring>
        <name>FromString</name>
        <param>
          <type>const char *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/decimal.h" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_decimal128_1a90d3023b9590a087e7b515bc3dc447f4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; <ref refid="classarrow_1_1_decimal128" kindref="compound">Decimal128</ref> &gt;</type>
        <definition>static Result&lt;Decimal128&gt; arrow::Decimal128::FromBigEndian</definition>
        <argsstring>(const uint8_t *data, int32_t length)</argsstring>
        <name>FromBigEndian</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Convert from a big-endian byte representation. </para>        </briefdescription>
        <detaileddescription>
<para>The length must be between 1 and 16. <simplesect kind="return"><para>error status if the length is an invalid value </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/decimal.h" line="108" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classarrow_1_1_decimal128_1afe4bdb75394adf295f02a0117bef5f2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend std::ostream &amp;</type>
        <definition>std::ostream&amp; operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Decimal128 &amp;decimal)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classarrow_1_1_decimal128" kindref="compound">Decimal128</ref> &amp;</type>
          <declname>decimal</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/decimal.h" line="137" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classarrow_1_1_decimal128_1ae2e3712fafcdd2aaf03b38a4c766e1c8" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::Decimal128::ToArrowStatus</definition>
        <argsstring>(DecimalStatus dstatus) const</argsstring>
        <name>ToArrowStatus</name>
        <param>
          <type><ref refid="namespacearrow_1a57a966e51cab768580c6f9a9427f34d2" kindref="member">DecimalStatus</ref></type>
          <declname>dstatus</declname>
        </param>
        <briefdescription>
<para>Converts internal error code to <ref refid="classarrow_1_1_status" kindref="compound">Status</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/decimal.h" line="142" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a signed 128-bit integer in two&apos;s complement. </para>    </briefdescription>
    <detaileddescription>
<para>Calculations wrap around and overflow is ignored.</para><para>For a discussion of the algorithms, look at Knuth&apos;s volume 2, Semi-numerical Algorithms section 4.3.1.</para><para>Adapted from the Apache ORC C++ implementation</para><para>The implementation is split into two parts :</para><para><orderedlist>
<listitem><para><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref><itemizedlist>
<listitem><para>can be safely compiled to IR without references to libstdc++.</para></listitem></itemizedlist>
</para></listitem><listitem><para><ref refid="classarrow_1_1_decimal128" kindref="compound">Decimal128</ref><itemizedlist>
<listitem><para>has additional functionality on top of <ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref> to deal with strings and streams. </para></listitem></itemizedlist>
</para></listitem></orderedlist>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="1084">
        <label>arrow::BasicDecimal128</label>
        <link refid="classarrow_1_1_basic_decimal128"/>
      </node>
      <node id="1083">
        <label>arrow::Decimal128</label>
        <link refid="classarrow_1_1_decimal128"/>
        <childnode refid="1084" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1086">
        <label>arrow::BasicDecimal128</label>
        <link refid="classarrow_1_1_basic_decimal128"/>
      </node>
      <node id="1085">
        <label>arrow::Decimal128</label>
        <link refid="classarrow_1_1_decimal128"/>
        <childnode refid="1086" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/util/decimal.h" line="49" column="1" bodyfile="/arrow/cpp/src/arrow/util/decimal.h" bodystart="49" bodyend="143"/>
    <listofallmembers>
      <member refid="classarrow_1_1_basic_decimal128_1af1a7ebfd2c856eb2982cf4b86f88a49d" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>Abs</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1abf9d597ea47ea49fc1658841a17c9584" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>Abs</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1ab8dbd8183a4e271acf6810a2a220b846" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>BasicDecimal128</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1abd9623ff9a68dddc986d799669b755c6" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>BasicDecimal128</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1a5a2c65217e065edf4489d5d0577335ed" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>BasicDecimal128</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1aaa95f171daf1652e342b40c020d44505" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>BasicDecimal128</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1a7f76fdf66e454102dff13093563bb830" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>CountLeadingBinaryZeros</name></member>
      <member refid="classarrow_1_1_decimal128_1a28ea319ebcd0aedcdb419d90ca172a4b" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>Decimal128</name></member>
      <member refid="classarrow_1_1_decimal128_1ab928a342ae5a879b692f1337a45a111c" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>Decimal128</name></member>
      <member refid="classarrow_1_1_decimal128_1abb83a71038252991eb902634bd7aec7e" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>Decimal128</name></member>
      <member refid="classarrow_1_1_decimal128_1abb1b84dbc516ce7f0d15aee3d310105d" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>Divide</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1a57c2f0b06d30549cbca281d9174c3b65" prot="public" virt="non-virtual" ambiguityscope="arrow::BasicDecimal128::"><scope>arrow::Decimal128</scope><name>Divide</name></member>
      <member refid="classarrow_1_1_decimal128_1a90d3023b9590a087e7b515bc3dc447f4" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>FromBigEndian</name></member>
      <member refid="classarrow_1_1_decimal128_1ac74be6199da3f79eafc68c34900dc452" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>FromString</name></member>
      <member refid="classarrow_1_1_decimal128_1a0212842784adaf84ecd090965bd2ce15" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>FromString</name></member>
      <member refid="classarrow_1_1_decimal128_1a77b8d480c8ed541b8ac915a88d2623cc" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>FromString</name></member>
      <member refid="classarrow_1_1_decimal128_1a785bbbb9e38d3a7ebacaf12ef9de9566" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>FromString</name></member>
      <member refid="classarrow_1_1_decimal128_1a6aef20d2137897e20c78d76b5b8b6810" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>FromString</name></member>
      <member refid="classarrow_1_1_decimal128_1a5e9f05df1fb7f81554624377dc894510" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>FromString</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1aaacb1464877b0e4eabd6cf15600301f4" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>GetMaxValue</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1a371b7a31bbf63f3fd841b9a17e95f1c0" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>GetScaleMultiplier</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1a4cf2dc8694a1cd69d93d3b5e24eef93f" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>GetWholeAndFraction</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1a37cbf86250dd19b6e99bc2fcaf7faffe" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>high_bits</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1aa3fda3252de7b0b98622a4c74a681791" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>IncreaseScaleBy</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1aa666ec294a59f7f84ae7b1efa29d8f1b" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>low_bits</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1a1e8fa38d5be5b81c7b53e2a18be1aaf0" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>Negate</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1a57dcaabfe2dd72c1537fa64b39f2d157" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>operator &amp;=</name></member>
      <member refid="classarrow_1_1_decimal128_1a225da107a00727ed90e0f6db24a0a263" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>operator int64_t</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1ac38cf238f610c5357954f8be48453a3b" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>operator*=</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1aca86073f3ee5d0672bed198e14f350a9" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>operator+=</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1a74fe3043a70380a2b4cc0f81ba8807ca" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>operator-=</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1a54c2cfd2eddf89c16fa0ec729fc7f572" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>operator/=</name></member>
      <member refid="classarrow_1_1_decimal128_1afe4bdb75394adf295f02a0117bef5f2a" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>operator&lt;&lt;</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1a41d9fc39b7a1abee5a97d88449f7c669" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>operator&lt;&lt;=</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1a2b8c66bf8404e54d85a331d93e3e6ee7" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>operator&gt;&gt;=</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1ac18e2a4f0dae6a527309fa75adbf5b1f" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>operator|=</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1ad101c677c1bb3792fc9368b5d7a0e3d1" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>ReduceScaleBy</name></member>
      <member refid="classarrow_1_1_decimal128_1ab28d8e0097bd055d15496338f1540f36" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>Rescale</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1a9c10a2f738aff0ac546fad1836b526e3" prot="public" virt="non-virtual" ambiguityscope="arrow::BasicDecimal128::"><scope>arrow::Decimal128</scope><name>Rescale</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1a57946ec32781f328df74209d9b88253e" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>Sign</name></member>
      <member refid="classarrow_1_1_decimal128_1ae2e3712fafcdd2aaf03b38a4c766e1c8" prot="private" virt="non-virtual"><scope>arrow::Decimal128</scope><name>ToArrowStatus</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1a4972ec4c2efa635d665919de8343bd9b" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>ToBytes</name></member>
      <member refid="classarrow_1_1_basic_decimal128_1a1bd7aadfb51bcb66408da0c56bfa3926" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>ToBytes</name></member>
      <member refid="classarrow_1_1_decimal128_1af0a111d3d7bfa35bd5edd6232be7ff85" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>ToInteger</name></member>
      <member refid="classarrow_1_1_decimal128_1a6aaec9afc594aefd8d69a560ec79da9c" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>ToInteger</name></member>
      <member refid="classarrow_1_1_decimal128_1a94a797c03eefbd9bb00adbfd64aaffd2" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>ToIntegerString</name></member>
      <member refid="classarrow_1_1_decimal128_1a56bb4cf54b15750edc8154887b61a1b3" prot="public" virt="non-virtual"><scope>arrow::Decimal128</scope><name>ToString</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
