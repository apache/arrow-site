<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structarrow_1_1_array_data" kind="class" language="C++" prot="public">
    <compoundname>arrow::ArrayData</compoundname>
    <includes refid="array_8h" local="no">arrow/array.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structarrow_1_1_array_data_1a3fcb28b85ec35b1886359086616869d5" prot="public" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::ArrayData::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="220" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structarrow_1_1_array_data_1aa4b33bdefec3290da60142301d852120" prot="public" static="no" mutable="no">
        <type>int64_t</type>
        <definition>int64_t arrow::ArrayData::length</definition>
        <argsstring></argsstring>
        <name>length</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="221" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structarrow_1_1_array_data_1a76c53d7331c71833c3be390c602c542d" prot="public" static="no" mutable="yes">
        <type>std::atomic&lt; int64_t &gt;</type>
        <definition>std::atomic&lt;int64_t&gt; arrow::ArrayData::null_count</definition>
        <argsstring></argsstring>
        <name>null_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="222" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="222" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structarrow_1_1_array_data_1a62e35001b5555f0b59bb0db3db494419" prot="public" static="no" mutable="no">
        <type>int64_t</type>
        <definition>int64_t arrow::ArrayData::offset</definition>
        <argsstring></argsstring>
        <name>offset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="225" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structarrow_1_1_array_data_1a11920b2e9bc4cb04cdb5970a45c5d3b0" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;Buffer&gt; &gt; arrow::ArrayData::buffers</definition>
        <argsstring></argsstring>
        <name>buffers</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="226" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structarrow_1_1_array_data_1afafe31e1a17df975598b5922ce9bb92d" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;ArrayData&gt; &gt; arrow::ArrayData::child_data</definition>
        <argsstring></argsstring>
        <name>child_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="227" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structarrow_1_1_array_data_1ae521d227ef18c9fd8196d47829f5d56d" prot="public" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Array&gt; arrow::ArrayData::dictionary</definition>
        <argsstring></argsstring>
        <name>dictionary</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="231" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structarrow_1_1_array_data_1a9806122aca6abb3a9157668e42f436e1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::ArrayData::ArrayData</definition>
        <argsstring>()</argsstring>
        <name>ArrayData</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="88" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="88" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1_array_data_1a725a88f484fa8c95bdfaf548a0827b2d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::ArrayData::ArrayData</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;type, int64_t length, int64_t null_count=kUnknownNullCount, int64_t offset=0)</argsstring>
        <name>ArrayData</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>null_count</declname>
          <defval><ref refid="namespacearrow_1a2bc89c993234944fd7bdbdfe95812080" kindref="member">kUnknownNullCount</ref></defval>
        </param>
        <param>
          <type>int64_t</type>
          <declname>offset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="90" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="90" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1_array_data_1a7e7031d9b627004042fa77a9052ac0a6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::ArrayData::ArrayData</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;type, int64_t length, std::vector&lt; std::shared_ptr&lt; Buffer &gt;&gt; buffers, int64_t null_count=kUnknownNullCount, int64_t offset=0)</argsstring>
        <name>ArrayData</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;&gt;</type>
          <declname>buffers</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>null_count</declname>
          <defval><ref refid="namespacearrow_1a2bc89c993234944fd7bdbdfe95812080" kindref="member">kUnknownNullCount</ref></defval>
        </param>
        <param>
          <type>int64_t</type>
          <declname>offset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="94" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="94" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1_array_data_1a0c946ce021ef47c73cc710105fa46fed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::ArrayData::ArrayData</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;type, int64_t length, std::vector&lt; std::shared_ptr&lt; Buffer &gt;&gt; buffers, std::vector&lt; std::shared_ptr&lt; ArrayData &gt;&gt; child_data, int64_t null_count=kUnknownNullCount, int64_t offset=0)</argsstring>
        <name>ArrayData</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;&gt;</type>
          <declname>buffers</declname>
        </param>
        <param>
          <type>std::vector&lt; std::shared_ptr&lt; <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &gt;&gt;</type>
          <declname>child_data</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>null_count</declname>
          <defval><ref refid="namespacearrow_1a2bc89c993234944fd7bdbdfe95812080" kindref="member">kUnknownNullCount</ref></defval>
        </param>
        <param>
          <type>int64_t</type>
          <declname>offset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="101" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="101" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1_array_data_1a0c2ccbdf8cea4048307ccaf85d61749f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::ArrayData::ArrayData</definition>
        <argsstring>(ArrayData &amp;&amp;other) noexcept</argsstring>
        <name>ArrayData</name>
        <param>
          <type><ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="135" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="135" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1_array_data_1a4dddad40bc23b9fae38058e499a2568a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::ArrayData::ArrayData</definition>
        <argsstring>(const ArrayData &amp;other) noexcept</argsstring>
        <name>ArrayData</name>
        <param>
          <type>const <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="146" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="146" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1_array_data_1a32e65ea8a32f114ac930dac02f437bab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &amp;</type>
        <definition>ArrayData&amp; arrow::ArrayData::operator=</definition>
        <argsstring>(ArrayData &amp;&amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="157" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="157" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1_array_data_1a95d3447e6ba3cb0b72a8ac0716d386a1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &amp;</type>
        <definition>ArrayData&amp; arrow::ArrayData::operator=</definition>
        <argsstring>(const ArrayData &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="169" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="169" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1_array_data_1a63afe24c8c7319ad045fa3f9d388d2e9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &gt;</type>
        <definition>std::shared_ptr&lt;ArrayData&gt; arrow::ArrayData::Copy</definition>
        <argsstring>() const</argsstring>
        <name>Copy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="180" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="180" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1_array_data_1a3dfb7d5574b7ae1295e20fd0e617f9c4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>const T *</type>
        <definition>const T* arrow::ArrayData::GetValues</definition>
        <argsstring>(int i, int64_t absolute_offset) const</argsstring>
        <name>GetValues</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>absolute_offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="184" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="184" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1_array_data_1a915f02e6baac28f650748a2524e33d4d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>const T *</type>
        <definition>const T* arrow::ArrayData::GetValues</definition>
        <argsstring>(int i) const</argsstring>
        <name>GetValues</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="193" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="193" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1_array_data_1a4a2c176e644803d72d3d42c8ed873582" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T* arrow::ArrayData::GetMutableValues</definition>
        <argsstring>(int i, int64_t absolute_offset)</argsstring>
        <name>GetMutableValues</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>absolute_offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="199" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="199" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1_array_data_1a96dbb6d98fc42e9a4628c343806801d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T* arrow::ArrayData::GetMutableValues</definition>
        <argsstring>(int i)</argsstring>
        <name>GetMutableValues</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="208" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="208" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1_array_data_1a35b76684135f6a960dbdee5664c3a356" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref></type>
        <definition>ArrayData arrow::ArrayData::Slice</definition>
        <argsstring>(int64_t offset, int64_t length) const</argsstring>
        <name>Slice</name>
        <param>
          <type>int64_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="213" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1_array_data_1ae374aac3d9c4f29fc3844f1297520097" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void arrow::ArrayData::SetNullCount</definition>
        <argsstring>(int64_t v)</argsstring>
        <name>SetNullCount</name>
        <param>
          <type>int64_t</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="215" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="215" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1_array_data_1ae83fbd13ecbe794edf58e4b841fccf0d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t arrow::ArrayData::GetNullCount</definition>
        <argsstring>() const</argsstring>
        <name>GetNullCount</name>
        <briefdescription>
<para>Return null count, or compute and set it if it&apos;s not known. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="218" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structarrow_1_1_array_data_1a8ae8d2e9fb0220b87410df967e645641" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;ArrayData&gt; arrow::ArrayData::Make</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;type, int64_t length, std::vector&lt; std::shared_ptr&lt; Buffer &gt;&gt; buffers, int64_t null_count=kUnknownNullCount, int64_t offset=0)</argsstring>
        <name>Make</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;&gt;</type>
          <declname>buffers</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>null_count</declname>
          <defval><ref refid="namespacearrow_1a2bc89c993234944fd7bdbdfe95812080" kindref="member">kUnknownNullCount</ref></defval>
        </param>
        <param>
          <type>int64_t</type>
          <declname>offset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="110" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1_array_data_1ab7ffb2baff400222d8fdb875ab37a93f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;ArrayData&gt; arrow::ArrayData::Make</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;type, int64_t length, std::vector&lt; std::shared_ptr&lt; Buffer &gt;&gt; buffers, std::vector&lt; std::shared_ptr&lt; ArrayData &gt;&gt; child_data, int64_t null_count=kUnknownNullCount, int64_t offset=0)</argsstring>
        <name>Make</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;&gt;</type>
          <declname>buffers</declname>
        </param>
        <param>
          <type>std::vector&lt; std::shared_ptr&lt; <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &gt;&gt;</type>
          <declname>child_data</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>null_count</declname>
          <defval><ref refid="namespacearrow_1a2bc89c993234944fd7bdbdfe95812080" kindref="member">kUnknownNullCount</ref></defval>
        </param>
        <param>
          <type>int64_t</type>
          <declname>offset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="116" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1_array_data_1a2f277f117797b16ba2c5f89db9188827" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;ArrayData&gt; arrow::ArrayData::Make</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;type, int64_t length, std::vector&lt; std::shared_ptr&lt; Buffer &gt;&gt; buffers, std::vector&lt; std::shared_ptr&lt; ArrayData &gt;&gt; child_data, std::shared_ptr&lt; Array &gt; dictionary, int64_t null_count=kUnknownNullCount, int64_t offset=0)</argsstring>
        <name>Make</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;&gt;</type>
          <declname>buffers</declname>
        </param>
        <param>
          <type>std::vector&lt; std::shared_ptr&lt; <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &gt;&gt;</type>
          <declname>child_data</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt;</type>
          <declname>dictionary</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>null_count</declname>
          <defval><ref refid="namespacearrow_1a2bc89c993234944fd7bdbdfe95812080" kindref="member">kUnknownNullCount</ref></defval>
        </param>
        <param>
          <type>int64_t</type>
          <declname>offset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="122" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1_array_data_1a23f3e613871edd555007ef592f8165c4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;ArrayData&gt; arrow::ArrayData::Make</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;type, int64_t length, int64_t null_count=kUnknownNullCount, int64_t offset=0)</argsstring>
        <name>Make</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>null_count</declname>
          <defval><ref refid="namespacearrow_1a2bc89c993234944fd7bdbdfe95812080" kindref="member">kUnknownNullCount</ref></defval>
        </param>
        <param>
          <type>int64_t</type>
          <declname>offset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="129" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Mutable container for generic Arrow array data. </para>    </briefdescription>
    <detaileddescription>
<para>This data structure is a self-contained representation of the memory and metadata inside an Arrow array data structure (called vectors in Java). The classes <ref refid="classarrow_1_1_array" kindref="compound">arrow::Array</ref> and its subclasses provide strongly-typed accessors with support for the visitor pattern and other affordances.</para><para>This class is designed for easy internal data manipulation, analytical data processing, and data transport to and from IPC messages. For example, we could cast from int64 to float64 like so:</para><para>Int64Array arr = GetMyData(); auto new_data = <ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">arr.data()</ref>-&gt;<ref refid="structarrow_1_1_array_data_1a63afe24c8c7319ad045fa3f9d388d2e9" kindref="member">Copy()</ref>; new_data-&gt;type = <ref refid="group__type-factories_1gab6f514320a9b037ab161fa97db73b970" kindref="member">arrow::float64()</ref>; DoubleArray double_arr(new_data);</para><para>This object is also useful in an analytics setting where memory may be reused. For example, if we had a group of operations all returning doubles, say:</para><para>Log(Sqrt(Expr(arr)))</para><para>Then the low-level implementations of each of these functions could have the signatures</para><para>void Log(const ArrayData&amp; values, ArrayData* out);</para><para>As another example a function may consume one or more memory buffers in an input array and replace them with newly-allocated data, changing the output data type as well. </para>    </detaileddescription>
    <location file="/arrow/cpp/src/arrow/array.h" line="87" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="87" bodyend="232"/>
    <listofallmembers>
      <member refid="structarrow_1_1_array_data_1a9806122aca6abb3a9157668e42f436e1" prot="public" virt="non-virtual"><scope>arrow::ArrayData</scope><name>ArrayData</name></member>
      <member refid="structarrow_1_1_array_data_1a725a88f484fa8c95bdfaf548a0827b2d" prot="public" virt="non-virtual"><scope>arrow::ArrayData</scope><name>ArrayData</name></member>
      <member refid="structarrow_1_1_array_data_1a7e7031d9b627004042fa77a9052ac0a6" prot="public" virt="non-virtual"><scope>arrow::ArrayData</scope><name>ArrayData</name></member>
      <member refid="structarrow_1_1_array_data_1a0c946ce021ef47c73cc710105fa46fed" prot="public" virt="non-virtual"><scope>arrow::ArrayData</scope><name>ArrayData</name></member>
      <member refid="structarrow_1_1_array_data_1a0c2ccbdf8cea4048307ccaf85d61749f" prot="public" virt="non-virtual"><scope>arrow::ArrayData</scope><name>ArrayData</name></member>
      <member refid="structarrow_1_1_array_data_1a4dddad40bc23b9fae38058e499a2568a" prot="public" virt="non-virtual"><scope>arrow::ArrayData</scope><name>ArrayData</name></member>
      <member refid="structarrow_1_1_array_data_1a11920b2e9bc4cb04cdb5970a45c5d3b0" prot="public" virt="non-virtual"><scope>arrow::ArrayData</scope><name>buffers</name></member>
      <member refid="structarrow_1_1_array_data_1afafe31e1a17df975598b5922ce9bb92d" prot="public" virt="non-virtual"><scope>arrow::ArrayData</scope><name>child_data</name></member>
      <member refid="structarrow_1_1_array_data_1a63afe24c8c7319ad045fa3f9d388d2e9" prot="public" virt="non-virtual"><scope>arrow::ArrayData</scope><name>Copy</name></member>
      <member refid="structarrow_1_1_array_data_1ae521d227ef18c9fd8196d47829f5d56d" prot="public" virt="non-virtual"><scope>arrow::ArrayData</scope><name>dictionary</name></member>
      <member refid="structarrow_1_1_array_data_1a4a2c176e644803d72d3d42c8ed873582" prot="public" virt="non-virtual"><scope>arrow::ArrayData</scope><name>GetMutableValues</name></member>
      <member refid="structarrow_1_1_array_data_1a96dbb6d98fc42e9a4628c343806801d3" prot="public" virt="non-virtual"><scope>arrow::ArrayData</scope><name>GetMutableValues</name></member>
      <member refid="structarrow_1_1_array_data_1ae83fbd13ecbe794edf58e4b841fccf0d" prot="public" virt="non-virtual"><scope>arrow::ArrayData</scope><name>GetNullCount</name></member>
      <member refid="structarrow_1_1_array_data_1a3dfb7d5574b7ae1295e20fd0e617f9c4" prot="public" virt="non-virtual"><scope>arrow::ArrayData</scope><name>GetValues</name></member>
      <member refid="structarrow_1_1_array_data_1a915f02e6baac28f650748a2524e33d4d" prot="public" virt="non-virtual"><scope>arrow::ArrayData</scope><name>GetValues</name></member>
      <member refid="structarrow_1_1_array_data_1aa4b33bdefec3290da60142301d852120" prot="public" virt="non-virtual"><scope>arrow::ArrayData</scope><name>length</name></member>
      <member refid="structarrow_1_1_array_data_1a8ae8d2e9fb0220b87410df967e645641" prot="public" virt="non-virtual"><scope>arrow::ArrayData</scope><name>Make</name></member>
      <member refid="structarrow_1_1_array_data_1ab7ffb2baff400222d8fdb875ab37a93f" prot="public" virt="non-virtual"><scope>arrow::ArrayData</scope><name>Make</name></member>
      <member refid="structarrow_1_1_array_data_1a2f277f117797b16ba2c5f89db9188827" prot="public" virt="non-virtual"><scope>arrow::ArrayData</scope><name>Make</name></member>
      <member refid="structarrow_1_1_array_data_1a23f3e613871edd555007ef592f8165c4" prot="public" virt="non-virtual"><scope>arrow::ArrayData</scope><name>Make</name></member>
      <member refid="structarrow_1_1_array_data_1a76c53d7331c71833c3be390c602c542d" prot="public" virt="non-virtual"><scope>arrow::ArrayData</scope><name>null_count</name></member>
      <member refid="structarrow_1_1_array_data_1a62e35001b5555f0b59bb0db3db494419" prot="public" virt="non-virtual"><scope>arrow::ArrayData</scope><name>offset</name></member>
      <member refid="structarrow_1_1_array_data_1a32e65ea8a32f114ac930dac02f437bab" prot="public" virt="non-virtual"><scope>arrow::ArrayData</scope><name>operator=</name></member>
      <member refid="structarrow_1_1_array_data_1a95d3447e6ba3cb0b72a8ac0716d386a1" prot="public" virt="non-virtual"><scope>arrow::ArrayData</scope><name>operator=</name></member>
      <member refid="structarrow_1_1_array_data_1ae374aac3d9c4f29fc3844f1297520097" prot="public" virt="non-virtual"><scope>arrow::ArrayData</scope><name>SetNullCount</name></member>
      <member refid="structarrow_1_1_array_data_1a35b76684135f6a960dbdee5664c3a356" prot="public" virt="non-virtual"><scope>arrow::ArrayData</scope><name>Slice</name></member>
      <member refid="structarrow_1_1_array_data_1a3fcb28b85ec35b1886359086616869d5" prot="public" virt="non-virtual"><scope>arrow::ArrayData</scope><name>type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
