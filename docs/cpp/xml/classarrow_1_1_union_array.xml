<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_union_array" kind="class" language="C++" prot="public">
    <compoundname>arrow::UnionArray</compoundname>
    <basecompoundref refid="classarrow_1_1_array" prot="public" virt="non-virtual">arrow::Array</basecompoundref>
    <includes refid="array_8h" local="no">arrow/array.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classarrow_1_1_union_array_1ad5586c93068510028e788bea9e617bc7" prot="public" static="no">
        <type><ref refid="classarrow_1_1_union_type" kindref="compound">UnionType</ref></type>
        <definition>using arrow::UnionArray::TypeClass =  UnionType</definition>
        <argsstring></argsstring>
        <name>TypeClass</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1107" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="1107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classarrow_1_1_union_array_1a72f94afa1f396323001b2877cd344535" prot="public" static="no">
        <type>int8_t</type>
        <definition>using arrow::UnionArray::type_code_t =  int8_t</definition>
        <argsstring></argsstring>
        <name>type_code_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1109" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="1109" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classarrow_1_1_union_array_1a5d8c6cdb17b635446c646064b7749adb" prot="protected" static="no" mutable="no">
        <type>const <ref refid="classarrow_1_1_union_array_1a72f94afa1f396323001b2877cd344535" kindref="member">type_code_t</ref> *</type>
        <definition>const type_code_t* arrow::UnionArray::raw_type_codes_</definition>
        <argsstring></argsstring>
        <name>raw_type_codes_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1283" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="1283" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_union_array_1a2cd1c82dec5b8dcedc94c05fe9dbe872" prot="protected" static="no" mutable="no">
        <type>const int32_t *</type>
        <definition>const int32_t* arrow::UnionArray::raw_value_offsets_</definition>
        <argsstring></argsstring>
        <name>raw_value_offsets_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1284" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="1284" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_union_array_1a5647e0b6c19e968a98b9569d5ae19080" prot="protected" static="no" mutable="no">
        <type>const <ref refid="classarrow_1_1_union_type" kindref="compound">UnionType</ref> *</type>
        <definition>const UnionType* arrow::UnionArray::union_type_</definition>
        <argsstring></argsstring>
        <name>union_type_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1285" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="1285" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_union_array_1a0ec671cb63da95b44d5d0bcb787aa5c4" prot="protected" static="no" mutable="yes">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;Array&gt; &gt; arrow::UnionArray::boxed_fields_</definition>
        <argsstring></argsstring>
        <name>boxed_fields_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1288" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="1288" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1_union_array_1a1c3602e865c5506fe5b1700329ccd6f3" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::UnionArray::UnionArray</definition>
        <argsstring>(const std::shared_ptr&lt; ArrayData &gt; &amp;data)</argsstring>
        <name>UnionArray</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_union_array_1a71372bd8f1c9925eb272eebc41da0881" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::UnionArray::UnionArray</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;type, int64_t length, const std::vector&lt; std::shared_ptr&lt; Array &gt;&gt; &amp;children, const std::shared_ptr&lt; Buffer &gt; &amp;type_ids, const std::shared_ptr&lt; Buffer &gt; &amp;value_offsets=NULLPTR, const std::shared_ptr&lt; Buffer &gt; &amp;null_bitmap=NULLPTR, int64_t null_count=kUnknownNullCount, int64_t offset=0)</argsstring>
        <name>UnionArray</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt;&gt; &amp;</type>
          <declname>children</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &amp;</type>
          <declname>type_ids</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &amp;</type>
          <declname>value_offsets</declname>
          <defval><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></defval>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &amp;</type>
          <declname>null_bitmap</declname>
          <defval><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></defval>
        </param>
        <param>
          <type>int64_t</type>
          <declname>null_count</declname>
          <defval><ref refid="namespacearrow_1a2bc89c993234944fd7bdbdfe95812080" kindref="member">kUnknownNullCount</ref></defval>
        </param>
        <param>
          <type>int64_t</type>
          <declname>offset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_union_array_1a37dee73e4d44c4a946c412b94165f0d0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Buffer&gt; arrow::UnionArray::type_codes</definition>
        <argsstring>() const</argsstring>
        <name>type_codes</name>
        <briefdescription>
<para>Note that this buffer does not account for any slice offset. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1251" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="1251" bodyend="1251"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_union_array_1a4f1c505593b63d8cfb4bbda98c5055dc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classarrow_1_1_union_array_1a72f94afa1f396323001b2877cd344535" kindref="member">type_code_t</ref> *</type>
        <definition>const type_code_t* arrow::UnionArray::raw_type_codes</definition>
        <argsstring>() const</argsstring>
        <name>raw_type_codes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1253" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="1253" bodyend="1253"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_union_array_1abc77f1ae9bfe6f11013adfd48b3f4dc2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int arrow::UnionArray::child_id</definition>
        <argsstring>(int64_t i) const</argsstring>
        <name>child_id</name>
        <param>
          <type>int64_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>The physical child id containing value at index. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1256" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="1256" bodyend="1258"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_union_array_1a8b2f7da8a7e992670924f06d40c3fd58" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Buffer&gt; arrow::UnionArray::value_offsets</definition>
        <argsstring>() const</argsstring>
        <name>value_offsets</name>
        <briefdescription>
<para>For dense arrays only. </para>        </briefdescription>
        <detaileddescription>
<para>Note that this buffer does not account for any slice offset </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1262" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="1262" bodyend="1262"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_union_array_1a5475c0c7e23a7d3fe3fcb9d7fdba739d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t arrow::UnionArray::value_offset</definition>
        <argsstring>(int64_t i) const</argsstring>
        <name>value_offset</name>
        <param>
          <type>int64_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>For dense arrays only. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1265" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="1265" bodyend="1265"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_union_array_1a4d96ec31e2a7024af5a0fb9af1bb6b51" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const int32_t *</type>
        <definition>const int32_t* arrow::UnionArray::raw_value_offsets</definition>
        <argsstring>() const</argsstring>
        <name>raw_value_offsets</name>
        <briefdescription>
<para>For dense arrays only. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1268" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="1268" bodyend="1268"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_union_array_1a324d529fa5e20b32dec84724549a540b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classarrow_1_1_union_type" kindref="compound">UnionType</ref> *</type>
        <definition>const UnionType* arrow::UnionArray::union_type</definition>
        <argsstring>() const</argsstring>
        <name>union_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1270" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="1270" bodyend="1270"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_union_array_1ab168e382bdbb241bf08a761bb13c6a9c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structarrow_1_1_union_mode_1a98f368f8fb8a5553a17abc2fb1e76dac" kindref="member">UnionMode::type</ref></type>
        <definition>UnionMode::type arrow::UnionArray::mode</definition>
        <argsstring>() const</argsstring>
        <name>mode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1272" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="1272" bodyend="1272"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_union_array_1a097980a5f57e8c3abad054c1664feb52" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Array&gt; arrow::UnionArray::child</definition>
        <argsstring>(int pos) const</argsstring>
        <name>child</name>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1278" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1_union_array_1a80bc9f281bb098385f6a7e2ab6dcaea1" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;Array&gt; &gt; arrow::UnionArray::MakeDense</definition>
        <argsstring>(const Array &amp;type_ids, const Array &amp;value_offsets, const std::vector&lt; std::shared_ptr&lt; Array &gt;&gt; &amp;children, const std::vector&lt; std::string &gt; &amp;field_names={}, const std::vector&lt; type_code_t &gt; &amp;type_codes={})</argsstring>
        <name>MakeDense</name>
        <param>
          <type>const <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>type_ids</declname>
        </param>
        <param>
          <type>const <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>value_offsets</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt;&gt; &amp;</type>
          <declname>children</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>field_names</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classarrow_1_1_union_array_1a72f94afa1f396323001b2877cd344535" kindref="member">type_code_t</ref> &gt; &amp;</type>
          <declname>type_codes</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Construct Dense <ref refid="classarrow_1_1_union_array" kindref="compound">UnionArray</ref> from types_ids, value_offsets and children. </para>        </briefdescription>
        <detaileddescription>
<para>This function does the bare minimum of validation of the offsets and input types. The value_offsets are assumed to be well-formed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">type_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of logical type ids for the union type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value_offsets</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of signed int32 values indicating the relative offset into the respective child array for the type in a given slot. The respective offsets for each child value array must be in order / increasing. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">children</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of children Arrays containing the data for each type. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">field_names</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of strings containing the name of each field. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">type_codes</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of type codes. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_union_array_1a7af561645559f4e432f2aa03177581af" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;Array&gt; &gt; arrow::UnionArray::MakeDense</definition>
        <argsstring>(const Array &amp;type_ids, const Array &amp;value_offsets, const std::vector&lt; std::shared_ptr&lt; Array &gt;&gt; &amp;children, const std::vector&lt; type_code_t &gt; &amp;type_codes)</argsstring>
        <name>MakeDense</name>
        <param>
          <type>const <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>type_ids</declname>
        </param>
        <param>
          <type>const <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>value_offsets</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt;&gt; &amp;</type>
          <declname>children</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classarrow_1_1_union_array_1a72f94afa1f396323001b2877cd344535" kindref="member">type_code_t</ref> &gt; &amp;</type>
          <declname>type_codes</declname>
        </param>
        <briefdescription>
<para>Construct Dense <ref refid="classarrow_1_1_union_array" kindref="compound">UnionArray</ref> from types_ids, value_offsets and children. </para>        </briefdescription>
        <detaileddescription>
<para>This function does the bare minimum of validation of the offsets and input types. The value_offsets are assumed to be well-formed.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">type_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of logical type ids for the union type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">value_offsets</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of signed int32 values indicating the relative offset into the respective child array for the type in a given slot. The respective offsets for each child value array must be in order / increasing. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">children</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of children Arrays containing the data for each type. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">type_codes</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of type codes. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1149" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="1149" bodyend="1155"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_union_array_1a0b60007b182c3ddd6faa250f3eb6c81b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::UnionArray::MakeDense</definition>
        <argsstring>(const Array &amp;type_ids, const Array &amp;value_offsets, const std::vector&lt; std::shared_ptr&lt; Array &gt;&gt; &amp;children, const std::vector&lt; std::string &gt; &amp;field_names, const std::vector&lt; type_code_t &gt; &amp;type_codes, std::shared_ptr&lt; Array &gt; *out)</argsstring>
        <name>MakeDense</name>
        <param>
          <type>const <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>type_ids</declname>
        </param>
        <param>
          <type>const <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>value_offsets</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt;&gt; &amp;</type>
          <declname>children</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>field_names</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classarrow_1_1_union_array_1a72f94afa1f396323001b2877cd344535" kindref="member">type_code_t</ref> &gt; &amp;</type>
          <declname>type_codes</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1158" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="1158" bodyend="1165"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_union_array_1ae3f98d2930cfb3abd5c0c7e9f4668b12" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::UnionArray::MakeDense</definition>
        <argsstring>(const Array &amp;type_ids, const Array &amp;value_offsets, const std::vector&lt; std::shared_ptr&lt; Array &gt;&gt; &amp;children, const std::vector&lt; std::string &gt; &amp;field_names, std::shared_ptr&lt; Array &gt; *out)</argsstring>
        <name>MakeDense</name>
        <param>
          <type>const <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>type_ids</declname>
        </param>
        <param>
          <type>const <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>value_offsets</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt;&gt; &amp;</type>
          <declname>children</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>field_names</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1168" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="1168" bodyend="1173"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_union_array_1aa57ae052affd5928e32e0dc076f821c7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::UnionArray::MakeDense</definition>
        <argsstring>(const Array &amp;type_ids, const Array &amp;value_offsets, const std::vector&lt; std::shared_ptr&lt; Array &gt;&gt; &amp;children, const std::vector&lt; type_code_t &gt; &amp;type_codes, std::shared_ptr&lt; Array &gt; *out)</argsstring>
        <name>MakeDense</name>
        <param>
          <type>const <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>type_ids</declname>
        </param>
        <param>
          <type>const <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>value_offsets</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt;&gt; &amp;</type>
          <declname>children</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classarrow_1_1_union_array_1a72f94afa1f396323001b2877cd344535" kindref="member">type_code_t</ref> &gt; &amp;</type>
          <declname>type_codes</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1176" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="1176" bodyend="1181"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_union_array_1a1e25bd6a74bb47aee3612d82516ae9fe" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::UnionArray::MakeDense</definition>
        <argsstring>(const Array &amp;type_ids, const Array &amp;value_offsets, const std::vector&lt; std::shared_ptr&lt; Array &gt;&gt; &amp;children, std::shared_ptr&lt; Array &gt; *out)</argsstring>
        <name>MakeDense</name>
        <param>
          <type>const <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>type_ids</declname>
        </param>
        <param>
          <type>const <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>value_offsets</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt;&gt; &amp;</type>
          <declname>children</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1184" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="1184" bodyend="1188"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_union_array_1a18c0534b4a35ae269a6923115a8a828b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;Array&gt; &gt; arrow::UnionArray::MakeSparse</definition>
        <argsstring>(const Array &amp;type_ids, const std::vector&lt; std::shared_ptr&lt; Array &gt;&gt; &amp;children, const std::vector&lt; std::string &gt; &amp;field_names={}, const std::vector&lt; type_code_t &gt; &amp;type_codes={})</argsstring>
        <name>MakeSparse</name>
        <param>
          <type>const <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>type_ids</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt;&gt; &amp;</type>
          <declname>children</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>field_names</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classarrow_1_1_union_array_1a72f94afa1f396323001b2877cd344535" kindref="member">type_code_t</ref> &gt; &amp;</type>
          <declname>type_codes</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Construct Sparse <ref refid="classarrow_1_1_union_array" kindref="compound">UnionArray</ref> from type_ids and children. </para>        </briefdescription>
        <detaileddescription>
<para>This function does the bare minimum of validation of the offsets and input types.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">type_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of logical type ids for the union type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">children</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of children Arrays containing the data for each type. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">field_names</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of strings containing the name of each field. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">type_codes</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of type codes. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1199" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_union_array_1ab75861c04be6815d02c98739b7496b3f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;Array&gt; &gt; arrow::UnionArray::MakeSparse</definition>
        <argsstring>(const Array &amp;type_ids, const std::vector&lt; std::shared_ptr&lt; Array &gt;&gt; &amp;children, const std::vector&lt; type_code_t &gt; &amp;type_codes)</argsstring>
        <name>MakeSparse</name>
        <param>
          <type>const <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>type_ids</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt;&gt; &amp;</type>
          <declname>children</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classarrow_1_1_union_array_1a72f94afa1f396323001b2877cd344535" kindref="member">type_code_t</ref> &gt; &amp;</type>
          <declname>type_codes</declname>
        </param>
        <briefdescription>
<para>Construct Sparse <ref refid="classarrow_1_1_union_array" kindref="compound">UnionArray</ref> from type_ids and children. </para>        </briefdescription>
        <detaileddescription>
<para>This function does the bare minimum of validation of the offsets and input types.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">type_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>An array of logical type ids for the union type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">children</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of children Arrays containing the data for each type. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">type_codes</parametername>
</parameternamelist>
<parameterdescription>
<para>Vector of type codes. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1212" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="1212" bodyend="1216"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_union_array_1ac1bbb3b0fde5375f165865b920fac3c4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::UnionArray::MakeSparse</definition>
        <argsstring>(const Array &amp;type_ids, const std::vector&lt; std::shared_ptr&lt; Array &gt;&gt; &amp;children, const std::vector&lt; std::string &gt; &amp;field_names, const std::vector&lt; type_code_t &gt; &amp;type_codes, std::shared_ptr&lt; Array &gt; *out)</argsstring>
        <name>MakeSparse</name>
        <param>
          <type>const <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>type_ids</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt;&gt; &amp;</type>
          <declname>children</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>field_names</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classarrow_1_1_union_array_1a72f94afa1f396323001b2877cd344535" kindref="member">type_code_t</ref> &gt; &amp;</type>
          <declname>type_codes</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1219" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="1219" bodyend="1225"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_union_array_1ad9b9ccdc1f3c086170c5f7e9624fd643" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::UnionArray::MakeSparse</definition>
        <argsstring>(const Array &amp;type_ids, const std::vector&lt; std::shared_ptr&lt; Array &gt;&gt; &amp;children, const std::vector&lt; std::string &gt; &amp;field_names, std::shared_ptr&lt; Array &gt; *out)</argsstring>
        <name>MakeSparse</name>
        <param>
          <type>const <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>type_ids</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt;&gt; &amp;</type>
          <declname>children</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>field_names</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1228" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="1228" bodyend="1233"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_union_array_1a1abc36aef6389990225074369fba1259" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::UnionArray::MakeSparse</definition>
        <argsstring>(const Array &amp;type_ids, const std::vector&lt; std::shared_ptr&lt; Array &gt;&gt; &amp;children, const std::vector&lt; type_code_t &gt; &amp;type_codes, std::shared_ptr&lt; Array &gt; *out)</argsstring>
        <name>MakeSparse</name>
        <param>
          <type>const <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>type_ids</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt;&gt; &amp;</type>
          <declname>children</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="classarrow_1_1_union_array_1a72f94afa1f396323001b2877cd344535" kindref="member">type_code_t</ref> &gt; &amp;</type>
          <declname>type_codes</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1236" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="1236" bodyend="1241"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_union_array_1a570002863522922769fde0ad36260f7f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::UnionArray::MakeSparse</definition>
        <argsstring>(const Array &amp;type_ids, const std::vector&lt; std::shared_ptr&lt; Array &gt;&gt; &amp;children, std::shared_ptr&lt; Array &gt; *out)</argsstring>
        <name>MakeSparse</name>
        <param>
          <type>const <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>type_ids</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt;&gt; &amp;</type>
          <declname>children</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1244" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="1244" bodyend="1248"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classarrow_1_1_union_array_1a4ef525f978c100e016ae395fdc0fc00a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void arrow::UnionArray::SetData</definition>
        <argsstring>(const std::shared_ptr&lt; ArrayData &gt; &amp;data)</argsstring>
        <name>SetData</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1281" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Concrete <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> class for union data. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="5049">
        <label>arrow::Array</label>
        <link refid="classarrow_1_1_array"/>
      </node>
      <node id="5048">
        <label>arrow::UnionArray</label>
        <link refid="classarrow_1_1_union_array"/>
        <childnode refid="5049" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5056">
        <label>arrow::ParametricType</label>
        <link refid="classarrow_1_1_parametric_type"/>
      </node>
      <node id="5051">
        <label>arrow::Array</label>
        <link refid="classarrow_1_1_array"/>
      </node>
      <node id="5053">
        <label>arrow::NestedType</label>
        <link refid="classarrow_1_1_nested_type"/>
        <childnode refid="5054" relation="public-inheritance">
        </childnode>
        <childnode refid="5056" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5050">
        <label>arrow::UnionArray</label>
        <link refid="classarrow_1_1_union_array"/>
        <childnode refid="5051" relation="public-inheritance">
        </childnode>
        <childnode refid="5052" relation="usage">
          <edgelabel>union_type_</edgelabel>
        </childnode>
      </node>
      <node id="5054">
        <label>arrow::DataType</label>
        <link refid="classarrow_1_1_data_type"/>
        <childnode refid="5055" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5055">
        <label>arrow::detail::Fingerprintable</label>
      </node>
      <node id="5052">
        <label>arrow::UnionType</label>
        <link refid="classarrow_1_1_union_type"/>
        <childnode refid="5053" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/array.h" line="1105" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="1105" bodyend="1289"/>
    <listofallmembers>
      <member refid="classarrow_1_1_array_1a168f3ec5c96688dadeaf015692e4bef8" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>Accept</name></member>
      <member refid="classarrow_1_1_array_1a381e6469686eccd2545cf1dc171f6cb7" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>ApproxEquals</name></member>
      <member refid="classarrow_1_1_array_1a2ed35161e2e2200bf4dcadb6ff11d7fb" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>ApproxEquals</name></member>
      <member refid="classarrow_1_1_array_1ae44d3c2fae3a8578fe829da20c6732f8" prot="protected" virt="non-virtual"><scope>arrow::UnionArray</scope><name>Array</name></member>
      <member refid="classarrow_1_1_union_array_1a0ec671cb63da95b44d5d0bcb787aa5c4" prot="protected" virt="non-virtual"><scope>arrow::UnionArray</scope><name>boxed_fields_</name></member>
      <member refid="classarrow_1_1_union_array_1a097980a5f57e8c3abad054c1664feb52" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>child</name></member>
      <member refid="classarrow_1_1_union_array_1abc77f1ae9bfe6f11013adfd48b3f4dc2" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>child_id</name></member>
      <member refid="classarrow_1_1_array_1aeca84e9b3a1f1e6e3f83a61c90e376a9" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>data</name></member>
      <member refid="classarrow_1_1_array_1a2631dce1d5868216cba0a140e81ef14e" prot="protected" virt="non-virtual"><scope>arrow::UnionArray</scope><name>data_</name></member>
      <member refid="classarrow_1_1_array_1a95ff1c7489e9d2fd5ff52fde1b8b5c46" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>Diff</name></member>
      <member refid="classarrow_1_1_array_1a686cf58bab513d8ecfe3a285f4562eab" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_array_1a99913841c11eb73c61a25c018f57ca40" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_array_1a18c61cd4c8c158a30f30023eabc83acb" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>IsNull</name></member>
      <member refid="classarrow_1_1_array_1ae554bfb313cd6b161f63fb2966dbd662" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>IsValid</name></member>
      <member refid="classarrow_1_1_array_1a49c7fb3f73d2d43e7338591c5a8bd8bf" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>length</name></member>
      <member refid="classarrow_1_1_union_array_1a80bc9f281bb098385f6a7e2ab6dcaea1" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>MakeDense</name></member>
      <member refid="classarrow_1_1_union_array_1a7af561645559f4e432f2aa03177581af" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>MakeDense</name></member>
      <member refid="classarrow_1_1_union_array_1a0b60007b182c3ddd6faa250f3eb6c81b" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>MakeDense</name></member>
      <member refid="classarrow_1_1_union_array_1ae3f98d2930cfb3abd5c0c7e9f4668b12" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>MakeDense</name></member>
      <member refid="classarrow_1_1_union_array_1aa57ae052affd5928e32e0dc076f821c7" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>MakeDense</name></member>
      <member refid="classarrow_1_1_union_array_1a1e25bd6a74bb47aee3612d82516ae9fe" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>MakeDense</name></member>
      <member refid="classarrow_1_1_union_array_1a18c0534b4a35ae269a6923115a8a828b" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>MakeSparse</name></member>
      <member refid="classarrow_1_1_union_array_1ab75861c04be6815d02c98739b7496b3f" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>MakeSparse</name></member>
      <member refid="classarrow_1_1_union_array_1ac1bbb3b0fde5375f165865b920fac3c4" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>MakeSparse</name></member>
      <member refid="classarrow_1_1_union_array_1ad9b9ccdc1f3c086170c5f7e9624fd643" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>MakeSparse</name></member>
      <member refid="classarrow_1_1_union_array_1a1abc36aef6389990225074369fba1259" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>MakeSparse</name></member>
      <member refid="classarrow_1_1_union_array_1a570002863522922769fde0ad36260f7f" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>MakeSparse</name></member>
      <member refid="classarrow_1_1_union_array_1ab168e382bdbb241bf08a761bb13c6a9c" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>mode</name></member>
      <member refid="classarrow_1_1_array_1a76c4756ac85b29f9135064d68d2ef908" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>null_bitmap</name></member>
      <member refid="classarrow_1_1_array_1a7a8838fbc97b9b3b8ca15cb163b2027c" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>null_bitmap_data</name></member>
      <member refid="classarrow_1_1_array_1aed59d9e8608229ff3808983cdc908ccd" prot="protected" virt="non-virtual"><scope>arrow::UnionArray</scope><name>null_bitmap_data_</name></member>
      <member refid="classarrow_1_1_array_1a0537d3b69a889b951e88be2fe9f3d96a" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>null_count</name></member>
      <member refid="classarrow_1_1_array_1a183e69c91c531609f42a29b593119d58" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>num_fields</name></member>
      <member refid="classarrow_1_1_array_1a1a0c6c1aa06cffd1dcb3813f0d24b2fd" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>offset</name></member>
      <member refid="classarrow_1_1_array_1ace5ac1affa59422d70a8b3f6929b70bc" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>RangeEquals</name></member>
      <member refid="classarrow_1_1_array_1a537467bcecb4471b18d3271f14ca9ad2" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>RangeEquals</name></member>
      <member refid="classarrow_1_1_array_1acf138d427e7f8a8c56cac7f9d9e64db3" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>RangeEquals</name></member>
      <member refid="classarrow_1_1_array_1a28f8f8d92439489bbd1727392123b0f7" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>RangeEquals</name></member>
      <member refid="classarrow_1_1_union_array_1a4f1c505593b63d8cfb4bbda98c5055dc" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>raw_type_codes</name></member>
      <member refid="classarrow_1_1_union_array_1a5d8c6cdb17b635446c646064b7749adb" prot="protected" virt="non-virtual"><scope>arrow::UnionArray</scope><name>raw_type_codes_</name></member>
      <member refid="classarrow_1_1_union_array_1a4d96ec31e2a7024af5a0fb9af1bb6b51" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>raw_value_offsets</name></member>
      <member refid="classarrow_1_1_union_array_1a2cd1c82dec5b8dcedc94c05fe9dbe872" prot="protected" virt="non-virtual"><scope>arrow::UnionArray</scope><name>raw_value_offsets_</name></member>
      <member refid="classarrow_1_1_union_array_1a4ef525f978c100e016ae395fdc0fc00a" prot="protected" virt="non-virtual"><scope>arrow::UnionArray</scope><name>SetData</name></member>
      <member refid="classarrow_1_1_array_1ae32f72c78fe10ce17f0a817e302e17d1" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>Slice</name></member>
      <member refid="classarrow_1_1_array_1a5cf4c3330e850670aa52dab3b21869ea" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>Slice</name></member>
      <member refid="classarrow_1_1_array_1a41c7af0e40ac55f2ce11785fea3e051e" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>ToString</name></member>
      <member refid="classarrow_1_1_array_1a635a694fbadb0bfa731beb97df2ef7ea" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>type</name></member>
      <member refid="classarrow_1_1_union_array_1a72f94afa1f396323001b2877cd344535" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>type_code_t</name></member>
      <member refid="classarrow_1_1_union_array_1a37dee73e4d44c4a946c412b94165f0d0" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>type_codes</name></member>
      <member refid="classarrow_1_1_array_1a155d9d827415438f976e3cb31e0a55f6" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>type_id</name></member>
      <member refid="classarrow_1_1_union_array_1ad5586c93068510028e788bea9e617bc7" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>TypeClass</name></member>
      <member refid="classarrow_1_1_union_array_1a324d529fa5e20b32dec84724549a540b" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>union_type</name></member>
      <member refid="classarrow_1_1_union_array_1a5647e0b6c19e968a98b9569d5ae19080" prot="protected" virt="non-virtual"><scope>arrow::UnionArray</scope><name>union_type_</name></member>
      <member refid="classarrow_1_1_union_array_1a1c3602e865c5506fe5b1700329ccd6f3" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>UnionArray</name></member>
      <member refid="classarrow_1_1_union_array_1a71372bd8f1c9925eb272eebc41da0881" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>UnionArray</name></member>
      <member refid="classarrow_1_1_array_1ad62bad8fde2bb8fbd5a52df3fa4bd56c" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>Validate</name></member>
      <member refid="classarrow_1_1_array_1a793321da66d2d1839e6c89a956e4cb07" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>ValidateFull</name></member>
      <member refid="classarrow_1_1_union_array_1a5475c0c7e23a7d3fe3fcb9d7fdba739d" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>value_offset</name></member>
      <member refid="classarrow_1_1_union_array_1a8b2f7da8a7e992670924f06d40c3fd58" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>value_offsets</name></member>
      <member refid="classarrow_1_1_array_1aa2b5f248c09a41c089e1fbc911beecb0" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>View</name></member>
      <member refid="classarrow_1_1_array_1ad015904c8c6e5e2513c791fb577f2679" prot="public" virt="non-virtual"><scope>arrow::UnionArray</scope><name>View</name></member>
      <member refid="classarrow_1_1_array_1addd582eec9488bca2b3379b71fef6ce5" prot="public" virt="virtual"><scope>arrow::UnionArray</scope><name>~Array</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
