<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_union_type" kind="class" language="C++" prot="public">
    <compoundname>arrow::UnionType</compoundname>
    <basecompoundref refid="classarrow_1_1_nested_type" prot="public" virt="non-virtual">arrow::NestedType</basecompoundref>
    <includes refid="type_8h" local="no">arrow/type.h</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classarrow_1_1_union_type_1abef5ab55bb61d53e4d2e4866480768dd" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref></type>
        <definition>constexpr Type::type arrow::UnionType::type_id</definition>
        <argsstring></argsstring>
        <name>type_id</name>
        <initializer>= <ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a2fa6d3a8e3947b7d0024304bfb8b5fad" kindref="member">Type::UNION</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="992" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="992" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_union_type_1a4cbe5b2d272bd69fb5094677480ae59f" prot="public" static="yes" mutable="no">
        <type>constexpr int8_t</type>
        <definition>constexpr int8_t arrow::UnionType::kMaxTypeCode</definition>
        <argsstring></argsstring>
        <name>kMaxTypeCode</name>
        <initializer>= 127</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="993" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="993" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_union_type_1a9f24378a829ba26dac4ed059bbcbf03b" prot="public" static="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int arrow::UnionType::kInvalidChildId</definition>
        <argsstring></argsstring>
        <name>kInvalidChildId</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="994" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="994" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classarrow_1_1_union_type_1aac07718f7eff67c5845cbcb359168364" prot="private" static="no" mutable="no">
        <type><ref refid="structarrow_1_1_union_mode_1a98f368f8fb8a5553a17abc2fb1e76dac" kindref="member">UnionMode::type</ref></type>
        <definition>UnionMode::type arrow::UnionType::mode_</definition>
        <argsstring></argsstring>
        <name>mode_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1032" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="1032" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_union_type_1a6a3ea10f23f2d864632c96fcea3d1f3f" prot="private" static="no" mutable="no">
        <type>std::vector&lt; int8_t &gt;</type>
        <definition>std::vector&lt;int8_t&gt; arrow::UnionType::type_codes_</definition>
        <argsstring></argsstring>
        <name>type_codes_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1034" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="1034" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_union_type_1a29b657d49f6ffecd6ddbd9ae6aec7cb2" prot="private" static="no" mutable="no">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt;int&gt; arrow::UnionType::child_ids_</definition>
        <argsstring></argsstring>
        <name>child_ids_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1035" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="1035" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1_union_type_1a6fe66faeb090bb897df76fed0d3d1cc4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const char *</type>
        <definition>static constexpr const char* arrow::UnionType::type_name</definition>
        <argsstring>()</argsstring>
        <name>type_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="996" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="996" bodyend="996"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_union_type_1aa1b972bf26d8470c5905fc7aedd1694c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;DataType&gt; &gt; arrow::UnionType::Make</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; Field &gt;&gt; &amp;fields, const std::vector&lt; int8_t &gt; &amp;type_codes, UnionMode::type mode=UnionMode::SPARSE)</argsstring>
        <name>Make</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt;&gt; &amp;</type>
          <declname>fields</declname>
        </param>
        <param>
          <type>const std::vector&lt; int8_t &gt; &amp;</type>
          <declname>type_codes</declname>
        </param>
        <param>
          <type><ref refid="structarrow_1_1_union_mode_1a98f368f8fb8a5553a17abc2fb1e76dac" kindref="member">UnionMode::type</ref></type>
          <declname>mode</declname>
          <defval><ref refid="structarrow_1_1_union_mode_1a98f368f8fb8a5553a17abc2fb1e76dacaf747592e2e0c52a802406811b95b3a60" kindref="member">UnionMode::SPARSE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1003" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1_union_type_1ab96375f7b3f367a3b6e872ae237f70b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::UnionType::UnionType</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; Field &gt;&gt; &amp;fields, const std::vector&lt; int8_t &gt; &amp;type_codes, UnionMode::type mode=UnionMode::SPARSE)</argsstring>
        <name>UnionType</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt;&gt; &amp;</type>
          <declname>fields</declname>
        </param>
        <param>
          <type>const std::vector&lt; int8_t &gt; &amp;</type>
          <declname>type_codes</declname>
        </param>
        <param>
          <type><ref refid="structarrow_1_1_union_mode_1a98f368f8fb8a5553a17abc2fb1e76dac" kindref="member">UnionMode::type</ref></type>
          <declname>mode</declname>
          <defval><ref refid="structarrow_1_1_union_mode_1a98f368f8fb8a5553a17abc2fb1e76dacaf747592e2e0c52a802406811b95b3a60" kindref="member">UnionMode::SPARSE</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="998" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_union_type_1a3945a3b84db5764ecb0788fbbf21f687" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="structarrow_1_1_data_type_layout" kindref="compound">DataTypeLayout</ref></type>
        <definition>DataTypeLayout arrow::UnionType::layout</definition>
        <argsstring>() const override</argsstring>
        <name>layout</name>
        <reimplements refid="classarrow_1_1_data_type_1a4fe70f6a45eda029ea118c8470ff925e">layout</reimplements>
        <briefdescription>
<para>Return the data type layout. </para>        </briefdescription>
        <detaileddescription>
<para>Children are not included.</para><para><simplesect kind="note"><para>Experimental API </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1007" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_union_type_1a54535494e9b2d710c0eb9fcbdde26dcd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string arrow::UnionType::ToString</definition>
        <argsstring>() const override</argsstring>
        <name>ToString</name>
        <reimplements refid="classarrow_1_1_data_type_1a944727354fb11138ebd46368319598f2">ToString</reimplements>
        <briefdescription>
<para>A string representation of the type, including any children. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1009" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_union_type_1ae1fa65b67319c82d243e9a95de543bdc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string arrow::UnionType::name</definition>
        <argsstring>() const override</argsstring>
        <name>name</name>
        <reimplements refid="classarrow_1_1_data_type_1a94985d12273f5dd353d6142921299d4d">name</reimplements>
        <briefdescription>
<para>A string name of the type, omitting any child fields. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Experimental API </para></simplesect>
<simplesect kind="since"><para>0.7.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1010" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="1010" bodyend="1010"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_union_type_1aa4e646e01306320a36650634e2a5001c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; int8_t &gt; &amp;</type>
        <definition>const std::vector&lt;int8_t&gt;&amp; arrow::UnionType::type_codes</definition>
        <argsstring>() const</argsstring>
        <name>type_codes</name>
        <briefdescription>
<para>The array of logical type ids. </para>        </briefdescription>
        <detaileddescription>
<para>For example, the first type in the union might be denoted by the id 5 (instead of 0). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1016" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="1016" bodyend="1016"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_union_type_1a625f4d3ce632e9bc79dd58999b5e4c5a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; int &gt; &amp;</type>
        <definition>const std::vector&lt;int&gt;&amp; arrow::UnionType::child_ids</definition>
        <argsstring>() const</argsstring>
        <name>child_ids</name>
        <briefdescription>
<para>An array mapping logical type ids to physical child ids. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1019" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="1019" bodyend="1019"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_union_type_1a6f4c243666e6a1490dd0586e76579f7b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t arrow::UnionType::max_type_code</definition>
        <argsstring>() const</argsstring>
        <name>max_type_code</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1021" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_union_type_1a79895226f596782cae0abf0c14da0173" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structarrow_1_1_union_mode_1a98f368f8fb8a5553a17abc2fb1e76dac" kindref="member">UnionMode::type</ref></type>
        <definition>UnionMode::type arrow::UnionType::mode</definition>
        <argsstring>() const</argsstring>
        <name>mode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1023" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="1023" bodyend="1023"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classarrow_1_1_union_type_1a166851f88cceaefeabc4c8697ed52e9e" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arrow::UnionType::ComputeFingerprint</definition>
        <argsstring>() const override</argsstring>
        <name>ComputeFingerprint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1026" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classarrow_1_1_union_type_1a219a876f4b5ebce116b9b8fc03a51bf0" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::UnionType::ValidateParameters</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; Field &gt;&gt; &amp;fields, const std::vector&lt; int8_t &gt; &amp;type_codes, UnionMode::type mode)</argsstring>
        <name>ValidateParameters</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt;&gt; &amp;</type>
          <declname>fields</declname>
        </param>
        <param>
          <type>const std::vector&lt; int8_t &gt; &amp;</type>
          <declname>type_codes</declname>
        </param>
        <param>
          <type><ref refid="structarrow_1_1_union_mode_1a98f368f8fb8a5553a17abc2fb1e76dac" kindref="member">UnionMode::type</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1028" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Concrete type class for union data. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="5079">
        <label>arrow::ParametricType</label>
        <link refid="classarrow_1_1_parametric_type"/>
      </node>
      <node id="5076">
        <label>arrow::NestedType</label>
        <link refid="classarrow_1_1_nested_type"/>
        <childnode refid="5077" relation="public-inheritance">
        </childnode>
        <childnode refid="5079" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5077">
        <label>arrow::DataType</label>
        <link refid="classarrow_1_1_data_type"/>
        <childnode refid="5078" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5078">
        <label>arrow::detail::Fingerprintable</label>
      </node>
      <node id="5075">
        <label>arrow::UnionType</label>
        <link refid="classarrow_1_1_union_type"/>
        <childnode refid="5076" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5084">
        <label>arrow::ParametricType</label>
        <link refid="classarrow_1_1_parametric_type"/>
      </node>
      <node id="5081">
        <label>arrow::NestedType</label>
        <link refid="classarrow_1_1_nested_type"/>
        <childnode refid="5082" relation="public-inheritance">
        </childnode>
        <childnode refid="5084" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5082">
        <label>arrow::DataType</label>
        <link refid="classarrow_1_1_data_type"/>
        <childnode refid="5083" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5083">
        <label>arrow::detail::Fingerprintable</label>
      </node>
      <node id="5080">
        <label>arrow::UnionType</label>
        <link refid="classarrow_1_1_union_type"/>
        <childnode refid="5081" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/type.h" line="990" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="990" bodyend="1036"/>
    <listofallmembers>
      <member refid="classarrow_1_1_data_type_1a97571c4039e363f7ebcb09f7c789064a" prot="public" virt="non-virtual"><scope>arrow::UnionType</scope><name>Accept</name></member>
      <member refid="classarrow_1_1_data_type_1a3c9f77b8d895abd8618566386cbeb7c0" prot="public" virt="non-virtual"><scope>arrow::UnionType</scope><name>child</name></member>
      <member refid="classarrow_1_1_union_type_1a625f4d3ce632e9bc79dd58999b5e4c5a" prot="public" virt="non-virtual"><scope>arrow::UnionType</scope><name>child_ids</name></member>
      <member refid="classarrow_1_1_union_type_1a29b657d49f6ffecd6ddbd9ae6aec7cb2" prot="private" virt="non-virtual"><scope>arrow::UnionType</scope><name>child_ids_</name></member>
      <member refid="classarrow_1_1_data_type_1a36061c037a2e6e974cc3b22dfb6a5bac" prot="public" virt="non-virtual"><scope>arrow::UnionType</scope><name>children</name></member>
      <member refid="classarrow_1_1_data_type_1a8dd2f042289733133c386463afcea902" prot="protected" virt="non-virtual"><scope>arrow::UnionType</scope><name>children_</name></member>
      <member refid="classarrow_1_1_union_type_1a166851f88cceaefeabc4c8697ed52e9e" prot="private" virt="non-virtual"><scope>arrow::UnionType</scope><name>ComputeFingerprint</name></member>
      <member refid="classarrow_1_1_data_type_1a1e0bf7cc98ce39872b8044f375d7de6b" prot="protected" virt="non-virtual"><scope>arrow::UnionType</scope><name>ComputeMetadataFingerprint</name></member>
      <member refid="classarrow_1_1_data_type_1a1b8a7ece05983649f67396177f40e844" prot="public" virt="non-virtual"><scope>arrow::UnionType</scope><name>DataType</name></member>
      <member refid="classarrow_1_1_data_type_1aaf003113bb8f4c51a03a16f4b27a52bb" prot="public" virt="non-virtual"><scope>arrow::UnionType</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_data_type_1ae974f4c707ef998d25368d278818af6b" prot="public" virt="non-virtual"><scope>arrow::UnionType</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_data_type_1a5ec6a1c93420c68e9c8065d4a56ad645" prot="public" virt="non-virtual"><scope>arrow::UnionType</scope><name>id</name></member>
      <member refid="classarrow_1_1_data_type_1aa2704f1cfc50018d02e109b32f67e422" prot="protected" virt="non-virtual"><scope>arrow::UnionType</scope><name>id_</name></member>
      <member refid="classarrow_1_1_union_type_1a9f24378a829ba26dac4ed059bbcbf03b" prot="public" virt="non-virtual"><scope>arrow::UnionType</scope><name>kInvalidChildId</name></member>
      <member refid="classarrow_1_1_union_type_1a4cbe5b2d272bd69fb5094677480ae59f" prot="public" virt="non-virtual"><scope>arrow::UnionType</scope><name>kMaxTypeCode</name></member>
      <member refid="classarrow_1_1_union_type_1a3945a3b84db5764ecb0788fbbf21f687" prot="public" virt="virtual"><scope>arrow::UnionType</scope><name>layout</name></member>
      <member refid="classarrow_1_1_union_type_1aa1b972bf26d8470c5905fc7aedd1694c" prot="public" virt="non-virtual"><scope>arrow::UnionType</scope><name>Make</name></member>
      <member refid="classarrow_1_1_union_type_1a6f4c243666e6a1490dd0586e76579f7b" prot="public" virt="non-virtual"><scope>arrow::UnionType</scope><name>max_type_code</name></member>
      <member refid="classarrow_1_1_union_type_1a79895226f596782cae0abf0c14da0173" prot="public" virt="non-virtual"><scope>arrow::UnionType</scope><name>mode</name></member>
      <member refid="classarrow_1_1_union_type_1aac07718f7eff67c5845cbcb359168364" prot="private" virt="non-virtual"><scope>arrow::UnionType</scope><name>mode_</name></member>
      <member refid="classarrow_1_1_union_type_1ae1fa65b67319c82d243e9a95de543bdc" prot="public" virt="virtual"><scope>arrow::UnionType</scope><name>name</name></member>
      <member refid="classarrow_1_1_data_type_1ac8920179a6c1e7f434c495d5ec4662f1" prot="public" virt="non-virtual"><scope>arrow::UnionType</scope><name>num_children</name></member>
      <member refid="classarrow_1_1_union_type_1a54535494e9b2d710c0eb9fcbdde26dcd" prot="public" virt="virtual"><scope>arrow::UnionType</scope><name>ToString</name></member>
      <member refid="classarrow_1_1_union_type_1aa4e646e01306320a36650634e2a5001c" prot="public" virt="non-virtual"><scope>arrow::UnionType</scope><name>type_codes</name></member>
      <member refid="classarrow_1_1_union_type_1a6a3ea10f23f2d864632c96fcea3d1f3f" prot="private" virt="non-virtual"><scope>arrow::UnionType</scope><name>type_codes_</name></member>
      <member refid="classarrow_1_1_union_type_1abef5ab55bb61d53e4d2e4866480768dd" prot="public" virt="non-virtual"><scope>arrow::UnionType</scope><name>type_id</name></member>
      <member refid="classarrow_1_1_union_type_1a6fe66faeb090bb897df76fed0d3d1cc4" prot="public" virt="non-virtual"><scope>arrow::UnionType</scope><name>type_name</name></member>
      <member refid="classarrow_1_1_union_type_1ab96375f7b3f367a3b6e872ae237f70b4" prot="public" virt="non-virtual"><scope>arrow::UnionType</scope><name>UnionType</name></member>
      <member refid="classarrow_1_1_union_type_1a219a876f4b5ebce116b9b8fc03a51bf0" prot="private" virt="non-virtual"><scope>arrow::UnionType</scope><name>ValidateParameters</name></member>
      <member refid="classarrow_1_1_data_type_1a268b7e57ebec17a48930c73d8c0605d2" prot="public" virt="non-virtual"><scope>arrow::UnionType</scope><name>~DataType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
