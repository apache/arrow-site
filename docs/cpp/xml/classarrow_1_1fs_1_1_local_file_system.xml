<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1fs_1_1_local_file_system" kind="class" language="C++" prot="public">
    <compoundname>arrow::fs::LocalFileSystem</compoundname>
    <basecompoundref refid="classarrow_1_1fs_1_1_file_system" prot="public" virt="non-virtual">arrow::fs::FileSystem</basecompoundref>
    <includes refid="localfs_8h" local="no">arrow/filesystem/localfs.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classarrow_1_1fs_1_1_local_file_system_1ace6f2f95a9e5c77d5299b6a76560b541" prot="protected" static="no" mutable="no">
        <type><ref refid="structarrow_1_1fs_1_1_local_file_system_options" kindref="compound">LocalFileSystemOptions</ref></type>
        <definition>LocalFileSystemOptions arrow::fs::LocalFileSystem::options_</definition>
        <argsstring></argsstring>
        <name>options_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/localfs.h" line="97" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/localfs.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1fs_1_1_local_file_system_1a7c34918e4eae0628e142c53747447c74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::fs::LocalFileSystem::LocalFileSystem</definition>
        <argsstring>()</argsstring>
        <name>LocalFileSystem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/localfs.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_local_file_system_1a725ea40b21279e1d9fb1c31d1ca5c693" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::fs::LocalFileSystem::LocalFileSystem</definition>
        <argsstring>(const LocalFileSystemOptions &amp;)</argsstring>
        <name>LocalFileSystem</name>
        <param>
          <type>const <ref refid="structarrow_1_1fs_1_1_local_file_system_options" kindref="compound">LocalFileSystemOptions</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/localfs.h" line="59" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_local_file_system_1a00c6f808c481ff9b6c0d2dfbad85709f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::fs::LocalFileSystem::~LocalFileSystem</definition>
        <argsstring>() override</argsstring>
        <name>~LocalFileSystem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/localfs.h" line="60" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_local_file_system_1ac69df6e7c6c24408ffd169442691f9ca" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string arrow::fs::LocalFileSystem::type_name</definition>
        <argsstring>() const override</argsstring>
        <name>type_name</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1a14c1160fbffc2dcb72f2e16c32329bc7">type_name</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/localfs.h" line="62" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/localfs.h" bodystart="62" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_local_file_system_1ac7091eeb585485c8ab48874ecd6637a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::string &gt;</type>
        <definition>Result&lt;std::string&gt; arrow::fs::LocalFileSystem::NormalizePath</definition>
        <argsstring>(std::string path) override</argsstring>
        <name>NormalizePath</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1a73d5af5c51cc4cf569fabcea48781721">NormalizePath</reimplements>
        <param>
          <type>std::string</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Normalize path for the given filesystem. </para>        </briefdescription>
        <detaileddescription>
<para>The default implementation of this method is a no-op, but subclasses may allow normalizing irregular path forms (such as Windows local paths). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/localfs.h" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_local_file_system_1a832919fd35500e5ebc43d9936902a7eb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool arrow::fs::LocalFileSystem::Equals</definition>
        <argsstring>(const FileSystem &amp;other) const override</argsstring>
        <name>Equals</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1ac0a0a670a467fa073bb02b8581731262">Equals</reimplements>
        <param>
          <type>const <ref refid="classarrow_1_1fs_1_1_file_system" kindref="compound">FileSystem</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/localfs.h" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_local_file_system_1a824035eabb6e27cacf9eb55623ea226d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structarrow_1_1fs_1_1_local_file_system_options" kindref="compound">LocalFileSystemOptions</ref></type>
        <definition>LocalFileSystemOptions arrow::fs::LocalFileSystem::options</definition>
        <argsstring>() const</argsstring>
        <name>options</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/localfs.h" line="68" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/localfs.h" bodystart="68" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_local_file_system_1a8ca80ceeed540c4c6773febf09324bbb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; <ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref> &gt;</type>
        <definition>Result&lt;FileInfo&gt; arrow::fs::LocalFileSystem::GetFileInfo</definition>
        <argsstring>(const std::string &amp;path) override</argsstring>
        <name>GetFileInfo</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1ae883cb9d3a7b0523ebb346e5851f6aa9">GetFileInfo</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Get info for the given target. </para>        </briefdescription>
        <detaileddescription>
<para>Any symlink is automatically dereferenced, recursively. A nonexistent or unreachable file returns an Ok status and has a FileType of value NotFound. An error status indicates a truly exceptional condition (low-level I/O error, etc.). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/localfs.h" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_local_file_system_1a839deb4ee9b760cc519fa13a880b303d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::vector&lt; <ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref> &gt; &gt;</type>
        <definition>Result&lt;std::vector&lt;FileInfo&gt; &gt; arrow::fs::LocalFileSystem::GetFileInfo</definition>
        <argsstring>(const FileSelector &amp;select) override</argsstring>
        <name>GetFileInfo</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1ad472382e0a5e63010e58eb511afb9430">GetFileInfo</reimplements>
        <param>
          <type>const <ref refid="structarrow_1_1fs_1_1_file_selector" kindref="compound">FileSelector</ref> &amp;</type>
          <declname>select</declname>
        </param>
        <briefdescription>
<para>Same, according to a selector. </para>        </briefdescription>
        <detaileddescription>
<para>The selector&apos;s base directory will not be part of the results, even if it exists. If it doesn&apos;t exist, see <computeroutput><ref refid="structarrow_1_1fs_1_1_file_selector_1aead1e24f5aa8bb7a3e893436cde83ea7" kindref="member">FileSelector::allow_not_found</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/localfs.h" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_local_file_system_1a6d258ca35afd318fc4621e918f67e1c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::fs::LocalFileSystem::CreateDir</definition>
        <argsstring>(const std::string &amp;path, bool recursive=true) override</argsstring>
        <name>CreateDir</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1aff4191ded194fc0d473608264b05ee86">CreateDir</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>recursive</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Create a directory and subdirectories. </para>        </briefdescription>
        <detaileddescription>
<para>This function succeeds if the directory already exists. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/localfs.h" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_local_file_system_1af0e422b359805e15aedf30063f433833" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::fs::LocalFileSystem::DeleteDir</definition>
        <argsstring>(const std::string &amp;path) override</argsstring>
        <name>DeleteDir</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1aa6d2d675596ee51935cc4baa9d30ea72">DeleteDir</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Delete a directory and its contents, recursively. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/localfs.h" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_local_file_system_1abddc4590710261d5b0bcd706c919ae4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::fs::LocalFileSystem::DeleteDirContents</definition>
        <argsstring>(const std::string &amp;path) override</argsstring>
        <name>DeleteDirContents</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1a908dd35485e74e91d420adf4b3eb80b2">DeleteDirContents</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Delete a directory&apos;s contents, recursively. </para>        </briefdescription>
        <detaileddescription>
<para>Like DeleteDir, but doesn&apos;t delete the directory itself. Passing an empty path (&quot;&quot;) will wipe the entire filesystem tree. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/localfs.h" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_local_file_system_1a5699f4cd29913f3fd4a4f68e87c9185f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::fs::LocalFileSystem::DeleteFile</definition>
        <argsstring>(const std::string &amp;path) override</argsstring>
        <name>DeleteFile</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1ac9698e825f1abbe2497850c7d25efa1c">DeleteFile</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Delete a file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/localfs.h" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_local_file_system_1a2a6d70b440e851cc87b54daa40e4c9ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::fs::LocalFileSystem::Move</definition>
        <argsstring>(const std::string &amp;src, const std::string &amp;dest) override</argsstring>
        <name>Move</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1a3ab3b162b3ea640076bbd46702735419">Move</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
<para>Move / rename a file or directory. </para>        </briefdescription>
        <detaileddescription>
<para>If the destination exists:<itemizedlist>
<listitem><para>if it is a non-empty directory, an error is returned</para></listitem><listitem><para>otherwise, if it has the same type as the source, it is replaced</para></listitem><listitem><para>otherwise, behavior is unspecified (implementation-dependent). </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/localfs.h" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_local_file_system_1a56afdbe5cbbea17d49a74cbccddf09be" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::fs::LocalFileSystem::CopyFile</definition>
        <argsstring>(const std::string &amp;src, const std::string &amp;dest) override</argsstring>
        <name>CopyFile</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1a7222bd63bfcb1ac2a48367ce9e5c9667">CopyFile</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
<para>Copy a file. </para>        </briefdescription>
        <detaileddescription>
<para>If the destination exists and is a directory, an error is returned. Otherwise, it is replaced. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/localfs.h" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_local_file_system_1a0410e65a1f9b6260d86aa0719e20a0cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_input_stream" kindref="compound">io::InputStream</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;io::InputStream&gt; &gt; arrow::fs::LocalFileSystem::OpenInputStream</definition>
        <argsstring>(const std::string &amp;path) override</argsstring>
        <name>OpenInputStream</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1a4baf948a7ebca79d1b085942f32ba65f">OpenInputStream</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Open an input stream for sequential reading. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/localfs.h" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_local_file_system_1a4e5e221818030bb56aba0c191eda5b0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_random_access_file" kindref="compound">io::RandomAccessFile</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;io::RandomAccessFile&gt; &gt; arrow::fs::LocalFileSystem::OpenInputFile</definition>
        <argsstring>(const std::string &amp;path) override</argsstring>
        <name>OpenInputFile</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1a6e401fc8e1b55d66ab5045845dc3fdae">OpenInputFile</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Open an input file for random access reading. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/localfs.h" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_local_file_system_1a33cfec691b6453beb11b8c1f6393a782" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_output_stream" kindref="compound">io::OutputStream</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;io::OutputStream&gt; &gt; arrow::fs::LocalFileSystem::OpenOutputStream</definition>
        <argsstring>(const std::string &amp;path) override</argsstring>
        <name>OpenOutputStream</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1ae4ebffb159bef1199092d79c05703415">OpenOutputStream</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Open an output stream for sequential writing. </para>        </briefdescription>
        <detaileddescription>
<para>If the target already exists, existing data is truncated. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/localfs.h" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_local_file_system_1afa0d6dfb121b3f9b1e19565033ce3ebd" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_output_stream" kindref="compound">io::OutputStream</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;io::OutputStream&gt; &gt; arrow::fs::LocalFileSystem::OpenAppendStream</definition>
        <argsstring>(const std::string &amp;path) override</argsstring>
        <name>OpenAppendStream</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1ada6e16933e3f62a36cb8ebbcb9c94c46">OpenAppendStream</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Open an output stream for appending. </para>        </briefdescription>
        <detaileddescription>
<para>If the target doesn&apos;t exist, a new empty file is created. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/localfs.h" line="93" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A <ref refid="classarrow_1_1fs_1_1_file_system" kindref="compound">FileSystem</ref> implementation accessing files on the local machine. </para>    </briefdescription>
    <detaileddescription>
<para>This class handles only <computeroutput>/</computeroutput>-separated paths. If desired, conversion from Windows backslash-separated paths should be done by the caller. Details such as symlinks are abstracted away (symlinks are always followed, except when deleting an entry). </para>    </detaileddescription>
    <inheritancegraph>
      <node id="2905">
        <label>std::enable_shared_from_this&lt; FileSystem &gt;</label>
      </node>
      <node id="2903">
        <label>arrow::fs::LocalFileSystem</label>
        <link refid="classarrow_1_1fs_1_1_local_file_system"/>
        <childnode refid="2904" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2904">
        <label>arrow::fs::FileSystem</label>
        <link refid="classarrow_1_1fs_1_1_file_system"/>
        <childnode refid="2905" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2908">
        <label>std::enable_shared_from_this&lt; FileSystem &gt;</label>
      </node>
      <node id="2906">
        <label>arrow::fs::LocalFileSystem</label>
        <link refid="classarrow_1_1fs_1_1_local_file_system"/>
        <childnode refid="2907" relation="public-inheritance">
        </childnode>
        <childnode refid="2909" relation="usage">
          <edgelabel>options_</edgelabel>
        </childnode>
      </node>
      <node id="2907">
        <label>arrow::fs::FileSystem</label>
        <link refid="classarrow_1_1fs_1_1_file_system"/>
        <childnode refid="2908" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2909">
        <label>arrow::fs::LocalFileSystemOptions</label>
        <link refid="structarrow_1_1fs_1_1_local_file_system_options"/>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/filesystem/localfs.h" line="56" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/localfs.h" bodystart="56" bodyend="98"/>
    <listofallmembers>
      <member refid="classarrow_1_1fs_1_1_local_file_system_1a56afdbe5cbbea17d49a74cbccddf09be" prot="public" virt="virtual"><scope>arrow::fs::LocalFileSystem</scope><name>CopyFile</name></member>
      <member refid="classarrow_1_1fs_1_1_local_file_system_1a6d258ca35afd318fc4621e918f67e1c0" prot="public" virt="virtual"><scope>arrow::fs::LocalFileSystem</scope><name>CreateDir</name></member>
      <member refid="classarrow_1_1fs_1_1_local_file_system_1af0e422b359805e15aedf30063f433833" prot="public" virt="virtual"><scope>arrow::fs::LocalFileSystem</scope><name>DeleteDir</name></member>
      <member refid="classarrow_1_1fs_1_1_local_file_system_1abddc4590710261d5b0bcd706c919ae4c" prot="public" virt="virtual"><scope>arrow::fs::LocalFileSystem</scope><name>DeleteDirContents</name></member>
      <member refid="classarrow_1_1fs_1_1_local_file_system_1a5699f4cd29913f3fd4a4f68e87c9185f" prot="public" virt="virtual"><scope>arrow::fs::LocalFileSystem</scope><name>DeleteFile</name></member>
      <member refid="classarrow_1_1fs_1_1_file_system_1aabbcfc55e53a8bcf3d88ece0b64fb400" prot="public" virt="virtual"><scope>arrow::fs::LocalFileSystem</scope><name>DeleteFiles</name></member>
      <member refid="classarrow_1_1fs_1_1_local_file_system_1a832919fd35500e5ebc43d9936902a7eb" prot="public" virt="virtual"><scope>arrow::fs::LocalFileSystem</scope><name>Equals</name></member>
      <member refid="classarrow_1_1fs_1_1_file_system_1aa0bfcdc572b747ce2b650147d8ddb888" prot="public" virt="virtual" ambiguityscope="arrow::fs::FileSystem::"><scope>arrow::fs::LocalFileSystem</scope><name>Equals</name></member>
      <member refid="classarrow_1_1fs_1_1_local_file_system_1a8ca80ceeed540c4c6773febf09324bbb" prot="public" virt="virtual"><scope>arrow::fs::LocalFileSystem</scope><name>GetFileInfo</name></member>
      <member refid="classarrow_1_1fs_1_1_local_file_system_1a839deb4ee9b760cc519fa13a880b303d" prot="public" virt="virtual"><scope>arrow::fs::LocalFileSystem</scope><name>GetFileInfo</name></member>
      <member refid="classarrow_1_1fs_1_1_file_system_1a4e7ff03e540cfba191d9c42aa6bba060" prot="public" virt="virtual" ambiguityscope="arrow::fs::FileSystem::"><scope>arrow::fs::LocalFileSystem</scope><name>GetFileInfo</name></member>
      <member refid="classarrow_1_1fs_1_1_local_file_system_1a7c34918e4eae0628e142c53747447c74" prot="public" virt="non-virtual"><scope>arrow::fs::LocalFileSystem</scope><name>LocalFileSystem</name></member>
      <member refid="classarrow_1_1fs_1_1_local_file_system_1a725ea40b21279e1d9fb1c31d1ca5c693" prot="public" virt="non-virtual"><scope>arrow::fs::LocalFileSystem</scope><name>LocalFileSystem</name></member>
      <member refid="classarrow_1_1fs_1_1_local_file_system_1a2a6d70b440e851cc87b54daa40e4c9ef" prot="public" virt="virtual"><scope>arrow::fs::LocalFileSystem</scope><name>Move</name></member>
      <member refid="classarrow_1_1fs_1_1_local_file_system_1ac7091eeb585485c8ab48874ecd6637a2" prot="public" virt="virtual"><scope>arrow::fs::LocalFileSystem</scope><name>NormalizePath</name></member>
      <member refid="classarrow_1_1fs_1_1_local_file_system_1afa0d6dfb121b3f9b1e19565033ce3ebd" prot="public" virt="virtual"><scope>arrow::fs::LocalFileSystem</scope><name>OpenAppendStream</name></member>
      <member refid="classarrow_1_1fs_1_1_local_file_system_1a4e5e221818030bb56aba0c191eda5b0c" prot="public" virt="virtual"><scope>arrow::fs::LocalFileSystem</scope><name>OpenInputFile</name></member>
      <member refid="classarrow_1_1fs_1_1_local_file_system_1a0410e65a1f9b6260d86aa0719e20a0cf" prot="public" virt="virtual"><scope>arrow::fs::LocalFileSystem</scope><name>OpenInputStream</name></member>
      <member refid="classarrow_1_1fs_1_1_local_file_system_1a33cfec691b6453beb11b8c1f6393a782" prot="public" virt="virtual"><scope>arrow::fs::LocalFileSystem</scope><name>OpenOutputStream</name></member>
      <member refid="classarrow_1_1fs_1_1_local_file_system_1a824035eabb6e27cacf9eb55623ea226d" prot="public" virt="non-virtual"><scope>arrow::fs::LocalFileSystem</scope><name>options</name></member>
      <member refid="classarrow_1_1fs_1_1_local_file_system_1ace6f2f95a9e5c77d5299b6a76560b541" prot="protected" virt="non-virtual"><scope>arrow::fs::LocalFileSystem</scope><name>options_</name></member>
      <member refid="classarrow_1_1fs_1_1_local_file_system_1ac69df6e7c6c24408ffd169442691f9ca" prot="public" virt="virtual"><scope>arrow::fs::LocalFileSystem</scope><name>type_name</name></member>
      <member refid="classarrow_1_1fs_1_1_file_system_1a364917767b1d2e11b3b8967a4ee08c30" prot="public" virt="virtual"><scope>arrow::fs::LocalFileSystem</scope><name>~FileSystem</name></member>
      <member refid="classarrow_1_1fs_1_1_local_file_system_1a00c6f808c481ff9b6c0d2dfbad85709f" prot="public" virt="non-virtual"><scope>arrow::fs::LocalFileSystem</scope><name>~LocalFileSystem</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
