<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__concat-tables" kind="group">
    <compoundname>concat-tables</compoundname>
    <title>ConcatenateTables function.</title>
    <innerclass refid="structarrow_1_1_concatenate_tables_options" prot="public">arrow::ConcatenateTablesOptions</innerclass>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__concat-tables_1ga438707b92386f68a63348c30743bc159" prot="protected" static="no" mutable="no">
        <type>ArrayVector</type>
        <definition>ArrayVector arrow::ChunkedArray::chunks_</definition>
        <argsstring></argsstring>
        <name>chunks_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="132" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="132" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__concat-tables_1ga4d2fc435340a18c488a3001ce88018c4" prot="protected" static="no" mutable="no">
        <type>int64_t</type>
        <definition>int64_t arrow::ChunkedArray::length_</definition>
        <argsstring></argsstring>
        <name>length_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="133" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__concat-tables_1ga45ef30e6a7823f1666b0f50ecde903a7" prot="protected" static="no" mutable="no">
        <type>int64_t</type>
        <definition>int64_t arrow::ChunkedArray::null_count_</definition>
        <argsstring></argsstring>
        <name>null_count_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="134" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__concat-tables_1ga42911a6e758dd14bcc47a2108eed7bd0" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::ChunkedArray::type_</definition>
        <argsstring></argsstring>
        <name>type_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="135" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__concat-tables_1ga40375f7767ae6caea748d87e53aacb45" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; Schema &gt;</type>
        <definition>std::shared_ptr&lt;Schema&gt; arrow::Table::schema_</definition>
        <argsstring></argsstring>
        <name>schema_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="420" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="420" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__concat-tables_1ga7b7b895c038e468dac1be8d27722ffa6" prot="protected" static="no" mutable="no">
        <type>int64_t</type>
        <definition>int64_t arrow::Table::num_rows_</definition>
        <argsstring></argsstring>
        <name>num_rows_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="421" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="421" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__concat-tables_1gaf812112b34a8243b417c310221fc7812" prot="private" static="no" mutable="no">
        <type>const Table &amp;</type>
        <definition>const Table&amp; arrow::TableBatchReader::table_</definition>
        <argsstring></argsstring>
        <name>table_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="447" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="447" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__concat-tables_1ga1604330b69fa7c72a719dab47e071e42" prot="private" static="no" mutable="no">
        <type>std::vector&lt; ChunkedArray * &gt;</type>
        <definition>std::vector&lt;ChunkedArray*&gt; arrow::TableBatchReader::column_data_</definition>
        <argsstring></argsstring>
        <name>column_data_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="448" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="448" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__concat-tables_1ga8b80e618649651973fe43c92fed26bc3" prot="private" static="no" mutable="no">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt;int&gt; arrow::TableBatchReader::chunk_numbers_</definition>
        <argsstring></argsstring>
        <name>chunk_numbers_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="449" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="449" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__concat-tables_1ga6177ac8085f29668fee7f9bae9dc8ea1" prot="private" static="no" mutable="no">
        <type>std::vector&lt; int64_t &gt;</type>
        <definition>std::vector&lt;int64_t&gt; arrow::TableBatchReader::chunk_offsets_</definition>
        <argsstring></argsstring>
        <name>chunk_offsets_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="450" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="450" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__concat-tables_1ga605be66150c0cb82073051a9c9bbeeb4" prot="private" static="no" mutable="no">
        <type>int64_t</type>
        <definition>int64_t arrow::TableBatchReader::absolute_row_position_</definition>
        <argsstring></argsstring>
        <name>absolute_row_position_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="451" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="451" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__concat-tables_1ga185d78cb7dc7d13cfa741d03d16ae788" prot="private" static="no" mutable="no">
        <type>int64_t</type>
        <definition>int64_t arrow::TableBatchReader::max_chunksize_</definition>
        <argsstring></argsstring>
        <name>max_chunksize_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="452" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="452" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__concat-tables_1gac7c26f51a3023e3bc2eb6ae5a4510a9a" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool arrow::ConcatenateTablesOptions::unify_schemas</definition>
        <argsstring></argsstring>
        <name>unify_schemas</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>If true, the schemas of the tables will be first unified with fields of the same name being merged, according to <computeroutput>field_merge_options</computeroutput>, then each table will be promoted to the unified schema before being concatenated. </para>        </briefdescription>
        <detaileddescription>
<para>Otherwise, all tables should have the same schema. Each column in the output table is the result of concatenating the corresponding columns in all input tables. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="467" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="467" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__concat-tables_1ga20181bbcd6ae25ba49cadf11c636d4b3" prot="public" static="no" mutable="no">
        <type>Field::MergeOptions</type>
        <definition>Field::MergeOptions arrow::ConcatenateTablesOptions::field_merge_options</definition>
        <argsstring></argsstring>
        <name>field_merge_options</name>
        <initializer>= Field::MergeOptions::Defaults()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="469" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="469" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__concat-tables_1ga20e9e43c646d7f55d57b3c039bbabde1" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::ChunkedArray::ChunkedArray</definition>
        <argsstring>(ArrayVector chunks)</argsstring>
        <name>ChunkedArray</name>
        <param>
          <type>ArrayVector</type>
          <declname>chunks</declname>
        </param>
        <briefdescription>
<para>Construct a chunked array from a vector of arrays. </para>        </briefdescription>
        <detaileddescription>
<para>The vector must be non-empty and all its elements must have the same data type. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="43" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga2d66448b2733e29fe02d6334defa7e47" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::ChunkedArray::ChunkedArray</definition>
        <argsstring>(std::shared_ptr&lt; Array &gt; chunk)</argsstring>
        <name>ChunkedArray</name>
        <param>
          <type>std::shared_ptr&lt; Array &gt;</type>
          <declname>chunk</declname>
        </param>
        <briefdescription>
<para>Construct a chunked array from a single <ref refid="classarrow_1_1_array" kindref="compound">Array</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="46" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="46" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga8b8947395f527581001a0d9c06e8f9b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::ChunkedArray::ChunkedArray</definition>
        <argsstring>(ArrayVector chunks, std::shared_ptr&lt; DataType &gt; type)</argsstring>
        <name>ChunkedArray</name>
        <param>
          <type>ArrayVector</type>
          <declname>chunks</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; DataType &gt;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Construct a chunked array from a vector of arrays and a data type. </para>        </briefdescription>
        <detaileddescription>
<para>As the data type is passed explicitly, the vector may be empty. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga4df41bf1a05cd1083a2c4502e0a85f87" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t arrow::ChunkedArray::length</definition>
        <argsstring>() const</argsstring>
        <name>length</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the total length of the chunked array; computed on construction </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="55" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="55" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga962541b044ac5a7a6a87499cef7957bb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t arrow::ChunkedArray::null_count</definition>
        <argsstring>() const</argsstring>
        <name>null_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the total number of nulls among all chunks </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="58" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="58" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1gafa477fd2e9a3ce9131d9d7f4391de52b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int arrow::ChunkedArray::num_chunks</definition>
        <argsstring>() const</argsstring>
        <name>num_chunks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="60" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="60" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga92ec02f5904ac3e4dac5328e44ebf0fb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; Array &gt;</type>
        <definition>std::shared_ptr&lt;Array&gt; arrow::ChunkedArray::chunk</definition>
        <argsstring>(int i) const</argsstring>
        <name>chunk</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>chunk a particular chunk from the chunked array </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="63" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="63" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1gaf53b92e2594cbe9d84710256e295586a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const ArrayVector &amp;</type>
        <definition>const ArrayVector&amp; arrow::ChunkedArray::chunks</definition>
        <argsstring>() const</argsstring>
        <name>chunks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="65" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga99573028501f20b3f0707d85e8cce2ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; ChunkedArray &gt;</type>
        <definition>std::shared_ptr&lt;ChunkedArray&gt; arrow::ChunkedArray::Slice</definition>
        <argsstring>(int64_t offset, int64_t length) const</argsstring>
        <name>Slice</name>
        <param>
          <type>int64_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Construct a zero-copy slice of the chunked array with the indicated offset and length. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>the position of the first element in the constructed slice </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>the length of the slice. If there are not enough elements in the chunked array, the length will be adjusted accordingly</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a new object wrapped in std::shared_ptr&lt;ChunkedArray&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1gabf30b26c92cf037191e8574763e22a2e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; ChunkedArray &gt;</type>
        <definition>std::shared_ptr&lt;ChunkedArray&gt; arrow::ChunkedArray::Slice</definition>
        <argsstring>(int64_t offset) const</argsstring>
        <name>Slice</name>
        <param>
          <type>int64_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Slice from offset until end of the chunked array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1gac4fd4aa712dd636d52dc3199c8276c2c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; std::vector&lt; std::shared_ptr&lt; ChunkedArray &gt; &gt; &gt;</type>
        <definition>Result&lt;std::vector&lt;std::shared_ptr&lt;ChunkedArray&gt; &gt; &gt; arrow::ChunkedArray::Flatten</definition>
        <argsstring>(MemoryPool *pool=default_memory_pool()) const</argsstring>
        <name>Flatten</name>
        <param>
          <type>MemoryPool *</type>
          <declname>pool</declname>
          <defval>default_memory_pool()</defval>
        </param>
        <briefdescription>
<para>Flatten this chunked array as a vector of chunked arrays, one for each struct field. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool for buffer allocations, if any </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga8d4af28e378addf17162ad421bc0cdd6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Status</type>
        <definition>Status arrow::ChunkedArray::Flatten</definition>
        <argsstring>(MemoryPool *pool, std::vector&lt; std::shared_ptr&lt; ChunkedArray &gt;&gt; *out) const</argsstring>
        <name>Flatten</name>
        <param>
          <type>MemoryPool *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>std::vector&lt; std::shared_ptr&lt; ChunkedArray &gt;&gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga6486c77d9ba68feb3a0205691f5bc7d4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; std::shared_ptr&lt; ChunkedArray &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;ChunkedArray&gt; &gt; arrow::ChunkedArray::View</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;type) const</argsstring>
        <name>View</name>
        <param>
          <type>const std::shared_ptr&lt; DataType &gt; &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Construct a zero-copy view of this chunked array with the given type. </para>        </briefdescription>
        <detaileddescription>
<para>Calls <ref refid="classarrow_1_1_array_1aa2b5f248c09a41c089e1fbc911beecb0" kindref="member">Array::View</ref> on each constituent chunk. Always succeeds if there are zero chunks </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1gad5d7f457d2b87d9e28045b69b1ae9efb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Status</type>
        <definition>Status arrow::ChunkedArray::View</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;type, std::shared_ptr&lt; ChunkedArray &gt; *out) const</argsstring>
        <name>View</name>
        <param>
          <type>const std::shared_ptr&lt; DataType &gt; &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; ChunkedArray &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="97" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1gadb15afa228802d9fab0f3993a4f82df2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::ChunkedArray::type</definition>
        <argsstring>() const</argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="100" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1gab7ad74cc587d5d622c7e62cbf1b0b9f9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::ChunkedArray::Equals</definition>
        <argsstring>(const ChunkedArray &amp;other) const</argsstring>
        <name>Equals</name>
        <param>
          <type>const ChunkedArray &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Determine if two chunked arrays are equal. </para>        </briefdescription>
        <detaileddescription>
<para>Two chunked arrays can be equal only if they have equal datatypes. However, they may be equal even if they have different chunkings. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga67c23032d122d1a87acf0bc2b2e52d54" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::ChunkedArray::Equals</definition>
        <argsstring>(const std::shared_ptr&lt; ChunkedArray &gt; &amp;other) const</argsstring>
        <name>Equals</name>
        <param>
          <type>const std::shared_ptr&lt; ChunkedArray &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Determine if two chunked arrays are equal. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1gaba4644e58ea8d1b43080691a4e945ca8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arrow::ChunkedArray::ToString</definition>
        <argsstring>() const</argsstring>
        <name>ToString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>PrettyPrint representation suitable for debugging </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga06ca5def32987d58b7577db269e39520" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Status</type>
        <definition>Status arrow::ChunkedArray::Validate</definition>
        <argsstring>() const</argsstring>
        <name>Validate</name>
        <briefdescription>
<para>Perform cheap validation checks to determine obvious inconsistencies within the chunk array&apos;s internal data. </para>        </briefdescription>
        <detaileddescription>
<para>This is O(k*m) where k is the number of array descendents, and m is the number of chunks.</para><para><simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga85899961a35888fcdfed462418ba6498" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Status</type>
        <definition>Status arrow::ChunkedArray::ValidateFull</definition>
        <argsstring>() const</argsstring>
        <name>ValidateFull</name>
        <briefdescription>
<para>Perform extensive validation checks to determine inconsistencies within the chunk array&apos;s internal data. </para>        </briefdescription>
        <detaileddescription>
<para>This is O(k*n) where k is the number of array descendents, and n is the length in elements.</para><para><simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="129" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga38e53e9f6ad293ed25315f8d3f140e69" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::ChunkedArray::ARROW_DISALLOW_COPY_AND_ASSIGN</definition>
        <argsstring>(ChunkedArray)</argsstring>
        <name>ARROW_DISALLOW_COPY_AND_ASSIGN</name>
        <param>
          <type>ChunkedArray</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="138" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga7ea1eed4818941b9b1eb98381e1b9690" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual arrow::Table::~Table</definition>
        <argsstring>()=default</argsstring>
        <name>~Table</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="223" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1gadbbe286a2ac648a8fae4af18ddfc52bf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; Table &gt;</type>
        <definition>static std::shared_ptr&lt;Table&gt; arrow::Table::Make</definition>
        <argsstring>(std::shared_ptr&lt; Schema &gt; schema, std::vector&lt; std::shared_ptr&lt; ChunkedArray &gt;&gt; columns, int64_t num_rows=-1)</argsstring>
        <name>Make</name>
        <param>
          <type>std::shared_ptr&lt; Schema &gt;</type>
          <declname>schema</declname>
        </param>
        <param>
          <type>std::vector&lt; std::shared_ptr&lt; ChunkedArray &gt;&gt;</type>
          <declname>columns</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>num_rows</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> from schema and columns If columns is zero-length, the table&apos;s number of rows is zero. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>schema</parametername>
</parameternamelist>
<parameterdescription>
<para>The table schema (column types) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>columns</parametername>
</parameternamelist>
<parameterdescription>
<para>The table&apos;s columns as chunked arrays </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_rows</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows in table, -1 (default) to infer from columns </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="230" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga54fb8a7cc7115373655ec564a9fcf32e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; Table &gt;</type>
        <definition>static std::shared_ptr&lt;Table&gt; arrow::Table::Make</definition>
        <argsstring>(std::shared_ptr&lt; Schema &gt; schema, const std::vector&lt; std::shared_ptr&lt; Array &gt;&gt; &amp;arrays, int64_t num_rows=-1)</argsstring>
        <name>Make</name>
        <param>
          <type>std::shared_ptr&lt; Schema &gt;</type>
          <declname>schema</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; Array &gt;&gt; &amp;</type>
          <declname>arrays</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>num_rows</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> from schema and arrays. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>schema</parametername>
</parameternamelist>
<parameterdescription>
<para>The table schema (column types) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arrays</parametername>
</parameternamelist>
<parameterdescription>
<para>The table&apos;s columns as arrays </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_rows</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows in table, -1 (default) to infer from columns </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="238" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga6485c5b425e042e2bd346011bbc413fa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; std::shared_ptr&lt; Table &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;Table&gt; &gt; arrow::Table::FromRecordBatches</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; RecordBatch &gt;&gt; &amp;batches)</argsstring>
        <name>FromRecordBatches</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; RecordBatch &gt;&gt; &amp;</type>
          <declname>batches</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> from RecordBatches, using schema supplied by the first <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">batches</parametername>
</parameternamelist>
<parameterdescription>
<para>a std::vector of record batches </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="246" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1gaec5f16e5671977e0d948d0e0865935fe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Status</type>
        <definition>static Status arrow::Table::FromRecordBatches</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; RecordBatch &gt;&gt; &amp;batches, std::shared_ptr&lt; Table &gt; *table)</argsstring>
        <name>FromRecordBatches</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; RecordBatch &gt;&gt; &amp;</type>
          <declname>batches</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; Table &gt; *</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="250" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga25b557706b098be27717002fee946856" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; std::shared_ptr&lt; Table &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;Table&gt; &gt; arrow::Table::FromRecordBatches</definition>
        <argsstring>(std::shared_ptr&lt; Schema &gt; schema, const std::vector&lt; std::shared_ptr&lt; RecordBatch &gt;&gt; &amp;batches)</argsstring>
        <name>FromRecordBatches</name>
        <param>
          <type>std::shared_ptr&lt; Schema &gt;</type>
          <declname>schema</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; RecordBatch &gt;&gt; &amp;</type>
          <declname>batches</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> from RecordBatches, using supplied schema. </para>        </briefdescription>
        <detaileddescription>
<para>There may be zero record batches</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">schema</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classarrow_1_1_schema" kindref="compound">arrow::Schema</ref> for each batch </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">batches</parametername>
</parameternamelist>
<parameterdescription>
<para>a std::vector of record batches </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="259" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1gad5e4e5aa336363beddf51eb789be253b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Status</type>
        <definition>static Status arrow::Table::FromRecordBatches</definition>
        <argsstring>(std::shared_ptr&lt; Schema &gt; schema, const std::vector&lt; std::shared_ptr&lt; RecordBatch &gt;&gt; &amp;batches, std::shared_ptr&lt; Table &gt; *table)</argsstring>
        <name>FromRecordBatches</name>
        <param>
          <type>std::shared_ptr&lt; Schema &gt;</type>
          <declname>schema</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; RecordBatch &gt;&gt; &amp;</type>
          <declname>batches</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; Table &gt; *</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="264" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga888a3ea6e291b96c589c08ce4e1c431e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; std::shared_ptr&lt; Table &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;Table&gt; &gt; arrow::Table::FromChunkedStructArray</definition>
        <argsstring>(const std::shared_ptr&lt; ChunkedArray &gt; &amp;array)</argsstring>
        <name>FromChunkedStructArray</name>
        <param>
          <type>const std::shared_ptr&lt; ChunkedArray &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> from a chunked <ref refid="classarrow_1_1_struct_array" kindref="compound">StructArray</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>One column will be produced for each field of the <ref refid="classarrow_1_1_struct_array" kindref="compound">StructArray</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">array</parametername>
</parameternamelist>
<parameterdescription>
<para>a chunked <ref refid="classarrow_1_1_struct_array" kindref="compound">StructArray</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="273" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga3ff130c5cbb35eda98f55d1e3d0fcfb0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Status</type>
        <definition>static Status arrow::Table::FromChunkedStructArray</definition>
        <argsstring>(const std::shared_ptr&lt; ChunkedArray &gt; &amp;array, std::shared_ptr&lt; Table &gt; *table)</argsstring>
        <name>FromChunkedStructArray</name>
        <param>
          <type>const std::shared_ptr&lt; ChunkedArray &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; Table &gt; *</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="277" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga8d8626acf4d00e2ac439c4f1cc7a054a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; Schema &gt;</type>
        <definition>std::shared_ptr&lt;Schema&gt; arrow::Table::schema</definition>
        <argsstring>() const</argsstring>
        <name>schema</name>
        <briefdescription>
<para>Return the table schema. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="281" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="281" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga8096b001837e7ad277e00b50226fbbe6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::shared_ptr&lt; ChunkedArray &gt;</type>
        <definition>virtual std::shared_ptr&lt;ChunkedArray&gt; arrow::Table::column</definition>
        <argsstring>(int i) const =0</argsstring>
        <name>column</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Return a column by index. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="284" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga89c30f4eb8b98a5ab126dc404c873bed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::shared_ptr&lt; ChunkedArray &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;ChunkedArray&gt; &gt; arrow::Table::columns</definition>
        <argsstring>() const</argsstring>
        <name>columns</name>
        <briefdescription>
<para>Return vector of all columns for table. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="287" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1gad9df57298bb216a45d106d77ffa06def" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; Field &gt;</type>
        <definition>std::shared_ptr&lt;Field&gt; arrow::Table::field</definition>
        <argsstring>(int i) const</argsstring>
        <name>field</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Return a column&apos;s field by index. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="290" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="290" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga82dfb0b822b42639fa95344abc4b0d26" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::shared_ptr&lt; Field &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;Field&gt; &gt; arrow::Table::fields</definition>
        <argsstring>() const</argsstring>
        <name>fields</name>
        <briefdescription>
<para>Return vector of all fields for table. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="293" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga8fb8285ac5af45a9e931564edb4938fc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::shared_ptr&lt; Table &gt;</type>
        <definition>virtual std::shared_ptr&lt;Table&gt; arrow::Table::Slice</definition>
        <argsstring>(int64_t offset, int64_t length) const =0</argsstring>
        <name>Slice</name>
        <param>
          <type>int64_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Construct a zero-copy slice of the table with the indicated offset and length. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the first row in the constructed slice </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of rows of the slice. If there are not enough rows in the table, the length will be adjusted accordingly</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a new object wrapped in std::shared_ptr&lt;Table&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="304" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga3948de704790a778f8568f22e08bca55" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; Table &gt;</type>
        <definition>std::shared_ptr&lt;Table&gt; arrow::Table::Slice</definition>
        <argsstring>(int64_t offset) const</argsstring>
        <name>Slice</name>
        <param>
          <type>int64_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Slice from first row at offset until end of the table. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="307" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="307" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1gacb02268cc5b63206615c88f26194b88c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; ChunkedArray &gt;</type>
        <definition>std::shared_ptr&lt;ChunkedArray&gt; arrow::Table::GetColumnByName</definition>
        <argsstring>(const std::string &amp;name) const</argsstring>
        <name>GetColumnByName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Return a column by name. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>field name </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> or null if no field was found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="312" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="312" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1gabb51bfae47ef4cfc387b45e70c8bf288" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>Result&lt; std::shared_ptr&lt; Table &gt; &gt;</type>
        <definition>virtual Result&lt;std::shared_ptr&lt;Table&gt; &gt; arrow::Table::RemoveColumn</definition>
        <argsstring>(int i) const =0</argsstring>
        <name>RemoveColumn</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Remove column from the table, producing a new <ref refid="classarrow_1_1_table" kindref="compound">Table</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="318" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga95286e58ddd506b8be041b9c5ce55097" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Status</type>
        <definition>Status arrow::Table::RemoveColumn</definition>
        <argsstring>(int i, std::shared_ptr&lt; Table &gt; *out) const</argsstring>
        <name>RemoveColumn</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; Table &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="321" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga69d4bb372350e0ea6df4f18c6e0024fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>Result&lt; std::shared_ptr&lt; Table &gt; &gt;</type>
        <definition>virtual Result&lt;std::shared_ptr&lt;Table&gt; &gt; arrow::Table::AddColumn</definition>
        <argsstring>(int i, std::shared_ptr&lt; Field &gt; field_arg, std::shared_ptr&lt; ChunkedArray &gt; column) const =0</argsstring>
        <name>AddColumn</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; Field &gt;</type>
          <declname>field_arg</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; ChunkedArray &gt;</type>
          <declname>column</declname>
        </param>
        <briefdescription>
<para>Add column to the table, producing a new <ref refid="classarrow_1_1_table" kindref="compound">Table</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="324" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga9a4052b9ed361b073de0686533c148bb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Status</type>
        <definition>Status arrow::Table::AddColumn</definition>
        <argsstring>(int i, std::shared_ptr&lt; Field &gt; field_arg, std::shared_ptr&lt; ChunkedArray &gt; column, std::shared_ptr&lt; Table &gt; *out) const</argsstring>
        <name>AddColumn</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; Field &gt;</type>
          <declname>field_arg</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; ChunkedArray &gt;</type>
          <declname>column</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; Table &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="329" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga586dc478193d88f31afad1a6a17b991d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>Result&lt; std::shared_ptr&lt; Table &gt; &gt;</type>
        <definition>virtual Result&lt;std::shared_ptr&lt;Table&gt; &gt; arrow::Table::SetColumn</definition>
        <argsstring>(int i, std::shared_ptr&lt; Field &gt; field_arg, std::shared_ptr&lt; ChunkedArray &gt; column) const =0</argsstring>
        <name>SetColumn</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; Field &gt;</type>
          <declname>field_arg</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; ChunkedArray &gt;</type>
          <declname>column</declname>
        </param>
        <briefdescription>
<para>Replace a column in the table, producing a new <ref refid="classarrow_1_1_table" kindref="compound">Table</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="334" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga5254d32e08c04a0524eba75acbc7cd96" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Status</type>
        <definition>Status arrow::Table::SetColumn</definition>
        <argsstring>(int i, std::shared_ptr&lt; Field &gt; field_arg, std::shared_ptr&lt; ChunkedArray &gt; column, std::shared_ptr&lt; Table &gt; *out) const</argsstring>
        <name>SetColumn</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; Field &gt;</type>
          <declname>field_arg</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; ChunkedArray &gt;</type>
          <declname>column</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; Table &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="339" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga1a280d02d926b10484a2a4631c7fa305" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; arrow::Table::ColumnNames</definition>
        <argsstring>() const</argsstring>
        <name>ColumnNames</name>
        <briefdescription>
<para>Return names of all columns. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="344" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1gaf89e68f611db6fc4b2680d272386f776" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; std::shared_ptr&lt; Table &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;Table&gt; &gt; arrow::Table::RenameColumns</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;names) const</argsstring>
        <name>RenameColumns</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>names</declname>
        </param>
        <briefdescription>
<para>Rename columns with provided names. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="347" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga2bf58206871ca43cbac00e3df4aeea4c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Status</type>
        <definition>Status arrow::Table::RenameColumns</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;names, std::shared_ptr&lt; Table &gt; *out) const</argsstring>
        <name>RenameColumns</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>names</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; Table &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="351" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga53f5891d984e4652f5482096ea32e6d5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::shared_ptr&lt; Table &gt;</type>
        <definition>virtual std::shared_ptr&lt;Table&gt; arrow::Table::ReplaceSchemaMetadata</definition>
        <argsstring>(const std::shared_ptr&lt; const KeyValueMetadata &gt; &amp;metadata) const =0</argsstring>
        <name>ReplaceSchemaMetadata</name>
        <param>
          <type>const std::shared_ptr&lt; const KeyValueMetadata &gt; &amp;</type>
          <declname>metadata</declname>
        </param>
        <briefdescription>
<para>Replace schema key-value metadata with new metadata (EXPERIMENTAL) </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>0.5.0</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">metadata</parametername>
</parameternamelist>
<parameterdescription>
<para>new <ref refid="classarrow_1_1_key_value_metadata" kindref="compound">KeyValueMetadata</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="359" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga86c741ce1d31a4d14a14e1808f0bf33a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>Result&lt; std::shared_ptr&lt; Table &gt; &gt;</type>
        <definition>virtual Result&lt;std::shared_ptr&lt;Table&gt; &gt; arrow::Table::Flatten</definition>
        <argsstring>(MemoryPool *pool=default_memory_pool()) const =0</argsstring>
        <name>Flatten</name>
        <param>
          <type>MemoryPool *</type>
          <declname>pool</declname>
          <defval>default_memory_pool()</defval>
        </param>
        <briefdescription>
<para>Flatten the table, producing a new <ref refid="classarrow_1_1_table" kindref="compound">Table</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Any column with a struct type will be flattened into multiple columns</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool for buffer allocations, if any </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="366" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1gad539133daaafc3882aa7bcd2e0497e15" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Status</type>
        <definition>Status arrow::Table::Flatten</definition>
        <argsstring>(MemoryPool *pool, std::shared_ptr&lt; Table &gt; *out) const</argsstring>
        <name>Flatten</name>
        <param>
          <type>MemoryPool *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; Table &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="370" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga952001529c848c932349b3198d98b680" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arrow::Table::ToString</definition>
        <argsstring>() const</argsstring>
        <name>ToString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>PrettyPrint representation suitable for debugging </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="373" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga4a93ccc812c7ee9992bc9138b53895e0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>Status</type>
        <definition>virtual Status arrow::Table::Validate</definition>
        <argsstring>() const =0</argsstring>
        <name>Validate</name>
        <briefdescription>
<para>Perform cheap validation checks to determine obvious inconsistencies within the table&apos;s schema and internal data. </para>        </briefdescription>
        <detaileddescription>
<para>This is O(k*m) where k is the total number of field descendents, and m is the number of chunks.</para><para><simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="382" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga5796527d5848794aff9b6b3107011dd7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>Status</type>
        <definition>virtual Status arrow::Table::ValidateFull</definition>
        <argsstring>() const =0</argsstring>
        <name>ValidateFull</name>
        <briefdescription>
<para>Perform extensive validation checks to determine inconsistencies within the table&apos;s schema and internal data. </para>        </briefdescription>
        <detaileddescription>
<para>This is O(k*n) where k is the total number of field descendents, and n is the number of rows.</para><para><simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="391" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1gabe71e003123973cdff9cfca40dc85e04" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int arrow::Table::num_columns</definition>
        <argsstring>() const</argsstring>
        <name>num_columns</name>
        <briefdescription>
<para>Return the number of columns in the table. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="394" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="394" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga14665d44a57c45343b54c7997d5c92e5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t arrow::Table::num_rows</definition>
        <argsstring>() const</argsstring>
        <name>num_rows</name>
        <briefdescription>
<para>Return the number of rows (equal to each column&apos;s logical length) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="397" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="397" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1gadc19bf0d1bcd8234e62d6dbce93e643b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::Table::Equals</definition>
        <argsstring>(const Table &amp;other, bool check_metadata=false) const</argsstring>
        <name>Equals</name>
        <param>
          <type>const Table &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>check_metadata</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Determine if tables are equal. </para>        </briefdescription>
        <detaileddescription>
<para>Two tables can be equal only if they have equal schemas. However, they may be equal even if they have different chunkings. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="403" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga5ee29a152192a220e9502c4b4eb61bfa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; std::shared_ptr&lt; Table &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;Table&gt; &gt; arrow::Table::CombineChunks</definition>
        <argsstring>(MemoryPool *pool=default_memory_pool()) const</argsstring>
        <name>CombineChunks</name>
        <param>
          <type>MemoryPool *</type>
          <declname>pool</declname>
          <defval>default_memory_pool()</defval>
        </param>
        <briefdescription>
<para>Make a new table by combining the chunks this table has. </para>        </briefdescription>
        <detaileddescription>
<para>All the underlying chunks in the <ref refid="classarrow_1_1_chunked_array" kindref="compound">ChunkedArray</ref> of each column are concatenated into zero or one chunk.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool for buffer allocations </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="411" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1gac8b72567643fa64cde6e88478f97cc1e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>Status</type>
        <definition>Status arrow::Table::CombineChunks</definition>
        <argsstring>(MemoryPool *pool, std::shared_ptr&lt; Table &gt; *out) const</argsstring>
        <name>CombineChunks</name>
        <param>
          <type>MemoryPool *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; Table &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="415" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1gaebd70d5a21ef0558472d6e594d3ceeb2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::Table::Table</definition>
        <argsstring>()</argsstring>
        <name>Table</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="418" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga99b2a29efb8b66cb02786e3f59dac100" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::Table::ARROW_DISALLOW_COPY_AND_ASSIGN</definition>
        <argsstring>(Table)</argsstring>
        <name>ARROW_DISALLOW_COPY_AND_ASSIGN</name>
        <param>
          <type>Table</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="424" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga4ae1034b4c522d66da02ac1e17f30195" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::TableBatchReader::TableBatchReader</definition>
        <argsstring>(const Table &amp;table)</argsstring>
        <name>TableBatchReader</name>
        <param>
          <type>const Table &amp;</type>
          <declname>table</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classarrow_1_1_table_batch_reader" kindref="compound">TableBatchReader</ref> for the given table. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="434" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga278674b3b9a78fdbccc3f3d52fc5d470" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::shared_ptr&lt; Schema &gt;</type>
        <definition>std::shared_ptr&lt;Schema&gt; arrow::TableBatchReader::schema</definition>
        <argsstring>() const override</argsstring>
        <name>schema</name>
        <reimplements refid="classarrow_1_1_record_batch_reader_1ad2ded865a6720e61e4685cfd34ed377f">schema</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the shared schema of the record batches in the stream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="436" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga31d001eabe7404ee8e3d7a568eae0e93" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>Status</type>
        <definition>Status arrow::TableBatchReader::ReadNext</definition>
        <argsstring>(std::shared_ptr&lt; RecordBatch &gt; *out) override</argsstring>
        <name>ReadNext</name>
        <reimplements refid="classarrow_1_1_record_batch_reader_1aaffe944df9d8a4c3e6592eb2f8f78f9f">ReadNext</reimplements>
        <param>
          <type>std::shared_ptr&lt; RecordBatch &gt; *</type>
          <declname>batch</declname>
        </param>
        <briefdescription>
<para>Read the next record batch in the stream. </para>        </briefdescription>
        <detaileddescription>
<para>Return null for batch when reaching end of stream</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">batch</parametername>
</parameternamelist>
<parameterdescription>
<para>the next loaded batch, null at end of stream </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="438" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga293c77d9e315f264bc84e770d357b089" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void arrow::TableBatchReader::set_chunksize</definition>
        <argsstring>(int64_t chunksize)</argsstring>
        <name>set_chunksize</name>
        <param>
          <type>int64_t</type>
          <declname>chunksize</declname>
        </param>
        <briefdescription>
<para>Set the desired maximum chunk size of record batches. </para>        </briefdescription>
        <detaileddescription>
<para>The actual chunk size of each record batch may be smaller, depending on actual chunking characteristics of each table column. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="444" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga1f99414177f1507f6efa3471cb650bbb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ConcatenateTablesOptions</type>
        <definition>static ConcatenateTablesOptions arrow::ConcatenateTablesOptions::Defaults</definition>
        <argsstring>()</argsstring>
        <name>Defaults</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="471" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="471" bodyend="471"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga6272e4a6555d62afc43b2845d8616eb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; std::shared_ptr&lt; Table &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;Table&gt; &gt; arrow::ConcatenateTables</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; Table &gt;&gt; &amp;tables, ConcatenateTablesOptions options=ConcatenateTablesOptions::Defaults(), MemoryPool *memory_pool=default_memory_pool())</argsstring>
        <name>ConcatenateTables</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; Table &gt;&gt; &amp;</type>
          <declname>tables</declname>
        </param>
        <param>
          <type>ConcatenateTablesOptions</type>
          <declname>options</declname>
          <defval>ConcatenateTablesOptions::Defaults()</defval>
        </param>
        <param>
          <type>MemoryPool *</type>
          <declname>memory_pool</declname>
          <defval>default_memory_pool()</defval>
        </param>
        <briefdescription>
<para>Construct table from multiple input tables. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="476" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga4b46a73d9d5aba02b66257039342c5a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; std::shared_ptr&lt; Table &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;Table&gt; &gt; arrow::PromoteTableToSchema</definition>
        <argsstring>(const std::shared_ptr&lt; Table &gt; &amp;table, const std::shared_ptr&lt; Schema &gt; &amp;schema, MemoryPool *pool=default_memory_pool())</argsstring>
        <name>PromoteTableToSchema</name>
        <param>
          <type>const std::shared_ptr&lt; Table &gt; &amp;</type>
          <declname>table</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; Schema &gt; &amp;</type>
          <declname>schema</declname>
        </param>
        <param>
          <type>MemoryPool *</type>
          <declname>pool</declname>
          <defval>default_memory_pool()</defval>
        </param>
        <briefdescription>
<para>Promotes a table to conform to the given schema. </para>        </briefdescription>
        <detaileddescription>
<para>If a field in the schema does not have a corresponding column in the table, a column of nulls will be added to the resulting table. If the corresponding column is of type Null, it will be promoted to the type specified by schema, with null values filled. Returns an error:<itemizedlist>
<listitem><para>if the corresponding column&apos;s type is not compatible with the schema.</para></listitem><listitem><para>if there is a column in the table that does not exist in the schema.</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">table</parametername>
</parameternamelist>
<parameterdescription>
<para>the input <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">schema</parametername>
</parameternamelist>
<parameterdescription>
<para>the target schema to promote to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory pool to be used if null-filled arrays need to be created. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="497" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>ConcatenateTables function. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
