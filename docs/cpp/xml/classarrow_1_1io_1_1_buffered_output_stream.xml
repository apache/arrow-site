<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1io_1_1_buffered_output_stream" kind="class" language="C++" prot="public">
    <compoundname>arrow::io::BufferedOutputStream</compoundname>
    <basecompoundref refid="classarrow_1_1io_1_1_output_stream" prot="public" virt="non-virtual">arrow::io::OutputStream</basecompoundref>
    <includes refid="buffered_8h" local="no">arrow/io/buffered.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classarrow_1_1io_1_1_buffered_output_stream_1ad5bfea5e4f5a54d2dd56a6877110b478" prot="private" static="no" mutable="no">
        <type>class <ref refid="arrow_2util_2visibility_8h_1a843cb8dccea68a22a2b9995605cb5a74" kindref="member">ARROW_NO_EXPORT</ref></type>
        <definition>class ARROW_NO_EXPORT arrow::io::BufferedOutputStream::Impl</definition>
        <argsstring></argsstring>
        <name>Impl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/buffered.h" line="86" column="1" bodyfile="/arrow/cpp/src/arrow/io/buffered.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1io_1_1_buffered_output_stream_1aad6cda04d3f9421e415c53a78bf31fe3" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; Impl &gt;</type>
        <definition>std::unique_ptr&lt;Impl&gt; arrow::io::BufferedOutputStream::impl_</definition>
        <argsstring></argsstring>
        <name>impl_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/buffered.h" line="89" column="1" bodyfile="/arrow/cpp/src/arrow/io/buffered.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1io_1_1_buffered_output_stream_1a6aa2f83812eb020e1f7853edf50b1209" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::io::BufferedOutputStream::~BufferedOutputStream</definition>
        <argsstring>() override</argsstring>
        <name>~BufferedOutputStream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/buffered.h" line="40" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_buffered_output_stream_1ae18b5e1a2cc3569b6e24fa6c3b140a3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::BufferedOutputStream::SetBufferSize</definition>
        <argsstring>(int64_t new_buffer_size)</argsstring>
        <name>SetBufferSize</name>
        <param>
          <type>int64_t</type>
          <declname>new_buffer_size</declname>
        </param>
        <briefdescription>
<para>Resize internal buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">new_buffer_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the new buffer size </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/buffered.h" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_buffered_output_stream_1a5de98a16d40e25305b71a4716a1132b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t arrow::io::BufferedOutputStream::buffer_size</definition>
        <argsstring>() const</argsstring>
        <name>buffer_size</name>
        <briefdescription>
<para>Return the current size of the internal buffer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/buffered.h" line="56" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_buffered_output_stream_1acfb508c7a0b77382e4fbaa86b73f5e56" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t arrow::io::BufferedOutputStream::bytes_buffered</definition>
        <argsstring>() const</argsstring>
        <name>bytes_buffered</name>
        <briefdescription>
<para>Return the number of remaining bytes that have not been flushed to the raw <ref refid="classarrow_1_1io_1_1_output_stream" kindref="compound">OutputStream</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/buffered.h" line="60" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_buffered_output_stream_1a9112ecd103ac47cc8d5513dc43d9c1ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_output_stream" kindref="compound">OutputStream</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;OutputStream&gt; &gt; arrow::io::BufferedOutputStream::Detach</definition>
        <argsstring>()</argsstring>
        <name>Detach</name>
        <briefdescription>
<para>Flush any buffered writes and release the raw <ref refid="classarrow_1_1io_1_1_output_stream" kindref="compound">OutputStream</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Further operations on this object are invalid <simplesect kind="return"><para>the underlying <ref refid="classarrow_1_1io_1_1_output_stream" kindref="compound">OutputStream</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/buffered.h" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_buffered_output_stream_1aa0421fd0d9031a8491cb00d67e90a0b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::BufferedOutputStream::Close</definition>
        <argsstring>() override</argsstring>
        <name>Close</name>
        <reimplements refid="classarrow_1_1io_1_1_file_interface_1ae0f46d227a430af180576715e7aa0b78">Close</reimplements>
        <briefdescription>
<para>Close the buffered output stream. </para>        </briefdescription>
        <detaileddescription>
<para>This implicitly closes the underlying raw output stream. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/buffered.h" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_buffered_output_stream_1a915a615b0f366addbec2daa6415e24b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::BufferedOutputStream::Abort</definition>
        <argsstring>() override</argsstring>
        <name>Abort</name>
        <reimplements refid="classarrow_1_1io_1_1_file_interface_1a0fa59fe92d3c99c9d9701210626aac60">Abort</reimplements>
        <briefdescription>
<para>Close the stream abruptly. </para>        </briefdescription>
        <detaileddescription>
<para>This method does not guarantee that any pending data is flushed. It merely releases any underlying resource used by the stream for its operation.</para><para>After <ref refid="classarrow_1_1io_1_1_buffered_output_stream_1a915a615b0f366addbec2daa6415e24b6" kindref="member">Abort()</ref> is called, <ref refid="classarrow_1_1io_1_1_buffered_output_stream_1ac07e74957c892a21d94819f069424e2d" kindref="member">closed()</ref> returns true and the stream is not available for further operations. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/buffered.h" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_buffered_output_stream_1ac07e74957c892a21d94819f069424e2d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool arrow::io::BufferedOutputStream::closed</definition>
        <argsstring>() const override</argsstring>
        <name>closed</name>
        <reimplements refid="classarrow_1_1io_1_1_file_interface_1a5ba1d2c3cec2e05e7b0018624f19c10b">closed</reimplements>
        <briefdescription>
<para>Return whether the stream is closed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/buffered.h" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_buffered_output_stream_1ade612281d5c3d1fbe74db0b24017c6b1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; int64_t &gt;</type>
        <definition>Result&lt;int64_t&gt; arrow::io::BufferedOutputStream::Tell</definition>
        <argsstring>() const override</argsstring>
        <name>Tell</name>
        <reimplements refid="classarrow_1_1io_1_1_file_interface_1ac6c6709147a46cd7f45d0779c1819ce6">Tell</reimplements>
        <briefdescription>
<para>Return the position in this stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/buffered.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_buffered_output_stream_1a5668ed55058204e0235f58e036621a45" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::BufferedOutputStream::Write</definition>
        <argsstring>(const void *data, int64_t nbytes) override</argsstring>
        <name>Write</name>
        <reimplements refid="classarrow_1_1io_1_1_writable_1a51d9feed73c33f095ca4b9f35dede84d">Write</reimplements>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
<para>Write the given data to the stream. </para>        </briefdescription>
        <detaileddescription>
<para>This method always processes the bytes in full. Depending on the semantics of the stream, the data may be written out immediately, held in a buffer, or written asynchronously. In the case where the stream buffers the data, it will be copied. To avoid potentially large copies, use the Write variant that takes an owned <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/buffered.h" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_buffered_output_stream_1aabc285ebb13d48a41e21efbaa1a98487" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::BufferedOutputStream::Write</definition>
        <argsstring>(const std::shared_ptr&lt; Buffer &gt; &amp;data) override</argsstring>
        <name>Write</name>
        <reimplements refid="classarrow_1_1io_1_1_writable_1a048bbc5e85b1d739bc49c57553e85069">Write</reimplements>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Write the given data to the stream. </para>        </briefdescription>
        <detaileddescription>
<para>Since the <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> owns its memory, this method can avoid a copy if buffering is required. See <ref refid="classarrow_1_1io_1_1_buffered_output_stream_1a5668ed55058204e0235f58e036621a45" kindref="member">Write(const void*, int64_t)</ref> for details. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/buffered.h" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_buffered_output_stream_1a31c9b6cdaad2df77af04bf7214e4b7b3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::BufferedOutputStream::Flush</definition>
        <argsstring>() override</argsstring>
        <name>Flush</name>
        <reimplements refid="classarrow_1_1io_1_1_writable_1a06e513a551f68603013c1586ba8b939f">Flush</reimplements>
        <briefdescription>
<para>Flush buffered bytes, if any. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/buffered.h" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_buffered_output_stream_1a927549cfa3852a6e8089a4053b414770" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_output_stream" kindref="compound">OutputStream</ref> &gt;</type>
        <definition>std::shared_ptr&lt;OutputStream&gt; arrow::io::BufferedOutputStream::raw</definition>
        <argsstring>() const</argsstring>
        <name>raw</name>
        <briefdescription>
<para>Return the underlying raw output stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/buffered.h" line="83" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1io_1_1_buffered_output_stream_1a3518c650f23bc2fe7ed7c1f54c2c5800" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_buffered_output_stream" kindref="compound">BufferedOutputStream</ref> &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;BufferedOutputStream&gt; &gt; arrow::io::BufferedOutputStream::Create</definition>
        <argsstring>(int64_t buffer_size, MemoryPool *pool, std::shared_ptr&lt; OutputStream &gt; raw)</argsstring>
        <name>Create</name>
        <param>
          <type>int64_t</type>
          <declname>buffer_size</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_output_stream" kindref="compound">OutputStream</ref> &gt;</type>
          <declname>raw</declname>
        </param>
        <briefdescription>
<para>Create a buffered output stream wrapping the given output stream. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">buffer_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the temporary write buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pool</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> to use for allocations </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">raw</parametername>
</parameternamelist>
<parameterdescription>
<para>another <ref refid="classarrow_1_1io_1_1_output_stream" kindref="compound">OutputStream</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the created <ref refid="classarrow_1_1io_1_1_buffered_output_stream" kindref="compound">BufferedOutputStream</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/buffered.h" line="47" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classarrow_1_1io_1_1_buffered_output_stream_1a3bd42b8ea45a13e1cd8d979291858416" prot="private" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::io::BufferedOutputStream::BufferedOutputStream</definition>
        <argsstring>(std::shared_ptr&lt; OutputStream &gt; raw, MemoryPool *pool)</argsstring>
        <name>BufferedOutputStream</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_output_stream" kindref="compound">OutputStream</ref> &gt;</type>
          <declname>raw</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/buffered.h" line="86" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="468">
        <label>arrow::io::OutputStream</label>
        <link refid="classarrow_1_1io_1_1_output_stream"/>
        <childnode refid="469" relation="public-inheritance">
        </childnode>
        <childnode refid="470" relation="public-inheritance">
        </childnode>
      </node>
      <node id="470">
        <label>arrow::io::Writable</label>
        <link refid="classarrow_1_1io_1_1_writable"/>
      </node>
      <node id="469">
        <label>arrow::io::FileInterface</label>
        <link refid="classarrow_1_1io_1_1_file_interface"/>
      </node>
      <node id="467">
        <label>arrow::io::BufferedOutputStream</label>
        <link refid="classarrow_1_1io_1_1_buffered_output_stream"/>
        <childnode refid="468" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="472">
        <label>arrow::io::OutputStream</label>
        <link refid="classarrow_1_1io_1_1_output_stream"/>
        <childnode refid="473" relation="public-inheritance">
        </childnode>
        <childnode refid="474" relation="public-inheritance">
        </childnode>
      </node>
      <node id="474">
        <label>arrow::io::Writable</label>
        <link refid="classarrow_1_1io_1_1_writable"/>
      </node>
      <node id="473">
        <label>arrow::io::FileInterface</label>
        <link refid="classarrow_1_1io_1_1_file_interface"/>
      </node>
      <node id="471">
        <label>arrow::io::BufferedOutputStream</label>
        <link refid="classarrow_1_1io_1_1_buffered_output_stream"/>
        <childnode refid="472" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/io/buffered.h" line="38" column="1" bodyfile="/arrow/cpp/src/arrow/io/buffered.h" bodystart="38" bodyend="90"/>
    <listofallmembers>
      <member refid="classarrow_1_1io_1_1_buffered_output_stream_1a915a615b0f366addbec2daa6415e24b6" prot="public" virt="virtual"><scope>arrow::io::BufferedOutputStream</scope><name>Abort</name></member>
      <member refid="classarrow_1_1io_1_1_buffered_output_stream_1a5de98a16d40e25305b71a4716a1132b2" prot="public" virt="non-virtual"><scope>arrow::io::BufferedOutputStream</scope><name>buffer_size</name></member>
      <member refid="classarrow_1_1io_1_1_buffered_output_stream_1a3bd42b8ea45a13e1cd8d979291858416" prot="private" virt="non-virtual"><scope>arrow::io::BufferedOutputStream</scope><name>BufferedOutputStream</name></member>
      <member refid="classarrow_1_1io_1_1_buffered_output_stream_1acfb508c7a0b77382e4fbaa86b73f5e56" prot="public" virt="non-virtual"><scope>arrow::io::BufferedOutputStream</scope><name>bytes_buffered</name></member>
      <member refid="classarrow_1_1io_1_1_buffered_output_stream_1aa0421fd0d9031a8491cb00d67e90a0b1" prot="public" virt="virtual"><scope>arrow::io::BufferedOutputStream</scope><name>Close</name></member>
      <member refid="classarrow_1_1io_1_1_buffered_output_stream_1ac07e74957c892a21d94819f069424e2d" prot="public" virt="virtual"><scope>arrow::io::BufferedOutputStream</scope><name>closed</name></member>
      <member refid="classarrow_1_1io_1_1_buffered_output_stream_1a3518c650f23bc2fe7ed7c1f54c2c5800" prot="public" virt="non-virtual"><scope>arrow::io::BufferedOutputStream</scope><name>Create</name></member>
      <member refid="classarrow_1_1io_1_1_buffered_output_stream_1a9112ecd103ac47cc8d5513dc43d9c1ce" prot="public" virt="non-virtual"><scope>arrow::io::BufferedOutputStream</scope><name>Detach</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1afea9126bb21e3720212a826aa78b5534" prot="protected" virt="non-virtual"><scope>arrow::io::BufferedOutputStream</scope><name>FileInterface</name></member>
      <member refid="classarrow_1_1io_1_1_buffered_output_stream_1a31c9b6cdaad2df77af04bf7214e4b7b3" prot="public" virt="virtual"><scope>arrow::io::BufferedOutputStream</scope><name>Flush</name></member>
      <member refid="classarrow_1_1io_1_1_buffered_output_stream_1ad5bfea5e4f5a54d2dd56a6877110b478" prot="private" virt="non-virtual"><scope>arrow::io::BufferedOutputStream</scope><name>Impl</name></member>
      <member refid="classarrow_1_1io_1_1_buffered_output_stream_1aad6cda04d3f9421e415c53a78bf31fe3" prot="private" virt="non-virtual"><scope>arrow::io::BufferedOutputStream</scope><name>impl_</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1a75a3739361570bb121b9adb04d5d8686" prot="public" virt="non-virtual"><scope>arrow::io::BufferedOutputStream</scope><name>mode</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1a504d0410eb6066316365a4549d000ee0" prot="protected" virt="non-virtual"><scope>arrow::io::BufferedOutputStream</scope><name>mode_</name></member>
      <member refid="classarrow_1_1io_1_1_output_stream_1a5b1e0adea7ef92368ddc07027995aca1" prot="protected" virt="non-virtual"><scope>arrow::io::BufferedOutputStream</scope><name>OutputStream</name></member>
      <member refid="classarrow_1_1io_1_1_buffered_output_stream_1a927549cfa3852a6e8089a4053b414770" prot="public" virt="non-virtual"><scope>arrow::io::BufferedOutputStream</scope><name>raw</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1af3dd01a780076e39a34770beb513f71f" prot="protected" virt="non-virtual"><scope>arrow::io::BufferedOutputStream</scope><name>set_mode</name></member>
      <member refid="classarrow_1_1io_1_1_buffered_output_stream_1ae18b5e1a2cc3569b6e24fa6c3b140a3d" prot="public" virt="non-virtual"><scope>arrow::io::BufferedOutputStream</scope><name>SetBufferSize</name></member>
      <member refid="classarrow_1_1io_1_1_buffered_output_stream_1ade612281d5c3d1fbe74db0b24017c6b1" prot="public" virt="virtual"><scope>arrow::io::BufferedOutputStream</scope><name>Tell</name></member>
      <member refid="classarrow_1_1io_1_1_buffered_output_stream_1a5668ed55058204e0235f58e036621a45" prot="public" virt="virtual"><scope>arrow::io::BufferedOutputStream</scope><name>Write</name></member>
      <member refid="classarrow_1_1io_1_1_buffered_output_stream_1aabc285ebb13d48a41e21efbaa1a98487" prot="public" virt="virtual"><scope>arrow::io::BufferedOutputStream</scope><name>Write</name></member>
      <member refid="classarrow_1_1io_1_1_writable_1a00ee30dff05bda7526c91e594a9607e7" prot="public" virt="non-virtual" ambiguityscope="arrow::io::OutputStream::"><scope>arrow::io::BufferedOutputStream</scope><name>Write</name></member>
      <member refid="classarrow_1_1io_1_1_buffered_output_stream_1a6aa2f83812eb020e1f7853edf50b1209" prot="public" virt="non-virtual"><scope>arrow::io::BufferedOutputStream</scope><name>~BufferedOutputStream</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1aa42dcdfad00634f01192b39f1d9b4929" prot="public" virt="pure-virtual"><scope>arrow::io::BufferedOutputStream</scope><name>~FileInterface</name></member>
      <member refid="classarrow_1_1io_1_1_writable_1acc17343118544c62f14d62f538fa8592" prot="public" virt="virtual"><scope>arrow::io::BufferedOutputStream</scope><name>~Writable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
