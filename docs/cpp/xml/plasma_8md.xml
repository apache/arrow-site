<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="plasma_8md" kind="file" language="Markdown">
    <compoundname>plasma.md</compoundname>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline><highlight class="normal">&lt;!---</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>Licensed<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the<sp/>&quot;License&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance<sp/>with<sp/>the<sp/>License.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,<sp/>software</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>limitations<sp/>under<sp/>the<sp/>License.<sp/>See<sp/>accompanying<sp/>LICENSE<sp/>file.</highlight></codeline>
<codeline><highlight class="normal">--&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Using<sp/>the<sp/>Plasma<sp/>In-Memory<sp/>Object<sp/>Store<sp/>from<sp/>C++</highlight></codeline>
<codeline><highlight class="normal">================================================</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Apache<sp/>Arrow<sp/>offers<sp/>the<sp/>ability<sp/>to<sp/>share<sp/>your<sp/>data<sp/>structures<sp/>among<sp/>multiple</highlight></codeline>
<codeline><highlight class="normal">processes<sp/>simultaneously<sp/>through<sp/>Plasma,<sp/>an<sp/>in-memory<sp/>object<sp/>store.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Note<sp/>that<sp/>**the<sp/>Plasma<sp/>API<sp/>is<sp/>not<sp/>stable**.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Plasma<sp/>clients<sp/>are<sp/>processes<sp/>that<sp/>run<sp/>on<sp/>the<sp/>same<sp/>machine<sp/>as<sp/>the<sp/>object<sp/>store.</highlight></codeline>
<codeline><highlight class="normal">They<sp/>communicate<sp/>with<sp/>the<sp/>object<sp/>store<sp/>over<sp/>Unix<sp/>domain<sp/>sockets,<sp/>and<sp/>they<sp/>read</highlight></codeline>
<codeline><highlight class="normal">and<sp/>write<sp/>data<sp/>in<sp/>the<sp/>object<sp/>store<sp/>through<sp/>shared<sp/>memory.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Plasma<sp/>objects<sp/>are<sp/>immutable<sp/>once<sp/>they<sp/>have<sp/>been<sp/>created.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>following<sp/>goes<sp/>over<sp/>the<sp/>basics<sp/>so<sp/>you<sp/>can<sp/>begin<sp/>using<sp/>Plasma<sp/>in<sp/>your<sp/>big</highlight></codeline>
<codeline><highlight class="normal">data<sp/>applications.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Starting<sp/>the<sp/>Plasma<sp/>store</highlight></codeline>
<codeline><highlight class="normal">-------------------------</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>start<sp/>running<sp/>the<sp/>Plasma<sp/>object<sp/>store<sp/>so<sp/>that<sp/>clients<sp/>may</highlight></codeline>
<codeline><highlight class="normal">connect<sp/>and<sp/>access<sp/>the<sp/>data,<sp/>run<sp/>the<sp/>following<sp/>command:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">plasma_store_server<sp/>-m<sp/>1000000000<sp/>-s<sp/>/tmp/plasma</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>`-m`<sp/>flag<sp/>specifies<sp/>the<sp/>size<sp/>of<sp/>the<sp/>object<sp/>store<sp/>in<sp/>bytes.<sp/>The<sp/>`-s`<sp/>flag</highlight></codeline>
<codeline><highlight class="normal">specifies<sp/>the<sp/>path<sp/>of<sp/>the<sp/>Unix<sp/>domain<sp/>socket<sp/>that<sp/>the<sp/>store<sp/>will<sp/>listen<sp/>at.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Therefore,<sp/>the<sp/>above<sp/>command<sp/>initializes<sp/>a<sp/>Plasma<sp/>store<sp/>up<sp/>to<sp/>1<sp/>GB<sp/>of<sp/>memory</highlight></codeline>
<codeline><highlight class="normal">and<sp/>sets<sp/>the<sp/>socket<sp/>to<sp/>`/tmp/plasma.`</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>Plasma<sp/>store<sp/>will<sp/>remain<sp/>available<sp/>as<sp/>long<sp/>as<sp/>the<sp/>`plasma_store_server`<sp/>process<sp/>is</highlight></codeline>
<codeline><highlight class="normal">running<sp/>in<sp/>a<sp/>terminal<sp/>window.<sp/>Messages,<sp/>such<sp/>as<sp/>alerts<sp/>for<sp/>disconnecting</highlight></codeline>
<codeline><highlight class="normal">clients,<sp/>may<sp/>occasionally<sp/>be<sp/>output.<sp/>To<sp/>stop<sp/>running<sp/>the<sp/>Plasma<sp/>store,<sp/>you</highlight></codeline>
<codeline><highlight class="normal">can<sp/>press<sp/>`Ctrl-C`<sp/>in<sp/>the<sp/>terminal<sp/>window.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Alternatively,<sp/>you<sp/>can<sp/>run<sp/>the<sp/>Plasma<sp/>store<sp/>in<sp/>the<sp/>background<sp/>and<sp/>ignore<sp/>all</highlight></codeline>
<codeline><highlight class="normal">message<sp/>output<sp/>with<sp/>the<sp/>following<sp/>terminal<sp/>command:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">plasma_store_server<sp/>-m<sp/>1000000000<sp/>-s<sp/>/tmp/plasma<sp/>1&gt;<sp/>/dev/null<sp/>2&gt;<sp/>/dev/null<sp/>&amp;</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>Plasma<sp/>store<sp/>will<sp/>instead<sp/>run<sp/>silently<sp/>in<sp/>the<sp/>background.<sp/>To<sp/>stop<sp/>running</highlight></codeline>
<codeline><highlight class="normal">the<sp/>Plasma<sp/>store<sp/>in<sp/>this<sp/>case,<sp/>issue<sp/>the<sp/>command<sp/>below:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">killall<sp/>plasma_store_server</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Creating<sp/>a<sp/>Plasma<sp/>client</highlight></codeline>
<codeline><highlight class="normal">------------------------</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Now<sp/>that<sp/>the<sp/>Plasma<sp/>object<sp/>store<sp/>is<sp/>up<sp/>and<sp/>running,<sp/>it<sp/>is<sp/>time<sp/>to<sp/>make<sp/>a<sp/>client</highlight></codeline>
<codeline><highlight class="normal">process<sp/>connect<sp/>to<sp/>it.<sp/>To<sp/>use<sp/>the<sp/>Plasma<sp/>object<sp/>store<sp/>as<sp/>a<sp/>client,<sp/>your</highlight></codeline>
<codeline><highlight class="normal">application<sp/>should<sp/>initialize<sp/>a<sp/>`plasma::PlasmaClient`<sp/>object<sp/>and<sp/>tell<sp/>it<sp/>to</highlight></codeline>
<codeline><highlight class="normal">connect<sp/>to<sp/>the<sp/>socket<sp/>specified<sp/>when<sp/>starting<sp/>up<sp/>the<sp/>Plasma<sp/>object<sp/>store.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;plasma/client.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>plasma;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int<sp/>main(int<sp/>argc,<sp/>char**<sp/>argv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Start<sp/>up<sp/>and<sp/>connect<sp/>a<sp/>Plasma<sp/>client.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>PlasmaClient<sp/>client;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ARROW_CHECK_OK(client.Connect(&quot;/tmp/plasma&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Disconnect<sp/>the<sp/>Plasma<sp/>client.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ARROW_CHECK_OK(client.Disconnect());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Save<sp/>this<sp/>program<sp/>in<sp/>a<sp/>file<sp/>`test.cc`<sp/>and<sp/>compile<sp/>it<sp/>with</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">g++<sp/>test.cc<sp/>`pkg-config<sp/>--cflags<sp/>--libs<sp/>plasma`<sp/>--std=c++11</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Note<sp/>that<sp/>multiple<sp/>clients<sp/>can<sp/>be<sp/>created<sp/>within<sp/>the<sp/>same<sp/>process.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Note<sp/>that<sp/>a<sp/>`PlasmaClient`<sp/>object<sp/>is<sp/>**not<sp/>thread<sp/>safe**.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>the<sp/>Plasma<sp/>store<sp/>is<sp/>still<sp/>running,<sp/>you<sp/>can<sp/>now<sp/>execute<sp/>the<sp/>`a.out`<sp/>executable</highlight></codeline>
<codeline><highlight class="normal">and<sp/>the<sp/>store<sp/>will<sp/>print<sp/>something<sp/>like</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">Disconnecting<sp/>client<sp/>on<sp/>fd<sp/>5</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">which<sp/>shows<sp/>that<sp/>the<sp/>client<sp/>was<sp/>successfully<sp/>disconnected.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Object<sp/>IDs</highlight></codeline>
<codeline><highlight class="normal">----------</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>Plasma<sp/>object<sp/>store<sp/>uses<sp/>twenty-byte<sp/>identifiers<sp/>for<sp/>accessing<sp/>objects</highlight></codeline>
<codeline><highlight class="normal">stored<sp/>in<sp/>shared<sp/>memory.<sp/>Each<sp/>object<sp/>in<sp/>the<sp/>Plasma<sp/>store<sp/>should<sp/>be<sp/>associated</highlight></codeline>
<codeline><highlight class="normal">with<sp/>a<sp/>unique<sp/>ID.<sp/>The<sp/>Object<sp/>ID<sp/>is<sp/>then<sp/>a<sp/>key<sp/>that<sp/>can<sp/>be<sp/>used<sp/>by<sp/>**any**<sp/>client</highlight></codeline>
<codeline><highlight class="normal">to<sp/>fetch<sp/>that<sp/>object<sp/>from<sp/>the<sp/>Plasma<sp/>store.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Random<sp/>generation<sp/>of<sp/>Object<sp/>IDs<sp/>is<sp/>often<sp/>good<sp/>enough<sp/>to<sp/>ensure<sp/>unique<sp/>IDs.</highlight></codeline>
<codeline><highlight class="normal">For<sp/>test<sp/>purposes,<sp/>you<sp/>can<sp/>use<sp/>the<sp/>function<sp/>`random_object_id`<sp/>from<sp/>the<sp/>header</highlight></codeline>
<codeline><highlight class="normal">`plasma/test-util.h`<sp/>to<sp/>generate<sp/>random<sp/>Object<sp/>IDs,<sp/>which<sp/>uses<sp/>a<sp/>global<sp/>random</highlight></codeline>
<codeline><highlight class="normal">number<sp/>generator.<sp/>In<sp/>your<sp/>own<sp/>applications,<sp/>we<sp/>recommend<sp/>to<sp/>generate<sp/>a<sp/>string<sp/>of</highlight></codeline>
<codeline><highlight class="normal">`ObjectID::size()`<sp/>many<sp/>random<sp/>bytes<sp/>using<sp/>your<sp/>own<sp/>random<sp/>number<sp/>generator</highlight></codeline>
<codeline><highlight class="normal">and<sp/>pass<sp/>them<sp/>to<sp/>`ObjectID::from_bytes`<sp/>to<sp/>generate<sp/>the<sp/>ObjectID.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;plasma/test-util.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Randomly<sp/>generate<sp/>an<sp/>Object<sp/>ID.</highlight></codeline>
<codeline><highlight class="normal">ObjectID<sp/>object_id<sp/>=<sp/>random_object_id();</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Now,<sp/>any<sp/>connected<sp/>client<sp/>that<sp/>knows<sp/>the<sp/>object&apos;s<sp/>Object<sp/>ID<sp/>can<sp/>access<sp/>the</highlight></codeline>
<codeline><highlight class="normal">same<sp/>object<sp/>from<sp/>the<sp/>Plasma<sp/>object<sp/>store.<sp/>For<sp/>easy<sp/>transportation<sp/>of<sp/>Object<sp/>IDs,</highlight></codeline>
<codeline><highlight class="normal">you<sp/>can<sp/>convert/serialize<sp/>an<sp/>Object<sp/>ID<sp/>into<sp/>a<sp/>binary<sp/>string<sp/>and<sp/>back<sp/>as</highlight></codeline>
<codeline><highlight class="normal">follows:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">//<sp/>From<sp/>ObjectID<sp/>to<sp/>binary<sp/>string</highlight></codeline>
<codeline><highlight class="normal">std:string<sp/>id_string<sp/>=<sp/>object_id.binary();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>From<sp/>binary<sp/>string<sp/>to<sp/>ObjectID</highlight></codeline>
<codeline><highlight class="normal">ObjectID<sp/>id_object<sp/>=<sp/>ObjectID::from_binary(&amp;id_string);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>also<sp/>get<sp/>a<sp/>human<sp/>readable<sp/>representation<sp/>of<sp/>ObjectIDs<sp/>in<sp/>the<sp/>same</highlight></codeline>
<codeline><highlight class="normal">format<sp/>that<sp/>git<sp/>uses<sp/>for<sp/>commit<sp/>hashes<sp/>by<sp/>running<sp/>`ObjectID::hex`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Here<sp/>is<sp/>a<sp/>test<sp/>program<sp/>you<sp/>can<sp/>run:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;iostream&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;string&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;plasma/client.h&gt;</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;plasma/test-util.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>plasma;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int<sp/>main(int<sp/>argc,<sp/>char**<sp/>argv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ObjectID<sp/>object_id1<sp/>=<sp/>random_object_id();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;object_id1<sp/>is<sp/>&quot;<sp/>&lt;&lt;<sp/>object_id1.hex()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::string<sp/>id_string<sp/>=<sp/>object_id1.binary();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ObjectID<sp/>object_id2<sp/>=<sp/>ObjectID::from_binary(id_string);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;object_id2<sp/>is<sp/>&quot;<sp/>&lt;&lt;<sp/>object_id2.hex()<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Creating<sp/>an<sp/>Object</highlight></codeline>
<codeline><highlight class="normal">------------------</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Now<sp/>that<sp/>you<sp/>learned<sp/>about<sp/>Object<sp/>IDs<sp/>that<sp/>are<sp/>used<sp/>to<sp/>refer<sp/>to<sp/>objects,</highlight></codeline>
<codeline><highlight class="normal">let&apos;s<sp/>look<sp/>at<sp/>how<sp/>objects<sp/>can<sp/>be<sp/>stored<sp/>in<sp/>Plasma.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Storing<sp/>objects<sp/>is<sp/>a<sp/>two-stage<sp/>process.<sp/>First<sp/>a<sp/>buffer<sp/>is<sp/>allocated<sp/>with<sp/>a<sp/>call</highlight></codeline>
<codeline><highlight class="normal">to<sp/>`Create`.<sp/>Then<sp/>it<sp/>can<sp/>be<sp/>constructed<sp/>in<sp/>place<sp/>by<sp/>the<sp/>client.<sp/>Then<sp/>it<sp/>is<sp/>made</highlight></codeline>
<codeline><highlight class="normal">immutable<sp/>and<sp/>shared<sp/>with<sp/>other<sp/>clients<sp/>via<sp/>a<sp/>call<sp/>to<sp/>`Seal`.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>`Create`<sp/>call<sp/>blocks<sp/>while<sp/>the<sp/>Plasma<sp/>store<sp/>allocates<sp/>a<sp/>buffer<sp/>of<sp/>the</highlight></codeline>
<codeline><highlight class="normal">appropriate<sp/>size.<sp/>The<sp/>client<sp/>will<sp/>then<sp/>map<sp/>the<sp/>buffer<sp/>into<sp/>its<sp/>own<sp/>address</highlight></codeline>
<codeline><highlight class="normal">space.<sp/>At<sp/>this<sp/>point<sp/>the<sp/>object<sp/>can<sp/>be<sp/>constructed<sp/>in<sp/>place<sp/>using<sp/>a<sp/>pointer<sp/>that</highlight></codeline>
<codeline><highlight class="normal">was<sp/>written<sp/>by<sp/>the<sp/>`Create`<sp/>command.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">int64_t<sp/>data_size<sp/>=<sp/>100;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>The<sp/>address<sp/>of<sp/>the<sp/>buffer<sp/>allocated<sp/>by<sp/>the<sp/>Plasma<sp/>store<sp/>will<sp/>be<sp/>written<sp/>at</highlight></codeline>
<codeline><highlight class="normal">//<sp/>this<sp/>address.</highlight></codeline>
<codeline><highlight class="normal">std::shared_ptr&lt;Buffer&gt;<sp/>data;</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Create<sp/>a<sp/>Plasma<sp/>object<sp/>by<sp/>specifying<sp/>its<sp/>ID<sp/>and<sp/>size.</highlight></codeline>
<codeline><highlight class="normal">ARROW_CHECK_OK(client.Create(object_id,<sp/>data_size,<sp/>NULL,<sp/>0,<sp/>&amp;data));</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">You<sp/>can<sp/>also<sp/>specify<sp/>metadata<sp/>for<sp/>the<sp/>object;<sp/>the<sp/>third<sp/>argument<sp/>is<sp/>the</highlight></codeline>
<codeline><highlight class="normal">metadata<sp/>(as<sp/>raw<sp/>bytes)<sp/>and<sp/>the<sp/>fourth<sp/>argument<sp/>is<sp/>the<sp/>size<sp/>of<sp/>the<sp/>metadata.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Create<sp/>a<sp/>Plasma<sp/>object<sp/>with<sp/>metadata.</highlight></codeline>
<codeline><highlight class="normal">int64_t<sp/>data_size<sp/>=<sp/>100;</highlight></codeline>
<codeline><highlight class="normal">std::string<sp/>metadata<sp/>=<sp/>&quot;{&apos;author&apos;:<sp/>&apos;john&apos;}&quot;;</highlight></codeline>
<codeline><highlight class="normal">std::shared_ptr&lt;Buffer&gt;<sp/>data;</highlight></codeline>
<codeline><highlight class="normal">client.Create(object_id,<sp/>data_size,<sp/>(uint8_t*)<sp/>metadata.data(),<sp/>metadata.size(),<sp/>&amp;data);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Now<sp/>that<sp/>we&apos;ve<sp/>obtained<sp/>a<sp/>pointer<sp/>to<sp/>our<sp/>object&apos;s<sp/>data,<sp/>we<sp/>can</highlight></codeline>
<codeline><highlight class="normal">write<sp/>our<sp/>data<sp/>to<sp/>it:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Write<sp/>some<sp/>data<sp/>for<sp/>the<sp/>Plasma<sp/>object.</highlight></codeline>
<codeline><highlight class="normal">for<sp/>(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>data_size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>data[i]<sp/>=<sp/>static_cast&lt;uint8_t&gt;(i<sp/>%<sp/>4);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">When<sp/>the<sp/>client<sp/>is<sp/>done,<sp/>the<sp/>client<sp/>**seals**<sp/>the<sp/>buffer,<sp/>making<sp/>the<sp/>object</highlight></codeline>
<codeline><highlight class="normal">immutable,<sp/>and<sp/>making<sp/>it<sp/>available<sp/>to<sp/>other<sp/>Plasma<sp/>clients:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Seal<sp/>the<sp/>object.<sp/>This<sp/>makes<sp/>it<sp/>available<sp/>for<sp/>all<sp/>clients.</highlight></codeline>
<codeline><highlight class="normal">client.Seal(object_id);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Here<sp/>is<sp/>an<sp/>example<sp/>that<sp/>combines<sp/>all<sp/>these<sp/>features:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;plasma/client.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>plasma;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int<sp/>main(int<sp/>argc,<sp/>char**<sp/>argv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Start<sp/>up<sp/>and<sp/>connect<sp/>a<sp/>Plasma<sp/>client.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>PlasmaClient<sp/>client;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ARROW_CHECK_OK(client.Connect(&quot;/tmp/plasma&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Create<sp/>an<sp/>object<sp/>with<sp/>a<sp/>fixed<sp/>ObjectID.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ObjectID<sp/>object_id<sp/>=<sp/>ObjectID::from_binary(&quot;00000000000000000000&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int64_t<sp/>data_size<sp/>=<sp/>1000;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Buffer&gt;<sp/>data;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::string<sp/>metadata<sp/>=<sp/>&quot;{&apos;author&apos;:<sp/>&apos;john&apos;}&quot;;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ARROW_CHECK_OK(client.Create(object_id,<sp/>data_size,<sp/>(uint8_t*)<sp/>metadata.data(),<sp/>metadata.size(),<sp/>&amp;data));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Write<sp/>some<sp/>data<sp/>into<sp/>the<sp/>object.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>auto<sp/>d<sp/>=<sp/>data-&gt;mutable_data();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>data_size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>d[i]<sp/>=<sp/>static_cast&lt;uint8_t&gt;(i<sp/>%<sp/>4);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Seal<sp/>the<sp/>object.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ARROW_CHECK_OK(client.Seal(object_id));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Disconnect<sp/>the<sp/>client.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ARROW_CHECK_OK(client.Disconnect());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">This<sp/>example<sp/>can<sp/>be<sp/>compiled<sp/>with</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">g++<sp/>create.cc<sp/>`pkg-config<sp/>--cflags<sp/>--libs<sp/>plasma`<sp/>--std=c++11<sp/>-o<sp/>create</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">To<sp/>verify<sp/>that<sp/>an<sp/>object<sp/>exists<sp/>in<sp/>the<sp/>Plasma<sp/>object<sp/>store,<sp/>you<sp/>can</highlight></codeline>
<codeline><highlight class="normal">call<sp/>`PlasmaClient::Contains()`<sp/>to<sp/>check<sp/>if<sp/>an<sp/>object<sp/>has</highlight></codeline>
<codeline><highlight class="normal">been<sp/>created<sp/>and<sp/>sealed<sp/>for<sp/>a<sp/>given<sp/>Object<sp/>ID.<sp/>Note<sp/>that<sp/>this<sp/>function</highlight></codeline>
<codeline><highlight class="normal">will<sp/>still<sp/>return<sp/>False<sp/>if<sp/>the<sp/>object<sp/>has<sp/>been<sp/>created,<sp/>but<sp/>not<sp/>yet</highlight></codeline>
<codeline><highlight class="normal">sealed:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Check<sp/>if<sp/>an<sp/>object<sp/>has<sp/>been<sp/>created<sp/>and<sp/>sealed.</highlight></codeline>
<codeline><highlight class="normal">bool<sp/>has_object;</highlight></codeline>
<codeline><highlight class="normal">client.Contains(object_id,<sp/>&amp;has_object);</highlight></codeline>
<codeline><highlight class="normal">if<sp/>(has_object)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>//<sp/>Object<sp/>has<sp/>been<sp/>created<sp/>and<sp/>sealed,<sp/>proceed</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Getting<sp/>an<sp/>Object</highlight></codeline>
<codeline><highlight class="normal">-----------------</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">After<sp/>an<sp/>object<sp/>has<sp/>been<sp/>sealed,<sp/>any<sp/>client<sp/>who<sp/>knows<sp/>the<sp/>Object<sp/>ID<sp/>can<sp/>get</highlight></codeline>
<codeline><highlight class="normal">the<sp/>object.<sp/>To<sp/>store<sp/>the<sp/>retrieved<sp/>object<sp/>contents,<sp/>you<sp/>should<sp/>create<sp/>an</highlight></codeline>
<codeline><highlight class="normal">`ObjectBuffer`,<sp/>then<sp/>call<sp/>`PlasmaClient::Get()`<sp/>as<sp/>follows:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Get<sp/>from<sp/>the<sp/>Plasma<sp/>store<sp/>by<sp/>Object<sp/>ID.</highlight></codeline>
<codeline><highlight class="normal">ObjectBuffer<sp/>object_buffer;</highlight></codeline>
<codeline><highlight class="normal">client.Get(&amp;object_id,<sp/>1,<sp/>-1,<sp/>&amp;object_buffer);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">`PlasmaClient::Get()`<sp/>isn&apos;t<sp/>limited<sp/>to<sp/>fetching<sp/>a<sp/>single<sp/>object</highlight></codeline>
<codeline><highlight class="normal">from<sp/>the<sp/>Plasma<sp/>store<sp/>at<sp/>once.<sp/>You<sp/>can<sp/>specify<sp/>an<sp/>array<sp/>of<sp/>Object<sp/>IDs<sp/>and</highlight></codeline>
<codeline><highlight class="normal">`ObjectBuffers`<sp/>to<sp/>fetch<sp/>at<sp/>once,<sp/>so<sp/>long<sp/>as<sp/>you<sp/>also<sp/>specify<sp/>the</highlight></codeline>
<codeline><highlight class="normal">number<sp/>of<sp/>objects<sp/>being<sp/>fetched:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Get<sp/>two<sp/>objects<sp/>at<sp/>once<sp/>from<sp/>the<sp/>Plasma<sp/>store.<sp/>This<sp/>function</highlight></codeline>
<codeline><highlight class="normal">//<sp/>call<sp/>will<sp/>block<sp/>until<sp/>both<sp/>objects<sp/>have<sp/>been<sp/>fetched.</highlight></codeline>
<codeline><highlight class="normal">ObjectBuffer<sp/>multiple_buffers[2];</highlight></codeline>
<codeline><highlight class="normal">ObjectID<sp/>multiple_ids[2]<sp/>=<sp/>{object_id1,<sp/>object_id2};</highlight></codeline>
<codeline><highlight class="normal">client.Get(multiple_ids,<sp/>2,<sp/>-1,<sp/>multiple_buffers);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Since<sp/>`PlasmaClient::Get()`<sp/>is<sp/>a<sp/>blocking<sp/>function<sp/>call,<sp/>it<sp/>may<sp/>be</highlight></codeline>
<codeline><highlight class="normal">necessary<sp/>to<sp/>limit<sp/>the<sp/>amount<sp/>of<sp/>time<sp/>the<sp/>function<sp/>is<sp/>allowed<sp/>to<sp/>take</highlight></codeline>
<codeline><highlight class="normal">when<sp/>trying<sp/>to<sp/>fetch<sp/>from<sp/>the<sp/>Plasma<sp/>store.<sp/>You<sp/>can<sp/>pass<sp/>in<sp/>a<sp/>timeout</highlight></codeline>
<codeline><highlight class="normal">in<sp/>milliseconds<sp/>when<sp/>calling<sp/>`PlasmaClient::Get().`<sp/>To<sp/>use<sp/>`PlasmaClient::Get()`</highlight></codeline>
<codeline><highlight class="normal">without<sp/>a<sp/>timeout,<sp/>just<sp/>pass<sp/>in<sp/>-1<sp/>like<sp/>in<sp/>the<sp/>previous<sp/>example<sp/>calls:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Make<sp/>the<sp/>function<sp/>call<sp/>give<sp/>up<sp/>fetching<sp/>the<sp/>object<sp/>if<sp/>it<sp/>takes</highlight></codeline>
<codeline><highlight class="normal">//<sp/>more<sp/>than<sp/>100<sp/>milliseconds.</highlight></codeline>
<codeline><highlight class="normal">int64_t<sp/>timeout<sp/>=<sp/>100;</highlight></codeline>
<codeline><highlight class="normal">client.Get(&amp;object_id,<sp/>1,<sp/>timeout,<sp/>&amp;object_buffer);</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Finally,<sp/>to<sp/>access<sp/>the<sp/>object,<sp/>you<sp/>can<sp/>access<sp/>the<sp/>`data`<sp/>and</highlight></codeline>
<codeline><highlight class="normal">`metadata`<sp/>attributes<sp/>of<sp/>the<sp/>`ObjectBuffer`.<sp/>The<sp/>`data`<sp/>can<sp/>be<sp/>indexed</highlight></codeline>
<codeline><highlight class="normal">like<sp/>any<sp/>array:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Access<sp/>object<sp/>data.</highlight></codeline>
<codeline><highlight class="normal">uint8_t*<sp/>data<sp/>=<sp/>object_buffer.data;</highlight></codeline>
<codeline><highlight class="normal">int64_t<sp/>data_size<sp/>=<sp/>object_buffer.data_size;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Access<sp/>object<sp/>metadata.</highlight></codeline>
<codeline><highlight class="normal">uint8_t*<sp/>metadata<sp/>=<sp/>object_buffer.metadata;</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>metadata_size<sp/>=<sp/>object_buffer.metadata_size;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Index<sp/>into<sp/>data<sp/>array.</highlight></codeline>
<codeline><highlight class="normal">uint8_t<sp/>first_data_byte<sp/>=<sp/>data[0];</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Here<sp/>is<sp/>a<sp/>longer<sp/>example<sp/>that<sp/>shows<sp/>these<sp/>capabilities:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;plasma/client.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>plasma;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int<sp/>main(int<sp/>argc,<sp/>char**<sp/>argv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Start<sp/>up<sp/>and<sp/>connect<sp/>a<sp/>Plasma<sp/>client.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>PlasmaClient<sp/>client;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ARROW_CHECK_OK(client.Connect(&quot;/tmp/plasma&quot;));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ObjectID<sp/>object_id<sp/>=<sp/>ObjectID::from_binary(&quot;00000000000000000000&quot;);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ObjectBuffer<sp/>object_buffer;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ARROW_CHECK_OK(client.Get(&amp;object_id,<sp/>1,<sp/>-1,<sp/>&amp;object_buffer));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Retrieve<sp/>object<sp/>data.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>auto<sp/>buffer<sp/>=<sp/>object_buffer.data;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>const<sp/>uint8_t*<sp/>data<sp/>=<sp/>buffer-&gt;data();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int64_t<sp/>data_size<sp/>=<sp/>buffer-&gt;size();</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Check<sp/>that<sp/>the<sp/>data<sp/>agrees<sp/>with<sp/>what<sp/>was<sp/>written<sp/>in<sp/>the<sp/>other<sp/>process.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>for<sp/>(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>data_size;<sp/>i++)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ARROW_CHECK(data[i]<sp/>==<sp/>static_cast&lt;uint8_t&gt;(i<sp/>%<sp/>4));</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Disconnect<sp/>the<sp/>client.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ARROW_CHECK_OK(client.Disconnect());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>compile<sp/>it<sp/>with</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">g++<sp/>get.cc<sp/>`pkg-config<sp/>--cflags<sp/>--libs<sp/>plasma`<sp/>--std=c++11<sp/>-o<sp/>get</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">and<sp/>run<sp/>it<sp/>with<sp/>`./get`,<sp/>all<sp/>the<sp/>assertions<sp/>will<sp/>pass<sp/>if<sp/>you<sp/>run<sp/>the<sp/>`create`</highlight></codeline>
<codeline><highlight class="normal">example<sp/>from<sp/>above<sp/>on<sp/>the<sp/>same<sp/>Plasma<sp/>store.</highlight></codeline>
<codeline></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Object<sp/>Lifetime<sp/>Management</highlight></codeline>
<codeline><highlight class="normal">--------------------------</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">The<sp/>Plasma<sp/>store<sp/>internally<sp/>does<sp/>reference<sp/>counting<sp/>to<sp/>make<sp/>sure<sp/>objects<sp/>that</highlight></codeline>
<codeline><highlight class="normal">are<sp/>mapped<sp/>into<sp/>the<sp/>address<sp/>space<sp/>of<sp/>one<sp/>of<sp/>the<sp/>clients<sp/>with<sp/>`PlasmaClient::Get`</highlight></codeline>
<codeline><highlight class="normal">are<sp/>accessible.<sp/>To<sp/>unmap<sp/>objects<sp/>from<sp/>a<sp/>client,<sp/>call<sp/>`PlasmaClient::Release`.</highlight></codeline>
<codeline><highlight class="normal">All<sp/>objects<sp/>that<sp/>are<sp/>mapped<sp/>into<sp/>a<sp/>clients<sp/>address<sp/>space<sp/>will<sp/>automatically</highlight></codeline>
<codeline><highlight class="normal">be<sp/>released<sp/>when<sp/>the<sp/>client<sp/>is<sp/>disconnected<sp/>from<sp/>the<sp/>store<sp/>(this<sp/>happens<sp/>even</highlight></codeline>
<codeline><highlight class="normal">if<sp/>the<sp/>client<sp/>process<sp/>crashes<sp/>or<sp/>otherwise<sp/>fails<sp/>to<sp/>call<sp/>`Disconnect`).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>a<sp/>new<sp/>object<sp/>is<sp/>created<sp/>and<sp/>there<sp/>is<sp/>not<sp/>enough<sp/>space<sp/>in<sp/>the<sp/>Plasma<sp/>store,</highlight></codeline>
<codeline><highlight class="normal">the<sp/>store<sp/>will<sp/>evict<sp/>the<sp/>least<sp/>recently<sp/>used<sp/>object<sp/>(an<sp/>object<sp/>is<sp/>in<sp/>use<sp/>if<sp/>at</highlight></codeline>
<codeline><highlight class="normal">least<sp/>one<sp/>client<sp/>has<sp/>gotten<sp/>it<sp/>but<sp/>not<sp/>released<sp/>it).</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Object<sp/>notifications</highlight></codeline>
<codeline><highlight class="normal">--------------------</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Additionally,<sp/>you<sp/>can<sp/>arrange<sp/>to<sp/>have<sp/>Plasma<sp/>notify<sp/>you<sp/>when<sp/>objects<sp/>are</highlight></codeline>
<codeline><highlight class="normal">sealed<sp/>in<sp/>the<sp/>object<sp/>store.<sp/>This<sp/>may<sp/>especially<sp/>be<sp/>handy<sp/>when<sp/>your</highlight></codeline>
<codeline><highlight class="normal">program<sp/>is<sp/>collaborating<sp/>with<sp/>other<sp/>Plasma<sp/>clients,<sp/>and<sp/>needs<sp/>to<sp/>know</highlight></codeline>
<codeline><highlight class="normal">when<sp/>they<sp/>make<sp/>objects<sp/>available.</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">First,<sp/>you<sp/>can<sp/>subscribe<sp/>your<sp/>current<sp/>Plasma<sp/>client<sp/>to<sp/>such<sp/>notifications</highlight></codeline>
<codeline><highlight class="normal">by<sp/>getting<sp/>a<sp/>file<sp/>descriptor:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Start<sp/>receiving<sp/>notifications<sp/>into<sp/>file_descriptor.</highlight></codeline>
<codeline><highlight class="normal">int<sp/>fd;</highlight></codeline>
<codeline><highlight class="normal">ARROW_CHECK_OK(client.Subscribe(&amp;fd));</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Once<sp/>you<sp/>have<sp/>the<sp/>file<sp/>descriptor,<sp/>you<sp/>can<sp/>have<sp/>your<sp/>current<sp/>Plasma<sp/>client</highlight></codeline>
<codeline><highlight class="normal">wait<sp/>to<sp/>receive<sp/>the<sp/>next<sp/>object<sp/>notification.<sp/>Object<sp/>notifications</highlight></codeline>
<codeline><highlight class="normal">include<sp/>information<sp/>such<sp/>as<sp/>Object<sp/>ID,<sp/>data<sp/>size,<sp/>and<sp/>metadata<sp/>size<sp/>of</highlight></codeline>
<codeline><highlight class="normal">the<sp/>next<sp/>newly<sp/>available<sp/>object:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Receive<sp/>notification<sp/>of<sp/>the<sp/>next<sp/>newly<sp/>available<sp/>object.</highlight></codeline>
<codeline><highlight class="normal">//<sp/>Notification<sp/>information<sp/>is<sp/>stored<sp/>in<sp/>object_id,<sp/>data_size,<sp/>and<sp/>metadata_size</highlight></codeline>
<codeline><highlight class="normal">ObjectID<sp/>object_id;</highlight></codeline>
<codeline><highlight class="normal">int64_t<sp/>data_size;</highlight></codeline>
<codeline><highlight class="normal">int64_t<sp/>metadata_size;</highlight></codeline>
<codeline><highlight class="normal">ARROW_CHECK_OK(client.GetNotification(fd,<sp/>&amp;object_id,<sp/>&amp;data_size,<sp/>&amp;metadata_size));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>Get<sp/>the<sp/>newly<sp/>available<sp/>object.</highlight></codeline>
<codeline><highlight class="normal">ObjectBuffer<sp/>object_buffer;</highlight></codeline>
<codeline><highlight class="normal">ARROW_CHECK_OK(client.Get(&amp;object_id,<sp/>1,<sp/>-1,<sp/>&amp;object_buffer));</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">Here<sp/>is<sp/>a<sp/>full<sp/>program<sp/>that<sp/>shows<sp/>this<sp/>capability:</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```cpp</highlight></codeline>
<codeline><highlight class="normal">#include<sp/>&lt;plasma/client.h&gt;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">using<sp/>namespace<sp/>plasma;</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">int<sp/>main(int<sp/>argc,<sp/>char**<sp/>argv)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Start<sp/>up<sp/>and<sp/>connect<sp/>a<sp/>Plasma<sp/>client.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>PlasmaClient<sp/>client;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ARROW_CHECK_OK(client.Connect(&quot;/tmp/plasma&quot;));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>int<sp/>fd;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ARROW_CHECK_OK(client.Subscribe(&amp;fd));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>ObjectID<sp/>object_id;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int64_t<sp/>data_size;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>int64_t<sp/>metadata_size;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>while<sp/>(true)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>ARROW_CHECK_OK(client.GetNotification(fd,<sp/>&amp;object_id,<sp/>&amp;data_size,<sp/>&amp;metadata_size));</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>&quot;Received<sp/>object<sp/>notification<sp/>for<sp/>object_id<sp/>=<sp/>&quot;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>object_id.hex()<sp/>&lt;&lt;<sp/>&quot;,<sp/>with<sp/>data_size<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>data_size</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;&lt;<sp/>&quot;,<sp/>and<sp/>metadata_size<sp/>=<sp/>&quot;<sp/>&lt;&lt;<sp/>metadata_size<sp/>&lt;&lt;<sp/>std::endl;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal"><sp/><sp/>//<sp/>Disconnect<sp/>the<sp/>client.</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>ARROW_CHECK_OK(client.Disconnect());</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">If<sp/>you<sp/>compile<sp/>it<sp/>with</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline><highlight class="normal">g++<sp/>subscribe.cc<sp/>`pkg-config<sp/>--cflags<sp/>--libs<sp/>plasma`<sp/>--std=c++11<sp/>-o<sp/>subscribe</highlight></codeline>
<codeline><highlight class="normal">```</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">and<sp/>invoke<sp/>`./create`<sp/>and<sp/>`./subscribe`<sp/>while<sp/>the<sp/>Plasma<sp/>store<sp/>is<sp/>running,</highlight></codeline>
<codeline><highlight class="normal">you<sp/>can<sp/>observe<sp/>the<sp/>new<sp/>object<sp/>arriving.</highlight></codeline>
    </programlisting>
    <location file="tutorials/plasma.md"/>
  </compounddef>
</doxygen>
