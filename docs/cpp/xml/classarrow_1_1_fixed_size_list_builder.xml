<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_fixed_size_list_builder" kind="class" language="C++" prot="public">
    <compoundname>arrow::FixedSizeListBuilder</compoundname>
    <basecompoundref refid="classarrow_1_1_array_builder" prot="public" virt="non-virtual">arrow::ArrayBuilder</basecompoundref>
    <includes refid="builder__nested_8h" local="no">arrow/array/builder_nested.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classarrow_1_1_fixed_size_list_builder_1a85a5ea22bd2d542ff2a6a5b9b36ed9ef" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Field&gt; arrow::FixedSizeListBuilder::value_field_</definition>
        <argsstring></argsstring>
        <name>value_field_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="346" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_nested.h" bodystart="346" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_fixed_size_list_builder_1a5b9a8c131bf46524a29dd7627a8f372d" prot="protected" static="no" mutable="no">
        <type>const int32_t</type>
        <definition>const int32_t arrow::FixedSizeListBuilder::list_size_</definition>
        <argsstring></argsstring>
        <name>list_size_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="347" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_nested.h" bodystart="347" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_fixed_size_list_builder_1a68a7d7ee261df7e61f0444b6e77aa5ee" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array_builder" kindref="compound">ArrayBuilder</ref> &gt;</type>
        <definition>std::shared_ptr&lt;ArrayBuilder&gt; arrow::FixedSizeListBuilder::value_builder_</definition>
        <argsstring></argsstring>
        <name>value_builder_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="348" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_nested.h" bodystart="348" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1_fixed_size_list_builder_1a9151e6de548480935d1ebf3d0e76d38b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::FixedSizeListBuilder::FixedSizeListBuilder</definition>
        <argsstring>(MemoryPool *pool, std::shared_ptr&lt; ArrayBuilder &gt; const &amp;value_builder, int32_t list_size)</argsstring>
        <name>FixedSizeListBuilder</name>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array_builder" kindref="compound">ArrayBuilder</ref> &gt; const &amp;</type>
          <declname>value_builder</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>list_size</declname>
        </param>
        <briefdescription>
<para>Use this constructor to define the built array&apos;s type explicitly. </para>        </briefdescription>
        <detaileddescription>
<para>If value_builder has indeterminate type, this builder will also. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="291" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_fixed_size_list_builder_1a6f5a153c843b4d2a4429d7645ec4908b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::FixedSizeListBuilder::FixedSizeListBuilder</definition>
        <argsstring>(MemoryPool *pool, std::shared_ptr&lt; ArrayBuilder &gt; const &amp;value_builder, const std::shared_ptr&lt; DataType &gt; &amp;type)</argsstring>
        <name>FixedSizeListBuilder</name>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array_builder" kindref="compound">ArrayBuilder</ref> &gt; const &amp;</type>
          <declname>value_builder</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Use this constructor to infer the built array&apos;s type. </para>        </briefdescription>
        <detaileddescription>
<para>If value_builder has indeterminate type, this builder will also. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="297" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_fixed_size_list_builder_1aeca1c0c6bf23b4e79d118df9dd90fab4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::FixedSizeListBuilder::Resize</definition>
        <argsstring>(int64_t capacity) override</argsstring>
        <name>Resize</name>
        <reimplements refid="classarrow_1_1_array_builder_1a994d873bec453c33fbaeb995442d520b">Resize</reimplements>
        <param>
          <type>int64_t</type>
          <declname>capacity</declname>
        </param>
        <briefdescription>
<para>Ensure that enough memory has been allocated to fit the indicated number of total elements in the builder, including any that have already been appended. </para>        </briefdescription>
        <detaileddescription>
<para>Does not account for reallocations that may be due to variable size data, like binary values. To make space for incremental appends, use Reserve instead.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum number of total array values to accommodate. Must be greater than the current capacity. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="301" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_fixed_size_list_builder_1a980758c124ac9ae650fae2a7a72b0397" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void arrow::FixedSizeListBuilder::Reset</definition>
        <argsstring>() override</argsstring>
        <name>Reset</name>
        <reimplements refid="classarrow_1_1_array_builder_1a71a25653bdf242da1b3a317f4fd49a98">Reset</reimplements>
        <briefdescription>
<para>Reset the builder. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="302" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_fixed_size_list_builder_1a5a2cd1a8d758cc46c83b898051e79e07" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::FixedSizeListBuilder::FinishInternal</definition>
        <argsstring>(std::shared_ptr&lt; ArrayData &gt; *out) override</argsstring>
        <name>FinishInternal</name>
        <reimplements refid="classarrow_1_1_array_builder_1a0e0aea1c332b472f3671bea9da5ec473">FinishInternal</reimplements>
        <param>
          <type>std::shared_ptr&lt; <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Return result of builder as an internal generic <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> object. </para>        </briefdescription>
        <detaileddescription>
<para>Resets builder except for dictionary builder</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the finalized <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="303" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_fixed_size_list_builder_1a192836cc3045bdb644c2db2012a658f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::FixedSizeListBuilder::Finish</definition>
        <argsstring>(std::shared_ptr&lt; FixedSizeListArray &gt; *out)</argsstring>
        <name>Finish</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_fixed_size_list_array" kindref="compound">FixedSizeListArray</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="309" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_nested.h" bodystart="309" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_fixed_size_list_builder_1a46fbe6292114ea1d20f1fc37f8114d89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::FixedSizeListBuilder::Append</definition>
        <argsstring>()</argsstring>
        <name>Append</name>
        <briefdescription>
<para>Append a valid fixed length list. </para>        </briefdescription>
        <detaileddescription>
<para>This function affects only the validity bitmap; the child values must be appended using the child array builder. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="315" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_fixed_size_list_builder_1a00479ecda3949919c13c7940168719b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::FixedSizeListBuilder::AppendValues</definition>
        <argsstring>(int64_t length, const uint8_t *valid_bytes=NULLPTR)</argsstring>
        <name>AppendValues</name>
        <param>
          <type>int64_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>valid_bytes</declname>
          <defval><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></defval>
        </param>
        <briefdescription>
<para>Vector append. </para>        </briefdescription>
        <detaileddescription>
<para>If passed, valid_bytes wil be read and any zero byte will cause the corresponding slot to be null</para><para>This function affects only the validity bitmap; the child values must be appended using the child array builder. This includes appending nulls for null lists. XXX this restriction is confusing, should this method be omitted? </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="325" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_fixed_size_list_builder_1a165e35124aece9f8d7757f0d1642a8bc" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::FixedSizeListBuilder::AppendNull</definition>
        <argsstring>() final</argsstring>
        <name>AppendNull</name>
        <reimplements refid="classarrow_1_1_array_builder_1a6f7c2fbebb93e8630142dca01a328015">AppendNull</reimplements>
        <briefdescription>
<para>Append a null fixed length list. </para>        </briefdescription>
        <detaileddescription>
<para>The child array builder will have the appropriate number of nulls appended automatically. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="331" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_fixed_size_list_builder_1abaa33ff731317d6c6690e551598a41bb" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::FixedSizeListBuilder::AppendNulls</definition>
        <argsstring>(int64_t length) final</argsstring>
        <name>AppendNulls</name>
        <reimplements refid="classarrow_1_1_array_builder_1a0900943af067e85d9fa227123c223b14">AppendNulls</reimplements>
        <param>
          <type>int64_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Append length null fixed length lists. </para>        </briefdescription>
        <detaileddescription>
<para>The child array builder will have the appropriate number of nulls appended automatically. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="337" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_fixed_size_list_builder_1aa5be678460c71304c853e19cf630c680" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_array_builder" kindref="compound">ArrayBuilder</ref> *</type>
        <definition>ArrayBuilder* arrow::FixedSizeListBuilder::value_builder</definition>
        <argsstring>() const</argsstring>
        <name>value_builder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="339" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_nested.h" bodystart="339" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_fixed_size_list_builder_1aba8f3c8d4888dcda3f8bba3bfb9888e0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::FixedSizeListBuilder::type</definition>
        <argsstring>() const override</argsstring>
        <name>type</name>
        <reimplements refid="classarrow_1_1_array_builder_1a39b4b420be1fcf4fe7219fe953eb65c7">type</reimplements>
        <briefdescription>
<para>Return the type of the built <ref refid="classarrow_1_1_array" kindref="compound">Array</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="341" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_nested.h" bodystart="341" bodyend="343"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Builder class for fixed-length list array value types. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1766">
        <label>arrow::FixedSizeListBuilder</label>
        <link refid="classarrow_1_1_fixed_size_list_builder"/>
        <childnode refid="1767" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1767">
        <label>arrow::ArrayBuilder</label>
        <link refid="classarrow_1_1_array_builder"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1770">
        <label>arrow::MemoryPool</label>
        <link refid="classarrow_1_1_memory_pool"/>
      </node>
      <node id="1768">
        <label>arrow::FixedSizeListBuilder</label>
        <link refid="classarrow_1_1_fixed_size_list_builder"/>
        <childnode refid="1769" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1771">
        <label>arrow::TypedBufferBuilder&lt; bool &gt;</label>
        <link refid="classarrow_1_1_typed_buffer_builder_3_01bool_01_4"/>
      </node>
      <node id="1769">
        <label>arrow::ArrayBuilder</label>
        <link refid="classarrow_1_1_array_builder"/>
        <childnode refid="1770" relation="usage">
          <edgelabel>pool_</edgelabel>
        </childnode>
        <childnode refid="1771" relation="usage">
          <edgelabel>null_bitmap_builder_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="287" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_nested.h" bodystart="287" bodyend="349"/>
    <listofallmembers>
      <member refid="classarrow_1_1_array_builder_1a630ea6ee96e26b8f1a2d08b45180fb32" prot="public" virt="non-virtual"><scope>arrow::FixedSizeListBuilder</scope><name>Advance</name></member>
      <member refid="classarrow_1_1_fixed_size_list_builder_1a46fbe6292114ea1d20f1fc37f8114d89" prot="public" virt="non-virtual"><scope>arrow::FixedSizeListBuilder</scope><name>Append</name></member>
      <member refid="classarrow_1_1_fixed_size_list_builder_1a165e35124aece9f8d7757f0d1642a8bc" prot="public" virt="virtual"><scope>arrow::FixedSizeListBuilder</scope><name>AppendNull</name></member>
      <member refid="classarrow_1_1_fixed_size_list_builder_1abaa33ff731317d6c6690e551598a41bb" prot="public" virt="virtual"><scope>arrow::FixedSizeListBuilder</scope><name>AppendNulls</name></member>
      <member refid="classarrow_1_1_array_builder_1a21c1d9818e379f41e6c72df407ae029d" prot="protected" virt="non-virtual"><scope>arrow::FixedSizeListBuilder</scope><name>AppendToBitmap</name></member>
      <member refid="classarrow_1_1_array_builder_1a17c9bf5211cb980518df3bb1c33ba4fc" prot="protected" virt="non-virtual"><scope>arrow::FixedSizeListBuilder</scope><name>AppendToBitmap</name></member>
      <member refid="classarrow_1_1_array_builder_1ab8bb1f62d1eaa27de03c41a2db3d53e3" prot="protected" virt="non-virtual"><scope>arrow::FixedSizeListBuilder</scope><name>AppendToBitmap</name></member>
      <member refid="classarrow_1_1_fixed_size_list_builder_1a00479ecda3949919c13c7940168719b1" prot="public" virt="non-virtual"><scope>arrow::FixedSizeListBuilder</scope><name>AppendValues</name></member>
      <member refid="classarrow_1_1_array_builder_1ab5fe829691bef00b33894d51e16e6aa5" prot="public" virt="non-virtual"><scope>arrow::FixedSizeListBuilder</scope><name>ArrayBuilder</name></member>
      <member refid="classarrow_1_1_array_builder_1a0236e815af8f62c98bd612eea219cd73" prot="public" virt="non-virtual"><scope>arrow::FixedSizeListBuilder</scope><name>capacity</name></member>
      <member refid="classarrow_1_1_array_builder_1aeb92737fe5ada5b372459705c1690d7e" prot="protected" virt="non-virtual"><scope>arrow::FixedSizeListBuilder</scope><name>capacity_</name></member>
      <member refid="classarrow_1_1_array_builder_1a0d77ad3f24791679196dda8b3ac84437" prot="protected" virt="non-virtual"><scope>arrow::FixedSizeListBuilder</scope><name>CheckCapacity</name></member>
      <member refid="classarrow_1_1_array_builder_1aad4a1ed2c24204b1cc21e44ab0ad444b" prot="public" virt="non-virtual"><scope>arrow::FixedSizeListBuilder</scope><name>child</name></member>
      <member refid="classarrow_1_1_array_builder_1a66ce8a6890bf6f222baf1642557d889b" prot="protected" virt="non-virtual"><scope>arrow::FixedSizeListBuilder</scope><name>children_</name></member>
      <member refid="classarrow_1_1_fixed_size_list_builder_1a192836cc3045bdb644c2db2012a658f7" prot="public" virt="non-virtual"><scope>arrow::FixedSizeListBuilder</scope><name>Finish</name></member>
      <member refid="classarrow_1_1_array_builder_1a67b2227edb4b51bc44425f1c8a439819" prot="public" virt="non-virtual" ambiguityscope="arrow::ArrayBuilder::"><scope>arrow::FixedSizeListBuilder</scope><name>Finish</name></member>
      <member refid="classarrow_1_1_fixed_size_list_builder_1a5a2cd1a8d758cc46c83b898051e79e07" prot="public" virt="virtual"><scope>arrow::FixedSizeListBuilder</scope><name>FinishInternal</name></member>
      <member refid="classarrow_1_1_array_builder_1a9f90da9e81d9db4bc9277458ba70d46a" prot="protected" virt="non-virtual"><scope>arrow::FixedSizeListBuilder</scope><name>FinishTyped</name></member>
      <member refid="classarrow_1_1_fixed_size_list_builder_1a9151e6de548480935d1ebf3d0e76d38b" prot="public" virt="non-virtual"><scope>arrow::FixedSizeListBuilder</scope><name>FixedSizeListBuilder</name></member>
      <member refid="classarrow_1_1_fixed_size_list_builder_1a6f5a153c843b4d2a4429d7645ec4908b" prot="public" virt="non-virtual"><scope>arrow::FixedSizeListBuilder</scope><name>FixedSizeListBuilder</name></member>
      <member refid="classarrow_1_1_array_builder_1a296ac75b9b3d877192e37681c66513ba" prot="public" virt="non-virtual"><scope>arrow::FixedSizeListBuilder</scope><name>length</name></member>
      <member refid="classarrow_1_1_array_builder_1ae8b7ebc042e6684440bd9e1c77f0f5c1" prot="protected" virt="non-virtual"><scope>arrow::FixedSizeListBuilder</scope><name>length_</name></member>
      <member refid="classarrow_1_1_fixed_size_list_builder_1a5b9a8c131bf46524a29dd7627a8f372d" prot="protected" virt="non-virtual"><scope>arrow::FixedSizeListBuilder</scope><name>list_size_</name></member>
      <member refid="classarrow_1_1_array_builder_1a0f32beedba413982480c5df287946922" prot="protected" virt="non-virtual"><scope>arrow::FixedSizeListBuilder</scope><name>null_bitmap_builder_</name></member>
      <member refid="classarrow_1_1_array_builder_1aad098f61890072a4576867a7cf4fb9ee" prot="public" virt="non-virtual"><scope>arrow::FixedSizeListBuilder</scope><name>null_count</name></member>
      <member refid="classarrow_1_1_array_builder_1a9ea96ba4121857ab23241b6b408051b9" prot="protected" virt="non-virtual"><scope>arrow::FixedSizeListBuilder</scope><name>null_count_</name></member>
      <member refid="classarrow_1_1_array_builder_1aa829b8339092408c9d710cc2c1bdc46a" prot="public" virt="non-virtual"><scope>arrow::FixedSizeListBuilder</scope><name>num_children</name></member>
      <member refid="classarrow_1_1_array_builder_1a33e3aa20cedda9f6d8581809437f1c86" prot="protected" virt="non-virtual"><scope>arrow::FixedSizeListBuilder</scope><name>pool_</name></member>
      <member refid="classarrow_1_1_array_builder_1afe8448fda39a8529a119bde5ba7ba119" prot="public" virt="non-virtual"><scope>arrow::FixedSizeListBuilder</scope><name>Reserve</name></member>
      <member refid="classarrow_1_1_fixed_size_list_builder_1a980758c124ac9ae650fae2a7a72b0397" prot="public" virt="virtual"><scope>arrow::FixedSizeListBuilder</scope><name>Reset</name></member>
      <member refid="classarrow_1_1_fixed_size_list_builder_1aeca1c0c6bf23b4e79d118df9dd90fab4" prot="public" virt="virtual"><scope>arrow::FixedSizeListBuilder</scope><name>Resize</name></member>
      <member refid="classarrow_1_1_array_builder_1aa505ec95646314c3b9254e0cce39538b" prot="protected" virt="non-virtual"><scope>arrow::FixedSizeListBuilder</scope><name>SetNotNull</name></member>
      <member refid="classarrow_1_1_array_builder_1a1e3e49019e307f0829ef66b72ce1b82e" prot="protected" virt="non-virtual"><scope>arrow::FixedSizeListBuilder</scope><name>TrimBuffer</name></member>
      <member refid="classarrow_1_1_fixed_size_list_builder_1aba8f3c8d4888dcda3f8bba3bfb9888e0" prot="public" virt="virtual"><scope>arrow::FixedSizeListBuilder</scope><name>type</name></member>
      <member refid="classarrow_1_1_array_builder_1a44b3f511e5aefdba55aebfd4afa99c8f" prot="protected" virt="non-virtual"><scope>arrow::FixedSizeListBuilder</scope><name>UnsafeAppendNull</name></member>
      <member refid="classarrow_1_1_array_builder_1a2dbe80584eac62147112c4d0a43ceea2" prot="protected" virt="non-virtual"><scope>arrow::FixedSizeListBuilder</scope><name>UnsafeAppendToBitmap</name></member>
      <member refid="classarrow_1_1_array_builder_1afd319659d3125af8a72c0c529c329c12" prot="protected" virt="non-virtual"><scope>arrow::FixedSizeListBuilder</scope><name>UnsafeAppendToBitmap</name></member>
      <member refid="classarrow_1_1_array_builder_1a40a4e3c231f1f47dcd046c42ee63b63b" prot="protected" virt="non-virtual"><scope>arrow::FixedSizeListBuilder</scope><name>UnsafeAppendToBitmap</name></member>
      <member refid="classarrow_1_1_array_builder_1a361c8efe3030a75126cbbbe90e9a3ee4" prot="protected" virt="non-virtual"><scope>arrow::FixedSizeListBuilder</scope><name>UnsafeAppendToBitmap</name></member>
      <member refid="classarrow_1_1_array_builder_1aa0a2125633a3cdb1860d3f62d44ac4a1" prot="protected" virt="non-virtual"><scope>arrow::FixedSizeListBuilder</scope><name>UnsafeSetNotNull</name></member>
      <member refid="classarrow_1_1_array_builder_1ab5622a696215f318672d5a800d4bfe48" prot="protected" virt="non-virtual"><scope>arrow::FixedSizeListBuilder</scope><name>UnsafeSetNull</name></member>
      <member refid="classarrow_1_1_fixed_size_list_builder_1aa5be678460c71304c853e19cf630c680" prot="public" virt="non-virtual"><scope>arrow::FixedSizeListBuilder</scope><name>value_builder</name></member>
      <member refid="classarrow_1_1_fixed_size_list_builder_1a68a7d7ee261df7e61f0444b6e77aa5ee" prot="protected" virt="non-virtual"><scope>arrow::FixedSizeListBuilder</scope><name>value_builder_</name></member>
      <member refid="classarrow_1_1_fixed_size_list_builder_1a85a5ea22bd2d542ff2a6a5b9b36ed9ef" prot="protected" virt="non-virtual"><scope>arrow::FixedSizeListBuilder</scope><name>value_field_</name></member>
      <member refid="classarrow_1_1_array_builder_1a74bb29b347e12ed7528925d12db109a7" prot="public" virt="virtual"><scope>arrow::FixedSizeListBuilder</scope><name>~ArrayBuilder</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
