<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1csv_1_1_block_parser" kind="class" language="C++" prot="public">
    <compoundname>arrow::csv::BlockParser</compoundname>
    <includes refid="csv_2parser_8h" local="no">arrow/csv/parser.h</includes>
    <innerclass refid="structarrow_1_1csv_1_1_block_parser_1_1_value_desc" prot="protected">arrow::csv::BlockParser::ValueDesc</innerclass>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classarrow_1_1csv_1_1_block_parser_1a6b616f4d5b34bfe957dc86e4bcd986ff" prot="protected" static="no" mutable="no">
        <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
        <definition>MemoryPool* arrow::csv::BlockParser::pool_</definition>
        <argsstring></argsstring>
        <name>pool_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/parser.h" line="151" column="1" bodyfile="/arrow/cpp/src/arrow/csv/parser.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1csv_1_1_block_parser_1a791aff84063a594cef903dfd3128ba63" prot="protected" static="no" mutable="no">
        <type>const <ref refid="structarrow_1_1csv_1_1_parse_options" kindref="compound">ParseOptions</ref></type>
        <definition>const ParseOptions arrow::csv::BlockParser::options_</definition>
        <argsstring></argsstring>
        <name>options_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/parser.h" line="152" column="1" bodyfile="/arrow/cpp/src/arrow/csv/parser.h" bodystart="152" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1csv_1_1_block_parser_1afee5d35a8d7d5f9444d74f238c103722" prot="protected" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t arrow::csv::BlockParser::num_rows_</definition>
        <argsstring></argsstring>
        <name>num_rows_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/parser.h" line="154" column="1" bodyfile="/arrow/cpp/src/arrow/csv/parser.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1csv_1_1_block_parser_1a171ec467f94cd4954943bfe31962a72a" prot="protected" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t arrow::csv::BlockParser::num_cols_</definition>
        <argsstring></argsstring>
        <name>num_cols_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/parser.h" line="156" column="1" bodyfile="/arrow/cpp/src/arrow/csv/parser.h" bodystart="156" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1csv_1_1_block_parser_1adc317c4a82bcfe0c30e32e75704d74e9" prot="protected" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t arrow::csv::BlockParser::max_num_rows_</definition>
        <argsstring></argsstring>
        <name>max_num_rows_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/parser.h" line="158" column="1" bodyfile="/arrow/cpp/src/arrow/csv/parser.h" bodystart="158" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1csv_1_1_block_parser_1ab5b05839cf293cd7959508215b46d60d" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;Buffer&gt; &gt; arrow::csv::BlockParser::values_buffers_</definition>
        <argsstring></argsstring>
        <name>values_buffers_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/parser.h" line="168" column="1" bodyfile="/arrow/cpp/src/arrow/csv/parser.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1csv_1_1_block_parser_1a7a2e1c0838c506eb061b57caed14e29c" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Buffer&gt; arrow::csv::BlockParser::parsed_buffer_</definition>
        <argsstring></argsstring>
        <name>parsed_buffer_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/parser.h" line="169" column="1" bodyfile="/arrow/cpp/src/arrow/csv/parser.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1csv_1_1_block_parser_1a176c63dac62a4d3eb8df72620e247fcd" prot="protected" static="no" mutable="no">
        <type>const uint8_t *</type>
        <definition>const uint8_t* arrow::csv::BlockParser::parsed_</definition>
        <argsstring></argsstring>
        <name>parsed_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/parser.h" line="170" column="1" bodyfile="/arrow/cpp/src/arrow/csv/parser.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1csv_1_1_block_parser_1ab27498fd84e350f779830a6296649735" prot="protected" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t arrow::csv::BlockParser::values_size_</definition>
        <argsstring></argsstring>
        <name>values_size_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/parser.h" line="171" column="1" bodyfile="/arrow/cpp/src/arrow/csv/parser.h" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1csv_1_1_block_parser_1ab5755e999d26813bcd0eba8015ea2fd7" prot="protected" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t arrow::csv::BlockParser::parsed_size_</definition>
        <argsstring></argsstring>
        <name>parsed_size_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/parser.h" line="172" column="1" bodyfile="/arrow/cpp/src/arrow/csv/parser.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1csv_1_1_block_parser_1aaffb9681520d02dfd42e65c69fbb4cf5" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::csv::BlockParser::BlockParser</definition>
        <argsstring>(ParseOptions options, int32_t num_cols=-1, int32_t max_num_rows=kMaxParserNumRows)</argsstring>
        <name>BlockParser</name>
        <param>
          <type><ref refid="structarrow_1_1csv_1_1_parse_options" kindref="compound">ParseOptions</ref></type>
          <declname>options</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>num_cols</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>max_num_rows</declname>
          <defval><ref refid="namespacearrow_1_1csv_1a6fbb5c4385c2fa70472a4e11c7643f3f" kindref="member">kMaxParserNumRows</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/parser.h" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1csv_1_1_block_parser_1ad5585289c74e0b4c4477af9d3b7714bf" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::csv::BlockParser::BlockParser</definition>
        <argsstring>(MemoryPool *pool, ParseOptions options, int32_t num_cols=-1, int32_t max_num_rows=kMaxParserNumRows)</argsstring>
        <name>BlockParser</name>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type><ref refid="structarrow_1_1csv_1_1_parse_options" kindref="compound">ParseOptions</ref></type>
          <declname>options</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>num_cols</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int32_t</type>
          <declname>max_num_rows</declname>
          <defval><ref refid="namespacearrow_1_1csv_1a6fbb5c4385c2fa70472a4e11c7643f3f" kindref="member">kMaxParserNumRows</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/parser.h" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1csv_1_1_block_parser_1ab29b4ff423182feab7750160298d5b5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::csv::BlockParser::Parse</definition>
        <argsstring>(util::string_view data, uint32_t *out_size)</argsstring>
        <name>Parse</name>
        <param>
          <type>util::string_view</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>out_size</declname>
        </param>
        <briefdescription>
<para>Parse a block of data. </para>        </briefdescription>
        <detaileddescription>
<para>Parse a block of CSV data, ingesting up to max_num_rows rows. The number of bytes actually parsed is returned in out_size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/parser.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1csv_1_1_block_parser_1add8d36bdbdde27d24d145cbd86a44caa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::csv::BlockParser::Parse</definition>
        <argsstring>(const std::vector&lt; util::string_view &gt; &amp;data, uint32_t *out_size)</argsstring>
        <name>Parse</name>
        <param>
          <type>const std::vector&lt; util::string_view &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>out_size</declname>
        </param>
        <briefdescription>
<para>Parse sequential blocks of data. </para>        </briefdescription>
        <detaileddescription>
<para>Only the last block is allowed to be truncated. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/parser.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1csv_1_1_block_parser_1a080b7000ce4d31ce04e48194f2b329c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::csv::BlockParser::ParseFinal</definition>
        <argsstring>(util::string_view data, uint32_t *out_size)</argsstring>
        <name>ParseFinal</name>
        <param>
          <type>util::string_view</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>out_size</declname>
        </param>
        <briefdescription>
<para>Parse the final block of data. </para>        </briefdescription>
        <detaileddescription>
<para>Like <ref refid="classarrow_1_1csv_1_1_block_parser_1ab29b4ff423182feab7750160298d5b5a" kindref="member">Parse()</ref>, but called with the final block in a file. The last row may lack a trailing line separator. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/parser.h" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1csv_1_1_block_parser_1a1661f61b21cb46e822d1a9f1d7780868" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::csv::BlockParser::ParseFinal</definition>
        <argsstring>(const std::vector&lt; util::string_view &gt; &amp;data, uint32_t *out_size)</argsstring>
        <name>ParseFinal</name>
        <param>
          <type>const std::vector&lt; util::string_view &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>out_size</declname>
        </param>
        <briefdescription>
<para>Parse the final sequential blocks of data. </para>        </briefdescription>
        <detaileddescription>
<para>Only the last block is allowed to be truncated. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/parser.h" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1csv_1_1_block_parser_1a390b651dfd8b35f547e48336652a9fa4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t arrow::csv::BlockParser::num_rows</definition>
        <argsstring>() const</argsstring>
        <name>num_rows</name>
        <briefdescription>
<para>Return the number of parsed rows. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/parser.h" line="89" column="1" bodyfile="/arrow/cpp/src/arrow/csv/parser.h" bodystart="89" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1csv_1_1_block_parser_1a722f2f2b7dc94983295703f5153297d2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t arrow::csv::BlockParser::num_cols</definition>
        <argsstring>() const</argsstring>
        <name>num_cols</name>
        <briefdescription>
<para>Return the number of parsed columns. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/parser.h" line="91" column="1" bodyfile="/arrow/cpp/src/arrow/csv/parser.h" bodystart="91" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1csv_1_1_block_parser_1aba2634657b3064edf2668659fe26fb7c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t arrow::csv::BlockParser::num_bytes</definition>
        <argsstring>() const</argsstring>
        <name>num_bytes</name>
        <briefdescription>
<para>Return the total size in bytes of parsed data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/parser.h" line="93" column="1" bodyfile="/arrow/cpp/src/arrow/csv/parser.h" bodystart="93" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1csv_1_1_block_parser_1a378da59fa77e61150a611397d305709a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Visitor</type>
          </param>
        </templateparamlist>
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::csv::BlockParser::VisitColumn</definition>
        <argsstring>(int32_t col_index, Visitor &amp;&amp;visit) const</argsstring>
        <name>VisitColumn</name>
        <param>
          <type>int32_t</type>
          <declname>col_index</declname>
        </param>
        <param>
          <type>Visitor &amp;&amp;</type>
          <declname>visit</declname>
        </param>
        <briefdescription>
<para>Visit parsed values in a column. </para>        </briefdescription>
        <detaileddescription>
<para>The signature of the visitor is Status(const uint8_t* data, uint32_t size, bool quoted) </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/parser.h" line="100" column="1" bodyfile="/arrow/cpp/src/arrow/csv/parser.h" bodystart="100" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1csv_1_1_block_parser_1a29d99fbf70de37d1b57a9a480043ffb0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Visitor</type>
          </param>
        </templateparamlist>
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::csv::BlockParser::VisitLastRow</definition>
        <argsstring>(Visitor &amp;&amp;visit) const</argsstring>
        <name>VisitLastRow</name>
        <param>
          <type>Visitor &amp;&amp;</type>
          <declname>visit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/parser.h" line="117" column="1" bodyfile="/arrow/cpp/src/arrow/csv/parser.h" bodystart="117" bodyend="129"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classarrow_1_1csv_1_1_block_parser_1aa465e57999a736b2a0bf1641b3510254" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::csv::BlockParser::ARROW_DISALLOW_COPY_AND_ASSIGN</definition>
        <argsstring>(BlockParser)</argsstring>
        <name>ARROW_DISALLOW_COPY_AND_ASSIGN</name>
        <param>
          <type><ref refid="classarrow_1_1csv_1_1_block_parser" kindref="compound">BlockParser</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/parser.h" line="132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1csv_1_1_block_parser_1afe2b7646719c054253b153ee57bf9480" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::csv::BlockParser::DoParse</definition>
        <argsstring>(const std::vector&lt; util::string_view &gt; &amp;data, bool is_final, uint32_t *out_size)</argsstring>
        <name>DoParse</name>
        <param>
          <type>const std::vector&lt; util::string_view &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_final</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>out_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/parser.h" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1csv_1_1_block_parser_1a9a168e745ff611719646baec4aa24588" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SpecializedOptions</type>
          </param>
        </templateparamlist>
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::csv::BlockParser::DoParseSpecialized</definition>
        <argsstring>(const std::vector&lt; util::string_view &gt; &amp;data, bool is_final, uint32_t *out_size)</argsstring>
        <name>DoParseSpecialized</name>
        <param>
          <type>const std::vector&lt; util::string_view &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_final</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>out_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/parser.h" line="137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1csv_1_1_block_parser_1a9b45bfd05aa9bf8a2ed97ada7773214e" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SpecializedOptions</type>
          </param>
          <param>
            <type>typename ValuesWriter</type>
          </param>
          <param>
            <type>typename ParsedWriter</type>
          </param>
        </templateparamlist>
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::csv::BlockParser::ParseChunk</definition>
        <argsstring>(ValuesWriter *values_writer, ParsedWriter *parsed_writer, const char *data, const char *data_end, bool is_final, int32_t rows_in_chunk, const char **out_data, bool *finished_parsing)</argsstring>
        <name>ParseChunk</name>
        <param>
          <type>ValuesWriter *</type>
          <declname>values_writer</declname>
        </param>
        <param>
          <type>ParsedWriter *</type>
          <declname>parsed_writer</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>data_end</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_final</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>rows_in_chunk</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>out_data</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>finished_parsing</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/parser.h" line="141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1csv_1_1_block_parser_1ac65d9e3c87f244a172d081e17d4df67f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SpecializedOptions</type>
          </param>
          <param>
            <type>typename ValuesWriter</type>
          </param>
          <param>
            <type>typename ParsedWriter</type>
          </param>
        </templateparamlist>
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::csv::BlockParser::ParseLine</definition>
        <argsstring>(ValuesWriter *values_writer, ParsedWriter *parsed_writer, const char *data, const char *data_end, bool is_final, const char **out_data)</argsstring>
        <name>ParseLine</name>
        <param>
          <type>ValuesWriter *</type>
          <declname>values_writer</declname>
        </param>
        <param>
          <type>ParsedWriter *</type>
          <declname>parsed_writer</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>data_end</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_final</declname>
        </param>
        <param>
          <type>const char **</type>
          <declname>out_data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/parser.h" line="147" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A reusable block-based parser for CSV data. </para>    </briefdescription>
    <detaileddescription>
<para>The parser takes a block of CSV data and delimits rows and fields, unquoting and unescaping them on the fly. Parsed data is own by the parser, so the original buffer can be discarded after <ref refid="classarrow_1_1csv_1_1_block_parser_1ab29b4ff423182feab7750160298d5b5a" kindref="member">Parse()</ref> returns.</para><para>If the block is truncated (i.e. not all data can be parsed), it is up to the caller to arrange the next block to start with the trailing data. Also, if the previous block ends with CR (0x0d) and a new block starts with LF (0x0a), the parser will consider the leading newline as an empty line; the caller should therefore strip it. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="357">
        <label>arrow::csv::BlockParser</label>
        <link refid="classarrow_1_1csv_1_1_block_parser"/>
        <childnode refid="358" relation="usage">
          <edgelabel>options_</edgelabel>
        </childnode>
        <childnode refid="359" relation="usage">
          <edgelabel>pool_</edgelabel>
        </childnode>
      </node>
      <node id="358">
        <label>arrow::csv::ParseOptions</label>
        <link refid="structarrow_1_1csv_1_1_parse_options"/>
      </node>
      <node id="359">
        <label>arrow::MemoryPool</label>
        <link refid="classarrow_1_1_memory_pool"/>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/csv/parser.h" line="59" column="1" bodyfile="/arrow/cpp/src/arrow/csv/parser.h" bodystart="59" bodyend="177"/>
    <listofallmembers>
      <member refid="classarrow_1_1csv_1_1_block_parser_1aa465e57999a736b2a0bf1641b3510254" prot="protected" virt="non-virtual"><scope>arrow::csv::BlockParser</scope><name>ARROW_DISALLOW_COPY_AND_ASSIGN</name></member>
      <member refid="classarrow_1_1csv_1_1_block_parser_1aaffb9681520d02dfd42e65c69fbb4cf5" prot="public" virt="non-virtual"><scope>arrow::csv::BlockParser</scope><name>BlockParser</name></member>
      <member refid="classarrow_1_1csv_1_1_block_parser_1ad5585289c74e0b4c4477af9d3b7714bf" prot="public" virt="non-virtual"><scope>arrow::csv::BlockParser</scope><name>BlockParser</name></member>
      <member refid="classarrow_1_1csv_1_1_block_parser_1afe2b7646719c054253b153ee57bf9480" prot="protected" virt="non-virtual"><scope>arrow::csv::BlockParser</scope><name>DoParse</name></member>
      <member refid="classarrow_1_1csv_1_1_block_parser_1a9a168e745ff611719646baec4aa24588" prot="protected" virt="non-virtual"><scope>arrow::csv::BlockParser</scope><name>DoParseSpecialized</name></member>
      <member refid="classarrow_1_1csv_1_1_block_parser_1adc317c4a82bcfe0c30e32e75704d74e9" prot="protected" virt="non-virtual"><scope>arrow::csv::BlockParser</scope><name>max_num_rows_</name></member>
      <member refid="classarrow_1_1csv_1_1_block_parser_1aba2634657b3064edf2668659fe26fb7c" prot="public" virt="non-virtual"><scope>arrow::csv::BlockParser</scope><name>num_bytes</name></member>
      <member refid="classarrow_1_1csv_1_1_block_parser_1a722f2f2b7dc94983295703f5153297d2" prot="public" virt="non-virtual"><scope>arrow::csv::BlockParser</scope><name>num_cols</name></member>
      <member refid="classarrow_1_1csv_1_1_block_parser_1a171ec467f94cd4954943bfe31962a72a" prot="protected" virt="non-virtual"><scope>arrow::csv::BlockParser</scope><name>num_cols_</name></member>
      <member refid="classarrow_1_1csv_1_1_block_parser_1a390b651dfd8b35f547e48336652a9fa4" prot="public" virt="non-virtual"><scope>arrow::csv::BlockParser</scope><name>num_rows</name></member>
      <member refid="classarrow_1_1csv_1_1_block_parser_1afee5d35a8d7d5f9444d74f238c103722" prot="protected" virt="non-virtual"><scope>arrow::csv::BlockParser</scope><name>num_rows_</name></member>
      <member refid="classarrow_1_1csv_1_1_block_parser_1a791aff84063a594cef903dfd3128ba63" prot="protected" virt="non-virtual"><scope>arrow::csv::BlockParser</scope><name>options_</name></member>
      <member refid="classarrow_1_1csv_1_1_block_parser_1ab29b4ff423182feab7750160298d5b5a" prot="public" virt="non-virtual"><scope>arrow::csv::BlockParser</scope><name>Parse</name></member>
      <member refid="classarrow_1_1csv_1_1_block_parser_1add8d36bdbdde27d24d145cbd86a44caa" prot="public" virt="non-virtual"><scope>arrow::csv::BlockParser</scope><name>Parse</name></member>
      <member refid="classarrow_1_1csv_1_1_block_parser_1a9b45bfd05aa9bf8a2ed97ada7773214e" prot="protected" virt="non-virtual"><scope>arrow::csv::BlockParser</scope><name>ParseChunk</name></member>
      <member refid="classarrow_1_1csv_1_1_block_parser_1a176c63dac62a4d3eb8df72620e247fcd" prot="protected" virt="non-virtual"><scope>arrow::csv::BlockParser</scope><name>parsed_</name></member>
      <member refid="classarrow_1_1csv_1_1_block_parser_1a7a2e1c0838c506eb061b57caed14e29c" prot="protected" virt="non-virtual"><scope>arrow::csv::BlockParser</scope><name>parsed_buffer_</name></member>
      <member refid="classarrow_1_1csv_1_1_block_parser_1ab5755e999d26813bcd0eba8015ea2fd7" prot="protected" virt="non-virtual"><scope>arrow::csv::BlockParser</scope><name>parsed_size_</name></member>
      <member refid="classarrow_1_1csv_1_1_block_parser_1a080b7000ce4d31ce04e48194f2b329c7" prot="public" virt="non-virtual"><scope>arrow::csv::BlockParser</scope><name>ParseFinal</name></member>
      <member refid="classarrow_1_1csv_1_1_block_parser_1a1661f61b21cb46e822d1a9f1d7780868" prot="public" virt="non-virtual"><scope>arrow::csv::BlockParser</scope><name>ParseFinal</name></member>
      <member refid="classarrow_1_1csv_1_1_block_parser_1ac65d9e3c87f244a172d081e17d4df67f" prot="protected" virt="non-virtual"><scope>arrow::csv::BlockParser</scope><name>ParseLine</name></member>
      <member refid="classarrow_1_1csv_1_1_block_parser_1a6b616f4d5b34bfe957dc86e4bcd986ff" prot="protected" virt="non-virtual"><scope>arrow::csv::BlockParser</scope><name>pool_</name></member>
      <member refid="classarrow_1_1csv_1_1_block_parser_1ab5b05839cf293cd7959508215b46d60d" prot="protected" virt="non-virtual"><scope>arrow::csv::BlockParser</scope><name>values_buffers_</name></member>
      <member refid="classarrow_1_1csv_1_1_block_parser_1ab27498fd84e350f779830a6296649735" prot="protected" virt="non-virtual"><scope>arrow::csv::BlockParser</scope><name>values_size_</name></member>
      <member refid="classarrow_1_1csv_1_1_block_parser_1a378da59fa77e61150a611397d305709a" prot="public" virt="non-virtual"><scope>arrow::csv::BlockParser</scope><name>VisitColumn</name></member>
      <member refid="classarrow_1_1csv_1_1_block_parser_1a29d99fbf70de37d1b57a9a480043ffb0" prot="public" virt="non-virtual"><scope>arrow::csv::BlockParser</scope><name>VisitLastRow</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
