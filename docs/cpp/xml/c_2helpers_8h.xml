<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="c_2helpers_8h" kind="file" language="C++">
    <compoundname>helpers.h</compoundname>
    <includes local="no">assert.h</includes>
    <includes refid="string_8h" local="no">string.h</includes>
    <includes refid="abi_8h" local="yes">arrow/c/abi.h</includes>
    <includedby refid="c_2util__internal_8h" local="yes">/arrow/cpp/src/arrow/c/util_internal.h</includedby>
    <incdepgraph>
      <node id="2326">
        <label>assert.h</label>
      </node>
      <node id="2331">
        <label>cstdint</label>
      </node>
      <node id="2335">
        <label>stdint.h</label>
      </node>
      <node id="2334">
        <label>arrow/c/abi.h</label>
        <link refid="abi_8h"/>
        <childnode refid="2335" relation="include">
        </childnode>
      </node>
      <node id="2328">
        <label>string</label>
      </node>
      <node id="2332">
        <label>arrow/vendored/string_view.hpp</label>
      </node>
      <node id="2333">
        <label>arrow/util/visibility.h</label>
        <link refid="arrow_2util_2visibility_8h"/>
      </node>
      <node id="2325">
        <label>/arrow/cpp/src/arrow/c/helpers.h</label>
        <link refid="c_2helpers_8h"/>
        <childnode refid="2326" relation="include">
        </childnode>
        <childnode refid="2327" relation="include">
        </childnode>
        <childnode refid="2334" relation="include">
        </childnode>
      </node>
      <node id="2327">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="2328" relation="include">
        </childnode>
        <childnode refid="2329" relation="include">
        </childnode>
        <childnode refid="2330" relation="include">
        </childnode>
        <childnode refid="2333" relation="include">
        </childnode>
      </node>
      <node id="2329">
        <label>vector</label>
      </node>
      <node id="2330">
        <label>arrow/util/string_view.h</label>
        <link refid="string__view_8h"/>
        <childnode refid="2331" relation="include">
        </childnode>
        <childnode refid="2328" relation="include">
        </childnode>
        <childnode refid="2332" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="2336">
        <label>/arrow/cpp/src/arrow/c/helpers.h</label>
        <link refid="c_2helpers_8h"/>
        <childnode refid="2337" relation="include">
        </childnode>
      </node>
      <node id="2337">
        <label>/arrow/cpp/src/arrow/c/util_internal.h</label>
        <link refid="c_2util__internal_8h"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="c_2helpers_8h_1a8e9fef9db48706c0bc2e3cdc2b91b137" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int ArrowSchemaIsReleased</definition>
        <argsstring>(const struct ArrowSchema *schema)</argsstring>
        <name>ArrowSchemaIsReleased</name>
        <param>
          <type>const struct <ref refid="struct_arrow_schema" kindref="compound">ArrowSchema</ref> *</type>
          <declname>schema</declname>
        </param>
        <briefdescription>
<para>Query whether the C schema is released. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/c/helpers.h" line="30" column="1" bodyfile="/arrow/cpp/src/arrow/c/helpers.h" bodystart="30" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="c_2helpers_8h_1ad5457cd230ad431509c5f4cf6aef1908" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ArrowSchemaMarkReleased</definition>
        <argsstring>(struct ArrowSchema *schema)</argsstring>
        <name>ArrowSchemaMarkReleased</name>
        <param>
          <type>struct <ref refid="struct_arrow_schema" kindref="compound">ArrowSchema</ref> *</type>
          <declname>schema</declname>
        </param>
        <briefdescription>
<para>Mark the C schema released (for use in release callbacks) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/c/helpers.h" line="35" column="1" bodyfile="/arrow/cpp/src/arrow/c/helpers.h" bodystart="35" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="c_2helpers_8h_1a6f3d8f05acffa233a155955c6777f9dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ArrowSchemaMove</definition>
        <argsstring>(struct ArrowSchema *src, struct ArrowSchema *dest)</argsstring>
        <name>ArrowSchemaMove</name>
        <param>
          <type>struct <ref refid="struct_arrow_schema" kindref="compound">ArrowSchema</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>struct <ref refid="struct_arrow_schema" kindref="compound">ArrowSchema</ref> *</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
<para>Move the C schema from <computeroutput>src</computeroutput> to <computeroutput>dest</computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para>Note <computeroutput>dest</computeroutput> must <emphasis>not</emphasis> point to a valid schema already, otherwise there will be a memory leak. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/c/helpers.h" line="43" column="1" bodyfile="/arrow/cpp/src/arrow/c/helpers.h" bodystart="43" bodyend="48"/>
      </memberdef>
      <memberdef kind="function" id="c_2helpers_8h_1ad66e0152c530617d29bff266a00e516c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ArrowSchemaRelease</definition>
        <argsstring>(struct ArrowSchema *schema)</argsstring>
        <name>ArrowSchemaRelease</name>
        <param>
          <type>struct <ref refid="struct_arrow_schema" kindref="compound">ArrowSchema</ref> *</type>
          <declname>schema</declname>
        </param>
        <briefdescription>
<para>Release the C schema, if necessary, by calling its release callback. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/c/helpers.h" line="51" column="1" bodyfile="/arrow/cpp/src/arrow/c/helpers.h" bodystart="51" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="c_2helpers_8h_1ab95ae5d2b5d1abfc1707a08bca25a48e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int ArrowArrayIsReleased</definition>
        <argsstring>(const struct ArrowArray *array)</argsstring>
        <name>ArrowArrayIsReleased</name>
        <param>
          <type>const struct <ref refid="struct_arrow_array" kindref="compound">ArrowArray</ref> *</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Query whether the C array is released. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/c/helpers.h" line="59" column="1" bodyfile="/arrow/cpp/src/arrow/c/helpers.h" bodystart="59" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="c_2helpers_8h_1a510ff862cdb9f9a900c695dc2f67780d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ArrowArrayMarkReleased</definition>
        <argsstring>(struct ArrowArray *array)</argsstring>
        <name>ArrowArrayMarkReleased</name>
        <param>
          <type>struct <ref refid="struct_arrow_array" kindref="compound">ArrowArray</ref> *</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Mark the C array released (for use in release callbacks) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/c/helpers.h" line="64" column="1" bodyfile="/arrow/cpp/src/arrow/c/helpers.h" bodystart="64" bodyend="64"/>
      </memberdef>
      <memberdef kind="function" id="c_2helpers_8h_1aafb19aaee8145b7642155bc3e09e4c26" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ArrowArrayMove</definition>
        <argsstring>(struct ArrowArray *src, struct ArrowArray *dest)</argsstring>
        <name>ArrowArrayMove</name>
        <param>
          <type>struct <ref refid="struct_arrow_array" kindref="compound">ArrowArray</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>struct <ref refid="struct_arrow_array" kindref="compound">ArrowArray</ref> *</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
<para>Move the C array from <computeroutput>src</computeroutput> to <computeroutput>dest</computeroutput> </para>        </briefdescription>
        <detaileddescription>
<para>Note <computeroutput>dest</computeroutput> must <emphasis>not</emphasis> point to a valid array already, otherwise there will be a memory leak. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/c/helpers.h" line="70" column="1" bodyfile="/arrow/cpp/src/arrow/c/helpers.h" bodystart="70" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="c_2helpers_8h_1a5dcd4ea929ac703ecde4bdbc7eed7617" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void ArrowArrayRelease</definition>
        <argsstring>(struct ArrowArray *array)</argsstring>
        <name>ArrowArrayRelease</name>
        <param>
          <type>struct <ref refid="struct_arrow_array" kindref="compound">ArrowArray</ref> *</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Release the C array, if necessary, by calling its release callback. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/c/helpers.h" line="78" column="1" bodyfile="/arrow/cpp/src/arrow/c/helpers.h" bodystart="78" bodyend="83"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;assert.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="string_8h" kindref="compound">string.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="abi_8h" kindref="compound">arrow/c/abi.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="30" refid="c_2helpers_8h_1a8e9fef9db48706c0bc2e3cdc2b91b137" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="c_2helpers_8h_1a8e9fef9db48706c0bc2e3cdc2b91b137" kindref="member">ArrowSchemaIsReleased</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_arrow_schema" kindref="compound">ArrowSchema</ref>*<sp/><ref refid="group__schema-factories_1gab03f1059d8776b1e85ee93c7cd03a078" kindref="member">schema</ref>)<sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>schema-&gt;<ref refid="struct_arrow_schema_1ad471ae72074febbeaf80288f2f673c57" kindref="member">release</ref><sp/>==<sp/>NULL;</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="c_2helpers_8h_1ad5457cd230ad431509c5f4cf6aef1908" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="c_2helpers_8h_1ad5457cd230ad431509c5f4cf6aef1908" kindref="member">ArrowSchemaMarkReleased</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_arrow_schema" kindref="compound">ArrowSchema</ref>*<sp/><ref refid="group__schema-factories_1gab03f1059d8776b1e85ee93c7cd03a078" kindref="member">schema</ref>)<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/>schema-&gt;<ref refid="struct_arrow_schema_1ad471ae72074febbeaf80288f2f673c57" kindref="member">release</ref><sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="c_2helpers_8h_1a6f3d8f05acffa233a155955c6777f9dc" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="c_2helpers_8h_1a6f3d8f05acffa233a155955c6777f9dc" kindref="member">ArrowSchemaMove</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_arrow_schema" kindref="compound">ArrowSchema</ref>*<sp/>src,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_arrow_schema" kindref="compound">ArrowSchema</ref>*<sp/>dest)<sp/>{</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/>assert(dest<sp/>!=<sp/>src);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/>assert(!<ref refid="c_2helpers_8h_1a8e9fef9db48706c0bc2e3cdc2b91b137" kindref="member">ArrowSchemaIsReleased</ref>(src));</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/>memcpy(dest,<sp/>src,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_arrow_schema" kindref="compound">ArrowSchema</ref>));</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><ref refid="c_2helpers_8h_1ad5457cd230ad431509c5f4cf6aef1908" kindref="member">ArrowSchemaMarkReleased</ref>(src);</highlight></codeline>
<codeline lineno="48"><highlight class="normal">}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="c_2helpers_8h_1ad66e0152c530617d29bff266a00e516c" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="c_2helpers_8h_1ad66e0152c530617d29bff266a00e516c" kindref="member">ArrowSchemaRelease</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_arrow_schema" kindref="compound">ArrowSchema</ref>*<sp/><ref refid="group__schema-factories_1gab03f1059d8776b1e85ee93c7cd03a078" kindref="member">schema</ref>)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="c_2helpers_8h_1a8e9fef9db48706c0bc2e3cdc2b91b137" kindref="member">ArrowSchemaIsReleased</ref>(schema))<sp/>{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>schema-&gt;<ref refid="struct_arrow_schema_1ad471ae72074febbeaf80288f2f673c57" kindref="member">release</ref>(schema);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="c_2helpers_8h_1a8e9fef9db48706c0bc2e3cdc2b91b137" kindref="member">ArrowSchemaIsReleased</ref>(schema));</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="c_2helpers_8h_1ab95ae5d2b5d1abfc1707a08bca25a48e" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="c_2helpers_8h_1ab95ae5d2b5d1abfc1707a08bca25a48e" kindref="member">ArrowArrayIsReleased</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_arrow_array" kindref="compound">ArrowArray</ref>*<sp/>array)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>array-&gt;<ref refid="struct_arrow_array_1a03ad36422f651c0b0ccd9ab9c5b7d5d3" kindref="member">release</ref><sp/>==<sp/>NULL;</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="c_2helpers_8h_1a510ff862cdb9f9a900c695dc2f67780d" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="c_2helpers_8h_1a510ff862cdb9f9a900c695dc2f67780d" kindref="member">ArrowArrayMarkReleased</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_arrow_array" kindref="compound">ArrowArray</ref>*<sp/>array)<sp/>{<sp/>array-&gt;<ref refid="struct_arrow_array_1a03ad36422f651c0b0ccd9ab9c5b7d5d3" kindref="member">release</ref><sp/>=<sp/>NULL;<sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="c_2helpers_8h_1aafb19aaee8145b7642155bc3e09e4c26" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="c_2helpers_8h_1aafb19aaee8145b7642155bc3e09e4c26" kindref="member">ArrowArrayMove</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_arrow_array" kindref="compound">ArrowArray</ref>*<sp/>src,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_arrow_array" kindref="compound">ArrowArray</ref>*<sp/>dest)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>assert(dest<sp/>!=<sp/>src);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>assert(!<ref refid="c_2helpers_8h_1ab95ae5d2b5d1abfc1707a08bca25a48e" kindref="member">ArrowArrayIsReleased</ref>(src));</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>memcpy(dest,<sp/>src,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_arrow_array" kindref="compound">ArrowArray</ref>));</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><ref refid="c_2helpers_8h_1a510ff862cdb9f9a900c695dc2f67780d" kindref="member">ArrowArrayMarkReleased</ref>(src);</highlight></codeline>
<codeline lineno="75"><highlight class="normal">}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="c_2helpers_8h_1a5dcd4ea929ac703ecde4bdbc7eed7617" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="c_2helpers_8h_1a5dcd4ea929ac703ecde4bdbc7eed7617" kindref="member">ArrowArrayRelease</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="struct_arrow_array" kindref="compound">ArrowArray</ref>*<sp/>array)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="c_2helpers_8h_1ab95ae5d2b5d1abfc1707a08bca25a48e" kindref="member">ArrowArrayIsReleased</ref>(array))<sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>array-&gt;<ref refid="struct_arrow_array_1a03ad36422f651c0b0ccd9ab9c5b7d5d3" kindref="member">release</ref>(array);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(<ref refid="c_2helpers_8h_1ab95ae5d2b5d1abfc1707a08bca25a48e" kindref="member">ArrowArrayIsReleased</ref>(array));</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal">}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="/arrow/cpp/src/arrow/c/helpers.h"/>
  </compounddef>
</doxygen>
