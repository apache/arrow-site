<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classplasma_1_1_plasma_client" kind="class" language="C++" prot="public">
    <compoundname>plasma::PlasmaClient</compoundname>
    <includes refid="plasma_2client_8h" local="no">plasma/client.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classplasma_1_1_plasma_client_1a945695a7b7d9651d598860f906bc43a4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class PlasmaBuffer</definition>
        <argsstring></argsstring>
        <name>PlasmaBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/client.h" line="297" column="1" bodyfile="/arrow/cpp/src/plasma/client.h" bodystart="297" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classplasma_1_1_plasma_client_1a9302af634bc8dcde2208df01531b9f1d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class PlasmaMutableBuffer</definition>
        <argsstring></argsstring>
        <name>PlasmaMutableBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/client.h" line="298" column="1" bodyfile="/arrow/cpp/src/plasma/client.h" bodystart="298" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classplasma_1_1_plasma_client_1ae5b06d768b42d124be12d166dcaeb92d" prot="private" static="no" mutable="no">
        <type>class <ref refid="arrow_2util_2visibility_8h_1a843cb8dccea68a22a2b9995605cb5a74" kindref="member">ARROW_NO_EXPORT</ref></type>
        <definition>class ARROW_NO_EXPORT plasma::PlasmaClient::Impl</definition>
        <argsstring></argsstring>
        <name>Impl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/client.h" line="303" column="1" bodyfile="/arrow/cpp/src/plasma/client.h" bodystart="305" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classplasma_1_1_plasma_client_1aeaacf9f30f032fc140ce4bc54d8dc8c1" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; Impl &gt;</type>
        <definition>std::shared_ptr&lt;Impl&gt; plasma::PlasmaClient::impl_</definition>
        <argsstring></argsstring>
        <name>impl_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/client.h" line="306" column="1" bodyfile="/arrow/cpp/src/plasma/client.h" bodystart="306" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classplasma_1_1_plasma_client_1a51918848e664ec7958a91fb0044bf5a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>plasma::PlasmaClient::PlasmaClient</definition>
        <argsstring>()</argsstring>
        <name>PlasmaClient</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/client.h" line="48" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_client_1a5fdabb4adc25c184234bef68bbf3f996" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>plasma::PlasmaClient::~PlasmaClient</definition>
        <argsstring>()</argsstring>
        <name>~PlasmaClient</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/client.h" line="49" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_client_1aec01341bd801c10abbfb1f31f1e9eaa2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::PlasmaClient::Connect</definition>
        <argsstring>(const std::string &amp;store_socket_name, const std::string &amp;manager_socket_name=&quot;&quot;, int release_delay=0, int num_retries=-1)</argsstring>
        <name>Connect</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>store_socket_name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>manager_socket_name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>int</type>
          <declname>release_delay</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>int</type>
          <declname>num_retries</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Connect to the local plasma store. </para>        </briefdescription>
        <detaileddescription>
<para>Return the resulting connection.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>store_socket_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the UNIX domain socket to use to connect to the Plasma store. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>manager_socket_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the UNIX domain socket to use to connect to the local Plasma manager. If this is &quot;&quot;, then this function will not connect to a manager. Note that plasma manager is no longer supported, this function will return failure if this is not &quot;&quot;. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>release_delay</parametername>
</parameternamelist>
<parameterdescription>
<para>Deprecated (not used). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_retries</parametername>
</parameternamelist>
<parameterdescription>
<para>number of attempts to connect to IPC socket, default 50 </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The return status. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/client.h" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_client_1adfab576080068064772943b15dd0e5e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::PlasmaClient::SetClientOptions</definition>
        <argsstring>(const std::string &amp;client_name, int64_t output_memory_quota)</argsstring>
        <name>SetClientOptions</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>client_name</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>output_memory_quota</declname>
        </param>
        <briefdescription>
<para>Set runtime options for this client. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>client_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the client, used in debug messages. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output_memory_quota</parametername>
</parameternamelist>
<parameterdescription>
<para>The memory quota in bytes for objects created by this client. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/client.h" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_client_1abe3bad1cc4dca0445107953e7a15c390" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::PlasmaClient::Create</definition>
        <argsstring>(const ObjectID &amp;object_id, int64_t data_size, const uint8_t *metadata, int64_t metadata_size, std::shared_ptr&lt; Buffer &gt; *data, int device_num=0, bool evict_if_full=true)</argsstring>
        <name>Create</name>
        <param>
          <type>const <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &amp;</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>data_size</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>metadata</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>metadata_size</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int</type>
          <declname>device_num</declname>
          <defval>0</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>evict_if_full</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Create an object in the Plasma Store. </para>        </briefdescription>
        <detaileddescription>
<para>Any metadata for this object must be be passed in when the object is created.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID to use for the newly created object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size in bytes of the space to be allocated for this object&apos;s data (this does not include space used for metadata). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>metadata</parametername>
</parameternamelist>
<parameterdescription>
<para>The object&apos;s metadata. If there is no metadata, this pointer should be NULL. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>metadata_size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size in bytes of the metadata. If there is no metadata, this should be 0. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The address of the newly created object will be written here. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>device_num</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of the device where the object is being created. device_num = 0 corresponds to the host, device_num = 1 corresponds to GPU0, device_num = 2 corresponds to GPU1, etc. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>evict_if_full</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to evict other objects to make space for this object. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The return status.</para></simplesect>
The returned object must be released once it is done with. It must also be either sealed or aborted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/client.h" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_client_1aea8e21907136ef313442bda4ff5e85dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::PlasmaClient::CreateAndSeal</definition>
        <argsstring>(const ObjectID &amp;object_id, const std::string &amp;data, const std::string &amp;metadata, bool evict_if_full=true)</argsstring>
        <name>CreateAndSeal</name>
        <param>
          <type>const <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &amp;</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>metadata</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>evict_if_full</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Create and seal an object in the object store. </para>        </briefdescription>
        <detaileddescription>
<para>This is an optimization which allows small objects to be created quickly with fewer messages to the store.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the object to create. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The data for the object to create. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>metadata</parametername>
</parameternamelist>
<parameterdescription>
<para>The metadata for the object to create. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>evict_if_full</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to evict other objects to make space for this object. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The return status. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/client.h" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_client_1a17f983a7a25354f90ffe25494136c8b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::PlasmaClient::CreateAndSealBatch</definition>
        <argsstring>(const std::vector&lt; ObjectID &gt; &amp;object_ids, const std::vector&lt; std::string &gt; &amp;data, const std::vector&lt; std::string &gt; &amp;metadata, bool evict_if_full=true)</argsstring>
        <name>CreateAndSealBatch</name>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &gt; &amp;</type>
          <declname>object_ids</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>metadata</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>evict_if_full</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Create and seal multiple objects in the object store. </para>        </briefdescription>
        <detaileddescription>
<para>This is an optimization of CreateAndSeal to eliminate the cost of IPC per object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector of IDs of the objects to create. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector of data for the objects to create. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>metadata</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector of metadata for the objects to create. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>evict_if_full</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether to evict other objects to make space for these objects. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The return status. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/client.h" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_client_1a5b2626c32d557a57e66800027ba24b96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::PlasmaClient::Get</definition>
        <argsstring>(const std::vector&lt; ObjectID &gt; &amp;object_ids, int64_t timeout_ms, std::vector&lt; ObjectBuffer &gt; *object_buffers)</argsstring>
        <name>Get</name>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &gt; &amp;</type>
          <declname>object_ids</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>timeout_ms</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structplasma_1_1_object_buffer" kindref="compound">ObjectBuffer</ref> &gt; *</type>
          <declname>object_buffers</declname>
        </param>
        <briefdescription>
<para>Get some objects from the Plasma Store. </para>        </briefdescription>
        <detaileddescription>
<para>This function will block until the objects have all been created and sealed in the Plasma Store or the timeout expires.</para><para>If an object was not retrieved, the corresponding metadata and data fields in the <ref refid="structplasma_1_1_object_buffer" kindref="compound">ObjectBuffer</ref> structure will evaluate to false. Objects are automatically released by the client when their buffers get out of scope.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>The IDs of the objects to get. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>The amount of time in milliseconds to wait before this request times out. If this value is -1, then no timeout is set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">object_buffers</parametername>
</parameternamelist>
<parameterdescription>
<para>The object results. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The return status. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/client.h" line="143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_client_1a3b0e952a210fbdf028f5727c2007977e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::PlasmaClient::Get</definition>
        <argsstring>(const ObjectID *object_ids, int64_t num_objects, int64_t timeout_ms, ObjectBuffer *object_buffers)</argsstring>
        <name>Get</name>
        <param>
          <type>const <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> *</type>
          <declname>object_ids</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>num_objects</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>timeout_ms</declname>
        </param>
        <param>
          <type><ref refid="structplasma_1_1_object_buffer" kindref="compound">ObjectBuffer</ref> *</type>
          <declname>object_buffers</declname>
        </param>
        <briefdescription>
<para>Deprecated variant of <ref refid="classplasma_1_1_plasma_client_1a5b2626c32d557a57e66800027ba24b96" kindref="member">Get()</ref> that doesn&apos;t automatically release buffers when they get out of scope. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>The IDs of the objects to get. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_objects</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of object IDs to get. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>The amount of time in milliseconds to wait before this request times out. If this value is -1, then no timeout is set. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object_buffers</parametername>
</parameternamelist>
<parameterdescription>
<para>An array where the results will be stored. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The return status.</para></simplesect>
The caller is responsible for releasing any retrieved objects, but it should not release objects that were not retrieved. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/client.h" line="158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_client_1a3430da5d15d9e81e6499857470a2bf7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::PlasmaClient::Release</definition>
        <argsstring>(const ObjectID &amp;object_id)</argsstring>
        <name>Release</name>
        <param>
          <type>const <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &amp;</type>
          <declname>object_id</declname>
        </param>
        <briefdescription>
<para>Tell Plasma that the client no longer needs the object. </para>        </briefdescription>
        <detaileddescription>
<para>This should be called after <ref refid="classplasma_1_1_plasma_client_1a5b2626c32d557a57e66800027ba24b96" kindref="member">Get()</ref> or <ref refid="classplasma_1_1_plasma_client_1abe3bad1cc4dca0445107953e7a15c390" kindref="member">Create()</ref> when the client is done with the object. After this call, the buffer returned by <ref refid="classplasma_1_1_plasma_client_1a5b2626c32d557a57e66800027ba24b96" kindref="member">Get()</ref> is no longer valid.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the object that is no longer needed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The return status. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/client.h" line="167" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_client_1af573b2ba35f48bf012393e9438ef086d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::PlasmaClient::Contains</definition>
        <argsstring>(const ObjectID &amp;object_id, bool *has_object)</argsstring>
        <name>Contains</name>
        <param>
          <type>const <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &amp;</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>has_object</declname>
        </param>
        <briefdescription>
<para>Check if the object store contains a particular object and the object has been sealed. </para>        </briefdescription>
        <detaileddescription>
<para>The result will be stored in has_object.</para><para><xrefsect id="todo_1_todo000001"><xreftitle>Todo</xreftitle><xrefdescription><para>: We may want to indicate if the object has been created but not sealed.</para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the object whose presence we are checking. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>has_object</parametername>
</parameternamelist>
<parameterdescription>
<para>The function will write true at this address if the object is present and false if it is not present. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The return status. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/client.h" line="179" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_client_1adfcabd40b0971bfe5fea9629dd6f7d40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::PlasmaClient::List</definition>
        <argsstring>(ObjectTable *objects)</argsstring>
        <name>List</name>
        <param>
          <type><ref refid="namespaceplasma_1a115d6577b87e1cc4d9f547eae6b372d6" kindref="member">ObjectTable</ref> *</type>
          <declname>objects</declname>
        </param>
        <briefdescription>
<para>List all the objects in the object store. </para>        </briefdescription>
        <detaileddescription>
<para>This API is experimental and might change in the future.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">objects</parametername>
</parameternamelist>
<parameterdescription>
<para>ObjectTable of objects in the store. For each entry in the map, the following fields are available:<itemizedlist>
<listitem><para>metadata_size: Size of the object metadata in bytes</para></listitem><listitem><para>data_size: Size of the object data in bytes</para></listitem><listitem><para>ref_count: Number of clients referencing the object buffer</para></listitem><listitem><para>create_time: Unix timestamp of the object creation</para></listitem><listitem><para>construct_duration: Object creation time in seconds</para></listitem><listitem><para>state: Is the object still being created or already sealed? </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The return status. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/client.h" line="194" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_client_1a23c13f143dae9053bf3d39d36b40ee77" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::PlasmaClient::Abort</definition>
        <argsstring>(const ObjectID &amp;object_id)</argsstring>
        <name>Abort</name>
        <param>
          <type>const <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &amp;</type>
          <declname>object_id</declname>
        </param>
        <briefdescription>
<para>Abort an unsealed object in the object store. </para>        </briefdescription>
        <detaileddescription>
<para>If the abort succeeds, then it will be as if the object was never created at all. The unsealed object must have only a single reference (the one that would have been removed by calling Seal).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the object to abort. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The return status. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/client.h" line="203" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_client_1ae06a7b43528f66b2dd28abf7138e5b6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::PlasmaClient::Seal</definition>
        <argsstring>(const ObjectID &amp;object_id)</argsstring>
        <name>Seal</name>
        <param>
          <type>const <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &amp;</type>
          <declname>object_id</declname>
        </param>
        <briefdescription>
<para>Seal an object in the object store. </para>        </briefdescription>
        <detaileddescription>
<para>The object will be immutable after this call.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the object to seal. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The return status. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/client.h" line="211" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_client_1a7a38517ca57a9a98814cac85aeff00c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::PlasmaClient::Delete</definition>
        <argsstring>(const ObjectID &amp;object_id)</argsstring>
        <name>Delete</name>
        <param>
          <type>const <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &amp;</type>
          <declname>object_id</declname>
        </param>
        <briefdescription>
<para>Delete an object from the object store. </para>        </briefdescription>
        <detaileddescription>
<para>This currently assumes that the object is present, has been sealed and not used by another client. Otherwise, it is a no operation.</para><para><xrefsect id="todo_1_todo000002"><xreftitle>Todo</xreftitle><xrefdescription><para>We may want to allow the deletion of objects that are not present or haven&apos;t been sealed.</para></xrefdescription></xrefsect></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the object to delete. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The return status. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/client.h" line="222" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_client_1a12165d89219c1103a84d00d9b32d23b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::PlasmaClient::Delete</definition>
        <argsstring>(const std::vector&lt; ObjectID &gt; &amp;object_ids)</argsstring>
        <name>Delete</name>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &gt; &amp;</type>
          <declname>object_ids</declname>
        </param>
        <briefdescription>
<para>Delete a list of objects from the object store. </para>        </briefdescription>
        <detaileddescription>
<para>This currently assumes that the object is present, has been sealed and not used by another client. Otherwise, it is a no operation.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>The list of IDs of the objects to delete. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The return status. If all the objects are nonexistent, return OK. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/client.h" line="230" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_client_1ae1341d3da71394cb35c4d3ad7edc317e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::PlasmaClient::Evict</definition>
        <argsstring>(int64_t num_bytes, int64_t &amp;num_bytes_evicted)</argsstring>
        <name>Evict</name>
        <param>
          <type>int64_t</type>
          <declname>num_bytes</declname>
        </param>
        <param>
          <type>int64_t &amp;</type>
          <declname>num_bytes_evicted</declname>
        </param>
        <briefdescription>
<para>Delete objects until we have freed up num_bytes bytes or there are no more released objects that can be deleted. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to try to free up. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_bytes_evicted</parametername>
</parameternamelist>
<parameterdescription>
<para>Out parameter for total number of bytes of space retrieved. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The return status. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/client.h" line="239" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_client_1a1213138e07211d7014b7afc2d269889a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::PlasmaClient::Refresh</definition>
        <argsstring>(const std::vector&lt; ObjectID &gt; &amp;object_ids)</argsstring>
        <name>Refresh</name>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &gt; &amp;</type>
          <declname>object_ids</declname>
        </param>
        <briefdescription>
<para>Bump objects up in the LRU cache, i.e. </para>        </briefdescription>
        <detaileddescription>
<para>treat them as recently accessed. Objects that do not exist in the store will be ignored.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>The IDs of the objects to bump. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The return status. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/client.h" line="246" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_client_1ae2d7bf52e6d6b6c56f52ebeeb1717e41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::PlasmaClient::Hash</definition>
        <argsstring>(const ObjectID &amp;object_id, uint8_t *digest)</argsstring>
        <name>Hash</name>
        <param>
          <type>const <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &amp;</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>digest</declname>
        </param>
        <briefdescription>
<para>Compute the hash of an object in the object store. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the object we want to hash. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>digest</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer at which to return the hash digest of the object. The pointer must have at least kDigestSize bytes allocated. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The return status. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/client.h" line="254" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_client_1a9975de6729ca214fa6cb8e9fe8abbb9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::PlasmaClient::Subscribe</definition>
        <argsstring>(int *fd)</argsstring>
        <name>Subscribe</name>
        <param>
          <type>int *</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
<para>Subscribe to notifications when objects are sealed in the object store. </para>        </briefdescription>
        <detaileddescription>
<para>Whenever an object is sealed, a message will be written to the client socket that is returned by this method.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>Out parameter for the file descriptor the client should use to read notifications from the object store about sealed objects. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The return status. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/client.h" line="264" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_client_1a5cf17041829848e39e1bfe9ea66ed2c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::PlasmaClient::GetNotification</definition>
        <argsstring>(int fd, ObjectID *object_id, int64_t *data_size, int64_t *metadata_size)</argsstring>
        <name>GetNotification</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type><ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> *</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>data_size</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>metadata_size</declname>
        </param>
        <briefdescription>
<para>Receive next object notification for this client if Subscribe has been called. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>The file descriptor we are reading the notification from. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Out parameter, the object_id of the object that was sealed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Out parameter, the data size of the object that was sealed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>metadata_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Out parameter, the metadata size of the object that was sealed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The return status. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/client.h" line="273" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_client_1ae7fe07514ac53e1f3a2ad87064c97256" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::PlasmaClient::DecodeNotifications</definition>
        <argsstring>(const uint8_t *buffer, std::vector&lt; ObjectID &gt; *object_ids, std::vector&lt; int64_t &gt; *data_sizes, std::vector&lt; int64_t &gt; *metadata_sizes)</argsstring>
        <name>DecodeNotifications</name>
        <param>
          <type>const uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &gt; *</type>
          <declname>object_ids</declname>
        </param>
        <param>
          <type>std::vector&lt; int64_t &gt; *</type>
          <declname>data_sizes</declname>
        </param>
        <param>
          <type>std::vector&lt; int64_t &gt; *</type>
          <declname>metadata_sizes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/client.h" line="276" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_client_1a82ff4d7b988c040aa46674a2fa907eff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::PlasmaClient::Disconnect</definition>
        <argsstring>()</argsstring>
        <name>Disconnect</name>
        <briefdescription>
<para>Disconnect from the local plasma instance, including the local store and manager. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The return status. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/client.h" line="284" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_client_1a89e0d297a8dca36066a780e287931279" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string plasma::PlasmaClient::DebugString</definition>
        <argsstring>()</argsstring>
        <name>DebugString</name>
        <briefdescription>
<para>Get the current debug string from the plasma store server. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The debug string. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/client.h" line="289" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_client_1a5e5f472d7c5ffa0aedceb5d5371622ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t plasma::PlasmaClient::store_capacity</definition>
        <argsstring>()</argsstring>
        <name>store_capacity</name>
        <briefdescription>
<para>Get the memory capacity of the store. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Memory capacity of the store in bytes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/client.h" line="294" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classplasma_1_1_plasma_client_1a2718b25cfb6d82790862f9ad577a0148" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>plasma::PlasmaClient::FRIEND_TEST</definition>
        <argsstring>(TestPlasmaStore, GetTest)</argsstring>
        <name>FRIEND_TEST</name>
        <param>
          <type>TestPlasmaStore</type>
        </param>
        <param>
          <type>GetTest</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/client.h" line="299" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_client_1a2ffc753cb7041d840d3a0f6d98a4d29a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>plasma::PlasmaClient::FRIEND_TEST</definition>
        <argsstring>(TestPlasmaStore, LegacyGetTest)</argsstring>
        <name>FRIEND_TEST</name>
        <param>
          <type>TestPlasmaStore</type>
        </param>
        <param>
          <type>LegacyGetTest</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/client.h" line="300" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_client_1a6eafea38c1343d56c9a146d9046203a2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>plasma::PlasmaClient::FRIEND_TEST</definition>
        <argsstring>(TestPlasmaStore, AbortTest)</argsstring>
        <name>FRIEND_TEST</name>
        <param>
          <type>TestPlasmaStore</type>
        </param>
        <param>
          <type>AbortTest</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/client.h" line="301" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_client_1a47f03ae1e4ee3a22f5e6f73093997bc0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool plasma::PlasmaClient::IsInUse</definition>
        <argsstring>(const ObjectID &amp;object_id)</argsstring>
        <name>IsInUse</name>
        <param>
          <type>const <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &amp;</type>
          <declname>object_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/client.h" line="303" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/plasma/client.h" line="46" column="1" bodyfile="/arrow/cpp/src/plasma/client.h" bodystart="46" bodyend="307"/>
    <listofallmembers>
      <member refid="classplasma_1_1_plasma_client_1a23c13f143dae9053bf3d39d36b40ee77" prot="public" virt="non-virtual"><scope>plasma::PlasmaClient</scope><name>Abort</name></member>
      <member refid="classplasma_1_1_plasma_client_1aec01341bd801c10abbfb1f31f1e9eaa2" prot="public" virt="non-virtual"><scope>plasma::PlasmaClient</scope><name>Connect</name></member>
      <member refid="classplasma_1_1_plasma_client_1af573b2ba35f48bf012393e9438ef086d" prot="public" virt="non-virtual"><scope>plasma::PlasmaClient</scope><name>Contains</name></member>
      <member refid="classplasma_1_1_plasma_client_1abe3bad1cc4dca0445107953e7a15c390" prot="public" virt="non-virtual"><scope>plasma::PlasmaClient</scope><name>Create</name></member>
      <member refid="classplasma_1_1_plasma_client_1aea8e21907136ef313442bda4ff5e85dd" prot="public" virt="non-virtual"><scope>plasma::PlasmaClient</scope><name>CreateAndSeal</name></member>
      <member refid="classplasma_1_1_plasma_client_1a17f983a7a25354f90ffe25494136c8b8" prot="public" virt="non-virtual"><scope>plasma::PlasmaClient</scope><name>CreateAndSealBatch</name></member>
      <member refid="classplasma_1_1_plasma_client_1a89e0d297a8dca36066a780e287931279" prot="public" virt="non-virtual"><scope>plasma::PlasmaClient</scope><name>DebugString</name></member>
      <member refid="classplasma_1_1_plasma_client_1ae7fe07514ac53e1f3a2ad87064c97256" prot="public" virt="non-virtual"><scope>plasma::PlasmaClient</scope><name>DecodeNotifications</name></member>
      <member refid="classplasma_1_1_plasma_client_1a7a38517ca57a9a98814cac85aeff00c3" prot="public" virt="non-virtual"><scope>plasma::PlasmaClient</scope><name>Delete</name></member>
      <member refid="classplasma_1_1_plasma_client_1a12165d89219c1103a84d00d9b32d23b0" prot="public" virt="non-virtual"><scope>plasma::PlasmaClient</scope><name>Delete</name></member>
      <member refid="classplasma_1_1_plasma_client_1a82ff4d7b988c040aa46674a2fa907eff" prot="public" virt="non-virtual"><scope>plasma::PlasmaClient</scope><name>Disconnect</name></member>
      <member refid="classplasma_1_1_plasma_client_1ae1341d3da71394cb35c4d3ad7edc317e" prot="public" virt="non-virtual"><scope>plasma::PlasmaClient</scope><name>Evict</name></member>
      <member refid="classplasma_1_1_plasma_client_1a2718b25cfb6d82790862f9ad577a0148" prot="private" virt="non-virtual"><scope>plasma::PlasmaClient</scope><name>FRIEND_TEST</name></member>
      <member refid="classplasma_1_1_plasma_client_1a2ffc753cb7041d840d3a0f6d98a4d29a" prot="private" virt="non-virtual"><scope>plasma::PlasmaClient</scope><name>FRIEND_TEST</name></member>
      <member refid="classplasma_1_1_plasma_client_1a6eafea38c1343d56c9a146d9046203a2" prot="private" virt="non-virtual"><scope>plasma::PlasmaClient</scope><name>FRIEND_TEST</name></member>
      <member refid="classplasma_1_1_plasma_client_1a5b2626c32d557a57e66800027ba24b96" prot="public" virt="non-virtual"><scope>plasma::PlasmaClient</scope><name>Get</name></member>
      <member refid="classplasma_1_1_plasma_client_1a3b0e952a210fbdf028f5727c2007977e" prot="public" virt="non-virtual"><scope>plasma::PlasmaClient</scope><name>Get</name></member>
      <member refid="classplasma_1_1_plasma_client_1a5cf17041829848e39e1bfe9ea66ed2c2" prot="public" virt="non-virtual"><scope>plasma::PlasmaClient</scope><name>GetNotification</name></member>
      <member refid="classplasma_1_1_plasma_client_1ae2d7bf52e6d6b6c56f52ebeeb1717e41" prot="public" virt="non-virtual"><scope>plasma::PlasmaClient</scope><name>Hash</name></member>
      <member refid="classplasma_1_1_plasma_client_1ae5b06d768b42d124be12d166dcaeb92d" prot="private" virt="non-virtual"><scope>plasma::PlasmaClient</scope><name>Impl</name></member>
      <member refid="classplasma_1_1_plasma_client_1aeaacf9f30f032fc140ce4bc54d8dc8c1" prot="private" virt="non-virtual"><scope>plasma::PlasmaClient</scope><name>impl_</name></member>
      <member refid="classplasma_1_1_plasma_client_1a47f03ae1e4ee3a22f5e6f73093997bc0" prot="private" virt="non-virtual"><scope>plasma::PlasmaClient</scope><name>IsInUse</name></member>
      <member refid="classplasma_1_1_plasma_client_1adfcabd40b0971bfe5fea9629dd6f7d40" prot="public" virt="non-virtual"><scope>plasma::PlasmaClient</scope><name>List</name></member>
      <member refid="classplasma_1_1_plasma_client_1a51918848e664ec7958a91fb0044bf5a2" prot="public" virt="non-virtual"><scope>plasma::PlasmaClient</scope><name>PlasmaClient</name></member>
      <member refid="classplasma_1_1_plasma_client_1a1213138e07211d7014b7afc2d269889a" prot="public" virt="non-virtual"><scope>plasma::PlasmaClient</scope><name>Refresh</name></member>
      <member refid="classplasma_1_1_plasma_client_1a3430da5d15d9e81e6499857470a2bf7b" prot="public" virt="non-virtual"><scope>plasma::PlasmaClient</scope><name>Release</name></member>
      <member refid="classplasma_1_1_plasma_client_1ae06a7b43528f66b2dd28abf7138e5b6d" prot="public" virt="non-virtual"><scope>plasma::PlasmaClient</scope><name>Seal</name></member>
      <member refid="classplasma_1_1_plasma_client_1adfab576080068064772943b15dd0e5e4" prot="public" virt="non-virtual"><scope>plasma::PlasmaClient</scope><name>SetClientOptions</name></member>
      <member refid="classplasma_1_1_plasma_client_1a5e5f472d7c5ffa0aedceb5d5371622ce" prot="public" virt="non-virtual"><scope>plasma::PlasmaClient</scope><name>store_capacity</name></member>
      <member refid="classplasma_1_1_plasma_client_1a9975de6729ca214fa6cb8e9fe8abbb9a" prot="public" virt="non-virtual"><scope>plasma::PlasmaClient</scope><name>Subscribe</name></member>
      <member refid="classplasma_1_1_plasma_client_1a5fdabb4adc25c184234bef68bbf3f996" prot="public" virt="non-virtual"><scope>plasma::PlasmaClient</scope><name>~PlasmaClient</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
