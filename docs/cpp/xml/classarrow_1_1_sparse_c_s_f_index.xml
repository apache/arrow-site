<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_sparse_c_s_f_index" kind="class" language="C++" prot="public">
    <compoundname>arrow::SparseCSFIndex</compoundname>
    <basecompoundref prot="public" virt="non-virtual">arrow::internal::SparseIndexBase&lt; SparseCSFIndex &gt;</basecompoundref>
    <includes refid="sparse__tensor_8h" local="no">arrow/sparse_tensor.h</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classarrow_1_1_sparse_c_s_f_index_1a223ad7a537132e6dd921bfadc293ebf2" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="structarrow_1_1_sparse_tensor_format_1a0693b2fa5192ae86d525995fe6f64f3a" kindref="member">SparseTensorFormat::type</ref></type>
        <definition>constexpr SparseTensorFormat::type arrow::SparseCSFIndex::format_id</definition>
        <argsstring></argsstring>
        <name>format_id</name>
        <initializer>= <ref refid="structarrow_1_1_sparse_tensor_format_1a0693b2fa5192ae86d525995fe6f64f3aaeb7b593db5faea5772798b3ed0646ef3" kindref="member">SparseTensorFormat::CSF</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="359" column="1" bodyfile="/arrow/cpp/src/arrow/sparse_tensor.h" bodystart="359" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_sparse_c_s_f_index_1a6eb4c9f291b36305f334fd73cf3fcc3f" prot="public" static="yes" mutable="no">
        <type>constexpr char const  *</type>
        <definition>constexpr char const* arrow::SparseCSFIndex::kTypeName</definition>
        <argsstring></argsstring>
        <name>kTypeName</name>
        <initializer>= &quot;SparseCSFIndex&quot;</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="360" column="1" bodyfile="/arrow/cpp/src/arrow/sparse_tensor.h" bodystart="360" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classarrow_1_1_sparse_c_s_f_index_1ac6d434d24d508356ac6bd461d6b88396" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_tensor" kindref="compound">Tensor</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;Tensor&gt; &gt; arrow::SparseCSFIndex::indptr_</definition>
        <argsstring></argsstring>
        <name>indptr_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="401" column="1" bodyfile="/arrow/cpp/src/arrow/sparse_tensor.h" bodystart="401" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_sparse_c_s_f_index_1ab029bd000fd29a0bc1a8fc29c5509c53" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_tensor" kindref="compound">Tensor</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;Tensor&gt; &gt; arrow::SparseCSFIndex::indices_</definition>
        <argsstring></argsstring>
        <name>indices_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="402" column="1" bodyfile="/arrow/cpp/src/arrow/sparse_tensor.h" bodystart="402" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_sparse_c_s_f_index_1a5001f79190be7ee5fba01cba2a9a4ee4" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; int64_t &gt;</type>
        <definition>std::vector&lt;int64_t&gt; arrow::SparseCSFIndex::axis_order_</definition>
        <argsstring></argsstring>
        <name>axis_order_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="403" column="1" bodyfile="/arrow/cpp/src/arrow/sparse_tensor.h" bodystart="403" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1_sparse_c_s_f_index_1aa997add078c956ed1a78f349883fa175" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_sparse_c_s_f_index" kindref="compound">SparseCSFIndex</ref> &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;SparseCSFIndex&gt; &gt; arrow::SparseCSFIndex::Make</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;indptr_type, const std::shared_ptr&lt; DataType &gt; &amp;indices_type, const std::vector&lt; int64_t &gt; &amp;indices_shapes, const std::vector&lt; int64_t &gt; &amp;axis_order, const std::vector&lt; std::shared_ptr&lt; Buffer &gt;&gt; &amp;indptr_data, const std::vector&lt; std::shared_ptr&lt; Buffer &gt;&gt; &amp;indices_data)</argsstring>
        <name>Make</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>indptr_type</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>indices_type</declname>
        </param>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>indices_shapes</declname>
        </param>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>axis_order</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;&gt; &amp;</type>
          <declname>indptr_data</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;&gt; &amp;</type>
          <declname>indices_data</declname>
        </param>
        <briefdescription>
<para>Make <ref refid="classarrow_1_1_sparse_c_s_f_index" kindref="compound">SparseCSFIndex</ref> from raw properties. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="363" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_sparse_c_s_f_index_1a2eed6db65c80556ea20114ee40c83eab" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_sparse_c_s_f_index" kindref="compound">SparseCSFIndex</ref> &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;SparseCSFIndex&gt; &gt; arrow::SparseCSFIndex::Make</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;indices_type, const std::vector&lt; int64_t &gt; &amp;indices_shapes, const std::vector&lt; int64_t &gt; &amp;axis_order, const std::vector&lt; std::shared_ptr&lt; Buffer &gt;&gt; &amp;indptr_data, const std::vector&lt; std::shared_ptr&lt; Buffer &gt;&gt; &amp;indices_data)</argsstring>
        <name>Make</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>indices_type</declname>
        </param>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>indices_shapes</declname>
        </param>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>axis_order</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;&gt; &amp;</type>
          <declname>indptr_data</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;&gt; &amp;</type>
          <declname>indices_data</declname>
        </param>
        <briefdescription>
<para>Make <ref refid="classarrow_1_1_sparse_c_s_f_index" kindref="compound">SparseCSFIndex</ref> from raw properties. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="371" column="1" bodyfile="/arrow/cpp/src/arrow/sparse_tensor.h" bodystart="371" bodyend="378"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1_sparse_c_s_f_index_1ad3dacca7bab263d69794143c56d92af8" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::SparseCSFIndex::SparseCSFIndex</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; Tensor &gt;&gt; &amp;indptr, const std::vector&lt; std::shared_ptr&lt; Tensor &gt;&gt; &amp;indices, const std::vector&lt; int64_t &gt; &amp;axis_order)</argsstring>
        <name>SparseCSFIndex</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_tensor" kindref="compound">Tensor</ref> &gt;&gt; &amp;</type>
          <declname>indptr</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_tensor" kindref="compound">Tensor</ref> &gt;&gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>axis_order</declname>
        </param>
        <briefdescription>
<para>Construct <ref refid="classarrow_1_1_sparse_c_s_f_index" kindref="compound">SparseCSFIndex</ref> from two index vectors. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="381" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_sparse_c_s_f_index_1a3306579d18595ecaf5bf672985ba5087" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_tensor" kindref="compound">Tensor</ref> &gt; &gt; &amp;</type>
        <definition>const std::vector&lt;std::shared_ptr&lt;Tensor&gt; &gt;&amp; arrow::SparseCSFIndex::indptr</definition>
        <argsstring>() const</argsstring>
        <name>indptr</name>
        <briefdescription>
<para>Return a 1D vector of indptr tensors. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="386" column="1" bodyfile="/arrow/cpp/src/arrow/sparse_tensor.h" bodystart="386" bodyend="386"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_sparse_c_s_f_index_1a6b6924ea0b2a17497376a55d95bb0149" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_tensor" kindref="compound">Tensor</ref> &gt; &gt; &amp;</type>
        <definition>const std::vector&lt;std::shared_ptr&lt;Tensor&gt; &gt;&amp; arrow::SparseCSFIndex::indices</definition>
        <argsstring>() const</argsstring>
        <name>indices</name>
        <briefdescription>
<para>Return a 1D vector of indices tensors. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="389" column="1" bodyfile="/arrow/cpp/src/arrow/sparse_tensor.h" bodystart="389" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_sparse_c_s_f_index_1a21304e4a9e1f5af9ce03ed7660c04c76" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; int64_t &gt; &amp;</type>
        <definition>const std::vector&lt;int64_t&gt;&amp; arrow::SparseCSFIndex::axis_order</definition>
        <argsstring>() const</argsstring>
        <name>axis_order</name>
        <briefdescription>
<para>Return a 1D vector specifying the order of axes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="392" column="1" bodyfile="/arrow/cpp/src/arrow/sparse_tensor.h" bodystart="392" bodyend="392"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_sparse_c_s_f_index_1a3ceda4e2d8af26aa15f0a6d31e87c5bd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string arrow::SparseCSFIndex::ToString</definition>
        <argsstring>() const override</argsstring>
        <name>ToString</name>
        <reimplements refid="classarrow_1_1_sparse_index_1a87f804e725e7ca43871862eb772f21ee">ToString</reimplements>
        <briefdescription>
<para>Return a string representation of the sparse index. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="395" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_sparse_c_s_f_index_1a27811cd98c89aee0b6c4853069514989" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::SparseCSFIndex::Equals</definition>
        <argsstring>(const SparseCSFIndex &amp;other) const</argsstring>
        <name>Equals</name>
        <param>
          <type>const <ref refid="classarrow_1_1_sparse_c_s_f_index" kindref="compound">SparseCSFIndex</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Return whether the CSF indices are equal. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="398" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>EXPERIMENTAL: The index data for a CSF sparse tensor. </para>    </briefdescription>
    <detaileddescription>
<para>A CSF sparse index manages the location of its non-zero values by set of prefix trees. Each path from a root to leaf forms one tensor non-zero index. CSF is implemented with three vectors.</para><para>Vectors inptr and indices contain N-1 and N buffers respectively, where N is the number of dimensions. Axis_order is a vector of integers of length N. Indptr and indices describe the set of prefix trees. Trees traverse dimensions in order given by axis_order. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="4232">
        <label>arrow::SparseCSFIndex</label>
        <link refid="classarrow_1_1_sparse_c_s_f_index"/>
        <childnode refid="4233" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4233">
        <label>arrow::internal::SparseIndexBase&lt; SparseCSFIndex &gt;</label>
        <childnode refid="4234" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4234">
        <label>arrow::SparseIndex</label>
        <link refid="classarrow_1_1_sparse_index"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4235">
        <label>arrow::SparseCSFIndex</label>
        <link refid="classarrow_1_1_sparse_c_s_f_index"/>
        <childnode refid="4236" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4236">
        <label>arrow::internal::SparseIndexBase&lt; SparseCSFIndex &gt;</label>
        <childnode refid="4237" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4237">
        <label>arrow::SparseIndex</label>
        <link refid="classarrow_1_1_sparse_index"/>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="357" column="1" bodyfile="/arrow/cpp/src/arrow/sparse_tensor.h" bodystart="357" bodyend="404"/>
    <listofallmembers>
      <member refid="classarrow_1_1_sparse_c_s_f_index_1a21304e4a9e1f5af9ce03ed7660c04c76" prot="public" virt="non-virtual"><scope>arrow::SparseCSFIndex</scope><name>axis_order</name></member>
      <member refid="classarrow_1_1_sparse_c_s_f_index_1a5001f79190be7ee5fba01cba2a9a4ee4" prot="protected" virt="non-virtual"><scope>arrow::SparseCSFIndex</scope><name>axis_order_</name></member>
      <member refid="classarrow_1_1_sparse_c_s_f_index_1a27811cd98c89aee0b6c4853069514989" prot="public" virt="non-virtual"><scope>arrow::SparseCSFIndex</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_sparse_c_s_f_index_1a223ad7a537132e6dd921bfadc293ebf2" prot="public" virt="non-virtual"><scope>arrow::SparseCSFIndex</scope><name>format_id</name></member>
      <member refid="classarrow_1_1_sparse_index_1a1f44c6ddcec5d1f7e40e07bd0cdebe8a" prot="public" virt="non-virtual" ambiguityscope="SparseIndexBase&lt; SparseCSFIndex &gt;::"><scope>arrow::SparseCSFIndex</scope><name>format_id</name></member>
      <member refid="classarrow_1_1_sparse_index_1a69c44ac95e91a2c96e705bb11c0f4559" prot="protected" virt="non-virtual"><scope>arrow::SparseCSFIndex</scope><name>format_id_</name></member>
      <member refid="classarrow_1_1_sparse_c_s_f_index_1a6b6924ea0b2a17497376a55d95bb0149" prot="public" virt="non-virtual"><scope>arrow::SparseCSFIndex</scope><name>indices</name></member>
      <member refid="classarrow_1_1_sparse_c_s_f_index_1ab029bd000fd29a0bc1a8fc29c5509c53" prot="protected" virt="non-virtual"><scope>arrow::SparseCSFIndex</scope><name>indices_</name></member>
      <member refid="classarrow_1_1_sparse_c_s_f_index_1a3306579d18595ecaf5bf672985ba5087" prot="public" virt="non-virtual"><scope>arrow::SparseCSFIndex</scope><name>indptr</name></member>
      <member refid="classarrow_1_1_sparse_c_s_f_index_1ac6d434d24d508356ac6bd461d6b88396" prot="protected" virt="non-virtual"><scope>arrow::SparseCSFIndex</scope><name>indptr_</name></member>
      <member refid="classarrow_1_1_sparse_c_s_f_index_1a6eb4c9f291b36305f334fd73cf3fcc3f" prot="public" virt="non-virtual"><scope>arrow::SparseCSFIndex</scope><name>kTypeName</name></member>
      <member refid="classarrow_1_1_sparse_c_s_f_index_1aa997add078c956ed1a78f349883fa175" prot="public" virt="non-virtual"><scope>arrow::SparseCSFIndex</scope><name>Make</name></member>
      <member refid="classarrow_1_1_sparse_c_s_f_index_1a2eed6db65c80556ea20114ee40c83eab" prot="public" virt="non-virtual"><scope>arrow::SparseCSFIndex</scope><name>Make</name></member>
      <member refid="classarrow_1_1_sparse_index_1a8ed4f5943abfbc36139f7477056e57b4" prot="public" virt="non-virtual"><scope>arrow::SparseCSFIndex</scope><name>non_zero_length</name></member>
      <member refid="classarrow_1_1_sparse_index_1aafc279016c04336211f8358ac9b8ab66" prot="protected" virt="non-virtual"><scope>arrow::SparseCSFIndex</scope><name>non_zero_length_</name></member>
      <member refid="classarrow_1_1_sparse_c_s_f_index_1ad3dacca7bab263d69794143c56d92af8" prot="public" virt="non-virtual"><scope>arrow::SparseCSFIndex</scope><name>SparseCSFIndex</name></member>
      <member refid="classarrow_1_1_sparse_index_1a6a4137b019e068be8b99ba50a5d2e03f" prot="public" virt="non-virtual"><scope>arrow::SparseCSFIndex</scope><name>SparseIndex</name></member>
      <member refid="classarrow_1_1_sparse_c_s_f_index_1a3ceda4e2d8af26aa15f0a6d31e87c5bd" prot="public" virt="virtual"><scope>arrow::SparseCSFIndex</scope><name>ToString</name></member>
      <member refid="classarrow_1_1_sparse_index_1a9ab0a6d0752c18d422fcb1ce60d9412b" prot="public" virt="virtual"><scope>arrow::SparseCSFIndex</scope><name>ValidateShape</name></member>
      <member refid="classarrow_1_1_sparse_index_1a8832f2b37796039a82c2f81e118efa88" prot="public" virt="virtual"><scope>arrow::SparseCSFIndex</scope><name>~SparseIndex</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
