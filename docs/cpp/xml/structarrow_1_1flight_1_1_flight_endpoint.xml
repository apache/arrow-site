<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structarrow_1_1flight_1_1_flight_endpoint" kind="struct" language="C++" prot="public">
    <compoundname>arrow::flight::FlightEndpoint</compoundname>
    <includes refid="arrow_2flight_2types_8h" local="no">arrow/flight/types.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structarrow_1_1flight_1_1_flight_endpoint_1ae88cc1607d53a206d33ea692c3f5d4f0" prot="public" static="no" mutable="no">
        <type><ref refid="structarrow_1_1flight_1_1_ticket" kindref="compound">Ticket</ref></type>
        <definition>Ticket arrow::flight::FlightEndpoint::ticket</definition>
        <argsstring></argsstring>
        <name>ticket</name>
        <briefdescription>
<para>Opaque ticket identify; use with DoGet RPC. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="326" column="1" bodyfile="/arrow/cpp/src/arrow/flight/types.h" bodystart="326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structarrow_1_1flight_1_1_flight_endpoint_1a93c933152f5458413022c74b3a68ec3e" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structarrow_1_1flight_1_1_location" kindref="compound">Location</ref> &gt;</type>
        <definition>std::vector&lt;Location&gt; arrow::flight::FlightEndpoint::locations</definition>
        <argsstring></argsstring>
        <name>locations</name>
        <briefdescription>
<para>List of locations where ticket can be redeemed. </para>        </briefdescription>
        <detaileddescription>
<para>If the list is empty, the ticket can only be redeemed on the current service where the ticket was generated </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="331" column="1" bodyfile="/arrow/cpp/src/arrow/flight/types.h" bodystart="331" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structarrow_1_1flight_1_1_flight_endpoint_1a7d2d278a5859df838e8d728b6e61015e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::flight::FlightEndpoint::Equals</definition>
        <argsstring>(const FlightEndpoint &amp;other) const</argsstring>
        <name>Equals</name>
        <param>
          <type>const <ref refid="structarrow_1_1flight_1_1_flight_endpoint" kindref="compound">FlightEndpoint</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="333" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structarrow_1_1flight_1_1_flight_endpoint_1a3b35086870a2957af5cb528bfbf1557e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const FlightEndpoint &amp;left, const FlightEndpoint &amp;right)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structarrow_1_1flight_1_1_flight_endpoint" kindref="compound">FlightEndpoint</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1flight_1_1_flight_endpoint" kindref="compound">FlightEndpoint</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="335" column="1" bodyfile="/arrow/cpp/src/arrow/flight/types.h" bodystart="335" bodyend="337"/>
      </memberdef>
      <memberdef kind="friend" id="structarrow_1_1flight_1_1_flight_endpoint_1a0fec73c99d3fa3b91a86f9e4c4ca9f56" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const FlightEndpoint &amp;left, const FlightEndpoint &amp;right)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structarrow_1_1flight_1_1_flight_endpoint" kindref="compound">FlightEndpoint</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1flight_1_1_flight_endpoint" kindref="compound">FlightEndpoint</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="338" column="1" bodyfile="/arrow/cpp/src/arrow/flight/types.h" bodystart="338" bodyend="340"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A flight ticket and list of locations where the ticket can be redeemed. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1897">
        <label>arrow::flight::Ticket</label>
        <link refid="structarrow_1_1flight_1_1_ticket"/>
      </node>
      <node id="1896">
        <label>arrow::flight::FlightEndpoint</label>
        <link refid="structarrow_1_1flight_1_1_flight_endpoint"/>
        <childnode refid="1897" relation="usage">
          <edgelabel>ticket</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/flight/types.h" line="324" column="1" bodyfile="/arrow/cpp/src/arrow/flight/types.h" bodystart="324" bodyend="341"/>
    <listofallmembers>
      <member refid="structarrow_1_1flight_1_1_flight_endpoint_1a7d2d278a5859df838e8d728b6e61015e" prot="public" virt="non-virtual"><scope>arrow::flight::FlightEndpoint</scope><name>Equals</name></member>
      <member refid="structarrow_1_1flight_1_1_flight_endpoint_1a93c933152f5458413022c74b3a68ec3e" prot="public" virt="non-virtual"><scope>arrow::flight::FlightEndpoint</scope><name>locations</name></member>
      <member refid="structarrow_1_1flight_1_1_flight_endpoint_1a0fec73c99d3fa3b91a86f9e4c4ca9f56" prot="public" virt="non-virtual"><scope>arrow::flight::FlightEndpoint</scope><name>operator!=</name></member>
      <member refid="structarrow_1_1flight_1_1_flight_endpoint_1a3b35086870a2957af5cb528bfbf1557e" prot="public" virt="non-virtual"><scope>arrow::flight::FlightEndpoint</scope><name>operator==</name></member>
      <member refid="structarrow_1_1flight_1_1_flight_endpoint_1ae88cc1607d53a206d33ea692c3f5d4f0" prot="public" virt="non-virtual"><scope>arrow::flight::FlightEndpoint</scope><name>ticket</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
