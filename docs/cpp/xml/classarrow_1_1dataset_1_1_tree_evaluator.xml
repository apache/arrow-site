<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1dataset_1_1_tree_evaluator" kind="class" language="C++" prot="public">
    <compoundname>arrow::dataset::TreeEvaluator</compoundname>
    <basecompoundref refid="classarrow_1_1dataset_1_1_expression_evaluator" prot="public" virt="non-virtual">arrow::dataset::ExpressionEvaluator</basecompoundref>
    <includes refid="arrow_2dataset_2filter_8h" local="no">arrow/dataset/filter.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1dataset_1_1_tree_evaluator_1a7638486d517ecd592b85ba50f8183a5d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; <ref refid="structarrow_1_1compute_1_1_datum" kindref="compound">compute::Datum</ref> &gt;</type>
        <definition>Result&lt;compute::Datum&gt; arrow::dataset::TreeEvaluator::Evaluate</definition>
        <argsstring>(const Expression &amp;expr, const RecordBatch &amp;batch, MemoryPool *pool) const override</argsstring>
        <name>Evaluate</name>
        <reimplements refid="classarrow_1_1dataset_1_1_expression_evaluator_1a89539736adcd4fcc96a4a32ef8e253a0">Evaluate</reimplements>
        <param>
          <type>const <ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref> &amp;</type>
          <declname>expr</declname>
        </param>
        <param>
          <type>const <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref> &amp;</type>
          <declname>batch</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
<para>Evaluate expr against each row of a <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Returned Datum will be of either SCALAR or ARRAY kind. A return value of ARRAY kind will have length == batch.num_rows() An return value of SCALAR kind is equivalent to an array of the same type whose slots contain a single repeated value.</para><para>expr must be validated against the schema of batch before calling this method. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/filter.h" line="608" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1dataset_1_1_tree_evaluator_1ab5c7415cf1fc41334848bd211bbf9d1c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;RecordBatch&gt; &gt; arrow::dataset::TreeEvaluator::Filter</definition>
        <argsstring>(const compute::Datum &amp;selection, const std::shared_ptr&lt; RecordBatch &gt; &amp;batch, MemoryPool *pool) const override</argsstring>
        <name>Filter</name>
        <reimplements refid="classarrow_1_1dataset_1_1_expression_evaluator_1a998f6b025f563b28148fe6a7def85be4">Filter</reimplements>
        <param>
          <type>const <ref refid="structarrow_1_1compute_1_1_datum" kindref="compound">compute::Datum</ref> &amp;</type>
          <declname>selection</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref> &gt; &amp;</type>
          <declname>batch</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/filter.h" line="611" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>construct an Evaluator which uses compute kernels to evaluate expressions and filter record batches in depth first order </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4704">
        <label>arrow::dataset::ExpressionEvaluator</label>
        <link refid="classarrow_1_1dataset_1_1_expression_evaluator"/>
      </node>
      <node id="4703">
        <label>arrow::dataset::TreeEvaluator</label>
        <link refid="classarrow_1_1dataset_1_1_tree_evaluator"/>
        <childnode refid="4704" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4706">
        <label>arrow::dataset::ExpressionEvaluator</label>
        <link refid="classarrow_1_1dataset_1_1_expression_evaluator"/>
      </node>
      <node id="4705">
        <label>arrow::dataset::TreeEvaluator</label>
        <link refid="classarrow_1_1dataset_1_1_tree_evaluator"/>
        <childnode refid="4706" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/dataset/filter.h" line="606" column="1" bodyfile="/arrow/cpp/src/arrow/dataset/filter.h" bodystart="606" bodyend="617"/>
    <listofallmembers>
      <member refid="classarrow_1_1dataset_1_1_tree_evaluator_1a7638486d517ecd592b85ba50f8183a5d" prot="public" virt="virtual"><scope>arrow::dataset::TreeEvaluator</scope><name>Evaluate</name></member>
      <member refid="classarrow_1_1dataset_1_1_expression_evaluator_1a21e0bcc1077b15d56b5d8039e7e32314" prot="public" virt="non-virtual" ambiguityscope="arrow::dataset::ExpressionEvaluator::"><scope>arrow::dataset::TreeEvaluator</scope><name>Evaluate</name></member>
      <member refid="classarrow_1_1dataset_1_1_tree_evaluator_1ab5c7415cf1fc41334848bd211bbf9d1c" prot="public" virt="virtual"><scope>arrow::dataset::TreeEvaluator</scope><name>Filter</name></member>
      <member refid="classarrow_1_1dataset_1_1_expression_evaluator_1a76cef0916b1ade6ce0998cf3d95b9318" prot="public" virt="non-virtual" ambiguityscope="arrow::dataset::ExpressionEvaluator::"><scope>arrow::dataset::TreeEvaluator</scope><name>Filter</name></member>
      <member refid="classarrow_1_1dataset_1_1_expression_evaluator_1a33a27e2424444f30cb064f94919e0c3c" prot="public" virt="non-virtual"><scope>arrow::dataset::TreeEvaluator</scope><name>FilterBatches</name></member>
      <member refid="classarrow_1_1dataset_1_1_expression_evaluator_1a69b836524705c4de07a154745a6f97d9" prot="public" virt="non-virtual"><scope>arrow::dataset::TreeEvaluator</scope><name>Null</name></member>
      <member refid="classarrow_1_1dataset_1_1_expression_evaluator_1ad03028b82d40c0c225ab4a29cc213c6e" prot="public" virt="virtual"><scope>arrow::dataset::TreeEvaluator</scope><name>~ExpressionEvaluator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
