<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1dataset_1_1_partitioning_factory" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>arrow::dataset::PartitioningFactory</compoundname>
    <includes refid="partition_8h" local="no">arrow/dataset/partition.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1dataset_1_1_partitioning_factory_1a9298a9ac05d0be8c8e1713e1c569d18d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual arrow::dataset::PartitioningFactory::~PartitioningFactory</definition>
        <argsstring>()=default</argsstring>
        <name>~PartitioningFactory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/partition.h" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1dataset_1_1_partitioning_factory_1afd3b563fc589b700ef23d2726ac6d518" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::string</type>
        <definition>virtual std::string arrow::dataset::PartitioningFactory::type_name</definition>
        <argsstring>() const =0</argsstring>
        <name>type_name</name>
        <briefdescription>
<para>The name identifying the kind of partitioning. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/partition.h" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1dataset_1_1_partitioning_factory_1adeb6f3f947efe7843fa57d348d7a01b0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt; &gt;</type>
        <definition>virtual Result&lt;std::shared_ptr&lt;Schema&gt; &gt; arrow::dataset::PartitioningFactory::Inspect</definition>
        <argsstring>(const std::vector&lt; util::string_view &gt; &amp;paths) const =0</argsstring>
        <name>Inspect</name>
        <param>
          <type>const std::vector&lt; util::string_view &gt; &amp;</type>
          <declname>paths</declname>
        </param>
        <briefdescription>
<para>Get the schema for the resulting <ref refid="classarrow_1_1dataset_1_1_partitioning" kindref="compound">Partitioning</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/partition.h" line="97" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1dataset_1_1_partitioning_factory_1a5b601acefcfda6236dad628bbce072fc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1dataset_1_1_partitioning" kindref="compound">Partitioning</ref> &gt; &gt;</type>
        <definition>virtual Result&lt;std::shared_ptr&lt;Partitioning&gt; &gt; arrow::dataset::PartitioningFactory::Finish</definition>
        <argsstring>(const std::shared_ptr&lt; Schema &gt; &amp;schema) const =0</argsstring>
        <name>Finish</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt; &amp;</type>
          <declname>schema</declname>
        </param>
        <briefdescription>
<para>Create a partitioning using the provided schema (fields may be dropped). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/partition.h" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1dataset_1_1_partitioning_factory_1a4767c2c0622576a981c6de2810c80c07" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; <ref refid="classarrow_1_1dataset_1_1_write_plan" kindref="compound">WritePlan</ref> &gt;</type>
        <definition>virtual Result&lt;WritePlan&gt; arrow::dataset::PartitioningFactory::MakeWritePlan</definition>
        <argsstring>(FragmentIterator fragments, const std::shared_ptr&lt; Schema &gt; &amp;schema)</argsstring>
        <name>MakeWritePlan</name>
        <param>
          <type><ref refid="namespacearrow_1_1dataset_1a6270dc3eca80575744d55456da9447c2" kindref="member">FragmentIterator</ref></type>
          <declname>fragments</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt; &amp;</type>
          <declname>schema</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classarrow_1_1dataset_1_1_write_plan" kindref="compound">WritePlan</ref> for the provided fragments. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/partition.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1dataset_1_1_partitioning_factory_1aedadc9535799b3a53648e3618a0faf60" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; <ref refid="classarrow_1_1dataset_1_1_write_plan" kindref="compound">WritePlan</ref> &gt;</type>
        <definition>virtual Result&lt;WritePlan&gt; arrow::dataset::PartitioningFactory::MakeWritePlan</definition>
        <argsstring>(FragmentIterator fragments)</argsstring>
        <name>MakeWritePlan</name>
        <param>
          <type><ref refid="namespacearrow_1_1dataset_1a6270dc3eca80575744d55456da9447c2" kindref="member">FragmentIterator</ref></type>
          <declname>fragments</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classarrow_1_1dataset_1_1_write_plan" kindref="compound">WritePlan</ref> for the provided fragments, inferring schema. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/partition.h" line="110" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classarrow_1_1dataset_1_1_partitioning_factory" kindref="compound">PartitioningFactory</ref> provides creation of a partitioning when the specific schema must be inferred from available paths (no explicit schema is known). </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/arrow/dataset/partition.h" line="89" column="1" bodyfile="/arrow/cpp/src/arrow/dataset/partition.h" bodystart="89" bodyend="111"/>
    <listofallmembers>
      <member refid="classarrow_1_1dataset_1_1_partitioning_factory_1a5b601acefcfda6236dad628bbce072fc" prot="public" virt="pure-virtual"><scope>arrow::dataset::PartitioningFactory</scope><name>Finish</name></member>
      <member refid="classarrow_1_1dataset_1_1_partitioning_factory_1adeb6f3f947efe7843fa57d348d7a01b0" prot="public" virt="pure-virtual"><scope>arrow::dataset::PartitioningFactory</scope><name>Inspect</name></member>
      <member refid="classarrow_1_1dataset_1_1_partitioning_factory_1a4767c2c0622576a981c6de2810c80c07" prot="public" virt="virtual"><scope>arrow::dataset::PartitioningFactory</scope><name>MakeWritePlan</name></member>
      <member refid="classarrow_1_1dataset_1_1_partitioning_factory_1aedadc9535799b3a53648e3618a0faf60" prot="public" virt="virtual"><scope>arrow::dataset::PartitioningFactory</scope><name>MakeWritePlan</name></member>
      <member refid="classarrow_1_1dataset_1_1_partitioning_factory_1afd3b563fc589b700ef23d2726ac6d518" prot="public" virt="pure-virtual"><scope>arrow::dataset::PartitioningFactory</scope><name>type_name</name></member>
      <member refid="classarrow_1_1dataset_1_1_partitioning_factory_1a9298a9ac05d0be8c8e1713e1c569d18d" prot="public" virt="virtual"><scope>arrow::dataset::PartitioningFactory</scope><name>~PartitioningFactory</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
