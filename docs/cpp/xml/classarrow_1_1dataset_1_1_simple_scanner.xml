<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1dataset_1_1_simple_scanner" kind="class" language="C++" prot="public">
    <compoundname>arrow::dataset::SimpleScanner</compoundname>
    <basecompoundref refid="classarrow_1_1dataset_1_1_scanner" prot="public" virt="non-virtual">arrow::dataset::Scanner</basecompoundref>
    <includes refid="scanner_8h" local="no">arrow/dataset/scanner.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1dataset_1_1_simple_scanner_1a4220db8547785daacdb9efb3809a9e81" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::dataset::SimpleScanner::SimpleScanner</definition>
        <argsstring>(std::vector&lt; std::shared_ptr&lt; DataSource &gt;&gt; sources, std::shared_ptr&lt; ScanOptions &gt; options, std::shared_ptr&lt; ScanContext &gt; context)</argsstring>
        <name>SimpleScanner</name>
        <param>
          <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1dataset_1_1_data_source" kindref="compound">DataSource</ref> &gt;&gt;</type>
          <declname>sources</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1dataset_1_1_scan_options" kindref="compound">ScanOptions</ref> &gt;</type>
          <declname>options</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="structarrow_1_1dataset_1_1_scan_context" kindref="compound">ScanContext</ref> &gt;</type>
          <declname>context</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/scanner.h" line="167" column="1" bodyfile="/arrow/cpp/src/arrow/dataset/scanner.h" bodystart="167" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1dataset_1_1_simple_scanner_1aa62b396c445be9a65f1c85aa4d03acdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacearrow_1_1dataset_1a60d26c2dbf349324496bc0522c214737" kindref="member">ScanTaskIterator</ref></type>
        <definition>ScanTaskIterator arrow::dataset::SimpleScanner::Scan</definition>
        <argsstring>() override</argsstring>
        <name>Scan</name>
        <reimplements refid="classarrow_1_1dataset_1_1_scanner_1a80568a19e80d975b4f8f9146a22d140d">Scan</reimplements>
        <briefdescription>
<para>The Scan operator returns a stream of <ref refid="classarrow_1_1dataset_1_1_scan_task" kindref="compound">ScanTask</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>The caller is responsible to dispatch/schedule said tasks. Tasks should be safe to run in a concurrent fashion and outlive the iterator. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/scanner.h" line="172" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classarrow_1_1dataset_1_1_simple_scanner" kindref="compound">SimpleScanner</ref> is a trivial <ref refid="classarrow_1_1dataset_1_1_scanner" kindref="compound">Scanner</ref> implementation that flattens chained iterators. </para>    </briefdescription>
    <detaileddescription>
<para>The returned iterator of <ref refid="classarrow_1_1dataset_1_1_simple_scanner_1aa62b396c445be9a65f1c85aa4d03acdd" kindref="member">SimpleScanner::Scan</ref> is a serial blocking iterator. It will block if any of the following methods blocks:<itemizedlist>
<listitem><para><ref refid="classarrow_1_1_iterator_1a73837626dc62e7fb50eaca3082e64e98" kindref="member">Iterator::Next</ref></para></listitem><listitem><para><ref refid="classarrow_1_1dataset_1_1_data_source_1a3fa5053df6e660c622b2fcbf2309f4f9" kindref="member">DataSource::GetFragments</ref></para></listitem><listitem><para><ref refid="classarrow_1_1dataset_1_1_data_fragment_1a14fe1fdbf42f798389b65bd298a6475f" kindref="member">DataFragment::Scan</ref></para></listitem></itemizedlist>
</para><para>Thus, this iterator is not suited for consumption of sources/fragments where the previous methods can block for a long time, e.g. if fetching a <ref refid="classarrow_1_1dataset_1_1_data_fragment" kindref="compound">DataFragment</ref> from cloud storage, or a <ref refid="classarrow_1_1dataset_1_1_data_fragment" kindref="compound">DataFragment</ref> must be parsed before returning a ScanTaskIterator. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="3901">
        <label>arrow::dataset::Scanner</label>
        <link refid="classarrow_1_1dataset_1_1_scanner"/>
      </node>
      <node id="3900">
        <label>arrow::dataset::SimpleScanner</label>
        <link refid="classarrow_1_1dataset_1_1_simple_scanner"/>
        <childnode refid="3901" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3903">
        <label>arrow::dataset::Scanner</label>
        <link refid="classarrow_1_1dataset_1_1_scanner"/>
      </node>
      <node id="3902">
        <label>arrow::dataset::SimpleScanner</label>
        <link refid="classarrow_1_1dataset_1_1_simple_scanner"/>
        <childnode refid="3903" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/dataset/scanner.h" line="165" column="1" bodyfile="/arrow/cpp/src/arrow/dataset/scanner.h" bodystart="165" bodyend="173"/>
    <listofallmembers>
      <member refid="classarrow_1_1dataset_1_1_scanner_1aa3ab5ffc8d7938846fa702c25ac6b57a" prot="protected" virt="non-virtual"><scope>arrow::dataset::SimpleScanner</scope><name>context_</name></member>
      <member refid="classarrow_1_1dataset_1_1_scanner_1a1fc50cf57078877783bc0c6de514c967" prot="protected" virt="non-virtual"><scope>arrow::dataset::SimpleScanner</scope><name>options_</name></member>
      <member refid="classarrow_1_1dataset_1_1_simple_scanner_1aa62b396c445be9a65f1c85aa4d03acdd" prot="public" virt="virtual"><scope>arrow::dataset::SimpleScanner</scope><name>Scan</name></member>
      <member refid="classarrow_1_1dataset_1_1_scanner_1ac9beb1594ca01aa3b16e6776aacc74e8" prot="public" virt="non-virtual"><scope>arrow::dataset::SimpleScanner</scope><name>Scanner</name></member>
      <member refid="classarrow_1_1dataset_1_1_simple_scanner_1a4220db8547785daacdb9efb3809a9e81" prot="public" virt="non-virtual"><scope>arrow::dataset::SimpleScanner</scope><name>SimpleScanner</name></member>
      <member refid="classarrow_1_1dataset_1_1_scanner_1a52483e8af86ed0f898db062ae38bc90f" prot="protected" virt="non-virtual"><scope>arrow::dataset::SimpleScanner</scope><name>sources_</name></member>
      <member refid="classarrow_1_1dataset_1_1_scanner_1af05d2f96c50700e9f3daa728a8b47260" prot="protected" virt="non-virtual"><scope>arrow::dataset::SimpleScanner</scope><name>TaskGroup</name></member>
      <member refid="classarrow_1_1dataset_1_1_scanner_1a365c3a88f0ceedd3b059f5df17935d28" prot="public" virt="non-virtual"><scope>arrow::dataset::SimpleScanner</scope><name>ToTable</name></member>
      <member refid="classarrow_1_1dataset_1_1_scanner_1a62e3a870c517f665badf5a3b6d1bed2f" prot="public" virt="virtual"><scope>arrow::dataset::SimpleScanner</scope><name>~Scanner</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
