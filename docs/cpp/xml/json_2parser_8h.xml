<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="json_2parser_8h" kind="file" language="C++">
    <compoundname>parser.h</compoundname>
    <includes local="no">memory</includes>
    <includes local="no">string</includes>
    <includes refid="json_2options_8h" local="yes">arrow/json/options.h</includes>
    <includes refid="status_8h" local="yes">arrow/status.h</includes>
    <includes refid="key__value__metadata_8h" local="yes">arrow/util/key_value_metadata.h</includes>
    <includes refid="macros_8h" local="yes">arrow/util/macros.h</includes>
    <includes refid="arrow_2util_2visibility_8h" local="yes">arrow/util/visibility.h</includes>
    <incdepgraph>
      <node id="4894">
        <label>arrow/util/compare.h</label>
        <link refid="util_2compare_8h"/>
        <childnode refid="4885" relation="include">
        </childnode>
        <childnode refid="4895" relation="include">
        </childnode>
        <childnode refid="4893" relation="include">
        </childnode>
        <childnode refid="4896" relation="include">
        </childnode>
      </node>
      <node id="4884">
        <label>/arrow/cpp/src/arrow/json/parser.h</label>
        <link refid="json_2parser_8h"/>
        <childnode refid="4885" relation="include">
        </childnode>
        <childnode refid="4886" relation="include">
        </childnode>
        <childnode refid="4887" relation="include">
        </childnode>
        <childnode refid="4890" relation="include">
        </childnode>
        <childnode refid="4899" relation="include">
        </childnode>
        <childnode refid="4896" relation="include">
        </childnode>
        <childnode refid="4889" relation="include">
        </childnode>
      </node>
      <node id="4888">
        <label>cstdint</label>
      </node>
      <node id="4890">
        <label>arrow/status.h</label>
        <link refid="status_8h"/>
        <childnode refid="4891" relation="include">
        </childnode>
        <childnode refid="4892" relation="include">
        </childnode>
        <childnode refid="4885" relation="include">
        </childnode>
        <childnode refid="4886" relation="include">
        </childnode>
        <childnode refid="4893" relation="include">
        </childnode>
        <childnode refid="4894" relation="include">
        </childnode>
        <childnode refid="4896" relation="include">
        </childnode>
        <childnode refid="4897" relation="include">
        </childnode>
        <childnode refid="4889" relation="include">
        </childnode>
      </node>
      <node id="4886">
        <label>string</label>
      </node>
      <node id="4898">
        <label>ostream</label>
      </node>
      <node id="4889">
        <label>arrow/util/visibility.h</label>
        <link refid="arrow_2util_2visibility_8h"/>
      </node>
      <node id="4901">
        <label>vector</label>
      </node>
      <node id="4903">
        <label>new</label>
      </node>
      <node id="4893">
        <label>utility</label>
      </node>
      <node id="4899">
        <label>arrow/util/key_value_metadata.h</label>
        <link refid="key__value__metadata_8h"/>
        <childnode refid="4888" relation="include">
        </childnode>
        <childnode refid="4885" relation="include">
        </childnode>
        <childnode refid="4886" relation="include">
        </childnode>
        <childnode refid="4900" relation="include">
        </childnode>
        <childnode refid="4893" relation="include">
        </childnode>
        <childnode refid="4901" relation="include">
        </childnode>
        <childnode refid="4902" relation="include">
        </childnode>
        <childnode refid="4890" relation="include">
        </childnode>
        <childnode refid="4896" relation="include">
        </childnode>
        <childnode refid="4889" relation="include">
        </childnode>
      </node>
      <node id="4892">
        <label>iosfwd</label>
      </node>
      <node id="4887">
        <label>arrow/json/options.h</label>
        <link refid="json_2options_8h"/>
        <childnode refid="4888" relation="include">
        </childnode>
        <childnode refid="4885" relation="include">
        </childnode>
        <childnode refid="4889" relation="include">
        </childnode>
      </node>
      <node id="4900">
        <label>unordered_map</label>
      </node>
      <node id="4902">
        <label>arrow/result.h</label>
        <link refid="result_8h"/>
        <childnode refid="4903" relation="include">
        </childnode>
        <childnode refid="4886" relation="include">
        </childnode>
        <childnode refid="4895" relation="include">
        </childnode>
        <childnode refid="4893" relation="include">
        </childnode>
        <childnode refid="4890" relation="include">
        </childnode>
        <childnode refid="4894" relation="include">
        </childnode>
      </node>
      <node id="4895">
        <label>type_traits</label>
      </node>
      <node id="4891">
        <label>cstring</label>
      </node>
      <node id="4897">
        <label>arrow/util/string_builder.h</label>
        <link refid="string__builder_8h"/>
        <childnode refid="4885" relation="include">
        </childnode>
        <childnode refid="4898" relation="include">
        </childnode>
        <childnode refid="4886" relation="include">
        </childnode>
        <childnode refid="4893" relation="include">
        </childnode>
        <childnode refid="4889" relation="include">
        </childnode>
      </node>
      <node id="4885">
        <label>memory</label>
      </node>
      <node id="4896">
        <label>arrow/util/macros.h</label>
        <link refid="macros_8h"/>
        <childnode refid="4888" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structarrow_1_1json_1_1_kind" prot="public">arrow::json::Kind</innerclass>
    <innerclass refid="classarrow_1_1json_1_1_block_parser" prot="public">arrow::json::BlockParser</innerclass>
    <innernamespace refid="namespacearrow">arrow</innernamespace>
    <innernamespace refid="namespacearrow_1_1json">arrow::json</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="json_2options_8h" kindref="compound">arrow/json/options.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="status_8h" kindref="compound">arrow/status.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="key__value__metadata_8h" kindref="compound">arrow/util/key_value_metadata.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="macros_8h" kindref="compound">arrow/util/macros.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="arrow_2util_2visibility_8h" kindref="compound">arrow/util/visibility.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacearrow" kindref="compound">arrow</ref><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Array;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="namespaceparquet_1abad5a6612a34e123346ad35eb4933d80" kindref="member">Buffer</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="namespaceparquet_1a0d70b006a1f6feca958a1505b38a8cb7" kindref="member">MemoryPool</ref>;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="namespaceparquet_1a4d90e7d201c4ddc81c98aa3c8f993c5b" kindref="member">KeyValueMetadata</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="namespaceparquet_1a1c3b994581f3fc6e9842eb902ef7916f" kindref="member">ResizableBuffer</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">json<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="structarrow_1_1json_1_1_kind" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structarrow_1_1json_1_1_kind" kindref="compound">Kind</ref><sp/>{</highlight></codeline>
<codeline lineno="40" refid="structarrow_1_1json_1_1_kind_1a547e1f73a907c5e18a790de7d52f3483" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1json_1_1_kind_1a547e1f73a907c5e18a790de7d52f3483" kindref="member">type</ref><sp/>:<sp/>uint8_t<sp/>{<sp/><ref refid="structarrow_1_1json_1_1_kind_1a547e1f73a907c5e18a790de7d52f3483abb5d8fe7ad8d49040f1a75a1499a8fbb" kindref="member">kNull</ref>,<sp/><ref refid="structarrow_1_1json_1_1_kind_1a547e1f73a907c5e18a790de7d52f3483a6eab678931295fa3c664bb72d87e3eb3" kindref="member">kBoolean</ref>,<sp/><ref refid="structarrow_1_1json_1_1_kind_1a547e1f73a907c5e18a790de7d52f3483acfaa1ec7701dca183d758fc652c1504b" kindref="member">kNumber</ref>,<sp/><ref refid="structarrow_1_1json_1_1_kind_1a547e1f73a907c5e18a790de7d52f3483a91f0f0e68eabe2a8b2514b63e44cefaa" kindref="member">kString</ref>,<sp/><ref refid="structarrow_1_1json_1_1_kind_1a547e1f73a907c5e18a790de7d52f3483a70f79a92bfe8d1c90fa93f8e76715c1e" kindref="member">kArray</ref>,<sp/><ref refid="structarrow_1_1json_1_1_kind_1a547e1f73a907c5e18a790de7d52f3483af5d807e3bda903faf1c3fa1c4483c706" kindref="member">kObject</ref><sp/>};</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="structarrow_1_1json_1_1_kind_1a52fdcd0c24e5d2728939e984b5f7f0a5" kindref="member">Name</ref>(<ref refid="structarrow_1_1json_1_1_kind_1a547e1f73a907c5e18a790de7d52f3483" kindref="member">Kind::type</ref>);</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;const<sp/>KeyValueMetadata&gt;&amp;<sp/><ref refid="structarrow_1_1json_1_1_kind_1a43d6a93639ab2965671f29fbc57cc6e4" kindref="member">Tag</ref>(<ref refid="structarrow_1_1json_1_1_kind_1a547e1f73a907c5e18a790de7d52f3483" kindref="member">Kind::type</ref>);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1json_1_1_kind_1a547e1f73a907c5e18a790de7d52f3483" kindref="member">Kind::type</ref><sp/><ref refid="structarrow_1_1json_1_1_kind_1a4a31dbc436e149a12aa24033cf71a990" kindref="member">FromTag</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;const<sp/>KeyValueMetadata&gt;&amp;<sp/>tag);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="structarrow_1_1json_1_1_kind_1a0b1e23cdab4d2d3059e9217996f77d2e" kindref="member">ForType</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref>&amp;<sp/><ref refid="structarrow_1_1json_1_1_kind_1a547e1f73a907c5e18a790de7d52f3483" kindref="member">type</ref>,<sp/><ref refid="structarrow_1_1json_1_1_kind_1a547e1f73a907c5e18a790de7d52f3483" kindref="member">Kind::type</ref>*<sp/>kind);</highlight></codeline>
<codeline lineno="49"><highlight class="normal">};</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="namespacearrow_1_1json_1a8dcddbe7a112156307abc902a3e93672" refkind="member"><highlight class="normal">constexpr<sp/>int32_t<sp/><ref refid="namespacearrow_1_1json_1a8dcddbe7a112156307abc902a3e93672" kindref="member">kMaxParserNumRows</ref><sp/>=<sp/>100000;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="classarrow_1_1json_1_1_block_parser" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1json_1_1_block_parser" kindref="compound">BlockParser</ref><sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classarrow_1_1json_1_1_block_parser" kindref="compound">BlockParser</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>ReserveScalarStorage(int64_t<sp/>nbytes)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>Parse(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Buffer&gt;&amp;<sp/>json)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>Finish(std::shared_ptr&lt;Array&gt;*<sp/>parsed)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="classarrow_1_1json_1_1_block_parser_1a742eea94127446d9855701e1c28f4a32" refkind="member"><highlight class="normal"><sp/><sp/>int32_t<sp/><ref refid="classarrow_1_1json_1_1_block_parser_1a742eea94127446d9855701e1c28f4a32" kindref="member">num_rows</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>num_rows_;<sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>Make(<ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/>pool,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1json_1_1_parse_options" kindref="compound">ParseOptions</ref>&amp;<sp/>options,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;BlockParser&gt;*<sp/>out);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>Make(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1json_1_1_parse_options" kindref="compound">ParseOptions</ref>&amp;<sp/>options,<sp/>std::unique_ptr&lt;BlockParser&gt;*<sp/>out);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><ref refid="macros_8h_1a40d72e185b1488b5659b761f0b6115bb" kindref="member">ARROW_DISALLOW_COPY_AND_ASSIGN</ref>(<ref refid="classarrow_1_1json_1_1_block_parser" kindref="compound">BlockParser</ref>);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="classarrow_1_1json_1_1_block_parser_1ab4936580aa44e36eec4c2505bfcff268" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1json_1_1_block_parser_1ab4936580aa44e36eec4c2505bfcff268" kindref="member">BlockParser</ref>(<ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/>pool)<sp/>:<sp/>pool_(pool)<sp/>{}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="classarrow_1_1json_1_1_block_parser_1acf58856ebed1f9d90b5fa4ff2a82ae55" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/><ref refid="classarrow_1_1json_1_1_block_parser_1acf58856ebed1f9d90b5fa4ff2a82ae55" kindref="member">pool_</ref>;</highlight></codeline>
<codeline lineno="97" refid="classarrow_1_1json_1_1_block_parser_1ad28d6dfe4b389a9fca33d8b21ad7f3ca" refkind="member"><highlight class="normal"><sp/><sp/>int32_t<sp/>num_rows_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="98"><highlight class="normal">};</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>json</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>arrow</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/arrow/cpp/src/arrow/json/parser.h"/>
  </compounddef>
</doxygen>
