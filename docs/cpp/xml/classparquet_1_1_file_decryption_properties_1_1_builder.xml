<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classparquet_1_1_file_decryption_properties_1_1_builder" kind="class" language="C++" prot="public">
    <compoundname>parquet::FileDecryptionProperties::Builder</compoundname>
    <includes refid="encryption_8h" local="no">parquet/encryption.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classparquet_1_1_file_decryption_properties_1_1_builder_1ac0f2366a96e952e85820460e04c115a1" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string parquet::FileDecryptionProperties::Builder::footer_key_</definition>
        <argsstring></argsstring>
        <name>footer_key_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encryption.h" line="325" column="1" bodyfile="/arrow/cpp/src/parquet/encryption.h" bodystart="325" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classparquet_1_1_file_decryption_properties_1_1_builder_1ac1d1e49801fe29bb461f574a85add4cc" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string parquet::FileDecryptionProperties::Builder::aad_prefix_</definition>
        <argsstring></argsstring>
        <name>aad_prefix_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encryption.h" line="326" column="1" bodyfile="/arrow/cpp/src/parquet/encryption.h" bodystart="326" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classparquet_1_1_file_decryption_properties_1_1_builder_1af80f9778ae768d95f5f1e6bd281f4c88" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classparquet_1_1_a_a_d_prefix_verifier" kindref="compound">AADPrefixVerifier</ref> &gt;</type>
        <definition>std::shared_ptr&lt;AADPrefixVerifier&gt; parquet::FileDecryptionProperties::Builder::aad_prefix_verifier_</definition>
        <argsstring></argsstring>
        <name>aad_prefix_verifier_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encryption.h" line="327" column="1" bodyfile="/arrow/cpp/src/parquet/encryption.h" bodystart="327" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classparquet_1_1_file_decryption_properties_1_1_builder_1a8a0352d082e93c831dbedfd57d91f5e2" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceparquet_1a0c783ff11d8937fce7ec2fdc8b0b7743" kindref="member">ColumnPathToDecryptionPropertiesMap</ref></type>
        <definition>ColumnPathToDecryptionPropertiesMap parquet::FileDecryptionProperties::Builder::column_decryption_properties_</definition>
        <argsstring></argsstring>
        <name>column_decryption_properties_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encryption.h" line="328" column="1" bodyfile="/arrow/cpp/src/parquet/encryption.h" bodystart="328" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classparquet_1_1_file_decryption_properties_1_1_builder_1a039744927a3aa596183f3f32e85b95e3" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classparquet_1_1_decryption_key_retriever" kindref="compound">DecryptionKeyRetriever</ref> &gt;</type>
        <definition>std::shared_ptr&lt;DecryptionKeyRetriever&gt; parquet::FileDecryptionProperties::Builder::key_retriever_</definition>
        <argsstring></argsstring>
        <name>key_retriever_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encryption.h" line="330" column="1" bodyfile="/arrow/cpp/src/parquet/encryption.h" bodystart="330" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classparquet_1_1_file_decryption_properties_1_1_builder_1a0c1f3bb657a27ca32aaedcec7c528ad2" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool parquet::FileDecryptionProperties::Builder::check_plaintext_footer_integrity_</definition>
        <argsstring></argsstring>
        <name>check_plaintext_footer_integrity_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encryption.h" line="331" column="1" bodyfile="/arrow/cpp/src/parquet/encryption.h" bodystart="331" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classparquet_1_1_file_decryption_properties_1_1_builder_1a57a96e13435ae9c2a437b8ce95f73ecf" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool parquet::FileDecryptionProperties::Builder::plaintext_files_allowed_</definition>
        <argsstring></argsstring>
        <name>plaintext_files_allowed_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encryption.h" line="332" column="1" bodyfile="/arrow/cpp/src/parquet/encryption.h" bodystart="332" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classparquet_1_1_file_decryption_properties_1_1_builder_1ad170f6461fac2b7c97e2c382e8b4ad55" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>parquet::FileDecryptionProperties::Builder::Builder</definition>
        <argsstring>()</argsstring>
        <name>Builder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encryption.h" line="251" column="1" bodyfile="/arrow/cpp/src/parquet/encryption.h" bodystart="251" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_file_decryption_properties_1_1_builder_1a4d4450b4d81e7292f33f7d93d8758819" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classparquet_1_1_file_decryption_properties_1_1_builder" kindref="compound">Builder</ref> *</type>
        <definition>Builder* parquet::FileDecryptionProperties::Builder::footer_key</definition>
        <argsstring>(const std::string footer_key)</argsstring>
        <name>footer_key</name>
        <param>
          <type>const std::string</type>
          <declname>footer_key</declname>
        </param>
        <briefdescription>
<para>Set an explicit footer key. </para>        </briefdescription>
        <detaileddescription>
<para>If applied on a file that contains footer key metadata the metadata will be ignored, the footer will be decrypted/verified with this key. If explicit key is not set, footer key will be fetched from key retriever. With explicit keys or AAD prefix, new encryption properties object must be created for each encrypted file. Explicit encryption keys (footer and column) are cloned. Upon completion of file reading, the cloned encryption keys in the properties will be wiped out (array values set to 0). Caller is responsible for wiping out the input key array. param footerKey Key length must be either 16, 24 or 32 bytes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encryption.h" line="268" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_file_decryption_properties_1_1_builder_1a723c10da732f74cd18cbb8578400b303" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classparquet_1_1_file_decryption_properties_1_1_builder" kindref="compound">Builder</ref> *</type>
        <definition>Builder* parquet::FileDecryptionProperties::Builder::column_keys</definition>
        <argsstring>(const ColumnPathToDecryptionPropertiesMap &amp;column_decryption_properties)</argsstring>
        <name>column_keys</name>
        <param>
          <type>const <ref refid="namespaceparquet_1a0c783ff11d8937fce7ec2fdc8b0b7743" kindref="member">ColumnPathToDecryptionPropertiesMap</ref> &amp;</type>
          <declname>column_decryption_properties</declname>
        </param>
        <briefdescription>
<para>Set explicit column keys (decryption properties). </para>        </briefdescription>
        <detaileddescription>
<para>Its also possible to set a key retriever on this property object. Upon file decryption, availability of explicit keys is checked before invocation of the retriever callback. If an explicit key is available for a footer or a column, its key metadata will be ignored. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encryption.h" line="276" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_file_decryption_properties_1_1_builder_1a89664c486cc28dca78f922fb6d7d387e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classparquet_1_1_file_decryption_properties_1_1_builder" kindref="compound">Builder</ref> *</type>
        <definition>Builder* parquet::FileDecryptionProperties::Builder::key_retriever</definition>
        <argsstring>(const std::shared_ptr&lt; DecryptionKeyRetriever &gt; &amp;key_retriever)</argsstring>
        <name>key_retriever</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classparquet_1_1_decryption_key_retriever" kindref="compound">DecryptionKeyRetriever</ref> &gt; &amp;</type>
          <declname>key_retriever</declname>
        </param>
        <briefdescription>
<para>Set a key retriever callback. </para>        </briefdescription>
        <detaileddescription>
<para>Its also possible to set explicit footer or column keys on this file property object. Upon file decryption, availability of explicit keys is checked before invocation of the retriever callback. If an explicit key is available for a footer or a column, its key metadata will be ignored. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encryption.h" line="285" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_file_decryption_properties_1_1_builder_1a4541253382f77b448d4fb7bc7745929d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classparquet_1_1_file_decryption_properties_1_1_builder" kindref="compound">Builder</ref> *</type>
        <definition>Builder* parquet::FileDecryptionProperties::Builder::disable_footer_signature_verification</definition>
        <argsstring>()</argsstring>
        <name>disable_footer_signature_verification</name>
        <briefdescription>
<para>Skip integrity verification of plaintext footers. </para>        </briefdescription>
        <detaileddescription>
<para>If not called, integrity of plaintext footers will be checked in runtime, and an exception will be thrown in the following situations:<itemizedlist>
<listitem><para>footer signing key is not available (not passed, or not found by key retriever)</para></listitem><listitem><para>footer content and signature don&apos;t match </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encryption.h" line="293" column="1" bodyfile="/arrow/cpp/src/parquet/encryption.h" bodystart="293" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_file_decryption_properties_1_1_builder_1aeb0721cb0ba70e48d9c191941a83b1a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classparquet_1_1_file_decryption_properties_1_1_builder" kindref="compound">Builder</ref> *</type>
        <definition>Builder* parquet::FileDecryptionProperties::Builder::aad_prefix</definition>
        <argsstring>(const std::string &amp;aad_prefix)</argsstring>
        <name>aad_prefix</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>aad_prefix</declname>
        </param>
        <briefdescription>
<para>Explicitly supply the file AAD prefix. </para>        </briefdescription>
        <detaileddescription>
<para>A must when a prefix is used for file encryption, but not stored in file. If AAD prefix is stored in file, it will be compared to the explicitly supplied value and an exception will be thrown if they differ. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encryption.h" line="302" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_file_decryption_properties_1_1_builder_1ab11f06ff16be05de70d2d31575f25b9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classparquet_1_1_file_decryption_properties_1_1_builder" kindref="compound">Builder</ref> *</type>
        <definition>Builder* parquet::FileDecryptionProperties::Builder::aad_prefix_verifier</definition>
        <argsstring>(std::shared_ptr&lt; AADPrefixVerifier &gt; aad_prefix_verifier)</argsstring>
        <name>aad_prefix_verifier</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classparquet_1_1_a_a_d_prefix_verifier" kindref="compound">AADPrefixVerifier</ref> &gt;</type>
          <declname>aad_prefix_verifier</declname>
        </param>
        <briefdescription>
<para>Set callback for verification of AAD Prefixes stored in file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encryption.h" line="305" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_file_decryption_properties_1_1_builder_1a4059d7f8a09c96480038f97695dfc91f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classparquet_1_1_file_decryption_properties_1_1_builder" kindref="compound">Builder</ref> *</type>
        <definition>Builder* parquet::FileDecryptionProperties::Builder::plaintext_files_allowed</definition>
        <argsstring>()</argsstring>
        <name>plaintext_files_allowed</name>
        <briefdescription>
<para>By default, reading plaintext (unencrypted) files is not allowed when using a decryptor. </para>        </briefdescription>
        <detaileddescription>
<para><itemizedlist>
<listitem><para>in order to detect files that were not encrypted by mistake. However, the default behavior can be overridden by calling this method. The caller should use then a different method to ensure encryption of files with sensitive data. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encryption.h" line="313" column="1" bodyfile="/arrow/cpp/src/parquet/encryption.h" bodystart="313" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_file_decryption_properties_1_1_builder_1aa0fdb7e58a5ec402ffcecc898376b05c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classparquet_1_1_file_decryption_properties" kindref="compound">FileDecryptionProperties</ref> &gt;</type>
        <definition>std::shared_ptr&lt;FileDecryptionProperties&gt; parquet::FileDecryptionProperties::Builder::build</definition>
        <argsstring>()</argsstring>
        <name>build</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encryption.h" line="318" column="1" bodyfile="/arrow/cpp/src/parquet/encryption.h" bodystart="318" bodyend="322"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/parquet/encryption.h" line="249" column="1" bodyfile="/arrow/cpp/src/parquet/encryption.h" bodystart="249" bodyend="333"/>
    <listofallmembers>
      <member refid="classparquet_1_1_file_decryption_properties_1_1_builder_1aeb0721cb0ba70e48d9c191941a83b1a2" prot="public" virt="non-virtual"><scope>parquet::FileDecryptionProperties::Builder</scope><name>aad_prefix</name></member>
      <member refid="classparquet_1_1_file_decryption_properties_1_1_builder_1ac1d1e49801fe29bb461f574a85add4cc" prot="private" virt="non-virtual"><scope>parquet::FileDecryptionProperties::Builder</scope><name>aad_prefix_</name></member>
      <member refid="classparquet_1_1_file_decryption_properties_1_1_builder_1ab11f06ff16be05de70d2d31575f25b9d" prot="public" virt="non-virtual"><scope>parquet::FileDecryptionProperties::Builder</scope><name>aad_prefix_verifier</name></member>
      <member refid="classparquet_1_1_file_decryption_properties_1_1_builder_1af80f9778ae768d95f5f1e6bd281f4c88" prot="private" virt="non-virtual"><scope>parquet::FileDecryptionProperties::Builder</scope><name>aad_prefix_verifier_</name></member>
      <member refid="classparquet_1_1_file_decryption_properties_1_1_builder_1aa0fdb7e58a5ec402ffcecc898376b05c" prot="public" virt="non-virtual"><scope>parquet::FileDecryptionProperties::Builder</scope><name>build</name></member>
      <member refid="classparquet_1_1_file_decryption_properties_1_1_builder_1ad170f6461fac2b7c97e2c382e8b4ad55" prot="public" virt="non-virtual"><scope>parquet::FileDecryptionProperties::Builder</scope><name>Builder</name></member>
      <member refid="classparquet_1_1_file_decryption_properties_1_1_builder_1a0c1f3bb657a27ca32aaedcec7c528ad2" prot="private" virt="non-virtual"><scope>parquet::FileDecryptionProperties::Builder</scope><name>check_plaintext_footer_integrity_</name></member>
      <member refid="classparquet_1_1_file_decryption_properties_1_1_builder_1a8a0352d082e93c831dbedfd57d91f5e2" prot="private" virt="non-virtual"><scope>parquet::FileDecryptionProperties::Builder</scope><name>column_decryption_properties_</name></member>
      <member refid="classparquet_1_1_file_decryption_properties_1_1_builder_1a723c10da732f74cd18cbb8578400b303" prot="public" virt="non-virtual"><scope>parquet::FileDecryptionProperties::Builder</scope><name>column_keys</name></member>
      <member refid="classparquet_1_1_file_decryption_properties_1_1_builder_1a4541253382f77b448d4fb7bc7745929d" prot="public" virt="non-virtual"><scope>parquet::FileDecryptionProperties::Builder</scope><name>disable_footer_signature_verification</name></member>
      <member refid="classparquet_1_1_file_decryption_properties_1_1_builder_1a4d4450b4d81e7292f33f7d93d8758819" prot="public" virt="non-virtual"><scope>parquet::FileDecryptionProperties::Builder</scope><name>footer_key</name></member>
      <member refid="classparquet_1_1_file_decryption_properties_1_1_builder_1ac0f2366a96e952e85820460e04c115a1" prot="private" virt="non-virtual"><scope>parquet::FileDecryptionProperties::Builder</scope><name>footer_key_</name></member>
      <member refid="classparquet_1_1_file_decryption_properties_1_1_builder_1a89664c486cc28dca78f922fb6d7d387e" prot="public" virt="non-virtual"><scope>parquet::FileDecryptionProperties::Builder</scope><name>key_retriever</name></member>
      <member refid="classparquet_1_1_file_decryption_properties_1_1_builder_1a039744927a3aa596183f3f32e85b95e3" prot="private" virt="non-virtual"><scope>parquet::FileDecryptionProperties::Builder</scope><name>key_retriever_</name></member>
      <member refid="classparquet_1_1_file_decryption_properties_1_1_builder_1a4059d7f8a09c96480038f97695dfc91f" prot="public" virt="non-virtual"><scope>parquet::FileDecryptionProperties::Builder</scope><name>plaintext_files_allowed</name></member>
      <member refid="classparquet_1_1_file_decryption_properties_1_1_builder_1a57a96e13435ae9c2a437b8ce95f73ecf" prot="private" virt="non-virtual"><scope>parquet::FileDecryptionProperties::Builder</scope><name>plaintext_files_allowed_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
