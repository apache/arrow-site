<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="scalar_8h" kind="file" language="C++">
    <compoundname>scalar.h</compoundname>
    <includes local="no">memory</includes>
    <includes local="no">string</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes refid="result_8h" local="yes">arrow/result.h</includes>
    <includes refid="status_8h" local="yes">arrow/status.h</includes>
    <includes refid="type_8h" local="yes">arrow/type.h</includes>
    <includes refid="type__fwd_8h" local="yes">arrow/type_fwd.h</includes>
    <includes refid="type__traits_8h" local="yes">arrow/type_traits.h</includes>
    <includes refid="util_2compare_8h" local="yes">arrow/util/compare.h</includes>
    <includes refid="util_2decimal_8h" local="yes">arrow/util/decimal.h</includes>
    <includes refid="arrow_2util_2logging_8h" local="yes">arrow/util/logging.h</includes>
    <includes refid="string__view_8h" local="yes">arrow/util/string_view.h</includes>
    <includes refid="arrow_2util_2visibility_8h" local="yes">arrow/util/visibility.h</includes>
    <includedby refid="kernel_8h" local="yes">/arrow/cpp/src/arrow/compute/kernel.h</includedby>
    <includedby refid="dataset__internal_8h" local="yes">/arrow/cpp/src/arrow/dataset/dataset_internal.h</includedby>
    <includedby refid="arrow_2dataset_2filter_8h" local="yes">/arrow/cpp/src/arrow/dataset/filter.h</includedby>
    <includedby refid="visitor__inline_8h" local="yes">/arrow/cpp/src/arrow/visitor_inline.h</includedby>
    <incdepgraph>
      <node id="10812">
        <label>atomic</label>
      </node>
      <node id="10805">
        <label>arrow/util/compare.h</label>
        <link refid="util_2compare_8h"/>
        <childnode refid="10795" relation="include">
        </childnode>
        <childnode refid="10801" relation="include">
        </childnode>
        <childnode refid="10797" relation="include">
        </childnode>
        <childnode refid="10806" relation="include">
        </childnode>
      </node>
      <node id="10827">
        <label>limits</label>
      </node>
      <node id="10807">
        <label>cstdint</label>
      </node>
      <node id="10828">
        <label>arrow/buffer.h</label>
        <link refid="buffer_8h"/>
        <childnode refid="10807" relation="include">
        </childnode>
        <childnode refid="10803" relation="include">
        </childnode>
        <childnode refid="10795" relation="include">
        </childnode>
        <childnode refid="10796" relation="include">
        </childnode>
        <childnode refid="10801" relation="include">
        </childnode>
        <childnode refid="10797" relation="include">
        </childnode>
        <childnode refid="10798" relation="include">
        </childnode>
        <childnode refid="10829" relation="include">
        </childnode>
        <childnode refid="10830" relation="include">
        </childnode>
        <childnode refid="10802" relation="include">
        </childnode>
        <childnode refid="10814" relation="include">
        </childnode>
        <childnode refid="10806" relation="include">
        </childnode>
        <childnode refid="10831" relation="include">
        </childnode>
        <childnode refid="10810" relation="include">
        </childnode>
      </node>
      <node id="10821">
        <label>endian.h</label>
      </node>
      <node id="10802">
        <label>arrow/status.h</label>
        <link refid="status_8h"/>
        <childnode refid="10803" relation="include">
        </childnode>
        <childnode refid="10804" relation="include">
        </childnode>
        <childnode refid="10795" relation="include">
        </childnode>
        <childnode refid="10796" relation="include">
        </childnode>
        <childnode refid="10797" relation="include">
        </childnode>
        <childnode refid="10805" relation="include">
        </childnode>
        <childnode refid="10806" relation="include">
        </childnode>
        <childnode refid="10808" relation="include">
        </childnode>
        <childnode refid="10810" relation="include">
        </childnode>
      </node>
      <node id="10833">
        <label>arrow/util/functional.h</label>
        <link refid="functional_8h"/>
        <childnode refid="10834" relation="include">
        </childnode>
        <childnode refid="10801" relation="include">
        </childnode>
        <childnode refid="10806" relation="include">
        </childnode>
      </node>
      <node id="10814">
        <label>arrow/type_fwd.h</label>
        <link refid="type__fwd_8h"/>
        <childnode refid="10795" relation="include">
        </childnode>
        <childnode refid="10796" relation="include">
        </childnode>
        <childnode refid="10798" relation="include">
        </childnode>
        <childnode refid="10806" relation="include">
        </childnode>
        <childnode refid="10810" relation="include">
        </childnode>
      </node>
      <node id="10826">
        <label>cmath</label>
      </node>
      <node id="10825">
        <label>cassert</label>
      </node>
      <node id="10815">
        <label>arrow/util/checked_cast.h</label>
        <link refid="checked__cast_8h"/>
        <childnode refid="10795" relation="include">
        </childnode>
        <childnode refid="10801" relation="include">
        </childnode>
      </node>
      <node id="10796">
        <label>string</label>
      </node>
      <node id="10832">
        <label>arrow/vendored/string_view.hpp</label>
      </node>
      <node id="10816">
        <label>arrow/util/variant.h</label>
        <link refid="variant_8h"/>
        <childnode refid="10817" relation="include">
        </childnode>
      </node>
      <node id="10818">
        <label>arrow/visitor.h</label>
        <link refid="visitor_8h"/>
        <childnode refid="10802" relation="include">
        </childnode>
        <childnode refid="10814" relation="include">
        </childnode>
        <childnode refid="10810" relation="include">
        </childnode>
      </node>
      <node id="10809">
        <label>ostream</label>
      </node>
      <node id="10810">
        <label>arrow/util/visibility.h</label>
        <link refid="arrow_2util_2visibility_8h"/>
      </node>
      <node id="10838">
        <label>arrow/util/logging.h</label>
        <link refid="arrow_2util_2logging_8h"/>
        <childnode refid="10795" relation="include">
        </childnode>
        <childnode refid="10809" relation="include">
        </childnode>
        <childnode refid="10796" relation="include">
        </childnode>
        <childnode refid="10806" relation="include">
        </childnode>
        <childnode refid="10810" relation="include">
        </childnode>
      </node>
      <node id="10829">
        <label>arrow/device.h</label>
        <link refid="device_8h"/>
        <childnode refid="10807" relation="include">
        </childnode>
        <childnode refid="10795" relation="include">
        </childnode>
        <childnode refid="10796" relation="include">
        </childnode>
        <childnode refid="10830" relation="include">
        </childnode>
        <childnode refid="10814" relation="include">
        </childnode>
        <childnode refid="10805" relation="include">
        </childnode>
        <childnode refid="10806" relation="include">
        </childnode>
        <childnode refid="10810" relation="include">
        </childnode>
      </node>
      <node id="10820">
        <label>arrow/util/bit_util.h</label>
        <link refid="bit__util_8h"/>
        <childnode refid="10821" relation="include">
        </childnode>
        <childnode refid="10822" relation="include">
        </childnode>
        <childnode refid="10823" relation="include">
        </childnode>
        <childnode refid="10824" relation="include">
        </childnode>
        <childnode refid="10825" relation="include">
        </childnode>
        <childnode refid="10826" relation="include">
        </childnode>
        <childnode refid="10807" relation="include">
        </childnode>
        <childnode refid="10803" relation="include">
        </childnode>
        <childnode refid="10827" relation="include">
        </childnode>
        <childnode refid="10795" relation="include">
        </childnode>
        <childnode refid="10796" relation="include">
        </childnode>
        <childnode refid="10801" relation="include">
        </childnode>
        <childnode refid="10797" relation="include">
        </childnode>
        <childnode refid="10798" relation="include">
        </childnode>
        <childnode refid="10828" relation="include">
        </childnode>
        <childnode refid="10799" relation="include">
        </childnode>
        <childnode refid="10805" relation="include">
        </childnode>
        <childnode refid="10833" relation="include">
        </childnode>
        <childnode refid="10806" relation="include">
        </childnode>
        <childnode refid="10808" relation="include">
        </childnode>
        <childnode refid="10831" relation="include">
        </childnode>
        <childnode refid="10835" relation="include">
        </childnode>
        <childnode refid="10810" relation="include">
        </childnode>
      </node>
      <node id="10824">
        <label>bitset</label>
      </node>
      <node id="10834">
        <label>tuple</label>
      </node>
      <node id="10798">
        <label>vector</label>
      </node>
      <node id="10800">
        <label>new</label>
      </node>
      <node id="10797">
        <label>utility</label>
      </node>
      <node id="10831">
        <label>arrow/util/string_view.h</label>
        <link refid="string__view_8h"/>
        <childnode refid="10807" relation="include">
        </childnode>
        <childnode refid="10796" relation="include">
        </childnode>
        <childnode refid="10832" relation="include">
        </childnode>
      </node>
      <node id="10823">
        <label>array</label>
      </node>
      <node id="10837">
        <label>arrow/util/basic_decimal.h</label>
        <link refid="basic__decimal_8h"/>
        <childnode refid="10823" relation="include">
        </childnode>
        <childnode refid="10807" relation="include">
        </childnode>
        <childnode refid="10827" relation="include">
        </childnode>
        <childnode refid="10796" relation="include">
        </childnode>
        <childnode refid="10801" relation="include">
        </childnode>
        <childnode refid="10806" relation="include">
        </childnode>
        <childnode refid="10835" relation="include">
        </childnode>
        <childnode refid="10810" relation="include">
        </childnode>
      </node>
      <node id="10819">
        <label>arrow/type_traits.h</label>
        <link refid="type__traits_8h"/>
        <childnode refid="10795" relation="include">
        </childnode>
        <childnode refid="10796" relation="include">
        </childnode>
        <childnode refid="10801" relation="include">
        </childnode>
        <childnode refid="10798" relation="include">
        </childnode>
        <childnode refid="10814" relation="include">
        </childnode>
        <childnode refid="10820" relation="include">
        </childnode>
      </node>
      <node id="10836">
        <label>arrow/util/decimal.h</label>
        <link refid="util_2decimal_8h"/>
        <childnode refid="10807" relation="include">
        </childnode>
        <childnode refid="10804" relation="include">
        </childnode>
        <childnode refid="10827" relation="include">
        </childnode>
        <childnode refid="10796" relation="include">
        </childnode>
        <childnode refid="10801" relation="include">
        </childnode>
        <childnode refid="10797" relation="include">
        </childnode>
        <childnode refid="10799" relation="include">
        </childnode>
        <childnode refid="10802" relation="include">
        </childnode>
        <childnode refid="10837" relation="include">
        </childnode>
        <childnode refid="10831" relation="include">
        </childnode>
      </node>
      <node id="10830">
        <label>arrow/io/type_fwd.h</label>
        <link refid="io_2type__fwd_8h"/>
      </node>
      <node id="10804">
        <label>iosfwd</label>
      </node>
      <node id="10817">
        <label>arrow/vendored/variant.hpp</label>
      </node>
      <node id="10799">
        <label>arrow/result.h</label>
        <link refid="result_8h"/>
        <childnode refid="10800" relation="include">
        </childnode>
        <childnode refid="10796" relation="include">
        </childnode>
        <childnode refid="10801" relation="include">
        </childnode>
        <childnode refid="10797" relation="include">
        </childnode>
        <childnode refid="10802" relation="include">
        </childnode>
        <childnode refid="10805" relation="include">
        </childnode>
      </node>
      <node id="10813">
        <label>climits</label>
      </node>
      <node id="10794">
        <label>/arrow/cpp/src/arrow/scalar.h</label>
        <link refid="scalar_8h"/>
        <childnode refid="10795" relation="include">
        </childnode>
        <childnode refid="10796" relation="include">
        </childnode>
        <childnode refid="10797" relation="include">
        </childnode>
        <childnode refid="10798" relation="include">
        </childnode>
        <childnode refid="10799" relation="include">
        </childnode>
        <childnode refid="10802" relation="include">
        </childnode>
        <childnode refid="10811" relation="include">
        </childnode>
        <childnode refid="10814" relation="include">
        </childnode>
        <childnode refid="10819" relation="include">
        </childnode>
        <childnode refid="10805" relation="include">
        </childnode>
        <childnode refid="10836" relation="include">
        </childnode>
        <childnode refid="10838" relation="include">
        </childnode>
        <childnode refid="10831" relation="include">
        </childnode>
        <childnode refid="10810" relation="include">
        </childnode>
      </node>
      <node id="10811">
        <label>arrow/type.h</label>
        <link refid="type_8h"/>
        <childnode refid="10812" relation="include">
        </childnode>
        <childnode refid="10813" relation="include">
        </childnode>
        <childnode refid="10807" relation="include">
        </childnode>
        <childnode refid="10804" relation="include">
        </childnode>
        <childnode refid="10795" relation="include">
        </childnode>
        <childnode refid="10796" relation="include">
        </childnode>
        <childnode refid="10797" relation="include">
        </childnode>
        <childnode refid="10798" relation="include">
        </childnode>
        <childnode refid="10799" relation="include">
        </childnode>
        <childnode refid="10814" relation="include">
        </childnode>
        <childnode refid="10815" relation="include">
        </childnode>
        <childnode refid="10806" relation="include">
        </childnode>
        <childnode refid="10816" relation="include">
        </childnode>
        <childnode refid="10810" relation="include">
        </childnode>
        <childnode refid="10818" relation="include">
        </childnode>
      </node>
      <node id="10801">
        <label>type_traits</label>
      </node>
      <node id="10822">
        <label>algorithm</label>
      </node>
      <node id="10803">
        <label>cstring</label>
      </node>
      <node id="10808">
        <label>arrow/util/string_builder.h</label>
        <link refid="string__builder_8h"/>
        <childnode refid="10795" relation="include">
        </childnode>
        <childnode refid="10809" relation="include">
        </childnode>
        <childnode refid="10796" relation="include">
        </childnode>
        <childnode refid="10797" relation="include">
        </childnode>
        <childnode refid="10810" relation="include">
        </childnode>
      </node>
      <node id="10795">
        <label>memory</label>
      </node>
      <node id="10806">
        <label>arrow/util/macros.h</label>
        <link refid="macros_8h"/>
        <childnode refid="10807" relation="include">
        </childnode>
      </node>
      <node id="10835">
        <label>arrow/util/type_traits.h</label>
        <link refid="util_2type__traits_8h"/>
        <childnode refid="10801" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="10865">
        <label>/arrow/cpp/src/arrow/array/dict_internal.h</label>
        <link refid="dict__internal_8h"/>
      </node>
      <node id="10855">
        <label>/arrow/cpp/src/arrow/compute/kernels/filter.h</label>
        <link refid="arrow_2compute_2kernels_2filter_8h"/>
        <childnode refid="10841" relation="include">
        </childnode>
      </node>
      <node id="10860">
        <label>/arrow/cpp/src/arrow/compute/kernels/sort_to_indices.h</label>
        <link refid="sort__to__indices_8h"/>
        <childnode refid="10841" relation="include">
        </childnode>
      </node>
      <node id="10844">
        <label>/arrow/cpp/src/arrow/compute/kernels/aggregate.h</label>
        <link refid="aggregate_8h"/>
        <childnode refid="10845" relation="include">
        </childnode>
      </node>
      <node id="10845">
        <label>/arrow/cpp/src/arrow/compute/kernels/sum_internal.h</label>
        <link refid="sum__internal_8h"/>
      </node>
      <node id="10861">
        <label>/arrow/cpp/src/arrow/compute/kernels/take.h</label>
        <link refid="take_8h"/>
        <childnode refid="10841" relation="include">
        </childnode>
      </node>
      <node id="10849">
        <label>/arrow/cpp/src/arrow/dataset/partition.h</label>
        <link refid="partition_8h"/>
        <childnode refid="10850" relation="include">
        </childnode>
        <childnode refid="10851" relation="include">
        </childnode>
      </node>
      <node id="10853">
        <label>/arrow/cpp/src/arrow/dataset/file_parquet.h</label>
        <link refid="file__parquet_8h"/>
        <childnode refid="10848" relation="include">
        </childnode>
      </node>
      <node id="10864">
        <label>/arrow/cpp/src/arrow/visitor_inline.h</label>
        <link refid="visitor__inline_8h"/>
        <childnode refid="10865" relation="include">
        </childnode>
        <childnode refid="10866" relation="include">
        </childnode>
      </node>
      <node id="10843">
        <label>/arrow/cpp/src/arrow/compute/kernels/add.h</label>
        <link refid="add_8h"/>
      </node>
      <node id="10858">
        <label>/arrow/cpp/src/arrow/compute/kernels/match.h</label>
        <link refid="match_8h"/>
      </node>
      <node id="10859">
        <label>/arrow/cpp/src/arrow/compute/kernels/nth_to_indices.h</label>
        <link refid="nth__to__indices_8h"/>
        <childnode refid="10841" relation="include">
        </childnode>
      </node>
      <node id="10851">
        <label>/arrow/cpp/src/arrow/dataset/file_base.h</label>
        <link refid="file__base_8h"/>
        <childnode refid="10848" relation="include">
        </childnode>
        <childnode refid="10852" relation="include">
        </childnode>
        <childnode refid="10853" relation="include">
        </childnode>
      </node>
      <node id="10850">
        <label>/arrow/cpp/src/arrow/dataset/discovery.h</label>
        <link refid="discovery_8h"/>
        <childnode refid="10848" relation="include">
        </childnode>
      </node>
      <node id="10857">
        <label>/arrow/cpp/src/arrow/compute/kernels/isin.h</label>
        <link refid="isin_8h"/>
        <childnode refid="10841" relation="include">
        </childnode>
      </node>
      <node id="10841">
        <label>/arrow/cpp/src/arrow/compute/api.h</label>
        <link refid="compute_2api_8h"/>
        <childnode refid="10842" relation="include">
        </childnode>
      </node>
      <node id="10863">
        <label>/arrow/cpp/src/arrow/dataset/dataset_internal.h</label>
        <link refid="dataset__internal_8h"/>
        <childnode refid="10854" relation="include">
        </childnode>
      </node>
      <node id="10854">
        <label>/arrow/cpp/src/arrow/dataset/scanner_internal.h</label>
        <link refid="scanner__internal_8h"/>
      </node>
      <node id="10840">
        <label>/arrow/cpp/src/arrow/compute/kernel.h</label>
        <link refid="kernel_8h"/>
        <childnode refid="10841" relation="include">
        </childnode>
        <childnode refid="10843" relation="include">
        </childnode>
        <childnode refid="10844" relation="include">
        </childnode>
        <childnode refid="10846" relation="include">
        </childnode>
        <childnode refid="10855" relation="include">
        </childnode>
        <childnode refid="10856" relation="include">
        </childnode>
        <childnode refid="10857" relation="include">
        </childnode>
        <childnode refid="10858" relation="include">
        </childnode>
        <childnode refid="10859" relation="include">
        </childnode>
        <childnode refid="10860" relation="include">
        </childnode>
        <childnode refid="10845" relation="include">
        </childnode>
        <childnode refid="10861" relation="include">
        </childnode>
        <childnode refid="10862" relation="include">
        </childnode>
        <childnode refid="10847" relation="include">
        </childnode>
      </node>
      <node id="10852">
        <label>/arrow/cpp/src/arrow/dataset/file_ipc.h</label>
        <link refid="file__ipc_8h"/>
        <childnode refid="10848" relation="include">
        </childnode>
      </node>
      <node id="10862">
        <label>/arrow/cpp/src/arrow/compute/kernels/util_internal.h</label>
        <link refid="compute_2kernels_2util__internal_8h"/>
      </node>
      <node id="10866">
        <label>/arrow/cpp/src/arrow/compute/kernels/take_internal.h</label>
        <link refid="take__internal_8h"/>
      </node>
      <node id="10846">
        <label>/arrow/cpp/src/arrow/compute/kernels/compare.h</label>
        <link refid="compute_2kernels_2compare_8h"/>
        <childnode refid="10841" relation="include">
        </childnode>
        <childnode refid="10847" relation="include">
        </childnode>
      </node>
      <node id="10847">
        <label>/arrow/cpp/src/arrow/dataset/filter.h</label>
        <link refid="arrow_2dataset_2filter_8h"/>
        <childnode refid="10848" relation="include">
        </childnode>
        <childnode refid="10849" relation="include">
        </childnode>
        <childnode refid="10854" relation="include">
        </childnode>
      </node>
      <node id="10856">
        <label>/arrow/cpp/src/arrow/compute/kernels/hash.h</label>
        <link refid="hash_8h"/>
        <childnode refid="10841" relation="include">
        </childnode>
      </node>
      <node id="10839">
        <label>/arrow/cpp/src/arrow/scalar.h</label>
        <link refid="scalar_8h"/>
        <childnode refid="10840" relation="include">
        </childnode>
        <childnode refid="10863" relation="include">
        </childnode>
        <childnode refid="10847" relation="include">
        </childnode>
        <childnode refid="10864" relation="include">
        </childnode>
      </node>
      <node id="10842">
        <label>/arrow/cpp/src/arrow/stl.h</label>
        <link refid="stl_8h"/>
      </node>
      <node id="10848">
        <label>/arrow/cpp/src/arrow/dataset/api.h</label>
        <link refid="dataset_2api_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structarrow_1_1_scalar" prot="public">arrow::Scalar</innerclass>
    <innerclass refid="structarrow_1_1_scalar_1_1_hash" prot="public">arrow::Scalar::Hash</innerclass>
    <innerclass refid="structarrow_1_1_null_scalar" prot="public">arrow::NullScalar</innerclass>
    <innerclass refid="structarrow_1_1_boolean_scalar" prot="public">arrow::BooleanScalar</innerclass>
    <innerclass refid="structarrow_1_1_numeric_scalar" prot="public">arrow::NumericScalar</innerclass>
    <innerclass refid="structarrow_1_1_int8_scalar" prot="public">arrow::Int8Scalar</innerclass>
    <innerclass refid="structarrow_1_1_int16_scalar" prot="public">arrow::Int16Scalar</innerclass>
    <innerclass refid="structarrow_1_1_int32_scalar" prot="public">arrow::Int32Scalar</innerclass>
    <innerclass refid="structarrow_1_1_int64_scalar" prot="public">arrow::Int64Scalar</innerclass>
    <innerclass refid="structarrow_1_1_u_int8_scalar" prot="public">arrow::UInt8Scalar</innerclass>
    <innerclass refid="structarrow_1_1_u_int16_scalar" prot="public">arrow::UInt16Scalar</innerclass>
    <innerclass refid="structarrow_1_1_u_int32_scalar" prot="public">arrow::UInt32Scalar</innerclass>
    <innerclass refid="structarrow_1_1_u_int64_scalar" prot="public">arrow::UInt64Scalar</innerclass>
    <innerclass refid="structarrow_1_1_half_float_scalar" prot="public">arrow::HalfFloatScalar</innerclass>
    <innerclass refid="structarrow_1_1_float_scalar" prot="public">arrow::FloatScalar</innerclass>
    <innerclass refid="structarrow_1_1_double_scalar" prot="public">arrow::DoubleScalar</innerclass>
    <innerclass refid="structarrow_1_1_base_binary_scalar" prot="public">arrow::BaseBinaryScalar</innerclass>
    <innerclass refid="structarrow_1_1_binary_scalar" prot="public">arrow::BinaryScalar</innerclass>
    <innerclass refid="structarrow_1_1_string_scalar" prot="public">arrow::StringScalar</innerclass>
    <innerclass refid="structarrow_1_1_large_binary_scalar" prot="public">arrow::LargeBinaryScalar</innerclass>
    <innerclass refid="structarrow_1_1_large_string_scalar" prot="public">arrow::LargeStringScalar</innerclass>
    <innerclass refid="structarrow_1_1_fixed_size_binary_scalar" prot="public">arrow::FixedSizeBinaryScalar</innerclass>
    <innerclass refid="structarrow_1_1_temporal_scalar" prot="public">arrow::TemporalScalar</innerclass>
    <innerclass refid="structarrow_1_1_date_scalar" prot="public">arrow::DateScalar</innerclass>
    <innerclass refid="structarrow_1_1_date32_scalar" prot="public">arrow::Date32Scalar</innerclass>
    <innerclass refid="structarrow_1_1_date64_scalar" prot="public">arrow::Date64Scalar</innerclass>
    <innerclass refid="structarrow_1_1_time_scalar" prot="public">arrow::TimeScalar</innerclass>
    <innerclass refid="structarrow_1_1_time32_scalar" prot="public">arrow::Time32Scalar</innerclass>
    <innerclass refid="structarrow_1_1_time64_scalar" prot="public">arrow::Time64Scalar</innerclass>
    <innerclass refid="structarrow_1_1_timestamp_scalar" prot="public">arrow::TimestampScalar</innerclass>
    <innerclass refid="structarrow_1_1_interval_scalar" prot="public">arrow::IntervalScalar</innerclass>
    <innerclass refid="structarrow_1_1_month_interval_scalar" prot="public">arrow::MonthIntervalScalar</innerclass>
    <innerclass refid="structarrow_1_1_day_time_interval_scalar" prot="public">arrow::DayTimeIntervalScalar</innerclass>
    <innerclass refid="structarrow_1_1_duration_scalar" prot="public">arrow::DurationScalar</innerclass>
    <innerclass refid="structarrow_1_1_decimal128_scalar" prot="public">arrow::Decimal128Scalar</innerclass>
    <innerclass refid="structarrow_1_1_base_list_scalar" prot="public">arrow::BaseListScalar</innerclass>
    <innerclass refid="structarrow_1_1_list_scalar" prot="public">arrow::ListScalar</innerclass>
    <innerclass refid="structarrow_1_1_large_list_scalar" prot="public">arrow::LargeListScalar</innerclass>
    <innerclass refid="structarrow_1_1_map_scalar" prot="public">arrow::MapScalar</innerclass>
    <innerclass refid="structarrow_1_1_fixed_size_list_scalar" prot="public">arrow::FixedSizeListScalar</innerclass>
    <innerclass refid="structarrow_1_1_struct_scalar" prot="public">arrow::StructScalar</innerclass>
    <innerclass refid="structarrow_1_1_union_scalar" prot="public">arrow::UnionScalar</innerclass>
    <innerclass refid="structarrow_1_1_dictionary_scalar" prot="public">arrow::DictionaryScalar</innerclass>
    <innerclass refid="structarrow_1_1_extension_scalar" prot="public">arrow::ExtensionScalar</innerclass>
    <innerclass refid="structarrow_1_1_make_scalar_impl" prot="public">arrow::MakeScalarImpl</innerclass>
    <innernamespace refid="namespacearrow">arrow</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Object<sp/>model<sp/>for<sp/>scalar<sp/>(non-Array)<sp/>values.<sp/>Not<sp/>intended<sp/>for<sp/>use<sp/>with<sp/>large</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>amounts<sp/>of<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NOTE:<sp/>This<sp/>API<sp/>is<sp/>experimental<sp/>as<sp/>of<sp/>the<sp/>0.13<sp/>version<sp/>and<sp/>subject<sp/>to<sp/>change</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="comment">//<sp/>without<sp/>deprecation<sp/>warnings</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="result_8h" kindref="compound">arrow/result.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="status_8h" kindref="compound">arrow/status.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type_8h" kindref="compound">arrow/type.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type__fwd_8h" kindref="compound">arrow/type_fwd.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type__traits_8h" kindref="compound">arrow/type_traits.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="util_2compare_8h" kindref="compound">arrow/util/compare.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="util_2decimal_8h" kindref="compound">arrow/util/decimal.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="arrow_2util_2logging_8h" kindref="compound">arrow/util/logging.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="string__view_8h" kindref="compound">arrow/util/string_view.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="arrow_2util_2visibility_8h" kindref="compound">arrow/util/visibility.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacearrow" kindref="compound">arrow</ref><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Array;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="structarrow_1_1_scalar" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_scalar" kindref="compound">Scalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1util_1_1_equality_comparable" kindref="compound">util::EqualityComparable</ref>&lt;Scalar&gt;<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="structarrow_1_1_scalar" kindref="compound">Scalar</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="structarrow_1_1_scalar_1ad9fe0e6c79f98c6875a23ed8b27e5175" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_scalar_1ad9fe0e6c79f98c6875a23ed8b27e5175" kindref="member">Scalar</ref>(std::shared_ptr&lt;DataType&gt;<sp/>type)<sp/>:<sp/>type(<ref refid="namespacestd" kindref="compound">std</ref>::move(type))<sp/>{}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="structarrow_1_1_scalar_1ae3f8aa29da0a3f3ac9d3de6a97818328" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;DataType&gt;<sp/><ref refid="structarrow_1_1_scalar_1ae3f8aa29da0a3f3ac9d3de6a97818328" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="structarrow_1_1_scalar_1a42453c42084d0c9a955c8c398831a57e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_valid<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1util_1_1_equality_comparable" kindref="compound">util::EqualityComparable&lt;Scalar&gt;::operator</ref>==;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1util_1_1_equality_comparable" kindref="compound">util::EqualityComparable&lt;Scalar&gt;::Equals</ref>;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Equals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_scalar" kindref="compound">Scalar</ref>&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="structarrow_1_1_scalar_1_1_hash" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_scalar_1_1_hash" kindref="compound">Hash</ref><sp/>{</highlight></codeline>
<codeline lineno="64" refid="structarrow_1_1_scalar_1_1_hash_1a8f85466ecc49b75380f381a12a788fa1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_scalar_1_1_hash_1a8f85466ecc49b75380f381a12a788fa1" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_scalar" kindref="compound">Scalar</ref>&amp;<sp/><ref refid="namespacearrow_1_1dataset_1abbc0528fcaf8fe939da7b3784bb120d4" kindref="member">scalar</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hash(scalar);<sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="structarrow_1_1_scalar_1_1_hash_1af78957b57cd635e770e8be72997e721a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_scalar_1_1_hash_1af78957b57cd635e770e8be72997e721a" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Scalar&gt;&amp;<sp/><ref refid="namespacearrow_1_1dataset_1abbc0528fcaf8fe939da7b3784bb120d4" kindref="member">scalar</ref>)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hash(*scalar);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>hash(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_scalar" kindref="compound">Scalar</ref>&amp;<sp/><ref refid="namespacearrow_1_1dataset_1abbc0528fcaf8fe939da7b3784bb120d4" kindref="member">scalar</ref>);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;Scalar&gt;</ref>&gt;<sp/>Parse(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>type,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceparquet_1af53c3c244055490d5dd385dd8a874540" kindref="member">util::string_view</ref><sp/>repr);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(bkietz)<sp/>add<sp/>compute::CastOptions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;Scalar&gt;</ref>&gt;<sp/>CastTo(std::shared_ptr&lt;DataType&gt;<sp/>to)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="82" refid="structarrow_1_1_scalar_1aff32301b232ace9c6172685d88e68e97" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_scalar_1aff32301b232ace9c6172685d88e68e97" kindref="member">Scalar</ref>(std::shared_ptr&lt;DataType&gt;<sp/>type,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_valid)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>type(<ref refid="namespacestd" kindref="compound">std</ref>::move(type)),<sp/>is_valid(is_valid)<sp/>{}</highlight></codeline>
<codeline lineno="84"><highlight class="normal">};</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="structarrow_1_1_null_scalar" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_null_scalar" kindref="compound">NullScalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_scalar" kindref="compound">Scalar</ref><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="89" refid="structarrow_1_1_null_scalar_1af52f97b5941f8ea51b01f9c61aef698c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_null_type" kindref="compound">TypeClass</ref><sp/>=<sp/><ref refid="classarrow_1_1_null_type" kindref="compound">NullType</ref>;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="structarrow_1_1_null_scalar_1aee1e465b21b42063f87af3d824169dcd" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_null_scalar_1aee1e465b21b42063f87af3d824169dcd" kindref="member">NullScalar</ref>()<sp/>:<sp/><ref refid="structarrow_1_1_scalar" kindref="compound">Scalar</ref>{<ref refid="group__type-factories_1gaf642d53dac1a6b6b686fb5984d33bc9a" kindref="member">null</ref>(),<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">}<sp/>{}</highlight></codeline>
<codeline lineno="92"><highlight class="normal">};</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CType<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::c_type&gt;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/>PrimitiveScalar<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_scalar" kindref="compound">Scalar</ref><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_scalar_1ad9fe0e6c79f98c6875a23ed8b27e5175" kindref="member">Scalar::Scalar</ref>;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_null_type" kindref="compound">TypeClass</ref><sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ValueType<sp/>=<sp/>CType;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Non-null<sp/>constructor.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>PrimitiveScalar(ValueType<sp/>value,<sp/>std::shared_ptr&lt;DataType&gt;<sp/>type)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structarrow_1_1_scalar" kindref="compound">Scalar</ref>(std::move(type),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">),<sp/>value(value)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="arrow_2util_2logging_8h_1ab42a22508b4bab6993bf61dea1d75ba0" kindref="member">ARROW_CHECK_EQ</ref>(this-&gt;type-&gt;id(),<sp/>T::type_id);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>PrimitiveScalar(ValueType<sp/>value)</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>PrimitiveScalar(value,<sp/><ref refid="structarrow_1_1_type_traits" kindref="compound">TypeTraits&lt;T&gt;::type_singleton</ref>())<sp/>{}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>PrimitiveScalar()<sp/>:<sp/><ref refid="structarrow_1_1_scalar" kindref="compound">Scalar</ref>(<ref refid="structarrow_1_1_type_traits" kindref="compound">TypeTraits&lt;T&gt;::type_singleton</ref>())<sp/>{}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>ValueType<sp/>value{};</highlight></codeline>
<codeline lineno="114"><highlight class="normal">};</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="structarrow_1_1_boolean_scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_boolean_scalar" kindref="compound">BooleanScalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>internal::PrimitiveScalar&lt;BooleanType,<sp/>bool&gt;<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>internal::PrimitiveScalar&lt;BooleanType,<sp/>bool&gt;::PrimitiveScalar;</highlight></codeline>
<codeline lineno="120"><highlight class="normal">};</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="123" refid="structarrow_1_1_numeric_scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structarrow_1_1_numeric_scalar" kindref="compound">NumericScalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>internal::PrimitiveScalar&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>internal::PrimitiveScalar&lt;T&gt;::PrimitiveScalar;</highlight></codeline>
<codeline lineno="125"><highlight class="normal">};</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127" refid="structarrow_1_1_int8_scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_int8_scalar" kindref="compound">Int8Scalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_numeric_scalar" kindref="compound">NumericScalar</ref>&lt;Int8Type&gt;<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_numeric_scalar" kindref="compound">NumericScalar&lt;Int8Type&gt;::NumericScalar</ref>;</highlight></codeline>
<codeline lineno="129"><highlight class="normal">};</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="structarrow_1_1_int16_scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_int16_scalar" kindref="compound">Int16Scalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_numeric_scalar" kindref="compound">NumericScalar</ref>&lt;Int16Type&gt;<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_numeric_scalar" kindref="compound">NumericScalar&lt;Int16Type&gt;::NumericScalar</ref>;</highlight></codeline>
<codeline lineno="133"><highlight class="normal">};</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135" refid="structarrow_1_1_int32_scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_int32_scalar" kindref="compound">Int32Scalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_numeric_scalar" kindref="compound">NumericScalar</ref>&lt;Int32Type&gt;<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_numeric_scalar" kindref="compound">NumericScalar&lt;Int32Type&gt;::NumericScalar</ref>;</highlight></codeline>
<codeline lineno="137"><highlight class="normal">};</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="structarrow_1_1_int64_scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_int64_scalar" kindref="compound">Int64Scalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_numeric_scalar" kindref="compound">NumericScalar</ref>&lt;Int64Type&gt;<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_numeric_scalar" kindref="compound">NumericScalar&lt;Int64Type&gt;::NumericScalar</ref>;</highlight></codeline>
<codeline lineno="141"><highlight class="normal">};</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143" refid="structarrow_1_1_u_int8_scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_u_int8_scalar" kindref="compound">UInt8Scalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_numeric_scalar" kindref="compound">NumericScalar</ref>&lt;UInt8Type&gt;<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_numeric_scalar" kindref="compound">NumericScalar&lt;UInt8Type&gt;::NumericScalar</ref>;</highlight></codeline>
<codeline lineno="145"><highlight class="normal">};</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147" refid="structarrow_1_1_u_int16_scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_u_int16_scalar" kindref="compound">UInt16Scalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_numeric_scalar" kindref="compound">NumericScalar</ref>&lt;UInt16Type&gt;<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_numeric_scalar" kindref="compound">NumericScalar&lt;UInt16Type&gt;::NumericScalar</ref>;</highlight></codeline>
<codeline lineno="149"><highlight class="normal">};</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151" refid="structarrow_1_1_u_int32_scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_u_int32_scalar" kindref="compound">UInt32Scalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_numeric_scalar" kindref="compound">NumericScalar</ref>&lt;UInt32Type&gt;<sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_numeric_scalar" kindref="compound">NumericScalar&lt;UInt32Type&gt;::NumericScalar</ref>;</highlight></codeline>
<codeline lineno="153"><highlight class="normal">};</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155" refid="structarrow_1_1_u_int64_scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_u_int64_scalar" kindref="compound">UInt64Scalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_numeric_scalar" kindref="compound">NumericScalar</ref>&lt;UInt64Type&gt;<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_numeric_scalar" kindref="compound">NumericScalar&lt;UInt64Type&gt;::NumericScalar</ref>;</highlight></codeline>
<codeline lineno="157"><highlight class="normal">};</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159" refid="structarrow_1_1_half_float_scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_half_float_scalar" kindref="compound">HalfFloatScalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_numeric_scalar" kindref="compound">NumericScalar</ref>&lt;HalfFloatType&gt;<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_numeric_scalar" kindref="compound">NumericScalar&lt;HalfFloatType&gt;::NumericScalar</ref>;</highlight></codeline>
<codeline lineno="161"><highlight class="normal">};</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="structarrow_1_1_float_scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_float_scalar" kindref="compound">FloatScalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_numeric_scalar" kindref="compound">NumericScalar</ref>&lt;FloatType&gt;<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_numeric_scalar" kindref="compound">NumericScalar&lt;FloatType&gt;::NumericScalar</ref>;</highlight></codeline>
<codeline lineno="165"><highlight class="normal">};</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="structarrow_1_1_double_scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_double_scalar" kindref="compound">DoubleScalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_numeric_scalar" kindref="compound">NumericScalar</ref>&lt;DoubleType&gt;<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_numeric_scalar" kindref="compound">NumericScalar&lt;DoubleType&gt;::NumericScalar</ref>;</highlight></codeline>
<codeline lineno="169"><highlight class="normal">};</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171" refid="structarrow_1_1_base_binary_scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_base_binary_scalar" kindref="compound">BaseBinaryScalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_scalar" kindref="compound">Scalar</ref><sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_scalar_1ad9fe0e6c79f98c6875a23ed8b27e5175" kindref="member">Scalar::Scalar</ref>;</highlight></codeline>
<codeline lineno="173" refid="structarrow_1_1_base_binary_scalar_1af0a8288582370b481cbfb0eb0eccd9e4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_base_binary_scalar_1af0a8288582370b481cbfb0eb0eccd9e4" kindref="member">ValueType</ref><sp/>=<sp/>std::shared_ptr&lt;Buffer&gt;;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175" refid="structarrow_1_1_base_binary_scalar_1ae88504be46d05621d599df17b10d4671" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Buffer&gt;<sp/><ref refid="structarrow_1_1_base_binary_scalar_1ae88504be46d05621d599df17b10d4671" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="178" refid="structarrow_1_1_base_binary_scalar_1a42b1edb787bedf7c4c2f1421722d0613" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_base_binary_scalar_1a42b1edb787bedf7c4c2f1421722d0613" kindref="member">BaseBinaryScalar</ref>(std::shared_ptr&lt;Buffer&gt;<sp/>value,<sp/>std::shared_ptr&lt;DataType&gt;<sp/>type)</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structarrow_1_1_scalar" kindref="compound">Scalar</ref>{std::move(type),<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">},<sp/>value(std::move(value))<sp/>{}</highlight></codeline>
<codeline lineno="180"><highlight class="normal">};</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182" refid="structarrow_1_1_binary_scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_binary_scalar" kindref="compound">BinaryScalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_base_binary_scalar" kindref="compound">BaseBinaryScalar</ref><sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_base_binary_scalar_1a42b1edb787bedf7c4c2f1421722d0613" kindref="member">BaseBinaryScalar::BaseBinaryScalar</ref>;</highlight></codeline>
<codeline lineno="184" refid="structarrow_1_1_binary_scalar_1a4e210d163b0e58cd5ade64795797e2cb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_binary_scalar" kindref="compound">TypeClass</ref><sp/>=<sp/><ref refid="structarrow_1_1_binary_scalar" kindref="compound">BinaryScalar</ref>;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186" refid="structarrow_1_1_binary_scalar_1a552084cd4662b0650c0dc5bf065f4b24" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_binary_scalar_1a552084cd4662b0650c0dc5bf065f4b24" kindref="member">BinaryScalar</ref>(std::shared_ptr&lt;Buffer&gt;<sp/>value,<sp/>std::shared_ptr&lt;DataType&gt;<sp/>type)</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structarrow_1_1_base_binary_scalar" kindref="compound">BaseBinaryScalar</ref>(<ref refid="namespacestd" kindref="compound">std</ref>::move(value),<sp/><ref refid="namespacestd" kindref="compound">std</ref>::move(type))<sp/>{}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189" refid="structarrow_1_1_binary_scalar_1a1c139c57bd0e271d7710eb6bc990d96b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_binary_scalar_1a1c139c57bd0e271d7710eb6bc990d96b" kindref="member">BinaryScalar</ref>(std::shared_ptr&lt;Buffer&gt;<sp/>value)</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structarrow_1_1_binary_scalar" kindref="compound">BinaryScalar</ref>(<ref refid="namespacestd" kindref="compound">std</ref>::move(value),<sp/><ref refid="group__type-factories_1ga66c3979f26a439e78d048bbac84a9232" kindref="member">binary</ref>())<sp/>{}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192" refid="structarrow_1_1_binary_scalar_1ad19ba85042b6abec808bc85fd4c440b9" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_binary_scalar_1ad19ba85042b6abec808bc85fd4c440b9" kindref="member">BinaryScalar</ref>()<sp/>:<sp/><ref refid="structarrow_1_1_binary_scalar" kindref="compound">BinaryScalar</ref>(<ref refid="group__type-factories_1ga66c3979f26a439e78d048bbac84a9232" kindref="member">binary</ref>())<sp/>{}</highlight></codeline>
<codeline lineno="193"><highlight class="normal">};</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195" refid="structarrow_1_1_string_scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_string_scalar" kindref="compound">StringScalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_binary_scalar" kindref="compound">BinaryScalar</ref><sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_binary_scalar_1ad19ba85042b6abec808bc85fd4c440b9" kindref="member">BinaryScalar::BinaryScalar</ref>;</highlight></codeline>
<codeline lineno="197" refid="structarrow_1_1_string_scalar_1ac868fbf3d9e4121bc900cf847cf41f1a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_binary_scalar" kindref="compound">TypeClass</ref><sp/>=<sp/><ref refid="classarrow_1_1_string_type" kindref="compound">StringType</ref>;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199" refid="structarrow_1_1_string_scalar_1a412319d35c1cb2d71eb309f12185b98e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_string_scalar_1a412319d35c1cb2d71eb309f12185b98e" kindref="member">StringScalar</ref>(std::shared_ptr&lt;Buffer&gt;<sp/>value)</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structarrow_1_1_string_scalar" kindref="compound">StringScalar</ref>(<ref refid="namespacestd" kindref="compound">std</ref>::move(value),<sp/><ref refid="group__type-factories_1ga63178820a26f6ecb894ad35963ca981a" kindref="member">utf8</ref>())<sp/>{}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_string_scalar" kindref="compound">StringScalar</ref>(std::string<sp/>s);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204" refid="structarrow_1_1_string_scalar_1a17ef992e5536d6b87bb150ca8e2325f9" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_string_scalar_1a17ef992e5536d6b87bb150ca8e2325f9" kindref="member">StringScalar</ref>()<sp/>:<sp/><ref refid="structarrow_1_1_string_scalar" kindref="compound">StringScalar</ref>(<ref refid="group__type-factories_1ga63178820a26f6ecb894ad35963ca981a" kindref="member">utf8</ref>())<sp/>{}</highlight></codeline>
<codeline lineno="205"><highlight class="normal">};</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207" refid="structarrow_1_1_large_binary_scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_large_binary_scalar" kindref="compound">LargeBinaryScalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_base_binary_scalar" kindref="compound">BaseBinaryScalar</ref><sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_base_binary_scalar_1a42b1edb787bedf7c4c2f1421722d0613" kindref="member">BaseBinaryScalar::BaseBinaryScalar</ref>;</highlight></codeline>
<codeline lineno="209" refid="structarrow_1_1_large_binary_scalar_1a32c12ab7bf647e2a56a8a27fe319c16a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_large_binary_scalar" kindref="compound">TypeClass</ref><sp/>=<sp/><ref refid="structarrow_1_1_large_binary_scalar" kindref="compound">LargeBinaryScalar</ref>;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211" refid="structarrow_1_1_large_binary_scalar_1ad34f570bdb1d342021d65cb09dcc6447" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_large_binary_scalar_1ad34f570bdb1d342021d65cb09dcc6447" kindref="member">LargeBinaryScalar</ref>(std::shared_ptr&lt;Buffer&gt;<sp/>value,<sp/>std::shared_ptr&lt;DataType&gt;<sp/>type)</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structarrow_1_1_base_binary_scalar" kindref="compound">BaseBinaryScalar</ref>(<ref refid="namespacestd" kindref="compound">std</ref>::move(value),<sp/><ref refid="namespacestd" kindref="compound">std</ref>::move(type))<sp/>{}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="214" refid="structarrow_1_1_large_binary_scalar_1ab832462245ca111b1021e4bd2db68080" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_large_binary_scalar_1ab832462245ca111b1021e4bd2db68080" kindref="member">LargeBinaryScalar</ref>(std::shared_ptr&lt;Buffer&gt;<sp/>value)</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structarrow_1_1_large_binary_scalar" kindref="compound">LargeBinaryScalar</ref>(<ref refid="namespacestd" kindref="compound">std</ref>::move(value),<sp/><ref refid="group__type-factories_1gad41a46c979c848fee62212f2e49a8d8c" kindref="member">large_binary</ref>())<sp/>{}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="217" refid="structarrow_1_1_large_binary_scalar_1a1546120e5ebfc13108ee797e6b72ac8b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_large_binary_scalar_1a1546120e5ebfc13108ee797e6b72ac8b" kindref="member">LargeBinaryScalar</ref>()<sp/>:<sp/><ref refid="structarrow_1_1_large_binary_scalar" kindref="compound">LargeBinaryScalar</ref>(<ref refid="group__type-factories_1gad41a46c979c848fee62212f2e49a8d8c" kindref="member">large_binary</ref>())<sp/>{}</highlight></codeline>
<codeline lineno="218"><highlight class="normal">};</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220" refid="structarrow_1_1_large_string_scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_large_string_scalar" kindref="compound">LargeStringScalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_large_binary_scalar" kindref="compound">LargeBinaryScalar</ref><sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_large_binary_scalar_1a1546120e5ebfc13108ee797e6b72ac8b" kindref="member">LargeBinaryScalar::LargeBinaryScalar</ref>;</highlight></codeline>
<codeline lineno="222" refid="structarrow_1_1_large_string_scalar_1ac7b94fa3825b796f534825b4daa99b49" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_large_binary_scalar" kindref="compound">TypeClass</ref><sp/>=<sp/><ref refid="classarrow_1_1_large_string_type" kindref="compound">LargeStringType</ref>;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224" refid="structarrow_1_1_large_string_scalar_1a71b3c636a64d99551e17ad09e3adb179" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_large_string_scalar_1a71b3c636a64d99551e17ad09e3adb179" kindref="member">LargeStringScalar</ref>(std::shared_ptr&lt;Buffer&gt;<sp/>value)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structarrow_1_1_large_string_scalar" kindref="compound">LargeStringScalar</ref>(<ref refid="namespacestd" kindref="compound">std</ref>::move(value),<sp/><ref refid="group__type-factories_1gacc42ef32dc897b3bee1dea124cefab86" kindref="member">large_utf8</ref>())<sp/>{}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227" refid="structarrow_1_1_large_string_scalar_1a1deed474c17a4faca243d28ec484cd15" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_large_string_scalar_1a1deed474c17a4faca243d28ec484cd15" kindref="member">LargeStringScalar</ref>()<sp/>:<sp/><ref refid="structarrow_1_1_large_string_scalar" kindref="compound">LargeStringScalar</ref>(<ref refid="group__type-factories_1gacc42ef32dc897b3bee1dea124cefab86" kindref="member">large_utf8</ref>())<sp/>{}</highlight></codeline>
<codeline lineno="228"><highlight class="normal">};</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230" refid="structarrow_1_1_fixed_size_binary_scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_fixed_size_binary_scalar" kindref="compound">FixedSizeBinaryScalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_binary_scalar" kindref="compound">BinaryScalar</ref><sp/>{</highlight></codeline>
<codeline lineno="231" refid="structarrow_1_1_fixed_size_binary_scalar_1a9658fff924c0b02f5aed52804a0e7c6b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_binary_scalar" kindref="compound">TypeClass</ref><sp/>=<sp/><ref refid="classarrow_1_1_fixed_size_binary_type" kindref="compound">FixedSizeBinaryType</ref>;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_fixed_size_binary_scalar" kindref="compound">FixedSizeBinaryScalar</ref>(std::shared_ptr&lt;Buffer&gt;<sp/>value,<sp/>std::shared_ptr&lt;DataType&gt;<sp/>type);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235" refid="structarrow_1_1_fixed_size_binary_scalar_1a1b8aad926126110ccfe22d08392a4094" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_fixed_size_binary_scalar_1a1b8aad926126110ccfe22d08392a4094" kindref="member">FixedSizeBinaryScalar</ref>(std::shared_ptr&lt;DataType&gt;<sp/>type)<sp/>:<sp/><ref refid="structarrow_1_1_binary_scalar" kindref="compound">BinaryScalar</ref>(type)<sp/>{}</highlight></codeline>
<codeline lineno="236"><highlight class="normal">};</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="239" refid="structarrow_1_1_temporal_scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_temporal_scalar" kindref="compound">TemporalScalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_scalar" kindref="compound">Scalar</ref><sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_scalar_1ad9fe0e6c79f98c6875a23ed8b27e5175" kindref="member">Scalar::Scalar</ref>;</highlight></codeline>
<codeline lineno="241" refid="structarrow_1_1_temporal_scalar_1aa0c7857f2afe118ada0ffe46be60f8b5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_duration_type" kindref="compound">TypeClass</ref><sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="242" refid="structarrow_1_1_temporal_scalar_1aa3e7d4c233f99c9513adad6ccef997c0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_temporal_scalar_1aa3e7d4c233f99c9513adad6ccef997c0" kindref="member">ValueType</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::c_type;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244" refid="structarrow_1_1_temporal_scalar_1a56f453c85d12a738a8c786f5f73d31ab" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_temporal_scalar_1a56f453c85d12a738a8c786f5f73d31ab" kindref="member">TemporalScalar</ref>(<ref refid="structarrow_1_1_temporal_scalar_1aa3e7d4c233f99c9513adad6ccef997c0" kindref="member">ValueType</ref><sp/>value,<sp/>std::shared_ptr&lt;DataType&gt;<sp/>type)</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structarrow_1_1_scalar" kindref="compound">Scalar</ref>(<ref refid="namespacestd" kindref="compound">std</ref>::move(type),<sp/>true),<sp/>value(value)<sp/>{}</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247" refid="structarrow_1_1_temporal_scalar_1a99b1d4414ea416d9047ca298b0edb90b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_temporal_scalar_1a99b1d4414ea416d9047ca298b0edb90b" kindref="member">TemporalScalar</ref>(std::shared_ptr&lt;DataType&gt;<sp/>type)</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structarrow_1_1_scalar" kindref="compound">Scalar</ref>(<ref refid="namespacestd" kindref="compound">std</ref>::move(type),<sp/>false)<sp/>{}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250" refid="structarrow_1_1_temporal_scalar_1a00150dbd82233996c5544727a1fe82a7" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_temporal_scalar_1aa3e7d4c233f99c9513adad6ccef997c0" kindref="member">ValueType</ref><sp/><ref refid="structarrow_1_1_temporal_scalar_1a00150dbd82233996c5544727a1fe82a7" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="251"><highlight class="normal">};</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="254" refid="structarrow_1_1_date_scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_date_scalar" kindref="compound">DateScalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_temporal_scalar" kindref="compound">TemporalScalar</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_temporal_scalar" kindref="compound">TemporalScalar&lt;T&gt;::TemporalScalar</ref>;</highlight></codeline>
<codeline lineno="256" refid="structarrow_1_1_date_scalar_1a98233b9dd13e19bf8d1f758cabd9419a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_temporal_scalar_1aa3e7d4c233f99c9513adad6ccef997c0" kindref="member">ValueType</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_temporal_scalar_1aa3e7d4c233f99c9513adad6ccef997c0" kindref="member">TemporalScalar&lt;T&gt;::ValueType</ref>;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258" refid="structarrow_1_1_date_scalar_1a334c714d7e7bd979a046524c163890fc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_date_scalar_1a334c714d7e7bd979a046524c163890fc" kindref="member">DateScalar</ref>(<ref refid="structarrow_1_1_temporal_scalar_1aa3e7d4c233f99c9513adad6ccef997c0" kindref="member">ValueType</ref><sp/>value)</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structarrow_1_1_temporal_scalar" kindref="compound">TemporalScalar</ref>&lt;T&gt;(<ref refid="namespacestd" kindref="compound">std</ref>::move(value),<sp/><ref refid="structarrow_1_1_type_traits" kindref="compound">TypeTraits</ref>&lt;T&gt;::type_singleton())<sp/>{}</highlight></codeline>
<codeline lineno="260" refid="structarrow_1_1_date_scalar_1a97a9c0bf298f4e540d981d1d102041ea" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_date_scalar_1a97a9c0bf298f4e540d981d1d102041ea" kindref="member">DateScalar</ref>()<sp/>:<sp/><ref refid="structarrow_1_1_temporal_scalar" kindref="compound">TemporalScalar</ref>&lt;T&gt;(<ref refid="structarrow_1_1_type_traits" kindref="compound">TypeTraits</ref>&lt;T&gt;::type_singleton())<sp/>{}</highlight></codeline>
<codeline lineno="261"><highlight class="normal">};</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263" refid="structarrow_1_1_date32_scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_date32_scalar" kindref="compound">Date32Scalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_date_scalar" kindref="compound">DateScalar</ref>&lt;Date32Type&gt;<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_date_scalar" kindref="compound">DateScalar&lt;Date32Type&gt;::DateScalar</ref>;</highlight></codeline>
<codeline lineno="265"><highlight class="normal">};</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267" refid="structarrow_1_1_date64_scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_date64_scalar" kindref="compound">Date64Scalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_date_scalar" kindref="compound">DateScalar</ref>&lt;Date64Type&gt;<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_date_scalar" kindref="compound">DateScalar&lt;Date64Type&gt;::DateScalar</ref>;</highlight></codeline>
<codeline lineno="269"><highlight class="normal">};</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="272" refid="structarrow_1_1_time_scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_time_scalar" kindref="compound">TimeScalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_temporal_scalar" kindref="compound">TemporalScalar</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_temporal_scalar" kindref="compound">TemporalScalar&lt;T&gt;::TemporalScalar</ref>;</highlight></codeline>
<codeline lineno="274"><highlight class="normal">};</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276" refid="structarrow_1_1_time32_scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_time32_scalar" kindref="compound">Time32Scalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_time_scalar" kindref="compound">TimeScalar</ref>&lt;Time32Type&gt;<sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_time_scalar" kindref="compound">TimeScalar&lt;Time32Type&gt;::TimeScalar</ref>;</highlight></codeline>
<codeline lineno="278"><highlight class="normal">};</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280" refid="structarrow_1_1_time64_scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_time64_scalar" kindref="compound">Time64Scalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_time_scalar" kindref="compound">TimeScalar</ref>&lt;Time64Type&gt;<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_time_scalar" kindref="compound">TimeScalar&lt;Time64Type&gt;::TimeScalar</ref>;</highlight></codeline>
<codeline lineno="282"><highlight class="normal">};</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284" refid="structarrow_1_1_timestamp_scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_timestamp_scalar" kindref="compound">TimestampScalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_temporal_scalar" kindref="compound">TemporalScalar</ref>&lt;TimestampType&gt;<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_temporal_scalar" kindref="compound">TemporalScalar&lt;TimestampType&gt;::TemporalScalar</ref>;</highlight></codeline>
<codeline lineno="286"><highlight class="normal">};</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="289" refid="structarrow_1_1_interval_scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_interval_scalar" kindref="compound">IntervalScalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_temporal_scalar" kindref="compound">TemporalScalar</ref>&lt;T&gt;<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_temporal_scalar" kindref="compound">TemporalScalar&lt;T&gt;::TemporalScalar</ref>;</highlight></codeline>
<codeline lineno="291" refid="structarrow_1_1_interval_scalar_1ad614bb3d4b840caff6cead4cc1684fb9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_temporal_scalar_1aa3e7d4c233f99c9513adad6ccef997c0" kindref="member">ValueType</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_temporal_scalar_1aa3e7d4c233f99c9513adad6ccef997c0" kindref="member">TemporalScalar&lt;T&gt;::ValueType</ref>;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293" refid="structarrow_1_1_interval_scalar_1a5cb7ede0e62d297c92439809a3520d81" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_interval_scalar_1a5cb7ede0e62d297c92439809a3520d81" kindref="member">IntervalScalar</ref>(<ref refid="structarrow_1_1_temporal_scalar_1aa3e7d4c233f99c9513adad6ccef997c0" kindref="member">ValueType</ref><sp/>value)</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structarrow_1_1_temporal_scalar" kindref="compound">TemporalScalar</ref>&lt;T&gt;(value,<sp/><ref refid="structarrow_1_1_type_traits" kindref="compound">TypeTraits</ref>&lt;T&gt;::type_singleton())<sp/>{}</highlight></codeline>
<codeline lineno="295" refid="structarrow_1_1_interval_scalar_1a1860db96ebd483bfbb4a9dca160e575c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_interval_scalar_1a1860db96ebd483bfbb4a9dca160e575c" kindref="member">IntervalScalar</ref>()<sp/>:<sp/><ref refid="structarrow_1_1_temporal_scalar" kindref="compound">TemporalScalar</ref>&lt;T&gt;(<ref refid="structarrow_1_1_type_traits" kindref="compound">TypeTraits</ref>&lt;T&gt;::type_singleton())<sp/>{}</highlight></codeline>
<codeline lineno="296"><highlight class="normal">};</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298" refid="structarrow_1_1_month_interval_scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_month_interval_scalar" kindref="compound">MonthIntervalScalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_interval_scalar" kindref="compound">IntervalScalar</ref>&lt;MonthIntervalType&gt;<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_interval_scalar" kindref="compound">IntervalScalar&lt;MonthIntervalType&gt;::IntervalScalar</ref>;</highlight></codeline>
<codeline lineno="300"><highlight class="normal">};</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302" refid="structarrow_1_1_day_time_interval_scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_day_time_interval_scalar" kindref="compound">DayTimeIntervalScalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_interval_scalar" kindref="compound">IntervalScalar</ref>&lt;DayTimeIntervalType&gt;<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_interval_scalar" kindref="compound">IntervalScalar&lt;DayTimeIntervalType&gt;::IntervalScalar</ref>;</highlight></codeline>
<codeline lineno="304"><highlight class="normal">};</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306" refid="structarrow_1_1_duration_scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_duration_scalar" kindref="compound">DurationScalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_temporal_scalar" kindref="compound">TemporalScalar</ref>&lt;DurationType&gt;<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_temporal_scalar" kindref="compound">TemporalScalar&lt;DurationType&gt;::TemporalScalar</ref>;</highlight></codeline>
<codeline lineno="308"><highlight class="normal">};</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310" refid="structarrow_1_1_decimal128_scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_decimal128_scalar" kindref="compound">Decimal128Scalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_scalar" kindref="compound">Scalar</ref><sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_scalar_1ad9fe0e6c79f98c6875a23ed8b27e5175" kindref="member">Scalar::Scalar</ref>;</highlight></codeline>
<codeline lineno="312" refid="structarrow_1_1_decimal128_scalar_1af119c4bd44026809089ea19783af0296" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_decimal128_type" kindref="compound">TypeClass</ref><sp/>=<sp/><ref refid="classarrow_1_1_decimal128_type" kindref="compound">Decimal128Type</ref>;</highlight></codeline>
<codeline lineno="313" refid="structarrow_1_1_decimal128_scalar_1a357c394943171c8fa1b589aed72d2d74" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_decimal128" kindref="compound">ValueType</ref><sp/>=<sp/><ref refid="namespacegandiva_1a6bcd5f21dcf5814edac6263bdd780af1" kindref="member">Decimal128</ref>;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315" refid="structarrow_1_1_decimal128_scalar_1a85421a906c65f77d760958c0d313e7c3" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_decimal128_scalar_1a85421a906c65f77d760958c0d313e7c3" kindref="member">Decimal128Scalar</ref>(<ref refid="classarrow_1_1_decimal128" kindref="compound">Decimal128</ref><sp/>value,<sp/>std::shared_ptr&lt;DataType&gt;<sp/>type)</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structarrow_1_1_scalar" kindref="compound">Scalar</ref>(<ref refid="namespacestd" kindref="compound">std</ref>::move(type),<sp/>true),<sp/>value(value)<sp/>{}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318" refid="structarrow_1_1_decimal128_scalar_1aacc339d5d036c909a563ac0506434f8a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_decimal128" kindref="compound">Decimal128</ref><sp/><ref refid="structarrow_1_1_decimal128_scalar_1aacc339d5d036c909a563ac0506434f8a" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="319"><highlight class="normal">};</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321" refid="structarrow_1_1_base_list_scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_base_list_scalar" kindref="compound">BaseListScalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_scalar" kindref="compound">Scalar</ref><sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_scalar_1ad9fe0e6c79f98c6875a23ed8b27e5175" kindref="member">Scalar::Scalar</ref>;</highlight></codeline>
<codeline lineno="323" refid="structarrow_1_1_base_list_scalar_1a27a191ecf126cb56d74a69e1387b3034" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_base_list_scalar_1a27a191ecf126cb56d74a69e1387b3034" kindref="member">ValueType</ref><sp/>=<sp/>std::shared_ptr&lt;Array&gt;;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_base_list_scalar" kindref="compound">BaseListScalar</ref>(std::shared_ptr&lt;Array&gt;<sp/>value,<sp/>std::shared_ptr&lt;DataType&gt;<sp/>type);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_base_list_scalar" kindref="compound">BaseListScalar</ref>(std::shared_ptr&lt;Array&gt;<sp/>value);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329" refid="structarrow_1_1_base_list_scalar_1aa283f213991b411e9835b93fd6d1dba9" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Array&gt;<sp/><ref refid="structarrow_1_1_base_list_scalar_1aa283f213991b411e9835b93fd6d1dba9" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="330"><highlight class="normal">};</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332" refid="structarrow_1_1_list_scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_list_scalar" kindref="compound">ListScalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_base_list_scalar" kindref="compound">BaseListScalar</ref><sp/>{</highlight></codeline>
<codeline lineno="333" refid="structarrow_1_1_list_scalar_1af262d2af4aac3a775f38e463ff180fae" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_list_type" kindref="compound">TypeClass</ref><sp/>=<sp/><ref refid="classarrow_1_1_list_type" kindref="compound">ListType</ref>;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_base_list_scalar_1a3d7e553a05136cef283a178aff888d60" kindref="member">BaseListScalar::BaseListScalar</ref>;</highlight></codeline>
<codeline lineno="335"><highlight class="normal">};</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337" refid="structarrow_1_1_large_list_scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_large_list_scalar" kindref="compound">LargeListScalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_base_list_scalar" kindref="compound">BaseListScalar</ref><sp/>{</highlight></codeline>
<codeline lineno="338" refid="structarrow_1_1_large_list_scalar_1abdc470b338c7e81f7687c629db991ddc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_large_list_type" kindref="compound">TypeClass</ref><sp/>=<sp/><ref refid="classarrow_1_1_large_list_type" kindref="compound">LargeListType</ref>;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_base_list_scalar_1a3d7e553a05136cef283a178aff888d60" kindref="member">BaseListScalar::BaseListScalar</ref>;</highlight></codeline>
<codeline lineno="340"><highlight class="normal">};</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342" refid="structarrow_1_1_map_scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_map_scalar" kindref="compound">MapScalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_base_list_scalar" kindref="compound">BaseListScalar</ref><sp/>{</highlight></codeline>
<codeline lineno="343" refid="structarrow_1_1_map_scalar_1af0ceb9ea9bb425a5cae6ab765f9b0ea2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_map_type" kindref="compound">TypeClass</ref><sp/>=<sp/><ref refid="classarrow_1_1_map_type" kindref="compound">MapType</ref>;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_base_list_scalar_1a3d7e553a05136cef283a178aff888d60" kindref="member">BaseListScalar::BaseListScalar</ref>;</highlight></codeline>
<codeline lineno="345"><highlight class="normal">};</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347" refid="structarrow_1_1_fixed_size_list_scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_fixed_size_list_scalar" kindref="compound">FixedSizeListScalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_base_list_scalar" kindref="compound">BaseListScalar</ref><sp/>{</highlight></codeline>
<codeline lineno="348" refid="structarrow_1_1_fixed_size_list_scalar_1aec4997a89bf24f952fb4bd2a1c00288b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_fixed_size_list_type" kindref="compound">TypeClass</ref><sp/>=<sp/><ref refid="classarrow_1_1_fixed_size_list_type" kindref="compound">FixedSizeListType</ref>;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_base_list_scalar_1a3d7e553a05136cef283a178aff888d60" kindref="member">BaseListScalar::BaseListScalar</ref>;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_fixed_size_list_scalar" kindref="compound">FixedSizeListScalar</ref>(std::shared_ptr&lt;Array&gt;<sp/>value,<sp/>std::shared_ptr&lt;DataType&gt;<sp/>type);</highlight></codeline>
<codeline lineno="352"><highlight class="normal">};</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="354" refid="structarrow_1_1_struct_scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_struct_scalar" kindref="compound">StructScalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_scalar" kindref="compound">Scalar</ref><sp/>{</highlight></codeline>
<codeline lineno="355" refid="structarrow_1_1_struct_scalar_1aada34f4ab72262c1893082ca5ea22c68" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_struct_type" kindref="compound">TypeClass</ref><sp/>=<sp/><ref refid="classarrow_1_1_struct_type" kindref="compound">StructType</ref>;</highlight></codeline>
<codeline lineno="356" refid="structarrow_1_1_struct_scalar_1a66cf6d50a05d3e6e4577a694509976bb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_struct_scalar_1a66cf6d50a05d3e6e4577a694509976bb" kindref="member">ValueType</ref><sp/>=<sp/>std::vector&lt;std::shared_ptr&lt;Scalar&gt;&gt;;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358" refid="structarrow_1_1_struct_scalar_1ae64d434fdcfbece17e247dfe98e57c27" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Scalar&gt;&gt;<sp/><ref refid="structarrow_1_1_struct_scalar_1ae64d434fdcfbece17e247dfe98e57c27" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360" refid="structarrow_1_1_struct_scalar_1a2fa69be1d30ff20ae91ab1e4a9070dea" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_struct_scalar_1a2fa69be1d30ff20ae91ab1e4a9070dea" kindref="member">StructScalar</ref>(<ref refid="structarrow_1_1_struct_scalar_1a66cf6d50a05d3e6e4577a694509976bb" kindref="member">ValueType</ref><sp/>value,<sp/>std::shared_ptr&lt;DataType&gt;<sp/>type)</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structarrow_1_1_scalar" kindref="compound">Scalar</ref>(<ref refid="namespacestd" kindref="compound">std</ref>::move(type),<sp/>true),<sp/>value(<ref refid="namespacestd" kindref="compound">std</ref>::move(value))<sp/>{}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363" refid="structarrow_1_1_struct_scalar_1a6ab1e9862efa5e5449168caa25aaf13c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_struct_scalar_1a6ab1e9862efa5e5449168caa25aaf13c" kindref="member">StructScalar</ref>(std::shared_ptr&lt;DataType&gt;<sp/>type)<sp/>:<sp/><ref refid="structarrow_1_1_scalar" kindref="compound">Scalar</ref>(<ref refid="namespacestd" kindref="compound">std</ref>::move(type))<sp/>{}</highlight></codeline>
<codeline lineno="364"><highlight class="normal">};</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366" refid="structarrow_1_1_union_scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_union_scalar" kindref="compound">UnionScalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_scalar" kindref="compound">Scalar</ref><sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_scalar_1ad9fe0e6c79f98c6875a23ed8b27e5175" kindref="member">Scalar::Scalar</ref>;</highlight></codeline>
<codeline lineno="368" refid="structarrow_1_1_union_scalar_1a7c924f5c5b339702191e62ed3ad0fecc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_union_type" kindref="compound">TypeClass</ref><sp/>=<sp/><ref refid="classarrow_1_1_union_type" kindref="compound">UnionType</ref>;</highlight></codeline>
<codeline lineno="369"><highlight class="normal">};</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371" refid="structarrow_1_1_dictionary_scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_dictionary_scalar" kindref="compound">DictionaryScalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_scalar" kindref="compound">Scalar</ref><sp/>{</highlight></codeline>
<codeline lineno="372" refid="structarrow_1_1_dictionary_scalar_1ae88ad0b338b445f32e790ccb2d1eef41" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_dictionary_type" kindref="compound">TypeClass</ref><sp/>=<sp/><ref refid="classarrow_1_1_dictionary_type" kindref="compound">DictionaryType</ref>;</highlight></codeline>
<codeline lineno="373" refid="structarrow_1_1_dictionary_scalar_1a45949d6e3b9c7c6d14b105b13eb8a552" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_dictionary_scalar_1a45949d6e3b9c7c6d14b105b13eb8a552" kindref="member">ValueType</ref><sp/>=<sp/>std::shared_ptr&lt;Scalar&gt;;</highlight></codeline>
<codeline lineno="374" refid="structarrow_1_1_dictionary_scalar_1a9c00b7abccc3209fa74ac255ee2224a2" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_dictionary_scalar_1a45949d6e3b9c7c6d14b105b13eb8a552" kindref="member">ValueType</ref><sp/><ref refid="structarrow_1_1_dictionary_scalar_1a9c00b7abccc3209fa74ac255ee2224a2" kindref="member">value</ref>;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_dictionary_scalar" kindref="compound">DictionaryScalar</ref>(std::shared_ptr&lt;DataType&gt;<sp/>type);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378" refid="structarrow_1_1_dictionary_scalar_1aac870fbde87b1f662c49e9a03782da35" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_dictionary_scalar_1aac870fbde87b1f662c49e9a03782da35" kindref="member">DictionaryScalar</ref>(<ref refid="structarrow_1_1_dictionary_scalar_1a45949d6e3b9c7c6d14b105b13eb8a552" kindref="member">ValueType</ref><sp/>value,<sp/>std::shared_ptr&lt;DataType&gt;<sp/>type)</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structarrow_1_1_scalar" kindref="compound">Scalar</ref>(<ref refid="namespacestd" kindref="compound">std</ref>::move(type),<sp/>true),<sp/>value(<ref refid="namespacestd" kindref="compound">std</ref>::move(value))<sp/>{}</highlight></codeline>
<codeline lineno="380"><highlight class="normal">};</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382" refid="structarrow_1_1_extension_scalar" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_extension_scalar" kindref="compound">ExtensionScalar</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_scalar" kindref="compound">Scalar</ref><sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_scalar_1ad9fe0e6c79f98c6875a23ed8b27e5175" kindref="member">Scalar::Scalar</ref>;</highlight></codeline>
<codeline lineno="384" refid="structarrow_1_1_extension_scalar_1a09d428a95ea5cc59e39acc351e98ce90" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_extension_type" kindref="compound">TypeClass</ref><sp/>=<sp/><ref refid="classarrow_1_1_extension_type" kindref="compound">ExtensionType</ref>;</highlight></codeline>
<codeline lineno="385"><highlight class="normal">};</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="388"><highlight class="normal">std::shared_ptr&lt;Scalar&gt;<sp/><ref refid="namespacearrow_1a99890873e6dbba7461d3d8bc9b4a03e2" kindref="member">MakeNullScalar</ref>(std::shared_ptr&lt;DataType&gt;<sp/>type);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>CheckBufferLength(...)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1a5c0b0031db6eeec3dcc70485d24cfe03" kindref="member">Status::OK</ref>();<sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>CheckBufferLength(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_fixed_size_binary_type" kindref="compound">FixedSizeBinaryType</ref>*<sp/>t,</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Buffer&gt;*<sp/>b);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValueRef&gt;</highlight></codeline>
<codeline lineno="400" refid="structarrow_1_1_make_scalar_impl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structarrow_1_1_make_scalar_impl" kindref="compound">MakeScalarImpl</ref><sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>ScalarType<sp/>=<sp/>typename<sp/>TypeTraits&lt;T&gt;::ScalarType,</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValueType<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ScalarType::ValueType,</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Enable<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_constructible&lt;ScalarType,<sp/>ValueType,</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;DataType&gt;&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_convertible&lt;ValueRef,<sp/>ValueType&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="407" refid="structarrow_1_1_make_scalar_impl_1a4ad2e5a596530c78ece67dc6f990d51e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="structarrow_1_1_make_scalar_impl_1a4ad2e5a596530c78ece67dc6f990d51e" kindref="member">Visit</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(internal::CheckBufferLength(&amp;t,<sp/>&amp;value_));</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>out_<sp/>=<sp/>std::make_shared&lt;ScalarType&gt;(</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">ValueType</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">ValueRef</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value_)),<sp/>std::move(type_));</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1a5c0b0031db6eeec3dcc70485d24cfe03" kindref="member">Status::OK</ref>();</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414" refid="structarrow_1_1_make_scalar_impl_1a78612d36b7b560598628ac975d85231c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="structarrow_1_1_make_scalar_impl_1a78612d36b7b560598628ac975d85231c" kindref="member">Visit</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref>&amp;<sp/>t)<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1ae63ddaaa7db5edef4e75a26b693351a1" kindref="member">Status::NotImplemented</ref>(</highlight><highlight class="stringliteral">&quot;constructing<sp/>scalars<sp/>of<sp/>type<sp/>&quot;</highlight><highlight class="normal">,<sp/>t,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>from<sp/>&quot;</highlight><highlight class="normal">,<sp/>value_);</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418" refid="structarrow_1_1_make_scalar_impl_1a5e5aced872764c66c2fc64d829657b65" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;Scalar&gt;</ref>&gt;<sp/><ref refid="structarrow_1_1_make_scalar_impl_1a5e5aced872764c66c2fc64d829657b65" kindref="member">Finish</ref>()<sp/>&amp;&amp;<sp/>{</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(<ref refid="namespacearrow_1a431bd46d978673b1b00afc3049776c49" kindref="member">VisitTypeInline</ref>(*type_,<sp/></highlight><highlight class="keyword">this</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(out_);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight></codeline>
<codeline lineno="423" refid="structarrow_1_1_make_scalar_impl_1aaf8f72cc3be959ea018c3c520217f010" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;DataType&gt;<sp/><ref refid="structarrow_1_1_make_scalar_impl_1aaf8f72cc3be959ea018c3c520217f010" kindref="member">type_</ref>;</highlight></codeline>
<codeline lineno="424" refid="structarrow_1_1_make_scalar_impl_1ab48709a8c7f2043e470688899719f988" refkind="member"><highlight class="normal"><sp/><sp/>ValueRef<sp/><ref refid="structarrow_1_1_make_scalar_impl_1ab48709a8c7f2043e470688899719f988" kindref="member">value_</ref>;</highlight></codeline>
<codeline lineno="425" refid="structarrow_1_1_make_scalar_impl_1aa5d92f1acf3e6d5cebd3232a0e62768b" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Scalar&gt;<sp/><ref refid="structarrow_1_1_make_scalar_impl_1aa5d92f1acf3e6d5cebd3232a0e62768b" kindref="member">out_</ref>;</highlight></codeline>
<codeline lineno="426"><highlight class="normal">};</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Value&gt;</highlight></codeline>
<codeline lineno="429" refid="namespacearrow_1a5902391d987b8f930a8d3898813d91d9" refkind="member"><highlight class="normal"><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;Scalar&gt;</ref>&gt;<sp/><ref refid="namespacearrow_1a5902391d987b8f930a8d3898813d91d9" kindref="member">MakeScalar</ref>(std::shared_ptr&lt;DataType&gt;<sp/>type,</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Value&amp;&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_make_scalar_impl" kindref="compound">MakeScalarImpl&lt;Value&amp;&amp;&gt;</ref>{type,<sp/>std::forward&lt;Value&gt;(value),<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>}.Finish();</highlight></codeline>
<codeline lineno="432"><highlight class="normal">}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal">template<sp/>&lt;typename<sp/>Value,<sp/>typename<sp/>Traits<sp/>=<sp/>CTypeTraits&lt;typename<sp/>std::decay&lt;Value&gt;::type&gt;,</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ScalarType<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Traits::ScalarType,</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Enable<sp/>=<sp/>decltype(ScalarType(std::declval&lt;Value&gt;(),</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Traits::type_singleton()))&gt;</highlight></codeline>
<codeline lineno="439" refid="namespacearrow_1a6d94a22489c2d88b5ece3464f6757b5c" refkind="member"><highlight class="normal">std::shared_ptr&lt;Scalar&gt;<sp/><ref refid="namespacearrow_1a5902391d987b8f930a8d3898813d91d9" kindref="member">MakeScalar</ref>(Value<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;ScalarType&gt;(std::move(value),<sp/>Traits::type_singleton());</highlight></codeline>
<codeline lineno="441"><highlight class="normal">}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443" refid="namespacearrow_1ade3bae9d69b7544f4bfe67f6c60ceb1e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Scalar&gt;<sp/><ref refid="namespacearrow_1a5902391d987b8f930a8d3898813d91d9" kindref="member">MakeScalar</ref>(std::string<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;StringScalar&gt;(std::move(value));</highlight></codeline>
<codeline lineno="445"><highlight class="normal">}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>arrow</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/arrow/cpp/src/arrow/scalar.h"/>
  </compounddef>
</doxygen>
