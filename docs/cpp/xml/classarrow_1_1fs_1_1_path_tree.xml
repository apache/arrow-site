<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1fs_1_1_path_tree" kind="class" language="C++" prot="public">
    <compoundname>arrow::fs::PathTree</compoundname>
    <includes refid="path__tree_8h" local="no">arrow/filesystem/path_tree.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classarrow_1_1fs_1_1_path_tree_1a57996ea51e225f74ad6e8dbe2c20f3e5" prot="protected" static="no" mutable="no">
        <type><ref refid="structarrow_1_1fs_1_1_file_stats" kindref="compound">FileStats</ref></type>
        <definition>FileStats arrow::fs::PathTree::stats_</definition>
        <argsstring></argsstring>
        <name>stats_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/path_tree.h" line="92" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/path_tree.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1fs_1_1_path_tree_1afe0868e3223d43f16b185a32cb53c518" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1fs_1_1_path_tree" kindref="compound">PathTree</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;PathTree&gt; &gt; arrow::fs::PathTree::subtrees_</definition>
        <argsstring></argsstring>
        <name>subtrees_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/path_tree.h" line="93" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/path_tree.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1fs_1_1_path_tree_1a34f9c2843286a8c2bdef67d131547e2f" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::fs::PathTree::PathTree</definition>
        <argsstring>(FileStats stats)</argsstring>
        <name>PathTree</name>
        <param>
          <type><ref refid="structarrow_1_1fs_1_1_file_stats" kindref="compound">FileStats</ref></type>
          <declname>stats</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/path_tree.h" line="43" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/path_tree.h" bodystart="43" bodyend="43"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_path_tree_1a75e85b0eb1b31bad9d602f2663790bac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::fs::PathTree::PathTree</definition>
        <argsstring>(FileStats stats, std::vector&lt; std::shared_ptr&lt; PathTree &gt;&gt; subtrees)</argsstring>
        <name>PathTree</name>
        <param>
          <type><ref refid="structarrow_1_1fs_1_1_file_stats" kindref="compound">FileStats</ref></type>
          <declname>stats</declname>
        </param>
        <param>
          <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1fs_1_1_path_tree" kindref="compound">PathTree</ref> &gt;&gt;</type>
          <declname>subtrees</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/path_tree.h" line="44" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/path_tree.h" bodystart="44" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_path_tree_1a8e402764301e5701b977ce28170e7cf9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structarrow_1_1fs_1_1_file_stats" kindref="compound">FileStats</ref></type>
        <definition>FileStats arrow::fs::PathTree::stats</definition>
        <argsstring>() const</argsstring>
        <name>stats</name>
        <briefdescription>
<para>Returns the FileStat of this node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/path_tree.h" line="56" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/path_tree.h" bodystart="56" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_path_tree_1a7a2b50276487e2c4afff23833845b808" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1fs_1_1_path_tree" kindref="compound">PathTree</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;PathTree&gt; &gt; arrow::fs::PathTree::subtrees</definition>
        <argsstring>() const</argsstring>
        <name>subtrees</name>
        <briefdescription>
<para>Returns the subtrees under this node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/path_tree.h" line="58" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/path_tree.h" bodystart="58" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_path_tree_1aea2ac06aa75ab63957b54fe6ce0d992e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Visitor</type>
          </param>
          <param>
            <type>typename Matcher</type>
          </param>
        </templateparamlist>
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::fs::PathTree::Visit</definition>
        <argsstring>(Visitor &amp;&amp;v, Matcher &amp;&amp;m) const</argsstring>
        <name>Visit</name>
        <param>
          <type>Visitor &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>Matcher &amp;&amp;</type>
          <declname>m</declname>
        </param>
        <briefdescription>
<para>Visit with eager pruning. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/path_tree.h" line="62" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/path_tree.h" bodystart="62" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_path_tree_1a097a8d48c40bdd1329d8ae7752f603a1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Visitor</type>
          </param>
        </templateparamlist>
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::fs::PathTree::Visit</definition>
        <argsstring>(Visitor &amp;&amp;v) const</argsstring>
        <name>Visit</name>
        <param>
          <type>Visitor &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/path_tree.h" line="79" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/path_tree.h" bodystart="79" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_path_tree_1aeb19ea37959ab1e6f4c00bfdaa7750d9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::fs::PathTree::operator==</definition>
        <argsstring>(const PathTree &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classarrow_1_1fs_1_1_path_tree" kindref="compound">PathTree</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/path_tree.h" line="87" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/path_tree.h" bodystart="87" bodyend="89"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1fs_1_1_path_tree_1a0d638463c7aac2bd56b945cef7e4dc26" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::fs::PathTree::Make</definition>
        <argsstring>(std::vector&lt; FileStats &gt; stats, PathForest *out)</argsstring>
        <name>Make</name>
        <param>
          <type>std::vector&lt; <ref refid="structarrow_1_1fs_1_1_file_stats" kindref="compound">FileStats</ref> &gt;</type>
          <declname>stats</declname>
        </param>
        <param>
          <type><ref refid="namespacearrow_1_1fs_1aa6da16a5d04ee7f671fbae87fb988731" kindref="member">PathForest</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Transforms a <ref refid="structarrow_1_1fs_1_1_file_stats" kindref="compound">FileStats</ref> vector into a forest of trees. </para>        </briefdescription>
        <detaileddescription>
<para>Since there is no guarantee of complete trees, it is possible to have a forest (multiple roots). The caller should ensure that stats have unique path. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/path_tree.h" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_path_tree_1a7b9424d42be30eda53a2db7256072513" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::fs::PathTree::Make</definition>
        <argsstring>(std::vector&lt; FileStats &gt; stats, std::shared_ptr&lt; PathTree &gt; *out)</argsstring>
        <name>Make</name>
        <param>
          <type>std::vector&lt; <ref refid="structarrow_1_1fs_1_1_file_stats" kindref="compound">FileStats</ref> &gt;</type>
          <declname>stats</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1fs_1_1_path_tree" kindref="compound">PathTree</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Like MakeForest but fails if there&apos;s more than one root. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/path_tree.h" line="53" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classarrow_1_1fs_1_1_path_tree_1a919483a888e023f6f281af99fc40b5d8" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void arrow::fs::PathTree::AddChild</definition>
        <argsstring>(std::shared_ptr&lt; PathTree &gt; child)</argsstring>
        <name>AddChild</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1fs_1_1_path_tree" kindref="compound">PathTree</ref> &gt;</type>
          <declname>child</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/path_tree.h" line="97" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/path_tree.h" bodystart="97" bodyend="99"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A <ref refid="classarrow_1_1fs_1_1_path_tree" kindref="compound">PathTree</ref> is a utility to transform a vector of <ref refid="structarrow_1_1fs_1_1_file_stats" kindref="compound">FileStats</ref> into a forest representation for tree traversal purposes. </para>    </briefdescription>
    <detaileddescription>
<para>Node in the graph wraps a <ref refid="structarrow_1_1fs_1_1_file_stats" kindref="compound">FileStats</ref>. Files are expected to be found only at leaves of the tree. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="3319">
        <label>arrow::fs::PathTree</label>
        <link refid="classarrow_1_1fs_1_1_path_tree"/>
        <childnode refid="3320" relation="usage">
          <edgelabel>stats_</edgelabel>
        </childnode>
      </node>
      <node id="3320">
        <label>arrow::fs::FileStats</label>
        <link refid="structarrow_1_1fs_1_1_file_stats"/>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/filesystem/path_tree.h" line="41" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/path_tree.h" bodystart="41" bodyend="100"/>
    <listofallmembers>
      <member refid="classarrow_1_1fs_1_1_path_tree_1a919483a888e023f6f281af99fc40b5d8" prot="protected" virt="non-virtual"><scope>arrow::fs::PathTree</scope><name>AddChild</name></member>
      <member refid="classarrow_1_1fs_1_1_path_tree_1a0d638463c7aac2bd56b945cef7e4dc26" prot="public" virt="non-virtual"><scope>arrow::fs::PathTree</scope><name>Make</name></member>
      <member refid="classarrow_1_1fs_1_1_path_tree_1a7b9424d42be30eda53a2db7256072513" prot="public" virt="non-virtual"><scope>arrow::fs::PathTree</scope><name>Make</name></member>
      <member refid="classarrow_1_1fs_1_1_path_tree_1aeb19ea37959ab1e6f4c00bfdaa7750d9" prot="public" virt="non-virtual"><scope>arrow::fs::PathTree</scope><name>operator==</name></member>
      <member refid="classarrow_1_1fs_1_1_path_tree_1a34f9c2843286a8c2bdef67d131547e2f" prot="public" virt="non-virtual"><scope>arrow::fs::PathTree</scope><name>PathTree</name></member>
      <member refid="classarrow_1_1fs_1_1_path_tree_1a75e85b0eb1b31bad9d602f2663790bac" prot="public" virt="non-virtual"><scope>arrow::fs::PathTree</scope><name>PathTree</name></member>
      <member refid="classarrow_1_1fs_1_1_path_tree_1a8e402764301e5701b977ce28170e7cf9" prot="public" virt="non-virtual"><scope>arrow::fs::PathTree</scope><name>stats</name></member>
      <member refid="classarrow_1_1fs_1_1_path_tree_1a57996ea51e225f74ad6e8dbe2c20f3e5" prot="protected" virt="non-virtual"><scope>arrow::fs::PathTree</scope><name>stats_</name></member>
      <member refid="classarrow_1_1fs_1_1_path_tree_1a7a2b50276487e2c4afff23833845b808" prot="public" virt="non-virtual"><scope>arrow::fs::PathTree</scope><name>subtrees</name></member>
      <member refid="classarrow_1_1fs_1_1_path_tree_1afe0868e3223d43f16b185a32cb53c518" prot="protected" virt="non-virtual"><scope>arrow::fs::PathTree</scope><name>subtrees_</name></member>
      <member refid="classarrow_1_1fs_1_1_path_tree_1aea2ac06aa75ab63957b54fe6ce0d992e" prot="public" virt="non-virtual"><scope>arrow::fs::PathTree</scope><name>Visit</name></member>
      <member refid="classarrow_1_1fs_1_1_path_tree_1a097a8d48c40bdd1329d8ae7752f603a1" prot="public" virt="non-virtual"><scope>arrow::fs::PathTree</scope><name>Visit</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
