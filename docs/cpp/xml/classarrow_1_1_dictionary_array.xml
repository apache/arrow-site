<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_dictionary_array" kind="class" language="C++" prot="public">
    <compoundname>arrow::DictionaryArray</compoundname>
    <basecompoundref refid="classarrow_1_1_array" prot="public" virt="non-virtual">arrow::Array</basecompoundref>
    <includes refid="array_8h" local="no">arrow/array.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classarrow_1_1_dictionary_array_1acd352de67775187d93c6e34b2ba55440" prot="public" static="no">
        <type><ref refid="classarrow_1_1_dictionary_type" kindref="compound">DictionaryType</ref></type>
        <definition>using arrow::DictionaryArray::TypeClass =  DictionaryType</definition>
        <argsstring></argsstring>
        <name>TypeClass</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1314" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="1314" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classarrow_1_1_dictionary_array_1adca4061547095b3cc1134b2d83b62c37" prot="private" static="no" mutable="no">
        <type>const <ref refid="classarrow_1_1_dictionary_type" kindref="compound">DictionaryType</ref> *</type>
        <definition>const DictionaryType* arrow::DictionaryArray::dict_type_</definition>
        <argsstring></argsstring>
        <name>dict_type_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1376" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="1376" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_dictionary_array_1afadfd10eed612e5d06e073ffe01022da" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Array&gt; arrow::DictionaryArray::indices_</definition>
        <argsstring></argsstring>
        <name>indices_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1377" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="1377" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1_dictionary_array_1ad2825a2549e9f58c5866278c375754c5" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::DictionaryArray::DictionaryArray</definition>
        <argsstring>(const std::shared_ptr&lt; ArrayData &gt; &amp;data)</argsstring>
        <name>DictionaryArray</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1316" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_dictionary_array_1ad19a6216bdc228e5cd13ee52a0bd50c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::DictionaryArray::DictionaryArray</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;type, const std::shared_ptr&lt; Array &gt; &amp;indices, const std::shared_ptr&lt; Array &gt; &amp;dictionary)</argsstring>
        <name>DictionaryArray</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; &amp;</type>
          <declname>dictionary</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1318" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_dictionary_array_1a6f491c929655df6641a03a12c67a6b8d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;Array&gt; &gt; arrow::DictionaryArray::Transpose</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;type, const std::shared_ptr&lt; Array &gt; &amp;dictionary, const int32_t *transpose_map, MemoryPool *pool=default_memory_pool()) const</argsstring>
        <name>Transpose</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; &amp;</type>
          <declname>dictionary</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>transpose_map</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
          <defval><ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">default_memory_pool</ref>()</defval>
        </param>
        <briefdescription>
<para>Transpose this <ref refid="classarrow_1_1_dictionary_array" kindref="compound">DictionaryArray</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>This method constructs a new dictionary array with the given dictionary type, transposing indices using the transpose map. The type and the transpose map are typically computed using <ref refid="classarrow_1_1_dictionary_unifier" kindref="compound">DictionaryUnifier</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">type</parametername>
</parameternamelist>
<parameterdescription>
<para>the new type object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dictionary</parametername>
</parameternamelist>
<parameterdescription>
<para>the new dictionary </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">transpose_map</parametername>
</parameternamelist>
<parameterdescription>
<para>transposition array of this array&apos;s indices into the target array&apos;s indices </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pool</parametername>
</parameternamelist>
<parameterdescription>
<para>a pool to allocate the array data from </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1355" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_dictionary_array_1a8b1bf19ac8e472581b5493a32785021c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::DictionaryArray::Transpose</definition>
        <argsstring>(MemoryPool *pool, const std::shared_ptr&lt; DataType &gt; &amp;type, const std::shared_ptr&lt; Array &gt; &amp;dictionary, const int32_t *transpose_map, std::shared_ptr&lt; Array &gt; *out) const</argsstring>
        <name>Transpose</name>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; &amp;</type>
          <declname>dictionary</declname>
        </param>
        <param>
          <type>const int32_t *</type>
          <declname>transpose_map</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1360" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_dictionary_array_1a174e8f2555d0833a45e5ad6c49f7ebab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::DictionaryArray::CanCompareIndices</definition>
        <argsstring>(const DictionaryArray &amp;other) const</argsstring>
        <name>CanCompareIndices</name>
        <param>
          <type>const <ref refid="classarrow_1_1_dictionary_array" kindref="compound">DictionaryArray</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Determine whether dictionary arrays may be compared without unification. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1365" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_dictionary_array_1ab77f454477e3695592274f6266647175" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Array&gt; arrow::DictionaryArray::dictionary</definition>
        <argsstring>() const</argsstring>
        <name>dictionary</name>
        <briefdescription>
<para>Return the dictionary for this array, which is stored as a member of the <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> internal structure. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1369" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_dictionary_array_1a27372a98ddc7a7d01c48cdf6077150c3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Array&gt; arrow::DictionaryArray::indices</definition>
        <argsstring>() const</argsstring>
        <name>indices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1370" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_dictionary_array_1a2e9c7a3bf2eea6936f08773861d2ab51" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classarrow_1_1_dictionary_type" kindref="compound">DictionaryType</ref> *</type>
        <definition>const DictionaryType* arrow::DictionaryArray::dict_type</definition>
        <argsstring>() const</argsstring>
        <name>dict_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1372" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="1372" bodyend="1372"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1_dictionary_array_1ab272b5854125c3d1f62e1d865eff06d7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;Array&gt; &gt; arrow::DictionaryArray::FromArrays</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;type, const std::shared_ptr&lt; Array &gt; &amp;indices, const std::shared_ptr&lt; Array &gt; &amp;dictionary)</argsstring>
        <name>FromArrays</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; &amp;</type>
          <declname>dictionary</declname>
        </param>
        <briefdescription>
<para>Construct <ref refid="classarrow_1_1_dictionary_array" kindref="compound">DictionaryArray</ref> from dictionary and indices array and validate. </para>        </briefdescription>
        <detaileddescription>
<para>This function does the validation of the indices and input type. It checks if all indices are non-negative and smaller than the size of the dictionary</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">type</parametername>
</parameternamelist>
<parameterdescription>
<para>a dictionary type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dictionary</parametername>
</parameternamelist>
<parameterdescription>
<para>the dictionary with same value type as the type object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">indices</parametername>
</parameternamelist>
<parameterdescription>
<para>an array of non-negative signed integers smaller than the size of the dictionary </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1333" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_dictionary_array_1a68f94be272f020e8044bd2346ecf1083" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::DictionaryArray::FromArrays</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;type, const std::shared_ptr&lt; Array &gt; &amp;indices, const std::shared_ptr&lt; Array &gt; &amp;dictionary, std::shared_ptr&lt; Array &gt; *out)</argsstring>
        <name>FromArrays</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; &amp;</type>
          <declname>dictionary</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1338" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classarrow_1_1_dictionary_array_1aa43f444984156b04a680f65d17329a79" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void arrow::DictionaryArray::SetData</definition>
        <argsstring>(const std::shared_ptr&lt; ArrayData &gt; &amp;data)</argsstring>
        <name>SetData</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1375" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classarrow_1_1_array" kindref="compound">Array</ref> type for dictionary-encoded data with a data-dependent dictionary. </para>    </briefdescription>
    <detaileddescription>
<para>A dictionary array contains an array of non-negative integers (the &quot;dictionary indices&quot;) along with a data type containing a &quot;dictionary&quot; corresponding to the distinct values represented in the data.</para><para>For example, the array</para><para>[&quot;foo&quot;, &quot;bar&quot;, &quot;foo&quot;, &quot;bar&quot;, &quot;foo&quot;, &quot;bar&quot;]</para><para>with dictionary [&quot;bar&quot;, &quot;foo&quot;], would have dictionary array representation</para><para>indices: [1, 0, 1, 0, 1, 0] dictionary: [&quot;bar&quot;, &quot;foo&quot;]</para><para>The indices in principle may have any integer type (signed or unsigned), though presently data in IPC exchanges must be signed int32. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="1265">
        <label>arrow::Array</label>
        <link refid="classarrow_1_1_array"/>
      </node>
      <node id="1264">
        <label>arrow::DictionaryArray</label>
        <link refid="classarrow_1_1_dictionary_array"/>
        <childnode refid="1265" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1267">
        <label>arrow::Array</label>
        <link refid="classarrow_1_1_array"/>
      </node>
      <node id="1266">
        <label>arrow::DictionaryArray</label>
        <link refid="classarrow_1_1_dictionary_array"/>
        <childnode refid="1267" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/array.h" line="1312" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="1312" bodyend="1378"/>
    <listofallmembers>
      <member refid="classarrow_1_1_array_1a168f3ec5c96688dadeaf015692e4bef8" prot="public" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>Accept</name></member>
      <member refid="classarrow_1_1_array_1a381e6469686eccd2545cf1dc171f6cb7" prot="public" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>ApproxEquals</name></member>
      <member refid="classarrow_1_1_array_1a2ed35161e2e2200bf4dcadb6ff11d7fb" prot="public" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>ApproxEquals</name></member>
      <member refid="classarrow_1_1_array_1ae44d3c2fae3a8578fe829da20c6732f8" prot="protected" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>Array</name></member>
      <member refid="classarrow_1_1_dictionary_array_1a174e8f2555d0833a45e5ad6c49f7ebab" prot="public" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>CanCompareIndices</name></member>
      <member refid="classarrow_1_1_array_1aeca84e9b3a1f1e6e3f83a61c90e376a9" prot="public" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>data</name></member>
      <member refid="classarrow_1_1_array_1a2631dce1d5868216cba0a140e81ef14e" prot="protected" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>data_</name></member>
      <member refid="classarrow_1_1_dictionary_array_1a2e9c7a3bf2eea6936f08773861d2ab51" prot="public" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>dict_type</name></member>
      <member refid="classarrow_1_1_dictionary_array_1adca4061547095b3cc1134b2d83b62c37" prot="private" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>dict_type_</name></member>
      <member refid="classarrow_1_1_dictionary_array_1ab77f454477e3695592274f6266647175" prot="public" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>dictionary</name></member>
      <member refid="classarrow_1_1_dictionary_array_1ad2825a2549e9f58c5866278c375754c5" prot="public" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>DictionaryArray</name></member>
      <member refid="classarrow_1_1_dictionary_array_1ad19a6216bdc228e5cd13ee52a0bd50c5" prot="public" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>DictionaryArray</name></member>
      <member refid="classarrow_1_1_array_1a95ff1c7489e9d2fd5ff52fde1b8b5c46" prot="public" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>Diff</name></member>
      <member refid="classarrow_1_1_array_1a686cf58bab513d8ecfe3a285f4562eab" prot="public" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_array_1a99913841c11eb73c61a25c018f57ca40" prot="public" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_dictionary_array_1ab272b5854125c3d1f62e1d865eff06d7" prot="public" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>FromArrays</name></member>
      <member refid="classarrow_1_1_dictionary_array_1a68f94be272f020e8044bd2346ecf1083" prot="public" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>FromArrays</name></member>
      <member refid="classarrow_1_1_dictionary_array_1a27372a98ddc7a7d01c48cdf6077150c3" prot="public" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>indices</name></member>
      <member refid="classarrow_1_1_dictionary_array_1afadfd10eed612e5d06e073ffe01022da" prot="private" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>indices_</name></member>
      <member refid="classarrow_1_1_array_1a18c61cd4c8c158a30f30023eabc83acb" prot="public" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>IsNull</name></member>
      <member refid="classarrow_1_1_array_1ae554bfb313cd6b161f63fb2966dbd662" prot="public" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>IsValid</name></member>
      <member refid="classarrow_1_1_array_1a49c7fb3f73d2d43e7338591c5a8bd8bf" prot="public" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>length</name></member>
      <member refid="classarrow_1_1_array_1a76c4756ac85b29f9135064d68d2ef908" prot="public" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>null_bitmap</name></member>
      <member refid="classarrow_1_1_array_1a7a8838fbc97b9b3b8ca15cb163b2027c" prot="public" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>null_bitmap_data</name></member>
      <member refid="classarrow_1_1_array_1aed59d9e8608229ff3808983cdc908ccd" prot="protected" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>null_bitmap_data_</name></member>
      <member refid="classarrow_1_1_array_1a0537d3b69a889b951e88be2fe9f3d96a" prot="public" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>null_count</name></member>
      <member refid="classarrow_1_1_array_1a183e69c91c531609f42a29b593119d58" prot="public" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>num_fields</name></member>
      <member refid="classarrow_1_1_array_1a1a0c6c1aa06cffd1dcb3813f0d24b2fd" prot="public" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>offset</name></member>
      <member refid="classarrow_1_1_array_1ace5ac1affa59422d70a8b3f6929b70bc" prot="public" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>RangeEquals</name></member>
      <member refid="classarrow_1_1_array_1a537467bcecb4471b18d3271f14ca9ad2" prot="public" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>RangeEquals</name></member>
      <member refid="classarrow_1_1_array_1acf138d427e7f8a8c56cac7f9d9e64db3" prot="public" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>RangeEquals</name></member>
      <member refid="classarrow_1_1_array_1a28f8f8d92439489bbd1727392123b0f7" prot="public" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>RangeEquals</name></member>
      <member refid="classarrow_1_1_dictionary_array_1aa43f444984156b04a680f65d17329a79" prot="private" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>SetData</name></member>
      <member refid="classarrow_1_1_array_1ae32f72c78fe10ce17f0a817e302e17d1" prot="public" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>Slice</name></member>
      <member refid="classarrow_1_1_array_1a5cf4c3330e850670aa52dab3b21869ea" prot="public" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>Slice</name></member>
      <member refid="classarrow_1_1_array_1a41c7af0e40ac55f2ce11785fea3e051e" prot="public" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>ToString</name></member>
      <member refid="classarrow_1_1_dictionary_array_1a6f491c929655df6641a03a12c67a6b8d" prot="public" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>Transpose</name></member>
      <member refid="classarrow_1_1_dictionary_array_1a8b1bf19ac8e472581b5493a32785021c" prot="public" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>Transpose</name></member>
      <member refid="classarrow_1_1_array_1a635a694fbadb0bfa731beb97df2ef7ea" prot="public" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>type</name></member>
      <member refid="classarrow_1_1_array_1a155d9d827415438f976e3cb31e0a55f6" prot="public" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>type_id</name></member>
      <member refid="classarrow_1_1_dictionary_array_1acd352de67775187d93c6e34b2ba55440" prot="public" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>TypeClass</name></member>
      <member refid="classarrow_1_1_array_1ad62bad8fde2bb8fbd5a52df3fa4bd56c" prot="public" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>Validate</name></member>
      <member refid="classarrow_1_1_array_1a793321da66d2d1839e6c89a956e4cb07" prot="public" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>ValidateFull</name></member>
      <member refid="classarrow_1_1_array_1aa2b5f248c09a41c089e1fbc911beecb0" prot="public" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>View</name></member>
      <member refid="classarrow_1_1_array_1ad015904c8c6e5e2513c791fb577f2679" prot="public" virt="non-virtual"><scope>arrow::DictionaryArray</scope><name>View</name></member>
      <member refid="classarrow_1_1_array_1addd582eec9488bca2b3379b71fef6ce5" prot="public" virt="virtual"><scope>arrow::DictionaryArray</scope><name>~Array</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
