<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="stl__allocator_8h" kind="file" language="C++">
    <compoundname>stl_allocator.h</compoundname>
    <includes local="no">algorithm</includes>
    <includes local="no">cstddef</includes>
    <includes local="no">memory</includes>
    <includes local="no">string</includes>
    <includes local="no">utility</includes>
    <includes refid="memory__pool_8h" local="yes">arrow/memory_pool.h</includes>
    <includes refid="type__fwd_8h" local="yes">arrow/type_fwd.h</includes>
    <includes refid="macros_8h" local="yes">arrow/util/macros.h</includes>
    <incdepgraph>
      <node id="11306">
        <label>atomic</label>
      </node>
      <node id="11311">
        <label>arrow/util/compare.h</label>
        <link refid="util_2compare_8h"/>
        <childnode refid="11302" relation="include">
        </childnode>
        <childnode refid="11312" relation="include">
        </childnode>
        <childnode refid="11304" relation="include">
        </childnode>
        <childnode refid="11313" relation="include">
        </childnode>
      </node>
      <node id="11307">
        <label>cstdint</label>
      </node>
      <node id="11308">
        <label>arrow/status.h</label>
        <link refid="status_8h"/>
        <childnode refid="11309" relation="include">
        </childnode>
        <childnode refid="11310" relation="include">
        </childnode>
        <childnode refid="11302" relation="include">
        </childnode>
        <childnode refid="11303" relation="include">
        </childnode>
        <childnode refid="11304" relation="include">
        </childnode>
        <childnode refid="11311" relation="include">
        </childnode>
        <childnode refid="11313" relation="include">
        </childnode>
        <childnode refid="11314" relation="include">
        </childnode>
        <childnode refid="11316" relation="include">
        </childnode>
      </node>
      <node id="11317">
        <label>arrow/type_fwd.h</label>
        <link refid="type__fwd_8h"/>
        <childnode refid="11302" relation="include">
        </childnode>
        <childnode refid="11303" relation="include">
        </childnode>
        <childnode refid="11318" relation="include">
        </childnode>
        <childnode refid="11313" relation="include">
        </childnode>
        <childnode refid="11316" relation="include">
        </childnode>
      </node>
      <node id="11303">
        <label>string</label>
      </node>
      <node id="11315">
        <label>ostream</label>
      </node>
      <node id="11316">
        <label>arrow/util/visibility.h</label>
        <link refid="arrow_2util_2visibility_8h"/>
      </node>
      <node id="11305">
        <label>arrow/memory_pool.h</label>
        <link refid="memory__pool_8h"/>
        <childnode refid="11306" relation="include">
        </childnode>
        <childnode refid="11307" relation="include">
        </childnode>
        <childnode refid="11302" relation="include">
        </childnode>
        <childnode refid="11303" relation="include">
        </childnode>
        <childnode refid="11308" relation="include">
        </childnode>
        <childnode refid="11317" relation="include">
        </childnode>
        <childnode refid="11316" relation="include">
        </childnode>
      </node>
      <node id="11318">
        <label>vector</label>
      </node>
      <node id="11304">
        <label>utility</label>
      </node>
      <node id="11310">
        <label>iosfwd</label>
      </node>
      <node id="11301">
        <label>cstddef</label>
      </node>
      <node id="11299">
        <label>/arrow/cpp/src/arrow/stl_allocator.h</label>
        <link refid="stl__allocator_8h"/>
        <childnode refid="11300" relation="include">
        </childnode>
        <childnode refid="11301" relation="include">
        </childnode>
        <childnode refid="11302" relation="include">
        </childnode>
        <childnode refid="11303" relation="include">
        </childnode>
        <childnode refid="11304" relation="include">
        </childnode>
        <childnode refid="11305" relation="include">
        </childnode>
        <childnode refid="11317" relation="include">
        </childnode>
        <childnode refid="11313" relation="include">
        </childnode>
      </node>
      <node id="11312">
        <label>type_traits</label>
      </node>
      <node id="11300">
        <label>algorithm</label>
      </node>
      <node id="11309">
        <label>cstring</label>
      </node>
      <node id="11314">
        <label>arrow/util/string_builder.h</label>
        <link refid="string__builder_8h"/>
        <childnode refid="11302" relation="include">
        </childnode>
        <childnode refid="11315" relation="include">
        </childnode>
        <childnode refid="11303" relation="include">
        </childnode>
        <childnode refid="11304" relation="include">
        </childnode>
        <childnode refid="11316" relation="include">
        </childnode>
      </node>
      <node id="11302">
        <label>memory</label>
      </node>
      <node id="11313">
        <label>arrow/util/macros.h</label>
        <link refid="macros_8h"/>
        <childnode refid="11307" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="classarrow_1_1stl_1_1allocator" prot="public">arrow::stl::allocator</innerclass>
    <innerclass refid="structarrow_1_1stl_1_1allocator_1_1rebind" prot="public">arrow::stl::allocator::rebind</innerclass>
    <innerclass refid="classarrow_1_1stl_1_1_s_t_l_memory_pool" prot="public">arrow::stl::STLMemoryPool</innerclass>
    <innernamespace refid="namespacearrow">arrow</innernamespace>
    <innernamespace refid="namespacearrow_1_1stl">arrow::stl</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="memory__pool_8h" kindref="compound">arrow/memory_pool.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type__fwd_8h" kindref="compound">arrow/type_fwd.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="macros_8h" kindref="compound">arrow/util/macros.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacearrow" kindref="compound">arrow</ref><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">stl<sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="35" refid="classarrow_1_1stl_1_1allocator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classarrow_1_1stl_1_1allocator" kindref="compound">allocator</ref><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="37" refid="classarrow_1_1stl_1_1allocator_1a643d43b68d96bcfddb0d434e94b71042" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1stl_1_1allocator_1a643d43b68d96bcfddb0d434e94b71042" kindref="member">value_type</ref><sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="38" refid="classarrow_1_1stl_1_1allocator_1a3fc26b1479547306449b34082651877f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1stl_1_1allocator_1a3fc26b1479547306449b34082651877f" kindref="member">pointer</ref><sp/>=<sp/>T*;</highlight></codeline>
<codeline lineno="39" refid="classarrow_1_1stl_1_1allocator_1a7493494ba23b73ec21a283e2c3ec0f36" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1stl_1_1allocator_1a7493494ba23b73ec21a283e2c3ec0f36" kindref="member">const_pointer</ref><sp/>=<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*;</highlight></codeline>
<codeline lineno="40" refid="classarrow_1_1stl_1_1allocator_1a3210b26d8ee2925161e14971def25115" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1stl_1_1allocator_1a3210b26d8ee2925161e14971def25115" kindref="member">reference</ref><sp/>=<sp/>T&amp;;</highlight></codeline>
<codeline lineno="41" refid="classarrow_1_1stl_1_1allocator_1a7bc70c848116d2297c6d02f5b23cc05e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1stl_1_1allocator_1a7bc70c848116d2297c6d02f5b23cc05e" kindref="member">const_reference</ref><sp/>=<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;;</highlight></codeline>
<codeline lineno="42" refid="classarrow_1_1stl_1_1allocator_1a3b1ef65bb635d150933fa439d2dd8209" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1stl_1_1allocator_1a3b1ef65bb635d150933fa439d2dd8209" kindref="member">size_type</ref><sp/>=<sp/>std::size_t;</highlight></codeline>
<codeline lineno="43" refid="classarrow_1_1stl_1_1allocator_1a0c5b10d6ca1fe249405b85d6faa18420" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1stl_1_1allocator_1a0c5b10d6ca1fe249405b85d6faa18420" kindref="member">difference_type</ref><sp/>=<sp/>std::ptrdiff_t;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="46" refid="structarrow_1_1stl_1_1allocator_1_1rebind" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structarrow_1_1stl_1_1allocator_1_1rebind" kindref="compound">rebind</ref><sp/>{</highlight></codeline>
<codeline lineno="47" refid="structarrow_1_1stl_1_1allocator_1_1rebind_1abc0092b56446ecb11d44768c64fdeeb7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1stl_1_1allocator" kindref="compound">other</ref><sp/>=<sp/><ref refid="classarrow_1_1stl_1_1allocator" kindref="compound">allocator&lt;U&gt;</ref>;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="classarrow_1_1stl_1_1allocator_1a050d3840043ef30ec2648e7dc3b03425" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1stl_1_1allocator_1a050d3840043ef30ec2648e7dc3b03425" kindref="member">allocator</ref>()<sp/>noexcept<sp/>:<sp/>pool_(<ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">default_memory_pool</ref>())<sp/>{}</highlight></codeline>
<codeline lineno="53" refid="classarrow_1_1stl_1_1allocator_1a345b7fb4cd99930d1b606fac634e7ca3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1stl_1_1allocator_1a345b7fb4cd99930d1b606fac634e7ca3" kindref="member">allocator</ref>(<ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/><ref refid="classarrow_1_1stl_1_1allocator_1a1cfa5a143e648f6d991757a541c99e34" kindref="member">pool</ref>)<sp/>noexcept<sp/>:<sp/>pool_(<ref refid="classarrow_1_1stl_1_1allocator_1a1cfa5a143e648f6d991757a541c99e34" kindref="member">pool</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="56" refid="classarrow_1_1stl_1_1allocator_1a1e354b52fdbaab88d764749f3696502e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1stl_1_1allocator_1a1e354b52fdbaab88d764749f3696502e" kindref="member">allocator</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1stl_1_1allocator" kindref="compound">allocator&lt;U&gt;</ref>&amp;<sp/>rhs)<sp/>noexcept<sp/>:<sp/>pool_(rhs.pool())<sp/>{}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58" refid="classarrow_1_1stl_1_1allocator_1a1052fc1209caa9d4507c0fb1e3d45185" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1stl_1_1allocator_1a1052fc1209caa9d4507c0fb1e3d45185" kindref="member">~allocator</ref>()<sp/>{<sp/>pool_<sp/>=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>;<sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="classarrow_1_1stl_1_1allocator_1ad755a643fb2530cf13e99392cb8386b6" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1stl_1_1allocator_1a3fc26b1479547306449b34082651877f" kindref="member">pointer</ref><sp/><ref refid="classarrow_1_1stl_1_1allocator_1ad755a643fb2530cf13e99392cb8386b6" kindref="member">address</ref>(<ref refid="classarrow_1_1stl_1_1allocator_1a3210b26d8ee2925161e14971def25115" kindref="member">reference</ref><sp/>r)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::addressof(r);<sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="classarrow_1_1stl_1_1allocator_1a60d006abb7e1d8f1e4cddee81298350a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1stl_1_1allocator_1a7493494ba23b73ec21a283e2c3ec0f36" kindref="member">const_pointer</ref><sp/><ref refid="classarrow_1_1stl_1_1allocator_1a60d006abb7e1d8f1e4cddee81298350a" kindref="member">address</ref>(<ref refid="classarrow_1_1stl_1_1allocator_1a7bc70c848116d2297c6d02f5b23cc05e" kindref="member">const_reference</ref><sp/>r)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::addressof(r);<sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="classarrow_1_1stl_1_1allocator_1a5349d06d8f0891422f76ecdea359949f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1stl_1_1allocator_1a3fc26b1479547306449b34082651877f" kindref="member">pointer</ref><sp/><ref refid="classarrow_1_1stl_1_1allocator_1a5349d06d8f0891422f76ecdea359949f" kindref="member">allocate</ref>(<ref refid="classarrow_1_1stl_1_1allocator_1a3b1ef65bb635d150933fa439d2dd8209" kindref="member">size_type</ref><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="comment">/*hint*/</highlight><highlight class="normal"><sp/>=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>)<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t*<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>s<sp/>=<sp/>pool_-&gt;Allocate(n<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T),<sp/>&amp;data);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s.<ref refid="classarrow_1_1_status_1a2240d82ac632c582efc070af2fe9a5ec" kindref="member">ok</ref>())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::bad_alloc();</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal"><ref refid="classarrow_1_1stl_1_1allocator_1a3fc26b1479547306449b34082651877f" kindref="member">pointer</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="classarrow_1_1stl_1_1allocator_1a7bfbf272c95f7a39982e21028855b7e7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1stl_1_1allocator_1a7bfbf272c95f7a39982e21028855b7e7" kindref="member">deallocate</ref>(<ref refid="classarrow_1_1stl_1_1allocator_1a3fc26b1479547306449b34082651877f" kindref="member">pointer</ref><sp/>p,<sp/><ref refid="classarrow_1_1stl_1_1allocator_1a3b1ef65bb635d150933fa439d2dd8209" kindref="member">size_type</ref><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>pool_-&gt;Free(reinterpret_cast&lt;uint8_t*&gt;(p),<sp/>n<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T));</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="classarrow_1_1stl_1_1allocator_1a51d7e6eefa74fb7e1fa27ff060ebb92e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1stl_1_1allocator_1a3b1ef65bb635d150933fa439d2dd8209" kindref="member">size_type</ref><sp/><ref refid="classarrow_1_1stl_1_1allocator_1a51d7e6eefa74fb7e1fa27ff060ebb92e" kindref="member">size_max</ref>()<sp/>const<sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1stl_1_1allocator_1a3b1ef65bb635d150933fa439d2dd8209" kindref="member">size_type</ref>(-1)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T);<sp/>}</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">U,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="78" refid="classarrow_1_1stl_1_1allocator_1aa2262bfde82af99143bd4d8b40995fd0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1stl_1_1allocator_1aa2262bfde82af99143bd4d8b40995fd0" kindref="member">construct</ref>(U*<sp/>p,<sp/>Args&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(p))<sp/>U(std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="83" refid="classarrow_1_1stl_1_1allocator_1ac48f18e9e397eb7627ff3e598c01e47a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1stl_1_1allocator_1ac48f18e9e397eb7627ff3e598c01e47a" kindref="member">destroy</ref>(U*<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;~U();</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="classarrow_1_1stl_1_1allocator_1a1cfa5a143e648f6d991757a541c99e34" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/><ref refid="classarrow_1_1stl_1_1allocator_1a1cfa5a143e648f6d991757a541c99e34" kindref="member">pool</ref>()<sp/>const<sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pool_;<sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/>pool_;</highlight></codeline>
<codeline lineno="91"><highlight class="normal">};</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Allocator<sp/>=<sp/>std::allocator&lt;u</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">8_t&gt;&gt;</highlight></codeline>
<codeline lineno="98" refid="classarrow_1_1stl_1_1_s_t_l_memory_pool" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classarrow_1_1stl_1_1_s_t_l_memory_pool" kindref="compound">STLMemoryPool</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref><sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="101" refid="classarrow_1_1stl_1_1_s_t_l_memory_pool_1a04f9e7c6b4995ffad23f3a60f8e34a9f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1stl_1_1_s_t_l_memory_pool_1a04f9e7c6b4995ffad23f3a60f8e34a9f" kindref="member">STLMemoryPool</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Allocator&amp;<sp/>alloc)<sp/>:<sp/>alloc_(alloc)<sp/>{}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="classarrow_1_1stl_1_1_s_t_l_memory_pool_1ae9533be0fa6306cf5045ab53a74bc79b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1stl_1_1_s_t_l_memory_pool_1ae9533be0fa6306cf5045ab53a74bc79b" kindref="member">Allocate</ref>(int64_t<sp/>size,<sp/>uint8_t**<sp/>out)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*out<sp/>=<sp/>alloc_.allocate(size);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::bad_alloc&amp;<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1ae39cb87196acb83e4eb921cf729248e3" kindref="member">Status::OutOfMemory</ref>(e.what());</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>stats_.UpdateAllocatedBytes(size);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1a5c0b0031db6eeec3dcc70485d24cfe03" kindref="member">Status::OK</ref>();</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="classarrow_1_1stl_1_1_s_t_l_memory_pool_1ae092742351b7986c620370b0b40a6a6f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1stl_1_1_s_t_l_memory_pool_1ae092742351b7986c620370b0b40a6a6f" kindref="member">Reallocate</ref>(int64_t<sp/>old_size,<sp/>int64_t<sp/>new_size,<sp/>uint8_t**<sp/>ptr)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t*<sp/>old_ptr<sp/>=<sp/>*ptr;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*ptr<sp/>=<sp/>alloc_.allocate(new_size);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::bad_alloc&amp;<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1ae39cb87196acb83e4eb921cf729248e3" kindref="member">Status::OutOfMemory</ref>(e.what());</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(*ptr,<sp/>old_ptr,<sp/>std::min(old_size,<sp/>new_size));</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>alloc_.deallocate(old_ptr,<sp/>old_size);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>stats_.UpdateAllocatedBytes(new_size<sp/>-<sp/>old_size);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1a5c0b0031db6eeec3dcc70485d24cfe03" kindref="member">Status::OK</ref>();</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="classarrow_1_1stl_1_1_s_t_l_memory_pool_1abb27dc235972168141885d167dd4097d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1stl_1_1_s_t_l_memory_pool_1abb27dc235972168141885d167dd4097d" kindref="member">Free</ref>(uint8_t*<sp/>buffer,<sp/>int64_t<sp/>size)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>alloc_.deallocate(buffer,<sp/>size);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>stats_.UpdateAllocatedBytes(-size);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="classarrow_1_1stl_1_1_s_t_l_memory_pool_1a5de9db81dd9b9b6c854c7ece6d13e063" refkind="member"><highlight class="normal"><sp/><sp/>int64_t<sp/><ref refid="classarrow_1_1stl_1_1_s_t_l_memory_pool_1a5de9db81dd9b9b6c854c7ece6d13e063" kindref="member">bytes_allocated</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stats_.bytes_allocated();<sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="classarrow_1_1stl_1_1_s_t_l_memory_pool_1ab65e96df014e555fa03f7e8ba043d003" refkind="member"><highlight class="normal"><sp/><sp/>int64_t<sp/><ref refid="classarrow_1_1stl_1_1_s_t_l_memory_pool_1ab65e96df014e555fa03f7e8ba043d003" kindref="member">max_memory</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stats_.max_memory();<sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135" refid="classarrow_1_1stl_1_1_s_t_l_memory_pool_1ad90be605fdb1f922aff9a4abfedfad4b" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classarrow_1_1stl_1_1_s_t_l_memory_pool_1ad90be605fdb1f922aff9a4abfedfad4b" kindref="member">backend_name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;stl&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>Allocator<sp/>alloc_;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/>arrow::internal::MemoryPoolStats<sp/>stats_;</highlight></codeline>
<codeline lineno="140"><highlight class="normal">};</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="143" refid="namespacearrow_1_1stl_1a232ce3f7139c816ba00d677ac277c4b1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacearrow_1_1stl_1a232ce3f7139c816ba00d677ac277c4b1" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1stl_1_1allocator" kindref="compound">allocator&lt;T1&gt;</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1stl_1_1allocator" kindref="compound">allocator&lt;T2&gt;</ref>&amp;<sp/>rhs)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.pool()<sp/>==<sp/>rhs.pool();</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="148" refid="namespacearrow_1_1stl_1a29bc23b481099b0c508b4fd0b2e36f49" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacearrow_1_1stl_1a29bc23b481099b0c508b4fd0b2e36f49" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1stl_1_1allocator" kindref="compound">allocator&lt;T1&gt;</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1stl_1_1allocator" kindref="compound">allocator&lt;T2&gt;</ref>&amp;<sp/>rhs)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(lhs<sp/>==<sp/>rhs);</highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>stl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>arrow</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/arrow/cpp/src/arrow/stl_allocator.h"/>
  </compounddef>
</doxygen>
