<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="stl_8h" kind="file" language="C++">
    <compoundname>stl.h</compoundname>
    <includes local="no">algorithm</includes>
    <includes local="no">cstddef</includes>
    <includes local="no">memory</includes>
    <includes local="no">sstream</includes>
    <includes local="no">string</includes>
    <includes local="no">tuple</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes refid="builder_8h" local="yes">arrow/builder.h</includes>
    <includes refid="compute_2api_8h" local="yes">arrow/compute/api.h</includes>
    <includes refid="memory__pool_8h" local="yes">arrow/memory_pool.h</includes>
    <includes refid="status_8h" local="yes">arrow/status.h</includes>
    <includes refid="table_8h" local="yes">arrow/table.h</includes>
    <includes refid="type_8h" local="yes">arrow/type.h</includes>
    <includes refid="type__traits_8h" local="yes">arrow/type_traits.h</includes>
    <includes refid="checked__cast_8h" local="yes">arrow/util/checked_cast.h</includes>
    <includes refid="macros_8h" local="yes">arrow/util/macros.h</includes>
    <incdepgraph>
      <node id="11285">
        <label>arrow/util/memory.h</label>
        <link refid="util_2memory_8h"/>
        <childnode refid="11229" relation="include">
        </childnode>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11237" relation="include">
        </childnode>
      </node>
      <node id="11258">
        <label>atomic</label>
      </node>
      <node id="11239">
        <label>arrow/util/compare.h</label>
        <link refid="util_2compare_8h"/>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11223" relation="include">
        </childnode>
        <childnode refid="11224" relation="include">
        </childnode>
        <childnode refid="11237" relation="include">
        </childnode>
      </node>
      <node id="11286">
        <label>arrow/compute/kernels/boolean.h</label>
        <link refid="boolean_8h"/>
        <childnode refid="11240" relation="include">
        </childnode>
        <childnode refid="11238" relation="include">
        </childnode>
      </node>
      <node id="11290">
        <label>arrow/compute/kernels/filter.h</label>
        <link refid="arrow_2compute_2kernels_2filter_8h"/>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11224" relation="include">
        </childnode>
        <childnode refid="11278" relation="include">
        </childnode>
        <childnode refid="11279" relation="include">
        </childnode>
        <childnode refid="11240" relation="include">
        </childnode>
        <childnode refid="11238" relation="include">
        </childnode>
      </node>
      <node id="11231">
        <label>limits</label>
      </node>
      <node id="11295">
        <label>arrow/compute/kernels/sort_to_indices.h</label>
        <link refid="sort__to__indices_8h"/>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11278" relation="include">
        </childnode>
        <childnode refid="11240" relation="include">
        </childnode>
        <childnode refid="11238" relation="include">
        </childnode>
      </node>
      <node id="11232">
        <label>arrow/buffer_builder.h</label>
        <link refid="buffer__builder_8h"/>
        <childnode refid="11217" relation="include">
        </childnode>
        <childnode refid="11229" relation="include">
        </childnode>
        <childnode refid="11230" relation="include">
        </childnode>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11221" relation="include">
        </childnode>
        <childnode refid="11224" relation="include">
        </childnode>
        <childnode refid="11233" relation="include">
        </childnode>
        <childnode refid="11240" relation="include">
        </childnode>
        <childnode refid="11246" relation="include">
        </childnode>
        <childnode refid="11237" relation="include">
        </childnode>
        <childnode refid="11256" relation="include">
        </childnode>
        <childnode refid="11238" relation="include">
        </childnode>
      </node>
      <node id="11229">
        <label>cstdint</label>
      </node>
      <node id="11265">
        <label>arrow/array/builder_binary.h</label>
        <link refid="builder__binary_8h"/>
        <childnode refid="11217" relation="include">
        </childnode>
        <childnode refid="11229" relation="include">
        </childnode>
        <childnode refid="11231" relation="include">
        </childnode>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11266" relation="include">
        </childnode>
        <childnode refid="11221" relation="include">
        </childnode>
        <childnode refid="11225" relation="include">
        </childnode>
        <childnode refid="11267" relation="include">
        </childnode>
        <childnode refid="11228" relation="include">
        </childnode>
        <childnode refid="11232" relation="include">
        </childnode>
        <childnode refid="11240" relation="include">
        </childnode>
        <childnode refid="11264" relation="include">
        </childnode>
        <childnode refid="11237" relation="include">
        </childnode>
        <childnode refid="11244" relation="include">
        </childnode>
      </node>
      <node id="11233">
        <label>arrow/buffer.h</label>
        <link refid="buffer_8h"/>
        <childnode refid="11229" relation="include">
        </childnode>
        <childnode refid="11230" relation="include">
        </childnode>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11221" relation="include">
        </childnode>
        <childnode refid="11223" relation="include">
        </childnode>
        <childnode refid="11224" relation="include">
        </childnode>
        <childnode refid="11225" relation="include">
        </childnode>
        <childnode refid="11234" relation="include">
        </childnode>
        <childnode refid="11235" relation="include">
        </childnode>
        <childnode refid="11240" relation="include">
        </childnode>
        <childnode refid="11236" relation="include">
        </childnode>
        <childnode refid="11237" relation="include">
        </childnode>
        <childnode refid="11244" relation="include">
        </childnode>
        <childnode refid="11238" relation="include">
        </childnode>
      </node>
      <node id="11247">
        <label>endian.h</label>
      </node>
      <node id="11271">
        <label>arrow/array/builder_primitive.h</label>
        <link refid="builder__primitive_8h"/>
        <childnode refid="11217" relation="include">
        </childnode>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11225" relation="include">
        </childnode>
        <childnode refid="11267" relation="include">
        </childnode>
        <childnode refid="11228" relation="include">
        </childnode>
        <childnode refid="11257" relation="include">
        </childnode>
      </node>
      <node id="11240">
        <label>arrow/status.h</label>
        <link refid="status_8h"/>
        <childnode refid="11230" relation="include">
        </childnode>
        <childnode refid="11241" relation="include">
        </childnode>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11221" relation="include">
        </childnode>
        <childnode refid="11224" relation="include">
        </childnode>
        <childnode refid="11239" relation="include">
        </childnode>
        <childnode refid="11237" relation="include">
        </childnode>
        <childnode refid="11242" relation="include">
        </childnode>
        <childnode refid="11238" relation="include">
        </childnode>
      </node>
      <node id="11297">
        <label>arrow/compute/kernels/take.h</label>
        <link refid="take_8h"/>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11278" relation="include">
        </childnode>
        <childnode refid="11240" relation="include">
        </childnode>
        <childnode refid="11238" relation="include">
        </childnode>
      </node>
      <node id="11254">
        <label>arrow/util/functional.h</label>
        <link refid="functional_8h"/>
        <childnode refid="11222" relation="include">
        </childnode>
        <childnode refid="11223" relation="include">
        </childnode>
        <childnode refid="11237" relation="include">
        </childnode>
      </node>
      <node id="11236">
        <label>arrow/type_fwd.h</label>
        <link refid="type__fwd_8h"/>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11221" relation="include">
        </childnode>
        <childnode refid="11225" relation="include">
        </childnode>
        <childnode refid="11237" relation="include">
        </childnode>
        <childnode refid="11238" relation="include">
        </childnode>
      </node>
      <node id="11251">
        <label>cmath</label>
      </node>
      <node id="11250">
        <label>cassert</label>
      </node>
      <node id="11260">
        <label>arrow/util/checked_cast.h</label>
        <link refid="checked__cast_8h"/>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11223" relation="include">
        </childnode>
      </node>
      <node id="11273">
        <label>arrow/array/builder_time.h</label>
        <link refid="builder__time_8h"/>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11228" relation="include">
        </childnode>
        <childnode refid="11271" relation="include">
        </childnode>
      </node>
      <node id="11266">
        <label>numeric</label>
      </node>
      <node id="11221">
        <label>string</label>
      </node>
      <node id="11245">
        <label>arrow/vendored/string_view.hpp</label>
      </node>
      <node id="11268">
        <label>arrow/compare.h</label>
        <link refid="compare_8h"/>
        <childnode refid="11229" relation="include">
        </childnode>
        <childnode refid="11241" relation="include">
        </childnode>
        <childnode refid="11237" relation="include">
        </childnode>
        <childnode refid="11238" relation="include">
        </childnode>
      </node>
      <node id="11261">
        <label>arrow/util/variant.h</label>
        <link refid="variant_8h"/>
        <childnode refid="11262" relation="include">
        </childnode>
      </node>
      <node id="11284">
        <label>arrow/table.h</label>
        <link refid="table_8h"/>
        <childnode refid="11229" relation="include">
        </childnode>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11221" relation="include">
        </childnode>
        <childnode refid="11224" relation="include">
        </childnode>
        <childnode refid="11225" relation="include">
        </childnode>
        <childnode refid="11279" relation="include">
        </childnode>
        <childnode refid="11257" relation="include">
        </childnode>
        <childnode refid="11236" relation="include">
        </childnode>
        <childnode refid="11237" relation="include">
        </childnode>
        <childnode refid="11238" relation="include">
        </childnode>
      </node>
      <node id="11293">
        <label>arrow/compute/kernels/mean.h</label>
        <link refid="mean_8h"/>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11223" relation="include">
        </childnode>
        <childnode refid="11240" relation="include">
        </childnode>
        <childnode refid="11257" relation="include">
        </childnode>
        <childnode refid="11264" relation="include">
        </childnode>
        <childnode refid="11238" relation="include">
        </childnode>
      </node>
      <node id="11263">
        <label>arrow/visitor.h</label>
        <link refid="visitor_8h"/>
        <childnode refid="11240" relation="include">
        </childnode>
        <childnode refid="11236" relation="include">
        </childnode>
        <childnode refid="11238" relation="include">
        </childnode>
      </node>
      <node id="11243">
        <label>ostream</label>
      </node>
      <node id="11272">
        <label>arrow/array/builder_nested.h</label>
        <link refid="builder__nested_8h"/>
        <childnode refid="11231" relation="include">
        </childnode>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11224" relation="include">
        </childnode>
        <childnode refid="11225" relation="include">
        </childnode>
        <childnode refid="11267" relation="include">
        </childnode>
        <childnode refid="11228" relation="include">
        </childnode>
        <childnode refid="11232" relation="include">
        </childnode>
      </node>
      <node id="11238">
        <label>arrow/util/visibility.h</label>
        <link refid="arrow_2util_2visibility_8h"/>
      </node>
      <node id="11276">
        <label>arrow/compute/context.h</label>
        <link refid="context_8h"/>
        <childnode refid="11229" relation="include">
        </childnode>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11277" relation="include">
        </childnode>
        <childnode refid="11240" relation="include">
        </childnode>
        <childnode refid="11237" relation="include">
        </childnode>
        <childnode refid="11238" relation="include">
        </childnode>
      </node>
      <node id="11226">
        <label>arrow/builder.h</label>
        <link refid="builder_8h"/>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11227" relation="include">
        </childnode>
        <childnode refid="11228" relation="include">
        </childnode>
        <childnode refid="11265" relation="include">
        </childnode>
        <childnode refid="11269" relation="include">
        </childnode>
        <childnode refid="11270" relation="include">
        </childnode>
        <childnode refid="11272" relation="include">
        </childnode>
        <childnode refid="11271" relation="include">
        </childnode>
        <childnode refid="11273" relation="include">
        </childnode>
        <childnode refid="11274" relation="include">
        </childnode>
        <childnode refid="11240" relation="include">
        </childnode>
        <childnode refid="11238" relation="include">
        </childnode>
      </node>
      <node id="11283">
        <label>arrow/util/logging.h</label>
        <link refid="arrow_2util_2logging_8h"/>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11243" relation="include">
        </childnode>
        <childnode refid="11221" relation="include">
        </childnode>
        <childnode refid="11237" relation="include">
        </childnode>
        <childnode refid="11238" relation="include">
        </childnode>
      </node>
      <node id="11234">
        <label>arrow/device.h</label>
        <link refid="device_8h"/>
        <childnode refid="11229" relation="include">
        </childnode>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11221" relation="include">
        </childnode>
        <childnode refid="11235" relation="include">
        </childnode>
        <childnode refid="11236" relation="include">
        </childnode>
        <childnode refid="11239" relation="include">
        </childnode>
        <childnode refid="11237" relation="include">
        </childnode>
        <childnode refid="11238" relation="include">
        </childnode>
      </node>
      <node id="11294">
        <label>arrow/compute/kernels/nth_to_indices.h</label>
        <link refid="nth__to__indices_8h"/>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11278" relation="include">
        </childnode>
        <childnode refid="11240" relation="include">
        </childnode>
        <childnode refid="11238" relation="include">
        </childnode>
      </node>
      <node id="11277">
        <label>arrow/memory_pool.h</label>
        <link refid="memory__pool_8h"/>
        <childnode refid="11258" relation="include">
        </childnode>
        <childnode refid="11229" relation="include">
        </childnode>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11221" relation="include">
        </childnode>
        <childnode refid="11240" relation="include">
        </childnode>
        <childnode refid="11236" relation="include">
        </childnode>
        <childnode refid="11238" relation="include">
        </childnode>
      </node>
      <node id="11246">
        <label>arrow/util/bit_util.h</label>
        <link refid="bit__util_8h"/>
        <childnode refid="11247" relation="include">
        </childnode>
        <childnode refid="11217" relation="include">
        </childnode>
        <childnode refid="11248" relation="include">
        </childnode>
        <childnode refid="11249" relation="include">
        </childnode>
        <childnode refid="11250" relation="include">
        </childnode>
        <childnode refid="11251" relation="include">
        </childnode>
        <childnode refid="11229" relation="include">
        </childnode>
        <childnode refid="11230" relation="include">
        </childnode>
        <childnode refid="11231" relation="include">
        </childnode>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11221" relation="include">
        </childnode>
        <childnode refid="11223" relation="include">
        </childnode>
        <childnode refid="11224" relation="include">
        </childnode>
        <childnode refid="11225" relation="include">
        </childnode>
        <childnode refid="11233" relation="include">
        </childnode>
        <childnode refid="11252" relation="include">
        </childnode>
        <childnode refid="11239" relation="include">
        </childnode>
        <childnode refid="11254" relation="include">
        </childnode>
        <childnode refid="11237" relation="include">
        </childnode>
        <childnode refid="11242" relation="include">
        </childnode>
        <childnode refid="11244" relation="include">
        </childnode>
        <childnode refid="11255" relation="include">
        </childnode>
        <childnode refid="11238" relation="include">
        </childnode>
      </node>
      <node id="11270">
        <label>arrow/array/builder_dict.h</label>
        <link refid="builder__dict_8h"/>
        <childnode refid="11217" relation="include">
        </childnode>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11227" relation="include">
        </childnode>
        <childnode refid="11228" relation="include">
        </childnode>
        <childnode refid="11271" relation="include">
        </childnode>
        <childnode refid="11267" relation="include">
        </childnode>
      </node>
      <node id="11249">
        <label>bitset</label>
      </node>
      <node id="11222">
        <label>tuple</label>
      </node>
      <node id="11292">
        <label>arrow/compute/kernels/isin.h</label>
        <link refid="isin_8h"/>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11267" relation="include">
        </childnode>
        <childnode refid="11276" relation="include">
        </childnode>
        <childnode refid="11278" relation="include">
        </childnode>
        <childnode refid="11240" relation="include">
        </childnode>
        <childnode refid="11257" relation="include">
        </childnode>
        <childnode refid="11238" relation="include">
        </childnode>
      </node>
      <node id="11227">
        <label>arrow/array/builder_adaptive.h</label>
        <link refid="builder__adaptive_8h"/>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11228" relation="include">
        </childnode>
      </node>
      <node id="11275">
        <label>arrow/compute/api.h</label>
        <link refid="compute_2api_8h"/>
        <childnode refid="11276" relation="include">
        </childnode>
        <childnode refid="11278" relation="include">
        </childnode>
        <childnode refid="11286" relation="include">
        </childnode>
        <childnode refid="11287" relation="include">
        </childnode>
        <childnode refid="11288" relation="include">
        </childnode>
        <childnode refid="11289" relation="include">
        </childnode>
        <childnode refid="11290" relation="include">
        </childnode>
        <childnode refid="11291" relation="include">
        </childnode>
        <childnode refid="11292" relation="include">
        </childnode>
        <childnode refid="11293" relation="include">
        </childnode>
        <childnode refid="11294" relation="include">
        </childnode>
        <childnode refid="11295" relation="include">
        </childnode>
        <childnode refid="11296" relation="include">
        </childnode>
        <childnode refid="11297" relation="include">
        </childnode>
      </node>
      <node id="11225">
        <label>vector</label>
      </node>
      <node id="11228">
        <label>arrow/array/builder_base.h</label>
        <link refid="builder__base_8h"/>
        <childnode refid="11217" relation="include">
        </childnode>
        <childnode refid="11229" relation="include">
        </childnode>
        <childnode refid="11230" relation="include">
        </childnode>
        <childnode refid="11231" relation="include">
        </childnode>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11223" relation="include">
        </childnode>
        <childnode refid="11224" relation="include">
        </childnode>
        <childnode refid="11225" relation="include">
        </childnode>
        <childnode refid="11232" relation="include">
        </childnode>
        <childnode refid="11240" relation="include">
        </childnode>
        <childnode refid="11257" relation="include">
        </childnode>
        <childnode refid="11264" relation="include">
        </childnode>
        <childnode refid="11237" relation="include">
        </childnode>
        <childnode refid="11255" relation="include">
        </childnode>
        <childnode refid="11238" relation="include">
        </childnode>
      </node>
      <node id="11269">
        <label>arrow/array/builder_decimal.h</label>
        <link refid="builder__decimal_8h"/>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11228" relation="include">
        </childnode>
        <childnode refid="11265" relation="include">
        </childnode>
      </node>
      <node id="11253">
        <label>new</label>
      </node>
      <node id="11224">
        <label>utility</label>
      </node>
      <node id="11244">
        <label>arrow/util/string_view.h</label>
        <link refid="string__view_8h"/>
        <childnode refid="11229" relation="include">
        </childnode>
        <childnode refid="11221" relation="include">
        </childnode>
        <childnode refid="11245" relation="include">
        </childnode>
      </node>
      <node id="11248">
        <label>array</label>
      </node>
      <node id="11220">
        <label>sstream</label>
      </node>
      <node id="11282">
        <label>arrow/util/basic_decimal.h</label>
        <link refid="basic__decimal_8h"/>
        <childnode refid="11248" relation="include">
        </childnode>
        <childnode refid="11229" relation="include">
        </childnode>
        <childnode refid="11231" relation="include">
        </childnode>
        <childnode refid="11221" relation="include">
        </childnode>
        <childnode refid="11223" relation="include">
        </childnode>
        <childnode refid="11237" relation="include">
        </childnode>
        <childnode refid="11255" relation="include">
        </childnode>
        <childnode refid="11238" relation="include">
        </childnode>
      </node>
      <node id="11264">
        <label>arrow/type_traits.h</label>
        <link refid="type__traits_8h"/>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11221" relation="include">
        </childnode>
        <childnode refid="11223" relation="include">
        </childnode>
        <childnode refid="11225" relation="include">
        </childnode>
        <childnode refid="11236" relation="include">
        </childnode>
        <childnode refid="11246" relation="include">
        </childnode>
      </node>
      <node id="11278">
        <label>arrow/compute/kernel.h</label>
        <link refid="kernel_8h"/>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11224" relation="include">
        </childnode>
        <childnode refid="11225" relation="include">
        </childnode>
        <childnode refid="11267" relation="include">
        </childnode>
        <childnode refid="11279" relation="include">
        </childnode>
        <childnode refid="11280" relation="include">
        </childnode>
        <childnode refid="11284" relation="include">
        </childnode>
        <childnode refid="11237" relation="include">
        </childnode>
        <childnode refid="11285" relation="include">
        </childnode>
        <childnode refid="11261" relation="include">
        </childnode>
        <childnode refid="11238" relation="include">
        </childnode>
      </node>
      <node id="11281">
        <label>arrow/util/decimal.h</label>
        <link refid="util_2decimal_8h"/>
        <childnode refid="11229" relation="include">
        </childnode>
        <childnode refid="11241" relation="include">
        </childnode>
        <childnode refid="11231" relation="include">
        </childnode>
        <childnode refid="11221" relation="include">
        </childnode>
        <childnode refid="11223" relation="include">
        </childnode>
        <childnode refid="11224" relation="include">
        </childnode>
        <childnode refid="11252" relation="include">
        </childnode>
        <childnode refid="11240" relation="include">
        </childnode>
        <childnode refid="11282" relation="include">
        </childnode>
        <childnode refid="11244" relation="include">
        </childnode>
      </node>
      <node id="11279">
        <label>arrow/record_batch.h</label>
        <link refid="record__batch_8h"/>
        <childnode refid="11229" relation="include">
        </childnode>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11221" relation="include">
        </childnode>
        <childnode refid="11225" relation="include">
        </childnode>
        <childnode refid="11252" relation="include">
        </childnode>
        <childnode refid="11240" relation="include">
        </childnode>
        <childnode refid="11236" relation="include">
        </childnode>
        <childnode refid="11237" relation="include">
        </childnode>
        <childnode refid="11238" relation="include">
        </childnode>
      </node>
      <node id="11296">
        <label>arrow/compute/kernels/sum.h</label>
        <link refid="sum_8h"/>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11238" relation="include">
        </childnode>
      </node>
      <node id="11235">
        <label>arrow/io/type_fwd.h</label>
        <link refid="io_2type__fwd_8h"/>
      </node>
      <node id="11241">
        <label>iosfwd</label>
      </node>
      <node id="11288">
        <label>arrow/compute/kernels/compare.h</label>
        <link refid="compute_2kernels_2compare_8h"/>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11278" relation="include">
        </childnode>
        <childnode refid="11238" relation="include">
        </childnode>
      </node>
      <node id="11287">
        <label>arrow/compute/kernels/cast.h</label>
        <link refid="kernels_2cast_8h"/>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11240" relation="include">
        </childnode>
        <childnode refid="11238" relation="include">
        </childnode>
      </node>
      <node id="11218">
        <label>cstddef</label>
      </node>
      <node id="11291">
        <label>arrow/compute/kernels/hash.h</label>
        <link refid="hash_8h"/>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11278" relation="include">
        </childnode>
        <childnode refid="11240" relation="include">
        </childnode>
        <childnode refid="11238" relation="include">
        </childnode>
      </node>
      <node id="11267">
        <label>arrow/array.h</label>
        <link refid="array_8h"/>
        <childnode refid="11258" relation="include">
        </childnode>
        <childnode refid="11229" relation="include">
        </childnode>
        <childnode refid="11241" relation="include">
        </childnode>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11221" relation="include">
        </childnode>
        <childnode refid="11223" relation="include">
        </childnode>
        <childnode refid="11224" relation="include">
        </childnode>
        <childnode refid="11225" relation="include">
        </childnode>
        <childnode refid="11268" relation="include">
        </childnode>
        <childnode refid="11257" relation="include">
        </childnode>
        <childnode refid="11236" relation="include">
        </childnode>
        <childnode refid="11264" relation="include">
        </childnode>
        <childnode refid="11246" relation="include">
        </childnode>
        <childnode refid="11260" relation="include">
        </childnode>
        <childnode refid="11237" relation="include">
        </childnode>
        <childnode refid="11244" relation="include">
        </childnode>
        <childnode refid="11238" relation="include">
        </childnode>
      </node>
      <node id="11262">
        <label>arrow/vendored/variant.hpp</label>
      </node>
      <node id="11252">
        <label>arrow/result.h</label>
        <link refid="result_8h"/>
        <childnode refid="11253" relation="include">
        </childnode>
        <childnode refid="11221" relation="include">
        </childnode>
        <childnode refid="11223" relation="include">
        </childnode>
        <childnode refid="11224" relation="include">
        </childnode>
        <childnode refid="11240" relation="include">
        </childnode>
        <childnode refid="11239" relation="include">
        </childnode>
      </node>
      <node id="11259">
        <label>climits</label>
      </node>
      <node id="11280">
        <label>arrow/scalar.h</label>
        <link refid="scalar_8h"/>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11221" relation="include">
        </childnode>
        <childnode refid="11224" relation="include">
        </childnode>
        <childnode refid="11225" relation="include">
        </childnode>
        <childnode refid="11252" relation="include">
        </childnode>
        <childnode refid="11240" relation="include">
        </childnode>
        <childnode refid="11257" relation="include">
        </childnode>
        <childnode refid="11236" relation="include">
        </childnode>
        <childnode refid="11264" relation="include">
        </childnode>
        <childnode refid="11239" relation="include">
        </childnode>
        <childnode refid="11281" relation="include">
        </childnode>
        <childnode refid="11283" relation="include">
        </childnode>
        <childnode refid="11244" relation="include">
        </childnode>
        <childnode refid="11238" relation="include">
        </childnode>
      </node>
      <node id="11256">
        <label>arrow/util/ubsan.h</label>
        <link refid="ubsan_8h"/>
        <childnode refid="11230" relation="include">
        </childnode>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11223" relation="include">
        </childnode>
        <childnode refid="11237" relation="include">
        </childnode>
      </node>
      <node id="11257">
        <label>arrow/type.h</label>
        <link refid="type_8h"/>
        <childnode refid="11258" relation="include">
        </childnode>
        <childnode refid="11259" relation="include">
        </childnode>
        <childnode refid="11229" relation="include">
        </childnode>
        <childnode refid="11241" relation="include">
        </childnode>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11221" relation="include">
        </childnode>
        <childnode refid="11224" relation="include">
        </childnode>
        <childnode refid="11225" relation="include">
        </childnode>
        <childnode refid="11252" relation="include">
        </childnode>
        <childnode refid="11236" relation="include">
        </childnode>
        <childnode refid="11260" relation="include">
        </childnode>
        <childnode refid="11237" relation="include">
        </childnode>
        <childnode refid="11261" relation="include">
        </childnode>
        <childnode refid="11238" relation="include">
        </childnode>
        <childnode refid="11263" relation="include">
        </childnode>
      </node>
      <node id="11289">
        <label>arrow/compute/kernels/count.h</label>
        <link refid="count_8h"/>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11223" relation="include">
        </childnode>
        <childnode refid="11240" relation="include">
        </childnode>
        <childnode refid="11257" relation="include">
        </childnode>
        <childnode refid="11264" relation="include">
        </childnode>
        <childnode refid="11238" relation="include">
        </childnode>
      </node>
      <node id="11223">
        <label>type_traits</label>
      </node>
      <node id="11217">
        <label>algorithm</label>
      </node>
      <node id="11230">
        <label>cstring</label>
      </node>
      <node id="11242">
        <label>arrow/util/string_builder.h</label>
        <link refid="string__builder_8h"/>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11243" relation="include">
        </childnode>
        <childnode refid="11221" relation="include">
        </childnode>
        <childnode refid="11224" relation="include">
        </childnode>
        <childnode refid="11238" relation="include">
        </childnode>
      </node>
      <node id="11216">
        <label>/arrow/cpp/src/arrow/stl.h</label>
        <link refid="stl_8h"/>
        <childnode refid="11217" relation="include">
        </childnode>
        <childnode refid="11218" relation="include">
        </childnode>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11220" relation="include">
        </childnode>
        <childnode refid="11221" relation="include">
        </childnode>
        <childnode refid="11222" relation="include">
        </childnode>
        <childnode refid="11223" relation="include">
        </childnode>
        <childnode refid="11224" relation="include">
        </childnode>
        <childnode refid="11225" relation="include">
        </childnode>
        <childnode refid="11226" relation="include">
        </childnode>
        <childnode refid="11275" relation="include">
        </childnode>
        <childnode refid="11277" relation="include">
        </childnode>
        <childnode refid="11240" relation="include">
        </childnode>
        <childnode refid="11284" relation="include">
        </childnode>
        <childnode refid="11257" relation="include">
        </childnode>
        <childnode refid="11264" relation="include">
        </childnode>
        <childnode refid="11260" relation="include">
        </childnode>
        <childnode refid="11237" relation="include">
        </childnode>
      </node>
      <node id="11219">
        <label>memory</label>
      </node>
      <node id="11274">
        <label>arrow/array/builder_union.h</label>
        <link refid="builder__union_8h"/>
        <childnode refid="11219" relation="include">
        </childnode>
        <childnode refid="11221" relation="include">
        </childnode>
        <childnode refid="11224" relation="include">
        </childnode>
        <childnode refid="11225" relation="include">
        </childnode>
        <childnode refid="11267" relation="include">
        </childnode>
        <childnode refid="11228" relation="include">
        </childnode>
        <childnode refid="11232" relation="include">
        </childnode>
      </node>
      <node id="11237">
        <label>arrow/util/macros.h</label>
        <link refid="macros_8h"/>
        <childnode refid="11229" relation="include">
        </childnode>
      </node>
      <node id="11255">
        <label>arrow/util/type_traits.h</label>
        <link refid="util_2type__traits_8h"/>
        <childnode refid="11223" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structarrow_1_1stl_1_1_conversion_traits" prot="public">arrow::stl::ConversionTraits</innerclass>
    <innerclass refid="structarrow_1_1stl_1_1_conversion_traits_3_01std_1_1string_01_4" prot="public">arrow::stl::ConversionTraits&lt; std::string &gt;</innerclass>
    <innerclass refid="structarrow_1_1stl_1_1_conversion_traits_3_01std_1_1vector_3_01_value_c_type_01_4_01_4" prot="public">arrow::stl::ConversionTraits&lt; std::vector&lt; ValueCType &gt; &gt;</innerclass>
    <innerclass refid="structarrow_1_1stl_1_1_conversion_traits_3_01_optional_00_01enable__if__optional__like_3_01_optional_01_4_01_4" prot="public">arrow::stl::ConversionTraits&lt; Optional, enable_if_optional_like&lt; Optional &gt; &gt;</innerclass>
    <innerclass refid="structarrow_1_1stl_1_1_schema_from_tuple" prot="public">arrow::stl::SchemaFromTuple</innerclass>
    <innerclass refid="structarrow_1_1stl_1_1_schema_from_tuple_3_01_tuple_00_010_01_4" prot="public">arrow::stl::SchemaFromTuple&lt; Tuple, 0 &gt;</innerclass>
    <innernamespace refid="namespacearrow">arrow</innernamespace>
    <innernamespace refid="namespacearrow_1_1stl">arrow::stl</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="stl_8h_1a34ff62436ff57880e88ee53e6f1576f5" prot="public" static="no">
        <name>ARROW_STL_CONVERSION</name>
        <param><defname>CType_</defname></param>
        <param><defname>ArrowType_</defname></param>
        <initializer>template &lt;&gt;                                                                       \
  struct ConversionTraits&lt;CType_&gt; : public CTypeTraits&lt;CType_&gt; {                    \
    static Status AppendRow(typename TypeTraits&lt;ArrowType_&gt;::BuilderType&amp; builder,  \
                            CType_ cell) {                                          \
      return builder.Append(cell);                                                  \
    }                                                                               \
    static CType_ GetEntry(const typename TypeTraits&lt;ArrowType_&gt;::ArrayType&amp; array, \
                           size_t j) {                                              \
      return array.Value(j);                                                        \
    }                                                                               \
  };                                                                                \
                                                                                    \
  template &lt;&gt;                                                                       \
  inline Status AppendListValues&lt;CType_, const std::vector&lt;CType_&gt;&amp;&gt;(               \
      typename TypeTraits&lt;ArrowType_&gt;::BuilderType &amp; value_builder,                 \
      const std::vector&lt;CType_&gt;&amp; cell_range) {                                      \
    return value_builder.AppendValues(cell_range);                                  \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/stl.h" line="98" column="9" bodyfile="/arrow/cpp/src/arrow/stl.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sstream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="builder_8h" kindref="compound">arrow/builder.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="compute_2api_8h" kindref="compound">arrow/compute/api.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="memory__pool_8h" kindref="compound">arrow/memory_pool.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="status_8h" kindref="compound">arrow/status.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="table_8h" kindref="compound">arrow/table.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type_8h" kindref="compound">arrow/type.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type__traits_8h" kindref="compound">arrow/type_traits.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="checked__cast_8h" kindref="compound">arrow/util/checked_cast.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="macros_8h" kindref="compound">arrow/util/macros.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacearrow" kindref="compound">arrow</ref><sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Schema;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="namespacearrow_1_1stl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">stl<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_optional_like<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_dereferencable<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::false_type<sp/>{};</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_dereferencable&lt;T,<sp/>arrow::internal::void_t&lt;decltype(*std::declval&lt;T&gt;())&gt;&gt;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">is_optional_like&lt;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>T,<sp/>typename<sp/>std::enable_if&lt;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_constructible&lt;bool,<sp/>T&gt;::value<sp/>&amp;&amp;<sp/>is_dereferencable&lt;T&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!std::is_array&lt;typename<sp/>std::remove_reference&lt;T&gt;::type&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::true_type<sp/>{};</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tuple&gt;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>BareTupleElement<sp/>=</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::decay&lt;typename<sp/>std::tuple_element&lt;N,<sp/>Tuple&gt;::type&gt;::type;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacearrow_1_1stl_1aa869f1ad4f123dc12504ad7bcfd21d40" kindref="member">enable_if_optional_like</ref><sp/>=</highlight></codeline>
<codeline lineno="73" refid="namespacearrow_1_1stl_1aa869f1ad4f123dc12504ad7bcfd21d40" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;internal::is_optional_like&lt;T&gt;::value,<sp/>R&gt;::type;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Enable<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="77" refid="structarrow_1_1stl_1_1_conversion_traits" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structarrow_1_1stl_1_1_conversion_traits" kindref="compound">ConversionTraits</ref><sp/>{};</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>CType&gt;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacearrow_1_1stl_1a6df2295eb333588d6a494478a590b90f" kindref="member">CBuilderType</ref><sp/>=</highlight></codeline>
<codeline lineno="82" refid="namespacearrow_1_1stl_1a6df2295eb333588d6a494478a590b90f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_type_traits" kindref="compound">TypeTraits&lt;typename ConversionTraits&lt;CType&gt;::ArrowType</ref>&gt;::BuilderType;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValueCType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Range&gt;</highlight></codeline>
<codeline lineno="90" refid="namespacearrow_1_1stl_1adbef871ae921a475398dbe61c557db38" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="namespacearrow_1_1stl_1adbef871ae921a475398dbe61c557db38" kindref="member">AppendListValues</ref>(<ref refid="namespacearrow_1_1stl_1a6df2295eb333588d6a494478a590b90f" kindref="member">CBuilderType&lt;ValueCType&gt;</ref>&amp;<sp/>value_builder,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Range&amp;&amp;<sp/>cell_range)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>value<sp/>:<sp/>cell_range)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(<ref refid="structarrow_1_1stl_1_1_conversion_traits" kindref="compound">ConversionTraits&lt;ValueCType&gt;::AppendRow</ref>(value_builder,<sp/>value));</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1a5c0b0031db6eeec3dcc70485d24cfe03" kindref="member">Status::OK</ref>();</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="stl_8h_1a34ff62436ff57880e88ee53e6f1576f5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ARROW_STL_CONVERSION(CType_,<sp/>ArrowType_)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="99"><highlight class="preprocessor"><sp/><sp/>template<sp/>&lt;&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="100"><highlight class="preprocessor"><sp/><sp/>struct<sp/>ConversionTraits&lt;CType_&gt;<sp/>:<sp/>public<sp/>CTypeTraits&lt;CType_&gt;<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="101"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>Status<sp/>AppendRow(typename<sp/>TypeTraits&lt;ArrowType_&gt;::BuilderType&amp;<sp/>builder,<sp/><sp/>\</highlight></codeline>
<codeline lineno="102"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CType_<sp/>cell)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="103"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>builder.Append(cell);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="104"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="105"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>static<sp/>CType_<sp/>GetEntry(const<sp/>typename<sp/>TypeTraits&lt;ArrowType_&gt;::ArrayType&amp;<sp/>array,<sp/>\</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size_t<sp/>j)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="107"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>return<sp/>array.Value(j);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="108"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="109"><highlight class="preprocessor"><sp/><sp/>};<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="110"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="111"><highlight class="preprocessor"><sp/><sp/>template<sp/>&lt;&gt;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="112"><highlight class="preprocessor"><sp/><sp/>inline<sp/>Status<sp/>AppendListValues&lt;CType_,<sp/>const<sp/>std::vector&lt;CType_&gt;&amp;&gt;(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="113"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>typename<sp/>TypeTraits&lt;ArrowType_&gt;::BuilderType<sp/>&amp;<sp/>value_builder,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="114"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::vector&lt;CType_&gt;&amp;<sp/>cell_range)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="115"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>value_builder.AppendValues(cell_range);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="116"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><ref refid="stl_8h_1a34ff62436ff57880e88ee53e6f1576f5" kindref="member">ARROW_STL_CONVERSION</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">,<sp/><ref refid="namespaceparquet_1a60f6c016c8d8b612f78974bc516006b0" kindref="member">BooleanType</ref>)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><ref refid="stl_8h_1a34ff62436ff57880e88ee53e6f1576f5" kindref="member">ARROW_STL_CONVERSION</ref>(int8_t,<sp/>Int8Type)</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><ref refid="stl_8h_1a34ff62436ff57880e88ee53e6f1576f5" kindref="member">ARROW_STL_CONVERSION</ref>(int16_t,<sp/>Int16Type)</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><ref refid="stl_8h_1a34ff62436ff57880e88ee53e6f1576f5" kindref="member">ARROW_STL_CONVERSION</ref>(int32_t,<sp/><ref refid="namespaceparquet_1a7d7c12097fa34b9a73e9e5da3df62b17" kindref="member">Int32Type</ref>)</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><ref refid="stl_8h_1a34ff62436ff57880e88ee53e6f1576f5" kindref="member">ARROW_STL_CONVERSION</ref>(int64_t,<sp/><ref refid="namespaceparquet_1aebf28a7ea170ee7e771b13b12d06f3cf" kindref="member">Int64Type</ref>)</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><ref refid="stl_8h_1a34ff62436ff57880e88ee53e6f1576f5" kindref="member">ARROW_STL_CONVERSION</ref>(uint8_t,<sp/>UInt8Type)</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><ref refid="stl_8h_1a34ff62436ff57880e88ee53e6f1576f5" kindref="member">ARROW_STL_CONVERSION</ref>(uint16_t,<sp/>UInt16Type)</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><ref refid="stl_8h_1a34ff62436ff57880e88ee53e6f1576f5" kindref="member">ARROW_STL_CONVERSION</ref>(uint32_t,<sp/>UInt32Type)</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><ref refid="stl_8h_1a34ff62436ff57880e88ee53e6f1576f5" kindref="member">ARROW_STL_CONVERSION</ref>(uint64_t,<sp/>UInt64Type)</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><ref refid="stl_8h_1a34ff62436ff57880e88ee53e6f1576f5" kindref="member">ARROW_STL_CONVERSION</ref>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">,<sp/><ref refid="namespaceparquet_1a0ed420ee4d70b4f7e8c71a3b53beefe5" kindref="member">FloatType</ref>)</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><ref refid="stl_8h_1a34ff62436ff57880e88ee53e6f1576f5" kindref="member">ARROW_STL_CONVERSION</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">,<sp/><ref refid="namespaceparquet_1ab8b1ae52fb8af689994a86814212a9cc" kindref="member">DoubleType</ref>)</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="131" refid="structarrow_1_1stl_1_1_conversion_traits_3_01std_1_1string_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structarrow_1_1stl_1_1_conversion_traits" kindref="compound">ConversionTraits</ref>&lt;<ref refid="namespacestd" kindref="compound">std</ref>::string&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_c_type_traits" kindref="compound">CTypeTraits</ref>&lt;std::string&gt;<sp/>{</highlight></codeline>
<codeline lineno="132" refid="structarrow_1_1stl_1_1_conversion_traits_3_01std_1_1string_01_4_1aa4c06e29dad03b588d6e6dc4a98a3fbd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="structarrow_1_1stl_1_1_conversion_traits_3_01std_1_1string_01_4_1aa4c06e29dad03b588d6e6dc4a98a3fbd" kindref="member">AppendRow</ref>(<ref refid="classarrow_1_1_string_builder" kindref="compound">StringBuilder</ref>&amp;<sp/>builder,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>cell)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>builder.<ref refid="classarrow_1_1_base_binary_builder_1a2879a4313c6e3076581c42c3cd3e0f32" kindref="member">Append</ref>(cell);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="135" refid="structarrow_1_1stl_1_1_conversion_traits_3_01std_1_1string_01_4_1a09de4606bdfb910f0f562252fc7d6ca9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="structarrow_1_1stl_1_1_conversion_traits_3_01std_1_1string_01_4_1a09de4606bdfb910f0f562252fc7d6ca9" kindref="member">GetEntry</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_string_array" kindref="compound">StringArray</ref>&amp;<sp/>array,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>array.<ref refid="classarrow_1_1_base_binary_array_1a9794e7292b715f60c9d8496e03ab7674" kindref="member">GetString</ref>(j);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="138"><highlight class="normal">};</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValueCType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ListBuilderType,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Range&gt;</highlight></codeline>
<codeline lineno="146" refid="namespacearrow_1_1stl_1ac2316b3c7ddb9ab2ac10735d5b86baab" refkind="member"><highlight class="normal"><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="namespacearrow_1_1stl_1ac2316b3c7ddb9ab2ac10735d5b86baab" kindref="member">AppendCellRange</ref>(ListBuilderType&amp;<sp/>builder,<sp/>Range&amp;&amp;<sp/>cell_range)<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_list_builder<sp/>=<sp/>std::is_same&lt;ListBuilderType,<sp/>ListBuilder&gt;::value;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_large_list_builder<sp/>=</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;ListBuilderType,<sp/>LargeListBuilder&gt;::value;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>static_assert(</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>is_list_builder<sp/>||<sp/>is_large_list_builder,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Builder<sp/>type<sp/>must<sp/>be<sp/>either<sp/>ListBuilder<sp/>or<sp/>LargeListBuilder<sp/>for<sp/>appending<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;multiple<sp/>rows.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ChildBuilderType<sp/>=<sp/><ref refid="namespacearrow_1_1stl_1a6df2295eb333588d6a494478a590b90f" kindref="member">CBuilderType&lt;ValueCType&gt;</ref>;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(builder.Append());</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>value_builder<sp/>=</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::arrow::internal::checked_cast&lt;ChildBuilderType&amp;&gt;(*builder.value_builder());</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>XXX:<sp/>Remove<sp/>appended<sp/>value<sp/>before<sp/>returning<sp/>if<sp/>status<sp/>isn&apos;t<sp/>OK?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AppendListValues&lt;ValueCType&gt;(value_builder,<sp/>std::forward&lt;Range&gt;(cell_range));</highlight></codeline>
<codeline lineno="162"><highlight class="normal">}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValueCType&gt;</highlight></codeline>
<codeline lineno="165" refid="structarrow_1_1stl_1_1_conversion_traits_3_01std_1_1vector_3_01_value_c_type_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structarrow_1_1stl_1_1_conversion_traits" kindref="compound">ConversionTraits</ref>&lt;<ref refid="namespacestd" kindref="compound">std</ref>::vector&lt;ValueCType&gt;&gt;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_c_type_traits" kindref="compound">CTypeTraits</ref>&lt;std::vector&lt;ValueCType&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="167" refid="structarrow_1_1stl_1_1_conversion_traits_3_01std_1_1vector_3_01_value_c_type_01_4_01_4_1ad1b0805aec7f63b85609e96d5134f9c6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="structarrow_1_1stl_1_1_conversion_traits_3_01std_1_1vector_3_01_value_c_type_01_4_01_4_1ad1b0805aec7f63b85609e96d5134f9c6" kindref="member">AppendRow</ref>(<ref refid="classarrow_1_1_list_builder" kindref="compound">ListBuilder</ref>&amp;<sp/>builder,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;ValueCType&gt;&amp;<sp/>cell)<sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>AppendCellRange&lt;ValueCType&gt;(builder,<sp/>cell);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171" refid="structarrow_1_1stl_1_1_conversion_traits_3_01std_1_1vector_3_01_value_c_type_01_4_01_4_1ac625f8ed2617c9c1aae97a4022a681c0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;ValueCType&gt;<sp/><ref refid="structarrow_1_1stl_1_1_conversion_traits_3_01std_1_1vector_3_01_value_c_type_01_4_01_4_1ac625f8ed2617c9c1aae97a4022a681c0" kindref="member">GetEntry</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_list_array" kindref="compound">ListArray</ref>&amp;<sp/>array,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>j)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ElementArrayType<sp/>=</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_type_traits" kindref="compound">TypeTraits&lt;typename ConversionTraits&lt;ValueCType&gt;::ArrowType</ref>&gt;::ArrayType;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ElementArrayType&amp;<sp/>value_array<sp/>=</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::arrow::internal::checked_cast&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ElementArrayType&amp;&gt;(*array.<ref refid="classarrow_1_1_base_list_array_1a9a1ed59bfbcc91df5fa44892b2597609" kindref="member">values</ref>());</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;ValueCType&gt;<sp/>vec(array.<ref refid="classarrow_1_1_base_list_array_1ae5acff45549424221ae00865bc674ff2" kindref="member">value_length</ref>(j));</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>array.<ref refid="classarrow_1_1_base_list_array_1ae5acff45549424221ae00865bc674ff2" kindref="member">value_length</ref>(j);<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>vec[i]<sp/>=</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1stl_1_1_conversion_traits" kindref="compound">ConversionTraits&lt;ValueCType&gt;::GetEntry</ref>(value_array,<sp/>array.<ref refid="classarrow_1_1_base_list_array_1a38821c957c8feaee60734c7aff8763d7" kindref="member">value_offset</ref>(j)<sp/>+<sp/>i);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>vec;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal">};</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Optional&gt;</highlight></codeline>
<codeline lineno="188" refid="structarrow_1_1stl_1_1_conversion_traits_3_01_optional_00_01enable__if__optional__like_3_01_optional_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structarrow_1_1stl_1_1_conversion_traits" kindref="compound">ConversionTraits</ref>&lt;Optional,<sp/>enable_if_optional_like&lt;Optional&gt;&gt;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_c_type_traits" kindref="compound">CTypeTraits</ref>&lt;typename<sp/>std::decay&lt;decltype(*std::declval&lt;Optional&gt;())&gt;::type&gt;<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1stl_1_1_conversion_traits_3_01_optional_00_01enable__if__optional__like_3_01_optional_01_4_01_4_1a863084dc52d47c0811efe8588d8f39e1" kindref="member">OptionalInnerType</ref><sp/>=</highlight></codeline>
<codeline lineno="191" refid="structarrow_1_1stl_1_1_conversion_traits_3_01_optional_00_01enable__if__optional__like_3_01_optional_01_4_01_4_1a863084dc52d47c0811efe8588d8f39e1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::decay&lt;decltype(*std::declval&lt;Optional&gt;())&gt;::type;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_c_type_traits" kindref="compound">CTypeTraits&lt;OptionalInnerType&gt;::ArrowType</ref>;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_c_type_traits" kindref="compound">CTypeTraits&lt;OptionalInnerType&gt;::type_singleton</ref>;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195" refid="structarrow_1_1stl_1_1_conversion_traits_3_01_optional_00_01enable__if__optional__like_3_01_optional_01_4_01_4_1a454f355dddf6a03adc592ad4a96ffc8e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="structarrow_1_1stl_1_1_conversion_traits_3_01_optional_00_01enable__if__optional__like_3_01_optional_01_4_01_4_1a454f355dddf6a03adc592ad4a96ffc8e" kindref="member">AppendRow</ref>(</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_type_traits" kindref="compound">TypeTraits&lt;ArrowType&gt;::BuilderType</ref>&amp;<sp/>builder,</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Optional&amp;<sp/>cell)<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(cell)<sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1stl_1_1_conversion_traits" kindref="compound">ConversionTraits&lt;OptionalInnerType&gt;::AppendRow</ref>(builder,<sp/>*cell);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>builder.AppendNull();</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="203"><highlight class="normal">};</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal">template<sp/>&lt;typename<sp/>Tuple,<sp/>std::size_t<sp/>N<sp/>=<sp/>std::tuple_size&lt;Tuple&gt;::value&gt;</highlight></codeline>
<codeline lineno="210" refid="structarrow_1_1stl_1_1_schema_from_tuple" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structarrow_1_1stl_1_1_schema_from_tuple" kindref="compound">SchemaFromTuple</ref><sp/>{</highlight></codeline>
<codeline lineno="211" refid="structarrow_1_1stl_1_1_schema_from_tuple_1a697ab565c2c41c30bdaf676c798a7e94" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1stl_1_1_schema_from_tuple_1a697ab565c2c41c30bdaf676c798a7e94" kindref="member">Element</ref><sp/>=<sp/>internal::BareTupleElement&lt;N<sp/>-<sp/>1,<sp/>Tuple&gt;;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Implementations<sp/>that<sp/>take<sp/>a<sp/>vector-like<sp/>object<sp/>for<sp/>the<sp/>column<sp/>names.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="218" refid="structarrow_1_1stl_1_1_schema_from_tuple_1abb910fd773073764a4165c73543dabd0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;Field&gt;&gt;<sp/><ref refid="structarrow_1_1stl_1_1_schema_from_tuple_1abb910fd773073764a4165c73543dabd0" kindref="member">MakeSchemaRecursion</ref>(</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;&amp;<sp/>names)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Field&gt;&gt;<sp/>ret<sp/>=</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1stl_1_1_schema_from_tuple_1abb910fd773073764a4165c73543dabd0" kindref="member">SchemaFromTuple&lt;Tuple, N - 1&gt;::MakeSchemaRecursion</ref>(names);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>type<sp/>=<sp/><ref refid="structarrow_1_1stl_1_1_conversion_traits" kindref="compound">ConversionTraits&lt;Element&gt;::type_singleton</ref>();</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.push_back(<ref refid="group__schema-factories_1gaf9f57798b5abe44d560a52887f28894c" kindref="member">field</ref>(names[N<sp/>-<sp/>1],<sp/>type,<sp/>internal::is_optional_like&lt;Element&gt;::value));</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="237" refid="structarrow_1_1stl_1_1_schema_from_tuple_1a164e732029c4fcfcabe1b1ee7e385094" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Schema&gt;<sp/><ref refid="structarrow_1_1stl_1_1_schema_from_tuple_1a164e732029c4fcfcabe1b1ee7e385094" kindref="member">MakeSchema</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;&amp;<sp/>names)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;Schema&gt;(MakeSchemaRecursion(names));</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Implementations<sp/>that<sp/>take<sp/>a<sp/>tuple-like<sp/>object<sp/>for<sp/>the<sp/>column<sp/>names.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NamesTuple&gt;</highlight></codeline>
<codeline lineno="247" refid="structarrow_1_1stl_1_1_schema_from_tuple_1aecaa315b7fe5945dc94d72e10f73a325" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;Field&gt;&gt;<sp/><ref refid="structarrow_1_1stl_1_1_schema_from_tuple_1aecaa315b7fe5945dc94d72e10f73a325" kindref="member">MakeSchemaRecursionT</ref>(</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NamesTuple&amp;<sp/>names)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::get;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Field&gt;&gt;<sp/>ret<sp/>=</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1stl_1_1_schema_from_tuple_1aecaa315b7fe5945dc94d72e10f73a325" kindref="member">SchemaFromTuple&lt;Tuple, N - 1&gt;::MakeSchemaRecursionT</ref>(names);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;DataType&gt;<sp/>type<sp/>=<sp/><ref refid="structarrow_1_1stl_1_1_conversion_traits" kindref="compound">ConversionTraits&lt;Element&gt;::type_singleton</ref>();</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.push_back(</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__schema-factories_1gaf9f57798b5abe44d560a52887f28894c" kindref="member">field</ref>(get&lt;N<sp/>-<sp/>1&gt;(names),<sp/>type,<sp/>internal::is_optional_like&lt;Element&gt;::value));</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NamesTuple&gt;</highlight></codeline>
<codeline lineno="270" refid="structarrow_1_1stl_1_1_schema_from_tuple_1a5f21195eda1d9c573852dcf7615ba7e3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Schema&gt;<sp/><ref refid="structarrow_1_1stl_1_1_schema_from_tuple_1a5f21195eda1d9c573852dcf7615ba7e3" kindref="member">MakeSchema</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NamesTuple&amp;<sp/>names)<sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;Schema&gt;(MakeSchemaRecursionT&lt;NamesTuple&gt;(names));</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal">};</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tuple&gt;</highlight></codeline>
<codeline lineno="276" refid="structarrow_1_1stl_1_1_schema_from_tuple_3_01_tuple_00_010_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structarrow_1_1stl_1_1_schema_from_tuple" kindref="compound">SchemaFromTuple</ref>&lt;Tuple,<sp/>0&gt;<sp/>{</highlight></codeline>
<codeline lineno="277" refid="structarrow_1_1stl_1_1_schema_from_tuple_3_01_tuple_00_010_01_4_1a0ac887d24bb38be781208ef6432acf72" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;Field&gt;&gt;<sp/><ref refid="structarrow_1_1stl_1_1_schema_from_tuple_3_01_tuple_00_010_01_4_1a0ac887d24bb38be781208ef6432acf72" kindref="member">MakeSchemaRecursion</ref>(</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;&amp;<sp/>names)<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Field&gt;&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.reserve(names.size());</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>NamesTuple&gt;</highlight></codeline>
<codeline lineno="285" refid="structarrow_1_1stl_1_1_schema_from_tuple_3_01_tuple_00_010_01_4_1a5e674272f343bd97fe3be84570171670" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;Field&gt;&gt;<sp/><ref refid="structarrow_1_1stl_1_1_schema_from_tuple_3_01_tuple_00_010_01_4_1a5e674272f343bd97fe3be84570171670" kindref="member">MakeSchemaRecursionT</ref>(</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NamesTuple&amp;<sp/>names)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Field&gt;&gt;<sp/>ret;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>ret.reserve(std::tuple_size&lt;NamesTuple&gt;::value);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="291"><highlight class="normal">};</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal">template<sp/>&lt;typename<sp/>Tuple,<sp/>std::size_t<sp/>N<sp/>=<sp/>std::tuple_size&lt;Tuple&gt;::value&gt;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">CreateBuildersRecursive<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>Make(<ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/>pool,</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::unique_ptr&lt;ArrayBuilder&gt;&gt;*<sp/>builders)<sp/>{</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Element<sp/>=<sp/>BareTupleElement&lt;N<sp/>-<sp/>1,<sp/>Tuple&gt;;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;DataType&gt;<sp/>type<sp/>=<sp/><ref refid="structarrow_1_1stl_1_1_conversion_traits" kindref="compound">ConversionTraits&lt;Element&gt;::type_singleton</ref>();</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(<ref refid="namespacearrow_1a08900491dab187842698af9cca156b17" kindref="member">MakeBuilder</ref>(pool,<sp/>type,<sp/>&amp;builders-&gt;at(N<sp/>-<sp/>1)));</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CreateBuildersRecursive&lt;Tuple,<sp/>N<sp/>-<sp/>1&gt;::Make(pool,<sp/>builders);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal">};</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tuple&gt;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">CreateBuildersRecursive&lt;Tuple,<sp/>0&gt;<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>Make(<ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*,<sp/>std::vector&lt;std::unique_ptr&lt;ArrayBuilder&gt;&gt;*)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1a5c0b0031db6eeec3dcc70485d24cfe03" kindref="member">Status::OK</ref>();</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="312"><highlight class="normal">};</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal">template<sp/>&lt;typename<sp/>Tuple,<sp/>std::size_t<sp/>N<sp/>=<sp/>std::tuple_size&lt;Tuple&gt;::value&gt;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">RowIterator<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>Append(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::unique_ptr&lt;ArrayBuilder&gt;&gt;&amp;<sp/>builders,</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tuple&amp;<sp/>row)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::get;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Element<sp/>=<sp/>BareTupleElement&lt;N<sp/>-<sp/>1,<sp/>Tuple&gt;;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>BuilderType<sp/>=</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_type_traits" kindref="compound">TypeTraits&lt;typename ConversionTraits&lt;Element&gt;::ArrowType</ref>&gt;::BuilderType;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>BuilderType&amp;<sp/>builder<sp/>=</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::arrow::internal::checked_cast&lt;BuilderType&amp;&gt;(*builders[N<sp/>-<sp/>1]);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(<ref refid="structarrow_1_1stl_1_1_conversion_traits" kindref="compound">ConversionTraits&lt;Element&gt;::AppendRow</ref>(builder,<sp/>get&lt;N<sp/>-<sp/>1&gt;(row)));</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RowIterator&lt;Tuple,<sp/>N<sp/>-<sp/>1&gt;::Append(builders,<sp/>row);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal">};</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tuple&gt;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">RowIterator&lt;Tuple,<sp/>0&gt;<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>Append(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::unique_ptr&lt;ArrayBuilder&gt;&gt;&amp;<sp/>builders,</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Tuple&amp;<sp/>row)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1a5c0b0031db6eeec3dcc70485d24cfe03" kindref="member">Status::OK</ref>();</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="337"><highlight class="normal">};</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal">template<sp/>&lt;typename<sp/>Tuple,<sp/>std::size_t<sp/>N<sp/>=<sp/>std::tuple_size&lt;Tuple&gt;::value&gt;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">EnsureColumnTypes<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="namespacearrow_1_1compute_1a87994288b6e4b96a52d9fc32e579c9ec" kindref="member">Cast</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_table" kindref="compound">Table</ref>&amp;<sp/>table,<sp/>std::shared_ptr&lt;Table&gt;*<sp/>table_owner,</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1compute_1_1_cast_options" kindref="compound">compute::CastOptions</ref>&amp;<sp/>cast_options,</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1compute_1_1_function_context" kindref="compound">compute::FunctionContext</ref>*<sp/>ctx,</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::reference_wrapper&lt;const<sp/>::arrow::Table&gt;*<sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Element<sp/>=<sp/>BareTupleElement&lt;N<sp/>-<sp/>1,<sp/>Tuple&gt;;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;DataType&gt;<sp/>expected_type<sp/>=<sp/><ref refid="structarrow_1_1stl_1_1_conversion_traits" kindref="compound">ConversionTraits&lt;Element&gt;::type_singleton</ref>();</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!table.<ref refid="group__concat-tables_1ga8d8626acf4d00e2ac439c4f1cc7a054a" kindref="member">schema</ref>()-&gt;field(N<sp/>-<sp/>1)-&gt;type()-&gt;Equals(*expected_type))<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1compute_1_1_datum" kindref="compound">compute::Datum</ref><sp/>casted;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(<ref refid="namespacearrow_1_1compute_1a87994288b6e4b96a52d9fc32e579c9ec" kindref="member">compute::Cast</ref>(ctx,<sp/><ref refid="structarrow_1_1compute_1_1_datum" kindref="compound">compute::Datum</ref>(table.<ref refid="group__concat-tables_1ga8096b001837e7ad277e00b50226fbbe6" kindref="member">column</ref>(N<sp/>-<sp/>1)),</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>expected_type,<sp/>cast_options,<sp/>&amp;casted));</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>new_field<sp/>=<sp/>table.<ref refid="group__concat-tables_1ga8d8626acf4d00e2ac439c4f1cc7a054a" kindref="member">schema</ref>()-&gt;field(N<sp/>-<sp/>1)-&gt;WithType(expected_type);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="result_8h_1aaf9efe9debc83022fad249a0fa56e680" kindref="member">ARROW_ASSIGN_OR_RAISE</ref>(*table_owner,</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>table.<ref refid="group__concat-tables_1ga586dc478193d88f31afad1a6a17b991d" kindref="member">SetColumn</ref>(N<sp/>-<sp/>1,<sp/>new_field,<sp/>casted.<ref refid="structarrow_1_1compute_1_1_datum_1add3a24fbc016ad7f6f6b374a93c287cb" kindref="member">chunked_array</ref>()));</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*result<sp/>=<sp/>**table_owner;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacearrow_1_1compute_1a87994288b6e4b96a52d9fc32e579c9ec" kindref="member">EnsureColumnTypes&lt;Tuple, N - 1&gt;::Cast</ref>(result-&gt;get(),<sp/>table_owner,<sp/>cast_options,</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ctx,<sp/>result);</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal">};</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tuple&gt;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">EnsureColumnTypes&lt;Tuple,<sp/>0&gt;<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="namespacearrow_1_1compute_1a87994288b6e4b96a52d9fc32e579c9ec" kindref="member">Cast</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_table" kindref="compound">Table</ref>&amp;<sp/>table,<sp/>std::shared_ptr&lt;Table&gt;*<sp/>table_owner,</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1compute_1_1_cast_options" kindref="compound">compute::CastOptions</ref>&amp;<sp/>cast_options,</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1compute_1_1_function_context" kindref="compound">compute::FunctionContext</ref>*<sp/>ctx,</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::reference_wrapper&lt;const<sp/>::arrow::Table&gt;*<sp/>result)<sp/>{</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1a5c0b0031db6eeec3dcc70485d24cfe03" kindref="member">Status::OK</ref>();</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal">};</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal">template<sp/>&lt;typename<sp/>Range,<sp/>typename<sp/>Tuple,<sp/>std::size_t<sp/>N<sp/>=<sp/>std::tuple_size&lt;Tuple&gt;::value&gt;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TupleSetter<sp/>{</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Fill(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_table" kindref="compound">Table</ref>&amp;<sp/>table,<sp/>Range*<sp/>rows)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>std::get;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>Element<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::tuple_element&lt;N<sp/>-<sp/>1,<sp/>Tuple&gt;::type;</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ArrayType<sp/>=</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_type_traits" kindref="compound">TypeTraits&lt;typename ConversionTraits&lt;Element&gt;::ArrowType</ref>&gt;::ArrayType;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>iter<sp/>=<sp/>rows-&gt;begin();</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_chunked_array" kindref="compound">ChunkedArray</ref>&amp;<sp/>chunked_array<sp/>=<sp/>*table.<ref refid="group__concat-tables_1ga8096b001837e7ad277e00b50226fbbe6" kindref="member">column</ref>(N<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>chunked_array.<ref refid="group__concat-tables_1gafa477fd2e9a3ce9131d9d7f4391de52b" kindref="member">num_chunks</ref>();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArrayType&amp;<sp/>array<sp/>=</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::arrow::internal::checked_cast&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ArrayType&amp;&gt;(*chunked_array.<ref refid="group__concat-tables_1ga92ec02f5904ac3e4dac5328e44ebf0fb" kindref="member">chunk</ref>(i));</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>array.length();<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">get</highlight><highlight class="normal">&lt;N<sp/>-<sp/>1&gt;(*iter++)<sp/>=<sp/><ref refid="structarrow_1_1stl_1_1_conversion_traits" kindref="compound">ConversionTraits&lt;Element&gt;::GetEntry</ref>(array,<sp/>j);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>TupleSetter&lt;Range,<sp/>Tuple,<sp/>N<sp/>-<sp/>1&gt;::Fill(table,<sp/>rows);</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal">};</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Range,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tuple&gt;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">TupleSetter&lt;Range,<sp/>Tuple,<sp/>0&gt;<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Fill(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_table" kindref="compound">Table</ref>&amp;<sp/>table,<sp/>Range*<sp/>rows)<sp/>{}</highlight></codeline>
<codeline lineno="398"><highlight class="normal">};</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Range&gt;</highlight></codeline>
<codeline lineno="403" refid="namespacearrow_1_1stl_1abc15ebf9867f11c0cf2daa3711f480da" refkind="member"><highlight class="normal"><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="namespacearrow_1_1stl_1abc15ebf9867f11c0cf2daa3711f480da" kindref="member">TableFromTupleRange</ref>(<ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/>pool,<sp/>Range&amp;&amp;<sp/>rows,</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;&amp;<sp/>names,</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Table&gt;*<sp/>table)<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>row_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::iterator_traits&lt;decltype(std::begin(rows))&gt;::value_type;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>constexpr<sp/>std::size_t<sp/>n_columns<sp/>=<sp/>std::tuple_size&lt;row_type&gt;::value;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Schema&gt;<sp/><ref refid="group__schema-factories_1gab03f1059d8776b1e85ee93c7cd03a078" kindref="member">schema</ref><sp/>=<sp/><ref refid="structarrow_1_1stl_1_1_schema_from_tuple_1a164e732029c4fcfcabe1b1ee7e385094" kindref="member">SchemaFromTuple&lt;row_type&gt;::MakeSchema</ref>(names);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/>std::vector&lt;std::unique_ptr&lt;ArrayBuilder&gt;&gt;<sp/>builders(n_columns);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(internal::CreateBuildersRecursive&lt;row_type&gt;::Make(pool,<sp/>&amp;builders));</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>row<sp/>:<sp/>rows)<sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(internal::RowIterator&lt;row_type&gt;::Append(builders,<sp/>row));</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Array&gt;&gt;<sp/>arrays;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>builder<sp/>:<sp/>builders)<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Array&gt;<sp/>array;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(builder-&gt;Finish(&amp;array));</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/>arrays.emplace_back(array);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>*table<sp/>=<sp/><ref refid="group__concat-tables_1gadbbe286a2ac648a8fae4af18ddfc52bf" kindref="member">Table::Make</ref>(schema,<sp/>arrays);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1a5c0b0031db6eeec3dcc70485d24cfe03" kindref="member">Status::OK</ref>();</highlight></codeline>
<codeline lineno="428"><highlight class="normal">}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Range&gt;</highlight></codeline>
<codeline lineno="431" refid="namespacearrow_1_1stl_1affacdee6d66a98c58c349de975ce5a3f" refkind="member"><highlight class="normal"><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="namespacearrow_1_1stl_1affacdee6d66a98c58c349de975ce5a3f" kindref="member">TupleRangeFromTable</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_table" kindref="compound">Table</ref>&amp;<sp/>table,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1compute_1_1_cast_options" kindref="compound">compute::CastOptions</ref>&amp;<sp/>cast_options,</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1compute_1_1_function_context" kindref="compound">compute::FunctionContext</ref>*<sp/>ctx,<sp/>Range*<sp/>rows)<sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>row_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::decay&lt;decltype(*std::begin(*rows))&gt;::type;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>constexpr<sp/>std::size_t<sp/>n_columns<sp/>=<sp/>std::tuple_size&lt;row_type&gt;::value;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(table.<ref refid="group__concat-tables_1ga8d8626acf4d00e2ac439c4f1cc7a054a" kindref="member">schema</ref>()-&gt;num_fields()<sp/>!=<sp/>n_columns)<sp/>{</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>columns<sp/>in<sp/>the<sp/>table<sp/>does<sp/>not<sp/>match<sp/>the<sp/>width<sp/>of<sp/>the<sp/>target:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>table.<ref refid="group__concat-tables_1ga8d8626acf4d00e2ac439c4f1cc7a054a" kindref="member">schema</ref>()-&gt;num_fields()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>!=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>n_columns;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1aa388393c060f3b44316876a630190576" kindref="member">Status::Invalid</ref>(ss.str());</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>Use<sp/>std::size<sp/>with<sp/>C++17</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(rows-&gt;size()<sp/>!=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(table.<ref refid="group__concat-tables_1ga14665d44a57c45343b54c7997d5c92e5" kindref="member">num_rows</ref>()))<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>std::stringstream<sp/>ss;</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Number<sp/>of<sp/>rows<sp/>in<sp/>the<sp/>table<sp/>does<sp/>not<sp/>match<sp/>the<sp/>size<sp/>of<sp/>the<sp/>target:<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>ss<sp/>&lt;&lt;<sp/>table.<ref refid="group__concat-tables_1ga14665d44a57c45343b54c7997d5c92e5" kindref="member">num_rows</ref>()<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>!=<sp/>&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rows-&gt;size();</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1aa388393c060f3b44316876a630190576" kindref="member">Status::Invalid</ref>(ss.str());</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>that<sp/>all<sp/>columns<sp/>have<sp/>the<sp/>correct<sp/>type,<sp/>otherwise<sp/>cast<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Table&gt;<sp/>table_owner;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>std::reference_wrapper&lt;const<sp/>::arrow::Table&gt;<sp/>current_table(table);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(<ref refid="namespacearrow_1_1compute_1a87994288b6e4b96a52d9fc32e579c9ec" kindref="member">internal::EnsureColumnTypes&lt;row_type&gt;::Cast</ref>(</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>table,<sp/>&amp;table_owner,<sp/>cast_options,<sp/>ctx,<sp/>&amp;current_table));</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/>internal::TupleSetter&lt;Range,<sp/>row_type&gt;::Fill(current_table.get(),<sp/>rows);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1a5c0b0031db6eeec3dcc70485d24cfe03" kindref="member">Status::OK</ref>();</highlight></codeline>
<codeline lineno="461"><highlight class="normal">}</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>stl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>arrow</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/arrow/cpp/src/arrow/stl.h"/>
  </compounddef>
</doxygen>
