<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structarrow_1_1_binary_scalar" kind="struct" language="C++" prot="public">
    <compoundname>arrow::BinaryScalar</compoundname>
    <basecompoundref refid="structarrow_1_1_base_binary_scalar" prot="public" virt="non-virtual">arrow::BaseBinaryScalar</basecompoundref>
    <derivedcompoundref refid="structarrow_1_1_fixed_size_binary_scalar" prot="public" virt="non-virtual">arrow::FixedSizeBinaryScalar</derivedcompoundref>
    <derivedcompoundref refid="structarrow_1_1_string_scalar" prot="public" virt="non-virtual">arrow::StringScalar</derivedcompoundref>
    <includes refid="scalar_8h" local="no">arrow/scalar.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structarrow_1_1_binary_scalar_1a4e210d163b0e58cd5ade64795797e2cb" prot="public" static="no">
        <type><ref refid="structarrow_1_1_binary_scalar" kindref="compound">BinaryScalar</ref></type>
        <definition>using arrow::BinaryScalar::TypeClass =  BinaryScalar</definition>
        <argsstring></argsstring>
        <name>TypeClass</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/scalar.h" line="184" column="1" bodyfile="/arrow/cpp/src/arrow/scalar.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structarrow_1_1_binary_scalar_1a552084cd4662b0650c0dc5bf065f4b24" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::BinaryScalar::BinaryScalar</definition>
        <argsstring>(std::shared_ptr&lt; Buffer &gt; value, std::shared_ptr&lt; DataType &gt; type)</argsstring>
        <name>BinaryScalar</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;</type>
          <declname>value</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/scalar.h" line="186" column="1" bodyfile="/arrow/cpp/src/arrow/scalar.h" bodystart="186" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1_binary_scalar_1a1c139c57bd0e271d7710eb6bc990d96b" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::BinaryScalar::BinaryScalar</definition>
        <argsstring>(std::shared_ptr&lt; Buffer &gt; value)</argsstring>
        <name>BinaryScalar</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/scalar.h" line="189" column="1" bodyfile="/arrow/cpp/src/arrow/scalar.h" bodystart="189" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1_binary_scalar_1ad19ba85042b6abec808bc85fd4c440b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::BinaryScalar::BinaryScalar</definition>
        <argsstring>()</argsstring>
        <name>BinaryScalar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/scalar.h" line="192" column="1" bodyfile="/arrow/cpp/src/arrow/scalar.h" bodystart="192" bodyend="192"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="329">
        <label>arrow::BinaryScalar</label>
        <link refid="structarrow_1_1_binary_scalar"/>
        <childnode refid="330" relation="public-inheritance">
        </childnode>
      </node>
      <node id="331">
        <label>arrow::Scalar</label>
        <link refid="structarrow_1_1_scalar"/>
        <childnode refid="332" relation="public-inheritance">
        </childnode>
      </node>
      <node id="332">
        <label>arrow::util::EqualityComparable&lt; Scalar &gt;</label>
        <link refid="classarrow_1_1util_1_1_equality_comparable"/>
      </node>
      <node id="330">
        <label>arrow::BaseBinaryScalar</label>
        <link refid="structarrow_1_1_base_binary_scalar"/>
        <childnode refid="331" relation="public-inheritance">
        </childnode>
      </node>
      <node id="334">
        <label>arrow::StringScalar</label>
        <link refid="structarrow_1_1_string_scalar"/>
        <childnode refid="329" relation="public-inheritance">
        </childnode>
      </node>
      <node id="333">
        <label>arrow::FixedSizeBinaryScalar</label>
        <link refid="structarrow_1_1_fixed_size_binary_scalar"/>
        <childnode refid="329" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="335">
        <label>arrow::BinaryScalar</label>
        <link refid="structarrow_1_1_binary_scalar"/>
        <childnode refid="336" relation="public-inheritance">
        </childnode>
      </node>
      <node id="337">
        <label>arrow::Scalar</label>
        <link refid="structarrow_1_1_scalar"/>
        <childnode refid="338" relation="public-inheritance">
        </childnode>
      </node>
      <node id="338">
        <label>arrow::util::EqualityComparable&lt; Scalar &gt;</label>
        <link refid="classarrow_1_1util_1_1_equality_comparable"/>
      </node>
      <node id="336">
        <label>arrow::BaseBinaryScalar</label>
        <link refid="structarrow_1_1_base_binary_scalar"/>
        <childnode refid="337" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/scalar.h" line="182" column="1" bodyfile="/arrow/cpp/src/arrow/scalar.h" bodystart="182" bodyend="193"/>
    <listofallmembers>
      <member refid="structarrow_1_1_base_binary_scalar_1a42b1edb787bedf7c4c2f1421722d0613" prot="protected" virt="non-virtual"><scope>arrow::BinaryScalar</scope><name>BaseBinaryScalar</name></member>
      <member refid="structarrow_1_1_binary_scalar_1a552084cd4662b0650c0dc5bf065f4b24" prot="public" virt="non-virtual"><scope>arrow::BinaryScalar</scope><name>BinaryScalar</name></member>
      <member refid="structarrow_1_1_binary_scalar_1a1c139c57bd0e271d7710eb6bc990d96b" prot="public" virt="non-virtual"><scope>arrow::BinaryScalar</scope><name>BinaryScalar</name></member>
      <member refid="structarrow_1_1_binary_scalar_1ad19ba85042b6abec808bc85fd4c440b9" prot="public" virt="non-virtual"><scope>arrow::BinaryScalar</scope><name>BinaryScalar</name></member>
      <member refid="structarrow_1_1_scalar_1a3c91f8282f4f480813f2417f1e52366a" prot="public" virt="non-virtual"><scope>arrow::BinaryScalar</scope><name>CastTo</name></member>
      <member refid="structarrow_1_1_scalar_1ae2831b0780d206f113707ae9d162778e" prot="public" virt="non-virtual"><scope>arrow::BinaryScalar</scope><name>Equals</name></member>
      <member refid="classarrow_1_1util_1_1_equality_comparable_1a140cfdea92ae17331d8db8f69aad082f" prot="public" virt="non-virtual" ambiguityscope="EqualityComparable&lt; Scalar &gt;::"><scope>arrow::BinaryScalar</scope><name>Equals</name></member>
      <member refid="structarrow_1_1_scalar_1a42453c42084d0c9a955c8c398831a57e" prot="public" virt="non-virtual"><scope>arrow::BinaryScalar</scope><name>is_valid</name></member>
      <member refid="classarrow_1_1util_1_1_equality_comparable_1a1a7ff2c6f720209bc960524c47ad0535" prot="public" virt="non-virtual"><scope>arrow::BinaryScalar</scope><name>operator!=</name></member>
      <member refid="classarrow_1_1util_1_1_equality_comparable_1ac0e8ec25e77ece923689ee31c389200e" prot="public" virt="non-virtual"><scope>arrow::BinaryScalar</scope><name>operator==</name></member>
      <member refid="structarrow_1_1_scalar_1a1e0788ef6c5defa729c8703366adc815" prot="public" virt="non-virtual"><scope>arrow::BinaryScalar</scope><name>Parse</name></member>
      <member refid="structarrow_1_1_scalar_1ad9fe0e6c79f98c6875a23ed8b27e5175" prot="public" virt="non-virtual"><scope>arrow::BinaryScalar</scope><name>Scalar</name></member>
      <member refid="structarrow_1_1_scalar_1aff32301b232ace9c6172685d88e68e97" prot="protected" virt="non-virtual"><scope>arrow::BinaryScalar</scope><name>Scalar</name></member>
      <member refid="structarrow_1_1_scalar_1a345c3828551c3614df492397f3b558d4" prot="public" virt="non-virtual"><scope>arrow::BinaryScalar</scope><name>ToString</name></member>
      <member refid="structarrow_1_1_scalar_1ae3f8aa29da0a3f3ac9d3de6a97818328" prot="public" virt="non-virtual"><scope>arrow::BinaryScalar</scope><name>type</name></member>
      <member refid="structarrow_1_1_binary_scalar_1a4e210d163b0e58cd5ade64795797e2cb" prot="public" virt="non-virtual"><scope>arrow::BinaryScalar</scope><name>TypeClass</name></member>
      <member refid="structarrow_1_1_base_binary_scalar_1ae88504be46d05621d599df17b10d4671" prot="public" virt="non-virtual"><scope>arrow::BinaryScalar</scope><name>value</name></member>
      <member refid="structarrow_1_1_base_binary_scalar_1af0a8288582370b481cbfb0eb0eccd9e4" prot="public" virt="non-virtual"><scope>arrow::BinaryScalar</scope><name>ValueType</name></member>
      <member refid="classarrow_1_1util_1_1_equality_comparable_1a14c5ed61e030855eef29edebc6355806" prot="public" virt="non-virtual"><scope>arrow::BinaryScalar</scope><name>~EqualityComparable</name></member>
      <member refid="structarrow_1_1_scalar_1a6410100776cd901718531f54738a32c2" prot="public" virt="virtual"><scope>arrow::BinaryScalar</scope><name>~Scalar</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
