<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1stl_1_1allocator" kind="class" language="C++" prot="public">
    <compoundname>arrow::stl::allocator</compoundname>
    <includes refid="stl__allocator_8h" local="no">arrow/stl_allocator.h</includes>
    <innerclass refid="structarrow_1_1stl_1_1allocator_1_1rebind" prot="public">arrow::stl::allocator::rebind</innerclass>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classarrow_1_1stl_1_1allocator_1a643d43b68d96bcfddb0d434e94b71042" prot="public" static="no">
        <type>T</type>
        <definition>using arrow::stl::allocator&lt; T &gt;::value_type =  T</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/stl_allocator.h" line="37" column="1" bodyfile="/arrow/cpp/src/arrow/stl_allocator.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classarrow_1_1stl_1_1allocator_1a3fc26b1479547306449b34082651877f" prot="public" static="no">
        <type>T *</type>
        <definition>using arrow::stl::allocator&lt; T &gt;::pointer =  T*</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/stl_allocator.h" line="38" column="1" bodyfile="/arrow/cpp/src/arrow/stl_allocator.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classarrow_1_1stl_1_1allocator_1a7493494ba23b73ec21a283e2c3ec0f36" prot="public" static="no">
        <type>const T *</type>
        <definition>using arrow::stl::allocator&lt; T &gt;::const_pointer =  const T*</definition>
        <argsstring></argsstring>
        <name>const_pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/stl_allocator.h" line="39" column="1" bodyfile="/arrow/cpp/src/arrow/stl_allocator.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classarrow_1_1stl_1_1allocator_1a3210b26d8ee2925161e14971def25115" prot="public" static="no">
        <type>T &amp;</type>
        <definition>using arrow::stl::allocator&lt; T &gt;::reference =  T&amp;</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/stl_allocator.h" line="40" column="1" bodyfile="/arrow/cpp/src/arrow/stl_allocator.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classarrow_1_1stl_1_1allocator_1a7bc70c848116d2297c6d02f5b23cc05e" prot="public" static="no">
        <type>const T &amp;</type>
        <definition>using arrow::stl::allocator&lt; T &gt;::const_reference =  const T&amp;</definition>
        <argsstring></argsstring>
        <name>const_reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/stl_allocator.h" line="41" column="1" bodyfile="/arrow/cpp/src/arrow/stl_allocator.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classarrow_1_1stl_1_1allocator_1a3b1ef65bb635d150933fa439d2dd8209" prot="public" static="no">
        <type>std::size_t</type>
        <definition>using arrow::stl::allocator&lt; T &gt;::size_type =  std::size_t</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/stl_allocator.h" line="42" column="1" bodyfile="/arrow/cpp/src/arrow/stl_allocator.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classarrow_1_1stl_1_1allocator_1a0c5b10d6ca1fe249405b85d6faa18420" prot="public" static="no">
        <type>std::ptrdiff_t</type>
        <definition>using arrow::stl::allocator&lt; T &gt;::difference_type =  std::ptrdiff_t</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/stl_allocator.h" line="43" column="1" bodyfile="/arrow/cpp/src/arrow/stl_allocator.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classarrow_1_1stl_1_1allocator_1a8fb7f178400c784e3c4285c2ec9ccd79" prot="private" static="no" mutable="no">
        <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
        <definition>MemoryPool* arrow::stl::allocator&lt; T &gt;::pool_</definition>
        <argsstring></argsstring>
        <name>pool_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/stl_allocator.h" line="90" column="1" bodyfile="/arrow/cpp/src/arrow/stl_allocator.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1stl_1_1allocator_1a050d3840043ef30ec2648e7dc3b03425" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::stl::allocator&lt; T &gt;::allocator</definition>
        <argsstring>() noexcept</argsstring>
        <name>allocator</name>
        <briefdescription>
<para>Construct an allocator from the default <ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/stl_allocator.h" line="51" column="1" bodyfile="/arrow/cpp/src/arrow/stl_allocator.h" bodystart="51" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1stl_1_1allocator_1a345b7fb4cd99930d1b606fac634e7ca3" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::stl::allocator&lt; T &gt;::allocator</definition>
        <argsstring>(MemoryPool *pool) noexcept</argsstring>
        <name>allocator</name>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
<para>Construct an allocator from the given <ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/stl_allocator.h" line="53" column="1" bodyfile="/arrow/cpp/src/arrow/stl_allocator.h" bodystart="53" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1stl_1_1allocator_1a1e354b52fdbaab88d764749f3696502e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>arrow::stl::allocator&lt; T &gt;::allocator</definition>
        <argsstring>(const allocator&lt; U &gt; &amp;rhs) noexcept</argsstring>
        <name>allocator</name>
        <param>
          <type>const <ref refid="classarrow_1_1stl_1_1allocator" kindref="compound">allocator</ref>&lt; U &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/stl_allocator.h" line="56" column="1" bodyfile="/arrow/cpp/src/arrow/stl_allocator.h" bodystart="56" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1stl_1_1allocator_1a1052fc1209caa9d4507c0fb1e3d45185" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::stl::allocator&lt; T &gt;::~allocator</definition>
        <argsstring>()</argsstring>
        <name>~allocator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/stl_allocator.h" line="58" column="1" bodyfile="/arrow/cpp/src/arrow/stl_allocator.h" bodystart="58" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1stl_1_1allocator_1ad755a643fb2530cf13e99392cb8386b6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1stl_1_1allocator_1a3fc26b1479547306449b34082651877f" kindref="member">pointer</ref></type>
        <definition>pointer arrow::stl::allocator&lt; T &gt;::address</definition>
        <argsstring>(reference r) const noexcept</argsstring>
        <name>address</name>
        <param>
          <type><ref refid="classarrow_1_1stl_1_1allocator_1a3210b26d8ee2925161e14971def25115" kindref="member">reference</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/stl_allocator.h" line="60" column="1" bodyfile="/arrow/cpp/src/arrow/stl_allocator.h" bodystart="60" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1stl_1_1allocator_1a60d006abb7e1d8f1e4cddee81298350a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1stl_1_1allocator_1a7493494ba23b73ec21a283e2c3ec0f36" kindref="member">const_pointer</ref></type>
        <definition>const_pointer arrow::stl::allocator&lt; T &gt;::address</definition>
        <argsstring>(const_reference r) const noexcept</argsstring>
        <name>address</name>
        <param>
          <type><ref refid="classarrow_1_1stl_1_1allocator_1a7bc70c848116d2297c6d02f5b23cc05e" kindref="member">const_reference</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/stl_allocator.h" line="62" column="1" bodyfile="/arrow/cpp/src/arrow/stl_allocator.h" bodystart="62" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1stl_1_1allocator_1a5349d06d8f0891422f76ecdea359949f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1stl_1_1allocator_1a3fc26b1479547306449b34082651877f" kindref="member">pointer</ref></type>
        <definition>pointer arrow::stl::allocator&lt; T &gt;::allocate</definition>
        <argsstring>(size_type n, const void *=NULLPTR)</argsstring>
        <name>allocate</name>
        <param>
          <type><ref refid="classarrow_1_1stl_1_1allocator_1a3b1ef65bb635d150933fa439d2dd8209" kindref="member">size_type</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const void *</type>
          <defval><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/stl_allocator.h" line="64" column="1" bodyfile="/arrow/cpp/src/arrow/stl_allocator.h" bodystart="64" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1stl_1_1allocator_1a7bfbf272c95f7a39982e21028855b7e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void arrow::stl::allocator&lt; T &gt;::deallocate</definition>
        <argsstring>(pointer p, size_type n)</argsstring>
        <name>deallocate</name>
        <param>
          <type><ref refid="classarrow_1_1stl_1_1allocator_1a3fc26b1479547306449b34082651877f" kindref="member">pointer</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1stl_1_1allocator_1a3b1ef65bb635d150933fa439d2dd8209" kindref="member">size_type</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/stl_allocator.h" line="71" column="1" bodyfile="/arrow/cpp/src/arrow/stl_allocator.h" bodystart="71" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1stl_1_1allocator_1a51d7e6eefa74fb7e1fa27ff060ebb92e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1stl_1_1allocator_1a3b1ef65bb635d150933fa439d2dd8209" kindref="member">size_type</ref></type>
        <definition>size_type arrow::stl::allocator&lt; T &gt;::size_max</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size_max</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/stl_allocator.h" line="75" column="1" bodyfile="/arrow/cpp/src/arrow/stl_allocator.h" bodystart="75" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1stl_1_1allocator_1aa2262bfde82af99143bd4d8b40995fd0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void arrow::stl::allocator&lt; T &gt;::construct</definition>
        <argsstring>(U *p, Args &amp;&amp;... args)</argsstring>
        <name>construct</name>
        <param>
          <type>U *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/stl_allocator.h" line="78" column="1" bodyfile="/arrow/cpp/src/arrow/stl_allocator.h" bodystart="78" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1stl_1_1allocator_1ac48f18e9e397eb7627ff3e598c01e47a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void arrow::stl::allocator&lt; T &gt;::destroy</definition>
        <argsstring>(U *p)</argsstring>
        <name>destroy</name>
        <param>
          <type>U *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/stl_allocator.h" line="83" column="1" bodyfile="/arrow/cpp/src/arrow/stl_allocator.h" bodystart="83" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1stl_1_1allocator_1a1cfa5a143e648f6d991757a541c99e34" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
        <definition>MemoryPool* arrow::stl::allocator&lt; T &gt;::pool</definition>
        <argsstring>() const noexcept</argsstring>
        <name>pool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/stl_allocator.h" line="87" column="1" bodyfile="/arrow/cpp/src/arrow/stl_allocator.h" bodystart="87" bodyend="87"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A STL allocator delegating allocations to a Arrow <ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/arrow/stl_allocator.h" line="35" column="1" bodyfile="/arrow/cpp/src/arrow/stl_allocator.h" bodystart="35" bodyend="91"/>
    <listofallmembers>
      <member refid="classarrow_1_1stl_1_1allocator_1ad755a643fb2530cf13e99392cb8386b6" prot="public" virt="non-virtual"><scope>arrow::stl::allocator</scope><name>address</name></member>
      <member refid="classarrow_1_1stl_1_1allocator_1a60d006abb7e1d8f1e4cddee81298350a" prot="public" virt="non-virtual"><scope>arrow::stl::allocator</scope><name>address</name></member>
      <member refid="classarrow_1_1stl_1_1allocator_1a5349d06d8f0891422f76ecdea359949f" prot="public" virt="non-virtual"><scope>arrow::stl::allocator</scope><name>allocate</name></member>
      <member refid="classarrow_1_1stl_1_1allocator_1a050d3840043ef30ec2648e7dc3b03425" prot="public" virt="non-virtual"><scope>arrow::stl::allocator</scope><name>allocator</name></member>
      <member refid="classarrow_1_1stl_1_1allocator_1a345b7fb4cd99930d1b606fac634e7ca3" prot="public" virt="non-virtual"><scope>arrow::stl::allocator</scope><name>allocator</name></member>
      <member refid="classarrow_1_1stl_1_1allocator_1a1e354b52fdbaab88d764749f3696502e" prot="public" virt="non-virtual"><scope>arrow::stl::allocator</scope><name>allocator</name></member>
      <member refid="classarrow_1_1stl_1_1allocator_1a7493494ba23b73ec21a283e2c3ec0f36" prot="public" virt="non-virtual"><scope>arrow::stl::allocator</scope><name>const_pointer</name></member>
      <member refid="classarrow_1_1stl_1_1allocator_1a7bc70c848116d2297c6d02f5b23cc05e" prot="public" virt="non-virtual"><scope>arrow::stl::allocator</scope><name>const_reference</name></member>
      <member refid="classarrow_1_1stl_1_1allocator_1aa2262bfde82af99143bd4d8b40995fd0" prot="public" virt="non-virtual"><scope>arrow::stl::allocator</scope><name>construct</name></member>
      <member refid="classarrow_1_1stl_1_1allocator_1a7bfbf272c95f7a39982e21028855b7e7" prot="public" virt="non-virtual"><scope>arrow::stl::allocator</scope><name>deallocate</name></member>
      <member refid="classarrow_1_1stl_1_1allocator_1ac48f18e9e397eb7627ff3e598c01e47a" prot="public" virt="non-virtual"><scope>arrow::stl::allocator</scope><name>destroy</name></member>
      <member refid="classarrow_1_1stl_1_1allocator_1a0c5b10d6ca1fe249405b85d6faa18420" prot="public" virt="non-virtual"><scope>arrow::stl::allocator</scope><name>difference_type</name></member>
      <member refid="classarrow_1_1stl_1_1allocator_1a3fc26b1479547306449b34082651877f" prot="public" virt="non-virtual"><scope>arrow::stl::allocator</scope><name>pointer</name></member>
      <member refid="classarrow_1_1stl_1_1allocator_1a1cfa5a143e648f6d991757a541c99e34" prot="public" virt="non-virtual"><scope>arrow::stl::allocator</scope><name>pool</name></member>
      <member refid="classarrow_1_1stl_1_1allocator_1a8fb7f178400c784e3c4285c2ec9ccd79" prot="private" virt="non-virtual"><scope>arrow::stl::allocator</scope><name>pool_</name></member>
      <member refid="classarrow_1_1stl_1_1allocator_1a3210b26d8ee2925161e14971def25115" prot="public" virt="non-virtual"><scope>arrow::stl::allocator</scope><name>reference</name></member>
      <member refid="classarrow_1_1stl_1_1allocator_1a51d7e6eefa74fb7e1fa27ff060ebb92e" prot="public" virt="non-virtual"><scope>arrow::stl::allocator</scope><name>size_max</name></member>
      <member refid="classarrow_1_1stl_1_1allocator_1a3b1ef65bb635d150933fa439d2dd8209" prot="public" virt="non-virtual"><scope>arrow::stl::allocator</scope><name>size_type</name></member>
      <member refid="classarrow_1_1stl_1_1allocator_1a643d43b68d96bcfddb0d434e94b71042" prot="public" virt="non-virtual"><scope>arrow::stl::allocator</scope><name>value_type</name></member>
      <member refid="classarrow_1_1stl_1_1allocator_1a1052fc1209caa9d4507c0fb1e3d45185" prot="public" virt="non-virtual"><scope>arrow::stl::allocator</scope><name>~allocator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
