<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classparquet_1_1_block_split_bloom_filter" kind="class" language="C++" prot="public">
    <compoundname>parquet::BlockSplitBloomFilter</compoundname>
    <basecompoundref refid="classparquet_1_1_bloom_filter" prot="public" virt="non-virtual">parquet::BloomFilter</basecompoundref>
    <includes refid="bloom__filter_8h" local="no">parquet/bloom_filter.h</includes>
    <innerclass refid="structparquet_1_1_block_split_bloom_filter_1_1_block_mask" prot="private">parquet::BlockSplitBloomFilter::BlockMask</innerclass>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classparquet_1_1_block_split_bloom_filter_1a21d630ac74c445fa531e1007f390b285" prot="public" static="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t parquet::BlockSplitBloomFilter::kMinimumBloomFilterBytes</definition>
        <argsstring></argsstring>
        <name>kMinimumBloomFilterBytes</name>
        <initializer>= 32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/bloom_filter.h" line="143" column="1" bodyfile="/arrow/cpp/src/parquet/bloom_filter.h" bodystart="143" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classparquet_1_1_block_split_bloom_filter_1a65d4b52e679ce34a4d1d19383fcc83fa" prot="private" static="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int parquet::BlockSplitBloomFilter::kBytesPerFilterBlock</definition>
        <argsstring></argsstring>
        <name>kBytesPerFilterBlock</name>
        <initializer>= 32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/bloom_filter.h" line="206" column="1" bodyfile="/arrow/cpp/src/parquet/bloom_filter.h" bodystart="206" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classparquet_1_1_block_split_bloom_filter_1ae20304956dc3c20e32fa4149ff98f1cd" prot="private" static="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int parquet::BlockSplitBloomFilter::kBitsSetPerBlock</definition>
        <argsstring></argsstring>
        <name>kBitsSetPerBlock</name>
        <initializer>= 8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/bloom_filter.h" line="209" column="1" bodyfile="/arrow/cpp/src/parquet/bloom_filter.h" bodystart="209" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classparquet_1_1_block_split_bloom_filter_1a1ce9e8532b71d7dc2729022f367ab8f6" prot="private" static="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t parquet::BlockSplitBloomFilter::SALT[kBitsSetPerBlock]</definition>
        <argsstring>[kBitsSetPerBlock]</argsstring>
        <name>SALT</name>
        <initializer>= {
      0x47b6137bU, 0x44974d91U, 0x8824ad5bU, 0xa2b7289dU,
      0x705495c7U, 0x2df1424bU, 0x9efc4947U, 0x5c6bfb31U}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/bloom_filter.h" line="218" column="1" bodyfile="/arrow/cpp/src/parquet/bloom_filter.h" bodystart="218" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classparquet_1_1_block_split_bloom_filter_1a001b4d2e3873b03526dd077c99bd0b35" prot="private" static="no" mutable="no">
        <type>::<ref refid="classarrow_1_1_memory_pool" kindref="compound">arrow::MemoryPool</ref> *</type>
        <definition>::arrow::MemoryPool* parquet::BlockSplitBloomFilter::pool_</definition>
        <argsstring></argsstring>
        <name>pool_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/bloom_filter.h" line="228" column="1" bodyfile="/arrow/cpp/src/parquet/bloom_filter.h" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classparquet_1_1_block_split_bloom_filter_1a7464f30e9b429052e39fd074af466070" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="namespaceparquet_1abad5a6612a34e123346ad35eb4933d80" kindref="member">Buffer</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Buffer&gt; parquet::BlockSplitBloomFilter::data_</definition>
        <argsstring></argsstring>
        <name>data_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/bloom_filter.h" line="231" column="1" bodyfile="/arrow/cpp/src/parquet/bloom_filter.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classparquet_1_1_block_split_bloom_filter_1a6451d3647da031785011cba8deed4783" prot="private" static="no" mutable="no">
        <type>uint32_t</type>
        <definition>uint32_t parquet::BlockSplitBloomFilter::num_bytes_</definition>
        <argsstring></argsstring>
        <name>num_bytes_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/bloom_filter.h" line="234" column="1" bodyfile="/arrow/cpp/src/parquet/bloom_filter.h" bodystart="234" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classparquet_1_1_block_split_bloom_filter_1ae577c20580335be325057be23ff7b796" prot="private" static="no" mutable="no">
        <type><ref refid="classparquet_1_1_bloom_filter_1ae6b809e8dae61f2e9de9b41d91ed15a0" kindref="member">HashStrategy</ref></type>
        <definition>HashStrategy parquet::BlockSplitBloomFilter::hash_strategy_</definition>
        <argsstring></argsstring>
        <name>hash_strategy_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/bloom_filter.h" line="237" column="1" bodyfile="/arrow/cpp/src/parquet/bloom_filter.h" bodystart="237" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classparquet_1_1_block_split_bloom_filter_1ad43565dc903a968f5fc76fa1040dd04f" prot="private" static="no" mutable="no">
        <type><ref refid="classparquet_1_1_bloom_filter_1a12154d2067f3e8a564b5c2be92b28511" kindref="member">Algorithm</ref></type>
        <definition>Algorithm parquet::BlockSplitBloomFilter::algorithm_</definition>
        <argsstring></argsstring>
        <name>algorithm_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/bloom_filter.h" line="240" column="1" bodyfile="/arrow/cpp/src/parquet/bloom_filter.h" bodystart="240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classparquet_1_1_block_split_bloom_filter_1a37e8b95922cf5ba7b7ae75fc3205364d" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classparquet_1_1_hasher" kindref="compound">Hasher</ref> &gt;</type>
        <definition>std::unique_ptr&lt;Hasher&gt; parquet::BlockSplitBloomFilter::hasher_</definition>
        <argsstring></argsstring>
        <name>hasher_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/bloom_filter.h" line="243" column="1" bodyfile="/arrow/cpp/src/parquet/bloom_filter.h" bodystart="243" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classparquet_1_1_block_split_bloom_filter_1a7ff380d88ff56ebc1d24704561b1884a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>parquet::BlockSplitBloomFilter::BlockSplitBloomFilter</definition>
        <argsstring>()</argsstring>
        <name>BlockSplitBloomFilter</name>
        <briefdescription>
<para>The constructor of <ref refid="classparquet_1_1_block_split_bloom_filter" kindref="compound">BlockSplitBloomFilter</ref>. It uses murmur3_x64_128 as hash function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/bloom_filter.h" line="122" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_block_split_bloom_filter_1a9bb47b89933d130d63566045a688f5ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parquet::BlockSplitBloomFilter::Init</definition>
        <argsstring>(uint32_t num_bytes)</argsstring>
        <name>Init</name>
        <param>
          <type>uint32_t</type>
          <declname>num_bytes</declname>
        </param>
        <briefdescription>
<para>Initialize the <ref refid="classparquet_1_1_block_split_bloom_filter" kindref="compound">BlockSplitBloomFilter</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>The range of num_bytes should be within [kMinimumBloomFilterBytes, kMaximumBloomFilterBytes], it will be rounded up/down to lower/upper bound if num_bytes is out of range and also will be rounded up to a power of 2.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to store Bloom filter bitset. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/bloom_filter.h" line="130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_block_split_bloom_filter_1afc0326ff5191aaa7b3ffd59d08989d34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parquet::BlockSplitBloomFilter::Init</definition>
        <argsstring>(const uint8_t *bitset, uint32_t num_bytes)</argsstring>
        <name>Init</name>
        <param>
          <type>const uint8_t *</type>
          <declname>bitset</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>num_bytes</declname>
        </param>
        <briefdescription>
<para>Initialize the <ref refid="classparquet_1_1_block_split_bloom_filter" kindref="compound">BlockSplitBloomFilter</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>It copies the bitset as underlying bitset because the given bitset may not satisfy the 32-byte alignment requirement which may lead to segfault when performing SIMD instructions. It is the caller&apos;s responsibility to free the bitset passed in. This is used when reconstructing a Bloom filter from a parquet file.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bitset</parametername>
</parameternamelist>
<parameterdescription>
<para>The given bitset to initialize the Bloom filter. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes of given bitset. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/bloom_filter.h" line="140" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_block_split_bloom_filter_1a40df4149c8116922e46e8c587a9d25f8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool parquet::BlockSplitBloomFilter::FindHash</definition>
        <argsstring>(uint64_t hash) const override</argsstring>
        <name>FindHash</name>
        <reimplements refid="classparquet_1_1_bloom_filter_1a1c1257aa1de62fdb339caeb1bc89df61">FindHash</reimplements>
        <param>
          <type>uint64_t</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
<para>Determine whether an element exist in set or not. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>the element to contain. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>false if value is definitely not in set, and true means PROBABLY in set. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/bloom_filter.h" line="182" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_block_split_bloom_filter_1a156c2a4b2d87b148e38a27f9b36f7ec6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void parquet::BlockSplitBloomFilter::InsertHash</definition>
        <argsstring>(uint64_t hash) override</argsstring>
        <name>InsertHash</name>
        <reimplements refid="classparquet_1_1_bloom_filter_1ae3c78f201a9b3e276a059f9a9473f946">InsertHash</reimplements>
        <param>
          <type>uint64_t</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
<para>Insert element to set represented by Bloom filter bitset. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>the hash of value to insert into Bloom filter. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/bloom_filter.h" line="183" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_block_split_bloom_filter_1a932a914363e4fbefc191ac6dd1d07a0f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void parquet::BlockSplitBloomFilter::WriteTo</definition>
        <argsstring>(ArrowOutputStream *sink) const override</argsstring>
        <name>WriteTo</name>
        <reimplements refid="classparquet_1_1_bloom_filter_1a062290ead992cd65b63cf96c58d96c01">WriteTo</reimplements>
        <param>
          <type><ref refid="namespaceparquet_1ad02e9bf40eaac38e07be6cc973d8884e" kindref="member">ArrowOutputStream</ref> *</type>
          <declname>sink</declname>
        </param>
        <briefdescription>
<para>Write this Bloom filter to an output stream. </para>        </briefdescription>
        <detaileddescription>
<para>A Bloom filter structure should include bitset length, hash strategy, algorithm, and bitset.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sink</parametername>
</parameternamelist>
<parameterdescription>
<para>the output stream to write </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/bloom_filter.h" line="184" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_block_split_bloom_filter_1a8d1c4ae9c27a83b0e37e78e922e0ec03" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>uint32_t</type>
        <definition>uint32_t parquet::BlockSplitBloomFilter::GetBitsetSize</definition>
        <argsstring>() const override</argsstring>
        <name>GetBitsetSize</name>
        <reimplements refid="classparquet_1_1_bloom_filter_1aae8f7082a544cb4b5729ce5e98f8a3c8">GetBitsetSize</reimplements>
        <briefdescription>
<para>Get the number of bytes of bitset. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/bloom_filter.h" line="185" column="1" bodyfile="/arrow/cpp/src/parquet/bloom_filter.h" bodystart="185" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_block_split_bloom_filter_1a0fa967ac464ea71f124edb3586a2ca73" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>uint64_t</type>
        <definition>uint64_t parquet::BlockSplitBloomFilter::Hash</definition>
        <argsstring>(int64_t value) const override</argsstring>
        <name>Hash</name>
        <reimplements refid="classparquet_1_1_bloom_filter_1a9c109e318617eb940d7609568a184cb4">Hash</reimplements>
        <param>
          <type>int64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Compute hash for 64 bits value by using its plain encoding result. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to hash. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hash result. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/bloom_filter.h" line="187" column="1" bodyfile="/arrow/cpp/src/parquet/bloom_filter.h" bodystart="187" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_block_split_bloom_filter_1a8f5e50eb36aaea9bab24198dcc4f9ed0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>uint64_t</type>
        <definition>uint64_t parquet::BlockSplitBloomFilter::Hash</definition>
        <argsstring>(float value) const override</argsstring>
        <name>Hash</name>
        <reimplements refid="classparquet_1_1_bloom_filter_1a409ac6491a39e0f0ee732c197677351e">Hash</reimplements>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Compute hash for float value by using its plain encoding result. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to hash. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hash result. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/bloom_filter.h" line="188" column="1" bodyfile="/arrow/cpp/src/parquet/bloom_filter.h" bodystart="188" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_block_split_bloom_filter_1a294707e73f6095590d2e8c664553bcca" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>uint64_t</type>
        <definition>uint64_t parquet::BlockSplitBloomFilter::Hash</definition>
        <argsstring>(double value) const override</argsstring>
        <name>Hash</name>
        <reimplements refid="classparquet_1_1_bloom_filter_1a27c22eebf8e65da1db34a69ff234f748">Hash</reimplements>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Compute hash for double value by using its plain encoding result. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to hash. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hash result. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/bloom_filter.h" line="189" column="1" bodyfile="/arrow/cpp/src/parquet/bloom_filter.h" bodystart="189" bodyend="189"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_block_split_bloom_filter_1af4e98941311adc5c6dfc398abdc16ffd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>uint64_t</type>
        <definition>uint64_t parquet::BlockSplitBloomFilter::Hash</definition>
        <argsstring>(const Int96 *value) const override</argsstring>
        <name>Hash</name>
        <reimplements refid="classparquet_1_1_bloom_filter_1a318dad60cd961941eb80751b9f65156a">Hash</reimplements>
        <param>
          <type>const Int96 *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Compute hash for Int96 value by using its plain encoding result. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to hash. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hash result. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/bloom_filter.h" line="190" column="1" bodyfile="/arrow/cpp/src/parquet/bloom_filter.h" bodystart="190" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_block_split_bloom_filter_1a6200699b9172d02ec00b6cc1083ea749" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>uint64_t</type>
        <definition>uint64_t parquet::BlockSplitBloomFilter::Hash</definition>
        <argsstring>(const ByteArray *value) const override</argsstring>
        <name>Hash</name>
        <reimplements refid="classparquet_1_1_bloom_filter_1a4777144d19cd9e06f5de02141779f93a">Hash</reimplements>
        <param>
          <type>const <ref refid="structparquet_1_1_byte_array" kindref="compound">ByteArray</ref> *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Compute hash for <ref refid="structparquet_1_1_byte_array" kindref="compound">ByteArray</ref> value by using its plain encoding result. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to hash. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hash result. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/bloom_filter.h" line="191" column="1" bodyfile="/arrow/cpp/src/parquet/bloom_filter.h" bodystart="191" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_block_split_bloom_filter_1a621a1474ffaea85c29cdffcc0821e16d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>uint64_t</type>
        <definition>uint64_t parquet::BlockSplitBloomFilter::Hash</definition>
        <argsstring>(int32_t value) const override</argsstring>
        <name>Hash</name>
        <reimplements refid="classparquet_1_1_bloom_filter_1a7f43df7152dff09a10295522d91b3313">Hash</reimplements>
        <param>
          <type>int32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Compute hash for 32 bits value by using its plain encoding result. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to hash. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hash result. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/bloom_filter.h" line="192" column="1" bodyfile="/arrow/cpp/src/parquet/bloom_filter.h" bodystart="192" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_block_split_bloom_filter_1a57dbf045a3cfeae211531fa34db7622f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>uint64_t</type>
        <definition>uint64_t parquet::BlockSplitBloomFilter::Hash</definition>
        <argsstring>(const FLBA *value, uint32_t len) const override</argsstring>
        <name>Hash</name>
        <reimplements refid="classparquet_1_1_bloom_filter_1a1175e872e3438b3372f77f8e462f8f81">Hash</reimplements>
        <param>
          <type>const <ref refid="namespaceparquet_1a2d74e36d45a524fd793d9d9244024098" kindref="member">FLBA</ref> *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>uint32_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
<para>Compute hash for fixed byte array value by using its plain encoding result. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>value</parametername>
</parameternamelist>
<parameterdescription>
<para>the value address. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>len</parametername>
</parameternamelist>
<parameterdescription>
<para>the value length. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>hash result. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/bloom_filter.h" line="193" column="1" bodyfile="/arrow/cpp/src/parquet/bloom_filter.h" bodystart="193" bodyend="195"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classparquet_1_1_block_split_bloom_filter_1a7466a7729f145c09a2fac2ff64c0a0d7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint32_t</type>
        <definition>static uint32_t parquet::BlockSplitBloomFilter::OptimalNumOfBits</definition>
        <argsstring>(uint32_t ndv, double fpp)</argsstring>
        <name>OptimalNumOfBits</name>
        <param>
          <type>uint32_t</type>
          <declname>ndv</declname>
        </param>
        <param>
          <type>double</type>
          <declname>fpp</declname>
        </param>
        <briefdescription>
<para>Calculate optimal size according to the number of distinct values and false positive probability. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ndv</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of distinct values. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>fpp</parametername>
</parameternamelist>
<parameterdescription>
<para>The false positive probability. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>it always return a value between kMinimumBloomFilterBytes and kMaximumBloomFilterBytes, and the return value is always a power of 2 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/bloom_filter.h" line="152" column="1" bodyfile="/arrow/cpp/src/parquet/bloom_filter.h" bodystart="152" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_block_split_bloom_filter_1abd2168f39bae584b36b191006f3dfc7a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classparquet_1_1_block_split_bloom_filter" kindref="compound">BlockSplitBloomFilter</ref></type>
        <definition>static BlockSplitBloomFilter parquet::BlockSplitBloomFilter::Deserialize</definition>
        <argsstring>(ArrowInputStream *input_stream)</argsstring>
        <name>Deserialize</name>
        <param>
          <type><ref refid="namespaceparquet_1a69cbbbff0bc1abb6d4e61f9762c86da7" kindref="member">ArrowInputStream</ref> *</type>
          <declname>input_stream</declname>
        </param>
        <briefdescription>
<para>Deserialize the Bloom filter from an input stream. </para>        </briefdescription>
        <detaileddescription>
<para>It is used when reconstructing a Bloom filter from a parquet filter.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>input_stream</parametername>
</parameternamelist>
<parameterdescription>
<para>The input stream from which to construct the Bloom filter </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The <ref refid="classparquet_1_1_block_split_bloom_filter" kindref="compound">BlockSplitBloomFilter</ref>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/bloom_filter.h" line="202" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classparquet_1_1_block_split_bloom_filter_1a1041d9ee398acc4f5bcf1a03e6174d96" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parquet::BlockSplitBloomFilter::SetMask</definition>
        <argsstring>(uint32_t key, BlockMask &amp;mask) const</argsstring>
        <name>SetMask</name>
        <param>
          <type>uint32_t</type>
          <declname>key</declname>
        </param>
        <param>
          <type>BlockMask &amp;</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Set bits in mask array according to input key. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to calculate mask values. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mask</parametername>
</parameternamelist>
<parameterdescription>
<para>the mask array is used to set inside a block </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/bloom_filter.h" line="225" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="363">
        <label>parquet::BlockSplitBloomFilter</label>
        <link refid="classparquet_1_1_block_split_bloom_filter"/>
        <childnode refid="364" relation="public-inheritance">
        </childnode>
      </node>
      <node id="364">
        <label>parquet::BloomFilter</label>
        <link refid="classparquet_1_1_bloom_filter"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="365">
        <label>parquet::BlockSplitBloomFilter</label>
        <link refid="classparquet_1_1_block_split_bloom_filter"/>
        <childnode refid="366" relation="public-inheritance">
        </childnode>
      </node>
      <node id="366">
        <label>parquet::BloomFilter</label>
        <link refid="classparquet_1_1_bloom_filter"/>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/parquet/bloom_filter.h" line="119" column="1" bodyfile="/arrow/cpp/src/parquet/bloom_filter.h" bodystart="119" bodyend="244"/>
    <listofallmembers>
      <member refid="classparquet_1_1_bloom_filter_1a12154d2067f3e8a564b5c2be92b28511" prot="protected" virt="non-virtual"><scope>parquet::BlockSplitBloomFilter</scope><name>Algorithm</name></member>
      <member refid="classparquet_1_1_block_split_bloom_filter_1ad43565dc903a968f5fc76fa1040dd04f" prot="private" virt="non-virtual"><scope>parquet::BlockSplitBloomFilter</scope><name>algorithm_</name></member>
      <member refid="classparquet_1_1_block_split_bloom_filter_1a7ff380d88ff56ebc1d24704561b1884a" prot="public" virt="non-virtual"><scope>parquet::BlockSplitBloomFilter</scope><name>BlockSplitBloomFilter</name></member>
      <member refid="classparquet_1_1_block_split_bloom_filter_1a7464f30e9b429052e39fd074af466070" prot="private" virt="non-virtual"><scope>parquet::BlockSplitBloomFilter</scope><name>data_</name></member>
      <member refid="classparquet_1_1_block_split_bloom_filter_1abd2168f39bae584b36b191006f3dfc7a" prot="public" virt="non-virtual"><scope>parquet::BlockSplitBloomFilter</scope><name>Deserialize</name></member>
      <member refid="classparquet_1_1_block_split_bloom_filter_1a40df4149c8116922e46e8c587a9d25f8" prot="public" virt="virtual"><scope>parquet::BlockSplitBloomFilter</scope><name>FindHash</name></member>
      <member refid="classparquet_1_1_block_split_bloom_filter_1a8d1c4ae9c27a83b0e37e78e922e0ec03" prot="public" virt="virtual"><scope>parquet::BlockSplitBloomFilter</scope><name>GetBitsetSize</name></member>
      <member refid="classparquet_1_1_block_split_bloom_filter_1a0fa967ac464ea71f124edb3586a2ca73" prot="public" virt="virtual"><scope>parquet::BlockSplitBloomFilter</scope><name>Hash</name></member>
      <member refid="classparquet_1_1_block_split_bloom_filter_1a8f5e50eb36aaea9bab24198dcc4f9ed0" prot="public" virt="virtual"><scope>parquet::BlockSplitBloomFilter</scope><name>Hash</name></member>
      <member refid="classparquet_1_1_block_split_bloom_filter_1a294707e73f6095590d2e8c664553bcca" prot="public" virt="virtual"><scope>parquet::BlockSplitBloomFilter</scope><name>Hash</name></member>
      <member refid="classparquet_1_1_block_split_bloom_filter_1af4e98941311adc5c6dfc398abdc16ffd" prot="public" virt="virtual"><scope>parquet::BlockSplitBloomFilter</scope><name>Hash</name></member>
      <member refid="classparquet_1_1_block_split_bloom_filter_1a6200699b9172d02ec00b6cc1083ea749" prot="public" virt="virtual"><scope>parquet::BlockSplitBloomFilter</scope><name>Hash</name></member>
      <member refid="classparquet_1_1_block_split_bloom_filter_1a621a1474ffaea85c29cdffcc0821e16d" prot="public" virt="virtual"><scope>parquet::BlockSplitBloomFilter</scope><name>Hash</name></member>
      <member refid="classparquet_1_1_block_split_bloom_filter_1a57dbf045a3cfeae211531fa34db7622f" prot="public" virt="virtual"><scope>parquet::BlockSplitBloomFilter</scope><name>Hash</name></member>
      <member refid="classparquet_1_1_block_split_bloom_filter_1ae577c20580335be325057be23ff7b796" prot="private" virt="non-virtual"><scope>parquet::BlockSplitBloomFilter</scope><name>hash_strategy_</name></member>
      <member refid="classparquet_1_1_block_split_bloom_filter_1a37e8b95922cf5ba7b7ae75fc3205364d" prot="private" virt="non-virtual"><scope>parquet::BlockSplitBloomFilter</scope><name>hasher_</name></member>
      <member refid="classparquet_1_1_bloom_filter_1ae6b809e8dae61f2e9de9b41d91ed15a0" prot="protected" virt="non-virtual"><scope>parquet::BlockSplitBloomFilter</scope><name>HashStrategy</name></member>
      <member refid="classparquet_1_1_block_split_bloom_filter_1a9bb47b89933d130d63566045a688f5ae" prot="public" virt="non-virtual"><scope>parquet::BlockSplitBloomFilter</scope><name>Init</name></member>
      <member refid="classparquet_1_1_block_split_bloom_filter_1afc0326ff5191aaa7b3ffd59d08989d34" prot="public" virt="non-virtual"><scope>parquet::BlockSplitBloomFilter</scope><name>Init</name></member>
      <member refid="classparquet_1_1_block_split_bloom_filter_1a156c2a4b2d87b148e38a27f9b36f7ec6" prot="public" virt="virtual"><scope>parquet::BlockSplitBloomFilter</scope><name>InsertHash</name></member>
      <member refid="classparquet_1_1_block_split_bloom_filter_1ae20304956dc3c20e32fa4149ff98f1cd" prot="private" virt="non-virtual"><scope>parquet::BlockSplitBloomFilter</scope><name>kBitsSetPerBlock</name></member>
      <member refid="classparquet_1_1_block_split_bloom_filter_1a65d4b52e679ce34a4d1d19383fcc83fa" prot="private" virt="non-virtual"><scope>parquet::BlockSplitBloomFilter</scope><name>kBytesPerFilterBlock</name></member>
      <member refid="classparquet_1_1_bloom_filter_1a1458b5b834eadd23acf273fd18e8fe26" prot="public" virt="non-virtual"><scope>parquet::BlockSplitBloomFilter</scope><name>kMaximumBloomFilterBytes</name></member>
      <member refid="classparquet_1_1_block_split_bloom_filter_1a21d630ac74c445fa531e1007f390b285" prot="public" virt="non-virtual"><scope>parquet::BlockSplitBloomFilter</scope><name>kMinimumBloomFilterBytes</name></member>
      <member refid="classparquet_1_1_block_split_bloom_filter_1a6451d3647da031785011cba8deed4783" prot="private" virt="non-virtual"><scope>parquet::BlockSplitBloomFilter</scope><name>num_bytes_</name></member>
      <member refid="classparquet_1_1_block_split_bloom_filter_1a7466a7729f145c09a2fac2ff64c0a0d7" prot="public" virt="non-virtual"><scope>parquet::BlockSplitBloomFilter</scope><name>OptimalNumOfBits</name></member>
      <member refid="classparquet_1_1_block_split_bloom_filter_1a001b4d2e3873b03526dd077c99bd0b35" prot="private" virt="non-virtual"><scope>parquet::BlockSplitBloomFilter</scope><name>pool_</name></member>
      <member refid="classparquet_1_1_block_split_bloom_filter_1a1ce9e8532b71d7dc2729022f367ab8f6" prot="private" virt="non-virtual"><scope>parquet::BlockSplitBloomFilter</scope><name>SALT</name></member>
      <member refid="classparquet_1_1_block_split_bloom_filter_1a1041d9ee398acc4f5bcf1a03e6174d96" prot="private" virt="non-virtual"><scope>parquet::BlockSplitBloomFilter</scope><name>SetMask</name></member>
      <member refid="classparquet_1_1_block_split_bloom_filter_1a932a914363e4fbefc191ac6dd1d07a0f" prot="public" virt="virtual"><scope>parquet::BlockSplitBloomFilter</scope><name>WriteTo</name></member>
      <member refid="classparquet_1_1_bloom_filter_1a29b5b7306a69010e7ac649cf48c47e3e" prot="public" virt="virtual"><scope>parquet::BlockSplitBloomFilter</scope><name>~BloomFilter</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
