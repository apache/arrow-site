<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="function__registry__common_8h" kind="file" language="C++">
    <compoundname>function_registry_common.h</compoundname>
    <includes local="no">memory</includes>
    <includes local="no">string</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">vector</includes>
    <includes refid="arrow_8h" local="yes">gandiva/arrow.h</includes>
    <includes refid="function__signature_8h" local="yes">gandiva/function_signature.h</includes>
    <includes refid="gandiva__aliases_8h" local="yes">gandiva/gandiva_aliases.h</includes>
    <includes refid="native__function_8h" local="yes">gandiva/native_function.h</includes>
    <includedby refid="function__registry_8h" local="yes">/arrow/cpp/src/gandiva/function_registry.h</includedby>
    <incdepgraph>
      <node id="16567">
        <label>atomic</label>
      </node>
      <node id="16581">
        <label>arrow/util/compare.h</label>
        <link refid="util_2compare_8h"/>
        <childnode refid="16561" relation="include">
        </childnode>
        <childnode refid="16570" relation="include">
        </childnode>
        <childnode refid="16571" relation="include">
        </childnode>
        <childnode refid="16573" relation="include">
        </childnode>
      </node>
      <node id="16597">
        <label>limits</label>
      </node>
      <node id="16609">
        <label>arrow/buffer_builder.h</label>
        <link refid="buffer__builder_8h"/>
        <childnode refid="16592" relation="include">
        </childnode>
        <childnode refid="16568" relation="include">
        </childnode>
        <childnode refid="16580" relation="include">
        </childnode>
        <childnode refid="16561" relation="include">
        </childnode>
        <childnode refid="16562" relation="include">
        </childnode>
        <childnode refid="16571" relation="include">
        </childnode>
        <childnode refid="16598" relation="include">
        </childnode>
        <childnode refid="16579" relation="include">
        </childnode>
        <childnode refid="16590" relation="include">
        </childnode>
        <childnode refid="16573" relation="include">
        </childnode>
        <childnode refid="16610" relation="include">
        </childnode>
        <childnode refid="16574" relation="include">
        </childnode>
      </node>
      <node id="16568">
        <label>cstdint</label>
      </node>
      <node id="16611">
        <label>arrow/array/builder_binary.h</label>
        <link refid="builder__binary_8h"/>
        <childnode refid="16592" relation="include">
        </childnode>
        <childnode refid="16568" relation="include">
        </childnode>
        <childnode refid="16597" relation="include">
        </childnode>
        <childnode refid="16561" relation="include">
        </childnode>
        <childnode refid="16612" relation="include">
        </childnode>
        <childnode refid="16562" relation="include">
        </childnode>
        <childnode refid="16564" relation="include">
        </childnode>
        <childnode refid="16566" relation="include">
        </childnode>
        <childnode refid="16608" relation="include">
        </childnode>
        <childnode refid="16609" relation="include">
        </childnode>
        <childnode refid="16579" relation="include">
        </childnode>
        <childnode refid="16589" relation="include">
        </childnode>
        <childnode refid="16573" relation="include">
        </childnode>
        <childnode refid="16601" relation="include">
        </childnode>
      </node>
      <node id="16598">
        <label>arrow/buffer.h</label>
        <link refid="buffer_8h"/>
        <childnode refid="16568" relation="include">
        </childnode>
        <childnode refid="16580" relation="include">
        </childnode>
        <childnode refid="16561" relation="include">
        </childnode>
        <childnode refid="16562" relation="include">
        </childnode>
        <childnode refid="16570" relation="include">
        </childnode>
        <childnode refid="16571" relation="include">
        </childnode>
        <childnode refid="16564" relation="include">
        </childnode>
        <childnode refid="16599" relation="include">
        </childnode>
        <childnode refid="16600" relation="include">
        </childnode>
        <childnode refid="16579" relation="include">
        </childnode>
        <childnode refid="16584" relation="include">
        </childnode>
        <childnode refid="16573" relation="include">
        </childnode>
        <childnode refid="16601" relation="include">
        </childnode>
        <childnode refid="16574" relation="include">
        </childnode>
      </node>
      <node id="16591">
        <label>endian.h</label>
      </node>
      <node id="16615">
        <label>arrow/array/builder_primitive.h</label>
        <link refid="builder__primitive_8h"/>
        <childnode refid="16592" relation="include">
        </childnode>
        <childnode refid="16561" relation="include">
        </childnode>
        <childnode refid="16564" relation="include">
        </childnode>
        <childnode refid="16566" relation="include">
        </childnode>
        <childnode refid="16608" relation="include">
        </childnode>
        <childnode refid="16575" relation="include">
        </childnode>
      </node>
      <node id="16579">
        <label>arrow/status.h</label>
        <link refid="status_8h"/>
        <childnode refid="16580" relation="include">
        </childnode>
        <childnode refid="16569" relation="include">
        </childnode>
        <childnode refid="16561" relation="include">
        </childnode>
        <childnode refid="16562" relation="include">
        </childnode>
        <childnode refid="16571" relation="include">
        </childnode>
        <childnode refid="16581" relation="include">
        </childnode>
        <childnode refid="16573" relation="include">
        </childnode>
        <childnode refid="16582" relation="include">
        </childnode>
        <childnode refid="16574" relation="include">
        </childnode>
      </node>
      <node id="16603">
        <label>arrow/util/functional.h</label>
        <link refid="functional_8h"/>
        <childnode refid="16604" relation="include">
        </childnode>
        <childnode refid="16570" relation="include">
        </childnode>
        <childnode refid="16573" relation="include">
        </childnode>
      </node>
      <node id="16584">
        <label>arrow/type_fwd.h</label>
        <link refid="type__fwd_8h"/>
        <childnode refid="16561" relation="include">
        </childnode>
        <childnode refid="16562" relation="include">
        </childnode>
        <childnode refid="16564" relation="include">
        </childnode>
        <childnode refid="16573" relation="include">
        </childnode>
        <childnode refid="16574" relation="include">
        </childnode>
      </node>
      <node id="16596">
        <label>cmath</label>
      </node>
      <node id="16595">
        <label>cassert</label>
      </node>
      <node id="16585">
        <label>arrow/util/checked_cast.h</label>
        <link refid="checked__cast_8h"/>
        <childnode refid="16561" relation="include">
        </childnode>
        <childnode refid="16570" relation="include">
        </childnode>
      </node>
      <node id="16617">
        <label>arrow/array/builder_time.h</label>
        <link refid="builder__time_8h"/>
        <childnode refid="16561" relation="include">
        </childnode>
        <childnode refid="16608" relation="include">
        </childnode>
        <childnode refid="16615" relation="include">
        </childnode>
      </node>
      <node id="16612">
        <label>numeric</label>
      </node>
      <node id="16560">
        <label>/arrow/cpp/src/gandiva/function_registry_common.h</label>
        <link refid="function__registry__common_8h"/>
        <childnode refid="16561" relation="include">
        </childnode>
        <childnode refid="16562" relation="include">
        </childnode>
        <childnode refid="16563" relation="include">
        </childnode>
        <childnode refid="16564" relation="include">
        </childnode>
        <childnode refid="16565" relation="include">
        </childnode>
        <childnode refid="16621" relation="include">
        </childnode>
        <childnode refid="16626" relation="include">
        </childnode>
        <childnode refid="16628" relation="include">
        </childnode>
      </node>
      <node id="16562">
        <label>string</label>
      </node>
      <node id="16602">
        <label>arrow/vendored/string_view.hpp</label>
      </node>
      <node id="16572">
        <label>arrow/compare.h</label>
        <link refid="compare_8h"/>
        <childnode refid="16568" relation="include">
        </childnode>
        <childnode refid="16569" relation="include">
        </childnode>
        <childnode refid="16573" relation="include">
        </childnode>
        <childnode refid="16574" relation="include">
        </childnode>
      </node>
      <node id="16586">
        <label>arrow/util/variant.h</label>
        <link refid="variant_8h"/>
        <childnode refid="16587" relation="include">
        </childnode>
      </node>
      <node id="16627">
        <label>unordered_set</label>
      </node>
      <node id="16588">
        <label>arrow/visitor.h</label>
        <link refid="visitor_8h"/>
        <childnode refid="16579" relation="include">
        </childnode>
        <childnode refid="16584" relation="include">
        </childnode>
        <childnode refid="16574" relation="include">
        </childnode>
      </node>
      <node id="16583">
        <label>ostream</label>
      </node>
      <node id="16616">
        <label>arrow/array/builder_nested.h</label>
        <link refid="builder__nested_8h"/>
        <childnode refid="16597" relation="include">
        </childnode>
        <childnode refid="16561" relation="include">
        </childnode>
        <childnode refid="16571" relation="include">
        </childnode>
        <childnode refid="16564" relation="include">
        </childnode>
        <childnode refid="16566" relation="include">
        </childnode>
        <childnode refid="16608" relation="include">
        </childnode>
        <childnode refid="16609" relation="include">
        </childnode>
      </node>
      <node id="16574">
        <label>arrow/util/visibility.h</label>
        <link refid="arrow_2util_2visibility_8h"/>
      </node>
      <node id="16606">
        <label>arrow/builder.h</label>
        <link refid="builder_8h"/>
        <childnode refid="16561" relation="include">
        </childnode>
        <childnode refid="16607" relation="include">
        </childnode>
        <childnode refid="16608" relation="include">
        </childnode>
        <childnode refid="16611" relation="include">
        </childnode>
        <childnode refid="16613" relation="include">
        </childnode>
        <childnode refid="16614" relation="include">
        </childnode>
        <childnode refid="16616" relation="include">
        </childnode>
        <childnode refid="16615" relation="include">
        </childnode>
        <childnode refid="16617" relation="include">
        </childnode>
        <childnode refid="16618" relation="include">
        </childnode>
        <childnode refid="16579" relation="include">
        </childnode>
        <childnode refid="16574" relation="include">
        </childnode>
      </node>
      <node id="16624">
        <label>arrow/util/logging.h</label>
        <link refid="arrow_2util_2logging_8h"/>
        <childnode refid="16561" relation="include">
        </childnode>
        <childnode refid="16583" relation="include">
        </childnode>
        <childnode refid="16562" relation="include">
        </childnode>
        <childnode refid="16573" relation="include">
        </childnode>
        <childnode refid="16574" relation="include">
        </childnode>
      </node>
      <node id="16599">
        <label>arrow/device.h</label>
        <link refid="device_8h"/>
        <childnode refid="16568" relation="include">
        </childnode>
        <childnode refid="16561" relation="include">
        </childnode>
        <childnode refid="16562" relation="include">
        </childnode>
        <childnode refid="16600" relation="include">
        </childnode>
        <childnode refid="16584" relation="include">
        </childnode>
        <childnode refid="16581" relation="include">
        </childnode>
        <childnode refid="16573" relation="include">
        </childnode>
        <childnode refid="16574" relation="include">
        </childnode>
      </node>
      <node id="16619">
        <label>arrow/pretty_print.h</label>
        <link refid="pretty__print_8h"/>
        <childnode refid="16569" relation="include">
        </childnode>
        <childnode refid="16562" relation="include">
        </childnode>
        <childnode refid="16574" relation="include">
        </childnode>
      </node>
      <node id="16628">
        <label>gandiva/native_function.h</label>
        <link refid="native__function_8h"/>
        <childnode refid="16561" relation="include">
        </childnode>
        <childnode refid="16562" relation="include">
        </childnode>
        <childnode refid="16564" relation="include">
        </childnode>
        <childnode refid="16621" relation="include">
        </childnode>
        <childnode refid="16625" relation="include">
        </childnode>
      </node>
      <node id="16590">
        <label>arrow/util/bit_util.h</label>
        <link refid="bit__util_8h"/>
        <childnode refid="16591" relation="include">
        </childnode>
        <childnode refid="16592" relation="include">
        </childnode>
        <childnode refid="16593" relation="include">
        </childnode>
        <childnode refid="16594" relation="include">
        </childnode>
        <childnode refid="16595" relation="include">
        </childnode>
        <childnode refid="16596" relation="include">
        </childnode>
        <childnode refid="16568" relation="include">
        </childnode>
        <childnode refid="16580" relation="include">
        </childnode>
        <childnode refid="16597" relation="include">
        </childnode>
        <childnode refid="16561" relation="include">
        </childnode>
        <childnode refid="16562" relation="include">
        </childnode>
        <childnode refid="16570" relation="include">
        </childnode>
        <childnode refid="16571" relation="include">
        </childnode>
        <childnode refid="16564" relation="include">
        </childnode>
        <childnode refid="16598" relation="include">
        </childnode>
        <childnode refid="16577" relation="include">
        </childnode>
        <childnode refid="16581" relation="include">
        </childnode>
        <childnode refid="16603" relation="include">
        </childnode>
        <childnode refid="16573" relation="include">
        </childnode>
        <childnode refid="16582" relation="include">
        </childnode>
        <childnode refid="16601" relation="include">
        </childnode>
        <childnode refid="16605" relation="include">
        </childnode>
        <childnode refid="16574" relation="include">
        </childnode>
      </node>
      <node id="16614">
        <label>arrow/array/builder_dict.h</label>
        <link refid="builder__dict_8h"/>
        <childnode refid="16592" relation="include">
        </childnode>
        <childnode refid="16561" relation="include">
        </childnode>
        <childnode refid="16607" relation="include">
        </childnode>
        <childnode refid="16608" relation="include">
        </childnode>
        <childnode refid="16615" relation="include">
        </childnode>
        <childnode refid="16566" relation="include">
        </childnode>
      </node>
      <node id="16594">
        <label>bitset</label>
      </node>
      <node id="16604">
        <label>tuple</label>
      </node>
      <node id="16565">
        <label>gandiva/arrow.h</label>
        <link refid="arrow_8h"/>
        <childnode refid="16561" relation="include">
        </childnode>
        <childnode refid="16564" relation="include">
        </childnode>
        <childnode refid="16566" relation="include">
        </childnode>
        <childnode refid="16606" relation="include">
        </childnode>
        <childnode refid="16619" relation="include">
        </childnode>
        <childnode refid="16620" relation="include">
        </childnode>
        <childnode refid="16579" relation="include">
        </childnode>
        <childnode refid="16575" relation="include">
        </childnode>
      </node>
      <node id="16623">
        <label>gandiva/logging.h</label>
        <link refid="gandiva_2logging_8h"/>
        <childnode refid="16624" relation="include">
        </childnode>
      </node>
      <node id="16607">
        <label>arrow/array/builder_adaptive.h</label>
        <link refid="builder__adaptive_8h"/>
        <childnode refid="16561" relation="include">
        </childnode>
        <childnode refid="16608" relation="include">
        </childnode>
      </node>
      <node id="16564">
        <label>vector</label>
      </node>
      <node id="16608">
        <label>arrow/array/builder_base.h</label>
        <link refid="builder__base_8h"/>
        <childnode refid="16592" relation="include">
        </childnode>
        <childnode refid="16568" relation="include">
        </childnode>
        <childnode refid="16580" relation="include">
        </childnode>
        <childnode refid="16597" relation="include">
        </childnode>
        <childnode refid="16561" relation="include">
        </childnode>
        <childnode refid="16570" relation="include">
        </childnode>
        <childnode refid="16571" relation="include">
        </childnode>
        <childnode refid="16564" relation="include">
        </childnode>
        <childnode refid="16609" relation="include">
        </childnode>
        <childnode refid="16579" relation="include">
        </childnode>
        <childnode refid="16575" relation="include">
        </childnode>
        <childnode refid="16589" relation="include">
        </childnode>
        <childnode refid="16573" relation="include">
        </childnode>
        <childnode refid="16605" relation="include">
        </childnode>
        <childnode refid="16574" relation="include">
        </childnode>
      </node>
      <node id="16613">
        <label>arrow/array/builder_decimal.h</label>
        <link refid="builder__decimal_8h"/>
        <childnode refid="16561" relation="include">
        </childnode>
        <childnode refid="16608" relation="include">
        </childnode>
        <childnode refid="16611" relation="include">
        </childnode>
      </node>
      <node id="16578">
        <label>new</label>
      </node>
      <node id="16571">
        <label>utility</label>
      </node>
      <node id="16601">
        <label>arrow/util/string_view.h</label>
        <link refid="string__view_8h"/>
        <childnode refid="16568" relation="include">
        </childnode>
        <childnode refid="16562" relation="include">
        </childnode>
        <childnode refid="16602" relation="include">
        </childnode>
      </node>
      <node id="16593">
        <label>array</label>
      </node>
      <node id="16622">
        <label>sstream</label>
      </node>
      <node id="16589">
        <label>arrow/type_traits.h</label>
        <link refid="type__traits_8h"/>
        <childnode refid="16561" relation="include">
        </childnode>
        <childnode refid="16562" relation="include">
        </childnode>
        <childnode refid="16570" relation="include">
        </childnode>
        <childnode refid="16564" relation="include">
        </childnode>
        <childnode refid="16584" relation="include">
        </childnode>
        <childnode refid="16590" relation="include">
        </childnode>
      </node>
      <node id="16620">
        <label>arrow/record_batch.h</label>
        <link refid="record__batch_8h"/>
        <childnode refid="16568" relation="include">
        </childnode>
        <childnode refid="16561" relation="include">
        </childnode>
        <childnode refid="16562" relation="include">
        </childnode>
        <childnode refid="16564" relation="include">
        </childnode>
        <childnode refid="16577" relation="include">
        </childnode>
        <childnode refid="16579" relation="include">
        </childnode>
        <childnode refid="16584" relation="include">
        </childnode>
        <childnode refid="16573" relation="include">
        </childnode>
        <childnode refid="16574" relation="include">
        </childnode>
      </node>
      <node id="16600">
        <label>arrow/io/type_fwd.h</label>
        <link refid="io_2type__fwd_8h"/>
      </node>
      <node id="16569">
        <label>iosfwd</label>
      </node>
      <node id="16566">
        <label>arrow/array.h</label>
        <link refid="array_8h"/>
        <childnode refid="16567" relation="include">
        </childnode>
        <childnode refid="16568" relation="include">
        </childnode>
        <childnode refid="16569" relation="include">
        </childnode>
        <childnode refid="16561" relation="include">
        </childnode>
        <childnode refid="16562" relation="include">
        </childnode>
        <childnode refid="16570" relation="include">
        </childnode>
        <childnode refid="16571" relation="include">
        </childnode>
        <childnode refid="16564" relation="include">
        </childnode>
        <childnode refid="16572" relation="include">
        </childnode>
        <childnode refid="16575" relation="include">
        </childnode>
        <childnode refid="16584" relation="include">
        </childnode>
        <childnode refid="16589" relation="include">
        </childnode>
        <childnode refid="16590" relation="include">
        </childnode>
        <childnode refid="16585" relation="include">
        </childnode>
        <childnode refid="16573" relation="include">
        </childnode>
        <childnode refid="16601" relation="include">
        </childnode>
        <childnode refid="16574" relation="include">
        </childnode>
      </node>
      <node id="16563">
        <label>unordered_map</label>
      </node>
      <node id="16587">
        <label>arrow/vendored/variant.hpp</label>
      </node>
      <node id="16577">
        <label>arrow/result.h</label>
        <link refid="result_8h"/>
        <childnode refid="16578" relation="include">
        </childnode>
        <childnode refid="16562" relation="include">
        </childnode>
        <childnode refid="16570" relation="include">
        </childnode>
        <childnode refid="16571" relation="include">
        </childnode>
        <childnode refid="16579" relation="include">
        </childnode>
        <childnode refid="16581" relation="include">
        </childnode>
      </node>
      <node id="16576">
        <label>climits</label>
      </node>
      <node id="16610">
        <label>arrow/util/ubsan.h</label>
        <link refid="ubsan_8h"/>
        <childnode refid="16580" relation="include">
        </childnode>
        <childnode refid="16561" relation="include">
        </childnode>
        <childnode refid="16570" relation="include">
        </childnode>
        <childnode refid="16573" relation="include">
        </childnode>
      </node>
      <node id="16625">
        <label>gandiva/visibility.h</label>
        <link refid="gandiva_2visibility_8h"/>
      </node>
      <node id="16575">
        <label>arrow/type.h</label>
        <link refid="type_8h"/>
        <childnode refid="16567" relation="include">
        </childnode>
        <childnode refid="16576" relation="include">
        </childnode>
        <childnode refid="16568" relation="include">
        </childnode>
        <childnode refid="16569" relation="include">
        </childnode>
        <childnode refid="16561" relation="include">
        </childnode>
        <childnode refid="16562" relation="include">
        </childnode>
        <childnode refid="16571" relation="include">
        </childnode>
        <childnode refid="16564" relation="include">
        </childnode>
        <childnode refid="16577" relation="include">
        </childnode>
        <childnode refid="16584" relation="include">
        </childnode>
        <childnode refid="16585" relation="include">
        </childnode>
        <childnode refid="16573" relation="include">
        </childnode>
        <childnode refid="16586" relation="include">
        </childnode>
        <childnode refid="16574" relation="include">
        </childnode>
        <childnode refid="16588" relation="include">
        </childnode>
      </node>
      <node id="16621">
        <label>gandiva/function_signature.h</label>
        <link refid="function__signature_8h"/>
        <childnode refid="16622" relation="include">
        </childnode>
        <childnode refid="16562" relation="include">
        </childnode>
        <childnode refid="16564" relation="include">
        </childnode>
        <childnode refid="16565" relation="include">
        </childnode>
        <childnode refid="16623" relation="include">
        </childnode>
        <childnode refid="16625" relation="include">
        </childnode>
      </node>
      <node id="16570">
        <label>type_traits</label>
      </node>
      <node id="16626">
        <label>gandiva/gandiva_aliases.h</label>
        <link refid="gandiva__aliases_8h"/>
        <childnode refid="16561" relation="include">
        </childnode>
        <childnode refid="16562" relation="include">
        </childnode>
        <childnode refid="16627" relation="include">
        </childnode>
        <childnode refid="16564" relation="include">
        </childnode>
      </node>
      <node id="16592">
        <label>algorithm</label>
      </node>
      <node id="16580">
        <label>cstring</label>
      </node>
      <node id="16582">
        <label>arrow/util/string_builder.h</label>
        <link refid="string__builder_8h"/>
        <childnode refid="16561" relation="include">
        </childnode>
        <childnode refid="16583" relation="include">
        </childnode>
        <childnode refid="16562" relation="include">
        </childnode>
        <childnode refid="16571" relation="include">
        </childnode>
        <childnode refid="16574" relation="include">
        </childnode>
      </node>
      <node id="16561">
        <label>memory</label>
      </node>
      <node id="16618">
        <label>arrow/array/builder_union.h</label>
        <link refid="builder__union_8h"/>
        <childnode refid="16561" relation="include">
        </childnode>
        <childnode refid="16562" relation="include">
        </childnode>
        <childnode refid="16571" relation="include">
        </childnode>
        <childnode refid="16564" relation="include">
        </childnode>
        <childnode refid="16566" relation="include">
        </childnode>
        <childnode refid="16608" relation="include">
        </childnode>
        <childnode refid="16609" relation="include">
        </childnode>
      </node>
      <node id="16573">
        <label>arrow/util/macros.h</label>
        <link refid="macros_8h"/>
        <childnode refid="16568" relation="include">
        </childnode>
      </node>
      <node id="16605">
        <label>arrow/util/type_traits.h</label>
        <link refid="util_2type__traits_8h"/>
        <childnode refid="16570" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="16632">
        <label>/arrow/cpp/src/gandiva/llvm_generator.h</label>
        <link refid="llvm__generator_8h"/>
      </node>
      <node id="16629">
        <label>/arrow/cpp/src/gandiva/function_registry_common.h</label>
        <link refid="function__registry__common_8h"/>
        <childnode refid="16630" relation="include">
        </childnode>
      </node>
      <node id="16630">
        <label>/arrow/cpp/src/gandiva/function_registry.h</label>
        <link refid="function__registry_8h"/>
        <childnode refid="16631" relation="include">
        </childnode>
        <childnode refid="16632" relation="include">
        </childnode>
      </node>
      <node id="16631">
        <label>/arrow/cpp/src/gandiva/expr_validator.h</label>
        <link refid="expr__validator_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structgandiva_1_1_key_hash" prot="public">gandiva::KeyHash</innerclass>
    <innerclass refid="structgandiva_1_1_key_equals" prot="public">gandiva::KeyEquals</innerclass>
    <innernamespace refid="namespacegandiva">gandiva</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="function__registry__common_8h_1a40d4d569cd693e179f19650390af0b0a" prot="public" static="no">
        <name>BINARY_SYMMETRIC_SAFE_NULL_IF_NULL</name>
        <param><defname>NAME</defname></param>
        <param><defname>ALIASES</defname></param>
        <param><defname>TYPE</defname></param>
        <initializer>NativeFunction(#NAME, std::vector&lt;std::string&gt; ALIASES,                   \
                 DataTypeVector{TYPE(), TYPE()}, TYPE(), kResultNullIfNull, \
                 <ref refid="macros_8h_1a471790f72255584c4668d5bb38ec3569" kindref="member">ARROW_STRINGIFY</ref>(NAME##_##TYPE##_##TYPE))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/function_registry_common.h" line="79" column="9" bodyfile="/arrow/cpp/src/gandiva/function_registry_common.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="function__registry__common_8h_1a81328fbc6981b04f6eb503291957b8a7" prot="public" static="no">
        <name>BINARY_UNSAFE_NULL_IF_NULL</name>
        <param><defname>NAME</defname></param>
        <param><defname>ALIASES</defname></param>
        <param><defname>IN_TYPE</defname></param>
        <param><defname>OUT_TYPE</defname></param>
        <initializer>NativeFunction(#NAME, std::vector&lt;std::string&gt; ALIASES,                             \
                 DataTypeVector{IN_TYPE(), IN_TYPE()}, OUT_TYPE(), kResultNullIfNull, \
                 <ref refid="macros_8h_1a471790f72255584c4668d5bb38ec3569" kindref="member">ARROW_STRINGIFY</ref>(NAME##_##IN_TYPE##_##IN_TYPE),                       \
                 NativeFunction::kNeedsContext | NativeFunction::kCanReturnErrors)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/function_registry_common.h" line="90" column="9" bodyfile="/arrow/cpp/src/gandiva/function_registry_common.h" bodystart="90" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="function__registry__common_8h_1a3097185ce4bc8d07d6be625c67fe7ad7" prot="public" static="no">
        <name>BINARY_SYMMETRIC_UNSAFE_NULL_IF_NULL</name>
        <param><defname>NAME</defname></param>
        <param><defname>ALIASES</defname></param>
        <param><defname>TYPE</defname></param>
        <initializer><ref refid="function__registry__common_8h_1a81328fbc6981b04f6eb503291957b8a7" kindref="member">BINARY_UNSAFE_NULL_IF_NULL</ref>(NAME, ALIASES, TYPE, TYPE)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/function_registry_common.h" line="96" column="9" bodyfile="/arrow/cpp/src/gandiva/function_registry_common.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="function__registry__common_8h_1a32d2f3e09fd225e27a26f83634c11886" prot="public" static="no">
        <name>BINARY_GENERIC_SAFE_NULL_IF_NULL</name>
        <param><defname>NAME</defname></param>
        <param><defname>ALIASES</defname></param>
        <param><defname>IN_TYPE1</defname></param>
        <param><defname>IN_TYPE2</defname></param>
        <param><defname>OUT_TYPE</defname></param>
        <initializer>NativeFunction(#NAME, std::vector&lt;std::string&gt; ALIASES,                               \
                 DataTypeVector{IN_TYPE1(), IN_TYPE2()}, OUT_TYPE(), kResultNullIfNull, \
                 <ref refid="macros_8h_1a471790f72255584c4668d5bb38ec3569" kindref="member">ARROW_STRINGIFY</ref>(NAME##_##IN_TYPE1##_##IN_TYPE2))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/function_registry_common.h" line="104" column="9" bodyfile="/arrow/cpp/src/gandiva/function_registry_common.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="function__registry__common_8h_1aa0faea7344248f4d0640b8492cfbabff" prot="public" static="no">
        <name>BINARY_RELATIONAL_SAFE_NULL_IF_NULL</name>
        <param><defname>NAME</defname></param>
        <param><defname>ALIASES</defname></param>
        <param><defname>TYPE</defname></param>
        <initializer>NativeFunction(#NAME, std::vector&lt;std::string&gt; ALIASES,                      \
                 DataTypeVector{TYPE(), TYPE()}, boolean(), kResultNullIfNull, \
                 <ref refid="macros_8h_1a471790f72255584c4668d5bb38ec3569" kindref="member">ARROW_STRINGIFY</ref>(NAME##_##TYPE##_##TYPE))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/function_registry_common.h" line="116" column="9" bodyfile="/arrow/cpp/src/gandiva/function_registry_common.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="function__registry__common_8h_1a8651b52188eb5d03708ea3a72502e264" prot="public" static="no">
        <name>UNARY_SAFE_NULL_IF_NULL</name>
        <param><defname>NAME</defname></param>
        <param><defname>ALIASES</defname></param>
        <param><defname>IN_TYPE</defname></param>
        <param><defname>OUT_TYPE</defname></param>
        <initializer>NativeFunction(#NAME, std::vector&lt;std::string&gt; ALIASES, DataTypeVector{IN_TYPE()}, \
                 OUT_TYPE(), kResultNullIfNull, <ref refid="macros_8h_1a471790f72255584c4668d5bb38ec3569" kindref="member">ARROW_STRINGIFY</ref>(NAME##_##IN_TYPE))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/function_registry_common.h" line="125" column="9" bodyfile="/arrow/cpp/src/gandiva/function_registry_common.h" bodystart="125" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="function__registry__common_8h_1a5bcbce45c9fa712c563e0d8a14b8325d" prot="public" static="no">
        <name>UNARY_SAFE_NULL_NEVER_BOOL</name>
        <param><defname>NAME</defname></param>
        <param><defname>ALIASES</defname></param>
        <param><defname>TYPE</defname></param>
        <initializer>NativeFunction(#NAME, std::vector&lt;std::string&gt; ALIASES, DataTypeVector{TYPE()}, \
                 boolean(), kResultNullNever, <ref refid="macros_8h_1a471790f72255584c4668d5bb38ec3569" kindref="member">ARROW_STRINGIFY</ref>(NAME##_##TYPE))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/function_registry_common.h" line="133" column="9" bodyfile="/arrow/cpp/src/gandiva/function_registry_common.h" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="function__registry__common_8h_1a936665e7b38629c88e00da120770d757" prot="public" static="no">
        <name>UNARY_UNSAFE_NULL_IF_NULL</name>
        <param><defname>NAME</defname></param>
        <param><defname>ALIASES</defname></param>
        <param><defname>IN_TYPE</defname></param>
        <param><defname>OUT_TYPE</defname></param>
        <initializer>NativeFunction(#NAME, std::vector&lt;std::string&gt; ALIASES, DataTypeVector{IN_TYPE()}, \
                 OUT_TYPE(), kResultNullIfNull, <ref refid="macros_8h_1a471790f72255584c4668d5bb38ec3569" kindref="member">ARROW_STRINGIFY</ref>(NAME##_##IN_TYPE),   \
                 NativeFunction::kNeedsContext | NativeFunction::kCanReturnErrors)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/function_registry_common.h" line="141" column="9" bodyfile="/arrow/cpp/src/gandiva/function_registry_common.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="function__registry__common_8h_1aa487ba3b28686378ab4dc7b0e500e70c" prot="public" static="no">
        <name>BINARY_SAFE_NULL_NEVER_BOOL</name>
        <param><defname>NAME</defname></param>
        <param><defname>ALIASES</defname></param>
        <param><defname>TYPE</defname></param>
        <initializer>NativeFunction(#NAME, std::vector&lt;std::string&gt; ALIASES,                     \
                 DataTypeVector{TYPE(), TYPE()}, boolean(), kResultNullNever, \
                 <ref refid="macros_8h_1a471790f72255584c4668d5bb38ec3569" kindref="member">ARROW_STRINGIFY</ref>(NAME##_##TYPE##_##TYPE))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/function_registry_common.h" line="151" column="9" bodyfile="/arrow/cpp/src/gandiva/function_registry_common.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="function__registry__common_8h_1ac6b9c530d870467bcd87fdb4c3455eb2" prot="public" static="no">
        <name>EXTRACT_SAFE_NULL_IF_NULL</name>
        <param><defname>NAME</defname></param>
        <param><defname>ALIASES</defname></param>
        <param><defname>TYPE</defname></param>
        <initializer>NativeFunction(#NAME, std::vector&lt;std::string&gt; ALIASES, DataTypeVector{TYPE()}, \
                 int64(), kResultNullIfNull, <ref refid="macros_8h_1a471790f72255584c4668d5bb38ec3569" kindref="member">ARROW_STRINGIFY</ref>(NAME##_##TYPE))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/function_registry_common.h" line="160" column="9" bodyfile="/arrow/cpp/src/gandiva/function_registry_common.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="function__registry__common_8h_1a69d46a4f35ead5e8cfb3a8645e44bb69" prot="public" static="no">
        <name>HASH32_SAFE_NULL_NEVER</name>
        <param><defname>NAME</defname></param>
        <param><defname>ALIASES</defname></param>
        <param><defname>TYPE</defname></param>
        <initializer>NativeFunction(#NAME, std::vector&lt;std::string&gt; ALIASES, DataTypeVector{TYPE()}, \
                 int32(), kResultNullNever, <ref refid="macros_8h_1a471790f72255584c4668d5bb38ec3569" kindref="member">ARROW_STRINGIFY</ref>(NAME##_##TYPE))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/function_registry_common.h" line="168" column="9" bodyfile="/arrow/cpp/src/gandiva/function_registry_common.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="function__registry__common_8h_1aac6ebe8030e62fa16539017767a75195" prot="public" static="no">
        <name>HASH64_SAFE_NULL_NEVER</name>
        <param><defname>NAME</defname></param>
        <param><defname>ALIASES</defname></param>
        <param><defname>TYPE</defname></param>
        <initializer>NativeFunction(#NAME, std::vector&lt;std::string&gt; ALIASES, DataTypeVector{TYPE()}, \
                 int64(), kResultNullNever, <ref refid="macros_8h_1a471790f72255584c4668d5bb38ec3569" kindref="member">ARROW_STRINGIFY</ref>(NAME##_##TYPE))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/function_registry_common.h" line="176" column="9" bodyfile="/arrow/cpp/src/gandiva/function_registry_common.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="function__registry__common_8h_1a4517099c892fa7960551decd05534181" prot="public" static="no">
        <name>HASH32_SEED_SAFE_NULL_NEVER</name>
        <param><defname>NAME</defname></param>
        <param><defname>ALIASES</defname></param>
        <param><defname>TYPE</defname></param>
        <initializer>NativeFunction(#NAME, std::vector&lt;std::string&gt; ALIASES,                    \
                 DataTypeVector{TYPE(), int32()}, int32(), kResultNullNever, \
                 <ref refid="macros_8h_1a471790f72255584c4668d5bb38ec3569" kindref="member">ARROW_STRINGIFY</ref>(NAME##WithSeed_##TYPE))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/function_registry_common.h" line="184" column="9" bodyfile="/arrow/cpp/src/gandiva/function_registry_common.h" bodystart="184" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="function__registry__common_8h_1aa294151d2c12a396512ca32cc6cf5103" prot="public" static="no">
        <name>HASH64_SEED_SAFE_NULL_NEVER</name>
        <param><defname>NAME</defname></param>
        <param><defname>ALIASES</defname></param>
        <param><defname>TYPE</defname></param>
        <initializer>NativeFunction(#NAME, std::vector&lt;std::string&gt; ALIASES,                    \
                 DataTypeVector{TYPE(), int64()}, int64(), kResultNullNever, \
                 <ref refid="macros_8h_1a471790f72255584c4668d5bb38ec3569" kindref="member">ARROW_STRINGIFY</ref>(NAME##WithSeed_##TYPE))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/function_registry_common.h" line="193" column="9" bodyfile="/arrow/cpp/src/gandiva/function_registry_common.h" bodystart="193" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="function__registry__common_8h_1af87d2669fe3e73b653ba798e1ba6250b" prot="public" static="no">
        <name>NUMERIC_TYPES</name>
        <param><defname>INNER</defname></param>
        <param><defname>NAME</defname></param>
        <param><defname>ALIASES</defname></param>
        <initializer>INNER(NAME, ALIASES, int8), INNER(NAME, ALIASES, int16), INNER(NAME, ALIASES, int32), \
      INNER(NAME, ALIASES, int64), INNER(NAME, ALIASES, uint8),                         \
      INNER(NAME, ALIASES, uint16), INNER(NAME, ALIASES, uint32),                       \
      INNER(NAME, ALIASES, uint64), INNER(NAME, ALIASES, float32),                      \
      INNER(NAME, ALIASES, float64), INNER(NAME, ALIASES, decimal128)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/function_registry_common.h" line="199" column="9" bodyfile="/arrow/cpp/src/gandiva/function_registry_common.h" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="function__registry__common_8h_1a03503f3f8299d2f75a45779e37fbb2be" prot="public" static="no">
        <name>NUMERIC_DATE_TYPES</name>
        <param><defname>INNER</defname></param>
        <param><defname>NAME</defname></param>
        <param><defname>ALIASES</defname></param>
        <initializer><ref refid="function__registry__common_8h_1af87d2669fe3e73b653ba798e1ba6250b" kindref="member">NUMERIC_TYPES</ref>(INNER, NAME, ALIASES), <ref refid="function__registry__common_8h_1aa8589bfad25f23e35b261cb08c325f32" kindref="member">DATE_TYPES</ref>(INNER, NAME, ALIASES), \
      <ref refid="function__registry__common_8h_1a69964534a6fc0482642b71148138b013" kindref="member">TIME_TYPES</ref>(INNER, NAME, ALIASES), INNER(NAME, ALIASES, date32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/function_registry_common.h" line="207" column="9" bodyfile="/arrow/cpp/src/gandiva/function_registry_common.h" bodystart="207" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="function__registry__common_8h_1aa8589bfad25f23e35b261cb08c325f32" prot="public" static="no">
        <name>DATE_TYPES</name>
        <param><defname>INNER</defname></param>
        <param><defname>NAME</defname></param>
        <param><defname>ALIASES</defname></param>
        <initializer>INNER(NAME, ALIASES, date64), INNER(NAME, ALIASES, timestamp)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/function_registry_common.h" line="212" column="9" bodyfile="/arrow/cpp/src/gandiva/function_registry_common.h" bodystart="212" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="function__registry__common_8h_1a69964534a6fc0482642b71148138b013" prot="public" static="no">
        <name>TIME_TYPES</name>
        <param><defname>INNER</defname></param>
        <param><defname>NAME</defname></param>
        <param><defname>ALIASES</defname></param>
        <initializer>INNER(NAME, ALIASES, time32)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/function_registry_common.h" line="216" column="9" bodyfile="/arrow/cpp/src/gandiva/function_registry_common.h" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="function__registry__common_8h_1ae2944a45f6c68147abb9f2ac5437ef78" prot="public" static="no">
        <name>VAR_LEN_TYPES</name>
        <param><defname>INNER</defname></param>
        <param><defname>NAME</defname></param>
        <param><defname>ALIASES</defname></param>
        <initializer>INNER(NAME, ALIASES, utf8), INNER(NAME, ALIASES, binary)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/function_registry_common.h" line="219" column="9" bodyfile="/arrow/cpp/src/gandiva/function_registry_common.h" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="function__registry__common_8h_1af1887e3c62cd3ce3e3c289b4113a7acd" prot="public" static="no">
        <name>NUMERIC_BOOL_DATE_TYPES</name>
        <param><defname>INNER</defname></param>
        <param><defname>NAME</defname></param>
        <param><defname>ALIASES</defname></param>
        <initializer><ref refid="function__registry__common_8h_1a03503f3f8299d2f75a45779e37fbb2be" kindref="member">NUMERIC_DATE_TYPES</ref>(INNER, NAME, ALIASES), INNER(NAME, ALIASES, boolean)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/function_registry_common.h" line="223" column="9" bodyfile="/arrow/cpp/src/gandiva/function_registry_common.h" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="function__registry__common_8h_1a77c5a28caf5b94e9aa2f9570e1be57e0" prot="public" static="no">
        <name>NUMERIC_BOOL_DATE_VAR_LEN_TYPES</name>
        <param><defname>INNER</defname></param>
        <param><defname>NAME</defname></param>
        <param><defname>ALIASES</defname></param>
        <initializer><ref refid="function__registry__common_8h_1af1887e3c62cd3ce3e3c289b4113a7acd" kindref="member">NUMERIC_BOOL_DATE_TYPES</ref>(INNER, NAME, ALIASES), <ref refid="function__registry__common_8h_1ae2944a45f6c68147abb9f2ac5437ef78" kindref="member">VAR_LEN_TYPES</ref>(INNER, NAME, ALIASES)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/function_registry_common.h" line="227" column="9" bodyfile="/arrow/cpp/src/gandiva/function_registry_common.h" bodystart="227" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="arrow_8h" kindref="compound">gandiva/arrow.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="function__signature_8h" kindref="compound">gandiva/function_signature.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="gandiva__aliases_8h" kindref="compound">gandiva/gandiva_aliases.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="native__function_8h" kindref="compound">gandiva/native_function.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>is<sp/>a<sp/>private<sp/>file,<sp/>intended<sp/>for<sp/>internal<sp/>use<sp/>by<sp/>gandiva<sp/>&amp;<sp/>must<sp/>not<sp/>be<sp/>included</highlight></codeline>
<codeline lineno="31"><highlight class="comment"><sp/>*<sp/>directly.</highlight></codeline>
<codeline lineno="32"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacegandiva" kindref="compound">gandiva</ref><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="group__type-factories_1ga66c3979f26a439e78d048bbac84a9232" kindref="member">arrow::binary</ref>;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="group__type-factories_1ga1e585e8f1c25a9751ac9381a274df057" kindref="member">arrow::boolean</ref>;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="group__type-factories_1gac15fddc26c629cd5a2cb67f432739e8e" kindref="member">arrow::date32</ref>;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="group__type-factories_1ga540dd093466c265aa411a65f29e950b2" kindref="member">arrow::date64</ref>;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="group__type-factories_1ga81643b6c32e9c11375084c074567cba0" kindref="member">arrow::day_time_interval</ref>;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="group__type-factories_1ga48fca9d26feda61c8255ec3c44a2078c" kindref="member">arrow::float32</ref>;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="group__type-factories_1gab6f514320a9b037ab161fa97db73b970" kindref="member">arrow::float64</ref>;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="group__type-factories_1ga034c5c703e15039fe76af412d349734d" kindref="member">arrow::int16</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="group__type-factories_1ga86f6bfe394347f77befa2143297ad541" kindref="member">arrow::int32</ref>;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="group__type-factories_1ga733b16be653069b8d926529662e34e79" kindref="member">arrow::int64</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="group__type-factories_1ga9c09bf26bc03f0fb0c84a0277215dd67" kindref="member">arrow::int8</ref>;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="group__type-factories_1ga9f1e44bc2ab9b465b6e7b601eb48f0a0" kindref="member">arrow::uint16</ref>;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="group__type-factories_1gae80e510cfb2931ac18c73cba0be6d894" kindref="member">arrow::uint32</ref>;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="group__type-factories_1gae548d03275f4afaa97a269774ce6930c" kindref="member">arrow::uint64</ref>;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="group__type-factories_1ga4891a423be213550cc24e8ebe830673f" kindref="member">arrow::uint8</ref>;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="group__type-factories_1ga63178820a26f6ecb894ad35963ca981a" kindref="member">arrow::utf8</ref>;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="namespacegandiva_1a66f394b412c5f760e90c5b496abf3e66" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="namespacegandiva_1a3e3446d98cf1dcf281b0d3f6c16a65d3" kindref="member">DataTypePtr</ref><sp/><ref refid="namespacegandiva_1a66f394b412c5f760e90c5b496abf3e66" kindref="member">time32</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__type-factories_1gae2e76c6504af1c30799b5b4d7e737305" kindref="member">arrow::time32</ref>(<ref refid="structarrow_1_1_time_unit_1a561ef51c3755bd873f8f86f5bc4ec1ffadc3335445f7fa1b26f9c78754a1f217b" kindref="member">arrow::TimeUnit::MILLI</ref>);<sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="namespacegandiva_1a995e4ccc7e74e4be22910f8d9e64e681" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="namespacegandiva_1a3e3446d98cf1dcf281b0d3f6c16a65d3" kindref="member">DataTypePtr</ref><sp/><ref refid="namespacegandiva_1a995e4ccc7e74e4be22910f8d9e64e681" kindref="member">time64</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__type-factories_1ga7f6f30b7153111da33e446965b5531e3" kindref="member">arrow::time64</ref>(<ref refid="structarrow_1_1_time_unit_1a561ef51c3755bd873f8f86f5bc4ec1ffaf8ce7e9dc4001c956488dd701d567cb1" kindref="member">arrow::TimeUnit::MICRO</ref>);<sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="namespacegandiva_1aa8f66ca2bd8586490ad2acecb0a1e8a7" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="namespacegandiva_1a3e3446d98cf1dcf281b0d3f6c16a65d3" kindref="member">DataTypePtr</ref><sp/><ref refid="namespacegandiva_1aa8f66ca2bd8586490ad2acecb0a1e8a7" kindref="member">timestamp</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__type-factories_1ga862528838ca7d12e13c09edc02bb6151" kindref="member">arrow::timestamp</ref>(<ref refid="structarrow_1_1_time_unit_1a561ef51c3755bd873f8f86f5bc4ec1ffadc3335445f7fa1b26f9c78754a1f217b" kindref="member">arrow::TimeUnit::MILLI</ref>);<sp/>}</highlight></codeline>
<codeline lineno="57" refid="namespacegandiva_1a51d19a589f3deebae6238c3fce6dee4d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="namespacegandiva_1a3e3446d98cf1dcf281b0d3f6c16a65d3" kindref="member">DataTypePtr</ref><sp/><ref refid="namespacegandiva_1a51d19a589f3deebae6238c3fce6dee4d" kindref="member">decimal128</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__type-factories_1ga3390964f23814ab08c9604158f727883" kindref="member">arrow::decimal</ref>(38,<sp/>0);<sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="structgandiva_1_1_key_hash" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgandiva_1_1_key_hash" kindref="compound">KeyHash</ref><sp/>{</highlight></codeline>
<codeline lineno="60" refid="structgandiva_1_1_key_hash_1a1f404b535e18d976b45a794d8c87a31c" refkind="member"><highlight class="normal"><sp/><sp/>std::size_t<sp/><ref refid="structgandiva_1_1_key_hash_1a1f404b535e18d976b45a794d8c87a31c" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgandiva_1_1_function_signature" kindref="compound">FunctionSignature</ref>*<sp/>k)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>k-&gt;<ref refid="classgandiva_1_1_function_signature_1a4cb548c0b209a265773902dd1e4c6a06" kindref="member">Hash</ref>();<sp/>}</highlight></codeline>
<codeline lineno="61"><highlight class="normal">};</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="structgandiva_1_1_key_equals" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structgandiva_1_1_key_equals" kindref="compound">KeyEquals</ref><sp/>{</highlight></codeline>
<codeline lineno="64" refid="structgandiva_1_1_key_equals_1a36d8225c55164df3d105949fb9958db9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structgandiva_1_1_key_equals_1a36d8225c55164df3d105949fb9958db9" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgandiva_1_1_function_signature" kindref="compound">FunctionSignature</ref>*<sp/>s1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgandiva_1_1_function_signature" kindref="compound">FunctionSignature</ref>*<sp/>s2)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*s1<sp/>==<sp/>*s2;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal">};</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::unordered_map&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgandiva_1_1_function_signature" kindref="compound">FunctionSignature</ref>*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgandiva_1_1_native_function" kindref="compound">NativeFunction</ref>*,<sp/><ref refid="structgandiva_1_1_key_hash" kindref="compound">KeyHash</ref>,</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structgandiva_1_1_key_equals" kindref="compound">KeyEquals</ref>&gt;</highlight></codeline>
<codeline lineno="71" refid="namespacegandiva_1a1455aaf2559f8976473905272f0d11f0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="namespacegandiva_1a1455aaf2559f8976473905272f0d11f0" kindref="member">SignatureMap</ref>;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Binary<sp/>functions<sp/>that<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>have<sp/>the<sp/>same<sp/>input<sp/>type<sp/>for<sp/>both<sp/>params</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>output<sp/>type<sp/>is<sp/>same<sp/>as<sp/>the<sp/>input<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>NULL<sp/>handling<sp/>is<sp/>of<sp/>type<sp/>NULL_IF_NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>pre-compiled<sp/>fn<sp/>name<sp/>includes<sp/>the<sp/>base<sp/>name<sp/>&amp;<sp/>input<sp/>type<sp/>names.<sp/>eg.<sp/>add_int32_int32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="function__registry__common_8h_1a40d4d569cd693e179f19650390af0b0a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BINARY_SYMMETRIC_SAFE_NULL_IF_NULL(NAME,<sp/>ALIASES,<sp/>TYPE)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"><sp/><sp/>NativeFunction(#NAME,<sp/>std::vector&lt;std::string&gt;<sp/>ALIASES,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="81"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataTypeVector{TYPE(),<sp/>TYPE()},<sp/>TYPE(),<sp/>kResultNullIfNull,<sp/>\</highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARROW_STRINGIFY(NAME##_##TYPE##_##TYPE))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Binary<sp/>functions<sp/>that<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>have<sp/>the<sp/>same<sp/>input<sp/>type<sp/>for<sp/>both<sp/>params</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>NULL<sp/>handling<sp/>is<sp/>of<sp/>type<sp/>NULL_IINTERNAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>can<sp/>return<sp/>error.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>pre-compiled<sp/>fn<sp/>name<sp/>includes<sp/>the<sp/>base<sp/>name<sp/>&amp;<sp/>input<sp/>type<sp/>names.<sp/>eg.<sp/>add_int32_int32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="function__registry__common_8h_1a81328fbc6981b04f6eb503291957b8a7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BINARY_UNSAFE_NULL_IF_NULL(NAME,<sp/>ALIASES,<sp/>IN_TYPE,<sp/>OUT_TYPE)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="91"><highlight class="preprocessor"><sp/><sp/>NativeFunction(#NAME,<sp/>std::vector&lt;std::string&gt;<sp/>ALIASES,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="92"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataTypeVector{IN_TYPE(),<sp/>IN_TYPE()},<sp/>OUT_TYPE(),<sp/>kResultNullIfNull,<sp/>\</highlight></codeline>
<codeline lineno="93"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARROW_STRINGIFY(NAME##_##IN_TYPE##_##IN_TYPE),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="94"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NativeFunction::kNeedsContext<sp/>|<sp/>NativeFunction::kCanReturnErrors)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="function__registry__common_8h_1a3097185ce4bc8d07d6be625c67fe7ad7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BINARY_SYMMETRIC_UNSAFE_NULL_IF_NULL(NAME,<sp/>ALIASES,<sp/>TYPE)<sp/>\</highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor"><sp/><sp/>BINARY_UNSAFE_NULL_IF_NULL(NAME,<sp/>ALIASES,<sp/>TYPE,<sp/>TYPE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Binary<sp/>functions<sp/>that<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>have<sp/>different<sp/>input<sp/>types,<sp/>or<sp/>output<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>NULL<sp/>handling<sp/>is<sp/>of<sp/>type<sp/>NULL_IF_NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>pre-compiled<sp/>fn<sp/>name<sp/>includes<sp/>the<sp/>base<sp/>name<sp/>&amp;<sp/>input<sp/>type<sp/>names.<sp/>eg.<sp/>mod_int64_int32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="function__registry__common_8h_1a32d2f3e09fd225e27a26f83634c11886" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BINARY_GENERIC_SAFE_NULL_IF_NULL(NAME,<sp/>ALIASES,<sp/>IN_TYPE1,<sp/>IN_TYPE2,<sp/>OUT_TYPE)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="105"><highlight class="preprocessor"><sp/><sp/>NativeFunction(#NAME,<sp/>std::vector&lt;std::string&gt;<sp/>ALIASES,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataTypeVector{IN_TYPE1(),<sp/>IN_TYPE2()},<sp/>OUT_TYPE(),<sp/>kResultNullIfNull,<sp/>\</highlight></codeline>
<codeline lineno="107"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARROW_STRINGIFY(NAME##_##IN_TYPE1##_##IN_TYPE2))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Binary<sp/>functions<sp/>that<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>have<sp/>the<sp/>same<sp/>input<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>output<sp/>type<sp/>is<sp/>boolean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>NULL<sp/>handling<sp/>is<sp/>of<sp/>type<sp/>NULL_IF_NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>pre-compiled<sp/>fn<sp/>name<sp/>includes<sp/>the<sp/>base<sp/>name<sp/>&amp;<sp/>input<sp/>type<sp/>names.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">//<sp/>eg.<sp/>equal_int32_int32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="function__registry__common_8h_1aa0faea7344248f4d0640b8492cfbabff" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BINARY_RELATIONAL_SAFE_NULL_IF_NULL(NAME,<sp/>ALIASES,<sp/>TYPE)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="117"><highlight class="preprocessor"><sp/><sp/>NativeFunction(#NAME,<sp/>std::vector&lt;std::string&gt;<sp/>ALIASES,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="118"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataTypeVector{TYPE(),<sp/>TYPE()},<sp/>boolean(),<sp/>kResultNullIfNull,<sp/>\</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARROW_STRINGIFY(NAME##_##TYPE##_##TYPE))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unary<sp/>functions<sp/>that<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>NULL<sp/>handling<sp/>is<sp/>of<sp/>type<sp/>NULL_IF_NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>pre-compiled<sp/>fn<sp/>name<sp/>includes<sp/>the<sp/>base<sp/>name<sp/>&amp;<sp/>input<sp/>type<sp/>name.<sp/>eg.<sp/>castFloat_int32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="function__registry__common_8h_1a8651b52188eb5d03708ea3a72502e264" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UNARY_SAFE_NULL_IF_NULL(NAME,<sp/>ALIASES,<sp/>IN_TYPE,<sp/>OUT_TYPE)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="126"><highlight class="preprocessor"><sp/><sp/>NativeFunction(#NAME,<sp/>std::vector&lt;std::string&gt;<sp/>ALIASES,<sp/>DataTypeVector{IN_TYPE()},<sp/>\</highlight></codeline>
<codeline lineno="127"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OUT_TYPE(),<sp/>kResultNullIfNull,<sp/>ARROW_STRINGIFY(NAME##_##IN_TYPE))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unary<sp/>functions<sp/>that<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>NULL<sp/>handling<sp/>is<sp/>of<sp/>type<sp/>NULL_NEVER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>pre-compiled<sp/>fn<sp/>name<sp/>includes<sp/>the<sp/>base<sp/>name<sp/>&amp;<sp/>input<sp/>type<sp/>name.<sp/>eg.<sp/>isnull_int32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="function__registry__common_8h_1a5bcbce45c9fa712c563e0d8a14b8325d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UNARY_SAFE_NULL_NEVER_BOOL(NAME,<sp/>ALIASES,<sp/>TYPE)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="134"><highlight class="preprocessor"><sp/><sp/>NativeFunction(#NAME,<sp/>std::vector&lt;std::string&gt;<sp/>ALIASES,<sp/>DataTypeVector{TYPE()},<sp/>\</highlight></codeline>
<codeline lineno="135"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>boolean(),<sp/>kResultNullNever,<sp/>ARROW_STRINGIFY(NAME##_##TYPE))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unary<sp/>functions<sp/>that<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>NULL<sp/>handling<sp/>is<sp/>of<sp/>type<sp/>NULL_INTERNAL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>pre-compiled<sp/>fn<sp/>name<sp/>includes<sp/>the<sp/>base<sp/>name<sp/>&amp;<sp/>input<sp/>type<sp/>name.<sp/>eg.<sp/>castFloat_int32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141" refid="function__registry__common_8h_1a936665e7b38629c88e00da120770d757" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>UNARY_UNSAFE_NULL_IF_NULL(NAME,<sp/>ALIASES,<sp/>IN_TYPE,<sp/>OUT_TYPE)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="142"><highlight class="preprocessor"><sp/><sp/>NativeFunction(#NAME,<sp/>std::vector&lt;std::string&gt;<sp/>ALIASES,<sp/>DataTypeVector{IN_TYPE()},<sp/>\</highlight></codeline>
<codeline lineno="143"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OUT_TYPE(),<sp/>kResultNullIfNull,<sp/>ARROW_STRINGIFY(NAME##_##IN_TYPE),<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="144"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NativeFunction::kNeedsContext<sp/>|<sp/>NativeFunction::kCanReturnErrors)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Binary<sp/>functions<sp/>that<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>NULL<sp/>handling<sp/>is<sp/>of<sp/>type<sp/>NULL_NEVER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>pre-compiled<sp/>fn<sp/>name<sp/>includes<sp/>the<sp/>base<sp/>name<sp/>&amp;<sp/>input<sp/>type<sp/>names,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="comment">//<sp/>eg.<sp/>is_distinct_from_int32_int32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151" refid="function__registry__common_8h_1aa487ba3b28686378ab4dc7b0e500e70c" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>BINARY_SAFE_NULL_NEVER_BOOL(NAME,<sp/>ALIASES,<sp/>TYPE)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="152"><highlight class="preprocessor"><sp/><sp/>NativeFunction(#NAME,<sp/>std::vector&lt;std::string&gt;<sp/>ALIASES,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="153"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataTypeVector{TYPE(),<sp/>TYPE()},<sp/>boolean(),<sp/>kResultNullNever,<sp/>\</highlight></codeline>
<codeline lineno="154"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARROW_STRINGIFY(NAME##_##TYPE##_##TYPE))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Extract<sp/>functions<sp/>(used<sp/>with<sp/>data/time<sp/>types)<sp/>that<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>NULL<sp/>handling<sp/>is<sp/>of<sp/>type<sp/>NULL_IF_NULL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>pre-compiled<sp/>fn<sp/>name<sp/>includes<sp/>the<sp/>base<sp/>name<sp/>&amp;<sp/>input<sp/>type<sp/>name.<sp/>eg.<sp/>extractYear_date</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160" refid="function__registry__common_8h_1ac6b9c530d870467bcd87fdb4c3455eb2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>EXTRACT_SAFE_NULL_IF_NULL(NAME,<sp/>ALIASES,<sp/>TYPE)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="161"><highlight class="preprocessor"><sp/><sp/>NativeFunction(#NAME,<sp/>std::vector&lt;std::string&gt;<sp/>ALIASES,<sp/>DataTypeVector{TYPE()},<sp/>\</highlight></codeline>
<codeline lineno="162"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64(),<sp/>kResultNullIfNull,<sp/>ARROW_STRINGIFY(NAME##_##TYPE))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Hash32<sp/>functions<sp/>that<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>NULL<sp/>handling<sp/>is<sp/>of<sp/>type<sp/>NULL_NEVER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>pre-compiled<sp/>fn<sp/>name<sp/>includes<sp/>the<sp/>base<sp/>name<sp/>&amp;<sp/>input<sp/>type<sp/>name.<sp/>hash32_int8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168" refid="function__registry__common_8h_1a69d46a4f35ead5e8cfb3a8645e44bb69" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HASH32_SAFE_NULL_NEVER(NAME,<sp/>ALIASES,<sp/>TYPE)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="169"><highlight class="preprocessor"><sp/><sp/>NativeFunction(#NAME,<sp/>std::vector&lt;std::string&gt;<sp/>ALIASES,<sp/>DataTypeVector{TYPE()},<sp/>\</highlight></codeline>
<codeline lineno="170"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32(),<sp/>kResultNullNever,<sp/>ARROW_STRINGIFY(NAME##_##TYPE))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Hash32<sp/>functions<sp/>that<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>NULL<sp/>handling<sp/>is<sp/>of<sp/>type<sp/>NULL_NEVER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>pre-compiled<sp/>fn<sp/>name<sp/>includes<sp/>the<sp/>base<sp/>name<sp/>&amp;<sp/>input<sp/>type<sp/>name.<sp/>hash32_int8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="176" refid="function__registry__common_8h_1aac6ebe8030e62fa16539017767a75195" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HASH64_SAFE_NULL_NEVER(NAME,<sp/>ALIASES,<sp/>TYPE)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="177"><highlight class="preprocessor"><sp/><sp/>NativeFunction(#NAME,<sp/>std::vector&lt;std::string&gt;<sp/>ALIASES,<sp/>DataTypeVector{TYPE()},<sp/>\</highlight></codeline>
<codeline lineno="178"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64(),<sp/>kResultNullNever,<sp/>ARROW_STRINGIFY(NAME##_##TYPE))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Hash32<sp/>functions<sp/>with<sp/>seed<sp/>that<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>NULL<sp/>handling<sp/>is<sp/>of<sp/>type<sp/>NULL_NEVER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>pre-compiled<sp/>fn<sp/>name<sp/>includes<sp/>the<sp/>base<sp/>name<sp/>&amp;<sp/>input<sp/>type<sp/>name.<sp/>hash32WithSeed_int8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184" refid="function__registry__common_8h_1a4517099c892fa7960551decd05534181" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HASH32_SEED_SAFE_NULL_NEVER(NAME,<sp/>ALIASES,<sp/>TYPE)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="185"><highlight class="preprocessor"><sp/><sp/>NativeFunction(#NAME,<sp/>std::vector&lt;std::string&gt;<sp/>ALIASES,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="186"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataTypeVector{TYPE(),<sp/>int32()},<sp/>int32(),<sp/>kResultNullNever,<sp/>\</highlight></codeline>
<codeline lineno="187"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARROW_STRINGIFY(NAME##WithSeed_##TYPE))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Hash64<sp/>functions<sp/>with<sp/>seed<sp/>that<sp/>:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>NULL<sp/>handling<sp/>is<sp/>of<sp/>type<sp/>NULL_NEVER</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>pre-compiled<sp/>fn<sp/>name<sp/>includes<sp/>the<sp/>base<sp/>name<sp/>&amp;<sp/>input<sp/>type<sp/>name.<sp/>hash32WithSeed_int8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193" refid="function__registry__common_8h_1aa294151d2c12a396512ca32cc6cf5103" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HASH64_SEED_SAFE_NULL_NEVER(NAME,<sp/>ALIASES,<sp/>TYPE)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="194"><highlight class="preprocessor"><sp/><sp/>NativeFunction(#NAME,<sp/>std::vector&lt;std::string&gt;<sp/>ALIASES,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="195"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>DataTypeVector{TYPE(),<sp/>int64()},<sp/>int64(),<sp/>kResultNullNever,<sp/>\</highlight></codeline>
<codeline lineno="196"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ARROW_STRINGIFY(NAME##WithSeed_##TYPE))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Iterate<sp/>the<sp/>inner<sp/>macro<sp/>over<sp/>all<sp/>numeric<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199" refid="function__registry__common_8h_1af87d2669fe3e73b653ba798e1ba6250b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NUMERIC_TYPES(INNER,<sp/>NAME,<sp/>ALIASES)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="200"><highlight class="preprocessor"><sp/><sp/>INNER(NAME,<sp/>ALIASES,<sp/>int8),<sp/>INNER(NAME,<sp/>ALIASES,<sp/>int16),<sp/>INNER(NAME,<sp/>ALIASES,<sp/>int32),<sp/>\</highlight></codeline>
<codeline lineno="201"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>INNER(NAME,<sp/>ALIASES,<sp/>int64),<sp/>INNER(NAME,<sp/>ALIASES,<sp/>uint8),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="202"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>INNER(NAME,<sp/>ALIASES,<sp/>uint16),<sp/>INNER(NAME,<sp/>ALIASES,<sp/>uint32),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="203"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>INNER(NAME,<sp/>ALIASES,<sp/>uint64),<sp/>INNER(NAME,<sp/>ALIASES,<sp/>float32),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="204"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>INNER(NAME,<sp/>ALIASES,<sp/>float64),<sp/>INNER(NAME,<sp/>ALIASES,<sp/>decimal128)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Iterate<sp/>the<sp/>inner<sp/>macro<sp/>over<sp/>numeric<sp/>and<sp/>date/time<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207" refid="function__registry__common_8h_1a03503f3f8299d2f75a45779e37fbb2be" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NUMERIC_DATE_TYPES(INNER,<sp/>NAME,<sp/>ALIASES)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="208"><highlight class="preprocessor"><sp/><sp/>NUMERIC_TYPES(INNER,<sp/>NAME,<sp/>ALIASES),<sp/>DATE_TYPES(INNER,<sp/>NAME,<sp/>ALIASES),<sp/>\</highlight></codeline>
<codeline lineno="209"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>TIME_TYPES(INNER,<sp/>NAME,<sp/>ALIASES),<sp/>INNER(NAME,<sp/>ALIASES,<sp/>date32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Iterate<sp/>the<sp/>inner<sp/>macro<sp/>over<sp/>all<sp/>date<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212" refid="function__registry__common_8h_1aa8589bfad25f23e35b261cb08c325f32" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>DATE_TYPES(INNER,<sp/>NAME,<sp/>ALIASES)<sp/>\</highlight></codeline>
<codeline lineno="213"><highlight class="preprocessor"><sp/><sp/>INNER(NAME,<sp/>ALIASES,<sp/>date64),<sp/>INNER(NAME,<sp/>ALIASES,<sp/>timestamp)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Iterate<sp/>the<sp/>inner<sp/>macro<sp/>over<sp/>all<sp/>time<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216" refid="function__registry__common_8h_1a69964534a6fc0482642b71148138b013" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TIME_TYPES(INNER,<sp/>NAME,<sp/>ALIASES)<sp/>INNER(NAME,<sp/>ALIASES,<sp/>time32)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Iterate<sp/>the<sp/>inner<sp/>macro<sp/>over<sp/>all<sp/>data<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219" refid="function__registry__common_8h_1ae2944a45f6c68147abb9f2ac5437ef78" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>VAR_LEN_TYPES(INNER,<sp/>NAME,<sp/>ALIASES)<sp/>\</highlight></codeline>
<codeline lineno="220"><highlight class="preprocessor"><sp/><sp/>INNER(NAME,<sp/>ALIASES,<sp/>utf8),<sp/>INNER(NAME,<sp/>ALIASES,<sp/>binary)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Iterate<sp/>the<sp/>inner<sp/>macro<sp/>over<sp/>all<sp/>numeric<sp/>types,<sp/>date<sp/>types<sp/>and<sp/>bool<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223" refid="function__registry__common_8h_1af1887e3c62cd3ce3e3c289b4113a7acd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NUMERIC_BOOL_DATE_TYPES(INNER,<sp/>NAME,<sp/>ALIASES)<sp/>\</highlight></codeline>
<codeline lineno="224"><highlight class="preprocessor"><sp/><sp/>NUMERIC_DATE_TYPES(INNER,<sp/>NAME,<sp/>ALIASES),<sp/>INNER(NAME,<sp/>ALIASES,<sp/>boolean)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Iterate<sp/>the<sp/>inner<sp/>macro<sp/>over<sp/>all<sp/>numeric<sp/>types,<sp/>date<sp/>types,<sp/>bool<sp/>and<sp/>varlen<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227" refid="function__registry__common_8h_1a77c5a28caf5b94e9aa2f9570e1be57e0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NUMERIC_BOOL_DATE_VAR_LEN_TYPES(INNER,<sp/>NAME,<sp/>ALIASES)<sp/>\</highlight></codeline>
<codeline lineno="228"><highlight class="preprocessor"><sp/><sp/>NUMERIC_BOOL_DATE_TYPES(INNER,<sp/>NAME,<sp/>ALIASES),<sp/>VAR_LEN_TYPES(INNER,<sp/>NAME,<sp/>ALIASES)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>gandiva</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/arrow/cpp/src/gandiva/function_registry_common.h"/>
  </compounddef>
</doxygen>
