<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classplasma_1_1_hash_table_store" kind="class" language="C++" prot="public">
    <compoundname>plasma::HashTableStore</compoundname>
    <basecompoundref refid="classplasma_1_1_external_store" prot="public" virt="non-virtual">plasma::ExternalStore</basecompoundref>
    <includes refid="hash__table__store_8h" local="no">plasma/hash_table_store.h</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classplasma_1_1_hash_table_store_1aae52c9c76128ff4da428d8b88b011962" prot="private" static="no">
        <type>std::unordered_map&lt; <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref>, std::string &gt;</type>
        <definition>typedef std::unordered_map&lt;ObjectID, std::string&gt; plasma::HashTableStore::HashTable</definition>
        <argsstring></argsstring>
        <name>HashTable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/hash_table_store.h" line="45" column="1" bodyfile="/arrow/cpp/src/plasma/hash_table_store.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classplasma_1_1_hash_table_store_1af9910ae0472d192f8f62c5b783c2d9ac" prot="private" static="no" mutable="no">
        <type>HashTable</type>
        <definition>HashTable plasma::HashTableStore::table_</definition>
        <argsstring></argsstring>
        <name>table_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/hash_table_store.h" line="47" column="1" bodyfile="/arrow/cpp/src/plasma/hash_table_store.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classplasma_1_1_hash_table_store_1a86cf399b58f676be7f58162030c16e3c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>plasma::HashTableStore::HashTableStore</definition>
        <argsstring>()=default</argsstring>
        <name>HashTableStore</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/hash_table_store.h" line="34" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_hash_table_store_1a7df46298f07da43ec3eec8db6d536112" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::HashTableStore::Connect</definition>
        <argsstring>(const std::string &amp;endpoint) override</argsstring>
        <name>Connect</name>
        <reimplements refid="classplasma_1_1_external_store_1a8881cbfcb5764fc4a2c62a49b2ccbcb8">Connect</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>endpoint</declname>
        </param>
        <briefdescription>
<para>Connect to the local plasma store. </para>        </briefdescription>
        <detaileddescription>
<para>Return the resulting connection.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>endpoint</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the endpoint to connect to the external storage service. While the formatting of the endpoint name is specific to the implementation of the external store, it always starts with {store-name}://, where {store-name} is the name of the external store.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The return status. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/hash_table_store.h" line="36" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_hash_table_store_1afa831d4bcfd48936da9f1a970265099e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::HashTableStore::Get</definition>
        <argsstring>(const std::vector&lt; ObjectID &gt; &amp;ids, std::vector&lt; std::shared_ptr&lt; Buffer &gt;&gt; buffers) override</argsstring>
        <name>Get</name>
        <reimplements refid="classplasma_1_1_external_store_1ac634f3ee4c67de31db1b122f50227ac6">Get</reimplements>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &gt; &amp;</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;&gt;</type>
          <declname>buffers</declname>
        </param>
        <briefdescription>
<para>This method will be called whenever an evicted object in the external store store needs to be accessed. </para>        </briefdescription>
        <detaileddescription>
<para>This API is experimental and might change in the future.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ids</parametername>
</parameternamelist>
<parameterdescription>
<para>The IDs of the objects to get. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buffers</parametername>
</parameternamelist>
<parameterdescription>
<para>List of buffers the data should be written to. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The return status. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/hash_table_store.h" line="38" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_hash_table_store_1a36bfb46e50994237b5e3cdae108484e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::HashTableStore::Put</definition>
        <argsstring>(const std::vector&lt; ObjectID &gt; &amp;ids, const std::vector&lt; std::shared_ptr&lt; Buffer &gt;&gt; &amp;data) override</argsstring>
        <name>Put</name>
        <reimplements refid="classplasma_1_1_external_store_1a1f205e124318d74f56e39721beeda24e">Put</reimplements>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &gt; &amp;</type>
          <declname>ids</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;&gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>This method will be called whenever an object in the Plasma store needs to be evicted to the external store. </para>        </briefdescription>
        <detaileddescription>
<para>This API is experimental and might change in the future.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ids</parametername>
</parameternamelist>
<parameterdescription>
<para>The IDs of the objects to put. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data</parametername>
</parameternamelist>
<parameterdescription>
<para>The object data to put. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The return status. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/hash_table_store.h" line="41" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2168">
        <label>plasma::ExternalStore</label>
        <link refid="classplasma_1_1_external_store"/>
      </node>
      <node id="2167">
        <label>plasma::HashTableStore</label>
        <link refid="classplasma_1_1_hash_table_store"/>
        <childnode refid="2168" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2170">
        <label>plasma::ExternalStore</label>
        <link refid="classplasma_1_1_external_store"/>
      </node>
      <node id="2169">
        <label>plasma::HashTableStore</label>
        <link refid="classplasma_1_1_hash_table_store"/>
        <childnode refid="2170" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/plasma/hash_table_store.h" line="32" column="1" bodyfile="/arrow/cpp/src/plasma/hash_table_store.h" bodystart="32" bodyend="48"/>
    <listofallmembers>
      <member refid="classplasma_1_1_hash_table_store_1a7df46298f07da43ec3eec8db6d536112" prot="public" virt="virtual"><scope>plasma::HashTableStore</scope><name>Connect</name></member>
      <member refid="classplasma_1_1_external_store_1a468c161889cb19ffd8b5584b7543c7fb" prot="public" virt="non-virtual"><scope>plasma::HashTableStore</scope><name>ExternalStore</name></member>
      <member refid="classplasma_1_1_hash_table_store_1afa831d4bcfd48936da9f1a970265099e" prot="public" virt="virtual"><scope>plasma::HashTableStore</scope><name>Get</name></member>
      <member refid="classplasma_1_1_hash_table_store_1aae52c9c76128ff4da428d8b88b011962" prot="private" virt="non-virtual"><scope>plasma::HashTableStore</scope><name>HashTable</name></member>
      <member refid="classplasma_1_1_hash_table_store_1a86cf399b58f676be7f58162030c16e3c" prot="public" virt="non-virtual"><scope>plasma::HashTableStore</scope><name>HashTableStore</name></member>
      <member refid="classplasma_1_1_hash_table_store_1a36bfb46e50994237b5e3cdae108484e4" prot="public" virt="virtual"><scope>plasma::HashTableStore</scope><name>Put</name></member>
      <member refid="classplasma_1_1_hash_table_store_1af9910ae0472d192f8f62c5b783c2d9ac" prot="private" virt="non-virtual"><scope>plasma::HashTableStore</scope><name>table_</name></member>
      <member refid="classplasma_1_1_external_store_1acde2a10c16392934b46dd0bca4d8d359" prot="public" virt="virtual"><scope>plasma::HashTableStore</scope><name>~ExternalStore</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
