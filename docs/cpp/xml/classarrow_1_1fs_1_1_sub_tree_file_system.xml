<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1fs_1_1_sub_tree_file_system" kind="class" language="C++" prot="public">
    <compoundname>arrow::fs::SubTreeFileSystem</compoundname>
    <basecompoundref refid="classarrow_1_1fs_1_1_file_system" prot="public" virt="non-virtual">arrow::fs::FileSystem</basecompoundref>
    <includes refid="filesystem_8h" local="no">arrow/filesystem/filesystem.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classarrow_1_1fs_1_1_sub_tree_file_system_1a2aadb2172efe8a87088edb59696665ea" prot="protected" static="no" mutable="no">
        <type>const std::string</type>
        <definition>const std::string arrow::fs::SubTreeFileSystem::base_path_</definition>
        <argsstring></argsstring>
        <name>base_path_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="303" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/filesystem.h" bodystart="303" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1fs_1_1_sub_tree_file_system_1a71f06ce0d94daa6f5ae58cd2972c4c08" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1fs_1_1_file_system" kindref="compound">FileSystem</ref> &gt;</type>
        <definition>std::shared_ptr&lt;FileSystem&gt; arrow::fs::SubTreeFileSystem::base_fs_</definition>
        <argsstring></argsstring>
        <name>base_fs_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="304" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/filesystem.h" bodystart="304" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1fs_1_1_sub_tree_file_system_1a92ce5effa6f463c518123c14c9b9e838" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::fs::SubTreeFileSystem::SubTreeFileSystem</definition>
        <argsstring>(const std::string &amp;base_path, std::shared_ptr&lt; FileSystem &gt; base_fs)</argsstring>
        <name>SubTreeFileSystem</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>base_path</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1fs_1_1_file_system" kindref="compound">FileSystem</ref> &gt;</type>
          <declname>base_fs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="262" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_sub_tree_file_system_1ac41ab87e865ca55b46ac17824539f8f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::fs::SubTreeFileSystem::~SubTreeFileSystem</definition>
        <argsstring>() override</argsstring>
        <name>~SubTreeFileSystem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="264" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_sub_tree_file_system_1a6a5343686f2afa903a4a0ce2882ee162" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string arrow::fs::SubTreeFileSystem::type_name</definition>
        <argsstring>() const override</argsstring>
        <name>type_name</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1a14c1160fbffc2dcb72f2e16c32329bc7">type_name</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="266" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/filesystem.h" bodystart="266" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_sub_tree_file_system_1a18ac48282fe9bf8c1f0d2bb5afc9899a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arrow::fs::SubTreeFileSystem::base_path</definition>
        <argsstring>() const</argsstring>
        <name>base_path</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="267" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/filesystem.h" bodystart="267" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_sub_tree_file_system_1a4b3f86fc827eca7df8d5fd13acd14e04" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1fs_1_1_file_system" kindref="compound">FileSystem</ref> &gt;</type>
        <definition>std::shared_ptr&lt;FileSystem&gt; arrow::fs::SubTreeFileSystem::base_fs</definition>
        <argsstring>() const</argsstring>
        <name>base_fs</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="268" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/filesystem.h" bodystart="268" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_sub_tree_file_system_1acf057b420cd5819efb756be8f0f7b841" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::string &gt;</type>
        <definition>Result&lt;std::string&gt; arrow::fs::SubTreeFileSystem::NormalizePath</definition>
        <argsstring>(std::string path) override</argsstring>
        <name>NormalizePath</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1a73d5af5c51cc4cf569fabcea48781721">NormalizePath</reimplements>
        <param>
          <type>std::string</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Normalize path for the given filesystem. </para>        </briefdescription>
        <detaileddescription>
<para>The default implementation of this method is a no-op, but subclasses may allow normalizing irregular path forms (such as Windows local paths). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="270" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_sub_tree_file_system_1a28fb9c50504f369ad34ab6e6a33fd38e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool arrow::fs::SubTreeFileSystem::Equals</definition>
        <argsstring>(const FileSystem &amp;other) const override</argsstring>
        <name>Equals</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1ac0a0a670a467fa073bb02b8581731262">Equals</reimplements>
        <param>
          <type>const <ref refid="classarrow_1_1fs_1_1_file_system" kindref="compound">FileSystem</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="272" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_sub_tree_file_system_1a230ca4c8bea4a1ec0261532cc2ba243a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; <ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref> &gt;</type>
        <definition>Result&lt;FileInfo&gt; arrow::fs::SubTreeFileSystem::GetFileInfo</definition>
        <argsstring>(const std::string &amp;path) override</argsstring>
        <name>GetFileInfo</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1ae883cb9d3a7b0523ebb346e5851f6aa9">GetFileInfo</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Get info for the given target. </para>        </briefdescription>
        <detaileddescription>
<para>Any symlink is automatically dereferenced, recursively. A nonexistent or unreachable file returns an Ok status and has a FileType of value NotFound. An error status indicates a truly exceptional condition (low-level I/O error, etc.). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="277" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_sub_tree_file_system_1a3a8713270dae8940a2695e15225b8b37" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::vector&lt; <ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref> &gt; &gt;</type>
        <definition>Result&lt;std::vector&lt;FileInfo&gt; &gt; arrow::fs::SubTreeFileSystem::GetFileInfo</definition>
        <argsstring>(const FileSelector &amp;select) override</argsstring>
        <name>GetFileInfo</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1ad472382e0a5e63010e58eb511afb9430">GetFileInfo</reimplements>
        <param>
          <type>const <ref refid="structarrow_1_1fs_1_1_file_selector" kindref="compound">FileSelector</ref> &amp;</type>
          <declname>select</declname>
        </param>
        <briefdescription>
<para>Same, according to a selector. </para>        </briefdescription>
        <detaileddescription>
<para>The selector&apos;s base directory will not be part of the results, even if it exists. If it doesn&apos;t exist, see <computeroutput><ref refid="structarrow_1_1fs_1_1_file_selector_1aead1e24f5aa8bb7a3e893436cde83ea7" kindref="member">FileSelector::allow_not_found</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="278" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_sub_tree_file_system_1a9734fc6ad251954d0554bb498a384793" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::fs::SubTreeFileSystem::CreateDir</definition>
        <argsstring>(const std::string &amp;path, bool recursive=true) override</argsstring>
        <name>CreateDir</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1aff4191ded194fc0d473608264b05ee86">CreateDir</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>recursive</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Create a directory and subdirectories. </para>        </briefdescription>
        <detaileddescription>
<para>This function succeeds if the directory already exists. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="280" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_sub_tree_file_system_1a27ea0fcb3ed3da837369b8306e73dd89" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::fs::SubTreeFileSystem::DeleteDir</definition>
        <argsstring>(const std::string &amp;path) override</argsstring>
        <name>DeleteDir</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1aa6d2d675596ee51935cc4baa9d30ea72">DeleteDir</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Delete a directory and its contents, recursively. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="282" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_sub_tree_file_system_1ac39c759b3ac117821c0e2e8041ccaaa8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::fs::SubTreeFileSystem::DeleteDirContents</definition>
        <argsstring>(const std::string &amp;path) override</argsstring>
        <name>DeleteDirContents</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1a908dd35485e74e91d420adf4b3eb80b2">DeleteDirContents</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Delete a directory&apos;s contents, recursively. </para>        </briefdescription>
        <detaileddescription>
<para>Like DeleteDir, but doesn&apos;t delete the directory itself. Passing an empty path (&quot;&quot;) will wipe the entire filesystem tree. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="283" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_sub_tree_file_system_1afca69141480bf1990d3cfb90b6c07cc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::fs::SubTreeFileSystem::DeleteFile</definition>
        <argsstring>(const std::string &amp;path) override</argsstring>
        <name>DeleteFile</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1ac9698e825f1abbe2497850c7d25efa1c">DeleteFile</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Delete a file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="285" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_sub_tree_file_system_1a408f22a2665b45596a8b10d76861f383" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::fs::SubTreeFileSystem::Move</definition>
        <argsstring>(const std::string &amp;src, const std::string &amp;dest) override</argsstring>
        <name>Move</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1a3ab3b162b3ea640076bbd46702735419">Move</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
<para>Move / rename a file or directory. </para>        </briefdescription>
        <detaileddescription>
<para>If the destination exists:<itemizedlist>
<listitem><para>if it is a non-empty directory, an error is returned</para></listitem><listitem><para>otherwise, if it has the same type as the source, it is replaced</para></listitem><listitem><para>otherwise, behavior is unspecified (implementation-dependent). </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="287" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_sub_tree_file_system_1a8c6f0585e7844aaa3e44a5a17197ea09" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::fs::SubTreeFileSystem::CopyFile</definition>
        <argsstring>(const std::string &amp;src, const std::string &amp;dest) override</argsstring>
        <name>CopyFile</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1a7222bd63bfcb1ac2a48367ce9e5c9667">CopyFile</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
<para>Copy a file. </para>        </briefdescription>
        <detaileddescription>
<para>If the destination exists and is a directory, an error is returned. Otherwise, it is replaced. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="289" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_sub_tree_file_system_1a52ff71a2eed88eba363761bc214917e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_input_stream" kindref="compound">io::InputStream</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;io::InputStream&gt; &gt; arrow::fs::SubTreeFileSystem::OpenInputStream</definition>
        <argsstring>(const std::string &amp;path) override</argsstring>
        <name>OpenInputStream</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1a4baf948a7ebca79d1b085942f32ba65f">OpenInputStream</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Open an input stream for sequential reading. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="291" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_sub_tree_file_system_1a3870d3e69059dfa8a2c215174a540d2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_random_access_file" kindref="compound">io::RandomAccessFile</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;io::RandomAccessFile&gt; &gt; arrow::fs::SubTreeFileSystem::OpenInputFile</definition>
        <argsstring>(const std::string &amp;path) override</argsstring>
        <name>OpenInputFile</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1a6e401fc8e1b55d66ab5045845dc3fdae">OpenInputFile</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Open an input file for random access reading. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="293" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_sub_tree_file_system_1a871ae8663a78f21d9e15eeea2d7b8f3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_output_stream" kindref="compound">io::OutputStream</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;io::OutputStream&gt; &gt; arrow::fs::SubTreeFileSystem::OpenOutputStream</definition>
        <argsstring>(const std::string &amp;path) override</argsstring>
        <name>OpenOutputStream</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1ae4ebffb159bef1199092d79c05703415">OpenOutputStream</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Open an output stream for sequential writing. </para>        </briefdescription>
        <detaileddescription>
<para>If the target already exists, existing data is truncated. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="295" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_sub_tree_file_system_1abcfb128367d3d5a93f27d05dc719d439" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_output_stream" kindref="compound">io::OutputStream</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;io::OutputStream&gt; &gt; arrow::fs::SubTreeFileSystem::OpenAppendStream</definition>
        <argsstring>(const std::string &amp;path) override</argsstring>
        <name>OpenAppendStream</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1ada6e16933e3f62a36cb8ebbcb9c94c46">OpenAppendStream</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Open an output stream for appending. </para>        </briefdescription>
        <detaileddescription>
<para>If the target doesn&apos;t exist, a new empty file is created. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="297" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classarrow_1_1fs_1_1_sub_tree_file_system_1a8d4709e1653f0b145b94ddbab4d4c7ad" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::fs::SubTreeFileSystem::SubTreeFileSystem</definition>
        <argsstring>()</argsstring>
        <name>SubTreeFileSystem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="301" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/filesystem.h" bodystart="301" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_sub_tree_file_system_1a18573437ec999f9fff41b87a51f224a8" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arrow::fs::SubTreeFileSystem::PrependBase</definition>
        <argsstring>(const std::string &amp;s) const</argsstring>
        <name>PrependBase</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="306" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_sub_tree_file_system_1a7307eec348d05ebca197dc65978cda04" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::fs::SubTreeFileSystem::PrependBaseNonEmpty</definition>
        <argsstring>(std::string *s) const</argsstring>
        <name>PrependBaseNonEmpty</name>
        <param>
          <type>std::string *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="307" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_sub_tree_file_system_1a52db80e6a89965627d36006f79c4c9e4" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::string &gt;</type>
        <definition>Result&lt;std::string&gt; arrow::fs::SubTreeFileSystem::StripBase</definition>
        <argsstring>(const std::string &amp;s) const</argsstring>
        <name>StripBase</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="308" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_sub_tree_file_system_1aa78cf82eb0013122841fea444057ce1b" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::fs::SubTreeFileSystem::FixInfo</definition>
        <argsstring>(FileInfo *info) const</argsstring>
        <name>FixInfo</name>
        <param>
          <type><ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="309" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-func">
      <memberdef kind="function" id="classarrow_1_1fs_1_1_sub_tree_file_system_1a84d81dac83d5c54ca4fcca2ff2f471de" prot="protected" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::string &gt;</type>
        <definition>static Result&lt;std::string&gt; arrow::fs::SubTreeFileSystem::NormalizeBasePath</definition>
        <argsstring>(std::string base_path, const std::shared_ptr&lt; FileSystem &gt; &amp;base_fs)</argsstring>
        <name>NormalizeBasePath</name>
        <param>
          <type>std::string</type>
          <declname>base_path</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1fs_1_1_file_system" kindref="compound">FileSystem</ref> &gt; &amp;</type>
          <declname>base_fs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="311" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A <ref refid="classarrow_1_1fs_1_1_file_system" kindref="compound">FileSystem</ref> implementation that delegates to another implementation after prepending a fixed base path. </para>    </briefdescription>
    <detaileddescription>
<para>This is useful to expose a logical view of a subtree of a filesystem, for example a directory in a <ref refid="classarrow_1_1fs_1_1_local_file_system" kindref="compound">LocalFileSystem</ref>. This works on abstract paths, i.e. paths using forward slashes and and a single root &quot;/&quot;. Windows paths are not guaranteed to work. This makes no security guarantee. For example, symlinks may allow to &quot;escape&quot; the subtree and access other parts of the underlying filesystem. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="4440">
        <label>std::enable_shared_from_this&lt; FileSystem &gt;</label>
      </node>
      <node id="4439">
        <label>arrow::fs::FileSystem</label>
        <link refid="classarrow_1_1fs_1_1_file_system"/>
        <childnode refid="4440" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4438">
        <label>arrow::fs::SubTreeFileSystem</label>
        <link refid="classarrow_1_1fs_1_1_sub_tree_file_system"/>
        <childnode refid="4439" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4443">
        <label>std::enable_shared_from_this&lt; FileSystem &gt;</label>
      </node>
      <node id="4442">
        <label>arrow::fs::FileSystem</label>
        <link refid="classarrow_1_1fs_1_1_file_system"/>
        <childnode refid="4443" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4441">
        <label>arrow::fs::SubTreeFileSystem</label>
        <link refid="classarrow_1_1fs_1_1_sub_tree_file_system"/>
        <childnode refid="4442" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="259" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/filesystem.h" bodystart="259" bodyend="313"/>
    <listofallmembers>
      <member refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a4b3f86fc827eca7df8d5fd13acd14e04" prot="public" virt="non-virtual"><scope>arrow::fs::SubTreeFileSystem</scope><name>base_fs</name></member>
      <member refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a71f06ce0d94daa6f5ae58cd2972c4c08" prot="protected" virt="non-virtual"><scope>arrow::fs::SubTreeFileSystem</scope><name>base_fs_</name></member>
      <member refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a18ac48282fe9bf8c1f0d2bb5afc9899a" prot="public" virt="non-virtual"><scope>arrow::fs::SubTreeFileSystem</scope><name>base_path</name></member>
      <member refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a2aadb2172efe8a87088edb59696665ea" prot="protected" virt="non-virtual"><scope>arrow::fs::SubTreeFileSystem</scope><name>base_path_</name></member>
      <member refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a8c6f0585e7844aaa3e44a5a17197ea09" prot="public" virt="virtual"><scope>arrow::fs::SubTreeFileSystem</scope><name>CopyFile</name></member>
      <member refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a9734fc6ad251954d0554bb498a384793" prot="public" virt="virtual"><scope>arrow::fs::SubTreeFileSystem</scope><name>CreateDir</name></member>
      <member refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a27ea0fcb3ed3da837369b8306e73dd89" prot="public" virt="virtual"><scope>arrow::fs::SubTreeFileSystem</scope><name>DeleteDir</name></member>
      <member refid="classarrow_1_1fs_1_1_sub_tree_file_system_1ac39c759b3ac117821c0e2e8041ccaaa8" prot="public" virt="virtual"><scope>arrow::fs::SubTreeFileSystem</scope><name>DeleteDirContents</name></member>
      <member refid="classarrow_1_1fs_1_1_sub_tree_file_system_1afca69141480bf1990d3cfb90b6c07cc5" prot="public" virt="virtual"><scope>arrow::fs::SubTreeFileSystem</scope><name>DeleteFile</name></member>
      <member refid="classarrow_1_1fs_1_1_file_system_1aabbcfc55e53a8bcf3d88ece0b64fb400" prot="public" virt="virtual"><scope>arrow::fs::SubTreeFileSystem</scope><name>DeleteFiles</name></member>
      <member refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a28fb9c50504f369ad34ab6e6a33fd38e" prot="public" virt="virtual"><scope>arrow::fs::SubTreeFileSystem</scope><name>Equals</name></member>
      <member refid="classarrow_1_1fs_1_1_file_system_1aa0bfcdc572b747ce2b650147d8ddb888" prot="public" virt="virtual" ambiguityscope="arrow::fs::FileSystem::"><scope>arrow::fs::SubTreeFileSystem</scope><name>Equals</name></member>
      <member refid="classarrow_1_1fs_1_1_sub_tree_file_system_1aa78cf82eb0013122841fea444057ce1b" prot="protected" virt="non-virtual"><scope>arrow::fs::SubTreeFileSystem</scope><name>FixInfo</name></member>
      <member refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a230ca4c8bea4a1ec0261532cc2ba243a" prot="public" virt="virtual"><scope>arrow::fs::SubTreeFileSystem</scope><name>GetFileInfo</name></member>
      <member refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a3a8713270dae8940a2695e15225b8b37" prot="public" virt="virtual"><scope>arrow::fs::SubTreeFileSystem</scope><name>GetFileInfo</name></member>
      <member refid="classarrow_1_1fs_1_1_file_system_1a4e7ff03e540cfba191d9c42aa6bba060" prot="public" virt="virtual" ambiguityscope="arrow::fs::FileSystem::"><scope>arrow::fs::SubTreeFileSystem</scope><name>GetFileInfo</name></member>
      <member refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a408f22a2665b45596a8b10d76861f383" prot="public" virt="virtual"><scope>arrow::fs::SubTreeFileSystem</scope><name>Move</name></member>
      <member refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a84d81dac83d5c54ca4fcca2ff2f471de" prot="protected" virt="non-virtual"><scope>arrow::fs::SubTreeFileSystem</scope><name>NormalizeBasePath</name></member>
      <member refid="classarrow_1_1fs_1_1_sub_tree_file_system_1acf057b420cd5819efb756be8f0f7b841" prot="public" virt="virtual"><scope>arrow::fs::SubTreeFileSystem</scope><name>NormalizePath</name></member>
      <member refid="classarrow_1_1fs_1_1_sub_tree_file_system_1abcfb128367d3d5a93f27d05dc719d439" prot="public" virt="virtual"><scope>arrow::fs::SubTreeFileSystem</scope><name>OpenAppendStream</name></member>
      <member refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a3870d3e69059dfa8a2c215174a540d2a" prot="public" virt="virtual"><scope>arrow::fs::SubTreeFileSystem</scope><name>OpenInputFile</name></member>
      <member refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a52ff71a2eed88eba363761bc214917e6" prot="public" virt="virtual"><scope>arrow::fs::SubTreeFileSystem</scope><name>OpenInputStream</name></member>
      <member refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a871ae8663a78f21d9e15eeea2d7b8f3e" prot="public" virt="virtual"><scope>arrow::fs::SubTreeFileSystem</scope><name>OpenOutputStream</name></member>
      <member refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a18573437ec999f9fff41b87a51f224a8" prot="protected" virt="non-virtual"><scope>arrow::fs::SubTreeFileSystem</scope><name>PrependBase</name></member>
      <member refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a7307eec348d05ebca197dc65978cda04" prot="protected" virt="non-virtual"><scope>arrow::fs::SubTreeFileSystem</scope><name>PrependBaseNonEmpty</name></member>
      <member refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a52db80e6a89965627d36006f79c4c9e4" prot="protected" virt="non-virtual"><scope>arrow::fs::SubTreeFileSystem</scope><name>StripBase</name></member>
      <member refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a92ce5effa6f463c518123c14c9b9e838" prot="public" virt="non-virtual"><scope>arrow::fs::SubTreeFileSystem</scope><name>SubTreeFileSystem</name></member>
      <member refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a8d4709e1653f0b145b94ddbab4d4c7ad" prot="protected" virt="non-virtual"><scope>arrow::fs::SubTreeFileSystem</scope><name>SubTreeFileSystem</name></member>
      <member refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a6a5343686f2afa903a4a0ce2882ee162" prot="public" virt="virtual"><scope>arrow::fs::SubTreeFileSystem</scope><name>type_name</name></member>
      <member refid="classarrow_1_1fs_1_1_file_system_1a364917767b1d2e11b3b8967a4ee08c30" prot="public" virt="virtual"><scope>arrow::fs::SubTreeFileSystem</scope><name>~FileSystem</name></member>
      <member refid="classarrow_1_1fs_1_1_sub_tree_file_system_1ac41ab87e865ca55b46ac17824539f8f4" prot="public" virt="non-virtual"><scope>arrow::fs::SubTreeFileSystem</scope><name>~SubTreeFileSystem</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
