<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1io_1_1_stderr_stream" kind="class" language="C++" prot="public">
    <compoundname>arrow::io::StderrStream</compoundname>
    <basecompoundref refid="classarrow_1_1io_1_1_output_stream" prot="public" virt="non-virtual">arrow::io::OutputStream</basecompoundref>
    <includes refid="io__util_8h" local="no">arrow/util/io_util.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classarrow_1_1io_1_1_stderr_stream_1a297b6ecf73c5963dc9ab95467e737caf" prot="private" static="no" mutable="no">
        <type>int64_t</type>
        <definition>int64_t arrow::io::StderrStream::pos_</definition>
        <argsstring></argsstring>
        <name>pos_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/io_util.h" line="75" column="1" bodyfile="/arrow/cpp/src/arrow/util/io_util.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1io_1_1_stderr_stream_1a4180749d29a04a179a7b2d6c909dedc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::io::StderrStream::StderrStream</definition>
        <argsstring>()</argsstring>
        <name>StderrStream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/io_util.h" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_stderr_stream_1a8939700d23ace263af3a556d49ec8fe3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::io::StderrStream::~StderrStream</definition>
        <argsstring>() override</argsstring>
        <name>~StderrStream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/io_util.h" line="65" column="1" bodyfile="/arrow/cpp/src/arrow/util/io_util.h" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_stderr_stream_1ab018979a9e5846f12d5f6e97da6b784b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::StderrStream::Close</definition>
        <argsstring>() override</argsstring>
        <name>Close</name>
        <reimplements refid="classarrow_1_1io_1_1_file_interface_1ae0f46d227a430af180576715e7aa0b78">Close</reimplements>
        <briefdescription>
<para>Close the stream cleanly. </para>        </briefdescription>
        <detaileddescription>
<para>For writable streams, this will attempt to flush any pending data before releasing the underlying resource.</para><para>After <ref refid="classarrow_1_1io_1_1_stderr_stream_1ab018979a9e5846f12d5f6e97da6b784b" kindref="member">Close()</ref> is called, <ref refid="classarrow_1_1io_1_1_stderr_stream_1a481bf2804d6457ddc97d6e851abfebfd" kindref="member">closed()</ref> returns true and the stream is not available for further operations. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/io_util.h" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_stderr_stream_1a481bf2804d6457ddc97d6e851abfebfd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool arrow::io::StderrStream::closed</definition>
        <argsstring>() const override</argsstring>
        <name>closed</name>
        <reimplements refid="classarrow_1_1io_1_1_file_interface_1a5ba1d2c3cec2e05e7b0018624f19c10b">closed</reimplements>
        <briefdescription>
<para>Return whether the stream is closed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/io_util.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_stderr_stream_1a50b456bcb5105838a0cfa7f331f77d7f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; int64_t &gt;</type>
        <definition>Result&lt;int64_t&gt; arrow::io::StderrStream::Tell</definition>
        <argsstring>() const override</argsstring>
        <name>Tell</name>
        <reimplements refid="classarrow_1_1io_1_1_file_interface_1ac6c6709147a46cd7f45d0779c1819ce6">Tell</reimplements>
        <briefdescription>
<para>Return the position in this stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/io_util.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_stderr_stream_1a99319c33bcdd9d35e36c9790e5eb6d2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::StderrStream::Write</definition>
        <argsstring>(const void *data, int64_t nbytes) override</argsstring>
        <name>Write</name>
        <reimplements refid="classarrow_1_1io_1_1_writable_1a51d9feed73c33f095ca4b9f35dede84d">Write</reimplements>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
<para>Write the given data to the stream. </para>        </briefdescription>
        <detaileddescription>
<para>This method always processes the bytes in full. Depending on the semantics of the stream, the data may be written out immediately, held in a buffer, or written asynchronously. In the case where the stream buffers the data, it will be copied. To avoid potentially large copies, use the Write variant that takes an owned <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/io_util.h" line="72" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4295">
        <label>arrow::io::OutputStream</label>
        <link refid="classarrow_1_1io_1_1_output_stream"/>
        <childnode refid="4296" relation="public-inheritance">
        </childnode>
        <childnode refid="4297" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4297">
        <label>arrow::io::Writable</label>
        <link refid="classarrow_1_1io_1_1_writable"/>
      </node>
      <node id="4296">
        <label>arrow::io::FileInterface</label>
        <link refid="classarrow_1_1io_1_1_file_interface"/>
      </node>
      <node id="4294">
        <label>arrow::io::StderrStream</label>
        <link refid="classarrow_1_1io_1_1_stderr_stream"/>
        <childnode refid="4295" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4299">
        <label>arrow::io::OutputStream</label>
        <link refid="classarrow_1_1io_1_1_output_stream"/>
        <childnode refid="4300" relation="public-inheritance">
        </childnode>
        <childnode refid="4301" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4301">
        <label>arrow::io::Writable</label>
        <link refid="classarrow_1_1io_1_1_writable"/>
      </node>
      <node id="4300">
        <label>arrow::io::FileInterface</label>
        <link refid="classarrow_1_1io_1_1_file_interface"/>
      </node>
      <node id="4298">
        <label>arrow::io::StderrStream</label>
        <link refid="classarrow_1_1io_1_1_stderr_stream"/>
        <childnode refid="4299" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/util/io_util.h" line="62" column="1" bodyfile="/arrow/cpp/src/arrow/util/io_util.h" bodystart="62" bodyend="76"/>
    <listofallmembers>
      <member refid="classarrow_1_1io_1_1_file_interface_1a0fa59fe92d3c99c9d9701210626aac60" prot="public" virt="virtual"><scope>arrow::io::StderrStream</scope><name>Abort</name></member>
      <member refid="classarrow_1_1io_1_1_stderr_stream_1ab018979a9e5846f12d5f6e97da6b784b" prot="public" virt="virtual"><scope>arrow::io::StderrStream</scope><name>Close</name></member>
      <member refid="classarrow_1_1io_1_1_stderr_stream_1a481bf2804d6457ddc97d6e851abfebfd" prot="public" virt="virtual"><scope>arrow::io::StderrStream</scope><name>closed</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1afea9126bb21e3720212a826aa78b5534" prot="protected" virt="non-virtual"><scope>arrow::io::StderrStream</scope><name>FileInterface</name></member>
      <member refid="classarrow_1_1io_1_1_writable_1a06e513a551f68603013c1586ba8b939f" prot="public" virt="virtual"><scope>arrow::io::StderrStream</scope><name>Flush</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1a75a3739361570bb121b9adb04d5d8686" prot="public" virt="non-virtual"><scope>arrow::io::StderrStream</scope><name>mode</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1a504d0410eb6066316365a4549d000ee0" prot="protected" virt="non-virtual"><scope>arrow::io::StderrStream</scope><name>mode_</name></member>
      <member refid="classarrow_1_1io_1_1_output_stream_1a5b1e0adea7ef92368ddc07027995aca1" prot="protected" virt="non-virtual"><scope>arrow::io::StderrStream</scope><name>OutputStream</name></member>
      <member refid="classarrow_1_1io_1_1_stderr_stream_1a297b6ecf73c5963dc9ab95467e737caf" prot="private" virt="non-virtual"><scope>arrow::io::StderrStream</scope><name>pos_</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1af3dd01a780076e39a34770beb513f71f" prot="protected" virt="non-virtual"><scope>arrow::io::StderrStream</scope><name>set_mode</name></member>
      <member refid="classarrow_1_1io_1_1_stderr_stream_1a4180749d29a04a179a7b2d6c909dedc2" prot="public" virt="non-virtual"><scope>arrow::io::StderrStream</scope><name>StderrStream</name></member>
      <member refid="classarrow_1_1io_1_1_stderr_stream_1a50b456bcb5105838a0cfa7f331f77d7f" prot="public" virt="virtual"><scope>arrow::io::StderrStream</scope><name>Tell</name></member>
      <member refid="classarrow_1_1io_1_1_stderr_stream_1a99319c33bcdd9d35e36c9790e5eb6d2e" prot="public" virt="virtual"><scope>arrow::io::StderrStream</scope><name>Write</name></member>
      <member refid="classarrow_1_1io_1_1_writable_1a048bbc5e85b1d739bc49c57553e85069" prot="public" virt="virtual" ambiguityscope="arrow::io::OutputStream::"><scope>arrow::io::StderrStream</scope><name>Write</name></member>
      <member refid="classarrow_1_1io_1_1_writable_1a00ee30dff05bda7526c91e594a9607e7" prot="public" virt="non-virtual" ambiguityscope="arrow::io::OutputStream::"><scope>arrow::io::StderrStream</scope><name>Write</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1aa42dcdfad00634f01192b39f1d9b4929" prot="public" virt="pure-virtual"><scope>arrow::io::StderrStream</scope><name>~FileInterface</name></member>
      <member refid="classarrow_1_1io_1_1_stderr_stream_1a8939700d23ace263af3a556d49ec8fe3" prot="public" virt="non-virtual"><scope>arrow::io::StderrStream</scope><name>~StderrStream</name></member>
      <member refid="classarrow_1_1io_1_1_writable_1acc17343118544c62f14d62f538fa8592" prot="public" virt="virtual"><scope>arrow::io::StderrStream</scope><name>~Writable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
