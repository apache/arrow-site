<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1io_1_1_random_access_file" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>arrow::io::RandomAccessFile</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::enable_shared_from_this&lt; RandomAccessFile &gt;</basecompoundref>
    <basecompoundref refid="classarrow_1_1io_1_1_input_stream" prot="public" virt="non-virtual">arrow::io::InputStream</basecompoundref>
    <basecompoundref refid="classarrow_1_1io_1_1_seekable" prot="public" virt="non-virtual">arrow::io::Seekable</basecompoundref>
    <derivedcompoundref refid="classarrow_1_1io_1_1_hdfs_readable_file" prot="public" virt="non-virtual">arrow::io::HdfsReadableFile</derivedcompoundref>
    <derivedcompoundref refid="classarrow_1_1io_1_1internal_1_1_random_access_file_concurrency_wrapper" prot="public" virt="non-virtual">arrow::io::internal::RandomAccessFileConcurrencyWrapper&lt; Derived &gt;</derivedcompoundref>
    <derivedcompoundref refid="classarrow_1_1io_1_1_read_write_file_interface" prot="public" virt="non-virtual">arrow::io::ReadWriteFileInterface</derivedcompoundref>
    <derivedcompoundref refid="classarrow_1_1py_1_1_py_readable_file" prot="public" virt="non-virtual">arrow::py::PyReadableFile</derivedcompoundref>
    <derivedcompoundref refid="classparquet_1_1_parquet_input_wrapper" prot="public" virt="non-virtual">parquet::ParquetInputWrapper</derivedcompoundref>
    <derivedcompoundref refid="classarrow_1_1io_1_1internal_1_1_random_access_file_concurrency_wrapper" prot="public" virt="non-virtual">arrow::io::internal::RandomAccessFileConcurrencyWrapper&lt; BufferReader &gt;</derivedcompoundref>
    <derivedcompoundref refid="classarrow_1_1io_1_1internal_1_1_random_access_file_concurrency_wrapper" prot="public" virt="non-virtual">arrow::io::internal::RandomAccessFileConcurrencyWrapper&lt; CudaBufferReader &gt;</derivedcompoundref>
    <derivedcompoundref refid="classarrow_1_1io_1_1internal_1_1_random_access_file_concurrency_wrapper" prot="public" virt="non-virtual">arrow::io::internal::RandomAccessFileConcurrencyWrapper&lt; ReadableFile &gt;</derivedcompoundref>
    <derivedcompoundref refid="classarrow_1_1io_1_1_slow_input_stream_base" prot="public" virt="non-virtual">arrow::io::SlowInputStreamBase&lt; RandomAccessFile &gt;</derivedcompoundref>
    <includes refid="interfaces_8h" local="no">arrow/io/interfaces.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classarrow_1_1io_1_1_random_access_file_1a143957ccff105aca1212849c5954071e" prot="private" static="no" mutable="no">
        <type>struct <ref refid="arrow_2util_2visibility_8h_1a843cb8dccea68a22a2b9995605cb5a74" kindref="member">ARROW_NO_EXPORT</ref></type>
        <definition>struct ARROW_NO_EXPORT arrow::io::RandomAccessFile::RandomAccessFileImpl</definition>
        <argsstring></argsstring>
        <name>RandomAccessFileImpl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/interfaces.h" line="232" column="1" bodyfile="/arrow/cpp/src/arrow/io/interfaces.h" bodystart="235" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1io_1_1_random_access_file_1a426aa576ed7b7f8885e91e4b6a1aedea" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; RandomAccessFileImpl &gt;</type>
        <definition>std::unique_ptr&lt;RandomAccessFileImpl&gt; arrow::io::RandomAccessFile::interface_impl_</definition>
        <argsstring></argsstring>
        <name>interface_impl_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/interfaces.h" line="236" column="1" bodyfile="/arrow/cpp/src/arrow/io/interfaces.h" bodystart="236" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1io_1_1_random_access_file_1a30c6917dfe0b6e508dac2ecc81917187" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::io::RandomAccessFile::~RandomAccessFile</definition>
        <argsstring>() override</argsstring>
        <name>~RandomAccessFile</name>
        <briefdescription>
<para>Necessary because we hold a std::unique_ptr. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/interfaces.h" line="183" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_random_access_file_1a2a476c2a6ad474e123d1aab20be289c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; int64_t &gt;</type>
        <definition>virtual Result&lt;int64_t&gt; arrow::io::RandomAccessFile::GetSize</definition>
        <argsstring>()=0</argsstring>
        <name>GetSize</name>
        <reimplementedby refid="classarrow_1_1py_1_1_py_readable_file_1ad7d7011c42153050e60ca4b04895b246">GetSize</reimplementedby>
        <reimplementedby refid="classparquet_1_1_parquet_input_wrapper_1a2b0a987ef6a6a39bfb86be55b4e89bdc">GetSize</reimplementedby>
        <reimplementedby refid="classarrow_1_1io_1_1_slow_random_access_file_1a5409c5054e56993eba44defc97e5f664">GetSize</reimplementedby>
        <reimplementedby refid="classarrow_1_1io_1_1_memory_mapped_file_1afa7949f86824b7f48064d172949248f2">GetSize</reimplementedby>
        <reimplementedby refid="classarrow_1_1io_1_1_hdfs_readable_file_1ab8a1be664475bce844fbbd01924cc7ca">GetSize</reimplementedby>
        <briefdescription>
<para>Return the total file size in bytes. </para>        </briefdescription>
        <detaileddescription>
<para>This method does not read or move the current file position, so is safe to call concurrently with e.g. <ref refid="classarrow_1_1io_1_1_random_access_file_1adb9d40656e516d6b77ee2bdfc00126f3" kindref="member">ReadAt()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/interfaces.h" line="199" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_random_access_file_1adb9d40656e516d6b77ee2bdfc00126f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; int64_t &gt;</type>
        <definition>virtual Result&lt;int64_t&gt; arrow::io::RandomAccessFile::ReadAt</definition>
        <argsstring>(int64_t position, int64_t nbytes, void *out)</argsstring>
        <name>ReadAt</name>
        <reimplementedby refid="classarrow_1_1py_1_1_py_readable_file_1aaba9a237753a4e229696fbf5501643a3">ReadAt</reimplementedby>
        <reimplementedby refid="classarrow_1_1io_1_1_slow_random_access_file_1a86ae96dc45f3c9cf982afc1b36f1241a">ReadAt</reimplementedby>
        <reimplementedby refid="classarrow_1_1io_1_1_memory_mapped_file_1a862f6eb20f0da6bf429c708de3d035ba">ReadAt</reimplementedby>
        <reimplementedby refid="classarrow_1_1io_1_1_hdfs_readable_file_1ae49cbcb5d02ee5cfe796ab1fb9da8a23">ReadAt</reimplementedby>
        <param>
          <type>int64_t</type>
          <declname>position</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Read data from given file position. </para>        </briefdescription>
        <detaileddescription>
<para>At most <computeroutput>nbytes</computeroutput> bytes are read. The number of bytes read is returned (it can be less than <computeroutput>nbytes</computeroutput> if EOF is reached).</para><para>This method can be safely called from multiple threads concurrently. It is unspecified whether this method updates the file position or not.</para><para>The default RandomAccessFile-provided implementation uses <ref refid="classarrow_1_1io_1_1_seekable_1a410ba0e0932dbcb939b570ee3c8c6d25" kindref="member">Seek()</ref> and <ref refid="classarrow_1_1io_1_1_readable_1ab94d6d47006df39f6cf77c078a61b8d8" kindref="member">Read()</ref>, but subclasses may override it with a more efficient implementation that doesn&apos;t depend on implicit file positioning.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">position</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to read bytes from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to read bytes into </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes read, or an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/interfaces.h" line="217" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_random_access_file_1a562433f2be06021acb9abd20bd5a8219" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &gt;</type>
        <definition>virtual Result&lt;std::shared_ptr&lt;Buffer&gt; &gt; arrow::io::RandomAccessFile::ReadAt</definition>
        <argsstring>(int64_t position, int64_t nbytes)</argsstring>
        <name>ReadAt</name>
        <reimplementedby refid="classarrow_1_1py_1_1_py_readable_file_1a236a45ca572c02803ba23252d139fc84">ReadAt</reimplementedby>
        <reimplementedby refid="classparquet_1_1_parquet_input_wrapper_1a9724b9ee539f12c489fc61e1c093b097">ReadAt</reimplementedby>
        <reimplementedby refid="classarrow_1_1io_1_1_slow_random_access_file_1a048d2c56de024066b0a95313306da147">ReadAt</reimplementedby>
        <reimplementedby refid="classarrow_1_1io_1_1_memory_mapped_file_1a511e515662f65b931ed181d6865f7629">ReadAt</reimplementedby>
        <reimplementedby refid="classarrow_1_1io_1_1_hdfs_readable_file_1a72bf1d2aa7615fbc0f8b62326053da4e">ReadAt</reimplementedby>
        <param>
          <type>int64_t</type>
          <declname>position</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
<para>Read data from given file position. </para>        </briefdescription>
        <detaileddescription>
<para>At most <computeroutput>nbytes</computeroutput> bytes are read, but it can be less if EOF is reached.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">position</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to read bytes from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to read </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A buffer containing the bytes read, or an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/interfaces.h" line="226" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_random_access_file_1ae37e086e71206380188a28fa5b125ac4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_future" kindref="compound">Future</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &gt;</type>
        <definition>virtual Future&lt;std::shared_ptr&lt;Buffer&gt; &gt; arrow::io::RandomAccessFile::ReadAsync</definition>
        <argsstring>(int64_t position, int64_t nbytes)</argsstring>
        <name>ReadAsync</name>
        <reimplementedby refid="classarrow_1_1io_1_1_buffer_reader_1a22e657c2c0c698b39eeda606a21f7fb5">ReadAsync</reimplementedby>
        <reimplementedby refid="classarrow_1_1io_1_1_memory_mapped_file_1af13a36adf0043ca23b35821b78865531">ReadAsync</reimplementedby>
        <param>
          <type>int64_t</type>
          <declname>position</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/interfaces.h" line="229" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1io_1_1_random_access_file_1a077348c5eb5ad0147582a3e5aa073847" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_input_stream" kindref="compound">InputStream</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;InputStream&gt; arrow::io::RandomAccessFile::GetStream</definition>
        <argsstring>(std::shared_ptr&lt; RandomAccessFile &gt; file, int64_t file_offset, int64_t nbytes)</argsstring>
        <name>GetStream</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_random_access_file" kindref="compound">RandomAccessFile</ref> &gt;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>file_offset</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
<para>Create an isolated <ref refid="classarrow_1_1io_1_1_input_stream" kindref="compound">InputStream</ref> that reads a segment of a <ref refid="classarrow_1_1io_1_1_random_access_file" kindref="compound">RandomAccessFile</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Multiple such stream can be created and used independently without interference <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">file</parametername>
</parameternamelist>
<parameterdescription>
<para>a file instance </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">file_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>the starting position in the file </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>the extent of bytes to read. The file should have sufficient bytes available </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/interfaces.h" line="192" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classarrow_1_1io_1_1_random_access_file_1a32c1cb28aa86db601b68a96615a3161c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::io::RandomAccessFile::RandomAccessFile</definition>
        <argsstring>()</argsstring>
        <name>RandomAccessFile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/interfaces.h" line="232" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3741">
        <label>arrow::io::Readable</label>
        <link refid="classarrow_1_1io_1_1_readable"/>
      </node>
      <node id="3755">
        <label>arrow::io::SlowInputStreamBase&lt; RandomAccessFile &gt;</label>
        <link refid="classarrow_1_1io_1_1_slow_input_stream_base"/>
        <childnode refid="3737" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3749">
        <label>arrow::py::PyReadableFile</label>
        <link refid="classarrow_1_1py_1_1_py_readable_file"/>
        <childnode refid="3737" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3751">
        <label>arrow::io::internal::RandomAccessFileConcurrencyWrapper&lt; BufferReader &gt;</label>
        <childnode refid="3737" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3748">
        <label>arrow::io::MemoryMappedFile</label>
        <link refid="classarrow_1_1io_1_1_memory_mapped_file"/>
        <childnode refid="3747" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3756">
        <label>arrow::io::SlowRandomAccessFile</label>
        <link refid="classarrow_1_1io_1_1_slow_random_access_file"/>
        <childnode refid="3755" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3740">
        <label>arrow::io::FileInterface</label>
        <link refid="classarrow_1_1io_1_1_file_interface"/>
      </node>
      <node id="3744">
        <label>arrow::io::internal::RandomAccessFileConcurrencyWrapper&lt; Derived &gt;</label>
        <childnode refid="3737" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3742">
        <label>arrow::io::Seekable</label>
        <link refid="classarrow_1_1io_1_1_seekable"/>
      </node>
      <node id="3753">
        <label>arrow::cuda::CudaBufferReader</label>
        <link refid="classarrow_1_1cuda_1_1_cuda_buffer_reader"/>
        <childnode refid="3752" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3743">
        <label>arrow::io::HdfsReadableFile</label>
        <link refid="classarrow_1_1io_1_1_hdfs_readable_file"/>
        <childnode refid="3737" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3738">
        <label>std::enable_shared_from_this&lt; RandomAccessFile &gt;</label>
      </node>
      <node id="3745">
        <label>arrow::io::BufferReader&lt; BufferReader &gt;</label>
        <link refid="classarrow_1_1io_1_1_buffer_reader"/>
        <childnode refid="3744" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3739">
        <label>arrow::io::InputStream</label>
        <link refid="classarrow_1_1io_1_1_input_stream"/>
        <childnode refid="3740" relation="public-inheritance">
        </childnode>
        <childnode refid="3741" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3752">
        <label>arrow::io::internal::RandomAccessFileConcurrencyWrapper&lt; CudaBufferReader &gt;</label>
        <childnode refid="3737" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3737">
        <label>arrow::io::RandomAccessFile</label>
        <link refid="classarrow_1_1io_1_1_random_access_file"/>
        <childnode refid="3738" relation="public-inheritance">
        </childnode>
        <childnode refid="3739" relation="public-inheritance">
        </childnode>
        <childnode refid="3742" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3750">
        <label>parquet::ParquetInputWrapper</label>
        <link refid="classparquet_1_1_parquet_input_wrapper"/>
        <childnode refid="3737" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3754">
        <label>arrow::io::internal::RandomAccessFileConcurrencyWrapper&lt; ReadableFile &gt;</label>
        <childnode refid="3737" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3747">
        <label>arrow::io::ReadWriteFileInterface</label>
        <link refid="classarrow_1_1io_1_1_read_write_file_interface"/>
        <childnode refid="3737" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3746">
        <label>arrow::io::ReadableFile&lt; ReadableFile &gt;</label>
        <link refid="classarrow_1_1io_1_1_readable_file"/>
        <childnode refid="3744" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3761">
        <label>arrow::io::Readable</label>
        <link refid="classarrow_1_1io_1_1_readable"/>
      </node>
      <node id="3760">
        <label>arrow::io::FileInterface</label>
        <link refid="classarrow_1_1io_1_1_file_interface"/>
      </node>
      <node id="3762">
        <label>arrow::io::Seekable</label>
        <link refid="classarrow_1_1io_1_1_seekable"/>
      </node>
      <node id="3758">
        <label>std::enable_shared_from_this&lt; RandomAccessFile &gt;</label>
      </node>
      <node id="3759">
        <label>arrow::io::InputStream</label>
        <link refid="classarrow_1_1io_1_1_input_stream"/>
        <childnode refid="3760" relation="public-inheritance">
        </childnode>
        <childnode refid="3761" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3757">
        <label>arrow::io::RandomAccessFile</label>
        <link refid="classarrow_1_1io_1_1_random_access_file"/>
        <childnode refid="3758" relation="public-inheritance">
        </childnode>
        <childnode refid="3759" relation="public-inheritance">
        </childnode>
        <childnode refid="3762" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/io/interfaces.h" line="180" column="1" bodyfile="/arrow/cpp/src/arrow/io/interfaces.h" bodystart="177" bodyend="237"/>
    <listofallmembers>
      <member refid="classarrow_1_1io_1_1_file_interface_1a0fa59fe92d3c99c9d9701210626aac60" prot="public" virt="virtual"><scope>arrow::io::RandomAccessFile</scope><name>Abort</name></member>
      <member refid="classarrow_1_1io_1_1_input_stream_1ab5e2e1bdb05f7847363461bc3b90d386" prot="public" virt="non-virtual"><scope>arrow::io::RandomAccessFile</scope><name>Advance</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1ae0f46d227a430af180576715e7aa0b78" prot="public" virt="pure-virtual"><scope>arrow::io::RandomAccessFile</scope><name>Close</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1a5ba1d2c3cec2e05e7b0018624f19c10b" prot="public" virt="pure-virtual"><scope>arrow::io::RandomAccessFile</scope><name>closed</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1afea9126bb21e3720212a826aa78b5534" prot="protected" virt="non-virtual"><scope>arrow::io::RandomAccessFile</scope><name>FileInterface</name></member>
      <member refid="classarrow_1_1io_1_1_random_access_file_1a2a476c2a6ad474e123d1aab20be289c4" prot="public" virt="pure-virtual"><scope>arrow::io::RandomAccessFile</scope><name>GetSize</name></member>
      <member refid="classarrow_1_1io_1_1_random_access_file_1a077348c5eb5ad0147582a3e5aa073847" prot="public" virt="non-virtual"><scope>arrow::io::RandomAccessFile</scope><name>GetStream</name></member>
      <member refid="classarrow_1_1io_1_1_input_stream_1aeb778572d0e9bf4902dbfbbc5353d7fd" prot="protected" virt="non-virtual"><scope>arrow::io::RandomAccessFile</scope><name>InputStream</name></member>
      <member refid="classarrow_1_1io_1_1_random_access_file_1a426aa576ed7b7f8885e91e4b6a1aedea" prot="private" virt="non-virtual"><scope>arrow::io::RandomAccessFile</scope><name>interface_impl_</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1a75a3739361570bb121b9adb04d5d8686" prot="public" virt="non-virtual"><scope>arrow::io::RandomAccessFile</scope><name>mode</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1a504d0410eb6066316365a4549d000ee0" prot="protected" virt="non-virtual"><scope>arrow::io::RandomAccessFile</scope><name>mode_</name></member>
      <member refid="classarrow_1_1io_1_1_input_stream_1aba80e2518abc166625077bd065ae3721" prot="public" virt="virtual"><scope>arrow::io::RandomAccessFile</scope><name>Peek</name></member>
      <member refid="classarrow_1_1io_1_1_random_access_file_1a32c1cb28aa86db601b68a96615a3161c" prot="protected" virt="non-virtual"><scope>arrow::io::RandomAccessFile</scope><name>RandomAccessFile</name></member>
      <member refid="classarrow_1_1io_1_1_random_access_file_1a143957ccff105aca1212849c5954071e" prot="private" virt="non-virtual"><scope>arrow::io::RandomAccessFile</scope><name>RandomAccessFileImpl</name></member>
      <member refid="classarrow_1_1io_1_1_readable_1ab94d6d47006df39f6cf77c078a61b8d8" prot="public" virt="pure-virtual"><scope>arrow::io::RandomAccessFile</scope><name>Read</name></member>
      <member refid="classarrow_1_1io_1_1_readable_1aca2d005299c3af1092bedff34b5b015b" prot="public" virt="pure-virtual"><scope>arrow::io::RandomAccessFile</scope><name>Read</name></member>
      <member refid="classarrow_1_1io_1_1_random_access_file_1ae37e086e71206380188a28fa5b125ac4" prot="public" virt="virtual"><scope>arrow::io::RandomAccessFile</scope><name>ReadAsync</name></member>
      <member refid="classarrow_1_1io_1_1_random_access_file_1adb9d40656e516d6b77ee2bdfc00126f3" prot="public" virt="virtual"><scope>arrow::io::RandomAccessFile</scope><name>ReadAt</name></member>
      <member refid="classarrow_1_1io_1_1_random_access_file_1a562433f2be06021acb9abd20bd5a8219" prot="public" virt="virtual"><scope>arrow::io::RandomAccessFile</scope><name>ReadAt</name></member>
      <member refid="classarrow_1_1io_1_1_seekable_1a410ba0e0932dbcb939b570ee3c8c6d25" prot="public" virt="pure-virtual"><scope>arrow::io::RandomAccessFile</scope><name>Seek</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1af3dd01a780076e39a34770beb513f71f" prot="protected" virt="non-virtual"><scope>arrow::io::RandomAccessFile</scope><name>set_mode</name></member>
      <member refid="classarrow_1_1io_1_1_input_stream_1a2b9978739db7fa75ba81e794bfba2a64" prot="public" virt="virtual"><scope>arrow::io::RandomAccessFile</scope><name>supports_zero_copy</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1ac6c6709147a46cd7f45d0779c1819ce6" prot="public" virt="pure-virtual"><scope>arrow::io::RandomAccessFile</scope><name>Tell</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1aa42dcdfad00634f01192b39f1d9b4929" prot="public" virt="pure-virtual"><scope>arrow::io::RandomAccessFile</scope><name>~FileInterface</name></member>
      <member refid="classarrow_1_1io_1_1_random_access_file_1a30c6917dfe0b6e508dac2ecc81917187" prot="public" virt="non-virtual"><scope>arrow::io::RandomAccessFile</scope><name>~RandomAccessFile</name></member>
      <member refid="classarrow_1_1io_1_1_readable_1a96a411d4494a9872d7eef4f8bb6396b4" prot="public" virt="virtual"><scope>arrow::io::RandomAccessFile</scope><name>~Readable</name></member>
      <member refid="classarrow_1_1io_1_1_seekable_1a7642c30d2f852e0f79fec036a94ca093" prot="public" virt="virtual"><scope>arrow::io::RandomAccessFile</scope><name>~Seekable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
