<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_as_completed_iterator" kind="class" language="C++" prot="public">
    <compoundname>arrow::AsCompletedIterator</compoundname>
    <includes refid="future__iterator_8h" local="no">arrow/util/future_iterator.h</includes>
    <templateparamlist>
      <param>
        <type>typename T</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classarrow_1_1_as_completed_iterator_1afe2a19d6e04ca6873dcc1fed21fa99c7" prot="private" static="no" mutable="no">
        <type>size_t</type>
        <definition>size_t arrow::AsCompletedIterator&lt; T &gt;::n_fetched_</definition>
        <argsstring></argsstring>
        <name>n_fetched_</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/future_iterator.h" line="65" column="1" bodyfile="/arrow/cpp/src/arrow/util/future_iterator.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_as_completed_iterator_1a8858e254719cf5b73203816f8d7e141d" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classarrow_1_1_future" kindref="compound">Future</ref>&lt; T &gt; &gt;</type>
        <definition>std::vector&lt;Future&lt;T&gt; &gt; arrow::AsCompletedIterator&lt; T &gt;::futures_</definition>
        <argsstring></argsstring>
        <name>futures_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/future_iterator.h" line="66" column="1" bodyfile="/arrow/cpp/src/arrow/util/future_iterator.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_as_completed_iterator_1aef8cbf33768327ee29cd6521a1bab513" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classarrow_1_1_future_waiter" kindref="compound">FutureWaiter</ref> &gt;</type>
        <definition>std::unique_ptr&lt;FutureWaiter&gt; arrow::AsCompletedIterator&lt; T &gt;::waiter_</definition>
        <argsstring></argsstring>
        <name>waiter_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/future_iterator.h" line="67" column="1" bodyfile="/arrow/cpp/src/arrow/util/future_iterator.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1_as_completed_iterator_1ad3c49662db4083aa511fd87e82dee78a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::AsCompletedIterator&lt; T &gt;::AsCompletedIterator</definition>
        <argsstring>()</argsstring>
        <name>AsCompletedIterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/future_iterator.h" line="38" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_as_completed_iterator_1ad998989b61685044c3907f5d0f7981a0" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::AsCompletedIterator&lt; T &gt;::AsCompletedIterator</definition>
        <argsstring>(std::vector&lt; Future&lt; T &gt;&gt; futures)</argsstring>
        <name>AsCompletedIterator</name>
        <param>
          <type>std::vector&lt; <ref refid="classarrow_1_1_future" kindref="compound">Future</ref>&lt; T &gt;&gt;</type>
          <declname>futures</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/future_iterator.h" line="40" column="1" bodyfile="/arrow/cpp/src/arrow/util/future_iterator.h" bodystart="40" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_as_completed_iterator_1afb2af28e5728a2e89ef23f0bc1deba7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::AsCompletedIterator&lt; T &gt;::ARROW_DEFAULT_MOVE_AND_ASSIGN</definition>
        <argsstring>(AsCompletedIterator)</argsstring>
        <name>ARROW_DEFAULT_MOVE_AND_ASSIGN</name>
        <param>
          <type><ref refid="classarrow_1_1_as_completed_iterator" kindref="compound">AsCompletedIterator</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/future_iterator.h" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_as_completed_iterator_1a9893c439053dfb95573e4f8742c8701e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::AsCompletedIterator&lt; T &gt;::ARROW_DISALLOW_COPY_AND_ASSIGN</definition>
        <argsstring>(AsCompletedIterator)</argsstring>
        <name>ARROW_DISALLOW_COPY_AND_ASSIGN</name>
        <param>
          <type><ref refid="classarrow_1_1_as_completed_iterator" kindref="compound">AsCompletedIterator</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/future_iterator.h" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_as_completed_iterator_1a0da760e0dd91658e54786ca831acbda7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; T &gt;</type>
        <definition>Result&lt;T&gt; arrow::AsCompletedIterator&lt; T &gt;::Next</definition>
        <argsstring>()</argsstring>
        <name>Next</name>
        <briefdescription>
<para>Return the results of the first completed, not-yet-returned <ref refid="classarrow_1_1_future" kindref="compound">Future</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>The result can be successful or not, depending on the <ref refid="classarrow_1_1_future" kindref="compound">Future</ref>&apos;s underlying task&apos;s result. Even if a <ref refid="classarrow_1_1_future" kindref="compound">Future</ref> returns a failed <ref refid="classarrow_1_1_result" kindref="compound">Result</ref>, you can still call <ref refid="classarrow_1_1_as_completed_iterator_1a0da760e0dd91658e54786ca831acbda7" kindref="member">Next()</ref> to get further results. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/future_iterator.h" line="52" column="1" bodyfile="/arrow/cpp/src/arrow/util/future_iterator.h" bodystart="52" bodyend="62"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An iterator that takes a set of futures, and yields their results as they are completed, in any order. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/arrow/util/future_iterator.h" line="35" column="1" bodyfile="/arrow/cpp/src/arrow/util/future_iterator.h" bodystart="35" bodyend="68"/>
    <listofallmembers>
      <member refid="classarrow_1_1_as_completed_iterator_1afb2af28e5728a2e89ef23f0bc1deba7b" prot="public" virt="non-virtual"><scope>arrow::AsCompletedIterator</scope><name>ARROW_DEFAULT_MOVE_AND_ASSIGN</name></member>
      <member refid="classarrow_1_1_as_completed_iterator_1a9893c439053dfb95573e4f8742c8701e" prot="public" virt="non-virtual"><scope>arrow::AsCompletedIterator</scope><name>ARROW_DISALLOW_COPY_AND_ASSIGN</name></member>
      <member refid="classarrow_1_1_as_completed_iterator_1ad3c49662db4083aa511fd87e82dee78a" prot="public" virt="non-virtual"><scope>arrow::AsCompletedIterator</scope><name>AsCompletedIterator</name></member>
      <member refid="classarrow_1_1_as_completed_iterator_1ad998989b61685044c3907f5d0f7981a0" prot="public" virt="non-virtual"><scope>arrow::AsCompletedIterator</scope><name>AsCompletedIterator</name></member>
      <member refid="classarrow_1_1_as_completed_iterator_1a8858e254719cf5b73203816f8d7e141d" prot="private" virt="non-virtual"><scope>arrow::AsCompletedIterator</scope><name>futures_</name></member>
      <member refid="classarrow_1_1_as_completed_iterator_1afe2a19d6e04ca6873dcc1fed21fa99c7" prot="private" virt="non-virtual"><scope>arrow::AsCompletedIterator</scope><name>n_fetched_</name></member>
      <member refid="classarrow_1_1_as_completed_iterator_1a0da760e0dd91658e54786ca831acbda7" prot="public" virt="non-virtual"><scope>arrow::AsCompletedIterator</scope><name>Next</name></member>
      <member refid="classarrow_1_1_as_completed_iterator_1aef8cbf33768327ee29cd6521a1bab513" prot="private" virt="non-virtual"><scope>arrow::AsCompletedIterator</scope><name>waiter_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
