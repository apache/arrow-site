<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="md_tutorials_tensor_to_py" kind="page">
    <compoundname>md_tutorials_tensor_to_py</compoundname>
    <title>tensor_to_py</title>
    <detaileddescription>
<para><heading level="1">Use Plasma to Access Tensors from C++ in Python </heading>
</para><para>This short tutorial shows how to use Arrow and the Plasma Store to send data from C++ to Python.</para><para>In detail, we will show how to:<orderedlist>
<listitem><para>Serialize a floating-point array in C++ into an Arrow tensor</para></listitem><listitem><para>Save the Arrow tensor to Plasma</para></listitem><listitem><para>Access the Tensor in a Python process</para></listitem></orderedlist>
</para><para>This approach has the advantage that multiple python processes can all read the tensor with zero-copy. Therefore, only one copy is necessary when we send a tensor from one C++ process to many python processes.</para><para><heading level="2">Step 0: Set up </heading>
</para><para>We will include the following header files and construct a Plasma client.</para><para><programlisting><codeline><highlight class="preprocessor">#include<sp/>&lt;<ref refid="plasma_2client_8h" kindref="compound">plasma/client.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="tensor_8h" kindref="compound">arrow/tensor.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="array_8h" kindref="compound">arrow/array.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="buffer_8h" kindref="compound">arrow/buffer.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="io_2memory_8h" kindref="compound">arrow/io/memory.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="arrow_2ipc_2writer_8h" kindref="compound">arrow/ipc/writer.h</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">PlasmaClient<sp/>client_;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="arrow_2util_2logging_8h_1ab1dca026b4840fea1e82df4c176de6b3" kindref="member">ARROW_CHECK_OK</ref>(client_.Connect(</highlight><highlight class="stringliteral">&quot;/tmp/plasma&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">,<sp/>0));</highlight></codeline>
</programlisting></para><para><heading level="2">Step 1: Serialize a floating point array in C++ into an Arrow Tensor </heading>
</para><para>In this step, we will construct a floating-point array in C++.</para><para><programlisting><codeline><highlight class="comment">//<sp/>Generate<sp/>an<sp/>Object<sp/>ID<sp/>for<sp/>Plasma</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref><sp/>object_id<sp/>=<sp/>ObjectID::from_binary(</highlight><highlight class="stringliteral">&quot;11111111111111111111&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generate<sp/>Float<sp/>Array</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">int64_t<sp/>input_length<sp/>=<sp/>1000;</highlight></codeline>
<codeline><highlight class="normal">std::vector&lt;float&gt;<sp/>input(input_length);</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>input_length;<sp/>++i)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>input[i]<sp/>=<sp/>2.0;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>Arrow<sp/>Tensor<sp/>Object,<sp/>no<sp/>copy<sp/>made!</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>{input_length}<sp/>is<sp/>the<sp/>shape<sp/>of<sp/>the<sp/>tensor</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value_buffer<sp/>=<sp/>Buffer::Wrap&lt;float&gt;(input);</highlight></codeline>
<codeline><highlight class="normal">Tensor<sp/>t(<ref refid="group__type-factories_1ga48fca9d26feda61c8255ec3c44a2078c" kindref="member">float32</ref>(),<sp/>value_buffer,<sp/>{input_length});</highlight></codeline>
</programlisting></para><para><heading level="2">Step 2: Save the Arrow Tensor to Plasma In-Memory Object Store </heading>
</para><para>Continuing from Step 1, this step will save the tensor to Plasma Store. We use <computeroutput><ref refid="namespacearrow_1_1ipc_1aab7e08532aec7267dac70e923df75e52" kindref="member">arrow::ipc::WriteTensor</ref></computeroutput> to write the data.</para><para>The variable <computeroutput>meta_len</computeroutput> will contain the length of the tensor metadata after the call to <computeroutput><ref refid="namespacearrow_1_1ipc_1aab7e08532aec7267dac70e923df75e52" kindref="member">arrow::ipc::WriteTensor</ref></computeroutput>.</para><para><programlisting><codeline><highlight class="comment">//<sp/>Get<sp/>the<sp/>size<sp/>of<sp/>the<sp/>tensor<sp/>to<sp/>be<sp/>stored<sp/>in<sp/>Plasma</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">int64_t<sp/>datasize;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="arrow_2util_2logging_8h_1ab1dca026b4840fea1e82df4c176de6b3" kindref="member">ARROW_CHECK_OK</ref>(<ref refid="namespacearrow_1_1ipc_1a8358a45c7dd8605f8ad5af4cb3216602" kindref="member">ipc::GetTensorSize</ref>(t,<sp/>&amp;datasize));</highlight></codeline>
<codeline><highlight class="normal">int32_t<sp/>meta_len<sp/>=<sp/>0;</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Create<sp/>the<sp/>Plasma<sp/>Object</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Plasma<sp/>is<sp/>responsible<sp/>for<sp/>initializing<sp/>and<sp/>resizing<sp/>the<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>buffer<sp/>will<sp/>contain<sp/>the<sp/>_serialized_<sp/>tensor</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">std::shared_ptr&lt;Buffer&gt;<sp/>buffer;</highlight></codeline>
<codeline><highlight class="normal"><ref refid="arrow_2util_2logging_8h_1ab1dca026b4840fea1e82df4c176de6b3" kindref="member">ARROW_CHECK_OK</ref>(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>client_.Create(object_id,<sp/>datasize,<sp/>NULL,<sp/>0,<sp/>&amp;buffer));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Writing<sp/>Process,<sp/>this<sp/>will<sp/>copy<sp/>the<sp/>tensor<sp/>into<sp/>Plasma</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal">io::FixedSizeBufferWriter<sp/>stream(buffer);</highlight></codeline>
<codeline><highlight class="normal"><ref refid="arrow_2util_2logging_8h_1ab1dca026b4840fea1e82df4c176de6b3" kindref="member">ARROW_CHECK_OK</ref>(<ref refid="namespacearrow_1_1ipc_1aab7e08532aec7267dac70e923df75e52" kindref="member">arrow::ipc::WriteTensor</ref>(t,<sp/>&amp;stream,<sp/>&amp;meta_len,<sp/>&amp;datasize));</highlight></codeline>
<codeline><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>Seal<sp/>Plasma<sp/>Object</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>computes<sp/>a<sp/>hash<sp/>of<sp/>the<sp/>object<sp/>data<sp/>by<sp/>default</highlight><highlight class="normal"></highlight></codeline>
<codeline><highlight class="normal"><ref refid="arrow_2util_2logging_8h_1ab1dca026b4840fea1e82df4c176de6b3" kindref="member">ARROW_CHECK_OK</ref>(client_.Seal(object_id));</highlight></codeline>
</programlisting></para><para><heading level="2">Step 3: Access the Tensor in a Python Process </heading>
</para><para>In Python, we will construct a Plasma client and point it to the store&apos;s socket. The <computeroutput>inputs</computeroutput> variable will be a list of Object IDs in their raw byte string form.</para><para><programlisting><codeline><highlight class="normal">import<sp/>pyarrow<sp/>as<sp/>pa</highlight></codeline>
<codeline><highlight class="normal">import<sp/>pyarrow.plasma<sp/>as<sp/>plasma</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">plasma_client<sp/>=<sp/>plasma.connect(&apos;/tmp/plasma&apos;)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>inputs:<sp/>a<sp/>list<sp/>of<sp/>object<sp/>ids</highlight></codeline>
<codeline><highlight class="normal">inputs<sp/>=<sp/>[20<sp/>*<sp/>b&apos;1&apos;]</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Construct<sp/>Object<sp/>ID<sp/>and<sp/>perform<sp/>a<sp/>batch<sp/>get</highlight></codeline>
<codeline><highlight class="normal">object_ids<sp/>=<sp/>[plasma.ObjectID(inp)<sp/>for<sp/>inp<sp/>in<sp/>inputs]</highlight></codeline>
<codeline><highlight class="normal">buffers<sp/>=<sp/>plasma_client.get_buffers(object_ids)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>Read<sp/>the<sp/>tensor<sp/>and<sp/>convert<sp/>to<sp/>numpy<sp/>array<sp/>for<sp/>each<sp/>object</highlight></codeline>
<codeline><highlight class="normal">arrs<sp/>=<sp/>[]</highlight></codeline>
<codeline><highlight class="normal">for<sp/>buffer<sp/>in<sp/>buffers:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>reader<sp/>=<sp/>pa.BufferReader(buffer)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>t<sp/>=<sp/>pa.read_tensor(reader)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>arr<sp/>=<sp/>t.to_numpy()</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>arrs.append(arr)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">#<sp/>arrs<sp/>is<sp/>now<sp/>a<sp/>list<sp/>of<sp/>numpy<sp/>arrays</highlight></codeline>
<codeline><highlight class="normal">assert<sp/>np.all(arrs[0]<sp/>==<sp/>2.0<sp/>*<sp/>np.ones(1000,<sp/>dtype=&quot;float32&quot;))</highlight></codeline>
</programlisting> </para>    </detaileddescription>
  </compounddef>
</doxygen>
