<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classparquet_1_1arrow_1_1_file_reader" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>parquet::arrow::FileReader</compoundname>
    <includes refid="parquet_2arrow_2reader_8h" local="no">parquet/arrow/reader.h</includes>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classparquet_1_1arrow_1_1_file_reader_1a5e912e47118acc10842cd0c8d6503ce7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::<ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>::arrow::Status parquet::arrow::FileReader::Make</definition>
        <argsstring>(::arrow::MemoryPool *pool, std::unique_ptr&lt; ParquetFileReader &gt; reader, const ArrowReaderProperties &amp;properties, std::unique_ptr&lt; FileReader &gt; *out)</argsstring>
        <name>Make</name>
        <param>
          <type>::<ref refid="classarrow_1_1_memory_pool" kindref="compound">arrow::MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classparquet_1_1_parquet_file_reader" kindref="compound">ParquetFileReader</ref> &gt;</type>
          <declname>reader</declname>
        </param>
        <param>
          <type>const <ref refid="classparquet_1_1_arrow_reader_properties" kindref="compound">ArrowReaderProperties</ref> &amp;</type>
          <declname>properties</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classparquet_1_1arrow_1_1_file_reader" kindref="compound">FileReader</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Factory function to create a <ref refid="classparquet_1_1arrow_1_1_file_reader" kindref="compound">FileReader</ref> from a <ref refid="classparquet_1_1_parquet_file_reader" kindref="compound">ParquetFileReader</ref> and properties. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/reader.h" line="109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1arrow_1_1_file_reader_1a4e08b4f70d3882cd076fed8cb7517219" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::<ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>::arrow::Status parquet::arrow::FileReader::Make</definition>
        <argsstring>(::arrow::MemoryPool *pool, std::unique_ptr&lt; ParquetFileReader &gt; reader, std::unique_ptr&lt; FileReader &gt; *out)</argsstring>
        <name>Make</name>
        <param>
          <type>::<ref refid="classarrow_1_1_memory_pool" kindref="compound">arrow::MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classparquet_1_1_parquet_file_reader" kindref="compound">ParquetFileReader</ref> &gt;</type>
          <declname>reader</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classparquet_1_1arrow_1_1_file_reader" kindref="compound">FileReader</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Factory function to create a <ref refid="classparquet_1_1arrow_1_1_file_reader" kindref="compound">FileReader</ref> from a <ref refid="classparquet_1_1_parquet_file_reader" kindref="compound">ParquetFileReader</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/reader.h" line="115" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classparquet_1_1arrow_1_1_file_reader_1accee950e8764855672bd8ae66e4da85e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>::<ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>virtual ::arrow::Status parquet::arrow::FileReader::GetColumn</definition>
        <argsstring>(int i, std::unique_ptr&lt; ColumnReader &gt; *out)=0</argsstring>
        <name>GetColumn</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classparquet_1_1arrow_1_1_column_reader" kindref="compound">ColumnReader</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/reader.h" line="126" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1arrow_1_1_file_reader_1a0be508d6f33486e7d18cfeaeeb9e0c5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>::<ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>virtual ::arrow::Status parquet::arrow::FileReader::GetSchema</definition>
        <argsstring>(std::shared_ptr&lt;::arrow::Schema &gt; *out)=0</argsstring>
        <name>GetSchema</name>
        <param>
          <type>std::shared_ptr&lt;::<ref refid="classarrow_1_1_schema" kindref="compound">arrow::Schema</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Return arrow schema for all the columns. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/reader.h" line="129" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1arrow_1_1_file_reader_1a57e775ac7a5a34ea134f6a44b756e6ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>::<ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>virtual ::arrow::Status parquet::arrow::FileReader::ReadColumn</definition>
        <argsstring>(int i, std::shared_ptr&lt;::arrow::ChunkedArray &gt; *out)=0</argsstring>
        <name>ReadColumn</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt;::<ref refid="classarrow_1_1_chunked_array" kindref="compound">arrow::ChunkedArray</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Read column as a whole into a chunked array. </para>        </briefdescription>
        <detaileddescription>
<para>The indicated column index is relative to the schema </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/reader.h" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1arrow_1_1_file_reader_1aef545f91961b8cb72cab1ca9c903c34b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>::<ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>virtual ::arrow::Status parquet::arrow::FileReader::ReadSchemaField</definition>
        <argsstring>(int i, std::shared_ptr&lt;::arrow::ChunkedArray &gt; *out)=0</argsstring>
        <name>ReadSchemaField</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt;::<ref refid="classarrow_1_1_chunked_array" kindref="compound">arrow::ChunkedArray</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/reader.h" line="149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1arrow_1_1_file_reader_1ab933cf50515812a9f2929d978b469f3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>::<ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>virtual ::arrow::Status parquet::arrow::FileReader::GetRecordBatchReader</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;row_group_indices, std::unique_ptr&lt;::arrow::RecordBatchReader &gt; *out)=0</argsstring>
        <name>GetRecordBatchReader</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>row_group_indices</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt;::<ref refid="classarrow_1_1_record_batch_reader" kindref="compound">arrow::RecordBatchReader</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Return a RecordBatchReader of row groups selected from row_group_indices, the ordering in row_group_indices matters. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>error Status if row_group_indices contains invalid index </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/reader.h" line="155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1arrow_1_1_file_reader_1a6cf188e1da09adc46dc785052d9d7341" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::<ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>::arrow::Status parquet::arrow::FileReader::GetRecordBatchReader</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;row_group_indices, std::shared_ptr&lt;::arrow::RecordBatchReader &gt; *out)</argsstring>
        <name>GetRecordBatchReader</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>row_group_indices</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt;::<ref refid="classarrow_1_1_record_batch_reader" kindref="compound">arrow::RecordBatchReader</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/reader.h" line="159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1arrow_1_1_file_reader_1ac73dd5ee6ce2424a173c57e638553c3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>::<ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>virtual ::arrow::Status parquet::arrow::FileReader::GetRecordBatchReader</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;row_group_indices, const std::vector&lt; int &gt; &amp;column_indices, std::unique_ptr&lt;::arrow::RecordBatchReader &gt; *out)=0</argsstring>
        <name>GetRecordBatchReader</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>row_group_indices</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>column_indices</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt;::<ref refid="classarrow_1_1_record_batch_reader" kindref="compound">arrow::RecordBatchReader</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Return a RecordBatchReader of row groups selected from row_group_indices, whose columns are selected by column_indices. </para>        </briefdescription>
        <detaileddescription>
<para>The ordering in row_group_indices and column_indices matter. <simplesect kind="return"><para>error Status if either row_group_indices or column_indices contains invalid index </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/reader.h" line="167" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1arrow_1_1_file_reader_1adbaf13dcddef534c5cca878fb091721c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::<ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>::arrow::Status parquet::arrow::FileReader::GetRecordBatchReader</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;row_group_indices, const std::vector&lt; int &gt; &amp;column_indices, std::shared_ptr&lt;::arrow::RecordBatchReader &gt; *out)</argsstring>
        <name>GetRecordBatchReader</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>row_group_indices</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>column_indices</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt;::<ref refid="classarrow_1_1_record_batch_reader" kindref="compound">arrow::RecordBatchReader</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/reader.h" line="171" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1arrow_1_1_file_reader_1ad6021ee16527fcb3256bf84db5270c89" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>::<ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>virtual ::arrow::Status parquet::arrow::FileReader::ReadTable</definition>
        <argsstring>(std::shared_ptr&lt;::arrow::Table &gt; *out)=0</argsstring>
        <name>ReadTable</name>
        <param>
          <type>std::shared_ptr&lt;::<ref refid="classarrow_1_1_table" kindref="compound">arrow::Table</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Read all columns into a Table. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/reader.h" line="176" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1arrow_1_1_file_reader_1aabacd8d763165c26b7105a4d3f523015" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>::<ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>virtual ::arrow::Status parquet::arrow::FileReader::ReadTable</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;column_indices, std::shared_ptr&lt;::arrow::Table &gt; *out)=0</argsstring>
        <name>ReadTable</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>column_indices</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt;::<ref refid="classarrow_1_1_table" kindref="compound">arrow::Table</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Read the given columns into a Table. </para>        </briefdescription>
        <detaileddescription>
<para>The indicated column indices are relative to the schema </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/reader.h" line="181" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1arrow_1_1_file_reader_1a58a5d4558b344d5b1b3bc2d5a4232676" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>::<ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>virtual ::arrow::Status parquet::arrow::FileReader::ReadRowGroup</definition>
        <argsstring>(int i, const std::vector&lt; int &gt; &amp;column_indices, std::shared_ptr&lt;::arrow::Table &gt; *out)=0</argsstring>
        <name>ReadRowGroup</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>column_indices</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt;::<ref refid="classarrow_1_1_table" kindref="compound">arrow::Table</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/reader.h" line="184" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1arrow_1_1_file_reader_1a3a1d82fb6b99bd38eb80ecbd72e887e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>::<ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>virtual ::arrow::Status parquet::arrow::FileReader::ReadRowGroup</definition>
        <argsstring>(int i, std::shared_ptr&lt;::arrow::Table &gt; *out)=0</argsstring>
        <name>ReadRowGroup</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt;::<ref refid="classarrow_1_1_table" kindref="compound">arrow::Table</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/reader.h" line="187" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1arrow_1_1_file_reader_1ad0891b86398d4289fa05924a4541287c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>::<ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>virtual ::arrow::Status parquet::arrow::FileReader::ReadRowGroups</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;row_groups, const std::vector&lt; int &gt; &amp;column_indices, std::shared_ptr&lt;::arrow::Table &gt; *out)=0</argsstring>
        <name>ReadRowGroups</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>row_groups</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>column_indices</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt;::<ref refid="classarrow_1_1_table" kindref="compound">arrow::Table</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/reader.h" line="189" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1arrow_1_1_file_reader_1a4133978e882e84fad26c2c210e373882" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>::<ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>virtual ::arrow::Status parquet::arrow::FileReader::ReadRowGroups</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;row_groups, std::shared_ptr&lt;::arrow::Table &gt; *out)=0</argsstring>
        <name>ReadRowGroups</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>row_groups</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt;::<ref refid="classarrow_1_1_table" kindref="compound">arrow::Table</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/reader.h" line="193" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1arrow_1_1_file_reader_1a917bd33c68db9b361cca6973af10a3dd" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>::<ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>virtual ::arrow::Status parquet::arrow::FileReader::ScanContents</definition>
        <argsstring>(std::vector&lt; int &gt; columns, const int32_t column_batch_size, int64_t *num_rows)=0</argsstring>
        <name>ScanContents</name>
        <param>
          <type>std::vector&lt; int &gt;</type>
          <declname>columns</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>column_batch_size</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>num_rows</declname>
        </param>
        <briefdescription>
<para>Scan file contents with one thread, return number of rows. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/reader.h" line="197" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1arrow_1_1_file_reader_1ac8809a912fe26d46d1c7699407e0171b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::shared_ptr&lt; <ref refid="classparquet_1_1arrow_1_1_row_group_reader" kindref="compound">RowGroupReader</ref> &gt;</type>
        <definition>virtual std::shared_ptr&lt;RowGroupReader&gt; parquet::arrow::FileReader::RowGroup</definition>
        <argsstring>(int row_group_index)=0</argsstring>
        <name>RowGroup</name>
        <param>
          <type>int</type>
          <declname>row_group_index</declname>
        </param>
        <briefdescription>
<para>Return a reader for the RowGroup, this object must not outlive the <ref refid="classparquet_1_1arrow_1_1_file_reader" kindref="compound">FileReader</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/reader.h" line="203" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1arrow_1_1_file_reader_1a26928cf6c947427eda01d44517e1d7bb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>int</type>
        <definition>virtual int parquet::arrow::FileReader::num_row_groups</definition>
        <argsstring>() const =0</argsstring>
        <name>num_row_groups</name>
        <briefdescription>
<para>The number of row groups in the file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/reader.h" line="206" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1arrow_1_1_file_reader_1aac2c1b4d614804766381b863870cfc32" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classparquet_1_1_parquet_file_reader" kindref="compound">ParquetFileReader</ref> *</type>
        <definition>virtual ParquetFileReader* parquet::arrow::FileReader::parquet_reader</definition>
        <argsstring>() const =0</argsstring>
        <name>parquet_reader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/reader.h" line="208" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1arrow_1_1_file_reader_1a7a6ae348156375ebc2b5c99ceb0daa09" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void parquet::arrow::FileReader::set_use_threads</definition>
        <argsstring>(bool use_threads)=0</argsstring>
        <name>set_use_threads</name>
        <param>
          <type>bool</type>
          <declname>use_threads</declname>
        </param>
        <briefdescription>
<para>Set whether to use multiple threads during reads of multiple columns. </para>        </briefdescription>
        <detaileddescription>
<para>By default only one thread is used. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/reader.h" line="212" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1arrow_1_1_file_reader_1a23e08a9bcbf4a66c795afcc5dac2067d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual parquet::arrow::FileReader::~FileReader</definition>
        <argsstring>()=default</argsstring>
        <name>~FileReader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/reader.h" line="214" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Arrow read adapter class for deserializing Parquet files as Arrow row batches. </para>    </briefdescription>
    <detaileddescription>
<para>This interfaces caters for different use cases and thus provides different interfaces. In its most simplistic form, we cater for a user that wants to read the whole Parquet at once with the <computeroutput><ref refid="classparquet_1_1arrow_1_1_file_reader_1ad6021ee16527fcb3256bf84db5270c89" kindref="member">FileReader::ReadTable</ref></computeroutput> method.</para><para>More advanced users that also want to implement parallelism on top of each single Parquet files should do this on the RowGroup level. For this, they can call <computeroutput>FileReader::RowGroup(i)-&gt;ReadTable</computeroutput> to receive only the specified RowGroup as a table.</para><para>In the most advanced situation, where a consumer wants to independently read RowGroups in parallel and consume each column individually, they can call <computeroutput>FileReader::RowGroup(i)-&gt;Column(j)-&gt;Read</computeroutput> and receive an <computeroutput>arrow::Column</computeroutput> instance. </para>    </detaileddescription>
    <location file="/arrow/cpp/src/parquet/arrow/reader.h" line="106" column="1" bodyfile="/arrow/cpp/src/parquet/arrow/reader.h" bodystart="106" bodyend="215"/>
    <listofallmembers>
      <member refid="classparquet_1_1arrow_1_1_file_reader_1accee950e8764855672bd8ae66e4da85e" prot="public" virt="pure-virtual"><scope>parquet::arrow::FileReader</scope><name>GetColumn</name></member>
      <member refid="classparquet_1_1arrow_1_1_file_reader_1ab933cf50515812a9f2929d978b469f3a" prot="public" virt="pure-virtual"><scope>parquet::arrow::FileReader</scope><name>GetRecordBatchReader</name></member>
      <member refid="classparquet_1_1arrow_1_1_file_reader_1a6cf188e1da09adc46dc785052d9d7341" prot="public" virt="non-virtual"><scope>parquet::arrow::FileReader</scope><name>GetRecordBatchReader</name></member>
      <member refid="classparquet_1_1arrow_1_1_file_reader_1ac73dd5ee6ce2424a173c57e638553c3d" prot="public" virt="pure-virtual"><scope>parquet::arrow::FileReader</scope><name>GetRecordBatchReader</name></member>
      <member refid="classparquet_1_1arrow_1_1_file_reader_1adbaf13dcddef534c5cca878fb091721c" prot="public" virt="non-virtual"><scope>parquet::arrow::FileReader</scope><name>GetRecordBatchReader</name></member>
      <member refid="classparquet_1_1arrow_1_1_file_reader_1a0be508d6f33486e7d18cfeaeeb9e0c5b" prot="public" virt="pure-virtual"><scope>parquet::arrow::FileReader</scope><name>GetSchema</name></member>
      <member refid="classparquet_1_1arrow_1_1_file_reader_1a5e912e47118acc10842cd0c8d6503ce7" prot="public" virt="non-virtual"><scope>parquet::arrow::FileReader</scope><name>Make</name></member>
      <member refid="classparquet_1_1arrow_1_1_file_reader_1a4e08b4f70d3882cd076fed8cb7517219" prot="public" virt="non-virtual"><scope>parquet::arrow::FileReader</scope><name>Make</name></member>
      <member refid="classparquet_1_1arrow_1_1_file_reader_1a26928cf6c947427eda01d44517e1d7bb" prot="public" virt="pure-virtual"><scope>parquet::arrow::FileReader</scope><name>num_row_groups</name></member>
      <member refid="classparquet_1_1arrow_1_1_file_reader_1aac2c1b4d614804766381b863870cfc32" prot="public" virt="pure-virtual"><scope>parquet::arrow::FileReader</scope><name>parquet_reader</name></member>
      <member refid="classparquet_1_1arrow_1_1_file_reader_1a57e775ac7a5a34ea134f6a44b756e6ed" prot="public" virt="pure-virtual"><scope>parquet::arrow::FileReader</scope><name>ReadColumn</name></member>
      <member refid="classparquet_1_1arrow_1_1_file_reader_1a58a5d4558b344d5b1b3bc2d5a4232676" prot="public" virt="pure-virtual"><scope>parquet::arrow::FileReader</scope><name>ReadRowGroup</name></member>
      <member refid="classparquet_1_1arrow_1_1_file_reader_1a3a1d82fb6b99bd38eb80ecbd72e887e9" prot="public" virt="pure-virtual"><scope>parquet::arrow::FileReader</scope><name>ReadRowGroup</name></member>
      <member refid="classparquet_1_1arrow_1_1_file_reader_1ad0891b86398d4289fa05924a4541287c" prot="public" virt="pure-virtual"><scope>parquet::arrow::FileReader</scope><name>ReadRowGroups</name></member>
      <member refid="classparquet_1_1arrow_1_1_file_reader_1a4133978e882e84fad26c2c210e373882" prot="public" virt="pure-virtual"><scope>parquet::arrow::FileReader</scope><name>ReadRowGroups</name></member>
      <member refid="classparquet_1_1arrow_1_1_file_reader_1aef545f91961b8cb72cab1ca9c903c34b" prot="public" virt="pure-virtual"><scope>parquet::arrow::FileReader</scope><name>ReadSchemaField</name></member>
      <member refid="classparquet_1_1arrow_1_1_file_reader_1ad6021ee16527fcb3256bf84db5270c89" prot="public" virt="pure-virtual"><scope>parquet::arrow::FileReader</scope><name>ReadTable</name></member>
      <member refid="classparquet_1_1arrow_1_1_file_reader_1aabacd8d763165c26b7105a4d3f523015" prot="public" virt="pure-virtual"><scope>parquet::arrow::FileReader</scope><name>ReadTable</name></member>
      <member refid="classparquet_1_1arrow_1_1_file_reader_1ac8809a912fe26d46d1c7699407e0171b" prot="public" virt="pure-virtual"><scope>parquet::arrow::FileReader</scope><name>RowGroup</name></member>
      <member refid="classparquet_1_1arrow_1_1_file_reader_1a917bd33c68db9b361cca6973af10a3dd" prot="public" virt="pure-virtual"><scope>parquet::arrow::FileReader</scope><name>ScanContents</name></member>
      <member refid="classparquet_1_1arrow_1_1_file_reader_1a7a6ae348156375ebc2b5c99ceb0daa09" prot="public" virt="pure-virtual"><scope>parquet::arrow::FileReader</scope><name>set_use_threads</name></member>
      <member refid="classparquet_1_1arrow_1_1_file_reader_1a23e08a9bcbf4a66c795afcc5dac2067d" prot="public" virt="virtual"><scope>parquet::arrow::FileReader</scope><name>~FileReader</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
