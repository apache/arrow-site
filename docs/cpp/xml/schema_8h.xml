<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="schema_8h" kind="file" language="C++">
    <compoundname>schema.h</compoundname>
    <includes local="no">cstdint</includes>
    <includes local="no">memory</includes>
    <includes local="no">ostream</includes>
    <includes local="no">string</includes>
    <includes local="no">unordered_map</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes refid="parquet_2platform_8h" local="yes">parquet/platform.h</includes>
    <includes refid="parquet_2types_8h" local="yes">parquet/types.h</includes>
    <includedby refid="api_2schema_8h" local="yes">/arrow/cpp/src/parquet/api/schema.h</includedby>
    <includedby refid="reader__internal_8h" local="yes">/arrow/cpp/src/parquet/arrow/reader_internal.h</includedby>
    <includedby refid="arrow_2schema_8h" local="yes">/arrow/cpp/src/parquet/arrow/schema.h</includedby>
    <includedby refid="column__reader_8h" local="yes">/arrow/cpp/src/parquet/column_reader.h</includedby>
    <includedby refid="column__scanner_8h" local="yes">/arrow/cpp/src/parquet/column_scanner.h</includedby>
    <includedby refid="encryption_8h" local="yes">/arrow/cpp/src/parquet/encryption.h</includedby>
    <includedby refid="file__writer_8h" local="yes">/arrow/cpp/src/parquet/file_writer.h</includedby>
    <includedby refid="internal__file__decryptor_8h" local="yes">/arrow/cpp/src/parquet/internal_file_decryptor.h</includedby>
    <includedby refid="internal__file__encryptor_8h" local="yes">/arrow/cpp/src/parquet/internal_file_encryptor.h</includedby>
    <includedby refid="metadata_8h" local="yes">/arrow/cpp/src/parquet/metadata.h</includedby>
    <includedby refid="parquet_2pch_8h" local="yes">/arrow/cpp/src/parquet/pch.h</includedby>
    <includedby refid="properties_8h" local="yes">/arrow/cpp/src/parquet/properties.h</includedby>
    <includedby refid="schema__internal_8h" local="yes">/arrow/cpp/src/parquet/schema_internal.h</includedby>
    <incdepgraph>
      <node id="18589">
        <label>atomic</label>
      </node>
      <node id="18576">
        <label>arrow/util/compare.h</label>
        <link refid="util_2compare_8h"/>
        <childnode refid="18561" relation="include">
        </childnode>
        <childnode refid="18570" relation="include">
        </childnode>
        <childnode refid="18565" relation="include">
        </childnode>
        <childnode refid="18574" relation="include">
        </childnode>
      </node>
      <node id="18597">
        <label>limits</label>
      </node>
      <node id="18560">
        <label>cstdint</label>
      </node>
      <node id="18568">
        <label>arrow/buffer.h</label>
        <link refid="buffer_8h"/>
        <childnode refid="18560" relation="include">
        </childnode>
        <childnode refid="18569" relation="include">
        </childnode>
        <childnode refid="18561" relation="include">
        </childnode>
        <childnode refid="18563" relation="include">
        </childnode>
        <childnode refid="18570" relation="include">
        </childnode>
        <childnode refid="18565" relation="include">
        </childnode>
        <childnode refid="18566" relation="include">
        </childnode>
        <childnode refid="18571" relation="include">
        </childnode>
        <childnode refid="18572" relation="include">
        </childnode>
        <childnode refid="18577" relation="include">
        </childnode>
        <childnode refid="18573" relation="include">
        </childnode>
        <childnode refid="18574" relation="include">
        </childnode>
        <childnode refid="18580" relation="include">
        </childnode>
        <childnode refid="18575" relation="include">
        </childnode>
      </node>
      <node id="18591">
        <label>endian.h</label>
      </node>
      <node id="18577">
        <label>arrow/status.h</label>
        <link refid="status_8h"/>
        <childnode refid="18569" relation="include">
        </childnode>
        <childnode refid="18578" relation="include">
        </childnode>
        <childnode refid="18561" relation="include">
        </childnode>
        <childnode refid="18563" relation="include">
        </childnode>
        <childnode refid="18565" relation="include">
        </childnode>
        <childnode refid="18576" relation="include">
        </childnode>
        <childnode refid="18574" relation="include">
        </childnode>
        <childnode refid="18579" relation="include">
        </childnode>
        <childnode refid="18575" relation="include">
        </childnode>
      </node>
      <node id="18598">
        <label>arrow/util/functional.h</label>
        <link refid="functional_8h"/>
        <childnode refid="18599" relation="include">
        </childnode>
        <childnode refid="18570" relation="include">
        </childnode>
        <childnode refid="18574" relation="include">
        </childnode>
      </node>
      <node id="18573">
        <label>arrow/type_fwd.h</label>
        <link refid="type__fwd_8h"/>
        <childnode refid="18561" relation="include">
        </childnode>
        <childnode refid="18563" relation="include">
        </childnode>
        <childnode refid="18566" relation="include">
        </childnode>
        <childnode refid="18574" relation="include">
        </childnode>
        <childnode refid="18575" relation="include">
        </childnode>
      </node>
      <node id="18567">
        <label>parquet/platform.h</label>
        <link refid="parquet_2platform_8h"/>
        <childnode refid="18560" relation="include">
        </childnode>
        <childnode refid="18561" relation="include">
        </childnode>
        <childnode refid="18568" relation="include">
        </childnode>
        <childnode refid="18582" relation="include">
        </childnode>
        <childnode refid="18583" relation="include">
        </childnode>
        <childnode refid="18588" relation="include">
        </childnode>
        <childnode refid="18577" relation="include">
        </childnode>
        <childnode refid="18590" relation="include">
        </childnode>
        <childnode refid="18601" relation="include">
        </childnode>
        <childnode refid="18574" relation="include">
        </childnode>
        <childnode refid="18580" relation="include">
        </childnode>
      </node>
      <node id="18582">
        <label>arrow/io/interfaces.h</label>
        <link refid="interfaces_8h"/>
        <childnode refid="18560" relation="include">
        </childnode>
        <childnode refid="18561" relation="include">
        </childnode>
        <childnode refid="18563" relation="include">
        </childnode>
        <childnode refid="18566" relation="include">
        </childnode>
        <childnode refid="18572" relation="include">
        </childnode>
        <childnode refid="18573" relation="include">
        </childnode>
        <childnode refid="18574" relation="include">
        </childnode>
        <childnode refid="18580" relation="include">
        </childnode>
        <childnode refid="18575" relation="include">
        </childnode>
      </node>
      <node id="18596">
        <label>cmath</label>
      </node>
      <node id="18595">
        <label>cassert</label>
      </node>
      <node id="18587">
        <label>arrow/util/checked_cast.h</label>
        <link refid="checked__cast_8h"/>
        <childnode refid="18561" relation="include">
        </childnode>
        <childnode refid="18570" relation="include">
        </childnode>
      </node>
      <node id="18563">
        <label>string</label>
      </node>
      <node id="18581">
        <label>arrow/vendored/string_view.hpp</label>
      </node>
      <node id="18562">
        <label>ostream</label>
      </node>
      <node id="18575">
        <label>arrow/util/visibility.h</label>
        <link refid="arrow_2util_2visibility_8h"/>
      </node>
      <node id="18571">
        <label>arrow/device.h</label>
        <link refid="device_8h"/>
        <childnode refid="18560" relation="include">
        </childnode>
        <childnode refid="18561" relation="include">
        </childnode>
        <childnode refid="18563" relation="include">
        </childnode>
        <childnode refid="18572" relation="include">
        </childnode>
        <childnode refid="18573" relation="include">
        </childnode>
        <childnode refid="18576" relation="include">
        </childnode>
        <childnode refid="18574" relation="include">
        </childnode>
        <childnode refid="18575" relation="include">
        </childnode>
      </node>
      <node id="18588">
        <label>arrow/memory_pool.h</label>
        <link refid="memory__pool_8h"/>
        <childnode refid="18589" relation="include">
        </childnode>
        <childnode refid="18560" relation="include">
        </childnode>
        <childnode refid="18561" relation="include">
        </childnode>
        <childnode refid="18563" relation="include">
        </childnode>
        <childnode refid="18577" relation="include">
        </childnode>
        <childnode refid="18573" relation="include">
        </childnode>
        <childnode refid="18575" relation="include">
        </childnode>
      </node>
      <node id="18590">
        <label>arrow/util/bit_util.h</label>
        <link refid="bit__util_8h"/>
        <childnode refid="18591" relation="include">
        </childnode>
        <childnode refid="18592" relation="include">
        </childnode>
        <childnode refid="18593" relation="include">
        </childnode>
        <childnode refid="18594" relation="include">
        </childnode>
        <childnode refid="18595" relation="include">
        </childnode>
        <childnode refid="18596" relation="include">
        </childnode>
        <childnode refid="18560" relation="include">
        </childnode>
        <childnode refid="18569" relation="include">
        </childnode>
        <childnode refid="18597" relation="include">
        </childnode>
        <childnode refid="18561" relation="include">
        </childnode>
        <childnode refid="18563" relation="include">
        </childnode>
        <childnode refid="18570" relation="include">
        </childnode>
        <childnode refid="18565" relation="include">
        </childnode>
        <childnode refid="18566" relation="include">
        </childnode>
        <childnode refid="18568" relation="include">
        </childnode>
        <childnode refid="18585" relation="include">
        </childnode>
        <childnode refid="18576" relation="include">
        </childnode>
        <childnode refid="18598" relation="include">
        </childnode>
        <childnode refid="18574" relation="include">
        </childnode>
        <childnode refid="18579" relation="include">
        </childnode>
        <childnode refid="18580" relation="include">
        </childnode>
        <childnode refid="18600" relation="include">
        </childnode>
        <childnode refid="18575" relation="include">
        </childnode>
      </node>
      <node id="18594">
        <label>bitset</label>
      </node>
      <node id="18599">
        <label>tuple</label>
      </node>
      <node id="18566">
        <label>vector</label>
      </node>
      <node id="18586">
        <label>new</label>
      </node>
      <node id="18565">
        <label>utility</label>
      </node>
      <node id="18580">
        <label>arrow/util/string_view.h</label>
        <link refid="string__view_8h"/>
        <childnode refid="18560" relation="include">
        </childnode>
        <childnode refid="18563" relation="include">
        </childnode>
        <childnode refid="18581" relation="include">
        </childnode>
      </node>
      <node id="18593">
        <label>array</label>
      </node>
      <node id="18603">
        <label>sstream</label>
      </node>
      <node id="18583">
        <label>arrow/io/memory.h</label>
        <link refid="io_2memory_8h"/>
        <childnode refid="18560" relation="include">
        </childnode>
        <childnode refid="18561" relation="include">
        </childnode>
        <childnode refid="18584" relation="include">
        </childnode>
        <childnode refid="18582" relation="include">
        </childnode>
        <childnode refid="18573" relation="include">
        </childnode>
        <childnode refid="18580" relation="include">
        </childnode>
        <childnode refid="18575" relation="include">
        </childnode>
      </node>
      <node id="18559">
        <label>/arrow/cpp/src/parquet/schema.h</label>
        <link refid="schema_8h"/>
        <childnode refid="18560" relation="include">
        </childnode>
        <childnode refid="18561" relation="include">
        </childnode>
        <childnode refid="18562" relation="include">
        </childnode>
        <childnode refid="18563" relation="include">
        </childnode>
        <childnode refid="18564" relation="include">
        </childnode>
        <childnode refid="18565" relation="include">
        </childnode>
        <childnode refid="18566" relation="include">
        </childnode>
        <childnode refid="18567" relation="include">
        </childnode>
        <childnode refid="18602" relation="include">
        </childnode>
      </node>
      <node id="18572">
        <label>arrow/io/type_fwd.h</label>
        <link refid="io_2type__fwd_8h"/>
      </node>
      <node id="18578">
        <label>iosfwd</label>
      </node>
      <node id="18584">
        <label>arrow/io/concurrency.h</label>
        <link refid="concurrency_8h"/>
        <childnode refid="18561" relation="include">
        </childnode>
        <childnode refid="18582" relation="include">
        </childnode>
        <childnode refid="18585" relation="include">
        </childnode>
        <childnode refid="18577" relation="include">
        </childnode>
        <childnode refid="18587" relation="include">
        </childnode>
        <childnode refid="18574" relation="include">
        </childnode>
        <childnode refid="18575" relation="include">
        </childnode>
      </node>
      <node id="18564">
        <label>unordered_map</label>
      </node>
      <node id="18585">
        <label>arrow/result.h</label>
        <link refid="result_8h"/>
        <childnode refid="18586" relation="include">
        </childnode>
        <childnode refid="18563" relation="include">
        </childnode>
        <childnode refid="18570" relation="include">
        </childnode>
        <childnode refid="18565" relation="include">
        </childnode>
        <childnode refid="18577" relation="include">
        </childnode>
        <childnode refid="18576" relation="include">
        </childnode>
      </node>
      <node id="18570">
        <label>type_traits</label>
      </node>
      <node id="18601">
        <label>arrow/util/compression.h</label>
        <link refid="compression_8h"/>
        <childnode refid="18560" relation="include">
        </childnode>
        <childnode refid="18597" relation="include">
        </childnode>
        <childnode refid="18561" relation="include">
        </childnode>
        <childnode refid="18563" relation="include">
        </childnode>
        <childnode refid="18585" relation="include">
        </childnode>
        <childnode refid="18577" relation="include">
        </childnode>
        <childnode refid="18575" relation="include">
        </childnode>
      </node>
      <node id="18592">
        <label>algorithm</label>
      </node>
      <node id="18604">
        <label>arrow/util/int_util.h</label>
        <link refid="int__util_8h"/>
        <childnode refid="18560" relation="include">
        </childnode>
        <childnode refid="18597" relation="include">
        </childnode>
        <childnode refid="18570" relation="include">
        </childnode>
        <childnode refid="18575" relation="include">
        </childnode>
      </node>
      <node id="18569">
        <label>cstring</label>
      </node>
      <node id="18602">
        <label>parquet/types.h</label>
        <link refid="parquet_2types_8h"/>
        <childnode refid="18592" relation="include">
        </childnode>
        <childnode refid="18560" relation="include">
        </childnode>
        <childnode refid="18569" relation="include">
        </childnode>
        <childnode refid="18561" relation="include">
        </childnode>
        <childnode refid="18603" relation="include">
        </childnode>
        <childnode refid="18563" relation="include">
        </childnode>
        <childnode refid="18604" relation="include">
        </childnode>
        <childnode refid="18580" relation="include">
        </childnode>
        <childnode refid="18567" relation="include">
        </childnode>
      </node>
      <node id="18579">
        <label>arrow/util/string_builder.h</label>
        <link refid="string__builder_8h"/>
        <childnode refid="18561" relation="include">
        </childnode>
        <childnode refid="18562" relation="include">
        </childnode>
        <childnode refid="18563" relation="include">
        </childnode>
        <childnode refid="18565" relation="include">
        </childnode>
        <childnode refid="18575" relation="include">
        </childnode>
      </node>
      <node id="18561">
        <label>memory</label>
      </node>
      <node id="18574">
        <label>arrow/util/macros.h</label>
        <link refid="macros_8h"/>
        <childnode refid="18560" relation="include">
        </childnode>
      </node>
      <node id="18600">
        <label>arrow/util/type_traits.h</label>
        <link refid="util_2type__traits_8h"/>
        <childnode refid="18570" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="18608">
        <label>/arrow/cpp/src/parquet/api/writer.h</label>
        <link refid="parquet_2api_2writer_8h"/>
      </node>
      <node id="18626">
        <label>/arrow/cpp/src/parquet/internal_file_decryptor.h</label>
        <link refid="internal__file__decryptor_8h"/>
        <childnode refid="18616" relation="include">
        </childnode>
      </node>
      <node id="18620">
        <label>/arrow/cpp/src/parquet/encryption_internal.h</label>
        <link refid="encryption__internal_8h"/>
      </node>
      <node id="18613">
        <label>/arrow/cpp/src/parquet/stream_reader.h</label>
        <link refid="stream__reader_8h"/>
      </node>
      <node id="18619">
        <label>/arrow/cpp/src/parquet/arrow/writer.h</label>
        <link refid="parquet_2arrow_2writer_8h"/>
      </node>
      <node id="18621">
        <label>/arrow/cpp/src/parquet/file_reader.h</label>
        <link refid="file__reader_8h"/>
        <childnode refid="18607" relation="include">
        </childnode>
        <childnode refid="18618" relation="include">
        </childnode>
        <childnode refid="18609" relation="include">
        </childnode>
        <childnode refid="18613" relation="include">
        </childnode>
      </node>
      <node id="18624">
        <label>/arrow/cpp/src/parquet/metadata.h</label>
        <link refid="metadata_8h"/>
        <childnode refid="18607" relation="include">
        </childnode>
        <childnode refid="18609" relation="include">
        </childnode>
        <childnode refid="18621" relation="include">
        </childnode>
        <childnode refid="18622" relation="include">
        </childnode>
        <childnode refid="18625" relation="include">
        </childnode>
      </node>
      <node id="18627">
        <label>/arrow/cpp/src/parquet/schema_internal.h</label>
        <link refid="schema__internal_8h"/>
      </node>
      <node id="18615">
        <label>/arrow/cpp/src/parquet/internal_file_encryptor.h</label>
        <link refid="internal__file__encryptor_8h"/>
        <childnode refid="18616" relation="include">
        </childnode>
      </node>
      <node id="18612">
        <label>/arrow/cpp/src/parquet/column_scanner.h</label>
        <link refid="column__scanner_8h"/>
        <childnode refid="18607" relation="include">
        </childnode>
      </node>
      <node id="18617">
        <label>/arrow/cpp/src/parquet/properties.h</label>
        <link refid="properties_8h"/>
        <childnode refid="18607" relation="include">
        </childnode>
        <childnode refid="18618" relation="include">
        </childnode>
        <childnode refid="18619" relation="include">
        </childnode>
        <childnode refid="18620" relation="include">
        </childnode>
        <childnode refid="18621" relation="include">
        </childnode>
        <childnode refid="18622" relation="include">
        </childnode>
        <childnode refid="18624" relation="include">
        </childnode>
        <childnode refid="18625" relation="include">
        </childnode>
      </node>
      <node id="18607">
        <label>/arrow/cpp/src/parquet/api/reader.h</label>
        <link refid="parquet_2api_2reader_8h"/>
      </node>
      <node id="18616">
        <label>/arrow/cpp/src/parquet/thrift_internal.h</label>
        <link refid="parquet_2thrift__internal_8h"/>
      </node>
      <node id="18611">
        <label>/arrow/cpp/src/parquet/column_reader.h</label>
        <link refid="column__reader_8h"/>
        <childnode refid="18607" relation="include">
        </childnode>
        <childnode refid="18609" relation="include">
        </childnode>
        <childnode refid="18612" relation="include">
        </childnode>
        <childnode refid="18613" relation="include">
        </childnode>
      </node>
      <node id="18609">
        <label>/arrow/cpp/src/parquet/arrow/reader_internal.h</label>
        <link refid="reader__internal_8h"/>
      </node>
      <node id="18605">
        <label>/arrow/cpp/src/parquet/schema.h</label>
        <link refid="schema_8h"/>
        <childnode refid="18606" relation="include">
        </childnode>
        <childnode refid="18609" relation="include">
        </childnode>
        <childnode refid="18610" relation="include">
        </childnode>
        <childnode refid="18611" relation="include">
        </childnode>
        <childnode refid="18612" relation="include">
        </childnode>
        <childnode refid="18614" relation="include">
        </childnode>
        <childnode refid="18622" relation="include">
        </childnode>
        <childnode refid="18626" relation="include">
        </childnode>
        <childnode refid="18615" relation="include">
        </childnode>
        <childnode refid="18624" relation="include">
        </childnode>
        <childnode refid="18625" relation="include">
        </childnode>
        <childnode refid="18617" relation="include">
        </childnode>
        <childnode refid="18627" relation="include">
        </childnode>
      </node>
      <node id="18622">
        <label>/arrow/cpp/src/parquet/file_writer.h</label>
        <link refid="file__writer_8h"/>
        <childnode refid="18608" relation="include">
        </childnode>
        <childnode refid="18623" relation="include">
        </childnode>
      </node>
      <node id="18610">
        <label>/arrow/cpp/src/parquet/arrow/schema.h</label>
        <link refid="arrow_2schema_8h"/>
        <childnode refid="18609" relation="include">
        </childnode>
      </node>
      <node id="18606">
        <label>/arrow/cpp/src/parquet/api/schema.h</label>
        <link refid="api_2schema_8h"/>
        <childnode refid="18607" relation="include">
        </childnode>
        <childnode refid="18608" relation="include">
        </childnode>
      </node>
      <node id="18625">
        <label>/arrow/cpp/src/parquet/pch.h</label>
        <link refid="parquet_2pch_8h"/>
      </node>
      <node id="18623">
        <label>/arrow/cpp/src/parquet/stream_writer.h</label>
        <link refid="stream__writer_8h"/>
        <childnode refid="18613" relation="include">
        </childnode>
      </node>
      <node id="18614">
        <label>/arrow/cpp/src/parquet/encryption.h</label>
        <link refid="encryption_8h"/>
        <childnode refid="18615" relation="include">
        </childnode>
        <childnode refid="18617" relation="include">
        </childnode>
      </node>
      <node id="18618">
        <label>/arrow/cpp/src/parquet/arrow/reader.h</label>
        <link refid="parquet_2arrow_2reader_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structparquet_1_1schema_1_1_list_encoding" prot="public">parquet::schema::ListEncoding</innerclass>
    <innerclass refid="classparquet_1_1schema_1_1_column_path" prot="public">parquet::schema::ColumnPath</innerclass>
    <innerclass refid="classparquet_1_1schema_1_1_node" prot="public">parquet::schema::Node</innerclass>
    <innerclass refid="classparquet_1_1schema_1_1_node_1_1_visitor" prot="public">parquet::schema::Node::Visitor</innerclass>
    <innerclass refid="classparquet_1_1schema_1_1_node_1_1_const_visitor" prot="public">parquet::schema::Node::ConstVisitor</innerclass>
    <innerclass refid="classparquet_1_1schema_1_1_primitive_node" prot="public">parquet::schema::PrimitiveNode</innerclass>
    <innerclass refid="classparquet_1_1schema_1_1_group_node" prot="public">parquet::schema::GroupNode</innerclass>
    <innerclass refid="classparquet_1_1_column_descriptor" prot="public">parquet::ColumnDescriptor</innerclass>
    <innerclass refid="classparquet_1_1_schema_descriptor" prot="public">parquet::SchemaDescriptor</innerclass>
    <innernamespace refid="namespaceparquet">parquet</innernamespace>
    <innernamespace refid="namespaceparquet_1_1schema">parquet::schema</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="schema_8h_1a777b6f062ff4596f0f9fdb34c47d25b5" prot="public" static="no">
        <name>PRIMITIVE_FACTORY</name>
        <param><defname>FuncName</defname></param>
        <param><defname>TYPE</defname></param>
        <initializer>static inline NodePtr FuncName(const std::string&amp; name,                                \
                                 Repetition::type repetition = Repetition::OPTIONAL,     \
                                 int field_id = -1) {                                    \
    return PrimitiveNode::Make(name, repetition, Type::TYPE, ConvertedType::NONE,        \
                               /*length=*/-1, /*precision=*/-1, /*scale=*/-1, field_id); \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="334" column="9" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="334" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>This<sp/>module<sp/>contains<sp/>the<sp/>logical<sp/>parquet-cpp<sp/>types<sp/>(independent<sp/>of<sp/>Thrift</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>structures),<sp/>schema<sp/>nodes,<sp/>and<sp/>related<sp/>type<sp/>tools</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="parquet_2platform_8h" kindref="compound">parquet/platform.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="parquet_2types_8h" kindref="compound">parquet/types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceparquet" kindref="compound">parquet</ref><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SchemaDescriptor;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="group__schema-factories_1gab03f1059d8776b1e85ee93c7cd03a078" kindref="member">schema</ref><sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Node;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>List<sp/>encodings:<sp/>using<sp/>the<sp/>terminology<sp/>from<sp/>Impala<sp/>to<sp/>define<sp/>different<sp/>styles</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>representing<sp/>logical<sp/>lists<sp/>(a.k.a.<sp/>ARRAY<sp/>types)<sp/>in<sp/>Parquet<sp/>schemas.<sp/>Since</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>converted<sp/>type<sp/>named<sp/>in<sp/>the<sp/>Parquet<sp/>metadata<sp/>is<sp/>ConvertedType::LIST<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/>use<sp/>that<sp/>terminology<sp/>here.<sp/>It<sp/>also<sp/>helps<sp/>distinguish<sp/>from<sp/>the<sp/>*_ARRAY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/>primitive<sp/>types.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>One-level<sp/>encoding:<sp/>Only<sp/>allows<sp/>required<sp/>lists<sp/>with<sp/>required<sp/>cells</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>repeated<sp/>value_type<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Two-level<sp/>encoding:<sp/>Enables<sp/>optional<sp/>lists<sp/>with<sp/>only<sp/>required<sp/>cells</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>&lt;required/optional&gt;<sp/>group<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>repeated<sp/>value_type<sp/>item</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Three-level<sp/>encoding:<sp/>Enables<sp/>optional<sp/>lists<sp/>with<sp/>optional<sp/>cells</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>&lt;required/optional&gt;<sp/>group<sp/>bag</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/>repeated<sp/>group<sp/>list</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>&lt;required/optional&gt;<sp/>value_type<sp/>item</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="comment">//<sp/>2-<sp/>and<sp/>1-level<sp/>encoding<sp/>are<sp/>respectively<sp/>equivalent<sp/>to<sp/>3-level<sp/>encoding<sp/>with</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>non-repeated<sp/>nodes<sp/>set<sp/>to<sp/>required.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>&quot;official&quot;<sp/>encoding<sp/>recommended<sp/>in<sp/>the<sp/>Parquet<sp/>spec<sp/>is<sp/>the<sp/>3-level,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>use<sp/>that<sp/>as<sp/>the<sp/>default<sp/>when<sp/>creating<sp/>list<sp/>types.<sp/>For<sp/>semantic<sp/>completeness</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="comment">//<sp/>we<sp/>allow<sp/>the<sp/>other<sp/>two.<sp/>Since<sp/>all<sp/>types<sp/>of<sp/>encodings<sp/>will<sp/>occur<sp/>&quot;in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="comment">//<sp/>wild&quot;<sp/>we<sp/>need<sp/>to<sp/>be<sp/>able<sp/>to<sp/>interpret<sp/>the<sp/>associated<sp/>definition<sp/>levels<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>context<sp/>of<sp/>the<sp/>actual<sp/>encoding<sp/>used<sp/>in<sp/>the<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="comment">//<sp/>NB:<sp/>Some<sp/>Parquet<sp/>writers<sp/>may<sp/>not<sp/>set<sp/>ConvertedType::LIST<sp/>on<sp/>the<sp/>repeated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SchemaElement,<sp/>which<sp/>could<sp/>make<sp/>things<sp/>challenging<sp/>if<sp/>we<sp/>are<sp/>trying<sp/>to<sp/>infer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>a<sp/>sequence<sp/>of<sp/>nodes<sp/>semantically<sp/>represents<sp/>an<sp/>array<sp/>according<sp/>to<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="comment">//<sp/>of<sp/>these<sp/>encodings<sp/>(versus<sp/>a<sp/>struct<sp/>containing<sp/>an<sp/>array).<sp/>We<sp/>should<sp/>refuse</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>temptation<sp/>to<sp/>guess,<sp/>as<sp/>they<sp/>say.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="structparquet_1_1schema_1_1_list_encoding" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structparquet_1_1schema_1_1_list_encoding" kindref="compound">ListEncoding</ref><sp/>{</highlight></codeline>
<codeline lineno="75" refid="structparquet_1_1schema_1_1_list_encoding_1a6d37a12d644af2d555ee52a544a916e7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="structparquet_1_1schema_1_1_list_encoding_1a6d37a12d644af2d555ee52a544a916e7" kindref="member">type</ref><sp/>{<sp/><ref refid="structparquet_1_1schema_1_1_list_encoding_1a6d37a12d644af2d555ee52a544a916e7a54995bc58b7ad4d3e1defbc2e77c3994" kindref="member">ONE_LEVEL</ref>,<sp/><ref refid="structparquet_1_1schema_1_1_list_encoding_1a6d37a12d644af2d555ee52a544a916e7ab39cb6739c927619db1b6b05991167f1" kindref="member">TWO_LEVEL</ref>,<sp/><ref refid="structparquet_1_1schema_1_1_list_encoding_1a6d37a12d644af2d555ee52a544a916e7a006b9eed2ef843782cab727ac62a550e" kindref="member">THREE_LEVEL</ref><sp/>};</highlight></codeline>
<codeline lineno="76"><highlight class="normal">};</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="classparquet_1_1schema_1_1_column_path" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">PARQUET_EXPORT<sp/><ref refid="classparquet_1_1schema_1_1_column_path" kindref="compound">ColumnPath</ref><sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="80" refid="classparquet_1_1schema_1_1_column_path_1ab3acad8a9a38e938f64d7beb4455a7c7" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classparquet_1_1schema_1_1_column_path_1ab3acad8a9a38e938f64d7beb4455a7c7" kindref="member">ColumnPath</ref>()<sp/>:<sp/>path_()<sp/>{}</highlight></codeline>
<codeline lineno="81" refid="classparquet_1_1schema_1_1_column_path_1ac735de9413a115eb8d88a336dd24b748" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1schema_1_1_column_path_1ac735de9413a115eb8d88a336dd24b748" kindref="member">ColumnPath</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;&amp;<sp/>path)<sp/>:<sp/>path_(path)<sp/>{}</highlight></codeline>
<codeline lineno="82" refid="classparquet_1_1schema_1_1_column_path_1acf74f9ab798cbf878cd261a8ae6131a5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1schema_1_1_column_path_1acf74f9ab798cbf878cd261a8ae6131a5" kindref="member">ColumnPath</ref>(std::vector&lt;std::string&gt;&amp;&amp;<sp/>path)<sp/>:<sp/>path_(<ref refid="namespacestd" kindref="compound">std</ref>::move(path))<sp/>{}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ColumnPath&gt;<sp/>FromDotString(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>dotstring);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ColumnPath&gt;<sp/>FromNode(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1schema_1_1_node" kindref="compound">Node</ref>&amp;<sp/>node);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;ColumnPath&gt;<sp/>extend(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>node_name)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/>std::string<sp/>ToDotString()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;&amp;<sp/>ToDotVector()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="92" refid="classparquet_1_1schema_1_1_column_path_1a8d9b43ee04953fcb339a0be3f11e8cbc" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/><ref refid="classparquet_1_1schema_1_1_column_path_1a8d9b43ee04953fcb339a0be3f11e8cbc" kindref="member">path_</ref>;</highlight></codeline>
<codeline lineno="93"><highlight class="normal">};</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Base<sp/>class<sp/>for<sp/>logical<sp/>schema<sp/>types.<sp/>A<sp/>type<sp/>has<sp/>a<sp/>name,<sp/>repetition<sp/>level,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//<sp/>and<sp/>optionally<sp/>a<sp/>logical<sp/>type<sp/>(ConvertedType<sp/>in<sp/>Parquet<sp/>metadata<sp/>parlance)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97" refid="classparquet_1_1schema_1_1_node" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">PARQUET_EXPORT<sp/><ref refid="classparquet_1_1schema_1_1_node" kindref="compound">Node</ref><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="99" refid="classparquet_1_1schema_1_1_node_1aab450ce50c75c565dde2d550311c5020" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1schema_1_1_node_1aab450ce50c75c565dde2d550311c5020" kindref="member">type</ref><sp/>{<sp/>PRIMITIVE,<sp/>GROUP<sp/>};</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="classparquet_1_1schema_1_1_node_1a5aa34e85de9d924de494185b4c954e00" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1schema_1_1_node_1a5aa34e85de9d924de494185b4c954e00" kindref="member">~Node</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="classparquet_1_1schema_1_1_node_1a16e05d4314f205ddde0f06a8c98c30a5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1schema_1_1_node_1a16e05d4314f205ddde0f06a8c98c30a5" kindref="member">is_primitive</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_<sp/>==<sp/><ref refid="classparquet_1_1schema_1_1_node_1aab450ce50c75c565dde2d550311c5020a937da11d2024ff231f447c3053e74d88" kindref="member">Node::PRIMITIVE</ref>;<sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="classparquet_1_1schema_1_1_node_1a4876454789f5bb9c7d9b5d2cf0619850" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1schema_1_1_node_1a4876454789f5bb9c7d9b5d2cf0619850" kindref="member">is_group</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_<sp/>==<sp/><ref refid="classparquet_1_1schema_1_1_node_1aab450ce50c75c565dde2d550311c5020af049b3443056c6e12e06dd41630bc0db" kindref="member">Node::GROUP</ref>;<sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="classparquet_1_1schema_1_1_node_1a0b3015fc760df30425b643541f34051d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1schema_1_1_node_1a0b3015fc760df30425b643541f34051d" kindref="member">is_optional</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>repetition_<sp/>==<sp/><ref refid="structparquet_1_1_repetition_1a7e942dfcd49240c465cdf3e1dc011af4a82534a669aeb93158b8340c9cff8e6a3" kindref="member">Repetition::OPTIONAL</ref>;<sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="classparquet_1_1schema_1_1_node_1afa2f550a4fe582d22eb5850082722d92" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1schema_1_1_node_1afa2f550a4fe582d22eb5850082722d92" kindref="member">is_repeated</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>repetition_<sp/>==<sp/><ref refid="structparquet_1_1_repetition_1a7e942dfcd49240c465cdf3e1dc011af4a29e26c842c3024e9a897d6841cb27a61" kindref="member">Repetition::REPEATED</ref>;<sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="classparquet_1_1schema_1_1_node_1ac43e59ae65df7e224e2ba5308e6620c2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1schema_1_1_node_1ac43e59ae65df7e224e2ba5308e6620c2" kindref="member">is_required</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>repetition_<sp/>==<sp/><ref refid="structparquet_1_1_repetition_1a7e942dfcd49240c465cdf3e1dc011af4a153b4c011899d8106eb1324ccb85a4c8" kindref="member">Repetition::REQUIRED</ref>;<sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Equals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1schema_1_1_node" kindref="compound">Node</ref>*<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="classparquet_1_1schema_1_1_node_1ac84aeaa2ec13ffc81f5756f2f39911bd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="classparquet_1_1schema_1_1_node_1ac84aeaa2ec13ffc81f5756f2f39911bd" kindref="member">name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name_;<sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="classparquet_1_1schema_1_1_node_1a094fa7e3ff9b5a8ecd07e2d9fd4d2f22" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classparquet_1_1schema_1_1_node_1aab450ce50c75c565dde2d550311c5020" kindref="member">Node::type</ref><sp/><ref refid="classparquet_1_1schema_1_1_node_1a094fa7e3ff9b5a8ecd07e2d9fd4d2f22" kindref="member">node_type</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_;<sp/>}</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="classparquet_1_1schema_1_1_node_1ac1541fa1f8d0a6db7bc12ba3855e0373" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structparquet_1_1_repetition_1a7e942dfcd49240c465cdf3e1dc011af4" kindref="member">Repetition::type</ref><sp/><ref refid="classparquet_1_1schema_1_1_node_1ac1541fa1f8d0a6db7bc12ba3855e0373" kindref="member">repetition</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>repetition_;<sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="classparquet_1_1schema_1_1_node_1aa2175d7164787a0f1bd8d93233bc5934" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structparquet_1_1_converted_type_1a4c93674b47bffc29042acda48281e198" kindref="member">ConvertedType::type</ref><sp/><ref refid="classparquet_1_1schema_1_1_node_1aa2175d7164787a0f1bd8d93233bc5934" kindref="member">converted_type</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>converted_type_;<sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="classparquet_1_1schema_1_1_node_1a7906213a612cdd2ba7ec9695467534ec" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;const<sp/>LogicalType&gt;&amp;<sp/><ref refid="classparquet_1_1schema_1_1_node_1a7906213a612cdd2ba7ec9695467534ec" kindref="member">logical_type</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>logical_type_;<sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="classparquet_1_1schema_1_1_node_1aa6442e18cc800110e673e13819c85b53" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1schema_1_1_node_1aa6442e18cc800110e673e13819c85b53" kindref="member">field_id</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>field_id_;<sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="classparquet_1_1schema_1_1_node_1ab255f7cc073220cf4718eee621b6f992" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classparquet_1_1schema_1_1_node_1ab255f7cc073220cf4718eee621b6f992" kindref="member">PARQUET_DEPRECATED</ref>(</highlight><highlight class="stringliteral">&quot;id()<sp/>is<sp/>deprecated.<sp/>Use<sp/>field_id()<sp/>instead&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>int<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>field_id_;<sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133" refid="classparquet_1_1schema_1_1_node_1a6a6a7d17ebacfd44a495dd6e6dcf388f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1schema_1_1_node" kindref="compound">Node</ref>*<sp/><ref refid="classparquet_1_1schema_1_1_node_1a6a6a7d17ebacfd44a495dd6e6dcf388f" kindref="member">parent</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>parent_;<sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ColumnPath&gt;<sp/>path()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceparquet_1_1schema_1a15563c58c5e627fc2776ab3228cb07ce" kindref="member">ToParquet</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>element)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Node::Visitor<sp/>abstract<sp/>class<sp/>for<sp/>walking<sp/>schemas<sp/>with<sp/>the<sp/>visitor<sp/>pattern</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140" refid="classparquet_1_1schema_1_1_node_1_1_visitor" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classparquet_1_1schema_1_1_node_1_1_visitor" kindref="compound">Visitor</ref><sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="142" refid="classparquet_1_1schema_1_1_node_1_1_visitor_1a5f22a750eac87e0c7bcc396559364a32" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1schema_1_1_node_1_1_visitor_1a5f22a750eac87e0c7bcc396559364a32" kindref="member">~Visitor</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Visit(<ref refid="classparquet_1_1schema_1_1_node" kindref="compound">Node</ref>*<sp/>node)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="146" refid="classparquet_1_1schema_1_1_node_1_1_const_visitor" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classparquet_1_1schema_1_1_node_1_1_const_visitor" kindref="compound">ConstVisitor</ref><sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="148" refid="classparquet_1_1schema_1_1_node_1_1_const_visitor_1a6abc8bd13b4ca7d2caa4738a784b6ba1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1schema_1_1_node_1_1_const_visitor_1a6abc8bd13b4ca7d2caa4738a784b6ba1" kindref="member">~ConstVisitor</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Visit(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1schema_1_1_node" kindref="compound">Node</ref>*<sp/>node)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Visit(<ref refid="classparquet_1_1schema_1_1_node_1_1_visitor" kindref="compound">Visitor</ref>*<sp/>visitor)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VisitConst(<ref refid="classparquet_1_1schema_1_1_node_1_1_const_visitor" kindref="compound">ConstVisitor</ref>*<sp/>visitor)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="157" refid="classparquet_1_1schema_1_1_node_1ab65d0d081821369cf38f231ba1a5e013" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classparquet_1_1schema_1_1_group_node" kindref="compound">GroupNode</ref>;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159" refid="classparquet_1_1schema_1_1_node_1a38014237d7d0ac0ccfa170568a1e7bd6" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classparquet_1_1schema_1_1_node_1a38014237d7d0ac0ccfa170568a1e7bd6" kindref="member">Node</ref>(<ref refid="classparquet_1_1schema_1_1_node_1aab450ce50c75c565dde2d550311c5020" kindref="member">Node::type</ref><sp/><ref refid="classparquet_1_1schema_1_1_node_1aab450ce50c75c565dde2d550311c5020" kindref="member">type</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/><ref refid="structparquet_1_1_repetition_1a7e942dfcd49240c465cdf3e1dc011af4" kindref="member">Repetition::type</ref><sp/>repetition,</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structparquet_1_1_converted_type_1a4c93674b47bffc29042acda48281e198" kindref="member">ConvertedType::type</ref><sp/>converted_type<sp/>=<sp/><ref refid="structparquet_1_1_converted_type_1a4c93674b47bffc29042acda48281e198adeb8756102a33f6619ada0dafcdf4167" kindref="member">ConvertedType::NONE</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>field_id<sp/>=<sp/>-1)</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>type_(type),</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name_(name),</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>repetition_(repetition),</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>converted_type_(converted_type),</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>field_id_(field_id),</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent_(<ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168" refid="classparquet_1_1schema_1_1_node_1af53a3215e176399423ea5c2ce010ade0" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classparquet_1_1schema_1_1_node_1af53a3215e176399423ea5c2ce010ade0" kindref="member">Node</ref>(<ref refid="classparquet_1_1schema_1_1_node_1aab450ce50c75c565dde2d550311c5020" kindref="member">Node::type</ref><sp/><ref refid="classparquet_1_1schema_1_1_node_1aab450ce50c75c565dde2d550311c5020" kindref="member">type</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/><ref refid="structparquet_1_1_repetition_1a7e942dfcd49240c465cdf3e1dc011af4" kindref="member">Repetition::type</ref><sp/>repetition,</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;const<sp/>LogicalType&gt;<sp/>logical_type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>field_id<sp/>=<sp/>-1)</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>type_(type),</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name_(name),</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>repetition_(repetition),</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logical_type_(<ref refid="namespacestd" kindref="compound">std</ref>::move(logical_type)),</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>field_id_(field_id),</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parent_(<ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177" refid="classparquet_1_1schema_1_1_node_1a77bbfa65c2f78dfa5fe9410376da9ec6" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classparquet_1_1schema_1_1_node_1aab450ce50c75c565dde2d550311c5020" kindref="member">Node::type</ref><sp/><ref refid="classparquet_1_1schema_1_1_node_1a77bbfa65c2f78dfa5fe9410376da9ec6" kindref="member">type_</ref>;</highlight></codeline>
<codeline lineno="178" refid="classparquet_1_1schema_1_1_node_1a7e2ce16cdf24f982f7d87f45ed8be209" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classparquet_1_1schema_1_1_node_1a7e2ce16cdf24f982f7d87f45ed8be209" kindref="member">name_</ref>;</highlight></codeline>
<codeline lineno="179" refid="classparquet_1_1schema_1_1_node_1a759b242d4a25fd8f4198c5f27a2f7733" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structparquet_1_1_repetition_1a7e942dfcd49240c465cdf3e1dc011af4" kindref="member">Repetition::type</ref><sp/><ref refid="classparquet_1_1schema_1_1_node_1a759b242d4a25fd8f4198c5f27a2f7733" kindref="member">repetition_</ref>;</highlight></codeline>
<codeline lineno="180" refid="classparquet_1_1schema_1_1_node_1aea0bd0c888704ff9c0fa832124f8e5ad" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structparquet_1_1_converted_type_1a4c93674b47bffc29042acda48281e198" kindref="member">ConvertedType::type</ref><sp/><ref refid="classparquet_1_1schema_1_1_node_1aea0bd0c888704ff9c0fa832124f8e5ad" kindref="member">converted_type_</ref>;</highlight></codeline>
<codeline lineno="181" refid="classparquet_1_1schema_1_1_node_1ad26ec60df1d8805b768d6fb742c8c122" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;const<sp/>LogicalType&gt;<sp/><ref refid="classparquet_1_1schema_1_1_node_1ad26ec60df1d8805b768d6fb742c8c122" kindref="member">logical_type_</ref>;</highlight></codeline>
<codeline lineno="182" refid="classparquet_1_1schema_1_1_node_1a97de05e7887acfe99dd2891e904e61f6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1schema_1_1_node_1a97de05e7887acfe99dd2891e904e61f6" kindref="member">field_id_</ref>;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Nodes<sp/>should<sp/>not<sp/>be<sp/>shared,<sp/>they<sp/>have<sp/>a<sp/>single<sp/>parent.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184" refid="classparquet_1_1schema_1_1_node_1a04e7addaf1850c92e6bc49e05b08d1ab" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1schema_1_1_node" kindref="compound">Node</ref>*<sp/><ref refid="classparquet_1_1schema_1_1_node_1a04e7addaf1850c92e6bc49e05b08d1ab" kindref="member">parent_</ref>;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EqualsInternal(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1schema_1_1_node" kindref="compound">Node</ref>*<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetParent(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1schema_1_1_node" kindref="compound">Node</ref>*<sp/>p_parent);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><ref refid="parquet_2platform_8h_1a550a4c8069138a9bfd9037f1a72a94f8" kindref="member">PARQUET_DISALLOW_COPY_AND_ASSIGN</ref>(<ref refid="classparquet_1_1schema_1_1_node" kindref="compound">Node</ref>);</highlight></codeline>
<codeline lineno="191"><highlight class="normal">};</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Save<sp/>our<sp/>breath<sp/>all<sp/>over<sp/>the<sp/>place<sp/>with<sp/>these<sp/>typedefs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194" refid="namespaceparquet_1_1schema_1a7fe5ee27b1dd5f12098ce3f3e6200b9e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Node&gt;<sp/><ref refid="namespaceparquet_1_1schema_1a7fe5ee27b1dd5f12098ce3f3e6200b9e" kindref="member">NodePtr</ref>;</highlight></codeline>
<codeline lineno="195" refid="namespaceparquet_1_1schema_1a8289c0ec21718b7fa853359974ffb298" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;NodePtr&gt;<sp/><ref refid="namespaceparquet_1_1schema_1a8289c0ec21718b7fa853359974ffb298" kindref="member">NodeVector</ref>;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>type<sp/>that<sp/>is<sp/>one<sp/>of<sp/>the<sp/>primitive<sp/>Parquet<sp/>storage<sp/>types.<sp/>In<sp/>addition<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>other<sp/>type<sp/>metadata<sp/>(name,<sp/>repetition<sp/>level,<sp/>logical<sp/>type),<sp/>also<sp/>has<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight><highlight class="comment">//<sp/>physical<sp/>storage<sp/>type<sp/>and<sp/>their<sp/>type-specific<sp/>metadata<sp/>(byte<sp/>width,<sp/>decimal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="comment">//<sp/>parameters)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201" refid="classparquet_1_1schema_1_1_primitive_node" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">PARQUET_EXPORT<sp/><ref refid="classparquet_1_1schema_1_1_primitive_node" kindref="compound">PrimitiveNode</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1schema_1_1_node" kindref="compound">Node</ref><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>field_id<sp/>here<sp/>is<sp/>the<sp/>default<sp/>to<sp/>use<sp/>if<sp/>it<sp/>is<sp/>not<sp/>set<sp/>in<sp/>the<sp/>SchemaElement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;Node&gt;<sp/><ref refid="namespaceparquet_1_1schema_1ac9d8e5707577790f516f7508f5f8a9bb" kindref="member">FromParquet</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>opaque_element,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>field_id<sp/>=<sp/>-1);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>field_id<sp/>-1<sp/>(or<sp/>any<sp/>negative<sp/>value)<sp/>will<sp/>be<sp/>serialized<sp/>as<sp/>null<sp/>in<sp/>Thrift</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207" refid="classparquet_1_1schema_1_1_primitive_node_1a7da41c9523924bcbd762ddb26b445548" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>NodePtr<sp/><ref refid="classparquet_1_1schema_1_1_primitive_node_1a7da41c9523924bcbd762ddb26b445548" kindref="member">Make</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/><ref refid="structparquet_1_1_repetition_1a7e942dfcd49240c465cdf3e1dc011af4" kindref="member">Repetition::type</ref><sp/>repetition,</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structparquet_1_1_type_1a2a4b0ad3da98a8a407a0dc3ecbf737ca" kindref="member">Type::type</ref><sp/><ref refid="classparquet_1_1schema_1_1_node_1aab450ce50c75c565dde2d550311c5020" kindref="member">type</ref>,</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structparquet_1_1_converted_type_1a4c93674b47bffc29042acda48281e198" kindref="member">ConvertedType::type</ref><sp/>converted_type<sp/>=<sp/><ref refid="structparquet_1_1_converted_type_1a4c93674b47bffc29042acda48281e198adeb8756102a33f6619ada0dafcdf4167" kindref="member">ConvertedType::NONE</ref>,</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>-1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision<sp/>=<sp/>-1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scale<sp/>=<sp/>-1,</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>field_id<sp/>=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceparquet_1_1schema_1a7fe5ee27b1dd5f12098ce3f3e6200b9e" kindref="member">NodePtr</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1schema_1_1_primitive_node" kindref="compound">PrimitiveNode</ref>(name,<sp/>repetition,<sp/>type,<sp/>converted_type,<sp/>length,</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>precision,<sp/>scale,<sp/>field_id));</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>no<sp/>logical<sp/>type,<sp/>pass<sp/>LogicalType::None()<sp/>or<sp/>nullptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>field_id<sp/>-1<sp/>(or<sp/>any<sp/>negative<sp/>value)<sp/>will<sp/>be<sp/>serialized<sp/>as<sp/>null<sp/>in<sp/>Thrift</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218" refid="classparquet_1_1schema_1_1_primitive_node_1a32dfc2809c6954aafc5bc76afebaf2b6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>NodePtr<sp/><ref refid="classparquet_1_1schema_1_1_primitive_node_1a32dfc2809c6954aafc5bc76afebaf2b6" kindref="member">Make</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/><ref refid="structparquet_1_1_repetition_1a7e942dfcd49240c465cdf3e1dc011af4" kindref="member">Repetition::type</ref><sp/>repetition,</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;const<sp/>LogicalType&gt;<sp/>logical_type,</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structparquet_1_1_type_1a2a4b0ad3da98a8a407a0dc3ecbf737ca" kindref="member">Type::type</ref><sp/>primitive_type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>primitive_length<sp/>=<sp/>-1,</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>field_id<sp/>=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceparquet_1_1schema_1a7fe5ee27b1dd5f12098ce3f3e6200b9e" kindref="member">NodePtr</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1schema_1_1_primitive_node" kindref="compound">PrimitiveNode</ref>(name,<sp/>repetition,<sp/>logical_type,<sp/>primitive_type,</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>primitive_length,<sp/>field_id));</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Equals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1schema_1_1_node" kindref="compound">Node</ref>*<sp/>other)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228" refid="classparquet_1_1schema_1_1_primitive_node_1a2b36dedb251d5352725de4ad93b88395" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structparquet_1_1_type_1a2a4b0ad3da98a8a407a0dc3ecbf737ca" kindref="member">Type::type</ref><sp/><ref refid="classparquet_1_1schema_1_1_primitive_node_1a2b36dedb251d5352725de4ad93b88395" kindref="member">physical_type</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>physical_type_;<sp/>}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="230" refid="classparquet_1_1schema_1_1_primitive_node_1aa2f3152d3503bcd62ff776cfff7a8d9c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classparquet_1_1_column_order" kindref="compound">ColumnOrder</ref><sp/><ref refid="classparquet_1_1schema_1_1_primitive_node_1aa2f3152d3503bcd62ff776cfff7a8d9c" kindref="member">column_order</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>column_order_;<sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232" refid="classparquet_1_1schema_1_1_primitive_node_1a899e76b9ab964a71db5bf2638c8537c2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1schema_1_1_primitive_node_1a899e76b9ab964a71db5bf2638c8537c2" kindref="member">SetColumnOrder</ref>(<ref refid="classparquet_1_1_column_order" kindref="compound">ColumnOrder</ref><sp/>column_order)<sp/>{<sp/>column_order_<sp/>=<sp/>column_order;<sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234" refid="classparquet_1_1schema_1_1_primitive_node_1acd6e4360f35187b6de334e0c8e902c0e" refkind="member"><highlight class="normal"><sp/><sp/>int32_t<sp/><ref refid="classparquet_1_1schema_1_1_primitive_node_1acd6e4360f35187b6de334e0c8e902c0e" kindref="member">type_length</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_length_;<sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="236" refid="classparquet_1_1schema_1_1_primitive_node_1ad6ac2bd61ad22db3c5ee102e9f1d0c02" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structparquet_1_1schema_1_1_decimal_metadata" kindref="compound">DecimalMetadata</ref>&amp;<sp/><ref refid="classparquet_1_1schema_1_1_primitive_node_1ad6ac2bd61ad22db3c5ee102e9f1d0c02" kindref="member">decimal_metadata</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>decimal_metadata_;<sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceparquet_1_1schema_1a15563c58c5e627fc2776ab3228cb07ce" kindref="member">ToParquet</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>element)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Visit(<ref refid="classparquet_1_1schema_1_1_node_1_1_visitor" kindref="compound">Visitor</ref>*<sp/>visitor)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VisitConst(<ref refid="classparquet_1_1schema_1_1_node_1_1_const_visitor" kindref="compound">ConstVisitor</ref>*<sp/>visitor)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><ref refid="classparquet_1_1schema_1_1_primitive_node" kindref="compound">PrimitiveNode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/><ref refid="structparquet_1_1_repetition_1a7e942dfcd49240c465cdf3e1dc011af4" kindref="member">Repetition::type</ref><sp/>repetition,<sp/><ref refid="structparquet_1_1_type_1a2a4b0ad3da98a8a407a0dc3ecbf737ca" kindref="member">Type::type</ref><sp/><ref refid="classparquet_1_1schema_1_1_node_1aab450ce50c75c565dde2d550311c5020" kindref="member">type</ref>,</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structparquet_1_1_converted_type_1a4c93674b47bffc29042acda48281e198" kindref="member">ConvertedType::type</ref><sp/>converted_type<sp/>=<sp/><ref refid="structparquet_1_1_converted_type_1a4c93674b47bffc29042acda48281e198adeb8756102a33f6619ada0dafcdf4167" kindref="member">ConvertedType::NONE</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>length<sp/>=<sp/>-1,</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>precision<sp/>=<sp/>-1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>scale<sp/>=<sp/>-1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>field_id<sp/>=<sp/>-1);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><ref refid="classparquet_1_1schema_1_1_primitive_node" kindref="compound">PrimitiveNode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/><ref refid="structparquet_1_1_repetition_1a7e942dfcd49240c465cdf3e1dc011af4" kindref="member">Repetition::type</ref><sp/>repetition,</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;const<sp/>LogicalType&gt;<sp/>logical_type,</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structparquet_1_1_type_1a2a4b0ad3da98a8a407a0dc3ecbf737ca" kindref="member">Type::type</ref><sp/>primitive_type,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>primitive_length<sp/>=<sp/>-1,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>field_id<sp/>=<sp/>-1);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><ref refid="structparquet_1_1_type_1a2a4b0ad3da98a8a407a0dc3ecbf737ca" kindref="member">Type::type</ref><sp/>physical_type_;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>int32_t<sp/>type_length_;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><ref refid="structparquet_1_1schema_1_1_decimal_metadata" kindref="compound">DecimalMetadata</ref><sp/>decimal_metadata_;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><ref refid="classparquet_1_1_column_order" kindref="compound">ColumnOrder</ref><sp/>column_order_;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>FIXED_LEN_BYTE_ARRAY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetTypeLength(int32_t<sp/>length)<sp/>{<sp/>type_length_<sp/>=<sp/>length;<sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EqualsInternal(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1schema_1_1_primitive_node" kindref="compound">PrimitiveNode</ref>*<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><ref refid="macros_8h_1a8d443b4cc1d87a7a17943b8fbdbf3910" kindref="member">FRIEND_TEST</ref>(TestPrimitiveNode,<sp/>Attrs);</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><ref refid="macros_8h_1a8d443b4cc1d87a7a17943b8fbdbf3910" kindref="member">FRIEND_TEST</ref>(TestPrimitiveNode,<sp/>Equals);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><ref refid="macros_8h_1a8d443b4cc1d87a7a17943b8fbdbf3910" kindref="member">FRIEND_TEST</ref>(TestPrimitiveNode,<sp/>PhysicalLogicalMapping);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><ref refid="macros_8h_1a8d443b4cc1d87a7a17943b8fbdbf3910" kindref="member">FRIEND_TEST</ref>(TestPrimitiveNode,<sp/>FromParquet);</highlight></codeline>
<codeline lineno="265"><highlight class="normal">};</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="267" refid="classparquet_1_1schema_1_1_group_node" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">PARQUET_EXPORT<sp/><ref refid="classparquet_1_1schema_1_1_group_node" kindref="compound">GroupNode</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1schema_1_1_node" kindref="compound">Node</ref><sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>field_id<sp/>here<sp/>is<sp/>the<sp/>default<sp/>to<sp/>use<sp/>if<sp/>it<sp/>is<sp/>not<sp/>set<sp/>in<sp/>the<sp/>SchemaElement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;Node&gt;<sp/><ref refid="namespaceparquet_1_1schema_1ac9d8e5707577790f516f7508f5f8a9bb" kindref="member">FromParquet</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>opaque_element,</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NodeVector<sp/>fields<sp/>=<sp/>{},<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>field_id<sp/>=<sp/>-1);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>field_id<sp/>-1<sp/>(or<sp/>any<sp/>negative<sp/>value)<sp/>will<sp/>be<sp/>serialized<sp/>as<sp/>null<sp/>in<sp/>Thrift</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274" refid="classparquet_1_1schema_1_1_group_node_1a68f17d0fe35797e96e837f4c795189fe" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>NodePtr<sp/><ref refid="classparquet_1_1schema_1_1_group_node_1a68f17d0fe35797e96e837f4c795189fe" kindref="member">Make</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/><ref refid="structparquet_1_1_repetition_1a7e942dfcd49240c465cdf3e1dc011af4" kindref="member">Repetition::type</ref><sp/>repetition,</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NodeVector&amp;<sp/>fields,</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structparquet_1_1_converted_type_1a4c93674b47bffc29042acda48281e198" kindref="member">ConvertedType::type</ref><sp/>converted_type<sp/>=<sp/><ref refid="structparquet_1_1_converted_type_1a4c93674b47bffc29042acda48281e198adeb8756102a33f6619ada0dafcdf4167" kindref="member">ConvertedType::NONE</ref>,</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>field_id<sp/>=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceparquet_1_1schema_1a7fe5ee27b1dd5f12098ce3f3e6200b9e" kindref="member">NodePtr</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1schema_1_1_group_node" kindref="compound">GroupNode</ref>(name,<sp/>repetition,<sp/>fields,<sp/>converted_type,<sp/>field_id));</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>no<sp/>logical<sp/>type,<sp/>pass<sp/>nullptr</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>field_id<sp/>-1<sp/>(or<sp/>any<sp/>negative<sp/>value)<sp/>will<sp/>be<sp/>serialized<sp/>as<sp/>null<sp/>in<sp/>Thrift</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283" refid="classparquet_1_1schema_1_1_group_node_1a9f6d40f0ec65a381e77ec8e49bae9541" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>NodePtr<sp/><ref refid="classparquet_1_1schema_1_1_group_node_1a9f6d40f0ec65a381e77ec8e49bae9541" kindref="member">Make</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/><ref refid="structparquet_1_1_repetition_1a7e942dfcd49240c465cdf3e1dc011af4" kindref="member">Repetition::type</ref><sp/>repetition,</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NodeVector&amp;<sp/>fields,</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;const<sp/>LogicalType&gt;<sp/>logical_type,</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>field_id<sp/>=<sp/>-1)<sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceparquet_1_1schema_1a7fe5ee27b1dd5f12098ce3f3e6200b9e" kindref="member">NodePtr</ref>(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1schema_1_1_group_node" kindref="compound">GroupNode</ref>(name,<sp/>repetition,<sp/>fields,<sp/>logical_type,<sp/>field_id));</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Equals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1schema_1_1_node" kindref="compound">Node</ref>*<sp/>other)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="292" refid="classparquet_1_1schema_1_1_group_node_1a34be6c9218e1a9296da01f03c3fd05d2" refkind="member"><highlight class="normal"><sp/><sp/>NodePtr<sp/><ref refid="classparquet_1_1schema_1_1_group_node_1a34be6c9218e1a9296da01f03c3fd05d2" kindref="member">field</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fields_[i];<sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>index<sp/>of<sp/>a<sp/>field<sp/>by<sp/>its<sp/>name,<sp/>or<sp/>negative<sp/>value<sp/>if<sp/>not<sp/>found.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>several<sp/>fields<sp/>share<sp/>the<sp/>same<sp/>name,<sp/>it<sp/>is<sp/>unspecified<sp/>which<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>returned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FieldIndex(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>index<sp/>of<sp/>a<sp/>field<sp/>by<sp/>its<sp/>node,<sp/>or<sp/>negative<sp/>value<sp/>if<sp/>not<sp/>found.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>FieldIndex(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1schema_1_1_node" kindref="compound">Node</ref>&amp;<sp/>node)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300" refid="classparquet_1_1schema_1_1_group_node_1a19e216f9fb5511237a24781ad0dafdd5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1schema_1_1_group_node_1a19e216f9fb5511237a24781ad0dafdd5" kindref="member">field_count</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(fields_.size());<sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespaceparquet_1_1schema_1a15563c58c5e627fc2776ab3228cb07ce" kindref="member">ToParquet</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>element)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Visit(<ref refid="classparquet_1_1schema_1_1_node_1_1_visitor" kindref="compound">Visitor</ref>*<sp/>visitor)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VisitConst(<ref refid="classparquet_1_1schema_1_1_node_1_1_const_visitor" kindref="compound">ConstVisitor</ref>*<sp/>visitor)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HasRepeatedFields()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><ref refid="classparquet_1_1schema_1_1_group_node" kindref="compound">GroupNode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/><ref refid="structparquet_1_1_repetition_1a7e942dfcd49240c465cdf3e1dc011af4" kindref="member">Repetition::type</ref><sp/>repetition,</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NodeVector&amp;<sp/>fields,</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structparquet_1_1_converted_type_1a4c93674b47bffc29042acda48281e198" kindref="member">ConvertedType::type</ref><sp/>converted_type<sp/>=<sp/><ref refid="structparquet_1_1_converted_type_1a4c93674b47bffc29042acda48281e198adeb8756102a33f6619ada0dafcdf4167" kindref="member">ConvertedType::NONE</ref>,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>field_id<sp/>=<sp/>-1);</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><ref refid="classparquet_1_1schema_1_1_group_node" kindref="compound">GroupNode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name,<sp/><ref refid="structparquet_1_1_repetition_1a7e942dfcd49240c465cdf3e1dc011af4" kindref="member">Repetition::type</ref><sp/>repetition,</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>NodeVector&amp;<sp/>fields,<sp/>std::shared_ptr&lt;const<sp/>LogicalType&gt;<sp/>logical_type,</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>field_id<sp/>=<sp/>-1);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>NodeVector<sp/>fields_;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>EqualsInternal(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1schema_1_1_group_node" kindref="compound">GroupNode</ref>*<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mapping<sp/>between<sp/>field<sp/>name<sp/>to<sp/>the<sp/>field<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>std::unordered_multimap&lt;std::string,<sp/>int&gt;<sp/>field_name_to_idx_;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><ref refid="macros_8h_1a8d443b4cc1d87a7a17943b8fbdbf3910" kindref="member">FRIEND_TEST</ref>(TestGroupNode,<sp/>Attrs);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><ref refid="macros_8h_1a8d443b4cc1d87a7a17943b8fbdbf3910" kindref="member">FRIEND_TEST</ref>(TestGroupNode,<sp/>Equals);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><ref refid="macros_8h_1a8d443b4cc1d87a7a17943b8fbdbf3910" kindref="member">FRIEND_TEST</ref>(TestGroupNode,<sp/>FieldIndex);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><ref refid="macros_8h_1a8d443b4cc1d87a7a17943b8fbdbf3910" kindref="member">FRIEND_TEST</ref>(TestGroupNode,<sp/>FieldIndexDuplicateName);</highlight></codeline>
<codeline lineno="329"><highlight class="normal">};</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Convenience<sp/>primitive<sp/>type<sp/>factory<sp/>functions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334" refid="schema_8h_1a777b6f062ff4596f0f9fdb34c47d25b5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PRIMITIVE_FACTORY(FuncName,<sp/>TYPE)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="335"><highlight class="preprocessor"><sp/><sp/>static<sp/>inline<sp/>NodePtr<sp/>FuncName(const<sp/>std::string&amp;<sp/>name,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="336"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Repetition::type<sp/>repetition<sp/>=<sp/>Repetition::OPTIONAL,<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="337"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int<sp/>field_id<sp/>=<sp/>-1)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="338"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>PrimitiveNode::Make(name,<sp/>repetition,<sp/>Type::TYPE,<sp/>ConvertedType::NONE,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="339"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*length=*/</highlight><highlight class="preprocessor">-1,<sp/></highlight><highlight class="comment">/*precision=*/</highlight><highlight class="preprocessor">-1,<sp/></highlight><highlight class="comment">/*scale=*/</highlight><highlight class="preprocessor">-1,<sp/>field_id);<sp/>\</highlight></codeline>
<codeline lineno="340"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><ref refid="schema_8h_1a777b6f062ff4596f0f9fdb34c47d25b5" kindref="member">PRIMITIVE_FACTORY</ref>(Boolean,<sp/>BOOLEAN)</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><ref refid="schema_8h_1a777b6f062ff4596f0f9fdb34c47d25b5" kindref="member">PRIMITIVE_FACTORY</ref>(Int32,<sp/>INT32)</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><ref refid="schema_8h_1a777b6f062ff4596f0f9fdb34c47d25b5" kindref="member">PRIMITIVE_FACTORY</ref>(Int64,<sp/>INT64)</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><ref refid="schema_8h_1a777b6f062ff4596f0f9fdb34c47d25b5" kindref="member">PRIMITIVE_FACTORY</ref>(Int96,<sp/>INT96)</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><ref refid="schema_8h_1a777b6f062ff4596f0f9fdb34c47d25b5" kindref="member">PRIMITIVE_FACTORY</ref>(Float,<sp/>FLOAT)</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><ref refid="schema_8h_1a777b6f062ff4596f0f9fdb34c47d25b5" kindref="member">PRIMITIVE_FACTORY</ref>(Double,<sp/>DOUBLE)</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><ref refid="schema_8h_1a777b6f062ff4596f0f9fdb34c47d25b5" kindref="member">PRIMITIVE_FACTORY</ref>(ByteArray,<sp/>BYTE_ARRAY)</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PARQUET_EXPORT<sp/><ref refid="namespaceparquet_1_1schema_1ac09846741b35e12ab0a19aa4a88d7641" kindref="member">PrintSchema</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>schema::Node*<sp/><ref refid="group__schema-factories_1gab03f1059d8776b1e85ee93c7cd03a078" kindref="member">schema</ref>,<sp/>std::ostream&amp;<sp/>stream,</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indent_width<sp/>=<sp/>2);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>schema</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>ColumnDescriptor<sp/>encapsulates<sp/>information<sp/>necessary<sp/>to<sp/>interpret</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight><highlight class="comment">//<sp/>primitive<sp/>column<sp/>data<sp/>in<sp/>the<sp/>context<sp/>of<sp/>a<sp/>particular<sp/>schema.<sp/>We<sp/>have<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="comment">//<sp/>examine<sp/>the<sp/>node<sp/>structure<sp/>of<sp/>a<sp/>column&apos;s<sp/>path<sp/>to<sp/>the<sp/>root<sp/>in<sp/>the<sp/>schema<sp/>tree</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>be<sp/>able<sp/>to<sp/>reassemble<sp/>the<sp/>nested<sp/>structure<sp/>from<sp/>the<sp/>repetition<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="comment">//<sp/>definition<sp/>levels.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360" refid="classparquet_1_1_column_descriptor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">PARQUET_EXPORT<sp/><ref refid="classparquet_1_1_column_descriptor" kindref="compound">ColumnDescriptor</ref><sp/>{</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><ref refid="classparquet_1_1_column_descriptor" kindref="compound">ColumnDescriptor</ref>(<ref refid="namespaceparquet_1_1schema_1a7fe5ee27b1dd5f12098ce3f3e6200b9e" kindref="member">schema::NodePtr</ref><sp/>node,<sp/>int16_t<sp/>max_definition_level,</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int16_t<sp/>max_repetition_level,</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_schema_descriptor" kindref="compound">SchemaDescriptor</ref>*<sp/>schema_descr<sp/>=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>);</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Equals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_column_descriptor" kindref="compound">ColumnDescriptor</ref>&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight></codeline>
<codeline lineno="368" refid="classparquet_1_1_column_descriptor_1a0a2d3d16664258ee42a947e2d49bcdb5" refkind="member"><highlight class="normal"><sp/><sp/>int16_t<sp/><ref refid="classparquet_1_1_column_descriptor_1a0a2d3d16664258ee42a947e2d49bcdb5" kindref="member">max_definition_level</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max_definition_level_;<sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370" refid="classparquet_1_1_column_descriptor_1af79cba7faa8b0dd1ca9cca098dad1b8c" refkind="member"><highlight class="normal"><sp/><sp/>int16_t<sp/><ref refid="classparquet_1_1_column_descriptor_1af79cba7faa8b0dd1ca9cca098dad1b8c" kindref="member">max_repetition_level</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>max_repetition_level_;<sp/>}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372" refid="classparquet_1_1_column_descriptor_1af045ed326bea5afa15ad5783beece69f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structparquet_1_1_type_1a2a4b0ad3da98a8a407a0dc3ecbf737ca" kindref="member">Type::type</ref><sp/><ref refid="classparquet_1_1_column_descriptor_1af045ed326bea5afa15ad5783beece69f" kindref="member">physical_type</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>primitive_node_-&gt;physical_type();<sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374" refid="classparquet_1_1_column_descriptor_1acd8a1ac9cdb9bf5f1d1c0bb7cc34a0fc" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structparquet_1_1_converted_type_1a4c93674b47bffc29042acda48281e198" kindref="member">ConvertedType::type</ref><sp/><ref refid="classparquet_1_1_column_descriptor_1acd8a1ac9cdb9bf5f1d1c0bb7cc34a0fc" kindref="member">converted_type</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>primitive_node_-&gt;converted_type();<sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376" refid="classparquet_1_1_column_descriptor_1a7770f4cdedef15e640d5a053836ce990" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;const<sp/>LogicalType&gt;&amp;<sp/><ref refid="classparquet_1_1_column_descriptor_1a7770f4cdedef15e640d5a053836ce990" kindref="member">logical_type</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>primitive_node_-&gt;logical_type();</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="380" refid="classparquet_1_1_column_descriptor_1a557b15f2c0ccba13accf18c5563c1e15" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classparquet_1_1_column_order" kindref="compound">ColumnOrder</ref><sp/><ref refid="classparquet_1_1_column_descriptor_1a557b15f2c0ccba13accf18c5563c1e15" kindref="member">column_order</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>primitive_node_-&gt;column_order();<sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382" refid="classparquet_1_1_column_descriptor_1addce92c48ac69298c264321eb4645cf3" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structparquet_1_1_sort_order_1a7aa8892393c3e16bd25f11595281eee8" kindref="member">SortOrder::type</ref><sp/><ref refid="classparquet_1_1_column_descriptor_1addce92c48ac69298c264321eb4645cf3" kindref="member">sort_order</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>la<sp/>=<sp/>logical_type();</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>pt<sp/>=<sp/>physical_type();</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>la<sp/>?<sp/><ref refid="namespaceparquet_1ad0e255fea359ebd3737817c4e0ea4659" kindref="member">GetSortOrder</ref>(la,<sp/>pt)<sp/>:<sp/><ref refid="namespaceparquet_1ad0e255fea359ebd3737817c4e0ea4659" kindref="member">GetSortOrder</ref>(converted_type(),<sp/>pt);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388" refid="classparquet_1_1_column_descriptor_1a05efb939de7b7660119e8bb0130c2d5f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="classparquet_1_1_column_descriptor_1a05efb939de7b7660119e8bb0130c2d5f" kindref="member">name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>primitive_node_-&gt;name();<sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;schema::ColumnPath&gt;<sp/>path()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392" refid="classparquet_1_1_column_descriptor_1a4819404f05de143569013f993e831c93" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceparquet_1_1schema_1a7fe5ee27b1dd5f12098ce3f3e6200b9e" kindref="member">schema::NodePtr</ref>&amp;<sp/><ref refid="classparquet_1_1_column_descriptor_1a4819404f05de143569013f993e831c93" kindref="member">schema_node</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>node_;<sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type_length()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type_precision()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type_scale()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><ref refid="namespaceparquet_1_1schema_1a7fe5ee27b1dd5f12098ce3f3e6200b9e" kindref="member">schema::NodePtr</ref><sp/>node_;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1schema_1_1_primitive_node" kindref="compound">schema::PrimitiveNode</ref>*<sp/>primitive_node_;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>int16_t<sp/>max_definition_level_;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>int16_t<sp/>max_repetition_level_;</highlight></codeline>
<codeline lineno="408"><highlight class="normal">};</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Container<sp/>for<sp/>the<sp/>converted<sp/>Parquet<sp/>schema<sp/>with<sp/>a<sp/>computed<sp/>information<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>schema<sp/>analysis<sp/>needed<sp/>for<sp/>file<sp/>reading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>Column<sp/>index<sp/>to<sp/>Node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="comment">//<sp/>*<sp/>Max<sp/>repetition<sp/>/<sp/>definition<sp/>levels<sp/>for<sp/>each<sp/>primitive<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>ColumnDescriptor<sp/>objects<sp/>produced<sp/>by<sp/>this<sp/>class<sp/>can<sp/>be<sp/>used<sp/>to<sp/>assist<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>reconstruction<sp/>of<sp/>fully<sp/>materialized<sp/>data<sp/>structures<sp/>from<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="comment">//<sp/>repetition-definition<sp/>level<sp/>encoding<sp/>of<sp/>nested<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO(wesm):<sp/>this<sp/>object<sp/>can<sp/>be<sp/>recomputed<sp/>from<sp/>a<sp/>Schema</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421" refid="classparquet_1_1_schema_descriptor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">PARQUET_EXPORT<sp/><ref refid="classparquet_1_1_schema_descriptor" kindref="compound">SchemaDescriptor</ref><sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="423" refid="classparquet_1_1_schema_descriptor_1a5b5b5d29525cf4b5a7087abf83d4bb2a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classparquet_1_1_schema_descriptor_1a5b5b5d29525cf4b5a7087abf83d4bb2a" kindref="member">SchemaDescriptor</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="424" refid="classparquet_1_1_schema_descriptor_1aaf2ebb6a1a75db1411e41172b9cfb8e2" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classparquet_1_1_schema_descriptor_1aaf2ebb6a1a75db1411e41172b9cfb8e2" kindref="member">~SchemaDescriptor</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Analyze<sp/>the<sp/>schema</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Init(std::unique_ptr&lt;schema::Node&gt;<sp/><ref refid="group__schema-factories_1gab03f1059d8776b1e85ee93c7cd03a078" kindref="member">schema</ref>);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Init(<ref refid="namespaceparquet_1_1schema_1a7fe5ee27b1dd5f12098ce3f3e6200b9e" kindref="member">schema::NodePtr</ref><sp/>schema);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_column_descriptor" kindref="compound">ColumnDescriptor</ref>*<sp/>Column(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>index<sp/>of<sp/>a<sp/>column<sp/>by<sp/>its<sp/>dotstring<sp/>path,<sp/>or<sp/>negative<sp/>value<sp/>if<sp/>not<sp/>found.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>several<sp/>columns<sp/>share<sp/>the<sp/>same<sp/>dotstring<sp/>path,<sp/>it<sp/>is<sp/>unspecified<sp/>which<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>returned.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ColumnIndex(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>node_path)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>index<sp/>of<sp/>a<sp/>column<sp/>by<sp/>its<sp/>node,<sp/>or<sp/>negative<sp/>value<sp/>if<sp/>not<sp/>found.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ColumnIndex(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1schema_1_1_node" kindref="compound">schema::Node</ref>&amp;<sp/>node)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Equals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_schema_descriptor" kindref="compound">SchemaDescriptor</ref>&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>number<sp/>of<sp/>physical<sp/>columns<sp/>appearing<sp/>in<sp/>the<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442" refid="classparquet_1_1_schema_descriptor_1aea2e0d2c44d6773eaba4ef03cd01ee84" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_schema_descriptor_1aea2e0d2c44d6773eaba4ef03cd01ee84" kindref="member">num_columns</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(leaves_.size());<sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444" refid="classparquet_1_1_schema_descriptor_1ab8a626e2aa87d99758c5dc65be561193" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceparquet_1_1schema_1a7fe5ee27b1dd5f12098ce3f3e6200b9e" kindref="member">schema::NodePtr</ref>&amp;<sp/><ref refid="classparquet_1_1_schema_descriptor_1ab8a626e2aa87d99758c5dc65be561193" kindref="member">schema_root</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>schema_;<sp/>}</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446" refid="classparquet_1_1_schema_descriptor_1a2847d78a5031d07706b6513c2b795364" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1schema_1_1_group_node" kindref="compound">schema::GroupNode</ref>*<sp/><ref refid="classparquet_1_1_schema_descriptor_1a2847d78a5031d07706b6513c2b795364" kindref="member">group_node</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>group_node_;<sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>root<sp/>(child<sp/>of<sp/>the<sp/>schema<sp/>root)<sp/>node<sp/>of<sp/>the<sp/>leaf(column)<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1schema_1_1_node" kindref="compound">schema::Node</ref>*<sp/>GetColumnRoot(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451" refid="classparquet_1_1_schema_descriptor_1a71a8b8431afc0351e9aeb86076c359b5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="classparquet_1_1_schema_descriptor_1a71a8b8431afc0351e9aeb86076c359b5" kindref="member">name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>group_node_-&gt;name();<sp/>}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>updateColumnOrders(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;ColumnOrder&gt;&amp;<sp/>column_orders);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GetColumnIndex(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1schema_1_1_primitive_node" kindref="compound">schema::PrimitiveNode</ref>&amp;<sp/>node)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HasRepeatedFields()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="466" refid="classparquet_1_1_schema_descriptor_1a8161aca614cf5a396f74ef9cf7d6fb1d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classparquet_1_1_column_descriptor" kindref="compound">ColumnDescriptor</ref>;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Root<sp/>Node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><ref refid="namespaceparquet_1_1schema_1a7fe5ee27b1dd5f12098ce3f3e6200b9e" kindref="member">schema::NodePtr</ref><sp/>schema_;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Root<sp/>Node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1schema_1_1_group_node" kindref="compound">schema::GroupNode</ref>*<sp/>group_node_;</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BuildTree(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceparquet_1_1schema_1a7fe5ee27b1dd5f12098ce3f3e6200b9e" kindref="member">schema::NodePtr</ref>&amp;<sp/>node,<sp/>int16_t<sp/>max_def_level,</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int16_t<sp/>max_rep_level,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceparquet_1_1schema_1a7fe5ee27b1dd5f12098ce3f3e6200b9e" kindref="member">schema::NodePtr</ref>&amp;<sp/>base);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Result<sp/>of<sp/>leaf<sp/>node<sp/>/<sp/>tree<sp/>analysis</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/>std::vector&lt;ColumnDescriptor&gt;<sp/>leaves_;</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;const<sp/>schema::PrimitiveNode*,<sp/>int&gt;<sp/>node_to_leaf_index_;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mapping<sp/>between<sp/>leaf<sp/>nodes<sp/>and<sp/>root<sp/>group<sp/>of<sp/>leaf<sp/>(first<sp/>node</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>below<sp/>the<sp/>schema&apos;s<sp/>root<sp/>group)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>example,<sp/>the<sp/>leaf<sp/>`a.b.c.d`<sp/>would<sp/>have<sp/>a<sp/>link<sp/>back<sp/>to<sp/>`a`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--<sp/>a<sp/><sp/>&lt;------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--<sp/>--<sp/>b<sp/><sp/><sp/><sp/><sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--<sp/>--<sp/>--<sp/>c<sp/><sp/>|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>--<sp/>--<sp/>--<sp/>--<sp/>d</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;int,<sp/>schema::NodePtr&gt;<sp/>leaf_to_base_;</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Mapping<sp/>between<sp/>ColumnPath<sp/>DotString<sp/>to<sp/>the<sp/>leaf<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>std::unordered_multimap&lt;std::string,<sp/>int&gt;<sp/>leaf_to_idx_;</highlight></codeline>
<codeline lineno="494"><highlight class="normal">};</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>parquet</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/arrow/cpp/src/parquet/schema.h"/>
  </compounddef>
</doxygen>
