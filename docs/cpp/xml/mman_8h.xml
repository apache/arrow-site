<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="mman_8h" kind="file" language="C++">
    <compoundname>mman.h</compoundname>
    <includes refid="arrow_2util_2windows__compatibility_8h" local="yes">arrow/util/windows_compatibility.h</includes>
    <includes local="no">errno.h</includes>
    <includes local="no">io.h</includes>
    <includes local="no">sys/types.h</includes>
    <includes local="no">cstdint</includes>
    <incdepgraph>
      <node id="8348">
        <label>cstdint</label>
      </node>
      <node id="8343">
        <label>/arrow/cpp/src/arrow/io/mman.h</label>
        <link refid="mman_8h"/>
        <childnode refid="8344" relation="include">
        </childnode>
        <childnode refid="8345" relation="include">
        </childnode>
        <childnode refid="8346" relation="include">
        </childnode>
        <childnode refid="8347" relation="include">
        </childnode>
        <childnode refid="8348" relation="include">
        </childnode>
      </node>
      <node id="8345">
        <label>errno.h</label>
      </node>
      <node id="8346">
        <label>io.h</label>
      </node>
      <node id="8344">
        <label>arrow/util/windows_compatibility.h</label>
        <link refid="arrow_2util_2windows__compatibility_8h"/>
      </node>
      <node id="8347">
        <label>sys/types.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="mman_8h_1a6a982b48b8d3eb8eccd17e0d54ee5379" prot="public" static="no">
        <name>PROT_NONE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/mman.h" line="18" column="9" bodyfile="/arrow/cpp/src/arrow/io/mman.h" bodystart="18" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mman_8h_1a15bf68ce8b590838b3a5c0b639d8d519" prot="public" static="no">
        <name>PROT_READ</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/mman.h" line="19" column="9" bodyfile="/arrow/cpp/src/arrow/io/mman.h" bodystart="19" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mman_8h_1a2a79c8ceefb8fc25a940ae07a3d94429" prot="public" static="no">
        <name>PROT_WRITE</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/mman.h" line="20" column="9" bodyfile="/arrow/cpp/src/arrow/io/mman.h" bodystart="20" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mman_8h_1a77848f068638e916c72cd543f5ecb815" prot="public" static="no">
        <name>PROT_EXEC</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/mman.h" line="21" column="9" bodyfile="/arrow/cpp/src/arrow/io/mman.h" bodystart="21" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mman_8h_1a238feed3512d8b21b3854d082dcae6f4" prot="public" static="no">
        <name>MAP_FILE</name>
        <initializer>0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/mman.h" line="23" column="9" bodyfile="/arrow/cpp/src/arrow/io/mman.h" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mman_8h_1a57028962c2a7c0c802ca6613492f2ef3" prot="public" static="no">
        <name>MAP_SHARED</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/mman.h" line="24" column="9" bodyfile="/arrow/cpp/src/arrow/io/mman.h" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mman_8h_1a398ef47a991a44389aa9818c98a28d24" prot="public" static="no">
        <name>MAP_PRIVATE</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/mman.h" line="25" column="9" bodyfile="/arrow/cpp/src/arrow/io/mman.h" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mman_8h_1aa016f26675334cfc166d97dc9ec7d318" prot="public" static="no">
        <name>MAP_TYPE</name>
        <initializer>0xf</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/mman.h" line="26" column="9" bodyfile="/arrow/cpp/src/arrow/io/mman.h" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mman_8h_1a387ec707b30c5e78cf20a14517a63b96" prot="public" static="no">
        <name>MAP_FIXED</name>
        <initializer>0x10</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/mman.h" line="27" column="9" bodyfile="/arrow/cpp/src/arrow/io/mman.h" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mman_8h_1ae4f86bff73414c5fc08c058f957212f0" prot="public" static="no">
        <name>MAP_ANONYMOUS</name>
        <initializer>0x20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/mman.h" line="28" column="9" bodyfile="/arrow/cpp/src/arrow/io/mman.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mman_8h_1a298ddbffafbe6cf941b92092edfb86a5" prot="public" static="no">
        <name>MAP_ANON</name>
        <initializer><ref refid="mman_8h_1ae4f86bff73414c5fc08c058f957212f0" kindref="member">MAP_ANONYMOUS</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/mman.h" line="29" column="9" bodyfile="/arrow/cpp/src/arrow/io/mman.h" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mman_8h_1a8523dcf952f6ff059a3bed717e4f1296" prot="public" static="no">
        <name>MAP_FAILED</name>
        <initializer>((void*)-1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/mman.h" line="31" column="9" bodyfile="/arrow/cpp/src/arrow/io/mman.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mman_8h_1a98930d8c4137a6cf3f9e21b2b7c84c24" prot="public" static="no">
        <name>MS_ASYNC</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/mman.h" line="34" column="9" bodyfile="/arrow/cpp/src/arrow/io/mman.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mman_8h_1aee74e153705852ce48dca911f1b94d72" prot="public" static="no">
        <name>MS_SYNC</name>
        <initializer>2</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/mman.h" line="35" column="9" bodyfile="/arrow/cpp/src/arrow/io/mman.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mman_8h_1ad094236c94cb5fcfd6a663b646782bc8" prot="public" static="no">
        <name>MS_INVALIDATE</name>
        <initializer>4</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/mman.h" line="36" column="9" bodyfile="/arrow/cpp/src/arrow/io/mman.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="mman_8h_1a7eee74d8247396bbf6fa81d4613b359b" prot="public" static="no">
        <name>FILE_MAP_EXECUTE</name>
        <initializer>0x0020</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/mman.h" line="39" column="9" bodyfile="/arrow/cpp/src/arrow/io/mman.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="mman_8h_1a6a345ee3cd9aba74b9d28768f3cb47f1" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void *</type>
        <definition>static void* mmap</definition>
        <argsstring>(void *addr, size_t len, int prot, int flags, int fildes, off_t off)</argsstring>
        <name>mmap</name>
        <param>
          <type>void *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>prot</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>int</type>
          <declname>fildes</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>off</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/mman.h" line="74" column="1" bodyfile="/arrow/cpp/src/arrow/io/mman.h" bodystart="74" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="mman_8h_1a7cb054c7507e18d8d706713c2670f938" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int munmap</definition>
        <argsstring>(void *addr, size_t len)</argsstring>
        <name>munmap</name>
        <param>
          <type>void *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/mman.h" line="128" column="1" bodyfile="/arrow/cpp/src/arrow/io/mman.h" bodystart="128" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="mman_8h_1ac4a60cd724de9fd7ce9b88a4687143b8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int mprotect</definition>
        <argsstring>(void *addr, size_t len, int prot)</argsstring>
        <name>mprotect</name>
        <param>
          <type>void *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>prot</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/mman.h" line="136" column="1" bodyfile="/arrow/cpp/src/arrow/io/mman.h" bodystart="136" bodyend="145"/>
      </memberdef>
      <memberdef kind="function" id="mman_8h_1a29bf3f53ecdcb16a4366976e492f436e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int msync</definition>
        <argsstring>(void *addr, size_t len, int flags)</argsstring>
        <name>msync</name>
        <param>
          <type>void *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/mman.h" line="147" column="1" bodyfile="/arrow/cpp/src/arrow/io/mman.h" bodystart="147" bodyend="153"/>
      </memberdef>
      <memberdef kind="function" id="mman_8h_1a87ec164385a4f011657761f0564f3124" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int mlock</definition>
        <argsstring>(const void *addr, size_t len)</argsstring>
        <name>mlock</name>
        <param>
          <type>const void *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/mman.h" line="155" column="1" bodyfile="/arrow/cpp/src/arrow/io/mman.h" bodystart="155" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="mman_8h_1a5cf70930e544e2ba7a10b95a4122e3b6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>static int munlock</definition>
        <argsstring>(const void *addr, size_t len)</argsstring>
        <name>munlock</name>
        <param>
          <type>const void *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/mman.h" line="163" column="1" bodyfile="/arrow/cpp/src/arrow/io/mman.h" bodystart="163" bodyend="169"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Copyright<sp/>https://code.google.com/p/mman-win32/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Licensed<sp/>under<sp/>the<sp/>MIT<sp/>License;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>https://opensource.org/licenses/MIT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="arrow_2util_2windows__compatibility_8h" kindref="compound">arrow/util/windows_compatibility.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;errno.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;io.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18" refid="mman_8h_1a6a982b48b8d3eb8eccd17e0d54ee5379" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PROT_NONE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="mman_8h_1a15bf68ce8b590838b3a5c0b639d8d519" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PROT_READ<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20" refid="mman_8h_1a2a79c8ceefb8fc25a940ae07a3d94429" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PROT_WRITE<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21" refid="mman_8h_1a77848f068638e916c72cd543f5ecb815" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PROT_EXEC<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23" refid="mman_8h_1a238feed3512d8b21b3854d082dcae6f4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAP_FILE<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24" refid="mman_8h_1a57028962c2a7c0c802ca6613492f2ef3" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAP_SHARED<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25" refid="mman_8h_1a398ef47a991a44389aa9818c98a28d24" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAP_PRIVATE<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26" refid="mman_8h_1aa016f26675334cfc166d97dc9ec7d318" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAP_TYPE<sp/>0xf</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27" refid="mman_8h_1a387ec707b30c5e78cf20a14517a63b96" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAP_FIXED<sp/>0x10</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="mman_8h_1ae4f86bff73414c5fc08c058f957212f0" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAP_ANONYMOUS<sp/>0x20</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="mman_8h_1a298ddbffafbe6cf941b92092edfb86a5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAP_ANON<sp/>MAP_ANONYMOUS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="mman_8h_1a8523dcf952f6ff059a3bed717e4f1296" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MAP_FAILED<sp/>((void*)-1)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>Flags<sp/>for<sp/>msync.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34" refid="mman_8h_1a98930d8c4137a6cf3f9e21b2b7c84c24" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MS_ASYNC<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="mman_8h_1aee74e153705852ce48dca911f1b94d72" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MS_SYNC<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="mman_8h_1ad094236c94cb5fcfd6a663b646782bc8" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>MS_INVALIDATE<sp/>4</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>FILE_MAP_EXECUTE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="mman_8h_1a7eee74d8247396bbf6fa81d4613b359b" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>FILE_MAP_EXECUTE<sp/>0x0020</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>__map_mman_error(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DWORD<sp/>err,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deferr)<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(err<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO:<sp/>implement</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>err;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>DWORD<sp/>__map_mmap_prot_page(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prot)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>DWORD<sp/>protect<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prot<sp/>==<sp/><ref refid="mman_8h_1a6a982b48b8d3eb8eccd17e0d54ee5379" kindref="member">PROT_NONE</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>protect;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((prot<sp/>&amp;<sp/><ref refid="mman_8h_1a77848f068638e916c72cd543f5ecb815" kindref="member">PROT_EXEC</ref>)<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>protect<sp/>=<sp/>((prot<sp/>&amp;<sp/><ref refid="mman_8h_1a2a79c8ceefb8fc25a940ae07a3d94429" kindref="member">PROT_WRITE</ref>)<sp/>!=<sp/>0)<sp/>?<sp/>PAGE_EXECUTE_READWRITE<sp/>:<sp/>PAGE_EXECUTE_READ;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>protect<sp/>=<sp/>((prot<sp/>&amp;<sp/><ref refid="mman_8h_1a2a79c8ceefb8fc25a940ae07a3d94429" kindref="member">PROT_WRITE</ref>)<sp/>!=<sp/>0)<sp/>?<sp/>PAGE_READWRITE<sp/>:<sp/>PAGE_READONLY;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>protect;</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>DWORD<sp/>__map_mmap_prot_file(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prot)<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/>DWORD<sp/>desiredAccess<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prot<sp/>==<sp/><ref refid="mman_8h_1a6a982b48b8d3eb8eccd17e0d54ee5379" kindref="member">PROT_NONE</ref>)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>desiredAccess;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((prot<sp/>&amp;<sp/><ref refid="mman_8h_1a15bf68ce8b590838b3a5c0b639d8d519" kindref="member">PROT_READ</ref>)<sp/>!=<sp/>0)<sp/>desiredAccess<sp/>|=<sp/>FILE_MAP_READ;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((prot<sp/>&amp;<sp/><ref refid="mman_8h_1a2a79c8ceefb8fc25a940ae07a3d94429" kindref="member">PROT_WRITE</ref>)<sp/>!=<sp/>0)<sp/>desiredAccess<sp/>|=<sp/>FILE_MAP_WRITE;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((prot<sp/>&amp;<sp/><ref refid="mman_8h_1a77848f068638e916c72cd543f5ecb815" kindref="member">PROT_EXEC</ref>)<sp/>!=<sp/>0)<sp/>desiredAccess<sp/>|=<sp/><ref refid="mman_8h_1a7eee74d8247396bbf6fa81d4613b359b" kindref="member">FILE_MAP_EXECUTE</ref>;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>desiredAccess;</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>mmap(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>addr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prot,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fildes,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>off_t<sp/>off)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>HANDLE<sp/>fm,<sp/>h;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="group__type-factories_1ga18349773a5006d18cc0071b89715cb7a" kindref="member">map</ref><sp/>=<sp/><ref refid="mman_8h_1a8523dcf952f6ff059a3bed717e4f1296" kindref="member">MAP_FAILED</ref>;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>off64<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(off);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>maxSize<sp/>=<sp/>off64<sp/>+<sp/>len;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DWORD<sp/>dwFileOffsetLow<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">DWORD</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(off64<sp/>&amp;<sp/>0xFFFFFFFFUL);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DWORD<sp/>dwFileOffsetHigh<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">DWORD</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((off64<sp/>&gt;&gt;<sp/>32)<sp/>&amp;<sp/>0xFFFFFFFFUL);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DWORD<sp/>dwMaxSizeLow<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">DWORD</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(maxSize<sp/>&amp;<sp/>0xFFFFFFFFUL);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DWORD<sp/>dwMaxSizeHigh<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">DWORD</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">((maxSize<sp/>&gt;&gt;<sp/>32)<sp/>&amp;<sp/>0xFFFFFFFFUL);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DWORD<sp/>protect<sp/>=<sp/>__map_mmap_prot_page(prot);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>DWORD<sp/>desiredAccess<sp/>=<sp/>__map_mmap_prot_file(prot);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>errno<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(len<sp/>==<sp/>0</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unsupported<sp/>flag<sp/>combinations<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>(flags<sp/>&amp;<sp/><ref refid="mman_8h_1a387ec707b30c5e78cf20a14517a63b96" kindref="member">MAP_FIXED</ref>)<sp/>!=<sp/>0</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Unsupported<sp/>protection<sp/>combinations<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/>prot<sp/>==<sp/><ref refid="mman_8h_1a77848f068638e916c72cd543f5ecb815" kindref="member">PROT_EXEC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>EINVAL;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="mman_8h_1a8523dcf952f6ff059a3bed717e4f1296" kindref="member">MAP_FAILED</ref>;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>h<sp/>=<sp/>((flags<sp/>&amp;<sp/><ref refid="mman_8h_1ae4f86bff73414c5fc08c058f957212f0" kindref="member">MAP_ANONYMOUS</ref>)<sp/>==<sp/>0)<sp/>?<sp/>(HANDLE)_get_osfhandle(fildes)</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>INVALID_HANDLE_VALUE;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((flags<sp/>&amp;<sp/><ref refid="mman_8h_1ae4f86bff73414c5fc08c058f957212f0" kindref="member">MAP_ANONYMOUS</ref>)<sp/>==<sp/>0<sp/>&amp;&amp;<sp/>h<sp/>==<sp/>INVALID_HANDLE_VALUE)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>EBADF;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="mman_8h_1a8523dcf952f6ff059a3bed717e4f1296" kindref="member">MAP_FAILED</ref>;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>fm<sp/>=<sp/>CreateFileMapping(h,<sp/>NULL,<sp/>protect,<sp/>dwMaxSizeHigh,<sp/>dwMaxSizeLow,<sp/>NULL);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fm<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>__map_mman_error(GetLastError(),<sp/>EPERM);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="mman_8h_1a8523dcf952f6ff059a3bed717e4f1296" kindref="member">MAP_FAILED</ref>;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/>map<sp/>=<sp/>MapViewOfFile(fm,<sp/>desiredAccess,<sp/>dwFileOffsetHigh,<sp/>dwFileOffsetLow,<sp/>len);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/>CloseHandle(fm);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(map<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>errno<sp/>=<sp/>__map_mman_error(GetLastError(),<sp/>EPERM);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="mman_8h_1a8523dcf952f6ff059a3bed717e4f1296" kindref="member">MAP_FAILED</ref>;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__type-factories_1ga18349773a5006d18cc0071b89715cb7a" kindref="member">map</ref>;</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>munmap(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>addr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(UnmapViewOfFile(addr))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/>errno<sp/>=<sp/>__map_mman_error(GetLastError(),<sp/>EPERM);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mprotect(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>addr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>prot)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/>DWORD<sp/>newProtect<sp/>=<sp/>__map_mmap_prot_page(prot);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/>DWORD<sp/>oldProtect<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(VirtualProtect(addr,<sp/>len,<sp/>newProtect,<sp/>&amp;oldProtect))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>errno<sp/>=<sp/>__map_mman_error(GetLastError(),<sp/>EPERM);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="145"><highlight class="normal">}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>msync(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>addr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(FlushViewOfFile(addr,<sp/>len))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/>errno<sp/>=<sp/>__map_mman_error(GetLastError(),<sp/>EPERM);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="153"><highlight class="normal">}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mlock(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>addr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(VirtualLock((LPVOID)addr,<sp/>len))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>errno<sp/>=<sp/>__map_mman_error(GetLastError(),<sp/>EPERM);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="161"><highlight class="normal">}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>munlock(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>addr,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(VirtualUnlock((LPVOID)addr,<sp/>len))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>errno<sp/>=<sp/>__map_mman_error(GetLastError(),<sp/>EPERM);</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;</highlight></codeline>
<codeline lineno="169"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/arrow/cpp/src/arrow/io/mman.h"/>
  </compounddef>
</doxygen>
