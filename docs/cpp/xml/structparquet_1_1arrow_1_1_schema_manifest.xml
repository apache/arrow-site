<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structparquet_1_1arrow_1_1_schema_manifest" kind="struct" language="C++" prot="public">
    <compoundname>parquet::arrow::SchemaManifest</compoundname>
    <includes refid="arrow_2schema_8h" local="no">parquet/arrow/schema.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structparquet_1_1arrow_1_1_schema_manifest_1a858620a5744aa978df44fee02e1a5a62" prot="public" static="no" mutable="no">
        <type>const <ref refid="classparquet_1_1_schema_descriptor" kindref="compound">SchemaDescriptor</ref> *</type>
        <definition>const SchemaDescriptor* parquet::arrow::SchemaManifest::descr</definition>
        <argsstring></argsstring>
        <name>descr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/schema.h" line="114" column="1" bodyfile="/arrow/cpp/src/parquet/arrow/schema.h" bodystart="114" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structparquet_1_1arrow_1_1_schema_manifest_1aa0c55559a04e13c143b7fac1f27bab54" prot="public" static="no" mutable="no">
        <type>std::shared_ptr&lt;::<ref refid="classarrow_1_1_schema" kindref="compound">arrow::Schema</ref> &gt;</type>
        <definition>std::shared_ptr&lt;::arrow::Schema&gt; parquet::arrow::SchemaManifest::origin_schema</definition>
        <argsstring></argsstring>
        <name>origin_schema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/schema.h" line="115" column="1" bodyfile="/arrow/cpp/src/parquet/arrow/schema.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structparquet_1_1arrow_1_1_schema_manifest_1a94fc82e328e2762c580f14609c3f9410" prot="public" static="no" mutable="no">
        <type>std::shared_ptr&lt; const ::<ref refid="classarrow_1_1_key_value_metadata" kindref="compound">arrow::KeyValueMetadata</ref> &gt;</type>
        <definition>std::shared_ptr&lt;const ::arrow::KeyValueMetadata&gt; parquet::arrow::SchemaManifest::schema_metadata</definition>
        <argsstring></argsstring>
        <name>schema_metadata</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/schema.h" line="116" column="1" bodyfile="/arrow/cpp/src/parquet/arrow/schema.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structparquet_1_1arrow_1_1_schema_manifest_1a779f1b4659be0370707c8e49bce9fa4b" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structparquet_1_1arrow_1_1_schema_field" kindref="compound">SchemaField</ref> &gt;</type>
        <definition>std::vector&lt;SchemaField&gt; parquet::arrow::SchemaManifest::schema_fields</definition>
        <argsstring></argsstring>
        <name>schema_fields</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/schema.h" line="117" column="1" bodyfile="/arrow/cpp/src/parquet/arrow/schema.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structparquet_1_1arrow_1_1_schema_manifest_1aad7fcd4e578d6d801e1c580b5acac4c4" prot="public" static="no" mutable="no">
        <type>std::unordered_map&lt; int, const <ref refid="structparquet_1_1arrow_1_1_schema_field" kindref="compound">SchemaField</ref> * &gt;</type>
        <definition>std::unordered_map&lt;int, const SchemaField*&gt; parquet::arrow::SchemaManifest::column_index_to_field</definition>
        <argsstring></argsstring>
        <name>column_index_to_field</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/schema.h" line="119" column="1" bodyfile="/arrow/cpp/src/parquet/arrow/schema.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structparquet_1_1arrow_1_1_schema_manifest_1af480bcc0f5698c18badf317a53147068" prot="public" static="no" mutable="no">
        <type>std::unordered_map&lt; const <ref refid="structparquet_1_1arrow_1_1_schema_field" kindref="compound">SchemaField</ref> *, const <ref refid="structparquet_1_1arrow_1_1_schema_field" kindref="compound">SchemaField</ref> * &gt;</type>
        <definition>std::unordered_map&lt;const SchemaField*, const SchemaField*&gt; parquet::arrow::SchemaManifest::child_to_parent</definition>
        <argsstring></argsstring>
        <name>child_to_parent</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/schema.h" line="120" column="1" bodyfile="/arrow/cpp/src/parquet/arrow/schema.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structparquet_1_1arrow_1_1_schema_manifest_1af0f8a63e47bb7aec179e6aa44f2a217b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::<ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>::arrow::Status parquet::arrow::SchemaManifest::Make</definition>
        <argsstring>(const SchemaDescriptor *schema, const std::shared_ptr&lt; const ::arrow::KeyValueMetadata &gt; &amp;metadata, const ArrowReaderProperties &amp;properties, SchemaManifest *manifest)</argsstring>
        <name>Make</name>
        <param>
          <type>const <ref refid="classparquet_1_1_schema_descriptor" kindref="compound">SchemaDescriptor</ref> *</type>
          <declname>schema</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; const ::<ref refid="classarrow_1_1_key_value_metadata" kindref="compound">arrow::KeyValueMetadata</ref> &gt; &amp;</type>
          <declname>metadata</declname>
        </param>
        <param>
          <type>const <ref refid="classparquet_1_1_arrow_reader_properties" kindref="compound">ArrowReaderProperties</ref> &amp;</type>
          <declname>properties</declname>
        </param>
        <param>
          <type><ref refid="structparquet_1_1arrow_1_1_schema_manifest" kindref="compound">SchemaManifest</ref> *</type>
          <declname>manifest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/schema.h" line="109" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structparquet_1_1arrow_1_1_schema_manifest_1aaf06857060d94bdaadb847142f6ebc98" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>::<ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>::arrow::Status parquet::arrow::SchemaManifest::GetColumnField</definition>
        <argsstring>(int column_index, const SchemaField **out) const</argsstring>
        <name>GetColumnField</name>
        <param>
          <type>int</type>
          <declname>column_index</declname>
        </param>
        <param>
          <type>const <ref refid="structparquet_1_1arrow_1_1_schema_field" kindref="compound">SchemaField</ref> **</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/schema.h" line="122" column="1" bodyfile="/arrow/cpp/src/parquet/arrow/schema.h" bodystart="122" bodyend="130"/>
      </memberdef>
      <memberdef kind="function" id="structparquet_1_1arrow_1_1_schema_manifest_1a8ea4da5d49737b3579cc082b1c7c6e40" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structparquet_1_1arrow_1_1_schema_field" kindref="compound">SchemaField</ref> *</type>
        <definition>const SchemaField* parquet::arrow::SchemaManifest::GetParent</definition>
        <argsstring>(const SchemaField *field) const</argsstring>
        <name>GetParent</name>
        <param>
          <type>const <ref refid="structparquet_1_1arrow_1_1_schema_field" kindref="compound">SchemaField</ref> *</type>
          <declname>field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/schema.h" line="132" column="1" bodyfile="/arrow/cpp/src/parquet/arrow/schema.h" bodystart="132" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="structparquet_1_1arrow_1_1_schema_manifest_1ad7bdc87b3e0aaf1208987efa88f09ffa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool parquet::arrow::SchemaManifest::GetFieldIndices</definition>
        <argsstring>(const std::vector&lt; int &gt; &amp;column_indices, std::vector&lt; int &gt; *out)</argsstring>
        <name>GetFieldIndices</name>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>column_indices</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/schema.h" line="141" column="1" bodyfile="/arrow/cpp/src/parquet/arrow/schema.h" bodystart="141" bodyend="159"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Bridge between a parquet Schema and an arrow Schema. </para>    </briefdescription>
    <detaileddescription>
<para>Expose parquet columns as a tree structure. Useful traverse and link between arrow&apos;s Schema and parquet&apos;s Schema. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="4083">
        <label>parquet::arrow::SchemaManifest</label>
        <link refid="structparquet_1_1arrow_1_1_schema_manifest"/>
        <childnode refid="4084" relation="usage">
          <edgelabel>descr</edgelabel>
        </childnode>
      </node>
      <node id="4084">
        <label>parquet::SchemaDescriptor</label>
        <link refid="classparquet_1_1_schema_descriptor"/>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/parquet/arrow/schema.h" line="108" column="1" bodyfile="/arrow/cpp/src/parquet/arrow/schema.h" bodystart="108" bodyend="160"/>
    <listofallmembers>
      <member refid="structparquet_1_1arrow_1_1_schema_manifest_1af480bcc0f5698c18badf317a53147068" prot="public" virt="non-virtual"><scope>parquet::arrow::SchemaManifest</scope><name>child_to_parent</name></member>
      <member refid="structparquet_1_1arrow_1_1_schema_manifest_1aad7fcd4e578d6d801e1c580b5acac4c4" prot="public" virt="non-virtual"><scope>parquet::arrow::SchemaManifest</scope><name>column_index_to_field</name></member>
      <member refid="structparquet_1_1arrow_1_1_schema_manifest_1a858620a5744aa978df44fee02e1a5a62" prot="public" virt="non-virtual"><scope>parquet::arrow::SchemaManifest</scope><name>descr</name></member>
      <member refid="structparquet_1_1arrow_1_1_schema_manifest_1aaf06857060d94bdaadb847142f6ebc98" prot="public" virt="non-virtual"><scope>parquet::arrow::SchemaManifest</scope><name>GetColumnField</name></member>
      <member refid="structparquet_1_1arrow_1_1_schema_manifest_1ad7bdc87b3e0aaf1208987efa88f09ffa" prot="public" virt="non-virtual"><scope>parquet::arrow::SchemaManifest</scope><name>GetFieldIndices</name></member>
      <member refid="structparquet_1_1arrow_1_1_schema_manifest_1a8ea4da5d49737b3579cc082b1c7c6e40" prot="public" virt="non-virtual"><scope>parquet::arrow::SchemaManifest</scope><name>GetParent</name></member>
      <member refid="structparquet_1_1arrow_1_1_schema_manifest_1af0f8a63e47bb7aec179e6aa44f2a217b" prot="public" virt="non-virtual"><scope>parquet::arrow::SchemaManifest</scope><name>Make</name></member>
      <member refid="structparquet_1_1arrow_1_1_schema_manifest_1aa0c55559a04e13c143b7fac1f27bab54" prot="public" virt="non-virtual"><scope>parquet::arrow::SchemaManifest</scope><name>origin_schema</name></member>
      <member refid="structparquet_1_1arrow_1_1_schema_manifest_1a779f1b4659be0370707c8e49bce9fa4b" prot="public" virt="non-virtual"><scope>parquet::arrow::SchemaManifest</scope><name>schema_fields</name></member>
      <member refid="structparquet_1_1arrow_1_1_schema_manifest_1a94fc82e328e2762c580f14609c3f9410" prot="public" virt="non-virtual"><scope>parquet::arrow::SchemaManifest</scope><name>schema_metadata</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
