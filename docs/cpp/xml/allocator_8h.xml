<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="allocator_8h" kind="file" language="C++">
    <compoundname>allocator.h</compoundname>
    <includes local="no">algorithm</includes>
    <includes local="no">cstddef</includes>
    <includes local="no">memory</includes>
    <includes local="no">utility</includes>
    <includes refid="memory__pool_8h" local="yes">arrow/memory_pool.h</includes>
    <includes refid="status_8h" local="yes">arrow/status.h</includes>
    <includes refid="macros_8h" local="yes">arrow/util/macros.h</includes>
    <incdepgraph>
      <node id="7">
        <label>atomic</label>
      </node>
      <node id="8">
        <label>cstdint</label>
      </node>
      <node id="9">
        <label>arrow/status.h</label>
        <link refid="status_8h"/>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/arrow/cpp/src/arrow/allocator.h</label>
        <link refid="allocator_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>string</label>
      </node>
      <node id="15">
        <label>ostream</label>
      </node>
      <node id="16">
        <label>arrow/util/visibility.h</label>
        <link refid="arrow_2util_2visibility_8h"/>
      </node>
      <node id="6">
        <label>arrow/memory_pool.h</label>
        <link refid="memory__pool_8h"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>utility</label>
      </node>
      <node id="11">
        <label>iosfwd</label>
      </node>
      <node id="3">
        <label>cstddef</label>
      </node>
      <node id="2">
        <label>algorithm</label>
      </node>
      <node id="10">
        <label>cstring</label>
      </node>
      <node id="14">
        <label>arrow/util/string_builder.h</label>
        <link refid="string__builder_8h"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>memory</label>
      </node>
      <node id="13">
        <label>arrow/util/macros.h</label>
        <link refid="macros_8h"/>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="classarrow_1_1stl__allocator" prot="public">arrow::stl_allocator</innerclass>
    <innerclass refid="structarrow_1_1stl__allocator_1_1rebind" prot="public">arrow::stl_allocator::rebind</innerclass>
    <innerclass refid="classarrow_1_1_s_t_l_memory_pool" prot="public">arrow::STLMemoryPool</innerclass>
    <innernamespace refid="namespacearrow">arrow</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>ARROW_ALLOCATOR_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ARROW_ALLOCATOR_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="memory__pool_8h" kindref="compound">arrow/memory_pool.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="status_8h" kindref="compound">arrow/status.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="macros_8h" kindref="compound">arrow/util/macros.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacearrow" kindref="compound">arrow</ref><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="34" refid="classarrow_1_1stl__allocator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classarrow_1_1stl__allocator" kindref="compound">stl_allocator</ref><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="36" refid="classarrow_1_1stl__allocator_1a116d180eeb40ae7a06fbc93dd59f71b6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1stl__allocator_1a116d180eeb40ae7a06fbc93dd59f71b6" kindref="member">value_type</ref><sp/>=<sp/>T;</highlight></codeline>
<codeline lineno="37" refid="classarrow_1_1stl__allocator_1a2d0de6d0a6a43e2cca7b980a6fedc375" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1stl__allocator_1a2d0de6d0a6a43e2cca7b980a6fedc375" kindref="member">pointer</ref><sp/>=<sp/>T*;</highlight></codeline>
<codeline lineno="38" refid="classarrow_1_1stl__allocator_1aa46e64f7ed3c0196f45d746f7a75f563" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1stl__allocator_1aa46e64f7ed3c0196f45d746f7a75f563" kindref="member">const_pointer</ref><sp/>=<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*;</highlight></codeline>
<codeline lineno="39" refid="classarrow_1_1stl__allocator_1a3044d12cb8624ecd5478b07c47d9d588" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1stl__allocator_1a3044d12cb8624ecd5478b07c47d9d588" kindref="member">reference</ref><sp/>=<sp/>T&amp;;</highlight></codeline>
<codeline lineno="40" refid="classarrow_1_1stl__allocator_1aa7ec62c2bdb40ed6b65c77e4ebebfc43" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1stl__allocator_1aa7ec62c2bdb40ed6b65c77e4ebebfc43" kindref="member">const_reference</ref><sp/>=<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;;</highlight></codeline>
<codeline lineno="41" refid="classarrow_1_1stl__allocator_1aa8a67276663a6f604bc1c34d7602e9df" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1stl__allocator_1aa8a67276663a6f604bc1c34d7602e9df" kindref="member">size_type</ref><sp/>=<sp/>std::size_t;</highlight></codeline>
<codeline lineno="42" refid="classarrow_1_1stl__allocator_1a152ab29988f774a19a9e03a22485badf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1stl__allocator_1a152ab29988f774a19a9e03a22485badf" kindref="member">difference_type</ref><sp/>=<sp/>std::ptrdiff_t;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="45" refid="structarrow_1_1stl__allocator_1_1rebind" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structarrow_1_1stl__allocator_1_1rebind" kindref="compound">rebind</ref><sp/>{</highlight></codeline>
<codeline lineno="46" refid="structarrow_1_1stl__allocator_1_1rebind_1a355b73f3f7a647016ddbc0dfd58f76bc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1stl__allocator" kindref="compound">other</ref><sp/>=<sp/><ref refid="classarrow_1_1stl__allocator" kindref="compound">stl_allocator&lt;U&gt;</ref>;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="50" refid="classarrow_1_1stl__allocator_1acc68d9df47ec479864980e24e5206c0b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1stl__allocator_1acc68d9df47ec479864980e24e5206c0b" kindref="member">stl_allocator</ref>()<sp/>noexcept<sp/>:<sp/>pool_(<ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">default_memory_pool</ref>())<sp/>{}</highlight></codeline>
<codeline lineno="52" refid="classarrow_1_1stl__allocator_1affeec274a43deb7cc79152837558eab5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1stl__allocator_1affeec274a43deb7cc79152837558eab5" kindref="member">stl_allocator</ref>(<ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/><ref refid="classarrow_1_1stl__allocator_1ae2832ef5c557af5db4a7c0623d6f2e48" kindref="member">pool</ref>)<sp/>noexcept<sp/>:<sp/>pool_(<ref refid="classarrow_1_1stl__allocator_1ae2832ef5c557af5db4a7c0623d6f2e48" kindref="member">pool</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="55" refid="classarrow_1_1stl__allocator_1abcb413f5f18708e06fef91f20e20d2ab" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1stl__allocator_1abcb413f5f18708e06fef91f20e20d2ab" kindref="member">stl_allocator</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1stl__allocator" kindref="compound">stl_allocator&lt;U&gt;</ref>&amp;<sp/>rhs)<sp/>noexcept<sp/>:<sp/>pool_(rhs.pool_)<sp/>{}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="classarrow_1_1stl__allocator_1a51aa02f5c3b0f1e00c9027965bc3f146" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1stl__allocator_1a51aa02f5c3b0f1e00c9027965bc3f146" kindref="member">~stl_allocator</ref>()<sp/>{<sp/>pool_<sp/>=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>;<sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="classarrow_1_1stl__allocator_1aed433bf67f62bcb87538ac56f3f66f0f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1stl__allocator_1a2d0de6d0a6a43e2cca7b980a6fedc375" kindref="member">pointer</ref><sp/><ref refid="classarrow_1_1stl__allocator_1aed433bf67f62bcb87538ac56f3f66f0f" kindref="member">address</ref>(<ref refid="classarrow_1_1stl__allocator_1a3044d12cb8624ecd5478b07c47d9d588" kindref="member">reference</ref><sp/>r)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::addressof(r);<sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61" refid="classarrow_1_1stl__allocator_1a75b0f32329edd8c06b5c0e6ba2c41f9d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1stl__allocator_1aa46e64f7ed3c0196f45d746f7a75f563" kindref="member">const_pointer</ref><sp/><ref refid="classarrow_1_1stl__allocator_1a75b0f32329edd8c06b5c0e6ba2c41f9d" kindref="member">address</ref>(<ref refid="classarrow_1_1stl__allocator_1aa7ec62c2bdb40ed6b65c77e4ebebfc43" kindref="member">const_reference</ref><sp/>r)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::addressof(r);<sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="classarrow_1_1stl__allocator_1a4ee13a5952515f13b65c26272e0e2429" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1stl__allocator_1a2d0de6d0a6a43e2cca7b980a6fedc375" kindref="member">pointer</ref><sp/><ref refid="classarrow_1_1stl__allocator_1a4ee13a5952515f13b65c26272e0e2429" kindref="member">allocate</ref>(<ref refid="classarrow_1_1stl__allocator_1aa8a67276663a6f604bc1c34d7602e9df" kindref="member">size_type</ref><sp/>n,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="comment">/*hint*/</highlight><highlight class="normal"><sp/>=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t*<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>s<sp/>=<sp/>pool_-&gt;<ref refid="classarrow_1_1_memory_pool_1afa452b21a4d401403cc509cc50a384f9" kindref="member">Allocate</ref>(n<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T),<sp/>&amp;<ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!s.<ref refid="classarrow_1_1_status_1a2240d82ac632c582efc070af2fe9a5ec" kindref="member">ok</ref>())<sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/>std::bad_alloc();</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reinterpret_cast&lt;pointer&gt;(<ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="classarrow_1_1stl__allocator_1af0f44b507ab7ed0e5734929e1f255daa" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1stl__allocator_1af0f44b507ab7ed0e5734929e1f255daa" kindref="member">deallocate</ref>(<ref refid="classarrow_1_1stl__allocator_1a2d0de6d0a6a43e2cca7b980a6fedc375" kindref="member">pointer</ref><sp/>p,<sp/><ref refid="classarrow_1_1stl__allocator_1aa8a67276663a6f604bc1c34d7602e9df" kindref="member">size_type</ref><sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>pool_-&gt;<ref refid="classarrow_1_1_memory_pool_1a5a45c822a4ca7b3d8387501acfa69911" kindref="member">Free</ref>(reinterpret_cast&lt;uint8_t*&gt;(p),<sp/>n<sp/>*<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T));</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="classarrow_1_1stl__allocator_1a971781ef19b30cdd0f31d5cc3aa8e0c1" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1stl__allocator_1aa8a67276663a6f604bc1c34d7602e9df" kindref="member">size_type</ref><sp/><ref refid="classarrow_1_1stl__allocator_1a971781ef19b30cdd0f31d5cc3aa8e0c1" kindref="member">size_max</ref>()<sp/>const<sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1stl__allocator_1aa8a67276663a6f604bc1c34d7602e9df" kindref="member">size_type</ref>(-1)<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T);<sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">U,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="77" refid="classarrow_1_1stl__allocator_1a94843982d72329e69b9069ee781e5460" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1stl__allocator_1a94843982d72329e69b9069ee781e5460" kindref="member">construct</ref>(U*<sp/>p,<sp/>Args&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>(reinterpret_cast&lt;void*&gt;(p))<sp/>U(std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="82" refid="classarrow_1_1stl__allocator_1aca67cbdb60e9bdaa25c9a3ecde8410ba" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1stl__allocator_1aca67cbdb60e9bdaa25c9a3ecde8410ba" kindref="member">destroy</ref>(U*<sp/>p)<sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>p-&gt;~U();</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="classarrow_1_1stl__allocator_1ae2832ef5c557af5db4a7c0623d6f2e48" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/><ref refid="classarrow_1_1stl__allocator_1ae2832ef5c557af5db4a7c0623d6f2e48" kindref="member">pool</ref>()<sp/>const<sp/>noexcept<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>pool_;<sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/>pool_;</highlight></codeline>
<codeline lineno="90"><highlight class="normal">};</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Allocator<sp/>=<sp/>std::allocator&lt;u</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">8_t&gt;&gt;</highlight></codeline>
<codeline lineno="97" refid="classarrow_1_1_s_t_l_memory_pool" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classarrow_1_1_s_t_l_memory_pool" kindref="compound">STLMemoryPool</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref><sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="100" refid="classarrow_1_1_s_t_l_memory_pool_1ac7aae46fc3464ca5f12e49ac6f6c9fba" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_s_t_l_memory_pool_1ac7aae46fc3464ca5f12e49ac6f6c9fba" kindref="member">STLMemoryPool</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Allocator&amp;<sp/>alloc)<sp/>:<sp/>alloc_(alloc)<sp/>{}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102" refid="classarrow_1_1_s_t_l_memory_pool_1afdcccc43ea710e39d76d871be4236660" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_s_t_l_memory_pool_1afdcccc43ea710e39d76d871be4236660" kindref="member">Allocate</ref>(int64_t<sp/>size,<sp/>uint8_t**<sp/>out)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*out<sp/>=<sp/>alloc_.allocate(size);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::bad_alloc&amp;<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1ae39cb87196acb83e4eb921cf729248e3" kindref="member">Status::OutOfMemory</ref>(e.what());</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>stats_.UpdateAllocatedBytes(size);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1a5c0b0031db6eeec3dcc70485d24cfe03" kindref="member">Status::OK</ref>();</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="classarrow_1_1_s_t_l_memory_pool_1a057f25bbb73d00a3c3d9b5336ec3bad3" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_s_t_l_memory_pool_1a057f25bbb73d00a3c3d9b5336ec3bad3" kindref="member">Reallocate</ref>(int64_t<sp/>old_size,<sp/>int64_t<sp/>new_size,<sp/>uint8_t**<sp/>ptr)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t*<sp/>old_ptr<sp/>=<sp/>*ptr;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">try</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*ptr<sp/>=<sp/>alloc_.allocate(new_size);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">catch</highlight><highlight class="normal"><sp/>(std::bad_alloc&amp;<sp/>e)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1ae39cb87196acb83e4eb921cf729248e3" kindref="member">Status::OutOfMemory</ref>(e.what());</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(*ptr,<sp/>old_ptr,<sp/>std::min(old_size,<sp/>new_size));</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>alloc_.deallocate(old_ptr,<sp/>old_size);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>stats_.UpdateAllocatedBytes(new_size<sp/>-<sp/>old_size);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1a5c0b0031db6eeec3dcc70485d24cfe03" kindref="member">Status::OK</ref>();</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125" refid="classarrow_1_1_s_t_l_memory_pool_1a7a9945fab43ea769503a028dc24da46d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_s_t_l_memory_pool_1a7a9945fab43ea769503a028dc24da46d" kindref="member">Free</ref>(uint8_t*<sp/>buffer,<sp/>int64_t<sp/>size)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>alloc_.deallocate(buffer,<sp/>size);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>stats_.UpdateAllocatedBytes(-size);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="classarrow_1_1_s_t_l_memory_pool_1aeaa8f5af9163d25bf6cf2be82f87b58d" refkind="member"><highlight class="normal"><sp/><sp/>int64_t<sp/><ref refid="classarrow_1_1_s_t_l_memory_pool_1aeaa8f5af9163d25bf6cf2be82f87b58d" kindref="member">bytes_allocated</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stats_.bytes_allocated();<sp/>}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="classarrow_1_1_s_t_l_memory_pool_1ab10b66d25f42d62b5f9c471db726a388" refkind="member"><highlight class="normal"><sp/><sp/>int64_t<sp/><ref refid="classarrow_1_1_s_t_l_memory_pool_1ab10b66d25f42d62b5f9c471db726a388" kindref="member">max_memory</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>stats_.max_memory();<sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>Allocator<sp/>alloc_;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/>internal::MemoryPoolStats<sp/>stats_;</highlight></codeline>
<codeline lineno="137"><highlight class="normal">};</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="140" refid="namespacearrow_1a6cdf639b318b550f64e0a20a84961539" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacearrow_1a6cdf639b318b550f64e0a20a84961539" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1stl__allocator" kindref="compound">stl_allocator&lt;T1&gt;</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1stl__allocator" kindref="compound">stl_allocator&lt;T2&gt;</ref>&amp;<sp/>rhs)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>lhs.pool()<sp/>==<sp/>rhs.pool();</highlight></codeline>
<codeline lineno="142"><highlight class="normal">}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T1,<sp/></highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>T2&gt;</highlight></codeline>
<codeline lineno="145" refid="namespacearrow_1aaaffa5e80489838d1a7a8fcb67a8fb17" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacearrow_1aaaffa5e80489838d1a7a8fcb67a8fb17" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1stl__allocator" kindref="compound">stl_allocator&lt;T1&gt;</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1stl__allocator" kindref="compound">stl_allocator&lt;T2&gt;</ref>&amp;<sp/>rhs)<sp/>noexcept<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(lhs<sp/>==<sp/>rhs);</highlight></codeline>
<codeline lineno="147"><highlight class="normal">}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>arrow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/>//<sp/>ARROW_ALLOCATOR_H</highlight></codeline>
    </programlisting>
    <location file="/arrow/cpp/src/arrow/allocator.h"/>
  </compounddef>
</doxygen>
