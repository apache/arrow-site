<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacegandiva_1_1decimalops" kind="namespace" language="C++">
    <compoundname>gandiva::decimalops</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacegandiva_1_1decimalops_1a1b8916f91bc90639de949e483e5454aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">arrow::BasicDecimal128</ref></type>
        <definition>arrow::BasicDecimal128 gandiva::decimalops::Add</definition>
        <argsstring>(const BasicDecimalScalar128 &amp;x, const BasicDecimalScalar128 &amp;y, int32_t out_precision, int32_t out_scale)</argsstring>
        <name>Add</name>
        <param>
          <type>const <ref refid="classgandiva_1_1_basic_decimal_scalar128" kindref="compound">BasicDecimalScalar128</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classgandiva_1_1_basic_decimal_scalar128" kindref="compound">BasicDecimalScalar128</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>out_precision</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>out_scale</declname>
        </param>
        <briefdescription>
<para>Return the sum of &apos;x&apos; and &apos;y&apos;. </para>        </briefdescription>
        <detaileddescription>
<para>out_precision and out_scale are passed along for efficiency, they must match the rules in DecimalTypeSql::GetResultType. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/precompiled/decimal_ops.h" line="30" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegandiva_1_1decimalops_1a4cae729e6c97547451580a1d365cebc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">arrow::BasicDecimal128</ref></type>
        <definition>arrow::BasicDecimal128 gandiva::decimalops::Subtract</definition>
        <argsstring>(const BasicDecimalScalar128 &amp;x, const BasicDecimalScalar128 &amp;y, int32_t out_precision, int32_t out_scale)</argsstring>
        <name>Subtract</name>
        <param>
          <type>const <ref refid="classgandiva_1_1_basic_decimal_scalar128" kindref="compound">BasicDecimalScalar128</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classgandiva_1_1_basic_decimal_scalar128" kindref="compound">BasicDecimalScalar128</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>out_precision</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>out_scale</declname>
        </param>
        <briefdescription>
<para>Subtract &apos;y&apos; from &apos;x&apos;, and return the result. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/precompiled/decimal_ops.h" line="34" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegandiva_1_1decimalops_1ae48f54bb0ff7c6551573e2c48d058684" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">arrow::BasicDecimal128</ref></type>
        <definition>arrow::BasicDecimal128 gandiva::decimalops::Multiply</definition>
        <argsstring>(const BasicDecimalScalar128 &amp;x, const BasicDecimalScalar128 &amp;y, int32_t out_precision, int32_t out_scale, bool *overflow)</argsstring>
        <name>Multiply</name>
        <param>
          <type>const <ref refid="classgandiva_1_1_basic_decimal_scalar128" kindref="compound">BasicDecimalScalar128</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classgandiva_1_1_basic_decimal_scalar128" kindref="compound">BasicDecimalScalar128</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>out_precision</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>out_scale</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>overflow</declname>
        </param>
        <briefdescription>
<para>Multiply &apos;x&apos; from &apos;y&apos;, and return the result. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/precompiled/decimal_ops.h" line="39" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegandiva_1_1decimalops_1a7325e9f3f1c160ffc16e7c7dee3bda37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">arrow::BasicDecimal128</ref></type>
        <definition>arrow::BasicDecimal128 gandiva::decimalops::Divide</definition>
        <argsstring>(int64_t context, const BasicDecimalScalar128 &amp;x, const BasicDecimalScalar128 &amp;y, int32_t out_precision, int32_t out_scale, bool *overflow)</argsstring>
        <name>Divide</name>
        <param>
          <type>int64_t</type>
          <declname>context</declname>
        </param>
        <param>
          <type>const <ref refid="classgandiva_1_1_basic_decimal_scalar128" kindref="compound">BasicDecimalScalar128</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classgandiva_1_1_basic_decimal_scalar128" kindref="compound">BasicDecimalScalar128</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>out_precision</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>out_scale</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>overflow</declname>
        </param>
        <briefdescription>
<para>Divide &apos;x&apos; by &apos;y&apos;, and return the result. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/precompiled/decimal_ops.h" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegandiva_1_1decimalops_1a2fe104a486a186df3e22ef3bd18b3c3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">arrow::BasicDecimal128</ref></type>
        <definition>arrow::BasicDecimal128 gandiva::decimalops::Mod</definition>
        <argsstring>(int64_t context, const BasicDecimalScalar128 &amp;x, const BasicDecimalScalar128 &amp;y, int32_t out_precision, int32_t out_scale, bool *overflow)</argsstring>
        <name>Mod</name>
        <param>
          <type>int64_t</type>
          <declname>context</declname>
        </param>
        <param>
          <type>const <ref refid="classgandiva_1_1_basic_decimal_scalar128" kindref="compound">BasicDecimalScalar128</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classgandiva_1_1_basic_decimal_scalar128" kindref="compound">BasicDecimalScalar128</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>out_precision</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>out_scale</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>overflow</declname>
        </param>
        <briefdescription>
<para>Divide &apos;x&apos; by &apos;y&apos;, and return the remainder. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/precompiled/decimal_ops.h" line="49" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegandiva_1_1decimalops_1a6d6f20970fdf822acf2771330c73ae1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t gandiva::decimalops::Compare</definition>
        <argsstring>(const BasicDecimalScalar128 &amp;x, const BasicDecimalScalar128 &amp;y)</argsstring>
        <name>Compare</name>
        <param>
          <type>const <ref refid="classgandiva_1_1_basic_decimal_scalar128" kindref="compound">BasicDecimalScalar128</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="classgandiva_1_1_basic_decimal_scalar128" kindref="compound">BasicDecimalScalar128</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Compare two decimals. </para>        </briefdescription>
        <detaileddescription>
<para>Returns : 0 if x == y 1 if x &gt; y -1 if x &lt; y </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/precompiled/decimal_ops.h" line="57" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegandiva_1_1decimalops_1a2b4260c3a3ca2eaa529a0465ae11d9f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref></type>
        <definition>BasicDecimal128 gandiva::decimalops::FromDouble</definition>
        <argsstring>(double in, int32_t precision, int32_t scale, bool *overflow)</argsstring>
        <name>FromDouble</name>
        <param>
          <type>double</type>
          <declname>in</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>precision</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>overflow</declname>
        </param>
        <briefdescription>
<para>Convert to decimal from double. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/precompiled/decimal_ops.h" line="60" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegandiva_1_1decimalops_1a09413724b58ac7141ce28a9a18cacd04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double gandiva::decimalops::ToDouble</definition>
        <argsstring>(const BasicDecimalScalar128 &amp;in, bool *overflow)</argsstring>
        <name>ToDouble</name>
        <param>
          <type>const <ref refid="classgandiva_1_1_basic_decimal_scalar128" kindref="compound">BasicDecimalScalar128</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>overflow</declname>
        </param>
        <briefdescription>
<para>Convert from decimal to double. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/precompiled/decimal_ops.h" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegandiva_1_1decimalops_1af4235dabba6a6f43d928fb58d1cbb7d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref></type>
        <definition>BasicDecimal128 gandiva::decimalops::FromInt64</definition>
        <argsstring>(int64_t in, int32_t precision, int32_t scale, bool *overflow)</argsstring>
        <name>FromInt64</name>
        <param>
          <type>int64_t</type>
          <declname>in</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>precision</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>scale</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>overflow</declname>
        </param>
        <briefdescription>
<para>Convert to decimal from gdv_int64. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/precompiled/decimal_ops.h" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegandiva_1_1decimalops_1a346665715e3f72bbaf1b1fc88ecec467" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t gandiva::decimalops::ToInt64</definition>
        <argsstring>(const BasicDecimalScalar128 &amp;in, bool *overflow)</argsstring>
        <name>ToInt64</name>
        <param>
          <type>const <ref refid="classgandiva_1_1_basic_decimal_scalar128" kindref="compound">BasicDecimalScalar128</ref> &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>overflow</declname>
        </param>
        <briefdescription>
<para>Convert from decimal to gdv_int64. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/precompiled/decimal_ops.h" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegandiva_1_1decimalops_1a05826b1f63d9a43e58b359d814abc5d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref></type>
        <definition>BasicDecimal128 gandiva::decimalops::Convert</definition>
        <argsstring>(const BasicDecimalScalar128 &amp;x, int32_t out_precision, int32_t out_scale, bool *overflow)</argsstring>
        <name>Convert</name>
        <param>
          <type>const <ref refid="classgandiva_1_1_basic_decimal_scalar128" kindref="compound">BasicDecimalScalar128</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>out_precision</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>out_scale</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>overflow</declname>
        </param>
        <briefdescription>
<para>Convert from one decimal scale/precision to another. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/precompiled/decimal_ops.h" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegandiva_1_1decimalops_1acaf2c2063997dc3306bb3f2df3f6bcc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref></type>
        <definition>BasicDecimal128 gandiva::decimalops::Round</definition>
        <argsstring>(const BasicDecimalScalar128 &amp;x, int32_t out_scale, bool *overflow)</argsstring>
        <name>Round</name>
        <param>
          <type>const <ref refid="classgandiva_1_1_basic_decimal_scalar128" kindref="compound">BasicDecimalScalar128</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>out_scale</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>overflow</declname>
        </param>
        <briefdescription>
<para>round decimal. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/precompiled/decimal_ops.h" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegandiva_1_1decimalops_1a1df639c08d3c38fe5e2ffa75a0ec3c40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref></type>
        <definition>BasicDecimal128 gandiva::decimalops::Truncate</definition>
        <argsstring>(const BasicDecimalScalar128 &amp;x, int32_t out_scale, bool *overflow)</argsstring>
        <name>Truncate</name>
        <param>
          <type>const <ref refid="classgandiva_1_1_basic_decimal_scalar128" kindref="compound">BasicDecimalScalar128</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>out_scale</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>overflow</declname>
        </param>
        <briefdescription>
<para>truncate decimal. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/precompiled/decimal_ops.h" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegandiva_1_1decimalops_1ad100411b610679092ed718efab53a4cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref></type>
        <definition>BasicDecimal128 gandiva::decimalops::Ceil</definition>
        <argsstring>(const BasicDecimalScalar128 &amp;x, bool *overflow)</argsstring>
        <name>Ceil</name>
        <param>
          <type>const <ref refid="classgandiva_1_1_basic_decimal_scalar128" kindref="compound">BasicDecimalScalar128</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>overflow</declname>
        </param>
        <briefdescription>
<para>ceil decimal </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/precompiled/decimal_ops.h" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacegandiva_1_1decimalops_1ab9a9ff3676c8c2bfee82480f27d479c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref></type>
        <definition>BasicDecimal128 gandiva::decimalops::Floor</definition>
        <argsstring>(const BasicDecimalScalar128 &amp;x, bool *overflow)</argsstring>
        <name>Floor</name>
        <param>
          <type>const <ref refid="classgandiva_1_1_basic_decimal_scalar128" kindref="compound">BasicDecimalScalar128</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>overflow</declname>
        </param>
        <briefdescription>
<para>floor decimal </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/precompiled/decimal_ops.h" line="86" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/gandiva/precompiled/decimal_ops.h" line="25" column="1"/>
  </compounddef>
</doxygen>
