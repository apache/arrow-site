<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_schema" kind="class" language="C++" prot="public">
    <compoundname>arrow::Schema</compoundname>
    <basecompoundref prot="public" virt="non-virtual">arrow::detail::Fingerprintable</basecompoundref>
    <basecompoundref refid="classarrow_1_1util_1_1_equality_comparable" prot="public" virt="non-virtual">arrow::util::EqualityComparable&lt; Schema &gt;</basecompoundref>
    <basecompoundref refid="classarrow_1_1util_1_1_to_string_ostreamable" prot="public" virt="non-virtual">arrow::util::ToStringOstreamable&lt; Schema &gt;</basecompoundref>
    <includes refid="type_8h" local="no">arrow/type.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classarrow_1_1_schema_1a1984dcd67ab1c1e4a568833bd6d3bb7d" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; Impl &gt;</type>
        <definition>std::unique_ptr&lt;Impl&gt; arrow::Schema::impl_</definition>
        <argsstring></argsstring>
        <name>impl_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1726" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="1725" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1_schema_1a04c09a710bc0ea9eb3b49be6f4534891" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::Schema::Schema</definition>
        <argsstring>(std::vector&lt; std::shared_ptr&lt; Field &gt;&gt; fields, std::shared_ptr&lt; const KeyValueMetadata &gt; metadata=NULLPTR)</argsstring>
        <name>Schema</name>
        <param>
          <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt;&gt;</type>
          <declname>fields</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; const <ref refid="classarrow_1_1_key_value_metadata" kindref="compound">KeyValueMetadata</ref> &gt;</type>
          <declname>metadata</declname>
          <defval><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1641" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_schema_1ad07b446b4e282aba47fb1ce709d10814" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::Schema::Schema</definition>
        <argsstring>(const Schema &amp;)</argsstring>
        <name>Schema</name>
        <param>
          <type>const <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1644" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_schema_1aa56d4ba277d76382db293e386d1c0728" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::Schema::~Schema</definition>
        <argsstring>() override</argsstring>
        <name>~Schema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1646" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_schema_1a9784fd6804971756f1c3ccde47d9ce2a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::Schema::Equals</definition>
        <argsstring>(const Schema &amp;other, bool check_metadata=false) const</argsstring>
        <name>Equals</name>
        <param>
          <type>const <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>check_metadata</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Returns true if all of the schema fields are equal. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1649" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_schema_1a71874a993b394c98b324b77ff4088f38" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::Schema::Equals</definition>
        <argsstring>(const std::shared_ptr&lt; Schema &gt; &amp;other, bool check_metadata=false) const</argsstring>
        <name>Equals</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>check_metadata</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1650" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_schema_1a3c7796ff608d03d1c004c6604bb09e5c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int arrow::Schema::num_fields</definition>
        <argsstring>() const</argsstring>
        <name>num_fields</name>
        <briefdescription>
<para>Return the number of fields (columns) in the schema. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1653" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_schema_1a046664d33b4a891506df2c680964e03b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt; &amp;</type>
        <definition>const std::shared_ptr&lt;Field&gt;&amp; arrow::Schema::field</definition>
        <argsstring>(int i) const</argsstring>
        <name>field</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Return the ith schema element. Does not boundscheck. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1656" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_schema_1a0a12b6fcf5c721d83cd7e2f5451f2760" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt; &gt; &amp;</type>
        <definition>const std::vector&lt;std::shared_ptr&lt;Field&gt; &gt;&amp; arrow::Schema::fields</definition>
        <argsstring>() const</argsstring>
        <name>fields</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1658" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_schema_1ae467154c27d09753887a0334f779002d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; arrow::Schema::field_names</definition>
        <argsstring>() const</argsstring>
        <name>field_names</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1660" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_schema_1a73c450d1aa2b373e42e742dd8fcb6ec3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Field&gt; arrow::Schema::GetFieldByName</definition>
        <argsstring>(const std::string &amp;name) const</argsstring>
        <name>GetFieldByName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Returns null if name not found. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1663" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_schema_1adfc28c0c5f3a371e63b2cd137543b8f0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;Field&gt; &gt; arrow::Schema::GetAllFieldsByName</definition>
        <argsstring>(const std::string &amp;name) const</argsstring>
        <name>GetAllFieldsByName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Return the indices of all fields having this name in sorted order. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1666" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_schema_1a471b18cb74814f4476ec72c72e068e35" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int arrow::Schema::GetFieldIndex</definition>
        <argsstring>(const std::string &amp;name) const</argsstring>
        <name>GetFieldIndex</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Returns -1 if name not found. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1669" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_schema_1a0a8c63898500ebfac582a7a6dacc3b4e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt;int&gt; arrow::Schema::GetAllFieldIndices</definition>
        <argsstring>(const std::string &amp;name) const</argsstring>
        <name>GetAllFieldIndices</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Return the indices of all fields having this name. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1672" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_schema_1aee68fd8e0d21670192d7455b584471bd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::Schema::CanReferenceFieldsByNames</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;names) const</argsstring>
        <name>CanReferenceFieldsByNames</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>names</declname>
        </param>
        <briefdescription>
<para>Indicate if fields named <computeroutput>names</computeroutput> can be found unambiguously in the schema. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1675" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_schema_1a7cae195f4fb47288e228330f0848fd69" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; const <ref refid="classarrow_1_1_key_value_metadata" kindref="compound">KeyValueMetadata</ref> &gt;</type>
        <definition>std::shared_ptr&lt;const KeyValueMetadata&gt; arrow::Schema::metadata</definition>
        <argsstring>() const</argsstring>
        <name>metadata</name>
        <briefdescription>
<para>The custom key-value metadata, if any. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>metadata may be null </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1680" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_schema_1ac2080c5e2790d537acd00881a18815a5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arrow::Schema::ToString</definition>
        <argsstring>(bool show_metadata=false) const</argsstring>
        <name>ToString</name>
        <param>
          <type>bool</type>
          <declname>show_metadata</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Render a string representation of the schema suitable for debugging. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">show_metadata</parametername>
</parameternamelist>
<parameterdescription>
<para>when true, if <ref refid="classarrow_1_1_key_value_metadata" kindref="compound">KeyValueMetadata</ref> is non-empty, print keys and values in the output </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1685" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_schema_1ae146f2e1e8a59e4ecac856585321be4d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;Schema&gt; &gt; arrow::Schema::AddField</definition>
        <argsstring>(int i, const std::shared_ptr&lt; Field &gt; &amp;field) const</argsstring>
        <name>AddField</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1687" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_schema_1a5b96b8bd067b3edad7e9ac34c361ca95" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;Schema&gt; &gt; arrow::Schema::RemoveField</definition>
        <argsstring>(int i) const</argsstring>
        <name>RemoveField</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1689" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_schema_1adfd6fde40065cec5f484ab59789e9aec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;Schema&gt; &gt; arrow::Schema::SetField</definition>
        <argsstring>(int i, const std::shared_ptr&lt; Field &gt; &amp;field) const</argsstring>
        <name>SetField</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1690" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_schema_1afb5d38ee20fb341cd3d34b7634729fa5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::Schema::AddField</definition>
        <argsstring>(int i, const std::shared_ptr&lt; Field &gt; &amp;field, std::shared_ptr&lt; Schema &gt; *out) const</argsstring>
        <name>AddField</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1694" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_schema_1a4c85763a9754ac539ba363bc6cae532d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::Schema::RemoveField</definition>
        <argsstring>(int i, std::shared_ptr&lt; Schema &gt; *out) const</argsstring>
        <name>RemoveField</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1697" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_schema_1ab32066616b6abf8fe414cb67e3aead37" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::Schema::SetField</definition>
        <argsstring>(int i, const std::shared_ptr&lt; Field &gt; &amp;field, std::shared_ptr&lt; Schema &gt; *out) const</argsstring>
        <name>SetField</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1699" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_schema_1ad6b03f404e8095ca43a3b212bdf4d4ed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Schema&gt; arrow::Schema::WithMetadata</definition>
        <argsstring>(const std::shared_ptr&lt; const KeyValueMetadata &gt; &amp;metadata) const</argsstring>
        <name>WithMetadata</name>
        <param>
          <type>const std::shared_ptr&lt; const <ref refid="classarrow_1_1_key_value_metadata" kindref="compound">KeyValueMetadata</ref> &gt; &amp;</type>
          <declname>metadata</declname>
        </param>
        <briefdescription>
<para>Replace key-value metadata with new metadata. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">metadata</parametername>
</parameternamelist>
<parameterdescription>
<para>new <ref refid="classarrow_1_1_key_value_metadata" kindref="compound">KeyValueMetadata</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1706" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_schema_1a212da457d85a1f6b021ad05638649451" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Schema&gt; arrow::Schema::RemoveMetadata</definition>
        <argsstring>() const</argsstring>
        <name>RemoveMetadata</name>
        <briefdescription>
<para>Return copy of <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> without the <ref refid="classarrow_1_1_key_value_metadata" kindref="compound">KeyValueMetadata</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1710" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_schema_1a5be51a6538db0881ef8334c0e7770adf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::Schema::HasMetadata</definition>
        <argsstring>() const</argsstring>
        <name>HasMetadata</name>
        <briefdescription>
<para>Indicate that the <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> has non-empty KevValueMetadata. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1713" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_schema_1a17b2edd990265dbb866d17c4b820fbde" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::Schema::HasDistinctFieldNames</definition>
        <argsstring>() const</argsstring>
        <name>HasDistinctFieldNames</name>
        <briefdescription>
<para>Indicate that the <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> has distinct field names. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1716" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classarrow_1_1_schema_1a1705ac96270b7a9e3e76f6038c8794fa" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arrow::Schema::ComputeFingerprint</definition>
        <argsstring>() const override</argsstring>
        <name>ComputeFingerprint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1719" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_schema_1ad148505a822126552b22f051d2c4e3b7" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arrow::Schema::ComputeMetadataFingerprint</definition>
        <argsstring>() const override</argsstring>
        <name>ComputeMetadataFingerprint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1720" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classarrow_1_1_schema_1aa91afaa1d24fb283d1fc928bf405f86f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend void</type>
        <definition>void PrintTo</definition>
        <argsstring>(const Schema &amp;s, std::ostream *os)</argsstring>
        <name>PrintTo</name>
        <param>
          <type>const <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>std::ostream *</type>
          <declname>os</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1723" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Sequence of <ref refid="classarrow_1_1_field" kindref="compound">arrow::Field</ref> objects describing the columns of a record batch or table data structure. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4064">
        <label>arrow::Schema</label>
        <link refid="classarrow_1_1_schema"/>
        <childnode refid="4065" relation="public-inheritance">
        </childnode>
        <childnode refid="4066" relation="public-inheritance">
        </childnode>
        <childnode refid="4067" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4066">
        <label>arrow::util::EqualityComparable&lt; Schema &gt;</label>
        <link refid="classarrow_1_1util_1_1_equality_comparable"/>
      </node>
      <node id="4065">
        <label>arrow::detail::Fingerprintable</label>
      </node>
      <node id="4067">
        <label>arrow::util::ToStringOstreamable&lt; Schema &gt;</label>
        <link refid="classarrow_1_1util_1_1_to_string_ostreamable"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4068">
        <label>arrow::Schema</label>
        <link refid="classarrow_1_1_schema"/>
        <childnode refid="4069" relation="public-inheritance">
        </childnode>
        <childnode refid="4070" relation="public-inheritance">
        </childnode>
        <childnode refid="4071" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4070">
        <label>arrow::util::EqualityComparable&lt; Schema &gt;</label>
        <link refid="classarrow_1_1util_1_1_equality_comparable"/>
      </node>
      <node id="4069">
        <label>arrow::detail::Fingerprintable</label>
      </node>
      <node id="4071">
        <label>arrow::util::ToStringOstreamable&lt; Schema &gt;</label>
        <link refid="classarrow_1_1util_1_1_to_string_ostreamable"/>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/type.h" line="1639" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="1637" bodyend="1727"/>
    <listofallmembers>
      <member refid="classarrow_1_1_schema_1ae146f2e1e8a59e4ecac856585321be4d" prot="public" virt="non-virtual"><scope>arrow::Schema</scope><name>AddField</name></member>
      <member refid="classarrow_1_1_schema_1afb5d38ee20fb341cd3d34b7634729fa5" prot="public" virt="non-virtual"><scope>arrow::Schema</scope><name>AddField</name></member>
      <member refid="classarrow_1_1_schema_1aee68fd8e0d21670192d7455b584471bd" prot="public" virt="non-virtual"><scope>arrow::Schema</scope><name>CanReferenceFieldsByNames</name></member>
      <member refid="classarrow_1_1_schema_1a1705ac96270b7a9e3e76f6038c8794fa" prot="protected" virt="non-virtual"><scope>arrow::Schema</scope><name>ComputeFingerprint</name></member>
      <member refid="classarrow_1_1_schema_1ad148505a822126552b22f051d2c4e3b7" prot="protected" virt="non-virtual"><scope>arrow::Schema</scope><name>ComputeMetadataFingerprint</name></member>
      <member refid="classarrow_1_1_schema_1a9784fd6804971756f1c3ccde47d9ce2a" prot="public" virt="non-virtual"><scope>arrow::Schema</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_schema_1a71874a993b394c98b324b77ff4088f38" prot="public" virt="non-virtual"><scope>arrow::Schema</scope><name>Equals</name></member>
      <member refid="classarrow_1_1util_1_1_equality_comparable_1a140cfdea92ae17331d8db8f69aad082f" prot="public" virt="non-virtual" ambiguityscope="EqualityComparable&lt; Schema &gt;::"><scope>arrow::Schema</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_schema_1a046664d33b4a891506df2c680964e03b" prot="public" virt="non-virtual"><scope>arrow::Schema</scope><name>field</name></member>
      <member refid="classarrow_1_1_schema_1ae467154c27d09753887a0334f779002d" prot="public" virt="non-virtual"><scope>arrow::Schema</scope><name>field_names</name></member>
      <member refid="classarrow_1_1_schema_1a0a12b6fcf5c721d83cd7e2f5451f2760" prot="public" virt="non-virtual"><scope>arrow::Schema</scope><name>fields</name></member>
      <member refid="classarrow_1_1_schema_1a0a8c63898500ebfac582a7a6dacc3b4e" prot="public" virt="non-virtual"><scope>arrow::Schema</scope><name>GetAllFieldIndices</name></member>
      <member refid="classarrow_1_1_schema_1adfc28c0c5f3a371e63b2cd137543b8f0" prot="public" virt="non-virtual"><scope>arrow::Schema</scope><name>GetAllFieldsByName</name></member>
      <member refid="classarrow_1_1_schema_1a73c450d1aa2b373e42e742dd8fcb6ec3" prot="public" virt="non-virtual"><scope>arrow::Schema</scope><name>GetFieldByName</name></member>
      <member refid="classarrow_1_1_schema_1a471b18cb74814f4476ec72c72e068e35" prot="public" virt="non-virtual"><scope>arrow::Schema</scope><name>GetFieldIndex</name></member>
      <member refid="classarrow_1_1_schema_1a17b2edd990265dbb866d17c4b820fbde" prot="public" virt="non-virtual"><scope>arrow::Schema</scope><name>HasDistinctFieldNames</name></member>
      <member refid="classarrow_1_1_schema_1a5be51a6538db0881ef8334c0e7770adf" prot="public" virt="non-virtual"><scope>arrow::Schema</scope><name>HasMetadata</name></member>
      <member refid="classarrow_1_1_schema_1a1984dcd67ab1c1e4a568833bd6d3bb7d" prot="private" virt="non-virtual"><scope>arrow::Schema</scope><name>impl_</name></member>
      <member refid="classarrow_1_1_schema_1a7cae195f4fb47288e228330f0848fd69" prot="public" virt="non-virtual"><scope>arrow::Schema</scope><name>metadata</name></member>
      <member refid="classarrow_1_1_schema_1a3c7796ff608d03d1c004c6604bb09e5c" prot="public" virt="non-virtual"><scope>arrow::Schema</scope><name>num_fields</name></member>
      <member refid="classarrow_1_1util_1_1_equality_comparable_1a1a7ff2c6f720209bc960524c47ad0535" prot="public" virt="non-virtual"><scope>arrow::Schema</scope><name>operator!=</name></member>
      <member refid="classarrow_1_1util_1_1_equality_comparable_1ac0e8ec25e77ece923689ee31c389200e" prot="public" virt="non-virtual"><scope>arrow::Schema</scope><name>operator==</name></member>
      <member refid="classarrow_1_1_schema_1aa91afaa1d24fb283d1fc928bf405f86f" prot="private" virt="non-virtual"><scope>arrow::Schema</scope><name>PrintTo</name></member>
      <member refid="classarrow_1_1_schema_1a5b96b8bd067b3edad7e9ac34c361ca95" prot="public" virt="non-virtual"><scope>arrow::Schema</scope><name>RemoveField</name></member>
      <member refid="classarrow_1_1_schema_1a4c85763a9754ac539ba363bc6cae532d" prot="public" virt="non-virtual"><scope>arrow::Schema</scope><name>RemoveField</name></member>
      <member refid="classarrow_1_1_schema_1a212da457d85a1f6b021ad05638649451" prot="public" virt="non-virtual"><scope>arrow::Schema</scope><name>RemoveMetadata</name></member>
      <member refid="classarrow_1_1_schema_1a04c09a710bc0ea9eb3b49be6f4534891" prot="public" virt="non-virtual"><scope>arrow::Schema</scope><name>Schema</name></member>
      <member refid="classarrow_1_1_schema_1ad07b446b4e282aba47fb1ce709d10814" prot="public" virt="non-virtual"><scope>arrow::Schema</scope><name>Schema</name></member>
      <member refid="classarrow_1_1_schema_1adfd6fde40065cec5f484ab59789e9aec" prot="public" virt="non-virtual"><scope>arrow::Schema</scope><name>SetField</name></member>
      <member refid="classarrow_1_1_schema_1ab32066616b6abf8fe414cb67e3aead37" prot="public" virt="non-virtual"><scope>arrow::Schema</scope><name>SetField</name></member>
      <member refid="classarrow_1_1_schema_1ac2080c5e2790d537acd00881a18815a5" prot="public" virt="non-virtual"><scope>arrow::Schema</scope><name>ToString</name></member>
      <member refid="classarrow_1_1_schema_1ad6b03f404e8095ca43a3b212bdf4d4ed" prot="public" virt="non-virtual"><scope>arrow::Schema</scope><name>WithMetadata</name></member>
      <member refid="classarrow_1_1util_1_1_equality_comparable_1a14c5ed61e030855eef29edebc6355806" prot="public" virt="non-virtual"><scope>arrow::Schema</scope><name>~EqualityComparable</name></member>
      <member refid="classarrow_1_1_schema_1aa56d4ba277d76382db293e386d1c0728" prot="public" virt="non-virtual"><scope>arrow::Schema</scope><name>~Schema</name></member>
      <member refid="classarrow_1_1util_1_1_to_string_ostreamable_1a1516dfefcb93d1ef093906ac208ad6bd" prot="public" virt="non-virtual"><scope>arrow::Schema</scope><name>~ToStringOstreamable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
