<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classparquet_1_1_typed_column_writer" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>parquet::TypedColumnWriter</compoundname>
    <basecompoundref refid="classparquet_1_1_column_writer" prot="public" virt="non-virtual">parquet::ColumnWriter</basecompoundref>
    <includes refid="column__writer_8h" local="no">parquet/column_writer.h</includes>
    <templateparamlist>
      <param>
        <type>typename DType</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classparquet_1_1_typed_column_writer_1a42e665a1b2612ba42760550a555b7b97" prot="public" static="no">
        <type>typename DType::c_type</type>
        <definition>using parquet::TypedColumnWriter&lt; DType &gt;::T =  typename DType::c_type</definition>
        <argsstring></argsstring>
        <name>T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/column_writer.h" line="154" column="1" bodyfile="/arrow/cpp/src/parquet/column_writer.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classparquet_1_1_typed_column_writer_1ac694c2980d02f274ebad73230d3414f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void parquet::TypedColumnWriter&lt; DType &gt;::WriteBatch</definition>
        <argsstring>(int64_t num_values, const int16_t *def_levels, const int16_t *rep_levels, const T *values)=0</argsstring>
        <name>WriteBatch</name>
        <param>
          <type>int64_t</type>
          <declname>num_values</declname>
        </param>
        <param>
          <type>const int16_t *</type>
          <declname>def_levels</declname>
        </param>
        <param>
          <type>const int16_t *</type>
          <declname>rep_levels</declname>
        </param>
        <param>
          <type>const <ref refid="classparquet_1_1_typed_column_writer_1a42e665a1b2612ba42760550a555b7b97" kindref="member">T</ref> *</type>
          <declname>values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/column_writer.h" line="158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_typed_column_writer_1a1518ea7c1e25e7b135fef0d2263ad34e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void parquet::TypedColumnWriter&lt; DType &gt;::WriteBatchSpaced</definition>
        <argsstring>(int64_t num_values, const int16_t *def_levels, const int16_t *rep_levels, const uint8_t *valid_bits, int64_t valid_bits_offset, const T *values)=0</argsstring>
        <name>WriteBatchSpaced</name>
        <param>
          <type>int64_t</type>
          <declname>num_values</declname>
        </param>
        <param>
          <type>const int16_t *</type>
          <declname>def_levels</declname>
        </param>
        <param>
          <type>const int16_t *</type>
          <declname>rep_levels</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>valid_bits</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>valid_bits_offset</declname>
        </param>
        <param>
          <type>const <ref refid="classparquet_1_1_typed_column_writer_1a42e665a1b2612ba42760550a555b7b97" kindref="member">T</ref> *</type>
          <declname>values</declname>
        </param>
        <briefdescription>
<para>Write a batch of repetition levels, definition levels, and values to the column. </para>        </briefdescription>
        <detaileddescription>
<para>In comparison to WriteBatch the length of repetition and definition levels is the same as of the number of values read for max_definition_level == 1. In the case of max_definition_level &gt; 1, the repetition and definition levels are larger than the values but the values include the null entries with definition_level == (max_definition_level - 1). Thus we have to differentiate in the parameters of this function if the input has the length of num_values or the <emphasis>number of rows in the lowest nesting level</emphasis>.</para><para>In the case that the most inner node in the Parquet is required, the <emphasis>number of rows in the lowest nesting level</emphasis> is equal to the number of non-null values. If the inner-most schema node is optional, the <emphasis>number of rows in the lowest nesting level</emphasis> also includes all values with definition_level == (max_definition_level - 1).</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>num_values</parametername>
</parameternamelist>
<parameterdescription>
<para>number of levels to write. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>def_levels</parametername>
</parameternamelist>
<parameterdescription>
<para>The Parquet definition levels, length is num_values </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rep_levels</parametername>
</parameternamelist>
<parameterdescription>
<para>The Parquet repetition levels, length is num_values </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>valid_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>Bitmap that indicates if the row is null on the lowest nesting level. The length is number of rows in the lowest nesting level. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>valid_bits_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in bits of the valid_bits where the first relevant bit resides. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>values</parametername>
</parameternamelist>
<parameterdescription>
<para>The values in the lowest nested level including spacing for nulls on the lowest levels; input has the length of the number of rows on the lowest nesting level. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/column_writer.h" line="187" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_typed_column_writer_1ad2f192a283da589ef20f89b9719d51e9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>int64_t</type>
        <definition>virtual int64_t parquet::TypedColumnWriter&lt; DType &gt;::EstimatedBufferedValueBytes</definition>
        <argsstring>() const =0</argsstring>
        <name>EstimatedBufferedValueBytes</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/column_writer.h" line="192" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4752">
        <label>parquet::ColumnWriter</label>
        <link refid="classparquet_1_1_column_writer"/>
      </node>
      <node id="4751">
        <label>parquet::TypedColumnWriter&lt; DType &gt;</label>
        <link refid="classparquet_1_1_typed_column_writer"/>
        <childnode refid="4752" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4754">
        <label>parquet::ColumnWriter</label>
        <link refid="classparquet_1_1_column_writer"/>
      </node>
      <node id="4753">
        <label>parquet::TypedColumnWriter&lt; DType &gt;</label>
        <link refid="classparquet_1_1_typed_column_writer"/>
        <childnode refid="4754" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/parquet/column_writer.h" line="152" column="1" bodyfile="/arrow/cpp/src/parquet/column_writer.h" bodystart="152" bodyend="193"/>
    <listofallmembers>
      <member refid="classparquet_1_1_column_writer_1a45c4182a717acccbb655a7647cca1ea7" prot="public" virt="pure-virtual"><scope>parquet::TypedColumnWriter</scope><name>Close</name></member>
      <member refid="classparquet_1_1_column_writer_1aabe47ac83ace157172f8add2a60168b6" prot="public" virt="pure-virtual"><scope>parquet::TypedColumnWriter</scope><name>descr</name></member>
      <member refid="classparquet_1_1_typed_column_writer_1ad2f192a283da589ef20f89b9719d51e9" prot="public" virt="pure-virtual"><scope>parquet::TypedColumnWriter</scope><name>EstimatedBufferedValueBytes</name></member>
      <member refid="classparquet_1_1_column_writer_1af3b3f366b1f2bcffdf99846e6c4ef772" prot="public" virt="non-virtual"><scope>parquet::TypedColumnWriter</scope><name>Make</name></member>
      <member refid="classparquet_1_1_column_writer_1a05cf8f0a9c6062a264f9150e425a1c97" prot="public" virt="pure-virtual"><scope>parquet::TypedColumnWriter</scope><name>properties</name></member>
      <member refid="classparquet_1_1_column_writer_1aa03b2aad08f580f136fbf2969016a4fc" prot="public" virt="pure-virtual"><scope>parquet::TypedColumnWriter</scope><name>rows_written</name></member>
      <member refid="classparquet_1_1_typed_column_writer_1a42e665a1b2612ba42760550a555b7b97" prot="public" virt="non-virtual"><scope>parquet::TypedColumnWriter</scope><name>T</name></member>
      <member refid="classparquet_1_1_column_writer_1ab1488fe0b62cdcd0ac4197fb77af1ac9" prot="public" virt="pure-virtual"><scope>parquet::TypedColumnWriter</scope><name>total_bytes_written</name></member>
      <member refid="classparquet_1_1_column_writer_1a266b537f4243e88492190f0812f04c1b" prot="public" virt="pure-virtual"><scope>parquet::TypedColumnWriter</scope><name>total_compressed_bytes</name></member>
      <member refid="classparquet_1_1_column_writer_1aaec76bcbc2b1761851437453b44da2f0" prot="public" virt="pure-virtual"><scope>parquet::TypedColumnWriter</scope><name>type</name></member>
      <member refid="classparquet_1_1_column_writer_1a86548e46b18ef624e83d8bf56d2e4efe" prot="public" virt="pure-virtual"><scope>parquet::TypedColumnWriter</scope><name>WriteArrow</name></member>
      <member refid="classparquet_1_1_typed_column_writer_1ac694c2980d02f274ebad73230d3414f3" prot="public" virt="pure-virtual"><scope>parquet::TypedColumnWriter</scope><name>WriteBatch</name></member>
      <member refid="classparquet_1_1_typed_column_writer_1a1518ea7c1e25e7b135fef0d2263ad34e" prot="public" virt="pure-virtual"><scope>parquet::TypedColumnWriter</scope><name>WriteBatchSpaced</name></member>
      <member refid="classparquet_1_1_column_writer_1a337ecabbf2d3341aff7c36e9a23aae32" prot="public" virt="virtual"><scope>parquet::TypedColumnWriter</scope><name>~ColumnWriter</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
