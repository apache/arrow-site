<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespaceparquet" kind="namespace" language="C++">
    <compoundname>parquet</compoundname>
    <innerclass refid="structparquet_1_1_aad_metadata" prot="public">parquet::AadMetadata</innerclass>
    <innerclass refid="classparquet_1_1_a_a_d_prefix_verifier" prot="public">parquet::AADPrefixVerifier</innerclass>
    <innerclass refid="classparquet_1_1_application_version" prot="public">parquet::ApplicationVersion</innerclass>
    <innerclass refid="classparquet_1_1_arrow_reader_properties" prot="public">parquet::ArrowReaderProperties</innerclass>
    <innerclass refid="structparquet_1_1_arrow_write_context" prot="public">parquet::ArrowWriteContext</innerclass>
    <innerclass refid="classparquet_1_1_arrow_writer_properties" prot="public">parquet::ArrowWriterProperties</innerclass>
    <innerclass refid="classparquet_1_1_block_split_bloom_filter" prot="public">parquet::BlockSplitBloomFilter</innerclass>
    <innerclass refid="classparquet_1_1_bloom_filter" prot="public">parquet::BloomFilter</innerclass>
    <innerclass refid="classparquet_1_1_boolean_decoder" prot="public">parquet::BooleanDecoder</innerclass>
    <innerclass refid="classparquet_1_1_b_s_o_n_logical_type" prot="public">parquet::BSONLogicalType</innerclass>
    <innerclass refid="structparquet_1_1_byte_array" prot="public">parquet::ByteArray</innerclass>
    <innerclass refid="classparquet_1_1_column_chunk_meta_data" prot="public">parquet::ColumnChunkMetaData</innerclass>
    <innerclass refid="classparquet_1_1_column_chunk_meta_data_builder" prot="public">parquet::ColumnChunkMetaDataBuilder</innerclass>
    <innerclass refid="classparquet_1_1_column_crypto_meta_data" prot="public">parquet::ColumnCryptoMetaData</innerclass>
    <innerclass refid="classparquet_1_1_column_decryption_properties" prot="public">parquet::ColumnDecryptionProperties</innerclass>
    <innerclass refid="classparquet_1_1_column_descriptor" prot="public">parquet::ColumnDescriptor</innerclass>
    <innerclass refid="classparquet_1_1_column_encryption_properties" prot="public">parquet::ColumnEncryptionProperties</innerclass>
    <innerclass refid="classparquet_1_1_column_order" prot="public">parquet::ColumnOrder</innerclass>
    <innerclass refid="classparquet_1_1_column_properties" prot="public">parquet::ColumnProperties</innerclass>
    <innerclass refid="classparquet_1_1_column_reader" prot="public">parquet::ColumnReader</innerclass>
    <innerclass refid="classparquet_1_1_column_writer" prot="public">parquet::ColumnWriter</innerclass>
    <innerclass refid="classparquet_1_1_comparator" prot="public">parquet::Comparator</innerclass>
    <innerclass refid="structparquet_1_1_converted_type" prot="public">parquet::ConvertedType</innerclass>
    <innerclass refid="structparquet_1_1_crypto_context" prot="public">parquet::CryptoContext</innerclass>
    <innerclass refid="classparquet_1_1_data_page" prot="public">parquet::DataPage</innerclass>
    <innerclass refid="classparquet_1_1_data_page_v1" prot="public">parquet::DataPageV1</innerclass>
    <innerclass refid="classparquet_1_1_data_page_v2" prot="public">parquet::DataPageV2</innerclass>
    <innerclass refid="classparquet_1_1_date_logical_type" prot="public">parquet::DateLogicalType</innerclass>
    <innerclass refid="classparquet_1_1_decimal_logical_type" prot="public">parquet::DecimalLogicalType</innerclass>
    <innerclass refid="classparquet_1_1_decoder" prot="public">parquet::Decoder</innerclass>
    <innerclass refid="classparquet_1_1_decryption_key_retriever" prot="public">parquet::DecryptionKeyRetriever</innerclass>
    <innerclass refid="classparquet_1_1_decryptor" prot="public">parquet::Decryptor</innerclass>
    <innerclass refid="classparquet_1_1_dict_decoder" prot="public">parquet::DictDecoder</innerclass>
    <innerclass refid="classparquet_1_1_dict_encoder" prot="public">parquet::DictEncoder</innerclass>
    <innerclass refid="classparquet_1_1_dictionary_page" prot="public">parquet::DictionaryPage</innerclass>
    <innerclass refid="classparquet_1_1_encoded_statistics" prot="public">parquet::EncodedStatistics</innerclass>
    <innerclass refid="classparquet_1_1_encoder" prot="public">parquet::Encoder</innerclass>
    <innerclass refid="structparquet_1_1_encoding" prot="public">parquet::Encoding</innerclass>
    <innerclass refid="structparquet_1_1_encoding_traits" prot="public">parquet::EncodingTraits</innerclass>
    <innerclass refid="structparquet_1_1_encoding_traits_3_01_boolean_type_01_4" prot="public">parquet::EncodingTraits&lt; BooleanType &gt;</innerclass>
    <innerclass refid="structparquet_1_1_encoding_traits_3_01_byte_array_type_01_4" prot="public">parquet::EncodingTraits&lt; ByteArrayType &gt;</innerclass>
    <innerclass refid="structparquet_1_1_encoding_traits_3_01_double_type_01_4" prot="public">parquet::EncodingTraits&lt; DoubleType &gt;</innerclass>
    <innerclass refid="structparquet_1_1_encoding_traits_3_01_f_l_b_a_type_01_4" prot="public">parquet::EncodingTraits&lt; FLBAType &gt;</innerclass>
    <innerclass refid="structparquet_1_1_encoding_traits_3_01_float_type_01_4" prot="public">parquet::EncodingTraits&lt; FloatType &gt;</innerclass>
    <innerclass refid="structparquet_1_1_encoding_traits_3_01_int32_type_01_4" prot="public">parquet::EncodingTraits&lt; Int32Type &gt;</innerclass>
    <innerclass refid="structparquet_1_1_encoding_traits_3_01_int64_type_01_4" prot="public">parquet::EncodingTraits&lt; Int64Type &gt;</innerclass>
    <innerclass refid="structparquet_1_1_encoding_traits_3_01_int96_type_01_4" prot="public">parquet::EncodingTraits&lt; Int96Type &gt;</innerclass>
    <innerclass refid="structparquet_1_1_encryption_algorithm" prot="public">parquet::EncryptionAlgorithm</innerclass>
    <innerclass refid="classparquet_1_1_encryptor" prot="public">parquet::Encryptor</innerclass>
    <innerclass refid="structparquet_1_1_end_row_group_type" prot="public">parquet::EndRowGroupType</innerclass>
    <innerclass refid="structparquet_1_1_end_row_type" prot="public">parquet::EndRowType</innerclass>
    <innerclass refid="classparquet_1_1_enum_logical_type" prot="public">parquet::EnumLogicalType</innerclass>
    <innerclass refid="classparquet_1_1_file_crypto_meta_data" prot="public">parquet::FileCryptoMetaData</innerclass>
    <innerclass refid="classparquet_1_1_file_decryption_properties" prot="public">parquet::FileDecryptionProperties</innerclass>
    <innerclass refid="classparquet_1_1_file_encryption_properties" prot="public">parquet::FileEncryptionProperties</innerclass>
    <innerclass refid="classparquet_1_1_file_interface" prot="public">parquet::FileInterface</innerclass>
    <innerclass refid="classparquet_1_1_file_meta_data" prot="public">parquet::FileMetaData</innerclass>
    <innerclass refid="classparquet_1_1_file_meta_data_builder" prot="public">parquet::FileMetaDataBuilder</innerclass>
    <innerclass refid="structparquet_1_1_fixed_len_byte_array" prot="public">parquet::FixedLenByteArray</innerclass>
    <innerclass refid="classparquet_1_1_f_l_b_a_decoder" prot="public">parquet::FLBADecoder</innerclass>
    <innerclass refid="classparquet_1_1_hasher" prot="public">parquet::Hasher</innerclass>
    <innerclass refid="classparquet_1_1_hidden_column_exception" prot="public">parquet::HiddenColumnException</innerclass>
    <innerclass refid="classparquet_1_1_integer_key_id_retriever" prot="public">parquet::IntegerKeyIdRetriever</innerclass>
    <innerclass refid="classparquet_1_1_internal_file_decryptor" prot="public">parquet::InternalFileDecryptor</innerclass>
    <innerclass refid="classparquet_1_1_internal_file_encryptor" prot="public">parquet::InternalFileEncryptor</innerclass>
    <innerclass refid="classparquet_1_1_interval_logical_type" prot="public">parquet::IntervalLogicalType</innerclass>
    <innerclass refid="classparquet_1_1_int_logical_type" prot="public">parquet::IntLogicalType</innerclass>
    <innerclass refid="classparquet_1_1_j_s_o_n_logical_type" prot="public">parquet::JSONLogicalType</innerclass>
    <innerclass refid="classparquet_1_1_key_access_denied_exception" prot="public">parquet::KeyAccessDeniedException</innerclass>
    <innerclass refid="classparquet_1_1_level_decoder" prot="public">parquet::LevelDecoder</innerclass>
    <innerclass refid="classparquet_1_1_level_encoder" prot="public">parquet::LevelEncoder</innerclass>
    <innerclass refid="classparquet_1_1_list_logical_type" prot="public">parquet::ListLogicalType</innerclass>
    <innerclass refid="classparquet_1_1_logical_type" prot="public">parquet::LogicalType</innerclass>
    <innerclass refid="classparquet_1_1_map_logical_type" prot="public">parquet::MapLogicalType</innerclass>
    <innerclass refid="classparquet_1_1_murmur_hash3" prot="public">parquet::MurmurHash3</innerclass>
    <innerclass refid="classparquet_1_1_no_logical_type" prot="public">parquet::NoLogicalType</innerclass>
    <innerclass refid="classparquet_1_1_null_logical_type" prot="public">parquet::NullLogicalType</innerclass>
    <innerclass refid="classparquet_1_1_output_stream" prot="public">parquet::OutputStream</innerclass>
    <innerclass refid="classparquet_1_1_page" prot="public">parquet::Page</innerclass>
    <innerclass refid="structparquet_1_1_page_encoding_stats" prot="public">parquet::PageEncodingStats</innerclass>
    <innerclass refid="classparquet_1_1_page_reader" prot="public">parquet::PageReader</innerclass>
    <innerclass refid="structparquet_1_1_page_type" prot="public">parquet::PageType</innerclass>
    <innerclass refid="classparquet_1_1_page_writer" prot="public">parquet::PageWriter</innerclass>
    <innerclass refid="structparquet_1_1_parquet_cipher" prot="public">parquet::ParquetCipher</innerclass>
    <innerclass refid="classparquet_1_1_parquet_exception" prot="public">parquet::ParquetException</innerclass>
    <innerclass refid="classparquet_1_1_parquet_file_printer" prot="public">parquet::ParquetFilePrinter</innerclass>
    <innerclass refid="classparquet_1_1_parquet_file_reader" prot="public">parquet::ParquetFileReader</innerclass>
    <innerclass refid="classparquet_1_1_parquet_file_writer" prot="public">parquet::ParquetFileWriter</innerclass>
    <innerclass refid="classparquet_1_1_parquet_input_wrapper" prot="public">parquet::ParquetInputWrapper</innerclass>
    <innerclass refid="classparquet_1_1_parquet_invalid_or_corrupted_file_exception" prot="public">parquet::ParquetInvalidOrCorruptedFileException</innerclass>
    <innerclass refid="classparquet_1_1_parquet_output_wrapper" prot="public">parquet::ParquetOutputWrapper</innerclass>
    <innerclass refid="classparquet_1_1_parquet_status_exception" prot="public">parquet::ParquetStatusException</innerclass>
    <innerclass refid="structparquet_1_1_parquet_version" prot="public">parquet::ParquetVersion</innerclass>
    <innerclass refid="structparquet_1_1_physical_type" prot="public">parquet::PhysicalType</innerclass>
    <innerclass refid="classparquet_1_1_random_access_source" prot="public">parquet::RandomAccessSource</innerclass>
    <innerclass refid="classparquet_1_1_reader_properties" prot="public">parquet::ReaderProperties</innerclass>
    <innerclass refid="structparquet_1_1_repetition" prot="public">parquet::Repetition</innerclass>
    <innerclass refid="classparquet_1_1_row_group_meta_data" prot="public">parquet::RowGroupMetaData</innerclass>
    <innerclass refid="classparquet_1_1_row_group_meta_data_builder" prot="public">parquet::RowGroupMetaDataBuilder</innerclass>
    <innerclass refid="classparquet_1_1_row_group_reader" prot="public">parquet::RowGroupReader</innerclass>
    <innerclass refid="classparquet_1_1_row_group_writer" prot="public">parquet::RowGroupWriter</innerclass>
    <innerclass refid="classparquet_1_1_scanner" prot="public">parquet::Scanner</innerclass>
    <innerclass refid="classparquet_1_1_schema_descriptor" prot="public">parquet::SchemaDescriptor</innerclass>
    <innerclass refid="structparquet_1_1_sort_order" prot="public">parquet::SortOrder</innerclass>
    <innerclass refid="classparquet_1_1_statistics" prot="public">parquet::Statistics</innerclass>
    <innerclass refid="classparquet_1_1_stream_reader" prot="public">parquet::StreamReader</innerclass>
    <innerclass refid="classparquet_1_1_stream_writer" prot="public">parquet::StreamWriter</innerclass>
    <innerclass refid="classparquet_1_1_string_key_id_retriever" prot="public">parquet::StringKeyIdRetriever</innerclass>
    <innerclass refid="classparquet_1_1_string_logical_type" prot="public">parquet::StringLogicalType</innerclass>
    <innerclass refid="classparquet_1_1_thrift_serializer" prot="public">parquet::ThriftSerializer</innerclass>
    <innerclass refid="classparquet_1_1_time_logical_type" prot="public">parquet::TimeLogicalType</innerclass>
    <innerclass refid="classparquet_1_1_timestamp_logical_type" prot="public">parquet::TimestampLogicalType</innerclass>
    <innerclass refid="structparquet_1_1_type" prot="public">parquet::Type</innerclass>
    <innerclass refid="structparquet_1_1type__traits" prot="public">parquet::type_traits</innerclass>
    <innerclass refid="structparquet_1_1type__traits_3_01_type_1_1_b_o_o_l_e_a_n_01_4" prot="public">parquet::type_traits&lt; Type::BOOLEAN &gt;</innerclass>
    <innerclass refid="structparquet_1_1type__traits_3_01_type_1_1_b_y_t_e___a_r_r_a_y_01_4" prot="public">parquet::type_traits&lt; Type::BYTE_ARRAY &gt;</innerclass>
    <innerclass refid="structparquet_1_1type__traits_3_01_type_1_1_d_o_u_b_l_e_01_4" prot="public">parquet::type_traits&lt; Type::DOUBLE &gt;</innerclass>
    <innerclass refid="structparquet_1_1type__traits_3_01_type_1_1_f_i_x_e_d___l_e_n___b_y_t_e___a_r_r_a_y_01_4" prot="public">parquet::type_traits&lt; Type::FIXED_LEN_BYTE_ARRAY &gt;</innerclass>
    <innerclass refid="structparquet_1_1type__traits_3_01_type_1_1_f_l_o_a_t_01_4" prot="public">parquet::type_traits&lt; Type::FLOAT &gt;</innerclass>
    <innerclass refid="structparquet_1_1type__traits_3_01_type_1_1_i_n_t32_01_4" prot="public">parquet::type_traits&lt; Type::INT32 &gt;</innerclass>
    <innerclass refid="structparquet_1_1type__traits_3_01_type_1_1_i_n_t64_01_4" prot="public">parquet::type_traits&lt; Type::INT64 &gt;</innerclass>
    <innerclass refid="structparquet_1_1type__traits_3_01_type_1_1_i_n_t96_01_4" prot="public">parquet::type_traits&lt; Type::INT96 &gt;</innerclass>
    <innerclass refid="classparquet_1_1_typed_column_reader" prot="public">parquet::TypedColumnReader</innerclass>
    <innerclass refid="classparquet_1_1_typed_column_writer" prot="public">parquet::TypedColumnWriter</innerclass>
    <innerclass refid="classparquet_1_1_typed_comparator" prot="public">parquet::TypedComparator</innerclass>
    <innerclass refid="classparquet_1_1_typed_decoder" prot="public">parquet::TypedDecoder</innerclass>
    <innerclass refid="classparquet_1_1_typed_encoder" prot="public">parquet::TypedEncoder</innerclass>
    <innerclass refid="classparquet_1_1_typed_scanner" prot="public">parquet::TypedScanner</innerclass>
    <innerclass refid="classparquet_1_1_typed_statistics" prot="public">parquet::TypedStatistics</innerclass>
    <innerclass refid="classparquet_1_1_unknown_logical_type" prot="public">parquet::UnknownLogicalType</innerclass>
    <innerclass refid="classparquet_1_1_u_u_i_d_logical_type" prot="public">parquet::UUIDLogicalType</innerclass>
    <innerclass refid="classparquet_1_1_writer_properties" prot="public">parquet::WriterProperties</innerclass>
    <innernamespace refid="namespaceparquet_1_1arrow">parquet::arrow</innernamespace>
    <innernamespace refid="namespaceparquet_1_1encryption">parquet::encryption</innernamespace>
    <innernamespace refid="namespaceparquet_1_1format">parquet::format</innernamespace>
    <innernamespace refid="namespaceparquet_1_1schema">parquet::schema</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespaceparquet_1a3b810e9624755684659547697975539a" prot="public" static="no">
        <name>ParquetDataPageVersion</name>
        <enumvalue id="namespaceparquet_1a3b810e9624755684659547697975539aab4daca084ad9eabfc8de231929477ed6" prot="public">
          <name>V1</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceparquet_1a3b810e9624755684659547697975539aaec765f1adc3b4253f2d3b131a4a8618f" prot="public">
          <name>V2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Controls serialization format of data pages. </para>        </briefdescription>
        <detaileddescription>
<para>parquet-format v2.0.0 introduced a new data page metadata type <ref refid="classparquet_1_1_data_page_v2" kindref="compound">DataPageV2</ref> and serialized page structure (for example, encoded levels are no longer compressed). Prior to the completion of PARQUET-457 in 2020, this library did not implement <ref refid="classparquet_1_1_data_page_v2" kindref="compound">DataPageV2</ref> correctly, so if you use the V2 data page format, you may have forward compatibility issues (older versions of the library will be unable to read the files). Note that some Parquet implementations do not implement <ref refid="classparquet_1_1_data_page_v2" kindref="compound">DataPageV2</ref> at all. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/properties.h" line="59" column="1" bodyfile="/arrow/cpp/src/parquet/properties.h" bodystart="59" bodyend="59"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceparquet_1ac0b370ba756abc95a11721e44be15f3c" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_column_reader" kindref="compound">TypedColumnReader</ref>&lt; <ref refid="namespaceparquet_1a60f6c016c8d8b612f78974bc516006b0" kindref="member">BooleanType</ref> &gt;</type>
        <definition>using parquet::BoolReader = typedef TypedColumnReader&lt;BooleanType&gt;</definition>
        <argsstring></argsstring>
        <name>BoolReader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/column_reader.h" line="381" column="1" bodyfile="/arrow/cpp/src/parquet/column_reader.h" bodystart="381" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1a50ee42e1810fb9d3e631c880a85ad94b" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_column_reader" kindref="compound">TypedColumnReader</ref>&lt; <ref refid="namespaceparquet_1a7d7c12097fa34b9a73e9e5da3df62b17" kindref="member">Int32Type</ref> &gt;</type>
        <definition>using parquet::Int32Reader = typedef TypedColumnReader&lt;Int32Type&gt;</definition>
        <argsstring></argsstring>
        <name>Int32Reader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/column_reader.h" line="382" column="1" bodyfile="/arrow/cpp/src/parquet/column_reader.h" bodystart="382" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1a4c7fe9fcbd9bdaa3069e3351a9a2ada1" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_column_reader" kindref="compound">TypedColumnReader</ref>&lt; <ref refid="namespaceparquet_1aebf28a7ea170ee7e771b13b12d06f3cf" kindref="member">Int64Type</ref> &gt;</type>
        <definition>using parquet::Int64Reader = typedef TypedColumnReader&lt;Int64Type&gt;</definition>
        <argsstring></argsstring>
        <name>Int64Reader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/column_reader.h" line="383" column="1" bodyfile="/arrow/cpp/src/parquet/column_reader.h" bodystart="383" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1a9fc47cbfe5e12f3d884d22be1f59ebea" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_column_reader" kindref="compound">TypedColumnReader</ref>&lt; <ref refid="namespaceparquet_1ac52f5e8342ad62c5a982888bb08cecc4" kindref="member">Int96Type</ref> &gt;</type>
        <definition>using parquet::Int96Reader = typedef TypedColumnReader&lt;Int96Type&gt;</definition>
        <argsstring></argsstring>
        <name>Int96Reader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/column_reader.h" line="384" column="1" bodyfile="/arrow/cpp/src/parquet/column_reader.h" bodystart="384" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1ae003076bca68d0a3e2709158bf0fe9e6" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_column_reader" kindref="compound">TypedColumnReader</ref>&lt; <ref refid="namespaceparquet_1a0ed420ee4d70b4f7e8c71a3b53beefe5" kindref="member">FloatType</ref> &gt;</type>
        <definition>using parquet::FloatReader = typedef TypedColumnReader&lt;FloatType&gt;</definition>
        <argsstring></argsstring>
        <name>FloatReader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/column_reader.h" line="385" column="1" bodyfile="/arrow/cpp/src/parquet/column_reader.h" bodystart="385" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1a95af4cf25dcf21ada01d8f5a26ff962a" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_column_reader" kindref="compound">TypedColumnReader</ref>&lt; <ref refid="namespaceparquet_1ab8b1ae52fb8af689994a86814212a9cc" kindref="member">DoubleType</ref> &gt;</type>
        <definition>using parquet::DoubleReader = typedef TypedColumnReader&lt;DoubleType&gt;</definition>
        <argsstring></argsstring>
        <name>DoubleReader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/column_reader.h" line="386" column="1" bodyfile="/arrow/cpp/src/parquet/column_reader.h" bodystart="386" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1aa04db46d4cb1934aff2f9cf6ce3f6f5b" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_column_reader" kindref="compound">TypedColumnReader</ref>&lt; <ref refid="namespaceparquet_1a1bb1f1bd7489144e704dd149df95ce83" kindref="member">ByteArrayType</ref> &gt;</type>
        <definition>using parquet::ByteArrayReader = typedef TypedColumnReader&lt;ByteArrayType&gt;</definition>
        <argsstring></argsstring>
        <name>ByteArrayReader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/column_reader.h" line="387" column="1" bodyfile="/arrow/cpp/src/parquet/column_reader.h" bodystart="387" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1ad1f404aeab6db141915da489d7c89653" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_column_reader" kindref="compound">TypedColumnReader</ref>&lt; <ref refid="namespaceparquet_1a55abc780912f7bcf901d329dcad1093a" kindref="member">FLBAType</ref> &gt;</type>
        <definition>using parquet::FixedLenByteArrayReader = typedef TypedColumnReader&lt;FLBAType&gt;</definition>
        <argsstring></argsstring>
        <name>FixedLenByteArrayReader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/column_reader.h" line="388" column="1" bodyfile="/arrow/cpp/src/parquet/column_reader.h" bodystart="388" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1ab548eea6e1d2f2b090f9ca3addbdfce0" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_scanner" kindref="compound">TypedScanner</ref>&lt; <ref refid="namespaceparquet_1a60f6c016c8d8b612f78974bc516006b0" kindref="member">BooleanType</ref> &gt;</type>
        <definition>typedef TypedScanner&lt;BooleanType&gt; parquet::BoolScanner</definition>
        <argsstring></argsstring>
        <name>BoolScanner</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/column_scanner.h" line="237" column="1" bodyfile="/arrow/cpp/src/parquet/column_scanner.h" bodystart="237" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1a11e204a547f1c9cb55d935e994bc7e35" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_scanner" kindref="compound">TypedScanner</ref>&lt; <ref refid="namespaceparquet_1a7d7c12097fa34b9a73e9e5da3df62b17" kindref="member">Int32Type</ref> &gt;</type>
        <definition>typedef TypedScanner&lt;Int32Type&gt; parquet::Int32Scanner</definition>
        <argsstring></argsstring>
        <name>Int32Scanner</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/column_scanner.h" line="238" column="1" bodyfile="/arrow/cpp/src/parquet/column_scanner.h" bodystart="238" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1a5fc4c4cc69d88323b8152f8a53cb6480" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_scanner" kindref="compound">TypedScanner</ref>&lt; <ref refid="namespaceparquet_1aebf28a7ea170ee7e771b13b12d06f3cf" kindref="member">Int64Type</ref> &gt;</type>
        <definition>typedef TypedScanner&lt;Int64Type&gt; parquet::Int64Scanner</definition>
        <argsstring></argsstring>
        <name>Int64Scanner</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/column_scanner.h" line="239" column="1" bodyfile="/arrow/cpp/src/parquet/column_scanner.h" bodystart="239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1ab2ff9c0b250346e973f18ebc6319c089" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_scanner" kindref="compound">TypedScanner</ref>&lt; <ref refid="namespaceparquet_1ac52f5e8342ad62c5a982888bb08cecc4" kindref="member">Int96Type</ref> &gt;</type>
        <definition>typedef TypedScanner&lt;Int96Type&gt; parquet::Int96Scanner</definition>
        <argsstring></argsstring>
        <name>Int96Scanner</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/column_scanner.h" line="240" column="1" bodyfile="/arrow/cpp/src/parquet/column_scanner.h" bodystart="240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1a17aac9d71a0f88daf4f766e9c4ba37e3" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_scanner" kindref="compound">TypedScanner</ref>&lt; <ref refid="namespaceparquet_1a0ed420ee4d70b4f7e8c71a3b53beefe5" kindref="member">FloatType</ref> &gt;</type>
        <definition>typedef TypedScanner&lt;FloatType&gt; parquet::FloatScanner</definition>
        <argsstring></argsstring>
        <name>FloatScanner</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/column_scanner.h" line="241" column="1" bodyfile="/arrow/cpp/src/parquet/column_scanner.h" bodystart="241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1a351acff5b7380ed45c3880114175ab0e" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_scanner" kindref="compound">TypedScanner</ref>&lt; <ref refid="namespaceparquet_1ab8b1ae52fb8af689994a86814212a9cc" kindref="member">DoubleType</ref> &gt;</type>
        <definition>typedef TypedScanner&lt;DoubleType&gt; parquet::DoubleScanner</definition>
        <argsstring></argsstring>
        <name>DoubleScanner</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/column_scanner.h" line="242" column="1" bodyfile="/arrow/cpp/src/parquet/column_scanner.h" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1a7f9b55326350880114adc480fdc301ff" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_scanner" kindref="compound">TypedScanner</ref>&lt; <ref refid="namespaceparquet_1a1bb1f1bd7489144e704dd149df95ce83" kindref="member">ByteArrayType</ref> &gt;</type>
        <definition>typedef TypedScanner&lt;ByteArrayType&gt; parquet::ByteArrayScanner</definition>
        <argsstring></argsstring>
        <name>ByteArrayScanner</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/column_scanner.h" line="243" column="1" bodyfile="/arrow/cpp/src/parquet/column_scanner.h" bodystart="243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1adf61f6459ead04d3b985b5fef1020747" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_scanner" kindref="compound">TypedScanner</ref>&lt; <ref refid="namespaceparquet_1a55abc780912f7bcf901d329dcad1093a" kindref="member">FLBAType</ref> &gt;</type>
        <definition>typedef TypedScanner&lt;FLBAType&gt; parquet::FixedLenByteArrayScanner</definition>
        <argsstring></argsstring>
        <name>FixedLenByteArrayScanner</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/column_scanner.h" line="244" column="1" bodyfile="/arrow/cpp/src/parquet/column_scanner.h" bodystart="244" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1a40102cfb760c50132f8c9d4cd3c80e47" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_column_writer" kindref="compound">TypedColumnWriter</ref>&lt; <ref refid="namespaceparquet_1a60f6c016c8d8b612f78974bc516006b0" kindref="member">BooleanType</ref> &gt;</type>
        <definition>using parquet::BoolWriter = typedef TypedColumnWriter&lt;BooleanType&gt;</definition>
        <argsstring></argsstring>
        <name>BoolWriter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/column_writer.h" line="195" column="1" bodyfile="/arrow/cpp/src/parquet/column_writer.h" bodystart="195" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1a136e073503ae0f2b0c8b7fa3578ca5bb" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_column_writer" kindref="compound">TypedColumnWriter</ref>&lt; <ref refid="namespaceparquet_1a7d7c12097fa34b9a73e9e5da3df62b17" kindref="member">Int32Type</ref> &gt;</type>
        <definition>using parquet::Int32Writer = typedef TypedColumnWriter&lt;Int32Type&gt;</definition>
        <argsstring></argsstring>
        <name>Int32Writer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/column_writer.h" line="196" column="1" bodyfile="/arrow/cpp/src/parquet/column_writer.h" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1a333238294a4d3102458284a814c526fc" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_column_writer" kindref="compound">TypedColumnWriter</ref>&lt; <ref refid="namespaceparquet_1aebf28a7ea170ee7e771b13b12d06f3cf" kindref="member">Int64Type</ref> &gt;</type>
        <definition>using parquet::Int64Writer = typedef TypedColumnWriter&lt;Int64Type&gt;</definition>
        <argsstring></argsstring>
        <name>Int64Writer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/column_writer.h" line="197" column="1" bodyfile="/arrow/cpp/src/parquet/column_writer.h" bodystart="197" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1a967ef1f65b306f8bf6a432184df715cb" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_column_writer" kindref="compound">TypedColumnWriter</ref>&lt; <ref refid="namespaceparquet_1ac52f5e8342ad62c5a982888bb08cecc4" kindref="member">Int96Type</ref> &gt;</type>
        <definition>using parquet::Int96Writer = typedef TypedColumnWriter&lt;Int96Type&gt;</definition>
        <argsstring></argsstring>
        <name>Int96Writer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/column_writer.h" line="198" column="1" bodyfile="/arrow/cpp/src/parquet/column_writer.h" bodystart="198" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1ad133e8b2657f057e3166cdf724b350d4" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_column_writer" kindref="compound">TypedColumnWriter</ref>&lt; <ref refid="namespaceparquet_1a0ed420ee4d70b4f7e8c71a3b53beefe5" kindref="member">FloatType</ref> &gt;</type>
        <definition>using parquet::FloatWriter = typedef TypedColumnWriter&lt;FloatType&gt;</definition>
        <argsstring></argsstring>
        <name>FloatWriter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/column_writer.h" line="199" column="1" bodyfile="/arrow/cpp/src/parquet/column_writer.h" bodystart="199" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1a65084149c6295f93c0bb6eb485bd8730" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_column_writer" kindref="compound">TypedColumnWriter</ref>&lt; <ref refid="namespaceparquet_1ab8b1ae52fb8af689994a86814212a9cc" kindref="member">DoubleType</ref> &gt;</type>
        <definition>using parquet::DoubleWriter = typedef TypedColumnWriter&lt;DoubleType&gt;</definition>
        <argsstring></argsstring>
        <name>DoubleWriter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/column_writer.h" line="200" column="1" bodyfile="/arrow/cpp/src/parquet/column_writer.h" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1ab5a8d7a6a29cbfdd95ae84074248af95" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_column_writer" kindref="compound">TypedColumnWriter</ref>&lt; <ref refid="namespaceparquet_1a1bb1f1bd7489144e704dd149df95ce83" kindref="member">ByteArrayType</ref> &gt;</type>
        <definition>using parquet::ByteArrayWriter = typedef TypedColumnWriter&lt;ByteArrayType&gt;</definition>
        <argsstring></argsstring>
        <name>ByteArrayWriter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/column_writer.h" line="201" column="1" bodyfile="/arrow/cpp/src/parquet/column_writer.h" bodystart="201" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1aecb88c5cd46826b8252549726497fb37" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_column_writer" kindref="compound">TypedColumnWriter</ref>&lt; <ref refid="namespaceparquet_1a55abc780912f7bcf901d329dcad1093a" kindref="member">FLBAType</ref> &gt;</type>
        <definition>using parquet::FixedLenByteArrayWriter = typedef TypedColumnWriter&lt;FLBAType&gt;</definition>
        <argsstring></argsstring>
        <name>FixedLenByteArrayWriter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/column_writer.h" line="202" column="1" bodyfile="/arrow/cpp/src/parquet/column_writer.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1a5e0604359b553b8d9479a4b03b47fce9" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_encoder" kindref="compound">TypedEncoder</ref>&lt; <ref refid="namespaceparquet_1a60f6c016c8d8b612f78974bc516006b0" kindref="member">BooleanType</ref> &gt;</type>
        <definition>using parquet::BooleanEncoder = typedef TypedEncoder&lt;BooleanType&gt;</definition>
        <argsstring></argsstring>
        <name>BooleanEncoder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encoding.h" line="54" column="1" bodyfile="/arrow/cpp/src/parquet/encoding.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1a8de040dab48ce513cf7a1945ad39780a" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_encoder" kindref="compound">TypedEncoder</ref>&lt; <ref refid="namespaceparquet_1a7d7c12097fa34b9a73e9e5da3df62b17" kindref="member">Int32Type</ref> &gt;</type>
        <definition>using parquet::Int32Encoder = typedef TypedEncoder&lt;Int32Type&gt;</definition>
        <argsstring></argsstring>
        <name>Int32Encoder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encoding.h" line="55" column="1" bodyfile="/arrow/cpp/src/parquet/encoding.h" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1abfbfef47ea1c4df255603fb54b59e89b" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_encoder" kindref="compound">TypedEncoder</ref>&lt; <ref refid="namespaceparquet_1aebf28a7ea170ee7e771b13b12d06f3cf" kindref="member">Int64Type</ref> &gt;</type>
        <definition>using parquet::Int64Encoder = typedef TypedEncoder&lt;Int64Type&gt;</definition>
        <argsstring></argsstring>
        <name>Int64Encoder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encoding.h" line="56" column="1" bodyfile="/arrow/cpp/src/parquet/encoding.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1ab7c84bd42cb571ef12eec8f30d1f3c43" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_encoder" kindref="compound">TypedEncoder</ref>&lt; <ref refid="namespaceparquet_1ac52f5e8342ad62c5a982888bb08cecc4" kindref="member">Int96Type</ref> &gt;</type>
        <definition>using parquet::Int96Encoder = typedef TypedEncoder&lt;Int96Type&gt;</definition>
        <argsstring></argsstring>
        <name>Int96Encoder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encoding.h" line="57" column="1" bodyfile="/arrow/cpp/src/parquet/encoding.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1a6953d58d6bb6fe72ad503e5338d9aa7d" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_encoder" kindref="compound">TypedEncoder</ref>&lt; <ref refid="namespaceparquet_1a0ed420ee4d70b4f7e8c71a3b53beefe5" kindref="member">FloatType</ref> &gt;</type>
        <definition>using parquet::FloatEncoder = typedef TypedEncoder&lt;FloatType&gt;</definition>
        <argsstring></argsstring>
        <name>FloatEncoder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encoding.h" line="58" column="1" bodyfile="/arrow/cpp/src/parquet/encoding.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1a0899b0e10fabb03d9021868796649b46" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_encoder" kindref="compound">TypedEncoder</ref>&lt; <ref refid="namespaceparquet_1ab8b1ae52fb8af689994a86814212a9cc" kindref="member">DoubleType</ref> &gt;</type>
        <definition>using parquet::DoubleEncoder = typedef TypedEncoder&lt;DoubleType&gt;</definition>
        <argsstring></argsstring>
        <name>DoubleEncoder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encoding.h" line="59" column="1" bodyfile="/arrow/cpp/src/parquet/encoding.h" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1a528c47176363fb42aff607f291d9d4d9" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_encoder" kindref="compound">TypedEncoder</ref>&lt; <ref refid="namespaceparquet_1a1bb1f1bd7489144e704dd149df95ce83" kindref="member">ByteArrayType</ref> &gt;</type>
        <definition>using parquet::ByteArrayEncoder = typedef TypedEncoder&lt;ByteArrayType&gt;</definition>
        <argsstring></argsstring>
        <name>ByteArrayEncoder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encoding.h" line="60" column="1" bodyfile="/arrow/cpp/src/parquet/encoding.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1aa3aa1ddf2e08ace7ebd74f2865d0c690" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_encoder" kindref="compound">TypedEncoder</ref>&lt; <ref refid="namespaceparquet_1a55abc780912f7bcf901d329dcad1093a" kindref="member">FLBAType</ref> &gt;</type>
        <definition>using parquet::FLBAEncoder = typedef TypedEncoder&lt;FLBAType&gt;</definition>
        <argsstring></argsstring>
        <name>FLBAEncoder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encoding.h" line="61" column="1" bodyfile="/arrow/cpp/src/parquet/encoding.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1ae13987d76b7b2ef689ae025d0062ae86" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_decoder" kindref="compound">TypedDecoder</ref>&lt; <ref refid="namespaceparquet_1a7d7c12097fa34b9a73e9e5da3df62b17" kindref="member">Int32Type</ref> &gt;</type>
        <definition>using parquet::Int32Decoder = typedef TypedDecoder&lt;Int32Type&gt;</definition>
        <argsstring></argsstring>
        <name>Int32Decoder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encoding.h" line="67" column="1" bodyfile="/arrow/cpp/src/parquet/encoding.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1ab64284404eb635fdc5116a35d26958c3" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_decoder" kindref="compound">TypedDecoder</ref>&lt; <ref refid="namespaceparquet_1aebf28a7ea170ee7e771b13b12d06f3cf" kindref="member">Int64Type</ref> &gt;</type>
        <definition>using parquet::Int64Decoder = typedef TypedDecoder&lt;Int64Type&gt;</definition>
        <argsstring></argsstring>
        <name>Int64Decoder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encoding.h" line="68" column="1" bodyfile="/arrow/cpp/src/parquet/encoding.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1a317fa2986055e2f47b6814b1bf3a1227" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_decoder" kindref="compound">TypedDecoder</ref>&lt; <ref refid="namespaceparquet_1ac52f5e8342ad62c5a982888bb08cecc4" kindref="member">Int96Type</ref> &gt;</type>
        <definition>using parquet::Int96Decoder = typedef TypedDecoder&lt;Int96Type&gt;</definition>
        <argsstring></argsstring>
        <name>Int96Decoder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encoding.h" line="69" column="1" bodyfile="/arrow/cpp/src/parquet/encoding.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1a19de3b79c489d055c8134207e863adbb" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_decoder" kindref="compound">TypedDecoder</ref>&lt; <ref refid="namespaceparquet_1a0ed420ee4d70b4f7e8c71a3b53beefe5" kindref="member">FloatType</ref> &gt;</type>
        <definition>using parquet::FloatDecoder = typedef TypedDecoder&lt;FloatType&gt;</definition>
        <argsstring></argsstring>
        <name>FloatDecoder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encoding.h" line="70" column="1" bodyfile="/arrow/cpp/src/parquet/encoding.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1a71384666b201cb1e3e73706a262794be" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_decoder" kindref="compound">TypedDecoder</ref>&lt; <ref refid="namespaceparquet_1ab8b1ae52fb8af689994a86814212a9cc" kindref="member">DoubleType</ref> &gt;</type>
        <definition>using parquet::DoubleDecoder = typedef TypedDecoder&lt;DoubleType&gt;</definition>
        <argsstring></argsstring>
        <name>DoubleDecoder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encoding.h" line="71" column="1" bodyfile="/arrow/cpp/src/parquet/encoding.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1a45ea04e975707d7da9a3766c79c74eae" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_decoder" kindref="compound">TypedDecoder</ref>&lt; <ref refid="namespaceparquet_1a1bb1f1bd7489144e704dd149df95ce83" kindref="member">ByteArrayType</ref> &gt;</type>
        <definition>using parquet::ByteArrayDecoder = typedef TypedDecoder&lt;ByteArrayType&gt;</definition>
        <argsstring></argsstring>
        <name>ByteArrayDecoder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encoding.h" line="72" column="1" bodyfile="/arrow/cpp/src/parquet/encoding.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1a0c783ff11d8937fce7ec2fdc8b0b7743" prot="public" static="no">
        <type>std::map&lt; std::string, std::shared_ptr&lt; <ref refid="classparquet_1_1_column_decryption_properties" kindref="compound">ColumnDecryptionProperties</ref> &gt; &gt;</type>
        <definition>using parquet::ColumnPathToDecryptionPropertiesMap = typedef std::map&lt;std::string, std::shared_ptr&lt;ColumnDecryptionProperties&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>ColumnPathToDecryptionPropertiesMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encryption.h" line="41" column="1" bodyfile="/arrow/cpp/src/parquet/encryption.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1ac06806d0b989044b3c15190d2b27523f" prot="public" static="no">
        <type>std::map&lt; std::string, std::shared_ptr&lt; <ref refid="classparquet_1_1_column_encryption_properties" kindref="compound">ColumnEncryptionProperties</ref> &gt; &gt;</type>
        <definition>using parquet::ColumnPathToEncryptionPropertiesMap = typedef std::map&lt;std::string, std::shared_ptr&lt;ColumnEncryptionProperties&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>ColumnPathToEncryptionPropertiesMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encryption.h" line="45" column="1" bodyfile="/arrow/cpp/src/parquet/encryption.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1a4d90e7d201c4ddc81c98aa3c8f993c5b" prot="public" static="no">
        <type>::<ref refid="classarrow_1_1_key_value_metadata" kindref="compound">arrow::KeyValueMetadata</ref></type>
        <definition>using parquet::KeyValueMetadata = typedef ::arrow::KeyValueMetadata</definition>
        <argsstring></argsstring>
        <name>KeyValueMetadata</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/metadata.h" line="52" column="1" bodyfile="/arrow/cpp/src/parquet/metadata.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1abad5a6612a34e123346ad35eb4933d80" prot="public" static="no">
        <type>::<ref refid="classarrow_1_1_buffer" kindref="compound">arrow::Buffer</ref></type>
        <definition>using parquet::Buffer = typedef ::arrow::Buffer</definition>
        <argsstring></argsstring>
        <name>Buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/platform.h" line="94" column="1" bodyfile="/arrow/cpp/src/parquet/platform.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1a8a586e8fadc0656a031810b95028f652" prot="public" static="no">
        <type>::<ref refid="classarrow_1_1util_1_1_codec" kindref="compound">arrow::util::Codec</ref></type>
        <definition>using parquet::Codec = typedef ::arrow::util::Codec</definition>
        <argsstring></argsstring>
        <name>Codec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/platform.h" line="95" column="1" bodyfile="/arrow/cpp/src/parquet/platform.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1a934d98969b16e83c41bbeb08e2583a81" prot="public" static="no">
        <type>::<ref refid="structarrow_1_1_compression" kindref="compound">arrow::Compression</ref></type>
        <definition>using parquet::Compression = typedef ::arrow::Compression</definition>
        <argsstring></argsstring>
        <name>Compression</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/platform.h" line="96" column="1" bodyfile="/arrow/cpp/src/parquet/platform.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1a0d70b006a1f6feca958a1505b38a8cb7" prot="public" static="no">
        <type>::<ref refid="classarrow_1_1_memory_pool" kindref="compound">arrow::MemoryPool</ref></type>
        <definition>using parquet::MemoryPool = typedef ::arrow::MemoryPool</definition>
        <argsstring></argsstring>
        <name>MemoryPool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/platform.h" line="97" column="1" bodyfile="/arrow/cpp/src/parquet/platform.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1ace3d7b4a3efe54f6aff6b993d50fd139" prot="public" static="no">
        <type>::<ref refid="classarrow_1_1_mutable_buffer" kindref="compound">arrow::MutableBuffer</ref></type>
        <definition>using parquet::MutableBuffer = typedef ::arrow::MutableBuffer</definition>
        <argsstring></argsstring>
        <name>MutableBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/platform.h" line="98" column="1" bodyfile="/arrow/cpp/src/parquet/platform.h" bodystart="98" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1a1c3b994581f3fc6e9842eb902ef7916f" prot="public" static="no">
        <type>::<ref refid="classarrow_1_1_resizable_buffer" kindref="compound">arrow::ResizableBuffer</ref></type>
        <definition>typedef::arrow::ResizableBuffer parquet::ResizableBuffer</definition>
        <argsstring></argsstring>
        <name>ResizableBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/platform.h" line="99" column="1" bodyfile="/arrow/cpp/src/parquet/platform.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1ac4a49b5006dbb1a6699e48cd04a22dd0" prot="public" static="no">
        <type>::<ref refid="classarrow_1_1io_1_1_random_access_file" kindref="compound">arrow::io::RandomAccessFile</ref></type>
        <definition>using parquet::ArrowInputFile = typedef ::arrow::io::RandomAccessFile</definition>
        <argsstring></argsstring>
        <name>ArrowInputFile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/platform.h" line="101" column="1" bodyfile="/arrow/cpp/src/parquet/platform.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1a69cbbbff0bc1abb6d4e61f9762c86da7" prot="public" static="no">
        <type>::<ref refid="classarrow_1_1io_1_1_input_stream" kindref="compound">arrow::io::InputStream</ref></type>
        <definition>using parquet::ArrowInputStream = typedef ::arrow::io::InputStream</definition>
        <argsstring></argsstring>
        <name>ArrowInputStream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/platform.h" line="102" column="1" bodyfile="/arrow/cpp/src/parquet/platform.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1ad02e9bf40eaac38e07be6cc973d8884e" prot="public" static="no">
        <type>::<ref refid="classarrow_1_1io_1_1_output_stream" kindref="compound">arrow::io::OutputStream</ref></type>
        <definition>using parquet::ArrowOutputStream = typedef ::arrow::io::OutputStream</definition>
        <argsstring></argsstring>
        <name>ArrowOutputStream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/platform.h" line="103" column="1" bodyfile="/arrow/cpp/src/parquet/platform.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1af53c3c244055490d5dd385dd8a874540" prot="public" static="no">
        <type>::arrow::util::string_view</type>
        <definition>using parquet::string_view = typedef ::arrow::util::string_view</definition>
        <argsstring></argsstring>
        <name>string_view</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/platform.h" line="104" column="1" bodyfile="/arrow/cpp/src/parquet/platform.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1aa23357ecc438f090bf82390669b94c5f" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_statistics" kindref="compound">TypedStatistics</ref>&lt; <ref refid="namespaceparquet_1a60f6c016c8d8b612f78974bc516006b0" kindref="member">BooleanType</ref> &gt;</type>
        <definition>using parquet::BoolStatistics = typedef TypedStatistics&lt;BooleanType&gt;</definition>
        <argsstring></argsstring>
        <name>BoolStatistics</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/statistics.h" line="286" column="1" bodyfile="/arrow/cpp/src/parquet/statistics.h" bodystart="286" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1af1f4f67109349df380d7b7a32edb8aa4" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_statistics" kindref="compound">TypedStatistics</ref>&lt; <ref refid="namespaceparquet_1a7d7c12097fa34b9a73e9e5da3df62b17" kindref="member">Int32Type</ref> &gt;</type>
        <definition>using parquet::Int32Statistics = typedef TypedStatistics&lt;Int32Type&gt;</definition>
        <argsstring></argsstring>
        <name>Int32Statistics</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/statistics.h" line="287" column="1" bodyfile="/arrow/cpp/src/parquet/statistics.h" bodystart="287" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1ae643686a28f16b126068f8836d3e35a7" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_statistics" kindref="compound">TypedStatistics</ref>&lt; <ref refid="namespaceparquet_1aebf28a7ea170ee7e771b13b12d06f3cf" kindref="member">Int64Type</ref> &gt;</type>
        <definition>using parquet::Int64Statistics = typedef TypedStatistics&lt;Int64Type&gt;</definition>
        <argsstring></argsstring>
        <name>Int64Statistics</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/statistics.h" line="288" column="1" bodyfile="/arrow/cpp/src/parquet/statistics.h" bodystart="288" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1a17387ca1f476433e6d268dee8df77505" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_statistics" kindref="compound">TypedStatistics</ref>&lt; <ref refid="namespaceparquet_1a0ed420ee4d70b4f7e8c71a3b53beefe5" kindref="member">FloatType</ref> &gt;</type>
        <definition>using parquet::FloatStatistics = typedef TypedStatistics&lt;FloatType&gt;</definition>
        <argsstring></argsstring>
        <name>FloatStatistics</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/statistics.h" line="289" column="1" bodyfile="/arrow/cpp/src/parquet/statistics.h" bodystart="289" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1a385997f7bd1d8a7d1e2bc5f1a9e506ea" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_statistics" kindref="compound">TypedStatistics</ref>&lt; <ref refid="namespaceparquet_1ab8b1ae52fb8af689994a86814212a9cc" kindref="member">DoubleType</ref> &gt;</type>
        <definition>using parquet::DoubleStatistics = typedef TypedStatistics&lt;DoubleType&gt;</definition>
        <argsstring></argsstring>
        <name>DoubleStatistics</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/statistics.h" line="290" column="1" bodyfile="/arrow/cpp/src/parquet/statistics.h" bodystart="290" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1ac84036366e153fb83f9ce644b541c10f" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_statistics" kindref="compound">TypedStatistics</ref>&lt; <ref refid="namespaceparquet_1a1bb1f1bd7489144e704dd149df95ce83" kindref="member">ByteArrayType</ref> &gt;</type>
        <definition>using parquet::ByteArrayStatistics = typedef TypedStatistics&lt;ByteArrayType&gt;</definition>
        <argsstring></argsstring>
        <name>ByteArrayStatistics</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/statistics.h" line="291" column="1" bodyfile="/arrow/cpp/src/parquet/statistics.h" bodystart="291" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1a3a0b9aae383550a86bf46ede443e5f5d" prot="public" static="no">
        <type><ref refid="classparquet_1_1_typed_statistics" kindref="compound">TypedStatistics</ref>&lt; <ref refid="namespaceparquet_1a55abc780912f7bcf901d329dcad1093a" kindref="member">FLBAType</ref> &gt;</type>
        <definition>using parquet::FLBAStatistics = typedef TypedStatistics&lt;FLBAType&gt;</definition>
        <argsstring></argsstring>
        <name>FLBAStatistics</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/statistics.h" line="292" column="1" bodyfile="/arrow/cpp/src/parquet/statistics.h" bodystart="292" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1a84705fc892245d2e31b55c03fa6d5ddd" prot="public" static="no">
        <type>apache::thrift::transport::TMemoryBuffer</type>
        <definition>using parquet::ThriftBuffer = typedef apache::thrift::transport::TMemoryBuffer</definition>
        <argsstring></argsstring>
        <name>ThriftBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/thrift_internal.h" line="355" column="1" bodyfile="/arrow/cpp/src/parquet/thrift_internal.h" bodystart="355" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1a2d74e36d45a524fd793d9d9244024098" prot="public" static="no">
        <type><ref refid="structparquet_1_1_fixed_len_byte_array" kindref="compound">FixedLenByteArray</ref></type>
        <definition>using parquet::FLBA = typedef FixedLenByteArray</definition>
        <argsstring></argsstring>
        <name>FLBA</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="544" column="1" bodyfile="/arrow/cpp/src/parquet/types.h" bodystart="544" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1a60f6c016c8d8b612f78974bc516006b0" prot="public" static="no">
        <type><ref refid="structparquet_1_1_physical_type" kindref="compound">PhysicalType</ref>&lt; <ref refid="structparquet_1_1_type_1a2a4b0ad3da98a8a407a0dc3ecbf737caaf10bdd7a3befa2de2cbe27f412db38a1" kindref="member">Type::BOOLEAN</ref> &gt;</type>
        <definition>using parquet::BooleanType = typedef PhysicalType&lt;Type::BOOLEAN&gt;</definition>
        <argsstring></argsstring>
        <name>BooleanType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="672" column="1" bodyfile="/arrow/cpp/src/parquet/types.h" bodystart="672" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1a7d7c12097fa34b9a73e9e5da3df62b17" prot="public" static="no">
        <type><ref refid="structparquet_1_1_physical_type" kindref="compound">PhysicalType</ref>&lt; <ref refid="structparquet_1_1_type_1a2a4b0ad3da98a8a407a0dc3ecbf737caad2453f2429b067fd1a780db705c54c32" kindref="member">Type::INT32</ref> &gt;</type>
        <definition>using parquet::Int32Type = typedef PhysicalType&lt;Type::INT32&gt;</definition>
        <argsstring></argsstring>
        <name>Int32Type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="673" column="1" bodyfile="/arrow/cpp/src/parquet/types.h" bodystart="673" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1aebf28a7ea170ee7e771b13b12d06f3cf" prot="public" static="no">
        <type><ref refid="structparquet_1_1_physical_type" kindref="compound">PhysicalType</ref>&lt; <ref refid="structparquet_1_1_type_1a2a4b0ad3da98a8a407a0dc3ecbf737caa6624fc10f52222e9c3313bc2c80419ca" kindref="member">Type::INT64</ref> &gt;</type>
        <definition>using parquet::Int64Type = typedef PhysicalType&lt;Type::INT64&gt;</definition>
        <argsstring></argsstring>
        <name>Int64Type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="674" column="1" bodyfile="/arrow/cpp/src/parquet/types.h" bodystart="674" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1ac52f5e8342ad62c5a982888bb08cecc4" prot="public" static="no">
        <type><ref refid="structparquet_1_1_physical_type" kindref="compound">PhysicalType</ref>&lt; <ref refid="structparquet_1_1_type_1a2a4b0ad3da98a8a407a0dc3ecbf737caaf03b1d3e53cf8f0c13d3488ed2231a38" kindref="member">Type::INT96</ref> &gt;</type>
        <definition>using parquet::Int96Type = typedef PhysicalType&lt;Type::INT96&gt;</definition>
        <argsstring></argsstring>
        <name>Int96Type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="675" column="1" bodyfile="/arrow/cpp/src/parquet/types.h" bodystart="675" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1a0ed420ee4d70b4f7e8c71a3b53beefe5" prot="public" static="no">
        <type><ref refid="structparquet_1_1_physical_type" kindref="compound">PhysicalType</ref>&lt; <ref refid="structparquet_1_1_type_1a2a4b0ad3da98a8a407a0dc3ecbf737caaff7e2e6530a5789ad552dd9c9a05d612" kindref="member">Type::FLOAT</ref> &gt;</type>
        <definition>using parquet::FloatType = typedef PhysicalType&lt;Type::FLOAT&gt;</definition>
        <argsstring></argsstring>
        <name>FloatType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="676" column="1" bodyfile="/arrow/cpp/src/parquet/types.h" bodystart="676" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1ab8b1ae52fb8af689994a86814212a9cc" prot="public" static="no">
        <type><ref refid="structparquet_1_1_physical_type" kindref="compound">PhysicalType</ref>&lt; <ref refid="structparquet_1_1_type_1a2a4b0ad3da98a8a407a0dc3ecbf737caa8962d0622821a3d39559583f5903caa0" kindref="member">Type::DOUBLE</ref> &gt;</type>
        <definition>using parquet::DoubleType = typedef PhysicalType&lt;Type::DOUBLE&gt;</definition>
        <argsstring></argsstring>
        <name>DoubleType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="677" column="1" bodyfile="/arrow/cpp/src/parquet/types.h" bodystart="677" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1a1bb1f1bd7489144e704dd149df95ce83" prot="public" static="no">
        <type><ref refid="structparquet_1_1_physical_type" kindref="compound">PhysicalType</ref>&lt; <ref refid="structparquet_1_1_type_1a2a4b0ad3da98a8a407a0dc3ecbf737caa2cf4d5ec16f3a1807713b881582b2bc0" kindref="member">Type::BYTE_ARRAY</ref> &gt;</type>
        <definition>using parquet::ByteArrayType = typedef PhysicalType&lt;Type::BYTE_ARRAY&gt;</definition>
        <argsstring></argsstring>
        <name>ByteArrayType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="678" column="1" bodyfile="/arrow/cpp/src/parquet/types.h" bodystart="678" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceparquet_1a55abc780912f7bcf901d329dcad1093a" prot="public" static="no">
        <type><ref refid="structparquet_1_1_physical_type" kindref="compound">PhysicalType</ref>&lt; <ref refid="structparquet_1_1_type_1a2a4b0ad3da98a8a407a0dc3ecbf737caa1f6918fb61821465548fe8604d59e73a" kindref="member">Type::FIXED_LEN_BYTE_ARRAY</ref> &gt;</type>
        <definition>using parquet::FLBAType = typedef PhysicalType&lt;Type::FIXED_LEN_BYTE_ARRAY&gt;</definition>
        <argsstring></argsstring>
        <name>FLBAType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="679" column="1" bodyfile="/arrow/cpp/src/parquet/types.h" bodystart="679" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceparquet_1a5c138f5307aecdd48ab16366dab3dcc0" prot="public" static="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t parquet::kDefaultMaxPageHeaderSize</definition>
        <argsstring></argsstring>
        <name>kDefaultMaxPageHeaderSize</name>
        <initializer>= 16 * 1024 * 1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/column_reader.h" line="51" column="1" bodyfile="/arrow/cpp/src/parquet/column_reader.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceparquet_1ae34b1d0a8dbd382f1d0539c4a4bea7ed" prot="public" static="yes" mutable="no">
        <type>constexpr uint32_t</type>
        <definition>constexpr uint32_t parquet::kDefaultPageHeaderSize</definition>
        <argsstring></argsstring>
        <name>kDefaultPageHeaderSize</name>
        <initializer>= 16 * 1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/column_reader.h" line="54" column="1" bodyfile="/arrow/cpp/src/parquet/column_reader.h" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceparquet_1ac87f5b3d16711792eef8ceebe3e4da1b" prot="public" static="yes" mutable="no">
        <type>constexpr int64_t</type>
        <definition>constexpr int64_t parquet::DEFAULT_SCANNER_BATCH_SIZE</definition>
        <argsstring></argsstring>
        <name>DEFAULT_SCANNER_BATCH_SIZE</name>
        <initializer>= 128</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/column_scanner.h" line="37" column="1" bodyfile="/arrow/cpp/src/parquet/column_scanner.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceparquet_1a8822d592db4c9bae59afc68a9db9428d" prot="public" static="yes" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int parquet::WRITE_BATCH_SIZE</definition>
        <argsstring></argsstring>
        <name>WRITE_BATCH_SIZE</name>
        <initializer>= 1000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/column_writer.h" line="109" column="1" bodyfile="/arrow/cpp/src/parquet/column_writer.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceparquet_1abddfcb1792a2f4a0b3c4c311f54442b2" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="structparquet_1_1_parquet_cipher_1a8ee1fdd51aecc2c2100a0bd99b5bca4b" kindref="member">ParquetCipher::type</ref></type>
        <definition>constexpr ParquetCipher::type parquet::kDefaultEncryptionAlgorithm</definition>
        <argsstring></argsstring>
        <name>kDefaultEncryptionAlgorithm</name>
        <initializer>=
    <ref refid="structparquet_1_1_parquet_cipher_1a8ee1fdd51aecc2c2100a0bd99b5bca4baf9ba0070ca729bff7c232e3ba5959d2a" kindref="member">ParquetCipher::AES_GCM_V1</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encryption.h" line="32" column="1" bodyfile="/arrow/cpp/src/parquet/encryption.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceparquet_1a63208aaa13c696783974783f0a69b6a2" prot="public" static="yes" mutable="no">
        <type>constexpr int32_t</type>
        <definition>constexpr int32_t parquet::kMaximalAadMetadataLength</definition>
        <argsstring></argsstring>
        <name>kMaximalAadMetadataLength</name>
        <initializer>= 256</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encryption.h" line="34" column="1" bodyfile="/arrow/cpp/src/parquet/encryption.h" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceparquet_1a0aa953c20c2868de21416198d01bfdcf" prot="public" static="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool parquet::kDefaultEncryptedFooter</definition>
        <argsstring></argsstring>
        <name>kDefaultEncryptedFooter</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encryption.h" line="35" column="1" bodyfile="/arrow/cpp/src/parquet/encryption.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceparquet_1a967de285c2ccb1e8a11496477ac5bff5" prot="public" static="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool parquet::kDefaultCheckSignature</definition>
        <argsstring></argsstring>
        <name>kDefaultCheckSignature</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encryption.h" line="36" column="1" bodyfile="/arrow/cpp/src/parquet/encryption.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceparquet_1a1f377bfd437b47a0001c955bbbe998f5" prot="public" static="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool parquet::kDefaultAllowPlaintextFiles</definition>
        <argsstring></argsstring>
        <name>kDefaultAllowPlaintextFiles</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encryption.h" line="37" column="1" bodyfile="/arrow/cpp/src/parquet/encryption.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceparquet_1a867ed8075e162e9eac1c04dcb860a6e7" prot="public" static="yes" mutable="no">
        <type>constexpr int32_t</type>
        <definition>constexpr int32_t parquet::kAadFileUniqueLength</definition>
        <argsstring></argsstring>
        <name>kAadFileUniqueLength</name>
        <initializer>= 8</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encryption.h" line="38" column="1" bodyfile="/arrow/cpp/src/parquet/encryption.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceparquet_1ab2a09b6b6ab8a98aa893e49c4e865e4a" prot="public" static="yes" mutable="no">
        <type>constexpr uint8_t</type>
        <definition>constexpr uint8_t parquet::kParquetMagic[4]</definition>
        <argsstring>[4]</argsstring>
        <name>kParquetMagic</name>
        <initializer>= {&apos;P&apos;, &apos;A&apos;, &apos;R&apos;, &apos;1&apos;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/file_writer.h" line="35" column="1" bodyfile="/arrow/cpp/src/parquet/file_writer.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceparquet_1a5308e6aa78f23be13f0c5a820cfc0486" prot="public" static="yes" mutable="no">
        <type>constexpr uint8_t</type>
        <definition>constexpr uint8_t parquet::kParquetEMagic[4]</definition>
        <argsstring>[4]</argsstring>
        <name>kParquetEMagic</name>
        <initializer>= {&apos;P&apos;, &apos;A&apos;, &apos;R&apos;, &apos;E&apos;}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/file_writer.h" line="36" column="1" bodyfile="/arrow/cpp/src/parquet/file_writer.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceparquet_1ae1201ffc4e8d8211aeea9ce8ce2c8b76" prot="public" static="no" mutable="no">
        <type>constexpr int64_t</type>
        <definition>constexpr int64_t parquet::kDefaultOutputStreamSize</definition>
        <argsstring></argsstring>
        <name>kDefaultOutputStreamSize</name>
        <initializer>= 1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/platform.h" line="106" column="1" bodyfile="/arrow/cpp/src/parquet/platform.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceparquet_1a0cbfb03935d2b276824d8144216cff8b" prot="public" static="no" mutable="no">
        <type>constexpr int16_t</type>
        <definition>constexpr int16_t parquet::kNonPageOrdinal</definition>
        <argsstring></argsstring>
        <name>kNonPageOrdinal</name>
        <initializer>= static_cast&lt;int16_t&gt;(-1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/platform.h" line="108" column="1" bodyfile="/arrow/cpp/src/parquet/platform.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceparquet_1a474e1f022fe5b9bdbe9c1e9f5cdddd00" prot="public" static="yes" mutable="no">
        <type>int64_t</type>
        <definition>int64_t parquet::DEFAULT_BUFFER_SIZE</definition>
        <argsstring></argsstring>
        <name>DEFAULT_BUFFER_SIZE</name>
        <initializer>= 1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/properties.h" line="61" column="1" bodyfile="/arrow/cpp/src/parquet/properties.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceparquet_1a17cb285aa6c3fb10b36c627ce788dc1f" prot="public" static="yes" mutable="no">
        <type>bool</type>
        <definition>bool parquet::DEFAULT_USE_BUFFERED_STREAM</definition>
        <argsstring></argsstring>
        <name>DEFAULT_USE_BUFFERED_STREAM</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/properties.h" line="62" column="1" bodyfile="/arrow/cpp/src/parquet/properties.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceparquet_1a443528fd64fd610eeafc0ed8abcdf100" prot="public" static="yes" mutable="no">
        <type>constexpr int64_t</type>
        <definition>constexpr int64_t parquet::kDefaultDataPageSize</definition>
        <argsstring></argsstring>
        <name>kDefaultDataPageSize</name>
        <initializer>= 1024 * 1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/properties.h" line="104" column="1" bodyfile="/arrow/cpp/src/parquet/properties.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceparquet_1a8b59d3cab2ceaf9bf58a1dca85155933" prot="public" static="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool parquet::DEFAULT_IS_DICTIONARY_ENABLED</definition>
        <argsstring></argsstring>
        <name>DEFAULT_IS_DICTIONARY_ENABLED</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/properties.h" line="105" column="1" bodyfile="/arrow/cpp/src/parquet/properties.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceparquet_1ac7f196fef70fe2f50f4a79e8008f8d69" prot="public" static="yes" mutable="no">
        <type>constexpr int64_t</type>
        <definition>constexpr int64_t parquet::DEFAULT_DICTIONARY_PAGE_SIZE_LIMIT</definition>
        <argsstring></argsstring>
        <name>DEFAULT_DICTIONARY_PAGE_SIZE_LIMIT</name>
        <initializer>= kDefaultDataPageSize</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/properties.h" line="106" column="1" bodyfile="/arrow/cpp/src/parquet/properties.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceparquet_1a5689e243119a2690a8f1c69efea40a31" prot="public" static="yes" mutable="no">
        <type>constexpr int64_t</type>
        <definition>constexpr int64_t parquet::DEFAULT_WRITE_BATCH_SIZE</definition>
        <argsstring></argsstring>
        <name>DEFAULT_WRITE_BATCH_SIZE</name>
        <initializer>= 1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/properties.h" line="107" column="1" bodyfile="/arrow/cpp/src/parquet/properties.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceparquet_1a2940b888f244348c718faa33db3f4df1" prot="public" static="yes" mutable="no">
        <type>constexpr int64_t</type>
        <definition>constexpr int64_t parquet::DEFAULT_MAX_ROW_GROUP_LENGTH</definition>
        <argsstring></argsstring>
        <name>DEFAULT_MAX_ROW_GROUP_LENGTH</name>
        <initializer>= 64 * 1024 * 1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/properties.h" line="108" column="1" bodyfile="/arrow/cpp/src/parquet/properties.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceparquet_1aa71173133867eac3405fb0a062c22243" prot="public" static="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool parquet::DEFAULT_ARE_STATISTICS_ENABLED</definition>
        <argsstring></argsstring>
        <name>DEFAULT_ARE_STATISTICS_ENABLED</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/properties.h" line="109" column="1" bodyfile="/arrow/cpp/src/parquet/properties.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceparquet_1afa767c3029d81f16f83f34bc70fe0e5f" prot="public" static="yes" mutable="no">
        <type>constexpr int64_t</type>
        <definition>constexpr int64_t parquet::DEFAULT_MAX_STATISTICS_SIZE</definition>
        <argsstring></argsstring>
        <name>DEFAULT_MAX_STATISTICS_SIZE</name>
        <initializer>= 4096</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/properties.h" line="110" column="1" bodyfile="/arrow/cpp/src/parquet/properties.h" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceparquet_1aa89dab6d406e7d2d01bb97d27870ed8d" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="structparquet_1_1_encoding_1acd287bb69df941fa0e27dd594462f27e" kindref="member">Encoding::type</ref></type>
        <definition>constexpr Encoding::type parquet::DEFAULT_ENCODING</definition>
        <argsstring></argsstring>
        <name>DEFAULT_ENCODING</name>
        <initializer>= <ref refid="structparquet_1_1_encoding_1acd287bb69df941fa0e27dd594462f27ea2cb5b7729ec2667147b4e1c9175b008b" kindref="member">Encoding::PLAIN</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/properties.h" line="111" column="1" bodyfile="/arrow/cpp/src/parquet/properties.h" bodystart="111" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceparquet_1a4eccb0328a708c366dee334696b0ce22" prot="public" static="yes" mutable="no">
        <type>const char</type>
        <definition>const char parquet::DEFAULT_CREATED_BY[]</definition>
        <argsstring>[]</argsstring>
        <name>DEFAULT_CREATED_BY</name>
        <initializer>= CREATED_BY_VERSION</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/properties.h" line="112" column="1" bodyfile="/arrow/cpp/src/parquet/properties.h" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceparquet_1ae99e1ddfc7213cb28b1e5a1789def5f7" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="structarrow_1_1_compression_1a8abcec0357242c077a2905d645f2163f" kindref="member">Compression::type</ref></type>
        <definition>constexpr Compression::type parquet::DEFAULT_COMPRESSION_TYPE</definition>
        <argsstring></argsstring>
        <name>DEFAULT_COMPRESSION_TYPE</name>
        <initializer>= <ref refid="structarrow_1_1_compression_1a8abcec0357242c077a2905d645f2163faaeba5020cda7bd5be9f453fcbdba7eb9" kindref="member">Compression::UNCOMPRESSED</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/properties.h" line="113" column="1" bodyfile="/arrow/cpp/src/parquet/properties.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceparquet_1a05a4e2c204580d086a6bb86c77ccc60d" prot="public" static="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool parquet::kArrowDefaultUseThreads</definition>
        <argsstring></argsstring>
        <name>kArrowDefaultUseThreads</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/properties.h" line="564" column="1" bodyfile="/arrow/cpp/src/parquet/properties.h" bodystart="564" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceparquet_1a814a5064ffacc41d1b431ffe90b5770f" prot="public" static="yes" mutable="no">
        <type>constexpr int64_t</type>
        <definition>constexpr int64_t parquet::kArrowDefaultBatchSize</definition>
        <argsstring></argsstring>
        <name>kArrowDefaultBatchSize</name>
        <initializer>= 64 * 1024</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/properties.h" line="567" column="1" bodyfile="/arrow/cpp/src/parquet/properties.h" bodystart="567" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceparquet_1a76c9e49e2e8766e8f92178b809905fae" prot="public" static="no" mutable="no">
        <type>constexpr <ref refid="structparquet_1_1_end_row_type" kindref="compound">EndRowType</ref></type>
        <definition>constexpr EndRowType parquet::EndRow</definition>
        <argsstring></argsstring>
        <name>EndRow</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="232" column="1" bodyfile="/arrow/cpp/src/parquet/stream_writer.h" bodystart="232" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceparquet_1a9828e2fc3417f551d1f883e93d0977a8" prot="public" static="no" mutable="no">
        <type>constexpr <ref refid="structparquet_1_1_end_row_group_type" kindref="compound">EndRowGroupType</ref></type>
        <definition>constexpr EndRowGroupType parquet::EndRowGroup</definition>
        <argsstring></argsstring>
        <name>EndRowGroup</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="235" column="1" bodyfile="/arrow/cpp/src/parquet/stream_writer.h" bodystart="235" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceparquet_1a75b25f2cf338e7b5a8a2d6b9df392d34" prot="public" static="no" mutable="no">
        <type>constexpr int64_t</type>
        <definition>constexpr int64_t parquet::kJulianToUnixEpochDays</definition>
        <argsstring></argsstring>
        <name>kJulianToUnixEpochDays</name>
        <initializer>= INT64_C(2440588)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="553" column="1" bodyfile="/arrow/cpp/src/parquet/types.h" bodystart="553" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceparquet_1a9b5411ef81bd088778846224b68d5ca5" prot="public" static="no" mutable="no">
        <type>constexpr int64_t</type>
        <definition>constexpr int64_t parquet::kSecondsPerDay</definition>
        <argsstring></argsstring>
        <name>kSecondsPerDay</name>
        <initializer>= INT64_C(60 * 60 * 24)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="554" column="1" bodyfile="/arrow/cpp/src/parquet/types.h" bodystart="554" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceparquet_1a29ecfcfdbaabf31e4a9e5cfbd0be6da8" prot="public" static="no" mutable="no">
        <type>constexpr int64_t</type>
        <definition>constexpr int64_t parquet::kMillisecondsPerDay</definition>
        <argsstring></argsstring>
        <name>kMillisecondsPerDay</name>
        <initializer>= <ref refid="namespaceparquet_1a9b5411ef81bd088778846224b68d5ca5" kindref="member">kSecondsPerDay</ref> * INT64_C(1000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="555" column="1" bodyfile="/arrow/cpp/src/parquet/types.h" bodystart="555" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceparquet_1af94ee44678fbba3d02ed26713a5e6a95" prot="public" static="no" mutable="no">
        <type>constexpr int64_t</type>
        <definition>constexpr int64_t parquet::kMicrosecondsPerDay</definition>
        <argsstring></argsstring>
        <name>kMicrosecondsPerDay</name>
        <initializer>= <ref refid="namespaceparquet_1a29ecfcfdbaabf31e4a9e5cfbd0be6da8" kindref="member">kMillisecondsPerDay</ref> * INT64_C(1000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="556" column="1" bodyfile="/arrow/cpp/src/parquet/types.h" bodystart="556" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceparquet_1a622b12209f62b8e06ed2e17f1e51730e" prot="public" static="no" mutable="no">
        <type>constexpr int64_t</type>
        <definition>constexpr int64_t parquet::kNanosecondsPerDay</definition>
        <argsstring></argsstring>
        <name>kNanosecondsPerDay</name>
        <initializer>= <ref refid="namespaceparquet_1af94ee44678fbba3d02ed26713a5e6a95" kindref="member">kMicrosecondsPerDay</ref> * INT64_C(1000)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="557" column="1" bodyfile="/arrow/cpp/src/parquet/types.h" bodystart="557" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceparquet_1aa6d11b4fbf0b1d22067c026fd55985f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename RType</type>
          </param>
        </templateparamlist>
        <type>int64_t</type>
        <definition>int64_t parquet::ScanAll</definition>
        <argsstring>(int32_t batch_size, int16_t *def_levels, int16_t *rep_levels, uint8_t *values, int64_t *values_buffered, parquet::ColumnReader *reader)</argsstring>
        <name>ScanAll</name>
        <param>
          <type>int32_t</type>
          <declname>batch_size</declname>
        </param>
        <param>
          <type>int16_t *</type>
          <declname>def_levels</declname>
        </param>
        <param>
          <type>int16_t *</type>
          <declname>rep_levels</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>values</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>values_buffered</declname>
        </param>
        <param>
          <type><ref refid="classparquet_1_1_column_reader" kindref="compound">parquet::ColumnReader</ref> *</type>
          <declname>reader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/column_scanner.h" line="247" column="1" bodyfile="/arrow/cpp/src/parquet/column_scanner.h" bodystart="247" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a765eefa142de9fdfba82f0e61acb3fe0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t parquet::ScanAllValues</definition>
        <argsstring>(int32_t batch_size, int16_t *def_levels, int16_t *rep_levels, uint8_t *values, int64_t *values_buffered, parquet::ColumnReader *reader)</argsstring>
        <name>ScanAllValues</name>
        <param>
          <type>int32_t</type>
          <declname>batch_size</declname>
        </param>
        <param>
          <type>int16_t *</type>
          <declname>def_levels</declname>
        </param>
        <param>
          <type>int16_t *</type>
          <declname>rep_levels</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>values</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>values_buffered</declname>
        </param>
        <param>
          <type><ref refid="classparquet_1_1_column_reader" kindref="compound">parquet::ColumnReader</ref> *</type>
          <declname>reader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/column_scanner.h" line="257" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1ac80523bc55f27d6cebf30524c65b947d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classparquet_1_1_encoder" kindref="compound">Encoder</ref> &gt;</type>
        <definition>std::unique_ptr&lt;Encoder&gt; parquet::MakeEncoder</definition>
        <argsstring>(Type::type type_num, Encoding::type encoding, bool use_dictionary=false, const ColumnDescriptor *descr=NULLPTR, ::arrow::MemoryPool *pool=::arrow::default_memory_pool())</argsstring>
        <name>MakeEncoder</name>
        <param>
          <type><ref refid="structparquet_1_1_type_1a2a4b0ad3da98a8a407a0dc3ecbf737ca" kindref="member">Type::type</ref></type>
          <declname>type_num</declname>
        </param>
        <param>
          <type><ref refid="structparquet_1_1_encoding_1acd287bb69df941fa0e27dd594462f27e" kindref="member">Encoding::type</ref></type>
          <declname>encoding</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_dictionary</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const <ref refid="classparquet_1_1_column_descriptor" kindref="compound">ColumnDescriptor</ref> *</type>
          <declname>descr</declname>
          <defval><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></defval>
        </param>
        <param>
          <type>::<ref refid="classarrow_1_1_memory_pool" kindref="compound">arrow::MemoryPool</ref> *</type>
          <declname>pool</declname>
          <defval>::<ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">arrow::default_memory_pool</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encoding.h" line="409" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1aba723e6ed9fb8b554755c78ae100b818" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DType</type>
          </param>
        </templateparamlist>
        <type>std::unique_ptr&lt; typename <ref refid="structparquet_1_1_encoding_traits" kindref="compound">EncodingTraits</ref>&lt; DType &gt;::<ref refid="classparquet_1_1_encoder" kindref="compound">Encoder</ref> &gt;</type>
        <definition>std::unique_ptr&lt;typename EncodingTraits&lt;DType&gt;::Encoder&gt; parquet::MakeTypedEncoder</definition>
        <argsstring>(Encoding::type encoding, bool use_dictionary=false, const ColumnDescriptor *descr=NULLPTR, ::arrow::MemoryPool *pool=::arrow::default_memory_pool())</argsstring>
        <name>MakeTypedEncoder</name>
        <param>
          <type><ref refid="structparquet_1_1_encoding_1acd287bb69df941fa0e27dd594462f27e" kindref="member">Encoding::type</ref></type>
          <declname>encoding</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>use_dictionary</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>const <ref refid="classparquet_1_1_column_descriptor" kindref="compound">ColumnDescriptor</ref> *</type>
          <declname>descr</declname>
          <defval><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></defval>
        </param>
        <param>
          <type>::<ref refid="classarrow_1_1_memory_pool" kindref="compound">arrow::MemoryPool</ref> *</type>
          <declname>pool</declname>
          <defval>::<ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">arrow::default_memory_pool</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encoding.h" line="415" column="1" bodyfile="/arrow/cpp/src/parquet/encoding.h" bodystart="415" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a687cb786ecba50e5a43504731bd4b039" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classparquet_1_1_decoder" kindref="compound">Decoder</ref> &gt;</type>
        <definition>std::unique_ptr&lt;Decoder&gt; parquet::MakeDecoder</definition>
        <argsstring>(Type::type type_num, Encoding::type encoding, const ColumnDescriptor *descr=NULLPTR)</argsstring>
        <name>MakeDecoder</name>
        <param>
          <type><ref refid="structparquet_1_1_type_1a2a4b0ad3da98a8a407a0dc3ecbf737ca" kindref="member">Type::type</ref></type>
          <declname>type_num</declname>
        </param>
        <param>
          <type><ref refid="structparquet_1_1_encoding_1acd287bb69df941fa0e27dd594462f27e" kindref="member">Encoding::type</ref></type>
          <declname>encoding</declname>
        </param>
        <param>
          <type>const <ref refid="classparquet_1_1_column_descriptor" kindref="compound">ColumnDescriptor</ref> *</type>
          <declname>descr</declname>
          <defval><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encoding.h" line="426" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a4eab5d98061ee1636de7bfd5f9ee4657" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DType</type>
          </param>
        </templateparamlist>
        <type>std::unique_ptr&lt; <ref refid="classparquet_1_1_dict_decoder" kindref="compound">DictDecoder</ref>&lt; DType &gt; &gt;</type>
        <definition>std::unique_ptr&lt;DictDecoder&lt;DType&gt; &gt; parquet::MakeDictDecoder</definition>
        <argsstring>(const ColumnDescriptor *descr=NULLPTR, ::arrow::MemoryPool *pool=::arrow::default_memory_pool())</argsstring>
        <name>MakeDictDecoder</name>
        <param>
          <type>const <ref refid="classparquet_1_1_column_descriptor" kindref="compound">ColumnDescriptor</ref> *</type>
          <declname>descr</declname>
          <defval><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></defval>
        </param>
        <param>
          <type>::<ref refid="classarrow_1_1_memory_pool" kindref="compound">arrow::MemoryPool</ref> *</type>
          <declname>pool</declname>
          <defval>::<ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">arrow::default_memory_pool</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encoding.h" line="439" column="1" bodyfile="/arrow/cpp/src/parquet/encoding.h" bodystart="439" bodyend="445"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1ac251694ef36decff224c5f8610de1f62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DType</type>
          </param>
        </templateparamlist>
        <type>std::unique_ptr&lt; typename <ref refid="structparquet_1_1_encoding_traits" kindref="compound">EncodingTraits</ref>&lt; DType &gt;::<ref refid="classparquet_1_1_decoder" kindref="compound">Decoder</ref> &gt;</type>
        <definition>std::unique_ptr&lt;typename EncodingTraits&lt;DType&gt;::Decoder&gt; parquet::MakeTypedDecoder</definition>
        <argsstring>(Encoding::type encoding, const ColumnDescriptor *descr=NULLPTR)</argsstring>
        <name>MakeTypedDecoder</name>
        <param>
          <type><ref refid="structparquet_1_1_encoding_1acd287bb69df941fa0e27dd594462f27e" kindref="member">Encoding::type</ref></type>
          <declname>encoding</declname>
        </param>
        <param>
          <type>const <ref refid="classparquet_1_1_column_descriptor" kindref="compound">ColumnDescriptor</ref> *</type>
          <declname>descr</declname>
          <defval><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encoding.h" line="448" column="1" bodyfile="/arrow/cpp/src/parquet/encoding.h" bodystart="448" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a560c17a23c0104d301cf279f8d8022ed" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const uint8_t *</type>
        <definition>const uint8_t* parquet::str2bytes</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>str2bytes</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/encryption.h" line="86" column="1" bodyfile="/arrow/cpp/src/parquet/encryption.h" bodystart="86" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1ab13db6e2f8e95ded0be7b20642be2c36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename StatusReturnBlock</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void parquet::ThrowNotOk</definition>
        <argsstring>(StatusReturnBlock &amp;&amp;b)</argsstring>
        <name>ThrowNotOk</name>
        <param>
          <type>StatusReturnBlock &amp;&amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/exception.h" line="131" column="1" bodyfile="/arrow/cpp/src/parquet/exception.h" bodystart="131" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a59c6380860288f1d54b0bb010ec9ba1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classparquet_1_1_file_meta_data" kindref="compound">FileMetaData</ref> &gt;</type>
        <definition>std::shared_ptr&lt;FileMetaData&gt; parquet::ReadMetaData</definition>
        <argsstring>(const std::shared_ptr&lt;::arrow::io::RandomAccessFile &gt; &amp;source)</argsstring>
        <name>ReadMetaData</name>
        <param>
          <type>const std::shared_ptr&lt;::<ref refid="classarrow_1_1io_1_1_random_access_file" kindref="compound">arrow::io::RandomAccessFile</ref> &gt; &amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/file_reader.h" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a1842f7a34dac6dc1d0b95aec9de0b89a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t parquet::ScanFileContents</definition>
        <argsstring>(std::vector&lt; int &gt; columns, const int32_t column_batch_size, ParquetFileReader *reader)</argsstring>
        <name>ScanFileContents</name>
        <param>
          <type>std::vector&lt; int &gt;</type>
          <declname>columns</declname>
        </param>
        <param>
          <type>const int32_t</type>
          <declname>column_batch_size</declname>
        </param>
        <param>
          <type><ref refid="classparquet_1_1_parquet_file_reader" kindref="compound">ParquetFileReader</ref> *</type>
          <declname>reader</declname>
        </param>
        <briefdescription>
<para>Scan all values in file. </para>        </briefdescription>
        <detaileddescription>
<para>Useful for performance testing <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">columns</parametername>
</parameternamelist>
<parameterdescription>
<para>the column numbers to scan. If empty scans all </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">column_batch_size</parametername>
</parameternamelist>
<parameterdescription>
<para>number of values to read at a time when scanning column </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reader</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classparquet_1_1_parquet_file_reader" kindref="compound">ParquetFileReader</ref> instance </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of semantic rows in file </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/file_reader.h" line="135" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a57b261cad5f920e88bd85d8e34ad1030" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parquet::WriteFileMetaData</definition>
        <argsstring>(const FileMetaData &amp;file_metadata, OutputStream *sink)</argsstring>
        <name>WriteFileMetaData</name>
        <param>
          <type>const <ref refid="classparquet_1_1_file_meta_data" kindref="compound">FileMetaData</ref> &amp;</type>
          <declname>file_metadata</declname>
        </param>
        <param>
          <type><ref refid="classparquet_1_1_output_stream" kindref="compound">OutputStream</ref> *</type>
          <declname>sink</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/file_writer.h" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1aa0178647e8436d263263c8b85f5a45c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parquet::WriteFileMetaData</definition>
        <argsstring>(const FileMetaData &amp;file_metadata, ::arrow::io::OutputStream *sink)</argsstring>
        <name>WriteFileMetaData</name>
        <param>
          <type>const <ref refid="classparquet_1_1_file_meta_data" kindref="compound">FileMetaData</ref> &amp;</type>
          <declname>file_metadata</declname>
        </param>
        <param>
          <type>::<ref refid="classarrow_1_1io_1_1_output_stream" kindref="compound">arrow::io::OutputStream</ref> *</type>
          <declname>sink</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/file_writer.h" line="105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a0b461d1852709ff741245a5ebb835be8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parquet::WriteMetaDataFile</definition>
        <argsstring>(const FileMetaData &amp;file_metadata, ::arrow::io::OutputStream *sink)</argsstring>
        <name>WriteMetaDataFile</name>
        <param>
          <type>const <ref refid="classparquet_1_1_file_meta_data" kindref="compound">FileMetaData</ref> &amp;</type>
          <declname>file_metadata</declname>
        </param>
        <param>
          <type>::<ref refid="classarrow_1_1io_1_1_output_stream" kindref="compound">arrow::io::OutputStream</ref> *</type>
          <declname>sink</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/file_writer.h" line="109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1acdaa8a86011c53ba04d182f8d335e518" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parquet::WriteEncryptedFileMetadata</definition>
        <argsstring>(const FileMetaData &amp;file_metadata, ArrowOutputStream *sink, const std::shared_ptr&lt; Encryptor &gt; &amp;encryptor, bool encrypt_footer)</argsstring>
        <name>WriteEncryptedFileMetadata</name>
        <param>
          <type>const <ref refid="classparquet_1_1_file_meta_data" kindref="compound">FileMetaData</ref> &amp;</type>
          <declname>file_metadata</declname>
        </param>
        <param>
          <type><ref refid="namespaceparquet_1ad02e9bf40eaac38e07be6cc973d8884e" kindref="member">ArrowOutputStream</ref> *</type>
          <declname>sink</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classparquet_1_1_encryptor" kindref="compound">Encryptor</ref> &gt; &amp;</type>
          <declname>encryptor</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>encrypt_footer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/file_writer.h" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a85751b111c66cba911aff15ab894d495" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parquet::WriteFileCryptoMetaData</definition>
        <argsstring>(const FileCryptoMetaData &amp;crypto_metadata, OutputStream *sink)</argsstring>
        <name>WriteFileCryptoMetaData</name>
        <param>
          <type>const <ref refid="classparquet_1_1_file_crypto_meta_data" kindref="compound">FileCryptoMetaData</ref> &amp;</type>
          <declname>crypto_metadata</declname>
        </param>
        <param>
          <type><ref refid="classparquet_1_1_output_stream" kindref="compound">OutputStream</ref> *</type>
          <declname>sink</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/file_writer.h" line="118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1aba291b8009be3d036165f45096f98ceb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parquet::WriteEncryptedFileMetadata</definition>
        <argsstring>(const FileMetaData &amp;file_metadata, ::arrow::io::OutputStream *sink, const std::shared_ptr&lt; Encryptor &gt; &amp;encryptor=NULLPTR, bool encrypt_footer=false)</argsstring>
        <name>WriteEncryptedFileMetadata</name>
        <param>
          <type>const <ref refid="classparquet_1_1_file_meta_data" kindref="compound">FileMetaData</ref> &amp;</type>
          <declname>file_metadata</declname>
        </param>
        <param>
          <type>::<ref refid="classarrow_1_1io_1_1_output_stream" kindref="compound">arrow::io::OutputStream</ref> *</type>
          <declname>sink</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classparquet_1_1_encryptor" kindref="compound">Encryptor</ref> &gt; &amp;</type>
          <declname>encryptor</declname>
          <defval><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></defval>
        </param>
        <param>
          <type>bool</type>
          <declname>encrypt_footer</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/file_writer.h" line="121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a380ce3687566b0f919ac40bedb19d878" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parquet::WriteFileCryptoMetaData</definition>
        <argsstring>(const FileCryptoMetaData &amp;crypto_metadata, ::arrow::io::OutputStream *sink)</argsstring>
        <name>WriteFileCryptoMetaData</name>
        <param>
          <type>const <ref refid="classparquet_1_1_file_crypto_meta_data" kindref="compound">FileCryptoMetaData</ref> &amp;</type>
          <declname>crypto_metadata</declname>
        </param>
        <param>
          <type>::<ref refid="classarrow_1_1io_1_1_output_stream" kindref="compound">arrow::io::OutputStream</ref> *</type>
          <declname>sink</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/file_writer.h" line="126" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1afe4f929dcd70fea8d2799ce4fcafc0fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string parquet::ParquetVersionToString</definition>
        <argsstring>(ParquetVersion::type ver)</argsstring>
        <name>ParquetVersionToString</name>
        <param>
          <type><ref refid="structparquet_1_1_parquet_version_1aaf8586f6c213f55116376dcff4c70805" kindref="member">ParquetVersion::type</ref></type>
          <declname>ver</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/metadata.h" line="406" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1ad360437cba4885e3d7d81343ae3d6a94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt;::<ref refid="classarrow_1_1io_1_1_buffer_output_stream" kindref="compound">arrow::io::BufferOutputStream</ref> &gt;</type>
        <definition>std::shared_ptr&lt;::arrow::io::BufferOutputStream&gt; parquet::CreateOutputStream</definition>
        <argsstring>(::arrow::MemoryPool *pool=::arrow::default_memory_pool())</argsstring>
        <name>CreateOutputStream</name>
        <param>
          <type>::<ref refid="classarrow_1_1_memory_pool" kindref="compound">arrow::MemoryPool</ref> *</type>
          <declname>pool</declname>
          <defval>::<ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">arrow::default_memory_pool</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/platform.h" line="111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a03bd342ae4d50b0b52f0c3ad6fd2d007" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="namespaceparquet_1a1c3b994581f3fc6e9842eb902ef7916f" kindref="member">ResizableBuffer</ref> &gt;</type>
        <definition>std::shared_ptr&lt;ResizableBuffer&gt; parquet::AllocateBuffer</definition>
        <argsstring>(::arrow::MemoryPool *pool=::arrow::default_memory_pool(), int64_t size=0)</argsstring>
        <name>AllocateBuffer</name>
        <param>
          <type>::<ref refid="classarrow_1_1_memory_pool" kindref="compound">arrow::MemoryPool</ref> *</type>
          <declname>pool</declname>
          <defval>::<ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">arrow::default_memory_pool</ref>()</defval>
        </param>
        <param>
          <type>int64_t</type>
          <declname>size</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/platform.h" line="115" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a0a384c637ba6393d21075504a44e233e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classparquet_1_1_reader_properties" kindref="compound">ReaderProperties</ref></type>
        <definition>ReaderProperties parquet::default_reader_properties</definition>
        <argsstring>()</argsstring>
        <name>default_reader_properties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/properties.h" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1af3ef28d276d5193806a95e7da5309e4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::shared_ptr&lt; <ref refid="classparquet_1_1_writer_properties" kindref="compound">WriterProperties</ref> &gt; &amp;</type>
        <definition>const std::shared_ptr&lt;WriterProperties&gt;&amp; parquet::default_writer_properties</definition>
        <argsstring>()</argsstring>
        <name>default_writer_properties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/properties.h" line="559" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a1c294ee2ee4ff2cc591fa0755e59c4e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classparquet_1_1_arrow_reader_properties" kindref="compound">ArrowReaderProperties</ref></type>
        <definition>ArrowReaderProperties parquet::default_arrow_reader_properties</definition>
        <argsstring>()</argsstring>
        <name>default_arrow_reader_properties</name>
        <briefdescription>
<para>EXPERIMENTAL: Constructs the default <ref refid="classparquet_1_1_arrow_reader_properties" kindref="compound">ArrowReaderProperties</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/properties.h" line="608" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a40435a0e4ca51cdfc833ab61d24333ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classparquet_1_1_arrow_writer_properties" kindref="compound">ArrowWriterProperties</ref> &gt;</type>
        <definition>std::shared_ptr&lt;ArrowWriterProperties&gt; parquet::default_arrow_writer_properties</definition>
        <argsstring>()</argsstring>
        <name>default_arrow_writer_properties</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/properties.h" line="773" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a4b4e2b66d9ed578b23bb20ce06590dec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DType</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classparquet_1_1_typed_comparator" kindref="compound">TypedComparator</ref>&lt; DType &gt; &gt;</type>
        <definition>std::shared_ptr&lt;TypedComparator&lt;DType&gt; &gt; parquet::MakeComparator</definition>
        <argsstring>(Type::type physical_type, SortOrder::type sort_order, int type_length=-1)</argsstring>
        <name>MakeComparator</name>
        <param>
          <type><ref refid="structparquet_1_1_type_1a2a4b0ad3da98a8a407a0dc3ecbf737ca" kindref="member">Type::type</ref></type>
          <declname>physical_type</declname>
        </param>
        <param>
          <type><ref refid="structparquet_1_1_sort_order_1a7aa8892393c3e16bd25f11595281eee8" kindref="member">SortOrder::type</ref></type>
          <declname>sort_order</declname>
        </param>
        <param>
          <type>int</type>
          <declname>type_length</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Typed version of <ref refid="classparquet_1_1_comparator_1a8803a59fd17607eb7128ae0a8b612df8" kindref="member">Comparator::Make</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/statistics.h" line="104" column="1" bodyfile="/arrow/cpp/src/parquet/statistics.h" bodystart="104" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a71174bde214cb76ce72f12ff8937196e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DType</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classparquet_1_1_typed_comparator" kindref="compound">TypedComparator</ref>&lt; DType &gt; &gt;</type>
        <definition>std::shared_ptr&lt;TypedComparator&lt;DType&gt; &gt; parquet::MakeComparator</definition>
        <argsstring>(const ColumnDescriptor *descr)</argsstring>
        <name>MakeComparator</name>
        <param>
          <type>const <ref refid="classparquet_1_1_column_descriptor" kindref="compound">ColumnDescriptor</ref> *</type>
          <declname>descr</declname>
        </param>
        <briefdescription>
<para>Typed version of <ref refid="classparquet_1_1_comparator_1a8803a59fd17607eb7128ae0a8b612df8" kindref="member">Comparator::Make</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/statistics.h" line="113" column="1" bodyfile="/arrow/cpp/src/parquet/statistics.h" bodystart="113" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1aa135643271599fe9c2a6a68f96ed1954" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DType</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classparquet_1_1_typed_statistics" kindref="compound">TypedStatistics</ref>&lt; DType &gt; &gt;</type>
        <definition>std::shared_ptr&lt;TypedStatistics&lt;DType&gt; &gt; parquet::MakeStatistics</definition>
        <argsstring>(const ColumnDescriptor *descr, ::arrow::MemoryPool *pool=::arrow::default_memory_pool())</argsstring>
        <name>MakeStatistics</name>
        <param>
          <type>const <ref refid="classparquet_1_1_column_descriptor" kindref="compound">ColumnDescriptor</ref> *</type>
          <declname>descr</declname>
        </param>
        <param>
          <type>::<ref refid="classarrow_1_1_memory_pool" kindref="compound">arrow::MemoryPool</ref> *</type>
          <declname>pool</declname>
          <defval>::<ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">arrow::default_memory_pool</ref>()</defval>
        </param>
        <briefdescription>
<para>Typed version of <ref refid="classparquet_1_1_statistics_1a7497a193b1c6c8ba5bdac15c7acc658c" kindref="member">Statistics::Make</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/statistics.h" line="296" column="1" bodyfile="/arrow/cpp/src/parquet/statistics.h" bodystart="296" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a8278df1a34a2ead948aa8624d956b699" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DType</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classparquet_1_1_typed_statistics" kindref="compound">TypedStatistics</ref>&lt; DType &gt; &gt;</type>
        <definition>std::shared_ptr&lt;TypedStatistics&lt;DType&gt; &gt; parquet::MakeStatistics</definition>
        <argsstring>(const typename DType::c_type &amp;min, const typename DType::c_type &amp;max, int64_t num_values, int64_t null_count, int64_t distinct_count)</argsstring>
        <name>MakeStatistics</name>
        <param>
          <type>const typename DType::c_type &amp;</type>
          <declname>min</declname>
        </param>
        <param>
          <type>const typename DType::c_type &amp;</type>
          <declname>max</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>num_values</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>null_count</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>distinct_count</declname>
        </param>
        <briefdescription>
<para>Create <ref refid="classparquet_1_1_statistics" kindref="compound">Statistics</ref> initialized to a particular state. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">min</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">max</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum value </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">num_values</parametername>
</parameternamelist>
<parameterdescription>
<para>number of values </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">null_count</parametername>
</parameternamelist>
<parameterdescription>
<para>number of null values </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">distinct_count</parametername>
</parameternamelist>
<parameterdescription>
<para>number of distinct values </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/statistics.h" line="309" column="1" bodyfile="/arrow/cpp/src/parquet/statistics.h" bodystart="309" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1abfb0d2426e75aa28f58f5f15271e295c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DType</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classparquet_1_1_typed_statistics" kindref="compound">TypedStatistics</ref>&lt; DType &gt; &gt;</type>
        <definition>std::shared_ptr&lt;TypedStatistics&lt;DType&gt; &gt; parquet::MakeStatistics</definition>
        <argsstring>(const ColumnDescriptor *descr, const std::string &amp;encoded_min, const std::string &amp;encoded_max, int64_t num_values, int64_t null_count, int64_t distinct_count, bool has_min_max, ::arrow::MemoryPool *pool=::arrow::default_memory_pool())</argsstring>
        <name>MakeStatistics</name>
        <param>
          <type>const <ref refid="classparquet_1_1_column_descriptor" kindref="compound">ColumnDescriptor</ref> *</type>
          <declname>descr</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>encoded_min</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>encoded_max</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>num_values</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>null_count</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>distinct_count</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_min_max</declname>
        </param>
        <param>
          <type>::<ref refid="classarrow_1_1_memory_pool" kindref="compound">arrow::MemoryPool</ref> *</type>
          <declname>pool</declname>
          <defval>::<ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">arrow::default_memory_pool</ref>()</defval>
        </param>
        <briefdescription>
<para>Typed version of <ref refid="classparquet_1_1_statistics_1a7497a193b1c6c8ba5bdac15c7acc658c" kindref="member">Statistics::Make</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/statistics.h" line="320" column="1" bodyfile="/arrow/cpp/src/parquet/statistics.h" bodystart="320" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a6ae2945e6dd7a157f71cf6c93b5cd87f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classparquet_1_1_stream_reader" kindref="compound">StreamReader</ref> &amp;</type>
        <definition>StreamReader&amp; parquet::operator&gt;&gt;</definition>
        <argsstring>(StreamReader &amp;, EndRowType)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type><ref refid="classparquet_1_1_stream_reader" kindref="compound">StreamReader</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="structparquet_1_1_end_row_type" kindref="compound">EndRowType</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_reader.h" line="297" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a7085eca34785fd9e1ad1958057eef1c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classparquet_1_1_stream_writer" kindref="compound">StreamWriter</ref> &amp;</type>
        <definition>StreamWriter&amp; parquet::operator&lt;&lt;</definition>
        <argsstring>(StreamWriter &amp;, EndRowType)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classparquet_1_1_stream_writer" kindref="compound">StreamWriter</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="structparquet_1_1_end_row_type" kindref="compound">EndRowType</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="238" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1af1d41aaf27813ec5ff833f1101a7944b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classparquet_1_1_stream_writer" kindref="compound">StreamWriter</ref> &amp;</type>
        <definition>StreamWriter&amp; parquet::operator&lt;&lt;</definition>
        <argsstring>(StreamWriter &amp;, EndRowGroupType)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="classparquet_1_1_stream_writer" kindref="compound">StreamWriter</ref> &amp;</type>
        </param>
        <param>
          <type><ref refid="structparquet_1_1_end_row_group_type" kindref="compound">EndRowGroupType</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="241" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1ad14a67ef5996f82b88c194c2fa2f4632" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structparquet_1_1_type_1a2a4b0ad3da98a8a407a0dc3ecbf737ca" kindref="member">Type::type</ref></type>
        <definition>static Type::type parquet::FromThriftUnsafe</definition>
        <argsstring>(format::Type::type type)</argsstring>
        <name>FromThriftUnsafe</name>
        <param>
          <type>format::Type::type</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/thrift_internal.h" line="70" column="1" bodyfile="/arrow/cpp/src/parquet/thrift_internal.h" bodystart="70" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1ac6197fe7eae7e22795f8f7e2b91ae77a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structparquet_1_1_converted_type_1a4c93674b47bffc29042acda48281e198" kindref="member">ConvertedType::type</ref></type>
        <definition>static ConvertedType::type parquet::FromThriftUnsafe</definition>
        <argsstring>(format::ConvertedType::type type)</argsstring>
        <name>FromThriftUnsafe</name>
        <param>
          <type>format::ConvertedType::type</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/thrift_internal.h" line="74" column="1" bodyfile="/arrow/cpp/src/parquet/thrift_internal.h" bodystart="74" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a5c853333ed266f6e25fb3bc477d40af0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structparquet_1_1_repetition_1a7e942dfcd49240c465cdf3e1dc011af4" kindref="member">Repetition::type</ref></type>
        <definition>static Repetition::type parquet::FromThriftUnsafe</definition>
        <argsstring>(format::FieldRepetitionType::type type)</argsstring>
        <name>FromThriftUnsafe</name>
        <param>
          <type>format::FieldRepetitionType::type</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/thrift_internal.h" line="79" column="1" bodyfile="/arrow/cpp/src/parquet/thrift_internal.h" bodystart="79" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a97d7fe794053fda59a5511911e8b028e" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structparquet_1_1_encoding_1acd287bb69df941fa0e27dd594462f27e" kindref="member">Encoding::type</ref></type>
        <definition>static Encoding::type parquet::FromThriftUnsafe</definition>
        <argsstring>(format::Encoding::type type)</argsstring>
        <name>FromThriftUnsafe</name>
        <param>
          <type>format::Encoding::type</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/thrift_internal.h" line="83" column="1" bodyfile="/arrow/cpp/src/parquet/thrift_internal.h" bodystart="83" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a0e0903ca5de716d5f88be62f5dc68783" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structparquet_1_1_page_type_1ada68cc6b55bb3a6f94139362fc39316d" kindref="member">PageType::type</ref></type>
        <definition>static PageType::type parquet::FromThriftUnsafe</definition>
        <argsstring>(format::PageType::type type)</argsstring>
        <name>FromThriftUnsafe</name>
        <param>
          <type>format::PageType::type</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/thrift_internal.h" line="87" column="1" bodyfile="/arrow/cpp/src/parquet/thrift_internal.h" bodystart="87" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1ab98a948a08701d62d429bf4f625b2f3d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structarrow_1_1_compression_1a8abcec0357242c077a2905d645f2163f" kindref="member">Compression::type</ref></type>
        <definition>static Compression::type parquet::FromThriftUnsafe</definition>
        <argsstring>(format::CompressionCodec::type type)</argsstring>
        <name>FromThriftUnsafe</name>
        <param>
          <type>format::CompressionCodec::type</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/thrift_internal.h" line="91" column="1" bodyfile="/arrow/cpp/src/parquet/thrift_internal.h" bodystart="91" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a836c7f5b30cd60bab7d80e9d7a152573" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ThriftType</type>
          </param>
          <param>
            <type>typename ParquetEnum</type>
            <defval>typename internal::ThriftEnumTypeTraits&lt;ThriftType&gt;::ParquetEnum</defval>
          </param>
        </templateparamlist>
        <type>ParquetEnum::type</type>
        <definition>ParquetEnum::type parquet::LoadEnumSafe</definition>
        <argsstring>(const ThriftType *in)</argsstring>
        <name>LoadEnumSafe</name>
        <param>
          <type>const ThriftType *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/thrift_internal.h" line="205" column="1" bodyfile="/arrow/cpp/src/parquet/thrift_internal.h" bodystart="205" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a0279963eb0576cba3789d0d668cf005a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structarrow_1_1_compression_1a8abcec0357242c077a2905d645f2163f" kindref="member">Compression::type</ref></type>
        <definition>Compression::type parquet::LoadEnumSafe</definition>
        <argsstring>(const format::CompressionCodec::type *in)</argsstring>
        <name>LoadEnumSafe</name>
        <param>
          <type>const format::CompressionCodec::type *</type>
          <declname>in</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/thrift_internal.h" line="209" column="1" bodyfile="/arrow/cpp/src/parquet/thrift_internal.h" bodystart="209" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a09fa1a714bdfe3f46c530680083d34dd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structparquet_1_1_aad_metadata" kindref="compound">AadMetadata</ref></type>
        <definition>static AadMetadata parquet::FromThrift</definition>
        <argsstring>(format::AesGcmV1 aesGcmV1)</argsstring>
        <name>FromThrift</name>
        <param>
          <type>format::AesGcmV1</type>
          <declname>aesGcmV1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/thrift_internal.h" line="224" column="1" bodyfile="/arrow/cpp/src/parquet/thrift_internal.h" bodystart="224" bodyend="227"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a94463606449f80bb11c20ec42bb889cd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structparquet_1_1_aad_metadata" kindref="compound">AadMetadata</ref></type>
        <definition>static AadMetadata parquet::FromThrift</definition>
        <argsstring>(format::AesGcmCtrV1 aesGcmCtrV1)</argsstring>
        <name>FromThrift</name>
        <param>
          <type>format::AesGcmCtrV1</type>
          <declname>aesGcmCtrV1</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/thrift_internal.h" line="229" column="1" bodyfile="/arrow/cpp/src/parquet/thrift_internal.h" bodystart="229" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a3c72e7084f9004899ca43a613cd30442" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structparquet_1_1_encryption_algorithm" kindref="compound">EncryptionAlgorithm</ref></type>
        <definition>static EncryptionAlgorithm parquet::FromThrift</definition>
        <argsstring>(format::EncryptionAlgorithm encryption)</argsstring>
        <name>FromThrift</name>
        <param>
          <type>format::EncryptionAlgorithm</type>
          <declname>encryption</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/thrift_internal.h" line="234" column="1" bodyfile="/arrow/cpp/src/parquet/thrift_internal.h" bodystart="234" bodyend="247"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a8e4e39f5e9aba07b11bc458a4260323b" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>format::Type::type</type>
        <definition>static format::Type::type parquet::ToThrift</definition>
        <argsstring>(Type::type type)</argsstring>
        <name>ToThrift</name>
        <param>
          <type><ref refid="structparquet_1_1_type_1a2a4b0ad3da98a8a407a0dc3ecbf737ca" kindref="member">Type::type</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/thrift_internal.h" line="252" column="1" bodyfile="/arrow/cpp/src/parquet/thrift_internal.h" bodystart="252" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a2af4eb3d433d305a10f6fc55f3707461" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>format::ConvertedType::type</type>
        <definition>static format::ConvertedType::type parquet::ToThrift</definition>
        <argsstring>(ConvertedType::type type)</argsstring>
        <name>ToThrift</name>
        <param>
          <type><ref refid="structparquet_1_1_converted_type_1a4c93674b47bffc29042acda48281e198" kindref="member">ConvertedType::type</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/thrift_internal.h" line="256" column="1" bodyfile="/arrow/cpp/src/parquet/thrift_internal.h" bodystart="256" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a5084d3b3a98a971a9e1e47253b7029e9" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>format::FieldRepetitionType::type</type>
        <definition>static format::FieldRepetitionType::type parquet::ToThrift</definition>
        <argsstring>(Repetition::type type)</argsstring>
        <name>ToThrift</name>
        <param>
          <type><ref refid="structparquet_1_1_repetition_1a7e942dfcd49240c465cdf3e1dc011af4" kindref="member">Repetition::type</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/thrift_internal.h" line="262" column="1" bodyfile="/arrow/cpp/src/parquet/thrift_internal.h" bodystart="262" bodyend="264"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1abb66483537ebcf664dd281996f1e8975" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>format::Encoding::type</type>
        <definition>static format::Encoding::type parquet::ToThrift</definition>
        <argsstring>(Encoding::type type)</argsstring>
        <name>ToThrift</name>
        <param>
          <type><ref refid="structparquet_1_1_encoding_1acd287bb69df941fa0e27dd594462f27e" kindref="member">Encoding::type</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/thrift_internal.h" line="266" column="1" bodyfile="/arrow/cpp/src/parquet/thrift_internal.h" bodystart="266" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a8a27027048c5de181921daa7f4d0bfda" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>format::CompressionCodec::type</type>
        <definition>static format::CompressionCodec::type parquet::ToThrift</definition>
        <argsstring>(Compression::type type)</argsstring>
        <name>ToThrift</name>
        <param>
          <type><ref refid="structarrow_1_1_compression_1a8abcec0357242c077a2905d645f2163f" kindref="member">Compression::type</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/thrift_internal.h" line="270" column="1" bodyfile="/arrow/cpp/src/parquet/thrift_internal.h" bodystart="270" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1afaf8eb943fc9b7779eb237193dbcf135" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>format::Statistics</type>
        <definition>static format::Statistics parquet::ToThrift</definition>
        <argsstring>(const EncodedStatistics &amp;stats)</argsstring>
        <name>ToThrift</name>
        <param>
          <type>const <ref refid="classparquet_1_1_encoded_statistics" kindref="compound">EncodedStatistics</ref> &amp;</type>
          <declname>stats</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/thrift_internal.h" line="292" column="1" bodyfile="/arrow/cpp/src/parquet/thrift_internal.h" bodystart="292" bodyend="318"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1aaeda983a20d31d172f64c0437e9ab35c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>format::AesGcmV1</type>
        <definition>static format::AesGcmV1 parquet::ToAesGcmV1Thrift</definition>
        <argsstring>(AadMetadata aad)</argsstring>
        <name>ToAesGcmV1Thrift</name>
        <param>
          <type><ref refid="structparquet_1_1_aad_metadata" kindref="compound">AadMetadata</ref></type>
          <declname>aad</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/thrift_internal.h" line="320" column="1" bodyfile="/arrow/cpp/src/parquet/thrift_internal.h" bodystart="320" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a026139af028f35c968a6711d82b1ccfb" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>format::AesGcmCtrV1</type>
        <definition>static format::AesGcmCtrV1 parquet::ToAesGcmCtrV1Thrift</definition>
        <argsstring>(AadMetadata aad)</argsstring>
        <name>ToAesGcmCtrV1Thrift</name>
        <param>
          <type><ref refid="structparquet_1_1_aad_metadata" kindref="compound">AadMetadata</ref></type>
          <declname>aad</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/thrift_internal.h" line="331" column="1" bodyfile="/arrow/cpp/src/parquet/thrift_internal.h" bodystart="331" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a21a2644f343d1d357e47149a33c67c33" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>format::EncryptionAlgorithm</type>
        <definition>static format::EncryptionAlgorithm parquet::ToThrift</definition>
        <argsstring>(EncryptionAlgorithm encryption)</argsstring>
        <name>ToThrift</name>
        <param>
          <type><ref refid="structparquet_1_1_encryption_algorithm" kindref="compound">EncryptionAlgorithm</ref></type>
          <declname>encryption</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/thrift_internal.h" line="342" column="1" bodyfile="/arrow/cpp/src/parquet/thrift_internal.h" bodystart="342" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a21fe87cfd5243e922a121415cb33fbcd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void parquet::DeserializeThriftUnencryptedMsg</definition>
        <argsstring>(const uint8_t *buf, uint32_t *len, T *deserialized_msg)</argsstring>
        <name>DeserializeThriftUnencryptedMsg</name>
        <param>
          <type>const uint8_t *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>len</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>deserialized_msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/thrift_internal.h" line="358" column="1" bodyfile="/arrow/cpp/src/parquet/thrift_internal.h" bodystart="358" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a24df41171cae27cf1176e61e8ae71947" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void parquet::DeserializeThriftMsg</definition>
        <argsstring>(const uint8_t *buf, uint32_t *len, T *deserialized_msg, const std::shared_ptr&lt; Decryptor &gt; &amp;decryptor=NULLPTR)</argsstring>
        <name>DeserializeThriftMsg</name>
        <param>
          <type>const uint8_t *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>uint32_t *</type>
          <declname>len</declname>
        </param>
        <param>
          <type>T *</type>
          <declname>deserialized_msg</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classparquet_1_1_decryptor" kindref="compound">Decryptor</ref> &gt; &amp;</type>
          <declname>decryptor</declname>
          <defval><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/thrift_internal.h" line="384" column="1" bodyfile="/arrow/cpp/src/parquet/thrift_internal.h" bodystart="384" bodyend="407"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a5d4db31b5a5cc63e34eabb85f4884d34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool parquet::IsCodecSupported</definition>
        <argsstring>(Compression::type codec)</argsstring>
        <name>IsCodecSupported</name>
        <param>
          <type><ref refid="structarrow_1_1_compression_1a8abcec0357242c077a2905d645f2163f" kindref="member">Compression::type</ref></type>
          <declname>codec</declname>
        </param>
        <briefdescription>
<para>Return true if Parquet supports indicated compression type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="466" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a1da4714b5cfe05f61a5b056ff08d229e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="namespaceparquet_1a8a586e8fadc0656a031810b95028f652" kindref="member">Codec</ref> &gt;</type>
        <definition>std::unique_ptr&lt;Codec&gt; parquet::GetCodec</definition>
        <argsstring>(Compression::type codec)</argsstring>
        <name>GetCodec</name>
        <param>
          <type><ref refid="structarrow_1_1_compression_1a8abcec0357242c077a2905d645f2163f" kindref="member">Compression::type</ref></type>
          <declname>codec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="469" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a833b6358ed5c7c36005d4e33a170a8d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="namespaceparquet_1a8a586e8fadc0656a031810b95028f652" kindref="member">Codec</ref> &gt;</type>
        <definition>std::unique_ptr&lt;Codec&gt; parquet::GetCodec</definition>
        <argsstring>(Compression::type codec, int compression_level)</argsstring>
        <name>GetCodec</name>
        <param>
          <type><ref refid="structarrow_1_1_compression_1a8abcec0357242c077a2905d645f2163f" kindref="member">Compression::type</ref></type>
          <declname>codec</declname>
        </param>
        <param>
          <type>int</type>
          <declname>compression_level</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="472" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a659eec7804dfaa63497e873669f29094" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool parquet::operator==</definition>
        <argsstring>(const ByteArray &amp;left, const ByteArray &amp;right)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structparquet_1_1_byte_array" kindref="compound">ByteArray</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="structparquet_1_1_byte_array" kindref="compound">ByteArray</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="529" column="1" bodyfile="/arrow/cpp/src/parquet/types.h" bodystart="529" bodyend="532"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1abdb3a03c245a7b25edf1f8a6959d56d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool parquet::operator!=</definition>
        <argsstring>(const ByteArray &amp;left, const ByteArray &amp;right)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structparquet_1_1_byte_array" kindref="compound">ByteArray</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="structparquet_1_1_byte_array" kindref="compound">ByteArray</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="534" column="1" bodyfile="/arrow/cpp/src/parquet/types.h" bodystart="534" bodyend="536"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a5c4c7a94a482c46a4b706c424b15f29d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>parquet::MANUALLY_ALIGNED_STRUCT</definition>
        <argsstring>(1) Int96</argsstring>
        <name>MANUALLY_ALIGNED_STRUCT</name>
        <param>
          <type>1</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="559" column="1" bodyfile="/arrow/cpp/src/parquet/types.h" bodystart="559" bodyend="559"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1ab17edc5728cfc0ebb7ee3e8765bee031" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>parquet::STRUCT_END</definition>
        <argsstring>(Int96, 12)</argsstring>
        <name>STRUCT_END</name>
        <param>
          <type>Int96</type>
        </param>
        <param>
          <type>12</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="560" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a048f2b425d31db4e15f3d1473e6c8ed9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool parquet::operator==</definition>
        <argsstring>(const Int96 &amp;left, const Int96 &amp;right)</argsstring>
        <name>operator==</name>
        <param>
          <type>const Int96 &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const Int96 &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="562" column="1" bodyfile="/arrow/cpp/src/parquet/types.h" bodystart="562" bodyend="564"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a97799a631730609251b155b087addb74" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool parquet::operator!=</definition>
        <argsstring>(const Int96 &amp;left, const Int96 &amp;right)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const Int96 &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const Int96 &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="566" column="1" bodyfile="/arrow/cpp/src/parquet/types.h" bodystart="566" bodyend="566"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1adda88510d35d083ccd0691ef7ab6192a" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string parquet::ByteArrayToString</definition>
        <argsstring>(const ByteArray &amp;a)</argsstring>
        <name>ByteArrayToString</name>
        <param>
          <type>const <ref refid="structparquet_1_1_byte_array" kindref="compound">ByteArray</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="568" column="1" bodyfile="/arrow/cpp/src/parquet/types.h" bodystart="568" bodyend="570"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a7543f2d1b55f4ee61b736d8d706519ad" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>static void parquet::Int96SetNanoSeconds</definition>
        <argsstring>(parquet::Int96 &amp;i96, int64_t nanoseconds)</argsstring>
        <name>Int96SetNanoSeconds</name>
        <param>
          <type>parquet::Int96 &amp;</type>
          <declname>i96</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nanoseconds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="572" column="1" bodyfile="/arrow/cpp/src/parquet/types.h" bodystart="572" bodyend="574"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1abb1a735f847451faaaa45cca7bf705b2" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int64_t</type>
        <definition>static int64_t parquet::Int96GetNanoSeconds</definition>
        <argsstring>(const parquet::Int96 &amp;i96)</argsstring>
        <name>Int96GetNanoSeconds</name>
        <param>
          <type>const parquet::Int96 &amp;</type>
          <declname>i96</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="576" column="1" bodyfile="/arrow/cpp/src/parquet/types.h" bodystart="576" bodyend="585"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a5b44f5aad4fa9cf376a5c8d2372bc6c5" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string parquet::Int96ToString</definition>
        <argsstring>(const Int96 &amp;a)</argsstring>
        <name>Int96ToString</name>
        <param>
          <type>const Int96 &amp;</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="587" column="1" bodyfile="/arrow/cpp/src/parquet/types.h" bodystart="587" bodyend="591"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a252f13c56dd92da1a766d5d94eb85a70" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string parquet::FixedLenByteArrayToString</definition>
        <argsstring>(const FixedLenByteArray &amp;a, int len)</argsstring>
        <name>FixedLenByteArrayToString</name>
        <param>
          <type>const <ref refid="structparquet_1_1_fixed_len_byte_array" kindref="compound">FixedLenByteArray</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="593" column="1" bodyfile="/arrow/cpp/src/parquet/types.h" bodystart="593" bodyend="597"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a0fa5082525293e05aa2f678f725a3277" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Type</type>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string parquet::format_fwf</definition>
        <argsstring>(int width)</argsstring>
        <name>format_fwf</name>
        <param>
          <type>int</type>
          <declname>width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="682" column="1" bodyfile="/arrow/cpp/src/parquet/types.h" bodystart="682" bodyend="686"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a7a6273c54ab0717c49ef105f4ad0b2cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string parquet::EncodingToString</definition>
        <argsstring>(Encoding::type t)</argsstring>
        <name>EncodingToString</name>
        <param>
          <type><ref refid="structparquet_1_1_encoding_1acd287bb69df941fa0e27dd594462f27e" kindref="member">Encoding::type</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="688" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1af45d96322321fde4d747a24074cc92c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string parquet::ConvertedTypeToString</definition>
        <argsstring>(ConvertedType::type t)</argsstring>
        <name>ConvertedTypeToString</name>
        <param>
          <type><ref refid="structparquet_1_1_converted_type_1a4c93674b47bffc29042acda48281e198" kindref="member">ConvertedType::type</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="690" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1aae274fa6fbf66cdf8630740d9461d675" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string parquet::TypeToString</definition>
        <argsstring>(Type::type t)</argsstring>
        <name>TypeToString</name>
        <param>
          <type><ref refid="structparquet_1_1_type_1a2a4b0ad3da98a8a407a0dc3ecbf737ca" kindref="member">Type::type</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="692" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a01a136f35bc65fcba82a12fd04db3ab3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string parquet::FormatStatValue</definition>
        <argsstring>(Type::type parquet_type, ::arrow::util::string_view val)</argsstring>
        <name>FormatStatValue</name>
        <param>
          <type><ref refid="structparquet_1_1_type_1a2a4b0ad3da98a8a407a0dc3ecbf737ca" kindref="member">Type::type</ref></type>
          <declname>parquet_type</declname>
        </param>
        <param>
          <type>::arrow::util::string_view</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="694" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1afc3b898010b160805758ae529c776bcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int parquet::GetTypeByteSize</definition>
        <argsstring>(Type::type t)</argsstring>
        <name>GetTypeByteSize</name>
        <param>
          <type><ref refid="structparquet_1_1_type_1a2a4b0ad3da98a8a407a0dc3ecbf737ca" kindref="member">Type::type</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="697" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1a676ed8018ede8a2eff1697515d9c14e8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structparquet_1_1_sort_order_1a7aa8892393c3e16bd25f11595281eee8" kindref="member">SortOrder::type</ref></type>
        <definition>SortOrder::type parquet::DefaultSortOrder</definition>
        <argsstring>(Type::type primitive)</argsstring>
        <name>DefaultSortOrder</name>
        <param>
          <type><ref refid="structparquet_1_1_type_1a2a4b0ad3da98a8a407a0dc3ecbf737ca" kindref="member">Type::type</ref></type>
          <declname>primitive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="699" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1ad0e255fea359ebd3737817c4e0ea4659" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structparquet_1_1_sort_order_1a7aa8892393c3e16bd25f11595281eee8" kindref="member">SortOrder::type</ref></type>
        <definition>SortOrder::type parquet::GetSortOrder</definition>
        <argsstring>(ConvertedType::type converted, Type::type primitive)</argsstring>
        <name>GetSortOrder</name>
        <param>
          <type><ref refid="structparquet_1_1_converted_type_1a4c93674b47bffc29042acda48281e198" kindref="member">ConvertedType::type</ref></type>
          <declname>converted</declname>
        </param>
        <param>
          <type><ref refid="structparquet_1_1_type_1a2a4b0ad3da98a8a407a0dc3ecbf737ca" kindref="member">Type::type</ref></type>
          <declname>primitive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="701" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1ac2b5c680575a7b07669793cb52e0f978" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structparquet_1_1_sort_order_1a7aa8892393c3e16bd25f11595281eee8" kindref="member">SortOrder::type</ref></type>
        <definition>SortOrder::type parquet::GetSortOrder</definition>
        <argsstring>(const std::shared_ptr&lt; const LogicalType &gt; &amp;logical_type, Type::type primitive)</argsstring>
        <name>GetSortOrder</name>
        <param>
          <type>const std::shared_ptr&lt; const <ref refid="classparquet_1_1_logical_type" kindref="compound">LogicalType</ref> &gt; &amp;</type>
          <declname>logical_type</declname>
        </param>
        <param>
          <type><ref refid="structparquet_1_1_type_1a2a4b0ad3da98a8a407a0dc3ecbf737ca" kindref="member">Type::type</ref></type>
          <declname>primitive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="704" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/arrow/dataset/file_parquet.h" line="30" column="1"/>
  </compounddef>
</doxygen>
