<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1io_1_1_hadoop_file_system" kind="class" language="C++" prot="public">
    <compoundname>arrow::io::HadoopFileSystem</compoundname>
    <basecompoundref refid="classarrow_1_1io_1_1_file_system" prot="public" virt="non-virtual">arrow::io::FileSystem</basecompoundref>
    <includes refid="io_2hdfs_8h" local="no">arrow/io/hdfs.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classarrow_1_1io_1_1_hadoop_file_system_1abc3f23e36cc88efe1f401afcc40e7d7c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class HdfsReadableFile</definition>
        <argsstring></argsstring>
        <name>HdfsReadableFile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="202" column="1" bodyfile="/arrow/cpp/src/arrow/io/hdfs.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classarrow_1_1io_1_1_hadoop_file_system_1aef44a7003c7ed4574da8ada762c967aa" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class HdfsOutputStream</definition>
        <argsstring></argsstring>
        <name>HdfsOutputStream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="203" column="1" bodyfile="/arrow/cpp/src/arrow/io/hdfs.h" bodystart="203" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classarrow_1_1io_1_1_hadoop_file_system_1a3eb5903a57e1e0453cf7fd8a9198f064" prot="private" static="no" mutable="no">
        <type>class <ref refid="arrow_2util_2visibility_8h_1a843cb8dccea68a22a2b9995605cb5a74" kindref="member">ARROW_NO_EXPORT</ref></type>
        <definition>class ARROW_NO_EXPORT arrow::io::HadoopFileSystem::HadoopFileSystemImpl</definition>
        <argsstring></argsstring>
        <name>HadoopFileSystemImpl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="203" column="1" bodyfile="/arrow/cpp/src/arrow/io/hdfs.h" bodystart="205" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1io_1_1_hadoop_file_system_1aed1f33856b1077022ef14d4170b28eac" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; HadoopFileSystemImpl &gt;</type>
        <definition>std::unique_ptr&lt;HadoopFileSystemImpl&gt; arrow::io::HadoopFileSystem::impl_</definition>
        <argsstring></argsstring>
        <name>impl_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="206" column="1" bodyfile="/arrow/cpp/src/arrow/io/hdfs.h" bodystart="206" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1io_1_1_hadoop_file_system_1a401204a079bbd99aeaceffb48921c602" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::io::HadoopFileSystem::~HadoopFileSystem</definition>
        <argsstring>() override</argsstring>
        <name>~HadoopFileSystem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="97" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_hadoop_file_system_1a86312271eb37d6e9f98f2b1094919c76" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::HadoopFileSystem::MakeDirectory</definition>
        <argsstring>(const std::string &amp;path) override</argsstring>
        <name>MakeDirectory</name>
        <reimplements refid="classarrow_1_1io_1_1_file_system_1a7e8e6633ff7145b38cca49311a6e17ee">MakeDirectory</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_hadoop_file_system_1a0837a0bcb51c6cb02d8a4173e2d131b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::HadoopFileSystem::Delete</definition>
        <argsstring>(const std::string &amp;path, bool recursive=false)</argsstring>
        <name>Delete</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>recursive</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="117" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_hadoop_file_system_1aa53f05492b7f06c5e36c02c3f8bdb3c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::HadoopFileSystem::DeleteDirectory</definition>
        <argsstring>(const std::string &amp;path) override</argsstring>
        <name>DeleteDirectory</name>
        <reimplements refid="classarrow_1_1io_1_1_file_system_1ae0fcf3de8b1f52bfba7aca6ffcffbcef">DeleteDirectory</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_hadoop_file_system_1a64caee55c8c647609e720fa3f933fafb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::HadoopFileSystem::Disconnect</definition>
        <argsstring>()</argsstring>
        <name>Disconnect</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_hadoop_file_system_1a41e2190b443a3a5f563343f75f4ee81d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::io::HadoopFileSystem::Exists</definition>
        <argsstring>(const std::string &amp;path)</argsstring>
        <name>Exists</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="128" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_hadoop_file_system_1aa0679b4306e5e46f4a10b3921d303e55" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::HadoopFileSystem::GetPathInfo</definition>
        <argsstring>(const std::string &amp;path, HdfsPathInfo *info)</argsstring>
        <name>GetPathInfo</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="structarrow_1_1io_1_1_hdfs_path_info" kindref="compound">HdfsPathInfo</ref> *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_hadoop_file_system_1aefa370d3ac82a66466bf587eb1bfa3d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::HadoopFileSystem::GetCapacity</definition>
        <argsstring>(int64_t *nbytes)</argsstring>
        <name>GetCapacity</name>
        <param>
          <type>int64_t *</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_hadoop_file_system_1a09c361fc88b95afb00780da5759c72c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::HadoopFileSystem::GetUsed</definition>
        <argsstring>(int64_t *nbytes)</argsstring>
        <name>GetUsed</name>
        <param>
          <type>int64_t *</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_hadoop_file_system_1a6e157d9876afd8819ba6970990cd28c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::HadoopFileSystem::GetChildren</definition>
        <argsstring>(const std::string &amp;path, std::vector&lt; std::string &gt; *listing) override</argsstring>
        <name>GetChildren</name>
        <reimplements refid="classarrow_1_1io_1_1_file_system_1a91e47db138d468d1ac2d2d78e3d00cd3">GetChildren</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; *</type>
          <declname>listing</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_hadoop_file_system_1aea921f54031ab3ba05dd3c4d2a4159d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::HadoopFileSystem::ListDirectory</definition>
        <argsstring>(const std::string &amp;path, std::vector&lt; HdfsPathInfo &gt; *listing)</argsstring>
        <name>ListDirectory</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structarrow_1_1io_1_1_hdfs_path_info" kindref="compound">HdfsPathInfo</ref> &gt; *</type>
          <declname>listing</declname>
        </param>
        <briefdescription>
<para>List directory contents. </para>        </briefdescription>
        <detaileddescription>
<para>If path is a relative path, returned values will be absolute paths or URIs starting from the current working directory. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_hadoop_file_system_1a94052a5a5ae9ef03bb1ebabc1e0577eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::HadoopFileSystem::GetWorkingDirectory</definition>
        <argsstring>(std::string *out)</argsstring>
        <name>GetWorkingDirectory</name>
        <param>
          <type>std::string *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Return the filesystem&apos;s current working directory. </para>        </briefdescription>
        <detaileddescription>
<para>The working directory is the base path for all relative paths given to other APIs. NOTE: this actually returns a URI. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_hadoop_file_system_1a8a456f9cf374a9d38d50c3f3734266ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::HadoopFileSystem::Chown</definition>
        <argsstring>(const std::string &amp;path, const char *owner, const char *group)</argsstring>
        <name>Chown</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>owner</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>group</declname>
        </param>
        <briefdescription>
<para>Change. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>file path to change </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>owner</parametername>
</parameternamelist>
<parameterdescription>
<para>pass null for no change </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>group</parametername>
</parameternamelist>
<parameterdescription>
<para>pass null for no change </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="163" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_hadoop_file_system_1aac1c32a65354c7507539e576fe1dd2d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::HadoopFileSystem::Chmod</definition>
        <argsstring>(const std::string &amp;path, int mode)</argsstring>
        <name>Chmod</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>int</type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Change path permissions. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Absolute path in file system </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mode</parametername>
</parameternamelist>
<parameterdescription>
<para>Mode bitset </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="170" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_hadoop_file_system_1a0da66d4dc0b16959b42401dee1c63374" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::HadoopFileSystem::Rename</definition>
        <argsstring>(const std::string &amp;src, const std::string &amp;dst) override</argsstring>
        <name>Rename</name>
        <reimplements refid="classarrow_1_1io_1_1_file_system_1aef493836d5abbc3a14572f4b62b14ad0">Rename</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="174" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_hadoop_file_system_1a9911eee02c5227ad485b51f3aeb99401" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::HadoopFileSystem::Stat</definition>
        <argsstring>(const std::string &amp;path, FileStatistics *stat) override</argsstring>
        <name>Stat</name>
        <reimplements refid="classarrow_1_1io_1_1_file_system_1a46da344aa3993caca4273ecfc120e68b">Stat</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="structarrow_1_1io_1_1_file_statistics" kindref="compound">FileStatistics</ref> *</type>
          <declname>stat</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="176" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_hadoop_file_system_1ab9b21a51798cd2482a670c43f9dc6b50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::HadoopFileSystem::OpenReadable</definition>
        <argsstring>(const std::string &amp;path, int32_t buffer_size, std::shared_ptr&lt; HdfsReadableFile &gt; *file)</argsstring>
        <name>OpenReadable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>buffer_size</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_hdfs_readable_file" kindref="compound">HdfsReadableFile</ref> &gt; *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="184" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_hadoop_file_system_1a201da2d78b23241423f844aee414725a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::HadoopFileSystem::OpenReadable</definition>
        <argsstring>(const std::string &amp;path, std::shared_ptr&lt; HdfsReadableFile &gt; *file)</argsstring>
        <name>OpenReadable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_hdfs_readable_file" kindref="compound">HdfsReadableFile</ref> &gt; *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="187" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_hadoop_file_system_1afeab1c1018acb3e9573841c1e71f5863" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::HadoopFileSystem::OpenWritable</definition>
        <argsstring>(const std::string &amp;path, bool append, int32_t buffer_size, int16_t replication, int64_t default_block_size, std::shared_ptr&lt; HdfsOutputStream &gt; *file)</argsstring>
        <name>OpenWritable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>append</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>buffer_size</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>replication</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>default_block_size</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_hdfs_output_stream" kindref="compound">HdfsOutputStream</ref> &gt; *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="194" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_hadoop_file_system_1aa0ed5a5036036503733542dfde6f6510" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::HadoopFileSystem::OpenWritable</definition>
        <argsstring>(const std::string &amp;path, bool append, std::shared_ptr&lt; HdfsOutputStream &gt; *file)</argsstring>
        <name>OpenWritable</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>append</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_hdfs_output_stream" kindref="compound">HdfsOutputStream</ref> &gt; *</type>
          <declname>file</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="198" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1io_1_1_hadoop_file_system_1a42a1d6ef366a8d91011584cc46cf1321" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::io::HadoopFileSystem::Connect</definition>
        <argsstring>(const HdfsConnectionConfig *config, std::shared_ptr&lt; HadoopFileSystem &gt; *fs)</argsstring>
        <name>Connect</name>
        <param>
          <type>const <ref refid="structarrow_1_1io_1_1_hdfs_connection_config" kindref="compound">HdfsConnectionConfig</ref> *</type>
          <declname>config</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_hadoop_file_system" kindref="compound">HadoopFileSystem</ref> &gt; *</type>
          <declname>fs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="104" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classarrow_1_1io_1_1_hadoop_file_system_1a202015c042101d33b0382dd4fa672eab" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::io::HadoopFileSystem::HadoopFileSystem</definition>
        <argsstring>()</argsstring>
        <name>HadoopFileSystem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="208" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_hadoop_file_system_1abd1855dda83ecb90f9cf97317c29d12e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::io::HadoopFileSystem::ARROW_DISALLOW_COPY_AND_ASSIGN</definition>
        <argsstring>(HadoopFileSystem)</argsstring>
        <name>ARROW_DISALLOW_COPY_AND_ASSIGN</name>
        <param>
          <type><ref refid="classarrow_1_1io_1_1_hadoop_file_system" kindref="compound">HadoopFileSystem</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="209" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2129">
        <label>arrow::io::FileSystem</label>
        <link refid="classarrow_1_1io_1_1_file_system"/>
      </node>
      <node id="2128">
        <label>arrow::io::HadoopFileSystem</label>
        <link refid="classarrow_1_1io_1_1_hadoop_file_system"/>
        <childnode refid="2129" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2131">
        <label>arrow::io::FileSystem</label>
        <link refid="classarrow_1_1io_1_1_file_system"/>
      </node>
      <node id="2130">
        <label>arrow::io::HadoopFileSystem</label>
        <link refid="classarrow_1_1io_1_1_hadoop_file_system"/>
        <childnode refid="2131" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="95" column="1" bodyfile="/arrow/cpp/src/arrow/io/hdfs.h" bodystart="95" bodyend="210"/>
    <listofallmembers>
      <member refid="classarrow_1_1io_1_1_hadoop_file_system_1abd1855dda83ecb90f9cf97317c29d12e" prot="private" virt="non-virtual"><scope>arrow::io::HadoopFileSystem</scope><name>ARROW_DISALLOW_COPY_AND_ASSIGN</name></member>
      <member refid="classarrow_1_1io_1_1_hadoop_file_system_1aac1c32a65354c7507539e576fe1dd2d4" prot="public" virt="non-virtual"><scope>arrow::io::HadoopFileSystem</scope><name>Chmod</name></member>
      <member refid="classarrow_1_1io_1_1_hadoop_file_system_1a8a456f9cf374a9d38d50c3f3734266ac" prot="public" virt="non-virtual"><scope>arrow::io::HadoopFileSystem</scope><name>Chown</name></member>
      <member refid="classarrow_1_1io_1_1_hadoop_file_system_1a42a1d6ef366a8d91011584cc46cf1321" prot="public" virt="non-virtual"><scope>arrow::io::HadoopFileSystem</scope><name>Connect</name></member>
      <member refid="classarrow_1_1io_1_1_hadoop_file_system_1a0837a0bcb51c6cb02d8a4173e2d131b4" prot="public" virt="non-virtual"><scope>arrow::io::HadoopFileSystem</scope><name>Delete</name></member>
      <member refid="classarrow_1_1io_1_1_hadoop_file_system_1aa53f05492b7f06c5e36c02c3f8bdb3c9" prot="public" virt="virtual"><scope>arrow::io::HadoopFileSystem</scope><name>DeleteDirectory</name></member>
      <member refid="classarrow_1_1io_1_1_hadoop_file_system_1a64caee55c8c647609e720fa3f933fafb" prot="public" virt="non-virtual"><scope>arrow::io::HadoopFileSystem</scope><name>Disconnect</name></member>
      <member refid="classarrow_1_1io_1_1_hadoop_file_system_1a41e2190b443a3a5f563343f75f4ee81d" prot="public" virt="non-virtual"><scope>arrow::io::HadoopFileSystem</scope><name>Exists</name></member>
      <member refid="classarrow_1_1io_1_1_hadoop_file_system_1aefa370d3ac82a66466bf587eb1bfa3d8" prot="public" virt="non-virtual"><scope>arrow::io::HadoopFileSystem</scope><name>GetCapacity</name></member>
      <member refid="classarrow_1_1io_1_1_hadoop_file_system_1a6e157d9876afd8819ba6970990cd28c4" prot="public" virt="virtual"><scope>arrow::io::HadoopFileSystem</scope><name>GetChildren</name></member>
      <member refid="classarrow_1_1io_1_1_hadoop_file_system_1aa0679b4306e5e46f4a10b3921d303e55" prot="public" virt="non-virtual"><scope>arrow::io::HadoopFileSystem</scope><name>GetPathInfo</name></member>
      <member refid="classarrow_1_1io_1_1_hadoop_file_system_1a09c361fc88b95afb00780da5759c72c3" prot="public" virt="non-virtual"><scope>arrow::io::HadoopFileSystem</scope><name>GetUsed</name></member>
      <member refid="classarrow_1_1io_1_1_hadoop_file_system_1a94052a5a5ae9ef03bb1ebabc1e0577eb" prot="public" virt="non-virtual"><scope>arrow::io::HadoopFileSystem</scope><name>GetWorkingDirectory</name></member>
      <member refid="classarrow_1_1io_1_1_hadoop_file_system_1a202015c042101d33b0382dd4fa672eab" prot="private" virt="non-virtual"><scope>arrow::io::HadoopFileSystem</scope><name>HadoopFileSystem</name></member>
      <member refid="classarrow_1_1io_1_1_hadoop_file_system_1a3eb5903a57e1e0453cf7fd8a9198f064" prot="private" virt="non-virtual"><scope>arrow::io::HadoopFileSystem</scope><name>HadoopFileSystemImpl</name></member>
      <member refid="classarrow_1_1io_1_1_hadoop_file_system_1aed1f33856b1077022ef14d4170b28eac" prot="private" virt="non-virtual"><scope>arrow::io::HadoopFileSystem</scope><name>impl_</name></member>
      <member refid="classarrow_1_1io_1_1_hadoop_file_system_1aea921f54031ab3ba05dd3c4d2a4159d4" prot="public" virt="non-virtual"><scope>arrow::io::HadoopFileSystem</scope><name>ListDirectory</name></member>
      <member refid="classarrow_1_1io_1_1_hadoop_file_system_1a86312271eb37d6e9f98f2b1094919c76" prot="public" virt="virtual"><scope>arrow::io::HadoopFileSystem</scope><name>MakeDirectory</name></member>
      <member refid="classarrow_1_1io_1_1_hadoop_file_system_1ab9b21a51798cd2482a670c43f9dc6b50" prot="public" virt="non-virtual"><scope>arrow::io::HadoopFileSystem</scope><name>OpenReadable</name></member>
      <member refid="classarrow_1_1io_1_1_hadoop_file_system_1a201da2d78b23241423f844aee414725a" prot="public" virt="non-virtual"><scope>arrow::io::HadoopFileSystem</scope><name>OpenReadable</name></member>
      <member refid="classarrow_1_1io_1_1_hadoop_file_system_1afeab1c1018acb3e9573841c1e71f5863" prot="public" virt="non-virtual"><scope>arrow::io::HadoopFileSystem</scope><name>OpenWritable</name></member>
      <member refid="classarrow_1_1io_1_1_hadoop_file_system_1aa0ed5a5036036503733542dfde6f6510" prot="public" virt="non-virtual"><scope>arrow::io::HadoopFileSystem</scope><name>OpenWritable</name></member>
      <member refid="classarrow_1_1io_1_1_hadoop_file_system_1a0da66d4dc0b16959b42401dee1c63374" prot="public" virt="virtual"><scope>arrow::io::HadoopFileSystem</scope><name>Rename</name></member>
      <member refid="classarrow_1_1io_1_1_hadoop_file_system_1a9911eee02c5227ad485b51f3aeb99401" prot="public" virt="virtual"><scope>arrow::io::HadoopFileSystem</scope><name>Stat</name></member>
      <member refid="classarrow_1_1io_1_1_file_system_1a4e2408c5a7d438d9ccc7284e73762336" prot="public" virt="virtual"><scope>arrow::io::HadoopFileSystem</scope><name>~FileSystem</name></member>
      <member refid="classarrow_1_1io_1_1_hadoop_file_system_1a401204a079bbd99aeaceffb48921c602" prot="public" virt="non-virtual"><scope>arrow::io::HadoopFileSystem</scope><name>~HadoopFileSystem</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
