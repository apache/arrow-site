<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__type-factories" kind="group">
    <compoundname>type-factories</compoundname>
    <title>Factory functions for creating data types</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__type-factories_1gaf642d53dac1a6b6b686fb5984d33bc9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::null</definition>
        <argsstring>()</argsstring>
        <name>null</name>
        <briefdescription>
<para>Return a <ref refid="classarrow_1_1_null_type" kindref="compound">NullType</ref> instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="236" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1ga1e585e8f1c25a9751ac9381a274df057" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::boolean</definition>
        <argsstring>()</argsstring>
        <name>boolean</name>
        <briefdescription>
<para>Return a <ref refid="classarrow_1_1_boolean_type" kindref="compound">BooleanType</ref> instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="238" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1ga9c09bf26bc03f0fb0c84a0277215dd67" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::int8</definition>
        <argsstring>()</argsstring>
        <name>int8</name>
        <briefdescription>
<para>Return a <ref refid="classarrow_1_1_int8_type" kindref="compound">Int8Type</ref> instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="240" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1ga034c5c703e15039fe76af412d349734d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::int16</definition>
        <argsstring>()</argsstring>
        <name>int16</name>
        <briefdescription>
<para>Return a <ref refid="classarrow_1_1_int16_type" kindref="compound">Int16Type</ref> instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="242" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1ga86f6bfe394347f77befa2143297ad541" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::int32</definition>
        <argsstring>()</argsstring>
        <name>int32</name>
        <briefdescription>
<para>Return a <ref refid="classarrow_1_1_int32_type" kindref="compound">Int32Type</ref> instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="244" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1ga733b16be653069b8d926529662e34e79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::int64</definition>
        <argsstring>()</argsstring>
        <name>int64</name>
        <briefdescription>
<para>Return a <ref refid="classarrow_1_1_int64_type" kindref="compound">Int64Type</ref> instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="246" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1ga4891a423be213550cc24e8ebe830673f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::uint8</definition>
        <argsstring>()</argsstring>
        <name>uint8</name>
        <briefdescription>
<para>Return a <ref refid="classarrow_1_1_u_int8_type" kindref="compound">UInt8Type</ref> instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="248" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1ga9f1e44bc2ab9b465b6e7b601eb48f0a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::uint16</definition>
        <argsstring>()</argsstring>
        <name>uint16</name>
        <briefdescription>
<para>Return a <ref refid="classarrow_1_1_u_int16_type" kindref="compound">UInt16Type</ref> instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="250" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1gae80e510cfb2931ac18c73cba0be6d894" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::uint32</definition>
        <argsstring>()</argsstring>
        <name>uint32</name>
        <briefdescription>
<para>Return a <ref refid="classarrow_1_1_u_int32_type" kindref="compound">UInt32Type</ref> instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="252" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1gae548d03275f4afaa97a269774ce6930c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::uint64</definition>
        <argsstring>()</argsstring>
        <name>uint64</name>
        <briefdescription>
<para>Return a <ref refid="classarrow_1_1_u_int64_type" kindref="compound">UInt64Type</ref> instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="254" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1ga4fac9b6739876df09be8b82d70b26734" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::float16</definition>
        <argsstring>()</argsstring>
        <name>float16</name>
        <briefdescription>
<para>Return a <ref refid="classarrow_1_1_half_float_type" kindref="compound">HalfFloatType</ref> instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="256" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1ga48fca9d26feda61c8255ec3c44a2078c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::float32</definition>
        <argsstring>()</argsstring>
        <name>float32</name>
        <briefdescription>
<para>Return a <ref refid="classarrow_1_1_float_type" kindref="compound">FloatType</ref> instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="258" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1gab6f514320a9b037ab161fa97db73b970" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::float64</definition>
        <argsstring>()</argsstring>
        <name>float64</name>
        <briefdescription>
<para>Return a <ref refid="classarrow_1_1_double_type" kindref="compound">DoubleType</ref> instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="260" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1ga63178820a26f6ecb894ad35963ca981a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::utf8</definition>
        <argsstring>()</argsstring>
        <name>utf8</name>
        <briefdescription>
<para>Return a <ref refid="classarrow_1_1_string_type" kindref="compound">StringType</ref> instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="262" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1gacc42ef32dc897b3bee1dea124cefab86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::large_utf8</definition>
        <argsstring>()</argsstring>
        <name>large_utf8</name>
        <briefdescription>
<para>Return a <ref refid="classarrow_1_1_large_string_type" kindref="compound">LargeStringType</ref> instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="264" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1ga66c3979f26a439e78d048bbac84a9232" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::binary</definition>
        <argsstring>()</argsstring>
        <name>binary</name>
        <briefdescription>
<para>Return a <ref refid="classarrow_1_1_binary_type" kindref="compound">BinaryType</ref> instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="266" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1gad41a46c979c848fee62212f2e49a8d8c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::large_binary</definition>
        <argsstring>()</argsstring>
        <name>large_binary</name>
        <briefdescription>
<para>Return a <ref refid="classarrow_1_1_large_binary_type" kindref="compound">LargeBinaryType</ref> instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="268" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1gac15fddc26c629cd5a2cb67f432739e8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::date32</definition>
        <argsstring>()</argsstring>
        <name>date32</name>
        <briefdescription>
<para>Return a <ref refid="classarrow_1_1_date32_type" kindref="compound">Date32Type</ref> instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="270" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1ga540dd093466c265aa411a65f29e950b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::date64</definition>
        <argsstring>()</argsstring>
        <name>date64</name>
        <briefdescription>
<para>Return a <ref refid="classarrow_1_1_date64_type" kindref="compound">Date64Type</ref> instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="272" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1gacaf5c20d8caef81e01621a3cad7cc9c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::fixed_size_binary</definition>
        <argsstring>(int32_t byte_width)</argsstring>
        <name>fixed_size_binary</name>
        <param>
          <type>int32_t</type>
          <declname>byte_width</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="classarrow_1_1_fixed_size_binary_type" kindref="compound">FixedSizeBinaryType</ref> instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="276" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1ga3390964f23814ab08c9604158f727883" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::decimal</definition>
        <argsstring>(int32_t precision, int32_t scale)</argsstring>
        <name>decimal</name>
        <param>
          <type>int32_t</type>
          <declname>precision</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="classarrow_1_1_decimal128_type" kindref="compound">Decimal128Type</ref> instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="280" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1ga20e7157554937088556275ed4b6485d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::list</definition>
        <argsstring>(const std::shared_ptr&lt; Field &gt; &amp;value_type)</argsstring>
        <name>list</name>
        <param>
          <type>const std::shared_ptr&lt; Field &gt; &amp;</type>
          <declname>value_type</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="classarrow_1_1_list_type" kindref="compound">ListType</ref> instance from its child <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="284" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1ga1bf7acea41aa557cf249bc91b50c8044" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::list</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;value_type)</argsstring>
        <name>list</name>
        <param>
          <type>const std::shared_ptr&lt; DataType &gt; &amp;</type>
          <declname>value_type</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="classarrow_1_1_list_type" kindref="compound">ListType</ref> instance from its child <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="288" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1ga14066c45deb0167842e3e7bd7c545ec0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::large_list</definition>
        <argsstring>(const std::shared_ptr&lt; Field &gt; &amp;value_type)</argsstring>
        <name>large_list</name>
        <param>
          <type>const std::shared_ptr&lt; Field &gt; &amp;</type>
          <declname>value_type</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="classarrow_1_1_large_list_type" kindref="compound">LargeListType</ref> instance from its child <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="292" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1ga37378b9cb539ee9284c44e2efaafff8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::large_list</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;value_type)</argsstring>
        <name>large_list</name>
        <param>
          <type>const std::shared_ptr&lt; DataType &gt; &amp;</type>
          <declname>value_type</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="classarrow_1_1_large_list_type" kindref="compound">LargeListType</ref> instance from its child <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="296" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1ga18349773a5006d18cc0071b89715cb7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::map</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;key_type, const std::shared_ptr&lt; DataType &gt; &amp;item_type, bool keys_sorted=false)</argsstring>
        <name>map</name>
        <param>
          <type>const std::shared_ptr&lt; DataType &gt; &amp;</type>
          <declname>key_type</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; DataType &gt; &amp;</type>
          <declname>item_type</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keys_sorted</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Create a <ref refid="classarrow_1_1_map_type" kindref="compound">MapType</ref> instance from its key and value DataTypes. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="300" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1ga52cb3decb340491e8947cb74b2d95b85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::map</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;key_type, const std::shared_ptr&lt; Field &gt; &amp;item_field, bool keys_sorted=false)</argsstring>
        <name>map</name>
        <param>
          <type>const std::shared_ptr&lt; DataType &gt; &amp;</type>
          <declname>key_type</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; Field &gt; &amp;</type>
          <declname>item_field</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keys_sorted</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Create a <ref refid="classarrow_1_1_map_type" kindref="compound">MapType</ref> instance from its key <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> and value field. </para>        </briefdescription>
        <detaileddescription>
<para>The field override is provided to communicate nullability of the value. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="308" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1gad5bb35da3242368660a754a0d47e518b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::fixed_size_list</definition>
        <argsstring>(const std::shared_ptr&lt; Field &gt; &amp;value_type, int32_t list_size)</argsstring>
        <name>fixed_size_list</name>
        <param>
          <type>const std::shared_ptr&lt; Field &gt; &amp;</type>
          <declname>value_type</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>list_size</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="classarrow_1_1_fixed_size_list_type" kindref="compound">FixedSizeListType</ref> instance from its child <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="314" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1ga09fb55b2d07e324f1560a8eeb142e2ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::fixed_size_list</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;value_type, int32_t list_size)</argsstring>
        <name>fixed_size_list</name>
        <param>
          <type>const std::shared_ptr&lt; DataType &gt; &amp;</type>
          <declname>value_type</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>list_size</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="classarrow_1_1_fixed_size_list_type" kindref="compound">FixedSizeListType</ref> instance from its child <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="319" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1ga4a09df951503764895e56db3fe5d053c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::duration</definition>
        <argsstring>(TimeUnit::type unit)</argsstring>
        <name>duration</name>
        <param>
          <type>TimeUnit::type</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Return a Duration instance (naming use _type to avoid namespace conflict with built in time clases). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="323" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1ga81643b6c32e9c11375084c074567cba0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::day_time_interval</definition>
        <argsstring>()</argsstring>
        <name>day_time_interval</name>
        <briefdescription>
<para>Return a <ref refid="classarrow_1_1_day_time_interval_type" kindref="compound">DayTimeIntervalType</ref> instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="326" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1gaf3c6cebcb8e66ada1ea7bbfe5d4c8978" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::month_interval</definition>
        <argsstring>()</argsstring>
        <name>month_interval</name>
        <briefdescription>
<para>Return a <ref refid="classarrow_1_1_month_interval_type" kindref="compound">MonthIntervalType</ref> instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="329" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1ga862528838ca7d12e13c09edc02bb6151" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::timestamp</definition>
        <argsstring>(TimeUnit::type unit)</argsstring>
        <name>timestamp</name>
        <param>
          <type>TimeUnit::type</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="classarrow_1_1_timestamp_type" kindref="compound">TimestampType</ref> instance from its unit. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="333" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1ga58fe6ad4ca179979515028f11d8abbca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::timestamp</definition>
        <argsstring>(TimeUnit::type unit, const std::string &amp;timezone)</argsstring>
        <name>timestamp</name>
        <param>
          <type>TimeUnit::type</type>
          <declname>unit</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>timezone</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="classarrow_1_1_timestamp_type" kindref="compound">TimestampType</ref> instance from its unit and timezone. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="337" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1gae2e76c6504af1c30799b5b4d7e737305" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::time32</definition>
        <argsstring>(TimeUnit::type unit)</argsstring>
        <name>time32</name>
        <param>
          <type>TimeUnit::type</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Create a 32-bit time type instance. </para>        </briefdescription>
        <detaileddescription>
<para>Unit can be either SECOND or MILLI </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="342" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1ga7f6f30b7153111da33e446965b5531e3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::time64</definition>
        <argsstring>(TimeUnit::type unit)</argsstring>
        <name>time64</name>
        <param>
          <type>TimeUnit::type</type>
          <declname>unit</declname>
        </param>
        <briefdescription>
<para>Create a 64-bit time type instance. </para>        </briefdescription>
        <detaileddescription>
<para>Unit can be either MICRO or NANO </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="347" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1gafa9f64b1f9435636482c7cc65ec47ecd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::struct_</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; Field &gt;&gt; &amp;fields)</argsstring>
        <name>struct_</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; Field &gt;&gt; &amp;</type>
          <declname>fields</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="classarrow_1_1_struct_type" kindref="compound">StructType</ref> instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="351" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1ga476046674d06cb75a111694064beae36" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::union_</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; Field &gt;&gt; &amp;child_fields, const std::vector&lt; int8_t &gt; &amp;type_codes, UnionMode::type mode=UnionMode::SPARSE)</argsstring>
        <name>union_</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; Field &gt;&gt; &amp;</type>
          <declname>child_fields</declname>
        </param>
        <param>
          <type>const std::vector&lt; int8_t &gt; &amp;</type>
          <declname>type_codes</declname>
        </param>
        <param>
          <type>UnionMode::type</type>
          <declname>mode</declname>
          <defval>UnionMode::SPARSE</defval>
        </param>
        <briefdescription>
<para>Create a <ref refid="classarrow_1_1_union_type" kindref="compound">UnionType</ref> instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="355" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1ga3781bbe8baac73138ad864fa53735490" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::union_</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; Field &gt;&gt; &amp;child_fields, UnionMode::type mode=UnionMode::SPARSE)</argsstring>
        <name>union_</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; Field &gt;&gt; &amp;</type>
          <declname>child_fields</declname>
        </param>
        <param>
          <type>UnionMode::type</type>
          <declname>mode</declname>
          <defval>UnionMode::SPARSE</defval>
        </param>
        <briefdescription>
<para>Create a <ref refid="classarrow_1_1_union_type" kindref="compound">UnionType</ref> instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="360" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1ga16c955b465c8bfe339b624fd605fb3a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::union_</definition>
        <argsstring>(UnionMode::type mode=UnionMode::SPARSE)</argsstring>
        <name>union_</name>
        <param>
          <type>UnionMode::type</type>
          <declname>mode</declname>
          <defval>UnionMode::SPARSE</defval>
        </param>
        <briefdescription>
<para>Create a <ref refid="classarrow_1_1_union_type" kindref="compound">UnionType</ref> instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="364" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1gaae8cac474f002c3be857a88bf9497972" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::union_</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; Array &gt;&gt; &amp;children, const std::vector&lt; std::string &gt; &amp;field_names, const std::vector&lt; int8_t &gt; &amp;type_codes, UnionMode::type mode=UnionMode::SPARSE)</argsstring>
        <name>union_</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; Array &gt;&gt; &amp;</type>
          <declname>children</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>field_names</declname>
        </param>
        <param>
          <type>const std::vector&lt; int8_t &gt; &amp;</type>
          <declname>type_codes</declname>
        </param>
        <param>
          <type>UnionMode::type</type>
          <declname>mode</declname>
          <defval>UnionMode::SPARSE</defval>
        </param>
        <briefdescription>
<para>Create a <ref refid="classarrow_1_1_union_type" kindref="compound">UnionType</ref> instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="368" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1ga009d36e7c16f62a9e192394da9a94c7c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::union_</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; Array &gt;&gt; &amp;children, const std::vector&lt; std::string &gt; &amp;field_names, UnionMode::type mode=UnionMode::SPARSE)</argsstring>
        <name>union_</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; Array &gt;&gt; &amp;</type>
          <declname>children</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>field_names</declname>
        </param>
        <param>
          <type>UnionMode::type</type>
          <declname>mode</declname>
          <defval>UnionMode::SPARSE</defval>
        </param>
        <briefdescription>
<para>Create a <ref refid="classarrow_1_1_union_type" kindref="compound">UnionType</ref> instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="374" column="1" bodyfile="/arrow/cpp/src/arrow/type_fwd.h" bodystart="374" bodyend="378"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1gabe1ec5ec1af98b0dc19aee59fdaa442a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::union_</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; Array &gt;&gt; &amp;children, UnionMode::type mode=UnionMode::SPARSE)</argsstring>
        <name>union_</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; Array &gt;&gt; &amp;</type>
          <declname>children</declname>
        </param>
        <param>
          <type>UnionMode::type</type>
          <declname>mode</declname>
          <defval>UnionMode::SPARSE</defval>
        </param>
        <briefdescription>
<para>Create a <ref refid="classarrow_1_1_union_type" kindref="compound">UnionType</ref> instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="382" column="1" bodyfile="/arrow/cpp/src/arrow/type_fwd.h" bodystart="382" bodyend="385"/>
      </memberdef>
      <memberdef kind="function" id="group__type-factories_1ga36f61c68b2a04a9d179cb56ff1186c59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; DataType &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::dictionary</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;index_type, const std::shared_ptr&lt; DataType &gt; &amp;dict_type, bool ordered=false)</argsstring>
        <name>dictionary</name>
        <param>
          <type>const std::shared_ptr&lt; DataType &gt; &amp;</type>
          <declname>index_type</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; DataType &gt; &amp;</type>
          <declname>dict_type</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>ordered</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Create a <ref refid="classarrow_1_1_dictionary_type" kindref="compound">DictionaryType</ref> instance. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">index_type</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the dictionary indices (must be a signed integer) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dict_type</parametername>
</parameternamelist>
<parameterdescription>
<para>the type of the values in the variable dictionary </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ordered</parametername>
</parameternamelist>
<parameterdescription>
<para>true if the order of the dictionary values has semantic meaning and should be preserved where possible </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_fwd.h" line="394" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Factory functions for creating data types. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
