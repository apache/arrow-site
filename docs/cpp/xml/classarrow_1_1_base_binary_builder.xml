<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_base_binary_builder" kind="class" language="C++" prot="public">
    <compoundname>arrow::BaseBinaryBuilder</compoundname>
    <basecompoundref refid="classarrow_1_1_array_builder" prot="public" virt="non-virtual">arrow::ArrayBuilder</basecompoundref>
    <includes refid="builder__binary_8h" local="no">arrow/array/builder_binary.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>TYPE</declname>
        <defname>TYPE</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classarrow_1_1_base_binary_builder_1a548cd46c29eba3853a98b605106d05ee" prot="public" static="no">
        <type>TYPE</type>
        <definition>using arrow::BaseBinaryBuilder&lt; TYPE &gt;::TypeClass =  TYPE</definition>
        <argsstring></argsstring>
        <name>TypeClass</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_binary.h" line="46" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_binary.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classarrow_1_1_base_binary_builder_1a68599cf6ce54173a24df568d42447bb5" prot="public" static="no">
        <type>typename TypeClass::offset_type</type>
        <definition>using arrow::BaseBinaryBuilder&lt; TYPE &gt;::offset_type =  typename TypeClass::offset_type</definition>
        <argsstring></argsstring>
        <name>offset_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_binary.h" line="47" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_binary.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classarrow_1_1_base_binary_builder_1a927a9ee2d418252feb63a075f232aadc" prot="protected" static="no" mutable="no">
        <type><ref refid="classarrow_1_1_typed_buffer_builder" kindref="compound">TypedBufferBuilder</ref>&lt; <ref refid="classarrow_1_1_base_binary_builder_1a68599cf6ce54173a24df568d42447bb5" kindref="member">offset_type</ref> &gt;</type>
        <definition>TypedBufferBuilder&lt;offset_type&gt; arrow::BaseBinaryBuilder&lt; TYPE &gt;::offsets_builder_</definition>
        <argsstring></argsstring>
        <name>offsets_builder_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_binary.h" line="313" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_binary.h" bodystart="313" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_base_binary_builder_1a8f20bc7bf837919c52e00fcf847554c2" prot="protected" static="no" mutable="no">
        <type><ref refid="classarrow_1_1_typed_buffer_builder" kindref="compound">TypedBufferBuilder</ref>&lt; uint8_t &gt;</type>
        <definition>TypedBufferBuilder&lt;uint8_t&gt; arrow::BaseBinaryBuilder&lt; TYPE &gt;::value_data_builder_</definition>
        <argsstring></argsstring>
        <name>value_data_builder_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_binary.h" line="314" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_binary.h" bodystart="314" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1_base_binary_builder_1ab240ad50308440395d5226a3c6503811" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::BaseBinaryBuilder&lt; TYPE &gt;::BaseBinaryBuilder</definition>
        <argsstring>(MemoryPool *pool=default_memory_pool())</argsstring>
        <name>BaseBinaryBuilder</name>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
          <defval><ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">default_memory_pool</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_binary.h" line="49" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_binary.h" bodystart="49" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_binary_builder_1a8155064d46a06faebeea382a65439f9b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::BaseBinaryBuilder&lt; TYPE &gt;::BaseBinaryBuilder</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;type, MemoryPool *pool)</argsstring>
        <name>BaseBinaryBuilder</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_binary.h" line="52" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_binary.h" bodystart="52" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_binary_builder_1a2879a4313c6e3076581c42c3cd3e0f32" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::BaseBinaryBuilder&lt; TYPE &gt;::Append</definition>
        <argsstring>(const uint8_t *value, offset_type length)</argsstring>
        <name>Append</name>
        <param>
          <type>const uint8_t *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1_base_binary_builder_1a68599cf6ce54173a24df568d42447bb5" kindref="member">offset_type</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_binary.h" line="55" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_binary.h" bodystart="55" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_binary_builder_1ae418ffb2c33bc8af9c5383abed9a6037" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::BaseBinaryBuilder&lt; TYPE &gt;::Append</definition>
        <argsstring>(const char *value, offset_type length)</argsstring>
        <name>Append</name>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1_base_binary_builder_1a68599cf6ce54173a24df568d42447bb5" kindref="member">offset_type</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_binary.h" line="67" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_binary.h" bodystart="67" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_binary_builder_1a26def5a698d60a1a79eaf642b4b441bd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::BaseBinaryBuilder&lt; TYPE &gt;::Append</definition>
        <argsstring>(util::string_view value)</argsstring>
        <name>Append</name>
        <param>
          <type>util::string_view</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_binary.h" line="71" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_binary.h" bodystart="71" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_binary_builder_1ad3d58ebc0b0233d4d99c69f4d8509c28" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::BaseBinaryBuilder&lt; TYPE &gt;::AppendNulls</definition>
        <argsstring>(int64_t length) final</argsstring>
        <name>AppendNulls</name>
        <reimplements refid="classarrow_1_1_array_builder_1a0900943af067e85d9fa227123c223b14">AppendNulls</reimplements>
        <param>
          <type>int64_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_binary.h" line="75" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_binary.h" bodystart="75" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_binary_builder_1adc7a7beaf773747268a8b51d163ad801" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::BaseBinaryBuilder&lt; TYPE &gt;::AppendNull</definition>
        <argsstring>() final</argsstring>
        <name>AppendNull</name>
        <reimplements refid="classarrow_1_1_array_builder_1a6f7c2fbebb93e8630142dca01a328015">AppendNull</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_binary.h" line="88" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_binary.h" bodystart="88" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_binary_builder_1adde0685931a1474bc8bb316a2983e63d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void arrow::BaseBinaryBuilder&lt; TYPE &gt;::UnsafeAppend</definition>
        <argsstring>(const uint8_t *value, offset_type length)</argsstring>
        <name>UnsafeAppend</name>
        <param>
          <type>const uint8_t *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1_base_binary_builder_1a68599cf6ce54173a24df568d42447bb5" kindref="member">offset_type</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Append without checking capacity. </para>        </briefdescription>
        <detaileddescription>
<para>Offsets and data should have been presized using <ref refid="classarrow_1_1_array_builder_1afe8448fda39a8529a119bde5ba7ba119" kindref="member">Reserve()</ref> and <ref refid="classarrow_1_1_base_binary_builder_1a5b7e9f0b08c07fc417c47c9f601156ee" kindref="member">ReserveData()</ref>, respectively. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_binary.h" line="99" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_binary.h" bodystart="99" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_binary_builder_1aa2be993a29c5ac9886869b8cb0c8dd8c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void arrow::BaseBinaryBuilder&lt; TYPE &gt;::UnsafeAppend</definition>
        <argsstring>(const char *value, offset_type length)</argsstring>
        <name>UnsafeAppend</name>
        <param>
          <type>const char *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1_base_binary_builder_1a68599cf6ce54173a24df568d42447bb5" kindref="member">offset_type</ref></type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_binary.h" line="105" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_binary.h" bodystart="105" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_binary_builder_1a84c5b96dd42449e3e375a97c0925949e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void arrow::BaseBinaryBuilder&lt; TYPE &gt;::UnsafeAppend</definition>
        <argsstring>(const std::string &amp;value)</argsstring>
        <name>UnsafeAppend</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_binary.h" line="109" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_binary.h" bodystart="109" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_binary_builder_1a9346a48e354396e8e3dbe7356d7081b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void arrow::BaseBinaryBuilder&lt; TYPE &gt;::UnsafeAppend</definition>
        <argsstring>(util::string_view value)</argsstring>
        <name>UnsafeAppend</name>
        <param>
          <type>util::string_view</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_binary.h" line="113" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_binary.h" bodystart="113" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_binary_builder_1afa02207b952f50cea4025cbe6475d844" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void arrow::BaseBinaryBuilder&lt; TYPE &gt;::UnsafeAppendNull</definition>
        <argsstring>()</argsstring>
        <name>UnsafeAppendNull</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_binary.h" line="117" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_binary.h" bodystart="117" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_binary_builder_1afdc7c1c5d0e2e0ce2cf4db0c6f67238e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::BaseBinaryBuilder&lt; TYPE &gt;::AppendValues</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;values, const uint8_t *valid_bytes=NULLPTR)</argsstring>
        <name>AppendValues</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>values</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>valid_bytes</declname>
          <defval><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></defval>
        </param>
        <briefdescription>
<para>Append a sequence of strings in one shot. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">values</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector of strings </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">valid_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of bytes where non-zero indicates a valid (non-null) value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_binary.h" line="129" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_binary.h" bodystart="129" bodyend="156"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_binary_builder_1ae7d4b55b71abcbeaa76a3e60c1e14544" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::BaseBinaryBuilder&lt; TYPE &gt;::AppendValues</definition>
        <argsstring>(const char **values, int64_t length, const uint8_t *valid_bytes=NULLPTR)</argsstring>
        <name>AppendValues</name>
        <param>
          <type>const char **</type>
          <declname>values</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>valid_bytes</declname>
          <defval><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></defval>
        </param>
        <briefdescription>
<para>Append a sequence of nul-terminated strings in one shot. </para>        </briefdescription>
        <detaileddescription>
<para>If one of the values is NULL, it is processed as a null value even if the corresponding valid_bytes entry is 1.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">values</parametername>
</parameternamelist>
<parameterdescription>
<para>a contiguous C array of nul-terminated char * </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of values to append </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">valid_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of bytes where non-zero indicates a valid (non-null) value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_binary.h" line="167" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_binary.h" bodystart="167" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_binary_builder_1a8b28644573282a55a360478ba160fa8f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void arrow::BaseBinaryBuilder&lt; TYPE &gt;::Reset</definition>
        <argsstring>() override</argsstring>
        <name>Reset</name>
        <reimplements refid="classarrow_1_1_array_builder_1a71a25653bdf242da1b3a317f4fd49a98">Reset</reimplements>
        <briefdescription>
<para>Reset the builder. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_binary.h" line="225" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_binary.h" bodystart="225" bodyend="229"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_binary_builder_1a39a192382af4e821b8c7686bb0b0f3f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::BaseBinaryBuilder&lt; TYPE &gt;::Resize</definition>
        <argsstring>(int64_t capacity) override</argsstring>
        <name>Resize</name>
        <reimplements refid="classarrow_1_1_array_builder_1a994d873bec453c33fbaeb995442d520b">Resize</reimplements>
        <param>
          <type>int64_t</type>
          <declname>capacity</declname>
        </param>
        <briefdescription>
<para>Ensure that enough memory has been allocated to fit the indicated number of total elements in the builder, including any that have already been appended. </para>        </briefdescription>
        <detaileddescription>
<para>Does not account for reallocations that may be due to variable size data, like binary values. To make space for incremental appends, use Reserve instead.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum number of total array values to accommodate. Must be greater than the current capacity. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_binary.h" line="231" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_binary.h" bodystart="231" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_binary_builder_1a5b7e9f0b08c07fc417c47c9f601156ee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::BaseBinaryBuilder&lt; TYPE &gt;::ReserveData</definition>
        <argsstring>(int64_t elements)</argsstring>
        <name>ReserveData</name>
        <param>
          <type>int64_t</type>
          <declname>elements</declname>
        </param>
        <briefdescription>
<para>Ensures there is enough allocated capacity to append the indicated number of bytes to the value data buffer without additional allocations. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_binary.h" line="247" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_binary.h" bodystart="247" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_binary_builder_1a083a647ec622d5da23981aaa7ad77fe6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::BaseBinaryBuilder&lt; TYPE &gt;::FinishInternal</definition>
        <argsstring>(std::shared_ptr&lt; ArrayData &gt; *out) override</argsstring>
        <name>FinishInternal</name>
        <reimplements refid="classarrow_1_1_array_builder_1a0e0aea1c332b472f3671bea9da5ec473">FinishInternal</reimplements>
        <param>
          <type>std::shared_ptr&lt; <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Return result of builder as an internal generic <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> object. </para>        </briefdescription>
        <detaileddescription>
<para>Resets builder except for dictionary builder</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the finalized <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_binary.h" line="256" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_binary.h" bodystart="256" bodyend="270"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_binary_builder_1a37ce09233654b14608e0dc9b8aa9ff07" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const uint8_t *</type>
        <definition>const uint8_t* arrow::BaseBinaryBuilder&lt; TYPE &gt;::value_data</definition>
        <argsstring>() const</argsstring>
        <name>value_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>data pointer of the value date builder </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_binary.h" line="273" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_binary.h" bodystart="273" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_binary_builder_1a67c35b69662e4193c9e67b2ea7facc1c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t arrow::BaseBinaryBuilder&lt; TYPE &gt;::value_data_length</definition>
        <argsstring>() const</argsstring>
        <name>value_data_length</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>size of values buffer so far </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_binary.h" line="275" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_binary.h" bodystart="275" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_binary_builder_1ab1ab8ec0b4d22c1d371c8115cb69c8fe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t arrow::BaseBinaryBuilder&lt; TYPE &gt;::value_data_capacity</definition>
        <argsstring>() const</argsstring>
        <name>value_data_capacity</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>capacity of values buffer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_binary.h" line="277" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_binary.h" bodystart="277" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_binary_builder_1abb30d4a728b15429d40a486409ffc570" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classarrow_1_1_base_binary_builder_1a68599cf6ce54173a24df568d42447bb5" kindref="member">offset_type</ref> *</type>
        <definition>const offset_type* arrow::BaseBinaryBuilder&lt; TYPE &gt;::offsets_data</definition>
        <argsstring>() const</argsstring>
        <name>offsets_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>data pointer of the value date builder </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_binary.h" line="280" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_binary.h" bodystart="280" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_binary_builder_1a58fb7bdf885da9f2ffaeb50776852a9c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const uint8_t *</type>
        <definition>const uint8_t* arrow::BaseBinaryBuilder&lt; TYPE &gt;::GetValue</definition>
        <argsstring>(int64_t i, offset_type *out_length) const</argsstring>
        <name>GetValue</name>
        <param>
          <type>int64_t</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1_base_binary_builder_1a68599cf6ce54173a24df568d42447bb5" kindref="member">offset_type</ref> *</type>
          <declname>out_length</declname>
        </param>
        <briefdescription>
<para>Temporary access to a value. </para>        </briefdescription>
        <detaileddescription>
<para>This pointer becomes invalid on the next modifying operation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_binary.h" line="285" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_binary.h" bodystart="285" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_binary_builder_1a7da6a648a661e83a8a63e14ded5c53aa" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_base_binary_builder_1a68599cf6ce54173a24df568d42447bb5" kindref="member">offset_type</ref></type>
        <definition>offset_type arrow::BaseBinaryBuilder&lt; TYPE &gt;::offset</definition>
        <argsstring>(int64_t i) const</argsstring>
        <name>offset</name>
        <param>
          <type>int64_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_binary.h" line="296" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_binary.h" bodystart="296" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_binary_builder_1ab131a922dbb14ede1223714ff46b8d32" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>util::string_view</type>
        <definition>util::string_view arrow::BaseBinaryBuilder&lt; TYPE &gt;::GetView</definition>
        <argsstring>(int64_t i) const</argsstring>
        <name>GetView</name>
        <param>
          <type>int64_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Temporary access to a value. </para>        </briefdescription>
        <detaileddescription>
<para>This view becomes invalid on the next modifying operation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_binary.h" line="301" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_binary.h" bodystart="301" bodyend="305"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1_base_binary_builder_1ad236580ddb444dd7266e9258b0d815fc" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr int64_t</type>
        <definition>static constexpr int64_t arrow::BaseBinaryBuilder&lt; TYPE &gt;::memory_limit</definition>
        <argsstring>()</argsstring>
        <name>memory_limit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_binary.h" line="308" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_binary.h" bodystart="308" bodyend="310"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classarrow_1_1_base_binary_builder_1a1ffe33a0d231398ed5745a4138d31a40" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::BaseBinaryBuilder&lt; TYPE &gt;::AppendOverflow</definition>
        <argsstring>(int64_t num_bytes)</argsstring>
        <name>AppendOverflow</name>
        <param>
          <type>int64_t</type>
          <declname>num_bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_binary.h" line="316" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_binary.h" bodystart="316" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_binary_builder_1ab070121e13bb40b89541c4f386e5f7b1" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::BaseBinaryBuilder&lt; TYPE &gt;::AppendNextOffset</definition>
        <argsstring>()</argsstring>
        <name>AppendNextOffset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_binary.h" line="321" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_binary.h" bodystart="321" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_binary_builder_1aecf1f34175ad51584699bd28465259ff" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void arrow::BaseBinaryBuilder&lt; TYPE &gt;::UnsafeAppendNextOffset</definition>
        <argsstring>()</argsstring>
        <name>UnsafeAppendNextOffset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_binary.h" line="329" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_binary.h" bodystart="329" bodyend="332"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="199">
        <label>arrow::ArrayBuilder</label>
        <link refid="classarrow_1_1_array_builder"/>
      </node>
      <node id="198">
        <label>arrow::BaseBinaryBuilder&lt; TYPE &gt;</label>
        <link refid="classarrow_1_1_base_binary_builder"/>
        <childnode refid="199" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="204">
        <label>arrow::TypedBufferBuilder&lt; uint8_t &gt;</label>
        <link refid="classarrow_1_1_typed_buffer_builder"/>
      </node>
      <node id="202">
        <label>arrow::MemoryPool</label>
        <link refid="classarrow_1_1_memory_pool"/>
      </node>
      <node id="203">
        <label>arrow::TypedBufferBuilder&lt; bool &gt;</label>
        <link refid="classarrow_1_1_typed_buffer_builder_3_01bool_01_4"/>
      </node>
      <node id="201">
        <label>arrow::ArrayBuilder</label>
        <link refid="classarrow_1_1_array_builder"/>
        <childnode refid="202" relation="usage">
          <edgelabel>pool_</edgelabel>
        </childnode>
        <childnode refid="203" relation="usage">
          <edgelabel>null_bitmap_builder_</edgelabel>
        </childnode>
      </node>
      <node id="200">
        <label>arrow::BaseBinaryBuilder&lt; TYPE &gt;</label>
        <link refid="classarrow_1_1_base_binary_builder"/>
        <childnode refid="201" relation="public-inheritance">
        </childnode>
        <childnode refid="204" relation="usage">
          <edgelabel>value_data_builder_</edgelabel>
        </childnode>
        <childnode refid="205" relation="usage">
          <edgelabel>offsets_builder_</edgelabel>
        </childnode>
      </node>
      <node id="205">
        <label>arrow::TypedBufferBuilder&lt; offset_type &gt;</label>
        <link refid="classarrow_1_1_typed_buffer_builder"/>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/array/builder_binary.h" line="44" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_binary.h" bodystart="44" bodyend="333"/>
    <listofallmembers>
      <member refid="classarrow_1_1_array_builder_1a630ea6ee96e26b8f1a2d08b45180fb32" prot="public" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>Advance</name></member>
      <member refid="classarrow_1_1_base_binary_builder_1a2879a4313c6e3076581c42c3cd3e0f32" prot="public" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>Append</name></member>
      <member refid="classarrow_1_1_base_binary_builder_1ae418ffb2c33bc8af9c5383abed9a6037" prot="public" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>Append</name></member>
      <member refid="classarrow_1_1_base_binary_builder_1a26def5a698d60a1a79eaf642b4b441bd" prot="public" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>Append</name></member>
      <member refid="classarrow_1_1_base_binary_builder_1ab070121e13bb40b89541c4f386e5f7b1" prot="protected" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>AppendNextOffset</name></member>
      <member refid="classarrow_1_1_base_binary_builder_1adc7a7beaf773747268a8b51d163ad801" prot="public" virt="virtual"><scope>arrow::BaseBinaryBuilder</scope><name>AppendNull</name></member>
      <member refid="classarrow_1_1_base_binary_builder_1ad3d58ebc0b0233d4d99c69f4d8509c28" prot="public" virt="virtual"><scope>arrow::BaseBinaryBuilder</scope><name>AppendNulls</name></member>
      <member refid="classarrow_1_1_base_binary_builder_1a1ffe33a0d231398ed5745a4138d31a40" prot="protected" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>AppendOverflow</name></member>
      <member refid="classarrow_1_1_array_builder_1a21c1d9818e379f41e6c72df407ae029d" prot="protected" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>AppendToBitmap</name></member>
      <member refid="classarrow_1_1_array_builder_1a17c9bf5211cb980518df3bb1c33ba4fc" prot="protected" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>AppendToBitmap</name></member>
      <member refid="classarrow_1_1_array_builder_1ab8bb1f62d1eaa27de03c41a2db3d53e3" prot="protected" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>AppendToBitmap</name></member>
      <member refid="classarrow_1_1_base_binary_builder_1afdc7c1c5d0e2e0ce2cf4db0c6f67238e" prot="public" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>AppendValues</name></member>
      <member refid="classarrow_1_1_base_binary_builder_1ae7d4b55b71abcbeaa76a3e60c1e14544" prot="public" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>AppendValues</name></member>
      <member refid="classarrow_1_1_array_builder_1ab5fe829691bef00b33894d51e16e6aa5" prot="public" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>ArrayBuilder</name></member>
      <member refid="classarrow_1_1_base_binary_builder_1ab240ad50308440395d5226a3c6503811" prot="public" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>BaseBinaryBuilder</name></member>
      <member refid="classarrow_1_1_base_binary_builder_1a8155064d46a06faebeea382a65439f9b" prot="public" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>BaseBinaryBuilder</name></member>
      <member refid="classarrow_1_1_array_builder_1a0236e815af8f62c98bd612eea219cd73" prot="public" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>capacity</name></member>
      <member refid="classarrow_1_1_array_builder_1aeb92737fe5ada5b372459705c1690d7e" prot="protected" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>capacity_</name></member>
      <member refid="classarrow_1_1_array_builder_1a0d77ad3f24791679196dda8b3ac84437" prot="protected" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>CheckCapacity</name></member>
      <member refid="classarrow_1_1_array_builder_1aad4a1ed2c24204b1cc21e44ab0ad444b" prot="public" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>child</name></member>
      <member refid="classarrow_1_1_array_builder_1a66ce8a6890bf6f222baf1642557d889b" prot="protected" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>children_</name></member>
      <member refid="classarrow_1_1_array_builder_1a67b2227edb4b51bc44425f1c8a439819" prot="public" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>Finish</name></member>
      <member refid="classarrow_1_1_base_binary_builder_1a083a647ec622d5da23981aaa7ad77fe6" prot="public" virt="virtual"><scope>arrow::BaseBinaryBuilder</scope><name>FinishInternal</name></member>
      <member refid="classarrow_1_1_array_builder_1a9f90da9e81d9db4bc9277458ba70d46a" prot="protected" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>FinishTyped</name></member>
      <member refid="classarrow_1_1_base_binary_builder_1a58fb7bdf885da9f2ffaeb50776852a9c" prot="public" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>GetValue</name></member>
      <member refid="classarrow_1_1_base_binary_builder_1ab131a922dbb14ede1223714ff46b8d32" prot="public" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>GetView</name></member>
      <member refid="classarrow_1_1_array_builder_1a296ac75b9b3d877192e37681c66513ba" prot="public" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>length</name></member>
      <member refid="classarrow_1_1_array_builder_1ae8b7ebc042e6684440bd9e1c77f0f5c1" prot="protected" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>length_</name></member>
      <member refid="classarrow_1_1_base_binary_builder_1ad236580ddb444dd7266e9258b0d815fc" prot="public" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>memory_limit</name></member>
      <member refid="classarrow_1_1_array_builder_1a0f32beedba413982480c5df287946922" prot="protected" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>null_bitmap_builder_</name></member>
      <member refid="classarrow_1_1_array_builder_1aad098f61890072a4576867a7cf4fb9ee" prot="public" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>null_count</name></member>
      <member refid="classarrow_1_1_array_builder_1a9ea96ba4121857ab23241b6b408051b9" prot="protected" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>null_count_</name></member>
      <member refid="classarrow_1_1_array_builder_1aa829b8339092408c9d710cc2c1bdc46a" prot="public" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>num_children</name></member>
      <member refid="classarrow_1_1_base_binary_builder_1a7da6a648a661e83a8a63e14ded5c53aa" prot="public" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>offset</name></member>
      <member refid="classarrow_1_1_base_binary_builder_1a68599cf6ce54173a24df568d42447bb5" prot="public" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>offset_type</name></member>
      <member refid="classarrow_1_1_base_binary_builder_1a927a9ee2d418252feb63a075f232aadc" prot="protected" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>offsets_builder_</name></member>
      <member refid="classarrow_1_1_base_binary_builder_1abb30d4a728b15429d40a486409ffc570" prot="public" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>offsets_data</name></member>
      <member refid="classarrow_1_1_array_builder_1a33e3aa20cedda9f6d8581809437f1c86" prot="protected" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>pool_</name></member>
      <member refid="classarrow_1_1_array_builder_1afe8448fda39a8529a119bde5ba7ba119" prot="public" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>Reserve</name></member>
      <member refid="classarrow_1_1_base_binary_builder_1a5b7e9f0b08c07fc417c47c9f601156ee" prot="public" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>ReserveData</name></member>
      <member refid="classarrow_1_1_base_binary_builder_1a8b28644573282a55a360478ba160fa8f" prot="public" virt="virtual"><scope>arrow::BaseBinaryBuilder</scope><name>Reset</name></member>
      <member refid="classarrow_1_1_base_binary_builder_1a39a192382af4e821b8c7686bb0b0f3f7" prot="public" virt="virtual"><scope>arrow::BaseBinaryBuilder</scope><name>Resize</name></member>
      <member refid="classarrow_1_1_array_builder_1aa505ec95646314c3b9254e0cce39538b" prot="protected" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>SetNotNull</name></member>
      <member refid="classarrow_1_1_array_builder_1a1e3e49019e307f0829ef66b72ce1b82e" prot="protected" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>TrimBuffer</name></member>
      <member refid="classarrow_1_1_array_builder_1a39b4b420be1fcf4fe7219fe953eb65c7" prot="public" virt="pure-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>type</name></member>
      <member refid="classarrow_1_1_base_binary_builder_1a548cd46c29eba3853a98b605106d05ee" prot="public" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>TypeClass</name></member>
      <member refid="classarrow_1_1_base_binary_builder_1adde0685931a1474bc8bb316a2983e63d" prot="public" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>UnsafeAppend</name></member>
      <member refid="classarrow_1_1_base_binary_builder_1aa2be993a29c5ac9886869b8cb0c8dd8c" prot="public" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>UnsafeAppend</name></member>
      <member refid="classarrow_1_1_base_binary_builder_1a84c5b96dd42449e3e375a97c0925949e" prot="public" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>UnsafeAppend</name></member>
      <member refid="classarrow_1_1_base_binary_builder_1a9346a48e354396e8e3dbe7356d7081b0" prot="public" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>UnsafeAppend</name></member>
      <member refid="classarrow_1_1_base_binary_builder_1aecf1f34175ad51584699bd28465259ff" prot="protected" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>UnsafeAppendNextOffset</name></member>
      <member refid="classarrow_1_1_base_binary_builder_1afa02207b952f50cea4025cbe6475d844" prot="public" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>UnsafeAppendNull</name></member>
      <member refid="classarrow_1_1_array_builder_1a2dbe80584eac62147112c4d0a43ceea2" prot="protected" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>UnsafeAppendToBitmap</name></member>
      <member refid="classarrow_1_1_array_builder_1afd319659d3125af8a72c0c529c329c12" prot="protected" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>UnsafeAppendToBitmap</name></member>
      <member refid="classarrow_1_1_array_builder_1a40a4e3c231f1f47dcd046c42ee63b63b" prot="protected" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>UnsafeAppendToBitmap</name></member>
      <member refid="classarrow_1_1_array_builder_1a361c8efe3030a75126cbbbe90e9a3ee4" prot="protected" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>UnsafeAppendToBitmap</name></member>
      <member refid="classarrow_1_1_array_builder_1aa0a2125633a3cdb1860d3f62d44ac4a1" prot="protected" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>UnsafeSetNotNull</name></member>
      <member refid="classarrow_1_1_array_builder_1ab5622a696215f318672d5a800d4bfe48" prot="protected" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>UnsafeSetNull</name></member>
      <member refid="classarrow_1_1_base_binary_builder_1a37ce09233654b14608e0dc9b8aa9ff07" prot="public" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>value_data</name></member>
      <member refid="classarrow_1_1_base_binary_builder_1a8f20bc7bf837919c52e00fcf847554c2" prot="protected" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>value_data_builder_</name></member>
      <member refid="classarrow_1_1_base_binary_builder_1ab1ab8ec0b4d22c1d371c8115cb69c8fe" prot="public" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>value_data_capacity</name></member>
      <member refid="classarrow_1_1_base_binary_builder_1a67c35b69662e4193c9e67b2ea7facc1c" prot="public" virt="non-virtual"><scope>arrow::BaseBinaryBuilder</scope><name>value_data_length</name></member>
      <member refid="classarrow_1_1_array_builder_1a74bb29b347e12ed7528925d12db109a7" prot="public" virt="virtual"><scope>arrow::BaseBinaryBuilder</scope><name>~ArrayBuilder</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
