<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacearrow_1_1cuda" kind="namespace" language="C++">
    <compoundname>arrow::cuda</compoundname>
    <innerclass refid="classarrow_1_1cuda_1_1_cuda_buffer" prot="public">arrow::cuda::CudaBuffer</innerclass>
    <innerclass refid="classarrow_1_1cuda_1_1_cuda_buffer_reader" prot="public">arrow::cuda::CudaBufferReader</innerclass>
    <innerclass refid="classarrow_1_1cuda_1_1_cuda_buffer_writer" prot="public">arrow::cuda::CudaBufferWriter</innerclass>
    <innerclass refid="classarrow_1_1cuda_1_1_cuda_context" prot="public">arrow::cuda::CudaContext</innerclass>
    <innerclass refid="classarrow_1_1cuda_1_1_cuda_device" prot="public">arrow::cuda::CudaDevice</innerclass>
    <innerclass refid="classarrow_1_1cuda_1_1_cuda_device_manager" prot="public">arrow::cuda::CudaDeviceManager</innerclass>
    <innerclass refid="classarrow_1_1cuda_1_1_cuda_host_buffer" prot="public">arrow::cuda::CudaHostBuffer</innerclass>
    <innerclass refid="classarrow_1_1cuda_1_1_cuda_ipc_mem_handle" prot="public">arrow::cuda::CudaIpcMemHandle</innerclass>
    <innerclass refid="classarrow_1_1cuda_1_1_cuda_memory_manager" prot="public">arrow::cuda::CudaMemoryManager</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__cuda-ipc-functions_1ga1d251e8fccb9ad26d0988e4127c028dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1cuda_1_1_cuda_buffer" kindref="compound">CudaBuffer</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;CudaBuffer&gt; &gt; arrow::cuda::SerializeRecordBatch</definition>
        <argsstring>(const RecordBatch &amp;batch, CudaContext *ctx)</argsstring>
        <name>SerializeRecordBatch</name>
        <param>
          <type>const <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref> &amp;</type>
          <declname>batch</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1cuda_1_1_cuda_context" kindref="compound">CudaContext</ref> *</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Write record batch message to GPU device memory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">batch</parametername>
</parameternamelist>
<parameterdescription>
<para>record batch to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classarrow_1_1cuda_1_1_cuda_context" kindref="compound">CudaContext</ref> to allocate device memory from </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1cuda_1_1_cuda_buffer" kindref="compound">CudaBuffer</ref> or <ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_arrow_ipc.h" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__cuda-ipc-functions_1ga95f8dc7cf1e2f5f20c31300e7eec3d25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;RecordBatch&gt; &gt; arrow::cuda::ReadRecordBatch</definition>
        <argsstring>(const std::shared_ptr&lt; Schema &gt; &amp;schema, const std::shared_ptr&lt; CudaBuffer &gt; &amp;buffer, MemoryPool *pool=default_memory_pool())</argsstring>
        <name>ReadRecordBatch</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt; &amp;</type>
          <declname>schema</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1cuda_1_1_cuda_buffer" kindref="compound">CudaBuffer</ref> &gt; &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
          <defval><ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">default_memory_pool</ref>()</defval>
        </param>
        <briefdescription>
<para>ReadRecordBatch specialized to handle metadata on CUDA device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">schema</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> for the record batch </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classarrow_1_1cuda_1_1_cuda_buffer" kindref="compound">CudaBuffer</ref> containing the complete IPC message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pool</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> to use for allocating space for the metadata </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref> or <ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_arrow_ipc.h" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1cuda_1a10e8fc4657cd1bc1226be86f8207a33a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::cuda::SerializeRecordBatch</definition>
        <argsstring>(const RecordBatch &amp;batch, CudaContext *ctx, std::shared_ptr&lt; CudaBuffer &gt; *out)</argsstring>
        <name>SerializeRecordBatch</name>
        <param>
          <type>const <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref> &amp;</type>
          <declname>batch</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1cuda_1_1_cuda_context" kindref="compound">CudaContext</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1cuda_1_1_cuda_buffer" kindref="compound">CudaBuffer</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Write record batch message to GPU device memory. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">batch</parametername>
</parameternamelist>
<parameterdescription>
<para>record batch to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classarrow_1_1cuda_1_1_cuda_context" kindref="compound">CudaContext</ref> to allocate device memory from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the returned device buffer which contains the record batch message </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_arrow_ipc.h" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1cuda_1a3b955ff401075bb4a07617d12595469f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::cuda::ReadMessage</definition>
        <argsstring>(CudaBufferReader *reader, MemoryPool *pool, std::unique_ptr&lt; ipc::Message &gt; *message)</argsstring>
        <name>ReadMessage</name>
        <param>
          <type><ref refid="classarrow_1_1cuda_1_1_cuda_buffer_reader" kindref="compound">CudaBufferReader</ref> *</type>
          <declname>reader</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classarrow_1_1ipc_1_1_message" kindref="compound">ipc::Message</ref> &gt; *</type>
          <declname>message</declname>
        </param>
        <briefdescription>
<para>Read Arrow IPC message located on GPU device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">reader</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classarrow_1_1cuda_1_1_cuda_buffer_reader" kindref="compound">CudaBufferReader</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pool</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> to allocate CPU memory for the metadata </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">message</parametername>
</parameternamelist>
<parameterdescription>
<para>the deserialized message, body still on device</para></parameterdescription>
</parameteritem>
</parameterlist>
This function reads the message metadata into host memory, but leaves the message body on the device </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_arrow_ipc.h" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1cuda_1a2ea27e130a2b625b4d2b807eb61d2faa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::cuda::ReadRecordBatch</definition>
        <argsstring>(const std::shared_ptr&lt; Schema &gt; &amp;schema, const std::shared_ptr&lt; CudaBuffer &gt; &amp;buffer, MemoryPool *pool, std::shared_ptr&lt; RecordBatch &gt; *out)</argsstring>
        <name>ReadRecordBatch</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt; &amp;</type>
          <declname>schema</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1cuda_1_1_cuda_buffer" kindref="compound">CudaBuffer</ref> &gt; &amp;</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>ReadRecordBatch specialized to handle metadata on CUDA device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">schema</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> for the record batch </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classarrow_1_1cuda_1_1_cuda_buffer" kindref="compound">CudaBuffer</ref> containing the complete IPC message </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pool</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> to use for allocating space for the metadata </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the reconstructed <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref>, with device pointers </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_arrow_ipc.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1cuda_1a154b7598ae6ef15fddabf7e770bbf808" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::cuda::IsCudaDevice</definition>
        <argsstring>(const Device &amp;device)</argsstring>
        <name>IsCudaDevice</name>
        <param>
          <type>const <ref refid="classarrow_1_1_device" kindref="compound">Device</ref> &amp;</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Return whether a device instance is a <ref refid="classarrow_1_1cuda_1_1_cuda_device" kindref="compound">CudaDevice</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="179" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1cuda_1a4677d0f05774e3c1f7e7fc875f9c9432" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1cuda_1_1_cuda_device" kindref="compound">CudaDevice</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;CudaDevice&gt; &gt; arrow::cuda::AsCudaDevice</definition>
        <argsstring>(const std::shared_ptr&lt; Device &gt; &amp;device)</argsstring>
        <name>AsCudaDevice</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_device" kindref="compound">Device</ref> &gt; &amp;</type>
          <declname>device</declname>
        </param>
        <briefdescription>
<para>Cast a device instance to a <ref refid="classarrow_1_1cuda_1_1_cuda_device" kindref="compound">CudaDevice</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>An error is returned if the device is not a <ref refid="classarrow_1_1cuda_1_1_cuda_device" kindref="compound">CudaDevice</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1cuda_1a97819718f0a5fd8dd246b2226a936c9b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::cuda::IsCudaMemoryManager</definition>
        <argsstring>(const MemoryManager &amp;mm)</argsstring>
        <name>IsCudaMemoryManager</name>
        <param>
          <type>const <ref refid="classarrow_1_1_memory_manager" kindref="compound">MemoryManager</ref> &amp;</type>
          <declname>mm</declname>
        </param>
        <briefdescription>
<para>Return whether a <ref refid="classarrow_1_1_memory_manager" kindref="compound">MemoryManager</ref> instance is a <ref refid="classarrow_1_1cuda_1_1_cuda_memory_manager" kindref="compound">CudaMemoryManager</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="225" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1cuda_1a129ad830a482005357f3e15c53fc3b60" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1cuda_1_1_cuda_memory_manager" kindref="compound">CudaMemoryManager</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;CudaMemoryManager&gt; &gt; arrow::cuda::AsCudaMemoryManager</definition>
        <argsstring>(const std::shared_ptr&lt; MemoryManager &gt; &amp;mm)</argsstring>
        <name>AsCudaMemoryManager</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_memory_manager" kindref="compound">MemoryManager</ref> &gt; &amp;</type>
          <declname>mm</declname>
        </param>
        <briefdescription>
<para>Cast a <ref refid="classarrow_1_1_memory_manager" kindref="compound">MemoryManager</ref> instance to a <ref refid="classarrow_1_1cuda_1_1_cuda_memory_manager" kindref="compound">CudaMemoryManager</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>An error is returned if the <ref refid="classarrow_1_1_memory_manager" kindref="compound">MemoryManager</ref> is not a <ref refid="classarrow_1_1cuda_1_1_cuda_memory_manager" kindref="compound">CudaMemoryManager</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="231" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1cuda_1a0efbe1ffd03ba56780d052b6631008c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1cuda_1_1_cuda_host_buffer" kindref="compound">CudaHostBuffer</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;CudaHostBuffer&gt; &gt; arrow::cuda::AllocateCudaHostBuffer</definition>
        <argsstring>(int device_number, const int64_t size)</argsstring>
        <name>AllocateCudaHostBuffer</name>
        <param>
          <type>int</type>
          <declname>device_number</declname>
        </param>
        <param>
          <type>const int64_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Allocate CUDA-accessible memory on CPU host. </para>        </briefdescription>
        <detaileddescription>
<para>The GPU will benefit from fast access to this CPU-located buffer, including fast memory copy.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">device_number</parametername>
</parameternamelist>
<parameterdescription>
<para>device to expose host memory </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Host buffer or <ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="284" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1cuda_1a0fe5b064c963ebdedd2b06325ee2a223" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::cuda::AllocateCudaHostBuffer</definition>
        <argsstring>(int device_number, const int64_t size, std::shared_ptr&lt; CudaHostBuffer &gt; *out)</argsstring>
        <name>AllocateCudaHostBuffer</name>
        <param>
          <type>int</type>
          <declname>device_number</declname>
        </param>
        <param>
          <type>const int64_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1cuda_1_1_cuda_host_buffer" kindref="compound">CudaHostBuffer</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Allocate CUDA-accessible memory on CPU host. </para>        </briefdescription>
        <detaileddescription>
<para>The GPU will benefit from fast access to this CPU-located buffer, including fast memory copy.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">device_number</parametername>
</parameternamelist>
<parameterdescription>
<para>device to expose host memory </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the allocated buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="298" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1cuda_1a1738441f91556be0df2af295b22c1f58" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; uintptr_t &gt;</type>
        <definition>Result&lt;uintptr_t&gt; arrow::cuda::GetDeviceAddress</definition>
        <argsstring>(const uint8_t *cpu_data, const std::shared_ptr&lt; CudaContext &gt; &amp;ctx)</argsstring>
        <name>GetDeviceAddress</name>
        <param>
          <type>const uint8_t *</type>
          <declname>cpu_data</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1cuda_1_1_cuda_context" kindref="compound">CudaContext</ref> &gt; &amp;</type>
          <declname>ctx</declname>
        </param>
        <briefdescription>
<para>Low-level: get a device address through which the CPU data be accessed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="302" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1cuda_1a7ce46200c025b23251d4902dff4ac38b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; uint8_t * &gt;</type>
        <definition>Result&lt;uint8_t*&gt; arrow::cuda::GetHostAddress</definition>
        <argsstring>(uintptr_t device_ptr)</argsstring>
        <name>GetHostAddress</name>
        <param>
          <type>uintptr_t</type>
          <declname>device_ptr</declname>
        </param>
        <briefdescription>
<para>Low-level: get a CPU address through which the device data be accessed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="306" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/arrow/gpu/cuda_arrow_ipc.h" line="41" column="1"/>
  </compounddef>
</doxygen>
