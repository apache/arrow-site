<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1cuda_1_1_cuda_ipc_mem_handle" kind="class" language="C++" prot="public">
    <compoundname>arrow::cuda::CudaIpcMemHandle</compoundname>
    <includes refid="cuda__memory_8h" local="no">arrow/gpu/cuda_memory.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classarrow_1_1cuda_1_1_cuda_ipc_mem_handle_1ab3879081d4ebc755522cb402205bed42" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; CudaIpcMemHandleImpl &gt;</type>
        <definition>std::unique_ptr&lt;CudaIpcMemHandleImpl&gt; arrow::cuda::CudaIpcMemHandle::impl_</definition>
        <argsstring></argsstring>
        <name>impl_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="177" column="1" bodyfile="/arrow/cpp/src/arrow/gpu/cuda_memory.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1cuda_1_1_cuda_ipc_mem_handle_1a4047323fe2188a91046f11d6deae065b" prot="private" static="no" mutable="no">
        <type>friend</type>
        <definition>friend arrow::cuda::CudaIpcMemHandle::CudaBuffer</definition>
        <argsstring></argsstring>
        <name>CudaBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="182" column="1" bodyfile="/arrow/cpp/src/arrow/gpu/cuda_memory.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1cuda_1_1_cuda_ipc_mem_handle_1a1aaf3bcf5502ea5c7e0712f904daed1b" prot="private" static="no" mutable="no">
        <type>friend</type>
        <definition>friend arrow::cuda::CudaIpcMemHandle::CudaContext</definition>
        <argsstring></argsstring>
        <name>CudaContext</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="183" column="1" bodyfile="/arrow/cpp/src/arrow/gpu/cuda_memory.h" bodystart="183" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_ipc_mem_handle_1a07c66a7ea5043af7d02d347805b2bc7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::cuda::CudaIpcMemHandle::~CudaIpcMemHandle</definition>
        <argsstring>()</argsstring>
        <name>~CudaIpcMemHandle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="144" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_ipc_mem_handle_1a246d35e548fbc369416dc6ce7764c25d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;Buffer&gt; &gt; arrow::cuda::CudaIpcMemHandle::Serialize</definition>
        <argsstring>(MemoryPool *pool=default_memory_pool()) const</argsstring>
        <name>Serialize</name>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
          <defval><ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">default_memory_pool</ref>()</defval>
        </param>
        <briefdescription>
<para>Write <ref refid="classarrow_1_1cuda_1_1_cuda_ipc_mem_handle" kindref="compound">CudaIpcMemHandle</ref> to a <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pool</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> to allocate memory from </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> or <ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="162" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_ipc_mem_handle_1a4a5321e616e9126b4772dc82f04d81bd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::cuda::CudaIpcMemHandle::Serialize</definition>
        <argsstring>(MemoryPool *pool, std::shared_ptr&lt; Buffer &gt; *out) const</argsstring>
        <name>Serialize</name>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Write <ref refid="classarrow_1_1cuda_1_1_cuda_ipc_mem_handle" kindref="compound">CudaIpcMemHandle</ref> to a <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pool</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> to allocate memory from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the serialized buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="170" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_ipc_mem_handle_1adea2ebfee68e8065ac6b81d66fa5f07d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1cuda_1_1_cuda_ipc_mem_handle" kindref="compound">CudaIpcMemHandle</ref> &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;CudaIpcMemHandle&gt; &gt; arrow::cuda::CudaIpcMemHandle::FromBuffer</definition>
        <argsstring>(const void *opaque_handle)</argsstring>
        <name>FromBuffer</name>
        <param>
          <type>const void *</type>
          <declname>opaque_handle</declname>
        </param>
        <briefdescription>
<para>Create <ref refid="classarrow_1_1cuda_1_1_cuda_ipc_mem_handle" kindref="compound">CudaIpcMemHandle</ref> from opaque buffer (e.g. </para>        </briefdescription>
        <detaileddescription>
<para>from another process) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">opaque_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>a CUipcMemHandle as a const void* </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Handle or <ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_ipc_mem_handle_1aa139381de991e30041375e211e1e5790" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::cuda::CudaIpcMemHandle::FromBuffer</definition>
        <argsstring>(const void *opaque_handle, std::shared_ptr&lt; CudaIpcMemHandle &gt; *handle)</argsstring>
        <name>FromBuffer</name>
        <param>
          <type>const void *</type>
          <declname>opaque_handle</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1cuda_1_1_cuda_ipc_mem_handle" kindref="compound">CudaIpcMemHandle</ref> &gt; *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Create <ref refid="classarrow_1_1cuda_1_1_cuda_ipc_mem_handle" kindref="compound">CudaIpcMemHandle</ref> from opaque buffer (e.g. </para>        </briefdescription>
        <detaileddescription>
<para>from another process) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">opaque_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>a CUipcMemHandle as a const void* </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classarrow_1_1cuda_1_1_cuda_ipc_mem_handle" kindref="compound">CudaIpcMemHandle</ref> instance </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="156" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_ipc_mem_handle_1adc2ffe23f6c519d5f0a764f15b5cb57f" prot="private" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::cuda::CudaIpcMemHandle::CudaIpcMemHandle</definition>
        <argsstring>(const void *handle)</argsstring>
        <name>CudaIpcMemHandle</name>
        <param>
          <type>const void *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="173" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_ipc_mem_handle_1aa6ec459caafaaaa400c8eb42c45141f0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::cuda::CudaIpcMemHandle::CudaIpcMemHandle</definition>
        <argsstring>(int64_t memory_size, const void *cu_handle)</argsstring>
        <name>CudaIpcMemHandle</name>
        <param>
          <type>int64_t</type>
          <declname>memory_size</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>cu_handle</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="174" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_ipc_mem_handle_1a7ce22eb43fba0f62ad70f291f05ad6b0" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const void *</type>
        <definition>const void* arrow::cuda::CudaIpcMemHandle::handle</definition>
        <argsstring>() const</argsstring>
        <name>handle</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="179" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_ipc_mem_handle_1a0fa0f55d11b8d08f19c4cbf2d305e57b" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t arrow::cuda::CudaIpcMemHandle::memory_size</definition>
        <argsstring>() const</argsstring>
        <name>memory_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="180" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="142" column="1" bodyfile="/arrow/cpp/src/arrow/gpu/cuda_memory.h" bodystart="142" bodyend="184"/>
    <listofallmembers>
      <member refid="classarrow_1_1cuda_1_1_cuda_ipc_mem_handle_1a4047323fe2188a91046f11d6deae065b" prot="private" virt="non-virtual"><scope>arrow::cuda::CudaIpcMemHandle</scope><name>CudaBuffer</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_ipc_mem_handle_1a1aaf3bcf5502ea5c7e0712f904daed1b" prot="private" virt="non-virtual"><scope>arrow::cuda::CudaIpcMemHandle</scope><name>CudaContext</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_ipc_mem_handle_1adc2ffe23f6c519d5f0a764f15b5cb57f" prot="private" virt="non-virtual"><scope>arrow::cuda::CudaIpcMemHandle</scope><name>CudaIpcMemHandle</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_ipc_mem_handle_1aa6ec459caafaaaa400c8eb42c45141f0" prot="private" virt="non-virtual"><scope>arrow::cuda::CudaIpcMemHandle</scope><name>CudaIpcMemHandle</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_ipc_mem_handle_1adea2ebfee68e8065ac6b81d66fa5f07d" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaIpcMemHandle</scope><name>FromBuffer</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_ipc_mem_handle_1aa139381de991e30041375e211e1e5790" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaIpcMemHandle</scope><name>FromBuffer</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_ipc_mem_handle_1a7ce22eb43fba0f62ad70f291f05ad6b0" prot="private" virt="non-virtual"><scope>arrow::cuda::CudaIpcMemHandle</scope><name>handle</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_ipc_mem_handle_1ab3879081d4ebc755522cb402205bed42" prot="private" virt="non-virtual"><scope>arrow::cuda::CudaIpcMemHandle</scope><name>impl_</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_ipc_mem_handle_1a0fa0f55d11b8d08f19c4cbf2d305e57b" prot="private" virt="non-virtual"><scope>arrow::cuda::CudaIpcMemHandle</scope><name>memory_size</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_ipc_mem_handle_1a246d35e548fbc369416dc6ce7764c25d" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaIpcMemHandle</scope><name>Serialize</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_ipc_mem_handle_1a4a5321e616e9126b4772dc82f04d81bd" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaIpcMemHandle</scope><name>Serialize</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_ipc_mem_handle_1a07c66a7ea5043af7d02d347805b2bc7b" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaIpcMemHandle</scope><name>~CudaIpcMemHandle</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
