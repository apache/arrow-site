<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1fs_1_1_slow_file_system" kind="class" language="C++" prot="public">
    <compoundname>arrow::fs::SlowFileSystem</compoundname>
    <basecompoundref refid="classarrow_1_1fs_1_1_file_system" prot="public" virt="non-virtual">arrow::fs::FileSystem</basecompoundref>
    <includes refid="filesystem_8h" local="no">arrow/filesystem/filesystem.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classarrow_1_1fs_1_1_slow_file_system_1a17348d4265b2beec2eea9b0fa44397d7" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1fs_1_1_file_system" kindref="compound">FileSystem</ref> &gt;</type>
        <definition>std::shared_ptr&lt;FileSystem&gt; arrow::fs::SlowFileSystem::base_fs_</definition>
        <argsstring></argsstring>
        <name>base_fs_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="353" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/filesystem.h" bodystart="353" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1fs_1_1_slow_file_system_1a24d4963661714c3975964c12b7490d2d" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_latency_generator" kindref="compound">io::LatencyGenerator</ref> &gt;</type>
        <definition>std::shared_ptr&lt;io::LatencyGenerator&gt; arrow::fs::SlowFileSystem::latencies_</definition>
        <argsstring></argsstring>
        <name>latencies_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="354" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/filesystem.h" bodystart="354" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1fs_1_1_slow_file_system_1af88e646faf76a0c24de01e86f2efbb22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::fs::SlowFileSystem::SlowFileSystem</definition>
        <argsstring>(std::shared_ptr&lt; FileSystem &gt; base_fs, std::shared_ptr&lt; io::LatencyGenerator &gt; latencies)</argsstring>
        <name>SlowFileSystem</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1fs_1_1_file_system" kindref="compound">FileSystem</ref> &gt;</type>
          <declname>base_fs</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_latency_generator" kindref="compound">io::LatencyGenerator</ref> &gt;</type>
          <declname>latencies</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="319" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_slow_file_system_1a77d11df2f9da28f3e5a3a85bde3696d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::fs::SlowFileSystem::SlowFileSystem</definition>
        <argsstring>(std::shared_ptr&lt; FileSystem &gt; base_fs, double average_latency)</argsstring>
        <name>SlowFileSystem</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1fs_1_1_file_system" kindref="compound">FileSystem</ref> &gt;</type>
          <declname>base_fs</declname>
        </param>
        <param>
          <type>double</type>
          <declname>average_latency</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="321" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_slow_file_system_1a1ed40db514b0843dbde37ff4cbf20838" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::fs::SlowFileSystem::SlowFileSystem</definition>
        <argsstring>(std::shared_ptr&lt; FileSystem &gt; base_fs, double average_latency, int32_t seed)</argsstring>
        <name>SlowFileSystem</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1fs_1_1_file_system" kindref="compound">FileSystem</ref> &gt;</type>
          <declname>base_fs</declname>
        </param>
        <param>
          <type>double</type>
          <declname>average_latency</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>seed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="322" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_slow_file_system_1ab1fa6ad1dfcf76cc818176d0820a2997" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string arrow::fs::SlowFileSystem::type_name</definition>
        <argsstring>() const override</argsstring>
        <name>type_name</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1a14c1160fbffc2dcb72f2e16c32329bc7">type_name</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="325" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/filesystem.h" bodystart="325" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_slow_file_system_1a5465716a30cfe12f575abb0a94db772b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool arrow::fs::SlowFileSystem::Equals</definition>
        <argsstring>(const FileSystem &amp;other) const override</argsstring>
        <name>Equals</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1ac0a0a670a467fa073bb02b8581731262">Equals</reimplements>
        <param>
          <type>const <ref refid="classarrow_1_1fs_1_1_file_system" kindref="compound">FileSystem</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="326" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_slow_file_system_1a5c084487de2daf3fcb07d736739740a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; <ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref> &gt;</type>
        <definition>Result&lt;FileInfo&gt; arrow::fs::SlowFileSystem::GetFileInfo</definition>
        <argsstring>(const std::string &amp;path) override</argsstring>
        <name>GetFileInfo</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1ae883cb9d3a7b0523ebb346e5851f6aa9">GetFileInfo</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Get info for the given target. </para>        </briefdescription>
        <detaileddescription>
<para>Any symlink is automatically dereferenced, recursively. A nonexistent or unreachable file returns an Ok status and has a FileType of value NotFound. An error status indicates a truly exceptional condition (low-level I/O error, etc.). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="329" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_slow_file_system_1ae8b691f6506dec71479d67ce690fbe10" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::vector&lt; <ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref> &gt; &gt;</type>
        <definition>Result&lt;std::vector&lt;FileInfo&gt; &gt; arrow::fs::SlowFileSystem::GetFileInfo</definition>
        <argsstring>(const FileSelector &amp;select) override</argsstring>
        <name>GetFileInfo</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1ad472382e0a5e63010e58eb511afb9430">GetFileInfo</reimplements>
        <param>
          <type>const <ref refid="structarrow_1_1fs_1_1_file_selector" kindref="compound">FileSelector</ref> &amp;</type>
          <declname>select</declname>
        </param>
        <briefdescription>
<para>Same, according to a selector. </para>        </briefdescription>
        <detaileddescription>
<para>The selector&apos;s base directory will not be part of the results, even if it exists. If it doesn&apos;t exist, see <computeroutput><ref refid="structarrow_1_1fs_1_1_file_selector_1aead1e24f5aa8bb7a3e893436cde83ea7" kindref="member">FileSelector::allow_not_found</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="330" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_slow_file_system_1a20ac931a08945b4a84de2b9d1cefbecf" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::fs::SlowFileSystem::CreateDir</definition>
        <argsstring>(const std::string &amp;path, bool recursive=true) override</argsstring>
        <name>CreateDir</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1aff4191ded194fc0d473608264b05ee86">CreateDir</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>recursive</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Create a directory and subdirectories. </para>        </briefdescription>
        <detaileddescription>
<para>This function succeeds if the directory already exists. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="332" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_slow_file_system_1ae6a69f487809c7191ec0184dd3925e35" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::fs::SlowFileSystem::DeleteDir</definition>
        <argsstring>(const std::string &amp;path) override</argsstring>
        <name>DeleteDir</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1aa6d2d675596ee51935cc4baa9d30ea72">DeleteDir</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Delete a directory and its contents, recursively. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="334" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_slow_file_system_1a11eb79f7eca841c115ff3916c388a2cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::fs::SlowFileSystem::DeleteDirContents</definition>
        <argsstring>(const std::string &amp;path) override</argsstring>
        <name>DeleteDirContents</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1a908dd35485e74e91d420adf4b3eb80b2">DeleteDirContents</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Delete a directory&apos;s contents, recursively. </para>        </briefdescription>
        <detaileddescription>
<para>Like DeleteDir, but doesn&apos;t delete the directory itself. Passing an empty path (&quot;&quot;) will wipe the entire filesystem tree. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="335" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_slow_file_system_1ac46eff9e71b5035f96c10be8e18f4b77" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::fs::SlowFileSystem::DeleteFile</definition>
        <argsstring>(const std::string &amp;path) override</argsstring>
        <name>DeleteFile</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1ac9698e825f1abbe2497850c7d25efa1c">DeleteFile</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Delete a file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="337" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_slow_file_system_1aca43e949a072da6a6dcdbaf67939ab40" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::fs::SlowFileSystem::Move</definition>
        <argsstring>(const std::string &amp;src, const std::string &amp;dest) override</argsstring>
        <name>Move</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1a3ab3b162b3ea640076bbd46702735419">Move</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
<para>Move / rename a file or directory. </para>        </briefdescription>
        <detaileddescription>
<para>If the destination exists:<itemizedlist>
<listitem><para>if it is a non-empty directory, an error is returned</para></listitem><listitem><para>otherwise, if it has the same type as the source, it is replaced</para></listitem><listitem><para>otherwise, behavior is unspecified (implementation-dependent). </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="339" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_slow_file_system_1a902e7c652521118fa165d890e6c31b38" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::fs::SlowFileSystem::CopyFile</definition>
        <argsstring>(const std::string &amp;src, const std::string &amp;dest) override</argsstring>
        <name>CopyFile</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1a7222bd63bfcb1ac2a48367ce9e5c9667">CopyFile</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
<para>Copy a file. </para>        </briefdescription>
        <detaileddescription>
<para>If the destination exists and is a directory, an error is returned. Otherwise, it is replaced. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="341" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_slow_file_system_1a1414356bb58957f5414aaedd9c328fd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_input_stream" kindref="compound">io::InputStream</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;io::InputStream&gt; &gt; arrow::fs::SlowFileSystem::OpenInputStream</definition>
        <argsstring>(const std::string &amp;path) override</argsstring>
        <name>OpenInputStream</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1a4baf948a7ebca79d1b085942f32ba65f">OpenInputStream</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Open an input stream for sequential reading. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="343" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_slow_file_system_1ac7a7bab289a997b950de9afd3ba67fad" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_random_access_file" kindref="compound">io::RandomAccessFile</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;io::RandomAccessFile&gt; &gt; arrow::fs::SlowFileSystem::OpenInputFile</definition>
        <argsstring>(const std::string &amp;path) override</argsstring>
        <name>OpenInputFile</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1a6e401fc8e1b55d66ab5045845dc3fdae">OpenInputFile</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Open an input file for random access reading. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="345" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_slow_file_system_1a46f0b61fa57beb95e151588d324796f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_output_stream" kindref="compound">io::OutputStream</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;io::OutputStream&gt; &gt; arrow::fs::SlowFileSystem::OpenOutputStream</definition>
        <argsstring>(const std::string &amp;path) override</argsstring>
        <name>OpenOutputStream</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1ae4ebffb159bef1199092d79c05703415">OpenOutputStream</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Open an output stream for sequential writing. </para>        </briefdescription>
        <detaileddescription>
<para>If the target already exists, existing data is truncated. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="347" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_slow_file_system_1ae3418520b2d003be7ec1df463e0d504d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_output_stream" kindref="compound">io::OutputStream</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;io::OutputStream&gt; &gt; arrow::fs::SlowFileSystem::OpenAppendStream</definition>
        <argsstring>(const std::string &amp;path) override</argsstring>
        <name>OpenAppendStream</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1ada6e16933e3f62a36cb8ebbcb9c94c46">OpenAppendStream</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Open an output stream for appending. </para>        </briefdescription>
        <detaileddescription>
<para>If the target doesn&apos;t exist, a new empty file is created. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="349" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A <ref refid="classarrow_1_1fs_1_1_file_system" kindref="compound">FileSystem</ref> implementation that delegates to another implementation but inserts latencies at various points. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4182">
        <label>std::enable_shared_from_this&lt; FileSystem &gt;</label>
      </node>
      <node id="4181">
        <label>arrow::fs::FileSystem</label>
        <link refid="classarrow_1_1fs_1_1_file_system"/>
        <childnode refid="4182" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4180">
        <label>arrow::fs::SlowFileSystem</label>
        <link refid="classarrow_1_1fs_1_1_slow_file_system"/>
        <childnode refid="4181" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4185">
        <label>std::enable_shared_from_this&lt; FileSystem &gt;</label>
      </node>
      <node id="4184">
        <label>arrow::fs::FileSystem</label>
        <link refid="classarrow_1_1fs_1_1_file_system"/>
        <childnode refid="4185" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4183">
        <label>arrow::fs::SlowFileSystem</label>
        <link refid="classarrow_1_1fs_1_1_slow_file_system"/>
        <childnode refid="4184" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="317" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/filesystem.h" bodystart="317" bodyend="355"/>
    <listofallmembers>
      <member refid="classarrow_1_1fs_1_1_slow_file_system_1a17348d4265b2beec2eea9b0fa44397d7" prot="protected" virt="non-virtual"><scope>arrow::fs::SlowFileSystem</scope><name>base_fs_</name></member>
      <member refid="classarrow_1_1fs_1_1_slow_file_system_1a902e7c652521118fa165d890e6c31b38" prot="public" virt="virtual"><scope>arrow::fs::SlowFileSystem</scope><name>CopyFile</name></member>
      <member refid="classarrow_1_1fs_1_1_slow_file_system_1a20ac931a08945b4a84de2b9d1cefbecf" prot="public" virt="virtual"><scope>arrow::fs::SlowFileSystem</scope><name>CreateDir</name></member>
      <member refid="classarrow_1_1fs_1_1_slow_file_system_1ae6a69f487809c7191ec0184dd3925e35" prot="public" virt="virtual"><scope>arrow::fs::SlowFileSystem</scope><name>DeleteDir</name></member>
      <member refid="classarrow_1_1fs_1_1_slow_file_system_1a11eb79f7eca841c115ff3916c388a2cb" prot="public" virt="virtual"><scope>arrow::fs::SlowFileSystem</scope><name>DeleteDirContents</name></member>
      <member refid="classarrow_1_1fs_1_1_slow_file_system_1ac46eff9e71b5035f96c10be8e18f4b77" prot="public" virt="virtual"><scope>arrow::fs::SlowFileSystem</scope><name>DeleteFile</name></member>
      <member refid="classarrow_1_1fs_1_1_file_system_1aabbcfc55e53a8bcf3d88ece0b64fb400" prot="public" virt="virtual"><scope>arrow::fs::SlowFileSystem</scope><name>DeleteFiles</name></member>
      <member refid="classarrow_1_1fs_1_1_slow_file_system_1a5465716a30cfe12f575abb0a94db772b" prot="public" virt="virtual"><scope>arrow::fs::SlowFileSystem</scope><name>Equals</name></member>
      <member refid="classarrow_1_1fs_1_1_file_system_1aa0bfcdc572b747ce2b650147d8ddb888" prot="public" virt="virtual" ambiguityscope="arrow::fs::FileSystem::"><scope>arrow::fs::SlowFileSystem</scope><name>Equals</name></member>
      <member refid="classarrow_1_1fs_1_1_slow_file_system_1a5c084487de2daf3fcb07d736739740a3" prot="public" virt="virtual"><scope>arrow::fs::SlowFileSystem</scope><name>GetFileInfo</name></member>
      <member refid="classarrow_1_1fs_1_1_slow_file_system_1ae8b691f6506dec71479d67ce690fbe10" prot="public" virt="virtual"><scope>arrow::fs::SlowFileSystem</scope><name>GetFileInfo</name></member>
      <member refid="classarrow_1_1fs_1_1_file_system_1a4e7ff03e540cfba191d9c42aa6bba060" prot="public" virt="virtual" ambiguityscope="arrow::fs::FileSystem::"><scope>arrow::fs::SlowFileSystem</scope><name>GetFileInfo</name></member>
      <member refid="classarrow_1_1fs_1_1_slow_file_system_1a24d4963661714c3975964c12b7490d2d" prot="protected" virt="non-virtual"><scope>arrow::fs::SlowFileSystem</scope><name>latencies_</name></member>
      <member refid="classarrow_1_1fs_1_1_slow_file_system_1aca43e949a072da6a6dcdbaf67939ab40" prot="public" virt="virtual"><scope>arrow::fs::SlowFileSystem</scope><name>Move</name></member>
      <member refid="classarrow_1_1fs_1_1_file_system_1a73d5af5c51cc4cf569fabcea48781721" prot="public" virt="virtual"><scope>arrow::fs::SlowFileSystem</scope><name>NormalizePath</name></member>
      <member refid="classarrow_1_1fs_1_1_slow_file_system_1ae3418520b2d003be7ec1df463e0d504d" prot="public" virt="virtual"><scope>arrow::fs::SlowFileSystem</scope><name>OpenAppendStream</name></member>
      <member refid="classarrow_1_1fs_1_1_slow_file_system_1ac7a7bab289a997b950de9afd3ba67fad" prot="public" virt="virtual"><scope>arrow::fs::SlowFileSystem</scope><name>OpenInputFile</name></member>
      <member refid="classarrow_1_1fs_1_1_slow_file_system_1a1414356bb58957f5414aaedd9c328fd8" prot="public" virt="virtual"><scope>arrow::fs::SlowFileSystem</scope><name>OpenInputStream</name></member>
      <member refid="classarrow_1_1fs_1_1_slow_file_system_1a46f0b61fa57beb95e151588d324796f1" prot="public" virt="virtual"><scope>arrow::fs::SlowFileSystem</scope><name>OpenOutputStream</name></member>
      <member refid="classarrow_1_1fs_1_1_slow_file_system_1af88e646faf76a0c24de01e86f2efbb22" prot="public" virt="non-virtual"><scope>arrow::fs::SlowFileSystem</scope><name>SlowFileSystem</name></member>
      <member refid="classarrow_1_1fs_1_1_slow_file_system_1a77d11df2f9da28f3e5a3a85bde3696d9" prot="public" virt="non-virtual"><scope>arrow::fs::SlowFileSystem</scope><name>SlowFileSystem</name></member>
      <member refid="classarrow_1_1fs_1_1_slow_file_system_1a1ed40db514b0843dbde37ff4cbf20838" prot="public" virt="non-virtual"><scope>arrow::fs::SlowFileSystem</scope><name>SlowFileSystem</name></member>
      <member refid="classarrow_1_1fs_1_1_slow_file_system_1ab1fa6ad1dfcf76cc818176d0820a2997" prot="public" virt="virtual"><scope>arrow::fs::SlowFileSystem</scope><name>type_name</name></member>
      <member refid="classarrow_1_1fs_1_1_file_system_1a364917767b1d2e11b3b8967a4ee08c30" prot="public" virt="virtual"><scope>arrow::fs::SlowFileSystem</scope><name>~FileSystem</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
