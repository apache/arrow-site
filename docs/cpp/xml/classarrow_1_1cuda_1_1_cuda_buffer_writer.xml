<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1cuda_1_1_cuda_buffer_writer" kind="class" language="C++" prot="public">
    <compoundname>arrow::cuda::CudaBufferWriter</compoundname>
    <basecompoundref refid="classarrow_1_1io_1_1_writable_file" prot="public" virt="non-virtual">arrow::io::WritableFile</basecompoundref>
    <includes refid="cuda__memory_8h" local="no">arrow/gpu/cuda_memory.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classarrow_1_1cuda_1_1_cuda_buffer_writer_1acfa00c8d86fa1b145c28c677872b8b66" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; CudaBufferWriterImpl &gt;</type>
        <definition>std::unique_ptr&lt;CudaBufferWriterImpl&gt; arrow::cuda::CudaBufferWriter::impl_</definition>
        <argsstring></argsstring>
        <name>impl_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="272" column="1" bodyfile="/arrow/cpp/src/arrow/gpu/cuda_memory.h" bodystart="271" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_buffer_writer_1ad993130934dfe2b767d1d4a3034857ad" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::cuda::CudaBufferWriter::CudaBufferWriter</definition>
        <argsstring>(const std::shared_ptr&lt; CudaBuffer &gt; &amp;buffer)</argsstring>
        <name>CudaBufferWriter</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1cuda_1_1_cuda_buffer" kindref="compound">CudaBuffer</ref> &gt; &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="238" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_buffer_writer_1a023c784a943f163ec10ef7145349ff2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::cuda::CudaBufferWriter::~CudaBufferWriter</definition>
        <argsstring>() override</argsstring>
        <name>~CudaBufferWriter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="239" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_buffer_writer_1a0ea8c0db5348cb6c7a95581545708106" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::cuda::CudaBufferWriter::Close</definition>
        <argsstring>() override</argsstring>
        <name>Close</name>
        <reimplements refid="classarrow_1_1io_1_1_file_interface_1ae0f46d227a430af180576715e7aa0b78">Close</reimplements>
        <briefdescription>
<para>Close writer and flush buffered bytes to GPU. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="242" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_buffer_writer_1a505faef7022ad871885c9bcb43aa459b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool arrow::cuda::CudaBufferWriter::closed</definition>
        <argsstring>() const override</argsstring>
        <name>closed</name>
        <reimplements refid="classarrow_1_1io_1_1_file_interface_1a5ba1d2c3cec2e05e7b0018624f19c10b">closed</reimplements>
        <briefdescription>
<para>Return whether the stream is closed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="244" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_buffer_writer_1a5b1378916dcf383f54bbe22ae6519119" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::cuda::CudaBufferWriter::Flush</definition>
        <argsstring>() override</argsstring>
        <name>Flush</name>
        <reimplements refid="classarrow_1_1io_1_1_writable_1a06e513a551f68603013c1586ba8b939f">Flush</reimplements>
        <briefdescription>
<para>Flush buffered bytes to GPU. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="247" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_buffer_writer_1ac416899ee47930bb5d7beaad30cc4fd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::cuda::CudaBufferWriter::Seek</definition>
        <argsstring>(int64_t position) override</argsstring>
        <name>Seek</name>
        <reimplements refid="classarrow_1_1io_1_1_seekable_1a410ba0e0932dbcb939b570ee3c8c6d25">Seek</reimplements>
        <param>
          <type>int64_t</type>
          <declname>position</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="249" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_buffer_writer_1a6f581e34f2ab08354be9ad8d2c0c5e7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::cuda::CudaBufferWriter::Write</definition>
        <argsstring>(const void *data, int64_t nbytes) override</argsstring>
        <name>Write</name>
        <reimplements refid="classarrow_1_1io_1_1_writable_1a51d9feed73c33f095ca4b9f35dede84d">Write</reimplements>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
<para>Write the given data to the stream. </para>        </briefdescription>
        <detaileddescription>
<para>This method always processes the bytes in full. Depending on the semantics of the stream, the data may be written out immediately, held in a buffer, or written asynchronously. In the case where the stream buffers the data, it will be copied. To avoid potentially large copies, use the Write variant that takes an owned <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="251" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_buffer_writer_1a8a1bbbac029bf6376f71c090ea522deb" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::cuda::CudaBufferWriter::WriteAt</definition>
        <argsstring>(int64_t position, const void *data, int64_t nbytes) override</argsstring>
        <name>WriteAt</name>
        <reimplements refid="classarrow_1_1io_1_1_writable_file_1ac537915c4132d1e8bd9005f539c47615">WriteAt</reimplements>
        <param>
          <type>int64_t</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="253" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_buffer_writer_1a86e76b4b887300f20d5a2046c59362af" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; int64_t &gt;</type>
        <definition>Result&lt;int64_t&gt; arrow::cuda::CudaBufferWriter::Tell</definition>
        <argsstring>() const override</argsstring>
        <name>Tell</name>
        <reimplements refid="classarrow_1_1io_1_1_file_interface_1ac6c6709147a46cd7f45d0779c1819ce6">Tell</reimplements>
        <briefdescription>
<para>Return the position in this stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="255" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_buffer_writer_1afe2b3f481f6dc35d292b2b808f5c4aae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::cuda::CudaBufferWriter::SetBufferSize</definition>
        <argsstring>(const int64_t buffer_size)</argsstring>
        <name>SetBufferSize</name>
        <param>
          <type>const int64_t</type>
          <declname>buffer_size</declname>
        </param>
        <briefdescription>
<para>Set CPU buffer size to limit calls to cudaMemcpy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">buffer_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of CPU buffer to allocate </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></para></simplesect>
By default writes are unbuffered </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="262" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_buffer_writer_1a2a552698ce0327a211d7cc21ba44a7b6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t arrow::cuda::CudaBufferWriter::buffer_size</definition>
        <argsstring>() const</argsstring>
        <name>buffer_size</name>
        <briefdescription>
<para>Returns size of host (CPU) buffer, 0 for unbuffered. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="265" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_buffer_writer_1aab6152a10e047d397137b5021e9a7292" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t arrow::cuda::CudaBufferWriter::num_bytes_buffered</definition>
        <argsstring>() const</argsstring>
        <name>num_bytes_buffered</name>
        <briefdescription>
<para>Returns number of bytes buffered on host. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="268" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>File interface for writing to CUDA buffers, with optional buffering. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="791">
        <label>arrow::cuda::CudaBufferWriter</label>
        <link refid="classarrow_1_1cuda_1_1_cuda_buffer_writer"/>
        <childnode refid="792" relation="public-inheritance">
        </childnode>
      </node>
      <node id="793">
        <label>arrow::io::OutputStream</label>
        <link refid="classarrow_1_1io_1_1_output_stream"/>
        <childnode refid="794" relation="public-inheritance">
        </childnode>
        <childnode refid="795" relation="public-inheritance">
        </childnode>
      </node>
      <node id="792">
        <label>arrow::io::WritableFile</label>
        <link refid="classarrow_1_1io_1_1_writable_file"/>
        <childnode refid="793" relation="public-inheritance">
        </childnode>
        <childnode refid="796" relation="public-inheritance">
        </childnode>
      </node>
      <node id="795">
        <label>arrow::io::Writable</label>
        <link refid="classarrow_1_1io_1_1_writable"/>
      </node>
      <node id="794">
        <label>arrow::io::FileInterface</label>
        <link refid="classarrow_1_1io_1_1_file_interface"/>
      </node>
      <node id="796">
        <label>arrow::io::Seekable</label>
        <link refid="classarrow_1_1io_1_1_seekable"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="797">
        <label>arrow::cuda::CudaBufferWriter</label>
        <link refid="classarrow_1_1cuda_1_1_cuda_buffer_writer"/>
        <childnode refid="798" relation="public-inheritance">
        </childnode>
      </node>
      <node id="799">
        <label>arrow::io::OutputStream</label>
        <link refid="classarrow_1_1io_1_1_output_stream"/>
        <childnode refid="800" relation="public-inheritance">
        </childnode>
        <childnode refid="801" relation="public-inheritance">
        </childnode>
      </node>
      <node id="798">
        <label>arrow::io::WritableFile</label>
        <link refid="classarrow_1_1io_1_1_writable_file"/>
        <childnode refid="799" relation="public-inheritance">
        </childnode>
        <childnode refid="802" relation="public-inheritance">
        </childnode>
      </node>
      <node id="801">
        <label>arrow::io::Writable</label>
        <link refid="classarrow_1_1io_1_1_writable"/>
      </node>
      <node id="800">
        <label>arrow::io::FileInterface</label>
        <link refid="classarrow_1_1io_1_1_file_interface"/>
      </node>
      <node id="802">
        <label>arrow::io::Seekable</label>
        <link refid="classarrow_1_1io_1_1_seekable"/>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="236" column="1" bodyfile="/arrow/cpp/src/arrow/gpu/cuda_memory.h" bodystart="236" bodyend="273"/>
    <listofallmembers>
      <member refid="classarrow_1_1io_1_1_file_interface_1a0fa59fe92d3c99c9d9701210626aac60" prot="public" virt="virtual"><scope>arrow::cuda::CudaBufferWriter</scope><name>Abort</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_buffer_writer_1a2a552698ce0327a211d7cc21ba44a7b6" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaBufferWriter</scope><name>buffer_size</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_buffer_writer_1a0ea8c0db5348cb6c7a95581545708106" prot="public" virt="virtual"><scope>arrow::cuda::CudaBufferWriter</scope><name>Close</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_buffer_writer_1a505faef7022ad871885c9bcb43aa459b" prot="public" virt="virtual"><scope>arrow::cuda::CudaBufferWriter</scope><name>closed</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_buffer_writer_1ad993130934dfe2b767d1d4a3034857ad" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaBufferWriter</scope><name>CudaBufferWriter</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1afea9126bb21e3720212a826aa78b5534" prot="protected" virt="non-virtual"><scope>arrow::cuda::CudaBufferWriter</scope><name>FileInterface</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_buffer_writer_1a5b1378916dcf383f54bbe22ae6519119" prot="public" virt="virtual"><scope>arrow::cuda::CudaBufferWriter</scope><name>Flush</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_buffer_writer_1acfa00c8d86fa1b145c28c677872b8b66" prot="private" virt="non-virtual"><scope>arrow::cuda::CudaBufferWriter</scope><name>impl_</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1a75a3739361570bb121b9adb04d5d8686" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaBufferWriter</scope><name>mode</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1a504d0410eb6066316365a4549d000ee0" prot="protected" virt="non-virtual"><scope>arrow::cuda::CudaBufferWriter</scope><name>mode_</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_buffer_writer_1aab6152a10e047d397137b5021e9a7292" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaBufferWriter</scope><name>num_bytes_buffered</name></member>
      <member refid="classarrow_1_1io_1_1_output_stream_1a5b1e0adea7ef92368ddc07027995aca1" prot="protected" virt="non-virtual"><scope>arrow::cuda::CudaBufferWriter</scope><name>OutputStream</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_buffer_writer_1ac416899ee47930bb5d7beaad30cc4fd0" prot="public" virt="virtual"><scope>arrow::cuda::CudaBufferWriter</scope><name>Seek</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1af3dd01a780076e39a34770beb513f71f" prot="protected" virt="non-virtual"><scope>arrow::cuda::CudaBufferWriter</scope><name>set_mode</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_buffer_writer_1afe2b3f481f6dc35d292b2b808f5c4aae" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaBufferWriter</scope><name>SetBufferSize</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_buffer_writer_1a86e76b4b887300f20d5a2046c59362af" prot="public" virt="virtual"><scope>arrow::cuda::CudaBufferWriter</scope><name>Tell</name></member>
      <member refid="classarrow_1_1io_1_1_writable_file_1a1834e50389ef694613b1998392f47efa" prot="protected" virt="non-virtual"><scope>arrow::cuda::CudaBufferWriter</scope><name>WritableFile</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_buffer_writer_1a6f581e34f2ab08354be9ad8d2c0c5e7a" prot="public" virt="virtual"><scope>arrow::cuda::CudaBufferWriter</scope><name>Write</name></member>
      <member refid="classarrow_1_1io_1_1_writable_1a048bbc5e85b1d739bc49c57553e85069" prot="public" virt="virtual" ambiguityscope="arrow::io::WritableFile::"><scope>arrow::cuda::CudaBufferWriter</scope><name>Write</name></member>
      <member refid="classarrow_1_1io_1_1_writable_1a00ee30dff05bda7526c91e594a9607e7" prot="public" virt="non-virtual" ambiguityscope="arrow::io::WritableFile::"><scope>arrow::cuda::CudaBufferWriter</scope><name>Write</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_buffer_writer_1a8a1bbbac029bf6376f71c090ea522deb" prot="public" virt="virtual"><scope>arrow::cuda::CudaBufferWriter</scope><name>WriteAt</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_buffer_writer_1a023c784a943f163ec10ef7145349ff2f" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaBufferWriter</scope><name>~CudaBufferWriter</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1aa42dcdfad00634f01192b39f1d9b4929" prot="public" virt="pure-virtual"><scope>arrow::cuda::CudaBufferWriter</scope><name>~FileInterface</name></member>
      <member refid="classarrow_1_1io_1_1_seekable_1a7642c30d2f852e0f79fec036a94ca093" prot="public" virt="virtual"><scope>arrow::cuda::CudaBufferWriter</scope><name>~Seekable</name></member>
      <member refid="classarrow_1_1io_1_1_writable_1acc17343118544c62f14d62f538fa8592" prot="public" virt="virtual"><scope>arrow::cuda::CudaBufferWriter</scope><name>~Writable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
