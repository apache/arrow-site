<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structarrow_1_1csv_1_1_convert_options" kind="struct" language="C++" prot="public">
    <compoundname>arrow::csv::ConvertOptions</compoundname>
    <includes refid="csv_2options_8h" local="no">arrow/csv/options.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structarrow_1_1csv_1_1_convert_options_1a3a09261ff4dd1be595b9c7e426828d50" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool arrow::csv::ConvertOptions::check_utf8</definition>
        <argsstring></argsstring>
        <name>check_utf8</name>
        <initializer>= true</initializer>
        <briefdescription>
<para>Whether to check UTF8 validity of string columns. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/options.h" line="66" column="1" bodyfile="/arrow/cpp/src/arrow/csv/options.h" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structarrow_1_1csv_1_1_convert_options_1ae27dbfff052b92e277deaae33b702b11" prot="public" static="no" mutable="no">
        <type>std::unordered_map&lt; std::string, std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &gt;</type>
        <definition>std::unordered_map&lt;std::string, std::shared_ptr&lt;DataType&gt; &gt; arrow::csv::ConvertOptions::column_types</definition>
        <argsstring></argsstring>
        <name>column_types</name>
        <briefdescription>
<para>Optional per-column types (disabling type inference on those columns) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/options.h" line="68" column="1" bodyfile="/arrow/cpp/src/arrow/csv/options.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structarrow_1_1csv_1_1_convert_options_1a0563bd516e4676fe4bf315105e03eef0" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; arrow::csv::ConvertOptions::null_values</definition>
        <argsstring></argsstring>
        <name>null_values</name>
        <briefdescription>
<para>Recognized spellings for null values. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/options.h" line="70" column="1" bodyfile="/arrow/cpp/src/arrow/csv/options.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structarrow_1_1csv_1_1_convert_options_1a573b96b8ef90469dc1aec77b16008fb1" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; arrow::csv::ConvertOptions::true_values</definition>
        <argsstring></argsstring>
        <name>true_values</name>
        <briefdescription>
<para>Recognized spellings for boolean true values. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/options.h" line="72" column="1" bodyfile="/arrow/cpp/src/arrow/csv/options.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structarrow_1_1csv_1_1_convert_options_1adcd43f83150653d00ff3b6ed9f838164" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; arrow::csv::ConvertOptions::false_values</definition>
        <argsstring></argsstring>
        <name>false_values</name>
        <briefdescription>
<para>Recognized spellings for boolean false values. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/options.h" line="74" column="1" bodyfile="/arrow/cpp/src/arrow/csv/options.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structarrow_1_1csv_1_1_convert_options_1a7b57ed41d12282439ec2d2d9be4041dc" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool arrow::csv::ConvertOptions::strings_can_be_null</definition>
        <argsstring></argsstring>
        <name>strings_can_be_null</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>Whether string / binary columns can have null values. </para>        </briefdescription>
        <detaileddescription>
<para>If true, then strings in &quot;null_values&quot; are considered null for string columns. If false, then all strings are valid string values. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/options.h" line="79" column="1" bodyfile="/arrow/cpp/src/arrow/csv/options.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structarrow_1_1csv_1_1_convert_options_1a24088bd0394a1d243e116102c24cc156" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool arrow::csv::ConvertOptions::auto_dict_encode</definition>
        <argsstring></argsstring>
        <name>auto_dict_encode</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>Whether to try to automatically dict-encode string / binary data. </para>        </briefdescription>
        <detaileddescription>
<para>If true, then when type inference detects a string or binary column, it it dict-encoded up to <computeroutput>auto_dict_max_cardinality</computeroutput> distinct values (per chunk), after which it switches to regular encoding.</para><para>This setting is ignored for non-inferred columns (those in <computeroutput>column_types</computeroutput>). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/options.h" line="87" column="1" bodyfile="/arrow/cpp/src/arrow/csv/options.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structarrow_1_1csv_1_1_convert_options_1a9fdd744f7df9263f2b5a619fe09830e9" prot="public" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t arrow::csv::ConvertOptions::auto_dict_max_cardinality</definition>
        <argsstring></argsstring>
        <name>auto_dict_max_cardinality</name>
        <initializer>= 50</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/options.h" line="88" column="1" bodyfile="/arrow/cpp/src/arrow/csv/options.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structarrow_1_1csv_1_1_convert_options_1ab1cb583e3843f2523d179716bd1b93cc" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; arrow::csv::ConvertOptions::include_columns</definition>
        <argsstring></argsstring>
        <name>include_columns</name>
        <briefdescription>
<para>If non-empty, indicates the names of columns from the CSV file that should be actually read and converted (in the vector&apos;s order). </para>        </briefdescription>
        <detaileddescription>
<para>Columns not in this vector will be ignored. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/options.h" line="95" column="1" bodyfile="/arrow/cpp/src/arrow/csv/options.h" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structarrow_1_1csv_1_1_convert_options_1a065dae99ce03df7d80aa83bdbb82a3ee" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool arrow::csv::ConvertOptions::include_missing_columns</definition>
        <argsstring></argsstring>
        <name>include_missing_columns</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>If false, columns in <computeroutput>include_columns</computeroutput> but not in the CSV file will error out. </para>        </briefdescription>
        <detaileddescription>
<para>If true, columns in <computeroutput>include_columns</computeroutput> but not in the CSV file will produce a column of nulls (whose type is selected using <computeroutput>column_types</computeroutput>, or null by default) This option is ignored if <computeroutput>include_columns</computeroutput> is empty. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/options.h" line="101" column="1" bodyfile="/arrow/cpp/src/arrow/csv/options.h" bodystart="101" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structarrow_1_1csv_1_1_convert_options_1acfb8d142582f48a400fc1fd4127c34fe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structarrow_1_1csv_1_1_convert_options" kindref="compound">ConvertOptions</ref></type>
        <definition>static ConvertOptions arrow::csv::ConvertOptions::Defaults</definition>
        <argsstring>()</argsstring>
        <name>Defaults</name>
        <briefdescription>
<para>Create conversion options with default values, including conventional values for <computeroutput>null_values</computeroutput>, <computeroutput>true_values</computeroutput> and <computeroutput>false_values</computeroutput> </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/options.h" line="105" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/arrow/csv/options.h" line="62" column="1" bodyfile="/arrow/cpp/src/arrow/csv/options.h" bodystart="62" bodyend="106"/>
    <listofallmembers>
      <member refid="structarrow_1_1csv_1_1_convert_options_1a24088bd0394a1d243e116102c24cc156" prot="public" virt="non-virtual"><scope>arrow::csv::ConvertOptions</scope><name>auto_dict_encode</name></member>
      <member refid="structarrow_1_1csv_1_1_convert_options_1a9fdd744f7df9263f2b5a619fe09830e9" prot="public" virt="non-virtual"><scope>arrow::csv::ConvertOptions</scope><name>auto_dict_max_cardinality</name></member>
      <member refid="structarrow_1_1csv_1_1_convert_options_1a3a09261ff4dd1be595b9c7e426828d50" prot="public" virt="non-virtual"><scope>arrow::csv::ConvertOptions</scope><name>check_utf8</name></member>
      <member refid="structarrow_1_1csv_1_1_convert_options_1ae27dbfff052b92e277deaae33b702b11" prot="public" virt="non-virtual"><scope>arrow::csv::ConvertOptions</scope><name>column_types</name></member>
      <member refid="structarrow_1_1csv_1_1_convert_options_1acfb8d142582f48a400fc1fd4127c34fe" prot="public" virt="non-virtual"><scope>arrow::csv::ConvertOptions</scope><name>Defaults</name></member>
      <member refid="structarrow_1_1csv_1_1_convert_options_1adcd43f83150653d00ff3b6ed9f838164" prot="public" virt="non-virtual"><scope>arrow::csv::ConvertOptions</scope><name>false_values</name></member>
      <member refid="structarrow_1_1csv_1_1_convert_options_1ab1cb583e3843f2523d179716bd1b93cc" prot="public" virt="non-virtual"><scope>arrow::csv::ConvertOptions</scope><name>include_columns</name></member>
      <member refid="structarrow_1_1csv_1_1_convert_options_1a065dae99ce03df7d80aa83bdbb82a3ee" prot="public" virt="non-virtual"><scope>arrow::csv::ConvertOptions</scope><name>include_missing_columns</name></member>
      <member refid="structarrow_1_1csv_1_1_convert_options_1a0563bd516e4676fe4bf315105e03eef0" prot="public" virt="non-virtual"><scope>arrow::csv::ConvertOptions</scope><name>null_values</name></member>
      <member refid="structarrow_1_1csv_1_1_convert_options_1a7b57ed41d12282439ec2d2d9be4041dc" prot="public" virt="non-virtual"><scope>arrow::csv::ConvertOptions</scope><name>strings_can_be_null</name></member>
      <member refid="structarrow_1_1csv_1_1_convert_options_1a573b96b8ef90469dc1aec77b16008fb1" prot="public" virt="non-virtual"><scope>arrow::csv::ConvertOptions</scope><name>true_values</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
