<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1compute_1_1_operation" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>arrow::compute::Operation</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::enable_shared_from_this&lt; Operation &gt;</basecompoundref>
    <derivedcompoundref refid="classarrow_1_1compute_1_1ops_1_1_cast" prot="public" virt="non-virtual">arrow::compute::ops::Cast</derivedcompoundref>
    <derivedcompoundref refid="classarrow_1_1compute_1_1ops_1_1_literal" prot="public" virt="non-virtual">arrow::compute::ops::Literal</derivedcompoundref>
    <includes refid="compute_2operation_8h" local="no">arrow/compute/operation.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1compute_1_1_operation_1a1c849a65df60b098ad6ae7082d5805a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual arrow::compute::Operation::~Operation</definition>
        <argsstring>()=default</argsstring>
        <name>~Operation</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/operation.h" line="36" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1compute_1_1_operation_1afa937f89ad090d439dddec9be8c7dc19" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>virtual Status arrow::compute::Operation::ToExpr</definition>
        <argsstring>(ExprPtr *out) const =0</argsstring>
        <name>ToExpr</name>
        <param>
          <type><ref refid="namespacearrow_1_1compute_1a3d7741dfdaf5c06817fdbdaa539534a2" kindref="member">ExprPtr</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Check input expression arguments and output the type of resulting expression that this operation produces. </para>        </briefdescription>
        <detaileddescription>
<para>If the input arguments are invalid, error <ref refid="classarrow_1_1_status" kindref="compound">Status</ref> is returned <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the returned well-typed expression </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>success or failure </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/operation.h" line="43" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1compute_1_1_operation_1a68d0d77acd1c7226d19acbfcfb7ba02a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::vector&lt; <ref refid="namespacearrow_1_1compute_1a3d7741dfdaf5c06817fdbdaa539534a2" kindref="member">ExprPtr</ref> &gt;</type>
        <definition>virtual std::vector&lt;ExprPtr&gt; arrow::compute::Operation::input_args</definition>
        <argsstring>() const</argsstring>
        <name>input_args</name>
        <briefdescription>
<para>Return the input expressions used to instantiate the operation. </para>        </briefdescription>
        <detaileddescription>
<para>The default implementation returns an empty vector <simplesect kind="return"><para>a vector of expressions </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/operation.h" line="48" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An operation is a node in a computation graph, taking input data expression dependencies and emitting an output expression. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3349">
        <label>arrow::compute::ops::Cast</label>
        <link refid="classarrow_1_1compute_1_1ops_1_1_cast"/>
        <childnode refid="3347" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3347">
        <label>arrow::compute::Operation</label>
        <link refid="classarrow_1_1compute_1_1_operation"/>
        <childnode refid="3348" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3348">
        <label>std::enable_shared_from_this&lt; Operation &gt;</label>
      </node>
      <node id="3350">
        <label>arrow::compute::ops::Literal</label>
        <link refid="classarrow_1_1compute_1_1ops_1_1_literal"/>
        <childnode refid="3347" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3351">
        <label>arrow::compute::Operation</label>
        <link refid="classarrow_1_1compute_1_1_operation"/>
        <childnode refid="3352" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3352">
        <label>std::enable_shared_from_this&lt; Operation &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/compute/operation.h" line="34" column="1" bodyfile="/arrow/cpp/src/arrow/compute/operation.h" bodystart="34" bodyend="49"/>
    <listofallmembers>
      <member refid="classarrow_1_1compute_1_1_operation_1a68d0d77acd1c7226d19acbfcfb7ba02a" prot="public" virt="virtual"><scope>arrow::compute::Operation</scope><name>input_args</name></member>
      <member refid="classarrow_1_1compute_1_1_operation_1afa937f89ad090d439dddec9be8c7dc19" prot="public" virt="pure-virtual"><scope>arrow::compute::Operation</scope><name>ToExpr</name></member>
      <member refid="classarrow_1_1compute_1_1_operation_1a1c849a65df60b098ad6ae7082d5805a7" prot="public" virt="virtual"><scope>arrow::compute::Operation</scope><name>~Operation</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
