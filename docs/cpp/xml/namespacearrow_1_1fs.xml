<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacearrow_1_1fs" kind="namespace" language="C++">
    <compoundname>arrow::fs</compoundname>
    <innerclass refid="structarrow_1_1fs_1_1_file_info" prot="public">arrow::fs::FileInfo</innerclass>
    <innerclass refid="structarrow_1_1fs_1_1_file_selector" prot="public">arrow::fs::FileSelector</innerclass>
    <innerclass refid="classarrow_1_1fs_1_1_file_system" prot="public">arrow::fs::FileSystem</innerclass>
    <innerclass refid="classarrow_1_1fs_1_1_hadoop_file_system" prot="public">arrow::fs::HadoopFileSystem</innerclass>
    <innerclass refid="structarrow_1_1fs_1_1_hdfs_options" prot="public">arrow::fs::HdfsOptions</innerclass>
    <innerclass refid="classarrow_1_1fs_1_1_local_file_system" prot="public">arrow::fs::LocalFileSystem</innerclass>
    <innerclass refid="structarrow_1_1fs_1_1_local_file_system_options" prot="public">arrow::fs::LocalFileSystemOptions</innerclass>
    <innerclass refid="classarrow_1_1fs_1_1_path_forest" prot="public">arrow::fs::PathForest</innerclass>
    <innerclass refid="classarrow_1_1fs_1_1_s3_file_system" prot="public">arrow::fs::S3FileSystem</innerclass>
    <innerclass refid="structarrow_1_1fs_1_1_s3_global_options" prot="public">arrow::fs::S3GlobalOptions</innerclass>
    <innerclass refid="structarrow_1_1fs_1_1_s3_options" prot="public">arrow::fs::S3Options</innerclass>
    <innerclass refid="classarrow_1_1fs_1_1_slow_file_system" prot="public">arrow::fs::SlowFileSystem</innerclass>
    <innerclass refid="classarrow_1_1fs_1_1_sub_tree_file_system" prot="public">arrow::fs::SubTreeFileSystem</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacearrow_1_1fs_1ae7f70d357901a07a605fcdd5e2bfc98b" prot="public" static="no">
        <name>FileType</name>
        <enumvalue id="namespacearrow_1_1fs_1ae7f70d357901a07a605fcdd5e2bfc98ba38c300f4fc9ce8a77aad4a30de05cad8" prot="public">
          <name>NotFound</name>
          <briefdescription>
<para>Entry is not found. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacearrow_1_1fs_1ae7f70d357901a07a605fcdd5e2bfc98ba88183b946cc5f0e8c96b2e66e1c74a7e" prot="public">
          <name>Unknown</name>
          <briefdescription>
<para>Entry exists but its type is unknown. </para>          </briefdescription>
          <detaileddescription>
<para>This can designate a special file such as a Unix socket or character device, or Windows NUL / CON / ... </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacearrow_1_1fs_1ae7f70d357901a07a605fcdd5e2bfc98ba0b27918290ff5323bea1e3b78a9cf04e" prot="public">
          <name>File</name>
          <briefdescription>
<para>Entry is a regular file. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacearrow_1_1fs_1ae7f70d357901a07a605fcdd5e2bfc98bae73cda510e8bb947f7e61089e5581494" prot="public">
          <name>Directory</name>
          <briefdescription>
<para>Entry is a directory. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para><ref refid="classarrow_1_1fs_1_1_file_system" kindref="compound">FileSystem</ref> entry type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="53" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/filesystem.h" bodystart="53" bodyend="65"/>
      </memberdef>
      <memberdef kind="enum" id="namespacearrow_1_1fs_1a88a2a7e735ce646ccbd886ababddecea" prot="public" static="no">
        <name>S3LogLevel</name>
        <enumvalue id="namespacearrow_1_1fs_1a88a2a7e735ce646ccbd886ababddeceaad15305d7a4e34e02489c74a5ef542f36" prot="public">
          <name>Off</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacearrow_1_1fs_1a88a2a7e735ce646ccbd886ababddeceaa882384ec38ce8d9582b57e70861730e4" prot="public">
          <name>Fatal</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacearrow_1_1fs_1a88a2a7e735ce646ccbd886ababddeceaa902b0d55fddef6f8d651fe1035b7d4bd" prot="public">
          <name>Error</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacearrow_1_1fs_1a88a2a7e735ce646ccbd886ababddeceaa56525ae64d370c0b448ac0d60710ef17" prot="public">
          <name>Warn</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacearrow_1_1fs_1a88a2a7e735ce646ccbd886ababddeceaa4059b0251f66a18cb56f544728796875" prot="public">
          <name>Info</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacearrow_1_1fs_1a88a2a7e735ce646ccbd886ababddeceaaa603905470e2a5b8c13e96b579ef0dba" prot="public">
          <name>Debug</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacearrow_1_1fs_1a88a2a7e735ce646ccbd886ababddeceaadd4ec0ac4e58f7c32a01244ae91150b1" prot="public">
          <name>Trace</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/s3fs.h" line="151" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/s3fs.h" bodystart="151" bodyend="151"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacearrow_1_1fs_1ae5daf21ab2c817a43e3f937b7fc9d3b8" prot="public" static="no">
        <type>std::chrono::time_point&lt; std::chrono::system_clock, std::chrono::nanoseconds &gt;</type>
        <definition>using arrow::fs::TimePoint = typedef std::chrono::time_point&lt;std::chrono::system_clock, std::chrono::nanoseconds&gt;</definition>
        <argsstring></argsstring>
        <name>TimePoint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="49" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/filesystem.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacearrow_1_1fs_1a2158c4a2cb23c9257fd1c192e6f6dad1" prot="public" static="no">
        <type>struct <ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref></type>
        <definition>using arrow::fs::FileInfo = typedef struct FileInfo</definition>
        <argsstring></argsstring>
        <name>FileInfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="138" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/filesystem.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacearrow_1_1fs_1ab2852fbf22cc1b73b221ef709321709a" prot="public" static="yes" mutable="no">
        <type>const int64_t</type>
        <definition>const int64_t arrow::fs::kNoSize</definition>
        <argsstring></argsstring>
        <name>kNoSize</name>
        <initializer>= -1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="71" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/filesystem.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacearrow_1_1fs_1a9131118ef31ec051f7d996e9294ac94f" prot="public" static="yes" mutable="no">
        <type>const <ref refid="namespacearrow_1_1fs_1ae5daf21ab2c817a43e3f937b7fc9d3b8" kindref="member">TimePoint</ref></type>
        <definition>const TimePoint arrow::fs::kNoTime</definition>
        <argsstring></argsstring>
        <name>kNoTime</name>
        <initializer>= <ref refid="namespacearrow_1_1fs_1ae5daf21ab2c817a43e3f937b7fc9d3b8" kindref="member">TimePoint</ref>(TimePoint::duration(-1))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="72" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/filesystem.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacearrow_1_1fs_1a04fbb36c3cabd64fdfb444b42b67a98e" prot="public" static="no" mutable="no">
        <type>const char *</type>
        <definition>const char* arrow::fs::kS3DefaultRegion</definition>
        <argsstring></argsstring>
        <name>kS3DefaultRegion</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/s3fs.h" line="39" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arrow::fs::ToString</definition>
        <argsstring>(FileType)</argsstring>
        <name>ToString</name>
        <param>
          <type><ref refid="namespacearrow_1_1fs_1ae7f70d357901a07a605fcdd5e2bfc98b" kindref="member">FileType</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1fs_1a5d0258ac07dca9fc4234115b2d6a4985" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; arrow::fs::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, FileType)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type><ref refid="namespacearrow_1_1fs_1ae7f70d357901a07a605fcdd5e2bfc98b" kindref="member">FileType</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1fs_1a210ee569d40df1f8406abf30c02852bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; arrow::fs::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const FileInfo &amp;)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="140" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__filesystem-factories_1gad7710ab97df6770825aa002930c84553" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1fs_1_1_file_system" kindref="compound">FileSystem</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;FileSystem&gt; &gt; arrow::fs::FileSystemFromUri</definition>
        <argsstring>(const std::string &amp;uri, std::string *out_path=NULLPTR)</argsstring>
        <name>FileSystemFromUri</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>uri</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>out_path</declname>
          <defval><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></defval>
        </param>
        <briefdescription>
<para>Create a new <ref refid="classarrow_1_1fs_1_1_file_system" kindref="compound">FileSystem</ref> by URI. </para>        </briefdescription>
        <detaileddescription>
<para>Recognized schemes are &quot;file&quot;, &quot;mock&quot;, &quot;hdfs&quot; and &quot;s3fs&quot;.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">uri</parametername>
</parameternamelist>
<parameterdescription>
<para>a URI-based path, ex: <ulink url="file:///some/local/path">file:///some/local/path</ulink> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out_path</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) Path inside the filesystem. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>out_fs <ref refid="classarrow_1_1fs_1_1_file_system" kindref="compound">FileSystem</ref> instance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="369" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__filesystem-factories_1ga8687f598b2c715fcc85f067fa94a5fab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1fs_1_1_file_system" kindref="compound">FileSystem</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;FileSystem&gt; &gt; arrow::fs::FileSystemFromUriOrPath</definition>
        <argsstring>(const std::string &amp;uri, std::string *out_path=NULLPTR)</argsstring>
        <name>FileSystemFromUriOrPath</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>uri</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>out_path</declname>
          <defval><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></defval>
        </param>
        <briefdescription>
<para>Create a new <ref refid="classarrow_1_1fs_1_1_file_system" kindref="compound">FileSystem</ref> by URI. </para>        </briefdescription>
        <detaileddescription>
<para>Same as FileSystemFromUri, but in addition also recognize non-URIs and treat them as local filesystem paths. Only absolute local filesystem paths are allowed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="378" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1fs_1aeefa716e3e4b7955cb084447abeb0976" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::fs::FileSystemFromUri</definition>
        <argsstring>(const std::string &amp;uri, std::shared_ptr&lt; FileSystem &gt; *out_fs, std::string *out_path=NULLPTR)</argsstring>
        <name>FileSystemFromUri</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>uri</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1fs_1_1_file_system" kindref="compound">FileSystem</ref> &gt; *</type>
          <declname>out_fs</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>out_path</declname>
          <defval><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></defval>
        </param>
        <briefdescription>
<para>Create a new <ref refid="classarrow_1_1fs_1_1_file_system" kindref="compound">FileSystem</ref> by URI. </para>        </briefdescription>
        <detaileddescription>
<para>Recognized schemes are &quot;file&quot;, &quot;mock&quot;, &quot;hdfs&quot; and &quot;s3fs&quot;.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">uri</parametername>
</parameternamelist>
<parameterdescription>
<para>a URI-based path, ex: <ulink url="file:///some/local/path">file:///some/local/path</ulink> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out_fs</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classarrow_1_1fs_1_1_file_system" kindref="compound">FileSystem</ref> instance. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out_path</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) Path inside the filesystem. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="392" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1fs_1ae32885446c6d404273117c0a29f6442b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; arrow::fs::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const PathForest &amp;tree)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classarrow_1_1fs_1_1_path_forest" kindref="compound">PathForest</ref> &amp;</type>
          <declname>tree</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/path_forest.h" line="153" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1fs_1a0a5e20de5a89bdce21188370a16a6f6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::fs::InitializeS3</definition>
        <argsstring>(const S3GlobalOptions &amp;options)</argsstring>
        <name>InitializeS3</name>
        <param>
          <type>const <ref refid="structarrow_1_1fs_1_1_s3_global_options" kindref="compound">S3GlobalOptions</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Initialize the S3 APIs. </para>        </briefdescription>
        <detaileddescription>
<para>It is required to call this function at least once before using <ref refid="classarrow_1_1fs_1_1_s3_file_system" kindref="compound">S3FileSystem</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/s3fs.h" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1fs_1ad2a39767e04eddb3947c542b5596007a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::fs::EnsureS3Initialized</definition>
        <argsstring>()</argsstring>
        <name>EnsureS3Initialized</name>
        <briefdescription>
<para>Ensure the S3 APIs are initialized, but only if not already done. </para>        </briefdescription>
        <detaileddescription>
<para>If necessary, this will call <ref refid="namespacearrow_1_1fs_1a0a5e20de5a89bdce21188370a16a6f6a" kindref="member">InitializeS3()</ref> with some default options. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/s3fs.h" line="165" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1fs_1ac77ecf530c4f11425db43c75259d058f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::fs::FinalizeS3</definition>
        <argsstring>()</argsstring>
        <name>FinalizeS3</name>
        <briefdescription>
<para>Shutdown the S3 APIs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/s3fs.h" line="169" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/arrow/dataset/type_fwd.h" line="34" column="1"/>
  </compounddef>
</doxygen>
