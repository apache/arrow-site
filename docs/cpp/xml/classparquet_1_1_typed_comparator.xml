<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classparquet_1_1_typed_comparator" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>parquet::TypedComparator</compoundname>
    <basecompoundref refid="classparquet_1_1_comparator" prot="public" virt="non-virtual">parquet::Comparator</basecompoundref>
    <includes refid="statistics_8h" local="no">parquet/statistics.h</includes>
    <templateparamlist>
      <param>
        <type>typename DType</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classparquet_1_1_typed_comparator_1ad9fc7c6aa20d9d4337388dbe1cea1999" prot="public" static="no">
        <type>typename DType::c_type</type>
        <definition>using parquet::TypedComparator&lt; DType &gt;::T =  typename DType::c_type</definition>
        <argsstring></argsstring>
        <name>T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/statistics.h" line="72" column="1" bodyfile="/arrow/cpp/src/parquet/statistics.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classparquet_1_1_typed_comparator_1a1ef1eb4b796969816481745adc4f43ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool parquet::TypedComparator&lt; DType &gt;::Compare</definition>
        <argsstring>(const T &amp;a, const T &amp;b)=0</argsstring>
        <name>Compare</name>
        <param>
          <type>const <ref refid="classparquet_1_1_typed_comparator_1ad9fc7c6aa20d9d4337388dbe1cea1999" kindref="member">T</ref> &amp;</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="classparquet_1_1_typed_comparator_1ad9fc7c6aa20d9d4337388dbe1cea1999" kindref="member">T</ref> &amp;</type>
          <declname>b</declname>
        </param>
        <briefdescription>
<para>Scalar comparison of two elements, return true if first is strictly less than the second. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/statistics.h" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_typed_comparator_1a5d149029941bf2e6b0028b202a156adc" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::pair&lt; <ref refid="classparquet_1_1_typed_comparator_1ad9fc7c6aa20d9d4337388dbe1cea1999" kindref="member">T</ref>, <ref refid="classparquet_1_1_typed_comparator_1ad9fc7c6aa20d9d4337388dbe1cea1999" kindref="member">T</ref> &gt;</type>
        <definition>virtual std::pair&lt;T, T&gt; parquet::TypedComparator&lt; DType &gt;::GetMinMax</definition>
        <argsstring>(const T *values, int64_t length)=0</argsstring>
        <name>GetMinMax</name>
        <param>
          <type>const <ref refid="classparquet_1_1_typed_comparator_1ad9fc7c6aa20d9d4337388dbe1cea1999" kindref="member">T</ref> *</type>
          <declname>values</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Compute maximum and minimum elements in a batch of elements without any nulls. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/statistics.h" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_typed_comparator_1a3dc624909177cc0ada57ff487f215f18" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::pair&lt; <ref refid="classparquet_1_1_typed_comparator_1ad9fc7c6aa20d9d4337388dbe1cea1999" kindref="member">T</ref>, <ref refid="classparquet_1_1_typed_comparator_1ad9fc7c6aa20d9d4337388dbe1cea1999" kindref="member">T</ref> &gt;</type>
        <definition>virtual std::pair&lt;T, T&gt; parquet::TypedComparator&lt; DType &gt;::GetMinMax</definition>
        <argsstring>(const ::arrow::Array &amp;values)=0</argsstring>
        <name>GetMinMax</name>
        <param>
          <type>const ::<ref refid="classarrow_1_1_array" kindref="compound">arrow::Array</ref> &amp;</type>
          <declname>values</declname>
        </param>
        <briefdescription>
<para>Compute minimum and maximum elements from an Arrow array. </para>        </briefdescription>
        <detaileddescription>
<para>Only valid for certain Parquet <ref refid="structparquet_1_1_type" kindref="compound">Type</ref> / Arrow <ref refid="structparquet_1_1_type" kindref="compound">Type</ref> combinations, like BYTE_ARRAY / <ref refid="classarrow_1_1_binary_array" kindref="compound">arrow::BinaryArray</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/statistics.h" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_typed_comparator_1a78d29832f7fcdeb71d5400ac680198c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::pair&lt; <ref refid="classparquet_1_1_typed_comparator_1ad9fc7c6aa20d9d4337388dbe1cea1999" kindref="member">T</ref>, <ref refid="classparquet_1_1_typed_comparator_1ad9fc7c6aa20d9d4337388dbe1cea1999" kindref="member">T</ref> &gt;</type>
        <definition>virtual std::pair&lt;T, T&gt; parquet::TypedComparator&lt; DType &gt;::GetMinMaxSpaced</definition>
        <argsstring>(const T *values, int64_t length, const uint8_t *valid_bits, int64_t valid_bits_offset)=0</argsstring>
        <name>GetMinMaxSpaced</name>
        <param>
          <type>const <ref refid="classparquet_1_1_typed_comparator_1ad9fc7c6aa20d9d4337388dbe1cea1999" kindref="member">T</ref> *</type>
          <declname>values</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>valid_bits</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>valid_bits_offset</declname>
        </param>
        <briefdescription>
<para>Compute maximum and minimum elements in a batch of elements with accompanying bitmap indicating which elements are included (bit set) and excluded (bit not set) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">values</parametername>
</parameternamelist>
<parameterdescription>
<para>the sequence of values </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>the length of the sequence </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">valid_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>a bitmap indicating which elements are included (1) or excluded (0) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">valid_bits_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>the bit offset into the bitmap of the first element in the sequence </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/statistics.h" line="97" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Interface for comparison of physical types according to the semantics of a particular logical type. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4755">
        <label>parquet::TypedComparator&lt; DType &gt;</label>
        <link refid="classparquet_1_1_typed_comparator"/>
        <childnode refid="4756" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4756">
        <label>parquet::Comparator</label>
        <link refid="classparquet_1_1_comparator"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4757">
        <label>parquet::TypedComparator&lt; DType &gt;</label>
        <link refid="classparquet_1_1_typed_comparator"/>
        <childnode refid="4758" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4758">
        <label>parquet::Comparator</label>
        <link refid="classparquet_1_1_comparator"/>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/parquet/statistics.h" line="70" column="1" bodyfile="/arrow/cpp/src/parquet/statistics.h" bodystart="70" bodyend="100"/>
    <listofallmembers>
      <member refid="classparquet_1_1_typed_comparator_1a1ef1eb4b796969816481745adc4f43ac" prot="public" virt="pure-virtual"><scope>parquet::TypedComparator</scope><name>Compare</name></member>
      <member refid="classparquet_1_1_typed_comparator_1a5d149029941bf2e6b0028b202a156adc" prot="public" virt="pure-virtual"><scope>parquet::TypedComparator</scope><name>GetMinMax</name></member>
      <member refid="classparquet_1_1_typed_comparator_1a3dc624909177cc0ada57ff487f215f18" prot="public" virt="pure-virtual"><scope>parquet::TypedComparator</scope><name>GetMinMax</name></member>
      <member refid="classparquet_1_1_typed_comparator_1a78d29832f7fcdeb71d5400ac680198c1" prot="public" virt="pure-virtual"><scope>parquet::TypedComparator</scope><name>GetMinMaxSpaced</name></member>
      <member refid="classparquet_1_1_comparator_1a8803a59fd17607eb7128ae0a8b612df8" prot="public" virt="non-virtual"><scope>parquet::TypedComparator</scope><name>Make</name></member>
      <member refid="classparquet_1_1_comparator_1a16a78dcaf7b8775abee98ed533c68c23" prot="public" virt="non-virtual"><scope>parquet::TypedComparator</scope><name>Make</name></member>
      <member refid="classparquet_1_1_typed_comparator_1ad9fc7c6aa20d9d4337388dbe1cea1999" prot="public" virt="non-virtual"><scope>parquet::TypedComparator</scope><name>T</name></member>
      <member refid="classparquet_1_1_comparator_1a984631b98387a2de7b16b19d11b514c3" prot="public" virt="virtual"><scope>parquet::TypedComparator</scope><name>~Comparator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
