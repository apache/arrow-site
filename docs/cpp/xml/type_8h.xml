<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="type_8h" kind="file" language="C++">
    <compoundname>type.h</compoundname>
    <includes local="no">atomic</includes>
    <includes local="no">climits</includes>
    <includes local="no">cstdint</includes>
    <includes local="no">iosfwd</includes>
    <includes local="no">memory</includes>
    <includes local="no">string</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes refid="result_8h" local="yes">arrow/result.h</includes>
    <includes refid="type__fwd_8h" local="yes">arrow/type_fwd.h</includes>
    <includes refid="checked__cast_8h" local="yes">arrow/util/checked_cast.h</includes>
    <includes refid="macros_8h" local="yes">arrow/util/macros.h</includes>
    <includes refid="variant_8h" local="yes">arrow/util/variant.h</includes>
    <includes refid="arrow_2util_2visibility_8h" local="yes">arrow/util/visibility.h</includes>
    <includes refid="visitor_8h" local="yes">arrow/visitor.h</includes>
    <includedby refid="adapter_8h" local="yes">/arrow/cpp/src/arrow/adapters/orc/adapter.h</includedby>
    <includedby refid="convert_8h" local="yes">/arrow/cpp/src/arrow/adapters/tensorflow/convert.h</includedby>
    <includedby refid="api_8h" local="yes">/arrow/cpp/src/arrow/api.h</includedby>
    <includedby refid="builder__base_8h" local="yes">/arrow/cpp/src/arrow/array/builder_base.h</includedby>
    <includedby refid="builder__primitive_8h" local="yes">/arrow/cpp/src/arrow/array/builder_primitive.h</includedby>
    <includedby refid="dict__internal_8h" local="yes">/arrow/cpp/src/arrow/array/dict_internal.h</includedby>
    <includedby refid="array_8h" local="yes">/arrow/cpp/src/arrow/array.h</includedby>
    <includedby refid="count_8h" local="yes">/arrow/cpp/src/arrow/compute/kernels/count.h</includedby>
    <includedby refid="isin_8h" local="yes">/arrow/cpp/src/arrow/compute/kernels/isin.h</includedby>
    <includedby refid="match_8h" local="yes">/arrow/cpp/src/arrow/compute/kernels/match.h</includedby>
    <includedby refid="mean_8h" local="yes">/arrow/cpp/src/arrow/compute/kernels/mean.h</includedby>
    <includedby refid="sum__internal_8h" local="yes">/arrow/cpp/src/arrow/compute/kernels/sum_internal.h</includedby>
    <includedby refid="arrow_2csv_2reader_8h" local="yes">/arrow/cpp/src/arrow/csv/reader.h</includedby>
    <includedby refid="dataset__internal_8h" local="yes">/arrow/cpp/src/arrow/dataset/dataset_internal.h</includedby>
    <includedby refid="extension__type_8h" local="yes">/arrow/cpp/src/arrow/extension_type.h</includedby>
    <includedby refid="arrow_2pch_8h" local="yes">/arrow/cpp/src/arrow/pch.h</includedby>
    <includedby refid="datetime_8h" local="yes">/arrow/cpp/src/arrow/python/datetime.h</includedby>
    <includedby refid="python_2decimal_8h" local="yes">/arrow/cpp/src/arrow/python/decimal.h</includedby>
    <includedby refid="python_2helpers_8h" local="yes">/arrow/cpp/src/arrow/python/helpers.h</includedby>
    <includedby refid="inference_8h" local="yes">/arrow/cpp/src/arrow/python/inference.h</includedby>
    <includedby refid="python__to__arrow_8h" local="yes">/arrow/cpp/src/arrow/python/python_to_arrow.h</includedby>
    <includedby refid="python_2type__traits_8h" local="yes">/arrow/cpp/src/arrow/python/type_traits.h</includedby>
    <includedby refid="scalar_8h" local="yes">/arrow/cpp/src/arrow/scalar.h</includedby>
    <includedby refid="sparse__tensor_8h" local="yes">/arrow/cpp/src/arrow/sparse_tensor.h</includedby>
    <includedby refid="stl_8h" local="yes">/arrow/cpp/src/arrow/stl.h</includedby>
    <includedby refid="table_8h" local="yes">/arrow/cpp/src/arrow/table.h</includedby>
    <includedby refid="table__builder_8h" local="yes">/arrow/cpp/src/arrow/table_builder.h</includedby>
    <includedby refid="tensor_8h" local="yes">/arrow/cpp/src/arrow/tensor.h</includedby>
    <includedby refid="formatting_8h" local="yes">/arrow/cpp/src/arrow/util/formatting.h</includedby>
    <includedby refid="hashing_8h" local="yes">/arrow/cpp/src/arrow/util/hashing.h</includedby>
    <includedby refid="parsing_8h" local="yes">/arrow/cpp/src/arrow/util/parsing.h</includedby>
    <includedby refid="time_8h" local="yes">/arrow/cpp/src/arrow/util/time.h</includedby>
    <includedby refid="visitor__inline_8h" local="yes">/arrow/cpp/src/arrow/visitor_inline.h</includedby>
    <includedby refid="arrow_8h" local="no">/arrow/cpp/src/gandiva/arrow.h</includedby>
    <includedby refid="literal__holder_8h" local="no">/arrow/cpp/src/gandiva/literal_holder.h</includedby>
    <includedby refid="tree__expr__builder_8h" local="yes">/arrow/cpp/src/gandiva/tree_expr_builder.h</includedby>
    <includedby refid="properties_8h" local="yes">/arrow/cpp/src/parquet/properties.h</includedby>
    <incdepgraph>
      <node id="11496">
        <label>atomic</label>
      </node>
      <node id="11509">
        <label>arrow/util/compare.h</label>
        <link refid="util_2compare_8h"/>
        <childnode refid="11500" relation="include">
        </childnode>
        <childnode refid="11506" relation="include">
        </childnode>
        <childnode refid="11502" relation="include">
        </childnode>
        <childnode refid="11510" relation="include">
        </childnode>
      </node>
      <node id="11498">
        <label>cstdint</label>
      </node>
      <node id="11507">
        <label>arrow/status.h</label>
        <link refid="status_8h"/>
        <childnode refid="11508" relation="include">
        </childnode>
        <childnode refid="11499" relation="include">
        </childnode>
        <childnode refid="11500" relation="include">
        </childnode>
        <childnode refid="11501" relation="include">
        </childnode>
        <childnode refid="11502" relation="include">
        </childnode>
        <childnode refid="11509" relation="include">
        </childnode>
        <childnode refid="11510" relation="include">
        </childnode>
        <childnode refid="11511" relation="include">
        </childnode>
        <childnode refid="11513" relation="include">
        </childnode>
      </node>
      <node id="11514">
        <label>arrow/type_fwd.h</label>
        <link refid="type__fwd_8h"/>
        <childnode refid="11500" relation="include">
        </childnode>
        <childnode refid="11501" relation="include">
        </childnode>
        <childnode refid="11503" relation="include">
        </childnode>
        <childnode refid="11510" relation="include">
        </childnode>
        <childnode refid="11513" relation="include">
        </childnode>
      </node>
      <node id="11515">
        <label>arrow/util/checked_cast.h</label>
        <link refid="checked__cast_8h"/>
        <childnode refid="11500" relation="include">
        </childnode>
        <childnode refid="11506" relation="include">
        </childnode>
      </node>
      <node id="11501">
        <label>string</label>
      </node>
      <node id="11516">
        <label>arrow/util/variant.h</label>
        <link refid="variant_8h"/>
        <childnode refid="11517" relation="include">
        </childnode>
      </node>
      <node id="11518">
        <label>arrow/visitor.h</label>
        <link refid="visitor_8h"/>
        <childnode refid="11507" relation="include">
        </childnode>
        <childnode refid="11514" relation="include">
        </childnode>
        <childnode refid="11513" relation="include">
        </childnode>
      </node>
      <node id="11512">
        <label>ostream</label>
      </node>
      <node id="11513">
        <label>arrow/util/visibility.h</label>
        <link refid="arrow_2util_2visibility_8h"/>
      </node>
      <node id="11503">
        <label>vector</label>
      </node>
      <node id="11505">
        <label>new</label>
      </node>
      <node id="11502">
        <label>utility</label>
      </node>
      <node id="11499">
        <label>iosfwd</label>
      </node>
      <node id="11517">
        <label>arrow/vendored/variant.hpp</label>
      </node>
      <node id="11504">
        <label>arrow/result.h</label>
        <link refid="result_8h"/>
        <childnode refid="11505" relation="include">
        </childnode>
        <childnode refid="11501" relation="include">
        </childnode>
        <childnode refid="11506" relation="include">
        </childnode>
        <childnode refid="11502" relation="include">
        </childnode>
        <childnode refid="11507" relation="include">
        </childnode>
        <childnode refid="11509" relation="include">
        </childnode>
      </node>
      <node id="11497">
        <label>climits</label>
      </node>
      <node id="11495">
        <label>/arrow/cpp/src/arrow/type.h</label>
        <link refid="type_8h"/>
        <childnode refid="11496" relation="include">
        </childnode>
        <childnode refid="11497" relation="include">
        </childnode>
        <childnode refid="11498" relation="include">
        </childnode>
        <childnode refid="11499" relation="include">
        </childnode>
        <childnode refid="11500" relation="include">
        </childnode>
        <childnode refid="11501" relation="include">
        </childnode>
        <childnode refid="11502" relation="include">
        </childnode>
        <childnode refid="11503" relation="include">
        </childnode>
        <childnode refid="11504" relation="include">
        </childnode>
        <childnode refid="11514" relation="include">
        </childnode>
        <childnode refid="11515" relation="include">
        </childnode>
        <childnode refid="11510" relation="include">
        </childnode>
        <childnode refid="11516" relation="include">
        </childnode>
        <childnode refid="11513" relation="include">
        </childnode>
        <childnode refid="11518" relation="include">
        </childnode>
      </node>
      <node id="11506">
        <label>type_traits</label>
      </node>
      <node id="11508">
        <label>cstring</label>
      </node>
      <node id="11511">
        <label>arrow/util/string_builder.h</label>
        <link refid="string__builder_8h"/>
        <childnode refid="11500" relation="include">
        </childnode>
        <childnode refid="11512" relation="include">
        </childnode>
        <childnode refid="11501" relation="include">
        </childnode>
        <childnode refid="11502" relation="include">
        </childnode>
        <childnode refid="11513" relation="include">
        </childnode>
      </node>
      <node id="11500">
        <label>memory</label>
      </node>
      <node id="11510">
        <label>arrow/util/macros.h</label>
        <link refid="macros_8h"/>
        <childnode refid="11498" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="11527">
        <label>/arrow/cpp/src/arrow/array/dict_internal.h</label>
        <link refid="dict__internal_8h"/>
      </node>
      <node id="11670">
        <label>/arrow/cpp/src/parquet/api/writer.h</label>
        <link refid="parquet_2api_2writer_8h"/>
      </node>
      <node id="11573">
        <label>/arrow/cpp/src/gandiva/exported_funcs_registry.h</label>
        <link refid="exported__funcs__registry_8h"/>
        <childnode refid="11574" relation="include">
        </childnode>
      </node>
      <node id="11607">
        <label>/arrow/cpp/src/arrow/compute/kernels/filter.h</label>
        <link refid="arrow_2compute_2kernels_2filter_8h"/>
        <childnode refid="11594" relation="include">
        </childnode>
      </node>
      <node id="11572">
        <label>/arrow/cpp/src/gandiva/engine.h</label>
        <link refid="engine_8h"/>
        <childnode refid="11573" relation="include">
        </childnode>
        <childnode refid="11575" relation="include">
        </childnode>
        <childnode refid="11536" relation="include">
        </childnode>
      </node>
      <node id="11612">
        <label>/arrow/cpp/src/arrow/compute/kernels/sort_to_indices.h</label>
        <link refid="sort__to__indices_8h"/>
        <childnode refid="11594" relation="include">
        </childnode>
      </node>
      <node id="11596">
        <label>/arrow/cpp/src/arrow/compute/kernels/aggregate.h</label>
        <link refid="aggregate_8h"/>
        <childnode refid="11597" relation="include">
        </childnode>
      </node>
      <node id="11577">
        <label>/arrow/cpp/src/gandiva/pch.h</label>
        <link refid="gandiva_2pch_8h"/>
      </node>
      <node id="11555">
        <label>/arrow/cpp/src/gandiva/function_holder_registry.h</label>
        <link refid="function__holder__registry_8h"/>
      </node>
      <node id="11649">
        <label>/arrow/cpp/src/arrow/sparse_tensor.h</label>
        <link refid="sparse__tensor_8h"/>
        <childnode refid="11650" relation="include">
        </childnode>
        <childnode refid="11642" relation="include">
        </childnode>
        <childnode refid="11646" relation="include">
        </childnode>
        <childnode refid="11651" relation="include">
        </childnode>
        <childnode refid="11653" relation="include">
        </childnode>
      </node>
      <node id="11585">
        <label>/arrow/cpp/src/arrow/array/builder_binary.h</label>
        <link refid="builder__binary_8h"/>
        <childnode refid="11586" relation="include">
        </childnode>
        <childnode refid="11528" relation="include">
        </childnode>
      </node>
      <node id="11635">
        <label>/arrow/cpp/src/arrow/python/flight.h</label>
        <link refid="flight_8h"/>
      </node>
      <node id="11659">
        <label>/arrow/cpp/src/plasma/thirdparty/ae/ae.h</label>
        <link refid="ae_8h"/>
      </node>
      <node id="11650">
        <label>/arrow/cpp/src/arrow/ipc/metadata_internal.h</label>
        <link refid="metadata__internal_8h"/>
      </node>
      <node id="11597">
        <label>/arrow/cpp/src/arrow/compute/kernels/sum_internal.h</label>
        <link refid="sum__internal_8h"/>
      </node>
      <node id="11588">
        <label>/arrow/cpp/src/arrow/array/builder_primitive.h</label>
        <link refid="builder__primitive_8h"/>
        <childnode refid="11526" relation="include">
        </childnode>
        <childnode refid="11589" relation="include">
        </childnode>
        <childnode refid="11528" relation="include">
        </childnode>
      </node>
      <node id="11668">
        <label>/arrow/cpp/src/parquet/stream_reader.h</label>
        <link refid="stream__reader_8h"/>
      </node>
      <node id="11665">
        <label>/arrow/cpp/src/parquet/encryption_internal.h</label>
        <link refid="encryption__internal_8h"/>
      </node>
      <node id="11536">
        <label>/arrow/cpp/src/gandiva/llvm_generator.h</label>
        <link refid="llvm__generator_8h"/>
      </node>
      <node id="11643">
        <label>/arrow/cpp/src/arrow/python/numpy_internal.h</label>
        <link refid="numpy__internal_8h"/>
        <childnode refid="11638" relation="include">
        </childnode>
      </node>
      <node id="11664">
        <label>/arrow/cpp/src/parquet/arrow/writer.h</label>
        <link refid="parquet_2arrow_2writer_8h"/>
      </node>
      <node id="11632">
        <label>/arrow/cpp/src/arrow/python/benchmark.h</label>
        <link refid="benchmark_8h"/>
      </node>
      <node id="11613">
        <label>/arrow/cpp/src/arrow/compute/kernels/take.h</label>
        <link refid="take_8h"/>
        <childnode refid="11594" relation="include">
        </childnode>
      </node>
      <node id="11575">
        <label>/arrow/cpp/src/gandiva/function_ir_builder.h</label>
        <link refid="function__ir__builder_8h"/>
        <childnode refid="11576" relation="include">
        </childnode>
      </node>
      <node id="11563">
        <label>/arrow/cpp/src/gandiva/function_registry_arithmetic.h</label>
        <link refid="function__registry__arithmetic_8h"/>
      </node>
      <node id="11535">
        <label>/arrow/cpp/src/gandiva/annotator.h</label>
        <link refid="annotator_8h"/>
        <childnode refid="11536" relation="include">
        </childnode>
      </node>
      <node id="11601">
        <label>/arrow/cpp/src/arrow/dataset/partition.h</label>
        <link refid="partition_8h"/>
        <childnode refid="11602" relation="include">
        </childnode>
        <childnode refid="11603" relation="include">
        </childnode>
      </node>
      <node id="11584">
        <label>/arrow/cpp/src/gandiva/execution_context.h</label>
        <link refid="execution__context_8h"/>
        <childnode refid="11543" relation="include">
        </childnode>
        <childnode refid="11536" relation="include">
        </childnode>
        <childnode refid="11558" relation="include">
        </childnode>
      </node>
      <node id="11638">
        <label>/arrow/cpp/src/arrow/python/iterators.h</label>
        <link refid="iterators_8h"/>
      </node>
      <node id="11621">
        <label>/arrow/cpp/src/arrow/flight/pch.h</label>
        <link refid="arrow_2flight_2pch_8h"/>
      </node>
      <node id="11666">
        <label>/arrow/cpp/src/parquet/file_reader.h</label>
        <link refid="file__reader_8h"/>
        <childnode refid="11662" relation="include">
        </childnode>
        <childnode refid="11663" relation="include">
        </childnode>
        <childnode refid="11667" relation="include">
        </childnode>
        <childnode refid="11668" relation="include">
        </childnode>
      </node>
      <node id="11522">
        <label>/arrow/cpp/src/arrow/api.h</label>
        <link refid="api_8h"/>
      </node>
      <node id="11589">
        <label>/arrow/cpp/src/arrow/array/builder_time.h</label>
        <link refid="builder__time_8h"/>
        <childnode refid="11528" relation="include">
        </childnode>
      </node>
      <node id="11656">
        <label>/arrow/cpp/src/arrow/util/formatting.h</label>
        <link refid="formatting_8h"/>
      </node>
      <node id="11542">
        <label>/arrow/cpp/src/gandiva/decimal_type_util.h</label>
        <link refid="decimal__type__util_8h"/>
      </node>
      <node id="11616">
        <label>/arrow/cpp/src/arrow/python/extension_type.h</label>
        <link refid="python_2extension__type_8h"/>
      </node>
      <node id="11559">
        <label>/arrow/cpp/src/gandiva/function_registry_common.h</label>
        <link refid="function__registry__common_8h"/>
        <childnode refid="11560" relation="include">
        </childnode>
      </node>
      <node id="11553">
        <label>/arrow/cpp/src/gandiva/func_descriptor.h</label>
        <link refid="func__descriptor_8h"/>
        <childnode refid="11552" relation="include">
        </childnode>
        <childnode refid="11554" relation="include">
        </childnode>
      </node>
      <node id="11539">
        <label>/arrow/cpp/src/gandiva/filter_cache_key.h</label>
        <link refid="filter__cache__key_8h"/>
      </node>
      <node id="11605">
        <label>/arrow/cpp/src/arrow/dataset/file_parquet.h</label>
        <link refid="file__parquet_8h"/>
        <childnode refid="11600" relation="include">
        </childnode>
      </node>
      <node id="11636">
        <label>/arrow/cpp/src/arrow/python/inference.h</label>
        <link refid="inference_8h"/>
        <childnode refid="11629" relation="include">
        </childnode>
      </node>
      <node id="11567">
        <label>/arrow/cpp/src/gandiva/function_registry_string.h</label>
        <link refid="function__registry__string_8h"/>
      </node>
      <node id="11617">
        <label>/arrow/cpp/src/arrow/visitor_inline.h</label>
        <link refid="visitor__inline_8h"/>
        <childnode refid="11527" relation="include">
        </childnode>
        <childnode refid="11529" relation="include">
        </childnode>
      </node>
      <node id="11658">
        <label>/arrow/cpp/src/arrow/util/time.h</label>
        <link refid="time_8h"/>
        <childnode refid="11659" relation="include">
        </childnode>
      </node>
      <node id="11549">
        <label>/arrow/cpp/src/gandiva/projector_cache_key.h</label>
        <link refid="projector__cache__key_8h"/>
      </node>
      <node id="11672">
        <label>/arrow/cpp/src/parquet/metadata.h</label>
        <link refid="metadata_8h"/>
        <childnode refid="11662" relation="include">
        </childnode>
        <childnode refid="11667" relation="include">
        </childnode>
        <childnode refid="11666" relation="include">
        </childnode>
        <childnode refid="11669" relation="include">
        </childnode>
        <childnode refid="11673" relation="include">
        </childnode>
      </node>
      <node id="11631">
        <label>/arrow/cpp/src/arrow/python/arrow_to_pandas.h</label>
        <link refid="arrow__to__pandas_8h"/>
        <childnode refid="11629" relation="include">
        </childnode>
      </node>
      <node id="11654">
        <label>/arrow/cpp/src/arrow/table.h</label>
        <link refid="table_8h"/>
        <childnode refid="11522" relation="include">
        </childnode>
        <childnode refid="11593" relation="include">
        </childnode>
        <childnode refid="11619" relation="include">
        </childnode>
        <childnode refid="11531" relation="include">
        </childnode>
      </node>
      <node id="11624">
        <label>/arrow/cpp/src/arrow/compute/kernels/mean.h</label>
        <link refid="mean_8h"/>
        <childnode refid="11594" relation="include">
        </childnode>
      </node>
      <node id="11581">
        <label>/arrow/cpp/src/gandiva/compiled_expr.h</label>
        <link refid="compiled__expr_8h"/>
        <childnode refid="11536" relation="include">
        </childnode>
      </node>
      <node id="11595">
        <label>/arrow/cpp/src/arrow/compute/kernels/add.h</label>
        <link refid="add_8h"/>
      </node>
      <node id="11558">
        <label>/arrow/cpp/src/gandiva/to_date_holder.h</label>
        <link refid="to__date__holder_8h"/>
        <childnode refid="11555" relation="include">
        </childnode>
      </node>
      <node id="11642">
        <label>/arrow/cpp/src/arrow/python/numpy_convert.h</label>
        <link refid="numpy__convert_8h"/>
        <childnode refid="11629" relation="include">
        </childnode>
      </node>
      <node id="11619">
        <label>/arrow/cpp/src/arrow/pch.h</label>
        <link refid="arrow_2pch_8h"/>
        <childnode refid="11620" relation="include">
        </childnode>
        <childnode refid="11621" relation="include">
        </childnode>
        <childnode refid="11622" relation="include">
        </childnode>
        <childnode refid="11577" relation="include">
        </childnode>
      </node>
      <node id="11587">
        <label>/arrow/cpp/src/arrow/array/builder_nested.h</label>
        <link refid="builder__nested_8h"/>
        <childnode refid="11528" relation="include">
        </childnode>
      </node>
      <node id="11615">
        <label>/arrow/cpp/src/arrow/extension_type.h</label>
        <link refid="extension__type_8h"/>
        <childnode refid="11522" relation="include">
        </childnode>
        <childnode refid="11616" relation="include">
        </childnode>
        <childnode refid="11617" relation="include">
        </childnode>
      </node>
      <node id="11651">
        <label>/arrow/cpp/src/arrow/python/serialize.h</label>
        <link refid="serialize_8h"/>
        <childnode refid="11629" relation="include">
        </childnode>
        <childnode refid="11652" relation="include">
        </childnode>
      </node>
      <node id="11548">
        <label>/arrow/cpp/src/gandiva/projector.h</label>
        <link refid="gandiva_2projector_8h"/>
        <childnode refid="11549" relation="include">
        </childnode>
      </node>
      <node id="11610">
        <label>/arrow/cpp/src/arrow/compute/kernels/match.h</label>
        <link refid="match_8h"/>
      </node>
      <node id="11646">
        <label>/arrow/cpp/src/arrow/python/pyarrow.h</label>
        <link refid="pyarrow_8h"/>
        <childnode refid="11634" relation="include">
        </childnode>
      </node>
      <node id="11533">
        <label>/arrow/cpp/src/arrow/util/hashing.h</label>
        <link refid="hashing_8h"/>
        <childnode refid="11527" relation="include">
        </childnode>
      </node>
      <node id="11622">
        <label>/arrow/cpp/src/arrow/python/pch.h</label>
        <link refid="arrow_2python_2pch_8h"/>
      </node>
      <node id="11661">
        <label>/arrow/cpp/src/parquet/properties.h</label>
        <link refid="properties_8h"/>
        <childnode refid="11662" relation="include">
        </childnode>
        <childnode refid="11663" relation="include">
        </childnode>
        <childnode refid="11664" relation="include">
        </childnode>
        <childnode refid="11665" relation="include">
        </childnode>
        <childnode refid="11666" relation="include">
        </childnode>
        <childnode refid="11669" relation="include">
        </childnode>
        <childnode refid="11672" relation="include">
        </childnode>
        <childnode refid="11673" relation="include">
        </childnode>
      </node>
      <node id="11528">
        <label>/arrow/cpp/src/arrow/builder.h</label>
        <link refid="builder_8h"/>
        <childnode refid="11522" relation="include">
        </childnode>
        <childnode refid="11529" relation="include">
        </childnode>
        <childnode refid="11530" relation="include">
        </childnode>
        <childnode refid="11531" relation="include">
        </childnode>
        <childnode refid="11532" relation="include">
        </childnode>
        <childnode refid="11533" relation="include">
        </childnode>
        <childnode refid="11534" relation="include">
        </childnode>
      </node>
      <node id="11657">
        <label>/arrow/cpp/src/arrow/util/parsing.h</label>
        <link refid="parsing_8h"/>
      </node>
      <node id="11629">
        <label>/arrow/cpp/src/arrow/python/api.h</label>
        <link refid="python_2api_8h"/>
      </node>
      <node id="11571">
        <label>/arrow/cpp/src/gandiva/llvm_types.h</label>
        <link refid="llvm__types_8h"/>
        <childnode refid="11572" relation="include">
        </childnode>
        <childnode refid="11546" relation="include">
        </childnode>
        <childnode refid="11575" relation="include">
        </childnode>
        <childnode refid="11536" relation="include">
        </childnode>
        <childnode refid="11577" relation="include">
        </childnode>
      </node>
      <node id="11557">
        <label>/arrow/cpp/src/gandiva/random_generator_holder.h</label>
        <link refid="random__generator__holder_8h"/>
        <childnode refid="11555" relation="include">
        </childnode>
      </node>
      <node id="11662">
        <label>/arrow/cpp/src/parquet/api/reader.h</label>
        <link refid="parquet_2api_2reader_8h"/>
      </node>
      <node id="11611">
        <label>/arrow/cpp/src/arrow/compute/kernels/nth_to_indices.h</label>
        <link refid="nth__to__indices_8h"/>
        <childnode refid="11594" relation="include">
        </childnode>
      </node>
      <node id="11603">
        <label>/arrow/cpp/src/arrow/dataset/file_base.h</label>
        <link refid="file__base_8h"/>
        <childnode refid="11600" relation="include">
        </childnode>
        <childnode refid="11604" relation="include">
        </childnode>
        <childnode refid="11605" relation="include">
        </childnode>
      </node>
      <node id="11562">
        <label>/arrow/cpp/src/gandiva/native_function.h</label>
        <link refid="native__function_8h"/>
        <childnode refid="11552" relation="include">
        </childnode>
        <childnode refid="11560" relation="include">
        </childnode>
        <childnode refid="11563" relation="include">
        </childnode>
        <childnode refid="11559" relation="include">
        </childnode>
        <childnode refid="11564" relation="include">
        </childnode>
        <childnode refid="11565" relation="include">
        </childnode>
        <childnode refid="11566" relation="include">
        </childnode>
        <childnode refid="11567" relation="include">
        </childnode>
        <childnode refid="11568" relation="include">
        </childnode>
      </node>
      <node id="11582">
        <label>/arrow/cpp/src/gandiva/selection_vector_impl.h</label>
        <link refid="selection__vector__impl_8h"/>
      </node>
      <node id="11645">
        <label>/arrow/cpp/src/arrow/python/numpy_to_arrow.h</label>
        <link refid="numpy__to__arrow_8h"/>
        <childnode refid="11629" relation="include">
        </childnode>
      </node>
      <node id="11570">
        <label>/arrow/cpp/src/gandiva/jni/module_holder.h</label>
        <link refid="module__holder_8h"/>
      </node>
      <node id="11602">
        <label>/arrow/cpp/src/arrow/dataset/discovery.h</label>
        <link refid="discovery_8h"/>
        <childnode refid="11600" relation="include">
        </childnode>
      </node>
      <node id="11526">
        <label>/arrow/cpp/src/arrow/array/builder_dict.h</label>
        <link refid="builder__dict_8h"/>
        <childnode refid="11527" relation="include">
        </childnode>
        <childnode refid="11528" relation="include">
        </childnode>
      </node>
      <node id="11640">
        <label>/arrow/cpp/src/arrow/python/helpers.h</label>
        <link refid="python_2helpers_8h"/>
        <childnode refid="11629" relation="include">
        </childnode>
      </node>
      <node id="11583">
        <label>/arrow/cpp/src/gandiva/simple_arena.h</label>
        <link refid="simple__arena_8h"/>
        <childnode refid="11584" relation="include">
        </childnode>
      </node>
      <node id="11550">
        <label>/arrow/cpp/src/gandiva/expression_registry.h</label>
        <link refid="expression__registry_8h"/>
      </node>
      <node id="11560">
        <label>/arrow/cpp/src/gandiva/function_registry.h</label>
        <link refid="function__registry_8h"/>
        <childnode refid="11546" relation="include">
        </childnode>
        <childnode refid="11536" relation="include">
        </childnode>
      </node>
      <node id="11609">
        <label>/arrow/cpp/src/arrow/compute/kernels/isin.h</label>
        <link refid="isin_8h"/>
        <childnode refid="11594" relation="include">
        </childnode>
      </node>
      <node id="11534">
        <label>/arrow/cpp/src/gandiva/arrow.h</label>
        <link refid="arrow_8h"/>
        <childnode refid="11535" relation="include">
        </childnode>
        <childnode refid="11537" relation="include">
        </childnode>
        <childnode refid="11541" relation="include">
        </childnode>
        <childnode refid="11542" relation="include">
        </childnode>
        <childnode refid="11543" relation="include">
        </childnode>
        <childnode refid="11545" relation="include">
        </childnode>
        <childnode refid="11546" relation="include">
        </childnode>
        <childnode refid="11547" relation="include">
        </childnode>
        <childnode refid="11550" relation="include">
        </childnode>
        <childnode refid="11551" relation="include">
        </childnode>
        <childnode refid="11538" relation="include">
        </childnode>
        <childnode refid="11539" relation="include">
        </childnode>
        <childnode refid="11553" relation="include">
        </childnode>
        <childnode refid="11559" relation="include">
        </childnode>
        <childnode refid="11561" relation="include">
        </childnode>
        <childnode refid="11569" relation="include">
        </childnode>
        <childnode refid="11570" relation="include">
        </childnode>
        <childnode refid="11571" relation="include">
        </childnode>
        <childnode refid="11578" relation="include">
        </childnode>
        <childnode refid="11554" relation="include">
        </childnode>
        <childnode refid="11548" relation="include">
        </childnode>
        <childnode refid="11549" relation="include">
        </childnode>
        <childnode refid="11579" relation="include">
        </childnode>
        <childnode refid="11580" relation="include">
        </childnode>
        <childnode refid="11582" relation="include">
        </childnode>
        <childnode refid="11583" relation="include">
        </childnode>
      </node>
      <node id="11541">
        <label>/arrow/cpp/src/gandiva/date_utils.h</label>
        <link refid="date__utils_8h"/>
      </node>
      <node id="11552">
        <label>/arrow/cpp/src/gandiva/dex.h</label>
        <link refid="dex_8h"/>
        <childnode refid="11544" relation="include">
        </childnode>
      </node>
      <node id="11525">
        <label>/arrow/cpp/src/arrow/array/builder_adaptive.h</label>
        <link refid="builder__adaptive_8h"/>
        <childnode refid="11526" relation="include">
        </childnode>
        <childnode refid="11528" relation="include">
        </childnode>
      </node>
      <node id="11540">
        <label>/arrow/cpp/src/gandiva/tree_expr_builder.h</label>
        <link refid="tree__expr__builder_8h"/>
      </node>
      <node id="11594">
        <label>/arrow/cpp/src/arrow/compute/api.h</label>
        <link refid="compute_2api_8h"/>
        <childnode refid="11531" relation="include">
        </childnode>
      </node>
      <node id="11576">
        <label>/arrow/cpp/src/gandiva/decimal_ir.h</label>
        <link refid="decimal__ir_8h"/>
      </node>
      <node id="11554">
        <label>/arrow/cpp/src/gandiva/node.h</label>
        <link refid="node_8h"/>
        <childnode refid="11545" relation="include">
        </childnode>
        <childnode refid="11546" relation="include">
        </childnode>
        <childnode refid="11555" relation="include">
        </childnode>
        <childnode refid="11556" relation="include">
        </childnode>
        <childnode refid="11557" relation="include">
        </childnode>
        <childnode refid="11558" relation="include">
        </childnode>
      </node>
      <node id="11655">
        <label>/arrow/cpp/src/arrow/tensor.h</label>
        <link refid="tensor_8h"/>
        <childnode refid="11522" relation="include">
        </childnode>
        <childnode refid="11649" relation="include">
        </childnode>
      </node>
      <node id="11551">
        <label>/arrow/cpp/src/gandiva/field_descriptor.h</label>
        <link refid="field__descriptor_8h"/>
        <childnode refid="11552" relation="include">
        </childnode>
      </node>
      <node id="11523">
        <label>/arrow/cpp/src/arrow/array/builder_base.h</label>
        <link refid="builder__base_8h"/>
        <childnode refid="11524" relation="include">
        </childnode>
        <childnode refid="11525" relation="include">
        </childnode>
        <childnode refid="11585" relation="include">
        </childnode>
        <childnode refid="11586" relation="include">
        </childnode>
        <childnode refid="11526" relation="include">
        </childnode>
        <childnode refid="11587" relation="include">
        </childnode>
        <childnode refid="11588" relation="include">
        </childnode>
        <childnode refid="11589" relation="include">
        </childnode>
        <childnode refid="11590" relation="include">
        </childnode>
        <childnode refid="11528" relation="include">
        </childnode>
      </node>
      <node id="11524">
        <label>/arrow/cpp/src/arrow/adapters/orc/adapter_util.h</label>
        <link refid="adapter__util_8h"/>
      </node>
      <node id="11592">
        <label>/arrow/cpp/src/arrow/array/concatenate.h</label>
        <link refid="concatenate_8h"/>
        <childnode refid="11522" relation="include">
        </childnode>
      </node>
      <node id="11586">
        <label>/arrow/cpp/src/arrow/array/builder_decimal.h</label>
        <link refid="builder__decimal_8h"/>
        <childnode refid="11528" relation="include">
        </childnode>
      </node>
      <node id="11637">
        <label>/arrow/cpp/src/arrow/python/io.h</label>
        <link refid="arrow_2python_2io_8h"/>
        <childnode refid="11629" relation="include">
        </childnode>
      </node>
      <node id="11667">
        <label>/arrow/cpp/src/parquet/arrow/reader_internal.h</label>
        <link refid="reader__internal_8h"/>
      </node>
      <node id="11532">
        <label>/arrow/cpp/src/arrow/table_builder.h</label>
        <link refid="table__builder_8h"/>
        <childnode refid="11522" relation="include">
        </childnode>
      </node>
      <node id="11565">
        <label>/arrow/cpp/src/gandiva/function_registry_hash.h</label>
        <link refid="function__registry__hash_8h"/>
      </node>
      <node id="11566">
        <label>/arrow/cpp/src/gandiva/function_registry_math_ops.h</label>
        <link refid="function__registry__math__ops_8h"/>
      </node>
      <node id="11544">
        <label>/arrow/cpp/src/gandiva/bitmap_accumulator.h</label>
        <link refid="bitmap__accumulator_8h"/>
      </node>
      <node id="11627">
        <label>/arrow/cpp/src/arrow/dataset/dataset_internal.h</label>
        <link refid="dataset__internal_8h"/>
        <childnode refid="11606" relation="include">
        </childnode>
      </node>
      <node id="11652">
        <label>/arrow/cpp/src/arrow/python/deserialize.h</label>
        <link refid="deserialize_8h"/>
        <childnode refid="11629" relation="include">
        </childnode>
      </node>
      <node id="11606">
        <label>/arrow/cpp/src/arrow/dataset/scanner_internal.h</label>
        <link refid="scanner__internal_8h"/>
      </node>
      <node id="11593">
        <label>/arrow/cpp/src/arrow/compute/kernel.h</label>
        <link refid="kernel_8h"/>
        <childnode refid="11594" relation="include">
        </childnode>
        <childnode refid="11595" relation="include">
        </childnode>
        <childnode refid="11596" relation="include">
        </childnode>
        <childnode refid="11598" relation="include">
        </childnode>
        <childnode refid="11607" relation="include">
        </childnode>
        <childnode refid="11608" relation="include">
        </childnode>
        <childnode refid="11609" relation="include">
        </childnode>
        <childnode refid="11610" relation="include">
        </childnode>
        <childnode refid="11611" relation="include">
        </childnode>
        <childnode refid="11612" relation="include">
        </childnode>
        <childnode refid="11597" relation="include">
        </childnode>
        <childnode refid="11613" relation="include">
        </childnode>
        <childnode refid="11614" relation="include">
        </childnode>
        <childnode refid="11599" relation="include">
        </childnode>
      </node>
      <node id="11547">
        <label>/arrow/cpp/src/gandiva/expression.h</label>
        <link refid="gandiva_2expression_8h"/>
        <childnode refid="11537" relation="include">
        </childnode>
        <childnode refid="11545" relation="include">
        </childnode>
        <childnode refid="11546" relation="include">
        </childnode>
        <childnode refid="11548" relation="include">
        </childnode>
        <childnode refid="11540" relation="include">
        </childnode>
      </node>
      <node id="11604">
        <label>/arrow/cpp/src/arrow/dataset/file_ipc.h</label>
        <link refid="file__ipc_8h"/>
        <childnode refid="11600" relation="include">
        </childnode>
      </node>
      <node id="11614">
        <label>/arrow/cpp/src/arrow/compute/kernels/util_internal.h</label>
        <link refid="compute_2kernels_2util__internal_8h"/>
      </node>
      <node id="11598">
        <label>/arrow/cpp/src/arrow/compute/kernels/compare.h</label>
        <link refid="compute_2kernels_2compare_8h"/>
        <childnode refid="11594" relation="include">
        </childnode>
        <childnode refid="11599" relation="include">
        </childnode>
      </node>
      <node id="11529">
        <label>/arrow/cpp/src/arrow/compute/kernels/take_internal.h</label>
        <link refid="take__internal_8h"/>
      </node>
      <node id="11564">
        <label>/arrow/cpp/src/gandiva/function_registry_datetime.h</label>
        <link refid="function__registry__datetime_8h"/>
      </node>
      <node id="11628">
        <label>/arrow/cpp/src/arrow/python/datetime.h</label>
        <link refid="datetime_8h"/>
        <childnode refid="11629" relation="include">
        </childnode>
        <childnode refid="11630" relation="include">
        </childnode>
      </node>
      <node id="11644">
        <label>/arrow/cpp/src/arrow/python/numpy_interop.h</label>
        <link refid="numpy__interop_8h"/>
        <childnode refid="11633" relation="include">
        </childnode>
        <childnode refid="11640" relation="include">
        </childnode>
        <childnode refid="11643" relation="include">
        </childnode>
        <childnode refid="11530" relation="include">
        </childnode>
      </node>
      <node id="11633">
        <label>/arrow/cpp/src/arrow/python/config.h</label>
        <link refid="arrow_2python_2config_8h"/>
        <childnode refid="11634" relation="include">
        </childnode>
        <childnode refid="11635" relation="include">
        </childnode>
        <childnode refid="11637" relation="include">
        </childnode>
      </node>
      <node id="11599">
        <label>/arrow/cpp/src/arrow/dataset/filter.h</label>
        <link refid="arrow_2dataset_2filter_8h"/>
        <childnode refid="11600" relation="include">
        </childnode>
        <childnode refid="11601" relation="include">
        </childnode>
        <childnode refid="11606" relation="include">
        </childnode>
      </node>
      <node id="11537">
        <label>/arrow/cpp/src/gandiva/condition.h</label>
        <link refid="condition_8h"/>
        <childnode refid="11538" relation="include">
        </childnode>
        <childnode refid="11540" relation="include">
        </childnode>
      </node>
      <node id="11568">
        <label>/arrow/cpp/src/gandiva/function_registry_timestamp_arithmetic.h</label>
        <link refid="function__registry__timestamp__arithmetic_8h"/>
      </node>
      <node id="11578">
        <label>/arrow/cpp/src/gandiva/local_bitmaps_holder.h</label>
        <link refid="local__bitmaps__holder_8h"/>
        <childnode refid="11543" relation="include">
        </childnode>
      </node>
      <node id="11521">
        <label>/arrow/cpp/src/arrow/adapters/tensorflow/convert.h</label>
        <link refid="convert_8h"/>
      </node>
      <node id="11608">
        <label>/arrow/cpp/src/arrow/compute/kernels/hash.h</label>
        <link refid="hash_8h"/>
        <childnode refid="11594" relation="include">
        </childnode>
      </node>
      <node id="11669">
        <label>/arrow/cpp/src/parquet/file_writer.h</label>
        <link refid="file__writer_8h"/>
        <childnode refid="11670" relation="include">
        </childnode>
        <childnode refid="11671" relation="include">
        </childnode>
      </node>
      <node id="11591">
        <label>/arrow/cpp/src/arrow/array.h</label>
        <link refid="array_8h"/>
        <childnode refid="11522" relation="include">
        </childnode>
        <childnode refid="11585" relation="include">
        </childnode>
        <childnode refid="11526" relation="include">
        </childnode>
        <childnode refid="11587" relation="include">
        </childnode>
        <childnode refid="11588" relation="include">
        </childnode>
        <childnode refid="11590" relation="include">
        </childnode>
        <childnode refid="11592" relation="include">
        </childnode>
        <childnode refid="11527" relation="include">
        </childnode>
        <childnode refid="11593" relation="include">
        </childnode>
        <childnode refid="11609" relation="include">
        </childnode>
        <childnode refid="11610" relation="include">
        </childnode>
        <childnode refid="11614" relation="include">
        </childnode>
        <childnode refid="11615" relation="include">
        </childnode>
        <childnode refid="11618" relation="include">
        </childnode>
        <childnode refid="11619" relation="include">
        </childnode>
        <childnode refid="11533" relation="include">
        </childnode>
        <childnode refid="11617" relation="include">
        </childnode>
        <childnode refid="11534" relation="include">
        </childnode>
      </node>
      <node id="11626">
        <label>/arrow/cpp/src/arrow/csv/api.h</label>
        <link refid="csv_2api_8h"/>
      </node>
      <node id="11660">
        <label>/arrow/cpp/src/gandiva/literal_holder.h</label>
        <link refid="literal__holder_8h"/>
        <childnode refid="11552" relation="include">
        </childnode>
        <childnode refid="11554" relation="include">
        </childnode>
      </node>
      <node id="11580">
        <label>/arrow/cpp/src/gandiva/selection_vector.h</label>
        <link refid="selection__vector_8h"/>
        <childnode refid="11581" relation="include">
        </childnode>
        <childnode refid="11538" relation="include">
        </childnode>
        <childnode refid="11536" relation="include">
        </childnode>
        <childnode refid="11548" relation="include">
        </childnode>
        <childnode refid="11582" relation="include">
        </childnode>
      </node>
      <node id="11634">
        <label>/arrow/cpp/src/arrow/python/common.h</label>
        <link refid="arrow_2python_2common_8h"/>
        <childnode refid="11629" relation="include">
        </childnode>
        <childnode refid="11616" relation="include">
        </childnode>
        <childnode refid="11635" relation="include">
        </childnode>
        <childnode refid="11636" relation="include">
        </childnode>
        <childnode refid="11637" relation="include">
        </childnode>
        <childnode refid="11638" relation="include">
        </childnode>
        <childnode refid="11639" relation="include">
        </childnode>
      </node>
      <node id="11630">
        <label>/arrow/cpp/src/arrow/python/platform.h</label>
        <link refid="arrow_2python_2platform_8h"/>
        <childnode refid="11631" relation="include">
        </childnode>
        <childnode refid="11632" relation="include">
        </childnode>
        <childnode refid="11633" relation="include">
        </childnode>
        <childnode refid="11628" relation="include">
        </childnode>
        <childnode refid="11640" relation="include">
        </childnode>
        <childnode refid="11636" relation="include">
        </childnode>
        <childnode refid="11641" relation="include">
        </childnode>
        <childnode refid="11642" relation="include">
        </childnode>
        <childnode refid="11643" relation="include">
        </childnode>
        <childnode refid="11644" relation="include">
        </childnode>
        <childnode refid="11645" relation="include">
        </childnode>
        <childnode refid="11622" relation="include">
        </childnode>
        <childnode refid="11646" relation="include">
        </childnode>
        <childnode refid="11639" relation="include">
        </childnode>
        <childnode refid="11530" relation="include">
        </childnode>
      </node>
      <node id="11569">
        <label>/arrow/cpp/src/gandiva/in_holder.h</label>
        <link refid="in__holder_8h"/>
        <childnode refid="11552" relation="include">
        </childnode>
      </node>
      <node id="11648">
        <label>/arrow/cpp/src/arrow/scalar.h</label>
        <link refid="scalar_8h"/>
        <childnode refid="11593" relation="include">
        </childnode>
        <childnode refid="11627" relation="include">
        </childnode>
        <childnode refid="11599" relation="include">
        </childnode>
        <childnode refid="11617" relation="include">
        </childnode>
      </node>
      <node id="11625">
        <label>/arrow/cpp/src/arrow/csv/reader.h</label>
        <link refid="arrow_2csv_2reader_8h"/>
        <childnode refid="11626" relation="include">
        </childnode>
      </node>
      <node id="11574">
        <label>/arrow/cpp/src/gandiva/exported_funcs.h</label>
        <link refid="exported__funcs_8h"/>
      </node>
      <node id="11538">
        <label>/arrow/cpp/src/gandiva/filter.h</label>
        <link refid="gandiva_2filter_8h"/>
        <childnode refid="11539" relation="include">
        </childnode>
      </node>
      <node id="11647">
        <label>/arrow/cpp/src/arrow/python/decimal.h</label>
        <link refid="python_2decimal_8h"/>
      </node>
      <node id="11639">
        <label>/arrow/cpp/src/arrow/python/python_to_arrow.h</label>
        <link refid="python__to__arrow_8h"/>
        <childnode refid="11629" relation="include">
        </childnode>
      </node>
      <node id="11519">
        <label>/arrow/cpp/src/arrow/type.h</label>
        <link refid="type_8h"/>
        <childnode refid="11520" relation="include">
        </childnode>
        <childnode refid="11521" relation="include">
        </childnode>
        <childnode refid="11522" relation="include">
        </childnode>
        <childnode refid="11523" relation="include">
        </childnode>
        <childnode refid="11588" relation="include">
        </childnode>
        <childnode refid="11527" relation="include">
        </childnode>
        <childnode refid="11591" relation="include">
        </childnode>
        <childnode refid="11623" relation="include">
        </childnode>
        <childnode refid="11609" relation="include">
        </childnode>
        <childnode refid="11610" relation="include">
        </childnode>
        <childnode refid="11624" relation="include">
        </childnode>
        <childnode refid="11597" relation="include">
        </childnode>
        <childnode refid="11625" relation="include">
        </childnode>
        <childnode refid="11627" relation="include">
        </childnode>
        <childnode refid="11615" relation="include">
        </childnode>
        <childnode refid="11619" relation="include">
        </childnode>
        <childnode refid="11628" relation="include">
        </childnode>
        <childnode refid="11647" relation="include">
        </childnode>
        <childnode refid="11640" relation="include">
        </childnode>
        <childnode refid="11636" relation="include">
        </childnode>
        <childnode refid="11639" relation="include">
        </childnode>
        <childnode refid="11530" relation="include">
        </childnode>
        <childnode refid="11648" relation="include">
        </childnode>
        <childnode refid="11649" relation="include">
        </childnode>
        <childnode refid="11531" relation="include">
        </childnode>
        <childnode refid="11654" relation="include">
        </childnode>
        <childnode refid="11532" relation="include">
        </childnode>
        <childnode refid="11655" relation="include">
        </childnode>
        <childnode refid="11656" relation="include">
        </childnode>
        <childnode refid="11533" relation="include">
        </childnode>
        <childnode refid="11657" relation="include">
        </childnode>
        <childnode refid="11658" relation="include">
        </childnode>
        <childnode refid="11617" relation="include">
        </childnode>
        <childnode refid="11534" relation="include">
        </childnode>
        <childnode refid="11660" relation="include">
        </childnode>
        <childnode refid="11540" relation="include">
        </childnode>
        <childnode refid="11661" relation="include">
        </childnode>
      </node>
      <node id="11556">
        <label>/arrow/cpp/src/gandiva/like_holder.h</label>
        <link refid="like__holder_8h"/>
        <childnode refid="11555" relation="include">
        </childnode>
      </node>
      <node id="11620">
        <label>/arrow/cpp/src/arrow/dataset/pch.h</label>
        <link refid="arrow_2dataset_2pch_8h"/>
      </node>
      <node id="11561">
        <label>/arrow/cpp/src/gandiva/function_signature.h</label>
        <link refid="function__signature_8h"/>
        <childnode refid="11550" relation="include">
        </childnode>
        <childnode refid="11559" relation="include">
        </childnode>
        <childnode refid="11562" relation="include">
        </childnode>
      </node>
      <node id="11623">
        <label>/arrow/cpp/src/arrow/compute/kernels/count.h</label>
        <link refid="count_8h"/>
        <childnode refid="11594" relation="include">
        </childnode>
      </node>
      <node id="11618">
        <label>/arrow/cpp/src/arrow/ipc/util.h</label>
        <link refid="ipc_2util_8h"/>
      </node>
      <node id="11673">
        <label>/arrow/cpp/src/parquet/pch.h</label>
        <link refid="parquet_2pch_8h"/>
      </node>
      <node id="11671">
        <label>/arrow/cpp/src/parquet/stream_writer.h</label>
        <link refid="stream__writer_8h"/>
        <childnode refid="11668" relation="include">
        </childnode>
      </node>
      <node id="11641">
        <label>/arrow/cpp/src/arrow/python/init.h</label>
        <link refid="init_8h"/>
      </node>
      <node id="11543">
        <label>/arrow/cpp/src/gandiva/eval_batch.h</label>
        <link refid="eval__batch_8h"/>
        <childnode refid="11535" relation="include">
        </childnode>
        <childnode refid="11544" relation="include">
        </childnode>
      </node>
      <node id="11530">
        <label>/arrow/cpp/src/arrow/python/type_traits.h</label>
        <link refid="python_2type__traits_8h"/>
      </node>
      <node id="11545">
        <label>/arrow/cpp/src/gandiva/expr_decomposer.h</label>
        <link refid="expr__decomposer_8h"/>
      </node>
      <node id="11653">
        <label>/arrow/cpp/src/arrow/tensor/converter.h</label>
        <link refid="tensor_2converter_8h"/>
      </node>
      <node id="11546">
        <label>/arrow/cpp/src/gandiva/expr_validator.h</label>
        <link refid="expr__validator_8h"/>
      </node>
      <node id="11579">
        <label>/arrow/cpp/src/gandiva/regex_util.h</label>
        <link refid="regex__util_8h"/>
      </node>
      <node id="11531">
        <label>/arrow/cpp/src/arrow/stl.h</label>
        <link refid="stl_8h"/>
      </node>
      <node id="11600">
        <label>/arrow/cpp/src/arrow/dataset/api.h</label>
        <link refid="dataset_2api_8h"/>
      </node>
      <node id="11590">
        <label>/arrow/cpp/src/arrow/array/builder_union.h</label>
        <link refid="builder__union_8h"/>
        <childnode refid="11528" relation="include">
        </childnode>
      </node>
      <node id="11520">
        <label>/arrow/cpp/src/arrow/adapters/orc/adapter.h</label>
        <link refid="adapter_8h"/>
      </node>
      <node id="11663">
        <label>/arrow/cpp/src/parquet/arrow/reader.h</label>
        <link refid="parquet_2arrow_2reader_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structarrow_1_1_type" prot="public">arrow::Type</innerclass>
    <innerclass refid="structarrow_1_1_data_type_layout" prot="public">arrow::DataTypeLayout</innerclass>
    <innerclass refid="structarrow_1_1_data_type_layout_1_1_buffer_spec" prot="public">arrow::DataTypeLayout::BufferSpec</innerclass>
    <innerclass refid="classarrow_1_1_data_type" prot="public">arrow::DataType</innerclass>
    <innerclass refid="classarrow_1_1_fixed_width_type" prot="public">arrow::FixedWidthType</innerclass>
    <innerclass refid="classarrow_1_1_primitive_c_type" prot="public">arrow::PrimitiveCType</innerclass>
    <innerclass refid="classarrow_1_1_number_type" prot="public">arrow::NumberType</innerclass>
    <innerclass refid="classarrow_1_1_integer_type" prot="public">arrow::IntegerType</innerclass>
    <innerclass refid="classarrow_1_1_floating_point_type" prot="public">arrow::FloatingPointType</innerclass>
    <innerclass refid="classarrow_1_1_parametric_type" prot="public">arrow::ParametricType</innerclass>
    <innerclass refid="classarrow_1_1_nested_type" prot="public">arrow::NestedType</innerclass>
    <innerclass refid="classarrow_1_1_field" prot="public">arrow::Field</innerclass>
    <innerclass refid="structarrow_1_1_field_1_1_merge_options" prot="public">arrow::Field::MergeOptions</innerclass>
    <innerclass refid="classarrow_1_1_null_type" prot="public">arrow::NullType</innerclass>
    <innerclass refid="classarrow_1_1_boolean_type" prot="public">arrow::BooleanType</innerclass>
    <innerclass refid="classarrow_1_1_u_int8_type" prot="public">arrow::UInt8Type</innerclass>
    <innerclass refid="classarrow_1_1_int8_type" prot="public">arrow::Int8Type</innerclass>
    <innerclass refid="classarrow_1_1_u_int16_type" prot="public">arrow::UInt16Type</innerclass>
    <innerclass refid="classarrow_1_1_int16_type" prot="public">arrow::Int16Type</innerclass>
    <innerclass refid="classarrow_1_1_u_int32_type" prot="public">arrow::UInt32Type</innerclass>
    <innerclass refid="classarrow_1_1_int32_type" prot="public">arrow::Int32Type</innerclass>
    <innerclass refid="classarrow_1_1_u_int64_type" prot="public">arrow::UInt64Type</innerclass>
    <innerclass refid="classarrow_1_1_int64_type" prot="public">arrow::Int64Type</innerclass>
    <innerclass refid="classarrow_1_1_half_float_type" prot="public">arrow::HalfFloatType</innerclass>
    <innerclass refid="classarrow_1_1_float_type" prot="public">arrow::FloatType</innerclass>
    <innerclass refid="classarrow_1_1_double_type" prot="public">arrow::DoubleType</innerclass>
    <innerclass refid="classarrow_1_1_base_list_type" prot="public">arrow::BaseListType</innerclass>
    <innerclass refid="classarrow_1_1_list_type" prot="public">arrow::ListType</innerclass>
    <innerclass refid="classarrow_1_1_large_list_type" prot="public">arrow::LargeListType</innerclass>
    <innerclass refid="classarrow_1_1_map_type" prot="public">arrow::MapType</innerclass>
    <innerclass refid="classarrow_1_1_fixed_size_list_type" prot="public">arrow::FixedSizeListType</innerclass>
    <innerclass refid="classarrow_1_1_base_binary_type" prot="public">arrow::BaseBinaryType</innerclass>
    <innerclass refid="classarrow_1_1_binary_type" prot="public">arrow::BinaryType</innerclass>
    <innerclass refid="classarrow_1_1_large_binary_type" prot="public">arrow::LargeBinaryType</innerclass>
    <innerclass refid="classarrow_1_1_string_type" prot="public">arrow::StringType</innerclass>
    <innerclass refid="classarrow_1_1_large_string_type" prot="public">arrow::LargeStringType</innerclass>
    <innerclass refid="classarrow_1_1_fixed_size_binary_type" prot="public">arrow::FixedSizeBinaryType</innerclass>
    <innerclass refid="classarrow_1_1_struct_type" prot="public">arrow::StructType</innerclass>
    <innerclass refid="classarrow_1_1_decimal_type" prot="public">arrow::DecimalType</innerclass>
    <innerclass refid="classarrow_1_1_decimal128_type" prot="public">arrow::Decimal128Type</innerclass>
    <innerclass refid="classarrow_1_1_union_type" prot="public">arrow::UnionType</innerclass>
    <innerclass refid="classarrow_1_1_temporal_type" prot="public">arrow::TemporalType</innerclass>
    <innerclass refid="classarrow_1_1_date_type" prot="public">arrow::DateType</innerclass>
    <innerclass refid="classarrow_1_1_date32_type" prot="public">arrow::Date32Type</innerclass>
    <innerclass refid="classarrow_1_1_date64_type" prot="public">arrow::Date64Type</innerclass>
    <innerclass refid="classarrow_1_1_time_type" prot="public">arrow::TimeType</innerclass>
    <innerclass refid="classarrow_1_1_time32_type" prot="public">arrow::Time32Type</innerclass>
    <innerclass refid="classarrow_1_1_time64_type" prot="public">arrow::Time64Type</innerclass>
    <innerclass refid="classarrow_1_1_timestamp_type" prot="public">arrow::TimestampType</innerclass>
    <innerclass refid="classarrow_1_1_interval_type" prot="public">arrow::IntervalType</innerclass>
    <innerclass refid="classarrow_1_1_month_interval_type" prot="public">arrow::MonthIntervalType</innerclass>
    <innerclass refid="classarrow_1_1_day_time_interval_type" prot="public">arrow::DayTimeIntervalType</innerclass>
    <innerclass refid="structarrow_1_1_day_time_interval_type_1_1_day_milliseconds" prot="public">arrow::DayTimeIntervalType::DayMilliseconds</innerclass>
    <innerclass refid="classarrow_1_1_duration_type" prot="public">arrow::DurationType</innerclass>
    <innerclass refid="classarrow_1_1_dictionary_type" prot="public">arrow::DictionaryType</innerclass>
    <innerclass refid="classarrow_1_1_dictionary_unifier" prot="public">arrow::DictionaryUnifier</innerclass>
    <innerclass refid="classarrow_1_1_field_path" prot="public">arrow::FieldPath</innerclass>
    <innerclass refid="classarrow_1_1_field_ref" prot="public">arrow::FieldRef</innerclass>
    <innerclass refid="classarrow_1_1_schema" prot="public">arrow::Schema</innerclass>
    <innerclass refid="classarrow_1_1_schema_builder" prot="public">arrow::SchemaBuilder</innerclass>
    <innernamespace refid="namespacearrow">arrow</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;atomic&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;climits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iosfwd&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="result_8h" kindref="compound">arrow/result.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type__fwd_8h" kindref="compound">arrow/type_fwd.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>IWYU<sp/>pragma:<sp/>export</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="checked__cast_8h" kindref="compound">arrow/util/checked_cast.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="macros_8h" kindref="compound">arrow/util/macros.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="variant_8h" kindref="compound">arrow/util/variant.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="arrow_2util_2visibility_8h" kindref="compound">arrow/util/visibility.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="visitor_8h" kindref="compound">arrow/visitor.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>IWYU<sp/>pragma:<sp/>keep</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacearrow" kindref="compound">arrow</ref><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Array;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Field;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="namespaceparquet_1a0d70b006a1f6feca958a1505b38a8cb7" kindref="member">MemoryPool</ref>;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="structarrow_1_1_type" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structarrow_1_1_type" kindref="compound">Type</ref><sp/>{</highlight></codeline>
<codeline lineno="48" refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">type</ref><sp/>{</highlight></codeline>
<codeline lineno="50" refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44af46d8600b17dd993097e0875a46e0b15" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44af46d8600b17dd993097e0875a46e0b15" kindref="member">NA</ref>,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44ae4bb4146eedf3fb5a517780000001b30" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44ae4bb4146eedf3fb5a517780000001b30" kindref="member">BOOL</ref>,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44ab8f52afb784526f800c91de101673b42" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44ab8f52afb784526f800c91de101673b42" kindref="member">UINT8</ref>,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44adf9f694eb598f6f8cac8bed3da547d65" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44adf9f694eb598f6f8cac8bed3da547d65" kindref="member">INT8</ref>,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a87c4272d67d3a84ed9ce6c6a9a4a6772" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a87c4272d67d3a84ed9ce6c6a9a4a6772" kindref="member">UINT16</ref>,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a36b3753b92501b60b2740b29d6e17696" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a36b3753b92501b60b2740b29d6e17696" kindref="member">INT16</ref>,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a89620afd46abf8f99b057bd3587a78f0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a89620afd46abf8f99b057bd3587a78f0" kindref="member">UINT32</ref>,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44af8005f162bc422abcee7f1197bf04cf8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44af8005f162bc422abcee7f1197bf04cf8" kindref="member">INT32</ref>,</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44af1096e3ebb2d7a678fc6ddac24bf7639" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44af1096e3ebb2d7a678fc6ddac24bf7639" kindref="member">UINT64</ref>,</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44af38ec7ec303572a87b11fd48876bc1d0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44af38ec7ec303572a87b11fd48876bc1d0" kindref="member">INT64</ref>,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44af6ebd198668f2a6c2d79c549f599e896" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44af6ebd198668f2a6c2d79c549f599e896" kindref="member">HALF_FLOAT</ref>,</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a57c54c2b9d1630bc8c99b5fec4c93e58" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a57c54c2b9d1630bc8c99b5fec4c93e58" kindref="member">FLOAT</ref>,</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a75397800ad025678ff7803b543d4a183" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a75397800ad025678ff7803b543d4a183" kindref="member">DOUBLE</ref>,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a864933bd7cdfa63ea75498c34db6545f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a864933bd7cdfa63ea75498c34db6545f" kindref="member">STRING</ref>,</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a442cc62761c7e5a83d26da4d3ed2fe01" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a442cc62761c7e5a83d26da4d3ed2fe01" kindref="member">BINARY</ref>,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a1b3f48148c5ff94c039d09ff689da179" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a1b3f48148c5ff94c039d09ff689da179" kindref="member">FIXED_SIZE_BINARY</ref>,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a4351aedceb3d92f82cf7ae504476ef30" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a4351aedceb3d92f82cf7ae504476ef30" kindref="member">DATE32</ref>,</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a17325202e90c23cd194b1698eea87a38" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a17325202e90c23cd194b1698eea87a38" kindref="member">DATE64</ref>,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a1e41dddee4a6410c4d6fe164b36a230e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a1e41dddee4a6410c4d6fe164b36a230e" kindref="member">TIMESTAMP</ref>,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a73fb0fcd2b5d9a4c6071574c73cdf3c5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a73fb0fcd2b5d9a4c6071574c73cdf3c5" kindref="member">TIME32</ref>,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44ab960cffd22f54b634d9f055f7568d321" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44ab960cffd22f54b634d9f055f7568d321" kindref="member">TIME64</ref>,</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="116" refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44aaa546143f5b445f6478b7e157546ec3f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44aaa546143f5b445f6478b7e157546ec3f" kindref="member">INTERVAL</ref>,</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a014fe7104b592dbd7c70e4e861774a63" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a014fe7104b592dbd7c70e4e861774a63" kindref="member">DECIMAL</ref>,</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="123" refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44ad074f9c02567b5945293b9114f84f210" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44ad074f9c02567b5945293b9114f84f210" kindref="member">LIST</ref>,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="126" refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44aaa028b35c4e6a047c0e510ef1b0389ef" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44aaa028b35c4e6a047c0e510ef1b0389ef" kindref="member">STRUCT</ref>,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a2fa6d3a8e3947b7d0024304bfb8b5fad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a2fa6d3a8e3947b7d0024304bfb8b5fad" kindref="member">UNION</ref>,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="135" refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a3c38b5820a3de12d71713473550c6280" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a3c38b5820a3de12d71713473550c6280" kindref="member">DICTIONARY</ref>,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a51838b04a2cdc2db91890e4c70f45e61" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a51838b04a2cdc2db91890e4c70f45e61" kindref="member">MAP</ref>,</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="141" refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44af62348e1483c0b1a1536853e35588dad" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44af62348e1483c0b1a1536853e35588dad" kindref="member">EXTENSION</ref>,</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a870656978bd9028566f88fe1c0afb127" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a870656978bd9028566f88fe1c0afb127" kindref="member">FIXED_SIZE_LIST</ref>,</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a5322b7f2fd54030f65ac36e9637ff45b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a5322b7f2fd54030f65ac36e9637ff45b" kindref="member">DURATION</ref>,</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="151" refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a97279348163fabb0441e9ae939dc7ef5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a97279348163fabb0441e9ae939dc7ef5" kindref="member">LARGE_STRING</ref>,</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="154" refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44ac15fc368bd8a9390a69d4e174635781d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44ac15fc368bd8a9390a69d4e174635781d" kindref="member">LARGE_BINARY</ref>,</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="157" refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a573d9118191906864e808bf3d5c75049" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a573d9118191906864e808bf3d5c75049" kindref="member">LARGE_LIST</ref></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="159"><highlight class="normal">};</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/>Fingerprintable<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~Fingerprintable();</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>fingerprint()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>fingerprint_.load();</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="macros_8h_1a1f418a9edc46d53e62732e7ccd06f329" kindref="member">ARROW_PREDICT_TRUE</ref>(p<sp/>!=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>))<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*p;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LoadFingerprintSlow();</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>metadata_fingerprint()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>p<sp/>=<sp/>metadata_fingerprint_.load();</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="macros_8h_1a1f418a9edc46d53e62732e7ccd06f329" kindref="member">ARROW_PREDICT_TRUE</ref>(p<sp/>!=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>))<sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*p;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>LoadMetadataFingerprintSlow();</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>LoadFingerprintSlow()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>LoadMetadataFingerprintSlow()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/>ComputeFingerprint()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/>ComputeMetadataFingerprint()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>std::atomic&lt;std::string*&gt;<sp/>fingerprint_;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>std::atomic&lt;std::string*&gt;<sp/>metadata_fingerprint_;</highlight></codeline>
<codeline lineno="192"><highlight class="normal">};</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="197" refid="structarrow_1_1_data_type_layout" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_data_type_layout" kindref="compound">DataTypeLayout</ref><sp/>{</highlight></codeline>
<codeline lineno="198" refid="structarrow_1_1_data_type_layout_1a76193b66e1f11de695343b5d2174ea63a3d3f0c1500ca8629b9bbf72fb1359ea2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_data_type_layout_1a76193b66e1f11de695343b5d2174ea63" kindref="member">BufferKind</ref><sp/>{<sp/>FIXED_WIDTH,<sp/><ref refid="structarrow_1_1_data_type_layout_1a76193b66e1f11de695343b5d2174ea63a3d3f0c1500ca8629b9bbf72fb1359ea2" kindref="member">VARIABLE_WIDTH</ref>,<sp/>BITMAP,<sp/>ALWAYS_NULL<sp/>};</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="201" refid="structarrow_1_1_data_type_layout_1_1_buffer_spec" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structarrow_1_1_data_type_layout_1_1_buffer_spec" kindref="compound">BufferSpec</ref><sp/>{</highlight></codeline>
<codeline lineno="202" refid="structarrow_1_1_data_type_layout_1_1_buffer_spec_1a132bcd6f9cc757a7dda3c8af321d953b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_data_type_layout_1a76193b66e1f11de695343b5d2174ea63" kindref="member">BufferKind</ref><sp/><ref refid="structarrow_1_1_data_type_layout_1_1_buffer_spec_1a132bcd6f9cc757a7dda3c8af321d953b" kindref="member">kind</ref>;</highlight></codeline>
<codeline lineno="203" refid="structarrow_1_1_data_type_layout_1_1_buffer_spec_1a7693946ab2bc820dfcc2be856a91d1a3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/><ref refid="structarrow_1_1_data_type_layout_1_1_buffer_spec_1a7693946ab2bc820dfcc2be856a91d1a3" kindref="member">byte_width</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>FIXED_WIDTH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205" refid="structarrow_1_1_data_type_layout_1_1_buffer_spec_1a150ff9969446cebd2cc6b7840360de05" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_data_type_layout_1_1_buffer_spec_1a150ff9969446cebd2cc6b7840360de05" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_data_type_layout_1_1_buffer_spec" kindref="compound">BufferSpec</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>kind<sp/>==<sp/>other.<ref refid="structarrow_1_1_data_type_layout_1_1_buffer_spec_1a132bcd6f9cc757a7dda3c8af321d953b" kindref="member">kind</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(kind<sp/>!=<sp/>FIXED_WIDTH<sp/>||<sp/>byte_width<sp/>==<sp/>other.<ref refid="structarrow_1_1_data_type_layout_1_1_buffer_spec_1a7693946ab2bc820dfcc2be856a91d1a3" kindref="member">byte_width</ref>);</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="209" refid="structarrow_1_1_data_type_layout_1_1_buffer_spec_1a43dffe48490c6292c8d6c2694c2b0307" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_data_type_layout_1_1_buffer_spec_1a43dffe48490c6292c8d6c2694c2b0307" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_data_type_layout_1_1_buffer_spec" kindref="compound">BufferSpec</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>other);<sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212" refid="structarrow_1_1_data_type_layout_1a29a463149351d5219cf304c921211069" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_data_type_layout_1_1_buffer_spec" kindref="compound">BufferSpec</ref><sp/><ref refid="structarrow_1_1_data_type_layout_1a29a463149351d5219cf304c921211069" kindref="member">FixedWidth</ref>(int64_t<sp/>w)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_data_type_layout_1_1_buffer_spec" kindref="compound">BufferSpec</ref>{FIXED_WIDTH,<sp/>w};<sp/>}</highlight></codeline>
<codeline lineno="213" refid="structarrow_1_1_data_type_layout_1a97670a7fa95a46c4e549218656505a52" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_data_type_layout_1_1_buffer_spec" kindref="compound">BufferSpec</ref><sp/><ref refid="structarrow_1_1_data_type_layout_1a97670a7fa95a46c4e549218656505a52" kindref="member">VariableWidth</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_data_type_layout_1_1_buffer_spec" kindref="compound">BufferSpec</ref>{VARIABLE_WIDTH,<sp/>-1};<sp/>}</highlight></codeline>
<codeline lineno="214" refid="structarrow_1_1_data_type_layout_1aa3772878ee24b7af10de8306836500a2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_data_type_layout_1_1_buffer_spec" kindref="compound">BufferSpec</ref><sp/><ref refid="structarrow_1_1_data_type_layout_1aa3772878ee24b7af10de8306836500a2" kindref="member">Bitmap</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_data_type_layout_1_1_buffer_spec" kindref="compound">BufferSpec</ref>{BITMAP,<sp/>-1};<sp/>}</highlight></codeline>
<codeline lineno="215" refid="structarrow_1_1_data_type_layout_1a87bd11b17e9133a8ba2d42c5fef5b697" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_data_type_layout_1_1_buffer_spec" kindref="compound">BufferSpec</ref><sp/><ref refid="structarrow_1_1_data_type_layout_1a87bd11b17e9133a8ba2d42c5fef5b697" kindref="member">AlwaysNull</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_data_type_layout_1_1_buffer_spec" kindref="compound">BufferSpec</ref>{ALWAYS_NULL,<sp/>-1};<sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="218" refid="structarrow_1_1_data_type_layout_1a46102bc17b224283765f3c71455f5872" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;BufferSpec&gt;<sp/><ref refid="structarrow_1_1_data_type_layout_1a46102bc17b224283765f3c71455f5872" kindref="member">buffers</ref>;</highlight></codeline>
<codeline lineno="220" refid="structarrow_1_1_data_type_layout_1a5d402608f5f4d86748d176ce7c60eb67" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>has_dictionary<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222" refid="structarrow_1_1_data_type_layout_1aeb4061786efac3ae96c2f6ab8f7f1709" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_data_type_layout_1aeb4061786efac3ae96c2f6ab8f7f1709" kindref="member">DataTypeLayout</ref>(std::vector&lt;BufferSpec&gt;<sp/>v)<sp/>:<sp/>buffers(<ref refid="namespacestd" kindref="compound">std</ref>::move(v))<sp/>{}</highlight></codeline>
<codeline lineno="223"><highlight class="normal">};</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="234" refid="classarrow_1_1_data_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>detail::Fingerprintable<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="236" refid="classarrow_1_1_data_type_1a1b8a7ece05983649f67396177f40e844" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_data_type_1a1b8a7ece05983649f67396177f40e844" kindref="member">DataType</ref>(<ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>:<sp/>detail::Fingerprintable(),<sp/>id_(id)<sp/>{}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>~<ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref>()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Equals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref>&amp;<sp/>other,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>check_metadata<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Equals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248" refid="classarrow_1_1_data_type_1a3c9f77b8d895abd8618566386cbeb7c0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Field&gt;&amp;<sp/><ref refid="classarrow_1_1_data_type_1a3c9f77b8d895abd8618566386cbeb7c0" kindref="member">child</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>children_[i];<sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250" refid="classarrow_1_1_data_type_1a36061c037a2e6e974cc3b22dfb6a5bac" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;Field&gt;&gt;&amp;<sp/><ref refid="classarrow_1_1_data_type_1a36061c037a2e6e974cc3b22dfb6a5bac" kindref="member">children</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>children_;<sp/>}</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="252" refid="classarrow_1_1_data_type_1ac8920179a6c1e7f434c495d5ec4662f1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_data_type_1ac8920179a6c1e7f434c495d5ec4662f1" kindref="member">num_children</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(children_.size());<sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>Accept(<ref refid="classarrow_1_1_type_visitor" kindref="compound">TypeVisitor</ref>*<sp/>visitor)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/>name()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_data_type_layout" kindref="compound">DataTypeLayout</ref><sp/>layout()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="271" refid="classarrow_1_1_data_type_1a5ec6a1c93420c68e9c8065d4a56ad645" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref><sp/><ref refid="classarrow_1_1_data_type_1a5ec6a1c93420c68e9c8065d4a56ad645" kindref="member">id</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>id_;<sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Dummy<sp/>version<sp/>that<sp/>returns<sp/>a<sp/>null<sp/>string<sp/>(indicating<sp/>not<sp/>implemented).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Subclasses<sp/>should<sp/>override<sp/>for<sp/>fast<sp/>equality<sp/>checks.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/>std::string<sp/>ComputeFingerprint()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Generic<sp/>versions<sp/>that<sp/>works<sp/>for<sp/>all<sp/>regular<sp/>types,<sp/>nested<sp/>or<sp/>not.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/>std::string<sp/>ComputeMetadataFingerprint()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281" refid="classarrow_1_1_data_type_1aa2704f1cfc50018d02e109b32f67e422" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref><sp/><ref refid="classarrow_1_1_data_type_1aa2704f1cfc50018d02e109b32f67e422" kindref="member">id_</ref>;</highlight></codeline>
<codeline lineno="282" refid="classarrow_1_1_data_type_1a8dd2f042289733133c386463afcea902" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Field&gt;&gt;<sp/><ref refid="classarrow_1_1_data_type_1a8dd2f042289733133c386463afcea902" kindref="member">children_</ref>;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><ref refid="macros_8h_1a40d72e185b1488b5659b761f0b6115bb" kindref="member">ARROW_DISALLOW_COPY_AND_ASSIGN</ref>(<ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref>);</highlight></codeline>
<codeline lineno="286"><highlight class="normal">};</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="289"><highlight class="normal">std::ostream&amp;<sp/>operator&lt;&lt;(std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref>&amp;<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">type</ref>);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="292" refid="classarrow_1_1_fixed_width_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_fixed_width_type" kindref="compound">FixedWidthType</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref><sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_data_type_1a1b8a7ece05983649f67396177f40e844" kindref="member">DataType::DataType</ref>;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit_width()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="297"><highlight class="normal">};</highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight></codeline>
<codeline lineno="300" refid="classarrow_1_1_primitive_c_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_primitive_c_type" kindref="compound">PrimitiveCType</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_fixed_width_type" kindref="compound">FixedWidthType</ref><sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>FixedWidthType::FixedWidthType;</highlight></codeline>
<codeline lineno="303"><highlight class="normal">};</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="306" refid="classarrow_1_1_number_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_number_type" kindref="compound">NumberType</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_primitive_c_type" kindref="compound">PrimitiveCType</ref><sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>PrimitiveCType::PrimitiveCType;</highlight></codeline>
<codeline lineno="309"><highlight class="normal">};</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="312" refid="classarrow_1_1_integer_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_integer_type" kindref="compound">IntegerType</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_number_type" kindref="compound">NumberType</ref><sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>NumberType::NumberType;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_signed()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="316"><highlight class="normal">};</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="319" refid="classarrow_1_1_floating_point_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_floating_point_type" kindref="compound">FloatingPointType</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_number_type" kindref="compound">NumberType</ref><sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>NumberType::NumberType;</highlight></codeline>
<codeline lineno="322" refid="classarrow_1_1_floating_point_type_1a5b11d7365a95daf044b4d502c1059543acc837c43ba78ed44f8f8ad5015839b53" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_floating_point_type_1a5b11d7365a95daf044b4d502c1059543" kindref="member">Precision</ref><sp/>{<sp/>HALF,<sp/><ref refid="classarrow_1_1_floating_point_type_1a5b11d7365a95daf044b4d502c1059543acc837c43ba78ed44f8f8ad5015839b53" kindref="member">SINGLE</ref>,<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a75397800ad025678ff7803b543d4a183" kindref="member">DOUBLE</ref><sp/>};</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_floating_point_type_1a5b11d7365a95daf044b4d502c1059543" kindref="member">Precision</ref><sp/>precision()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="324"><highlight class="normal">};</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="327" refid="classarrow_1_1_parametric_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classarrow_1_1_parametric_type" kindref="compound">ParametricType</ref><sp/>{};</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329" refid="classarrow_1_1_nested_type" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_nested_type" kindref="compound">NestedType</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref>,<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_parametric_type" kindref="compound">ParametricType</ref><sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_data_type_1a1b8a7ece05983649f67396177f40e844" kindref="member">DataType::DataType</ref>;</highlight></codeline>
<codeline lineno="332"><highlight class="normal">};</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="341" refid="classarrow_1_1_field" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_field" kindref="compound">Field</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>detail::Fingerprintable<sp/>{</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="343" refid="classarrow_1_1_field_1a1a80562d9a2d98ff745bdc8a0af58e87" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_field_1a1a80562d9a2d98ff745bdc8a0af58e87" kindref="member">Field</ref>(std::string<sp/>name,<sp/>std::shared_ptr&lt;DataType&gt;<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">type</ref>,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nullable<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;const<sp/>KeyValueMetadata&gt;<sp/>metadata<sp/>=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>)</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>detail::Fingerprintable(),</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name_(<ref refid="namespacestd" kindref="compound">std</ref>::move(name)),</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_(<ref refid="namespacestd" kindref="compound">std</ref>::move(type)),</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nullable_(nullable),</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>metadata_(<ref refid="namespacestd" kindref="compound">std</ref>::move(metadata))<sp/>{}</highlight></codeline>
<codeline lineno="350"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>~<ref refid="classarrow_1_1_field" kindref="compound">Field</ref>()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="354" refid="classarrow_1_1_field_1a899a4cef4c13946c9996095ca53e8004" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;const<sp/>KeyValueMetadata&gt;<sp/><ref refid="classarrow_1_1_field_1a899a4cef4c13946c9996095ca53e8004" kindref="member">metadata</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>metadata_;<sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HasMetadata()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Field&gt;<sp/>WithMetadata(</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;const<sp/>KeyValueMetadata&gt;&amp;<sp/>metadata)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Field&gt;<sp/>WithMergedMetadata(</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;const<sp/>KeyValueMetadata&gt;&amp;<sp/>metadata)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Field&gt;<sp/>RemoveMetadata()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Field&gt;<sp/>WithType(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">type</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Field&gt;<sp/>WithName(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Field&gt;<sp/>WithNullable(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nullable)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="384" refid="structarrow_1_1_field_1_1_merge_options" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structarrow_1_1_field_1_1_merge_options" kindref="compound">MergeOptions</ref><sp/>{</highlight></codeline>
<codeline lineno="389" refid="structarrow_1_1_field_1_1_merge_options_1a1c451493980992af6a9b0990ad1d7ef6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>promote_nullability<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391" refid="structarrow_1_1_field_1_1_merge_options_1aad6ec10fe86793101bf688bbf9c9ad96" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_field_1_1_merge_options" kindref="compound">MergeOptions</ref><sp/><ref refid="structarrow_1_1_field_1_1_merge_options_1aad6ec10fe86793101bf688bbf9c9ad96" kindref="member">Defaults</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_field_1_1_merge_options" kindref="compound">MergeOptions</ref>();<sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;Field&gt;</ref>&gt;<sp/>MergeWith(</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_field" kindref="compound">Field</ref>&amp;<sp/>other,<sp/><ref refid="structarrow_1_1_field_1_1_merge_options" kindref="compound">MergeOptions</ref><sp/>options<sp/>=<sp/>MergeOptions::Defaults())<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;Field&gt;</ref>&gt;<sp/>MergeWith(</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Field&gt;&amp;<sp/>other,</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_field_1_1_merge_options" kindref="compound">MergeOptions</ref><sp/>options<sp/>=<sp/>MergeOptions::Defaults())<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Field&gt;&gt;<sp/>Flatten()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Equals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_field" kindref="compound">Field</ref>&amp;<sp/>other,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>check_metadata<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Equals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Field&gt;&amp;<sp/>other,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>check_metadata<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsCompatibleWith(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_field" kindref="compound">Field</ref>&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsCompatibleWith(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Field&gt;&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>show_metadata<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="434" refid="classarrow_1_1_field_1ab023b8e5c6d7deff0af5fc757ecaca89" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="classarrow_1_1_field_1ab023b8e5c6d7deff0af5fc757ecaca89" kindref="member">name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name_;<sp/>}</highlight></codeline>
<codeline lineno="436" refid="classarrow_1_1_field_1a26a4dfeb0bf5daaeefabfaba4c9084c5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/><ref refid="classarrow_1_1_field_1a26a4dfeb0bf5daaeefabfaba4c9084c5" kindref="member">type</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_;<sp/>}</highlight></codeline>
<codeline lineno="438" refid="classarrow_1_1_field_1aba2045f76a42fe34fd785190af139c25" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_field_1aba2045f76a42fe34fd785190af139c25" kindref="member">nullable</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nullable_;<sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Field&gt;<sp/>Copy()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/>std::string<sp/>ComputeFingerprint()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>std::string<sp/>ComputeMetadataFingerprint()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Field<sp/>name</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>std::string<sp/>name_;</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>field&apos;s<sp/>data<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;DataType&gt;<sp/>type_;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Fields<sp/>can<sp/>be<sp/>nullable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nullable_;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>field&apos;s<sp/>metadata,<sp/>if<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;const<sp/>KeyValueMetadata&gt;<sp/>metadata_;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><ref refid="macros_8h_1a40d72e185b1488b5659b761f0b6115bb" kindref="member">ARROW_DISALLOW_COPY_AND_ASSIGN</ref>(<ref refid="classarrow_1_1_field" kindref="compound">Field</ref>);</highlight></codeline>
<codeline lineno="459"><highlight class="normal">};</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DERIVED,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>BASE,<sp/>Type::type<sp/>TYPE_ID,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C_TYPE&gt;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/>CTypeImpl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>BASE<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref><sp/>type_id<sp/>=<sp/>TYPE_ID;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>c_type<sp/>=<sp/>C_TYPE;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/>CTypeImpl()<sp/>:<sp/>BASE(TYPE_ID)<sp/>{}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit_width()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(C_TYPE)<sp/>*<sp/>CHAR_BIT);<sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_data_type_layout" kindref="compound">DataTypeLayout</ref><sp/>layout()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_data_type_layout" kindref="compound">DataTypeLayout</ref>(</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<ref refid="structarrow_1_1_data_type_layout_1aa3772878ee24b7af10de8306836500a2" kindref="member">DataTypeLayout::Bitmap</ref>(),<sp/><ref refid="structarrow_1_1_data_type_layout_1a29a463149351d5219cf304c921211069" kindref="member">DataTypeLayout::FixedWidth</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(C_TYPE))});</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/>std::string<sp/>name()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>DERIVED::type_name();<sp/>}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;name();<sp/>}</highlight></codeline>
<codeline lineno="481"><highlight class="normal">};</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DERIVED,<sp/>Type::type<sp/>TYPE_ID,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>C_TYPE&gt;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">IntegerTypeImpl<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>detail::CTypeImpl&lt;DERIVED,<sp/>IntegerType,<sp/>TYPE_ID,<sp/>C_TYPE&gt;<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_signed()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::is_signed&lt;C_TYPE&gt;::value;<sp/>}</highlight></codeline>
<codeline lineno="486"><highlight class="normal">};</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="491" refid="classarrow_1_1_null_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_null_type" kindref="compound">NullType</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref><sp/>{</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="493" refid="classarrow_1_1_null_type_1a9ffc27408dc7cd6f6da501d2e729e2f2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref><sp/>type_id<sp/>=<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44af46d8600b17dd993097e0875a46e0b15" kindref="member">Type::NA</ref>;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="495" refid="classarrow_1_1_null_type_1aa2853461fbeee6f5616482ef4172b210" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classarrow_1_1_null_type_1aa2853461fbeee6f5616482ef4172b210" kindref="member">type_name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;null&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight></codeline>
<codeline lineno="497" refid="classarrow_1_1_null_type_1a283c0b240ce951e478295ed0091cac24" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_null_type_1a283c0b240ce951e478295ed0091cac24" kindref="member">NullType</ref>()<sp/>:<sp/><ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref>(<ref refid="structarrow_1_1_type" kindref="compound">Type</ref>::<ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44af46d8600b17dd993097e0875a46e0b15" kindref="member">NA</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501" refid="classarrow_1_1_null_type_1a3354ed04f7b102360f93475b75d6aa0d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_data_type_layout" kindref="compound">DataTypeLayout</ref><sp/><ref refid="classarrow_1_1_null_type_1a3354ed04f7b102360f93475b75d6aa0d" kindref="member">layout</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_data_type_layout" kindref="compound">DataTypeLayout</ref>({<ref refid="structarrow_1_1_data_type_layout_1a87bd11b17e9133a8ba2d42c5fef5b697" kindref="member">DataTypeLayout::AlwaysNull</ref>()});</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505" refid="classarrow_1_1_null_type_1a656232cfad677aebb79f3147b0acdfb2" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classarrow_1_1_null_type_1a656232cfad677aebb79f3147b0acdfb2" kindref="member">name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;null&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>std::string<sp/>ComputeFingerprint()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="509"><highlight class="normal">};</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="512" refid="classarrow_1_1_boolean_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_boolean_type" kindref="compound">BooleanType</ref></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>detail::CTypeImpl&lt;BooleanType,<sp/>PrimitiveCType,<sp/>Type::BOOL,<sp/>bool&gt;<sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="515" refid="classarrow_1_1_boolean_type_1a4bfee5940a20cf7d51e0286c60aaa8f1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classarrow_1_1_boolean_type_1a4bfee5940a20cf7d51e0286c60aaa8f1" kindref="member">type_name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;bool&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>BooleanType<sp/>within<sp/>arrow<sp/>use<sp/>a<sp/>single<sp/>bit<sp/>instead<sp/>of<sp/>the<sp/>C<sp/>8-bits<sp/>layout.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518" refid="classarrow_1_1_boolean_type_1a8e6a928f4d6cf6cace04b8fca61910de" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_boolean_type_1a8e6a928f4d6cf6cace04b8fca61910de" kindref="member">bit_width</ref>()<sp/>const<sp/>final<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;<sp/>}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520" refid="classarrow_1_1_boolean_type_1a682141096208fc1fd72a31cdcf668a8d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_data_type_layout" kindref="compound">DataTypeLayout</ref><sp/><ref refid="classarrow_1_1_boolean_type_1a682141096208fc1fd72a31cdcf668a8d" kindref="member">layout</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_data_type_layout" kindref="compound">DataTypeLayout</ref>({<ref refid="structarrow_1_1_data_type_layout_1aa3772878ee24b7af10de8306836500a2" kindref="member">DataTypeLayout::Bitmap</ref>(),<sp/><ref refid="structarrow_1_1_data_type_layout_1aa3772878ee24b7af10de8306836500a2" kindref="member">DataTypeLayout::Bitmap</ref>()});</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/>std::string<sp/>ComputeFingerprint()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="526"><highlight class="normal">};</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="529" refid="classarrow_1_1_u_int8_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_u_int8_type" kindref="compound">UInt8Type</ref></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>detail::IntegerTypeImpl&lt;UInt8Type,<sp/>Type::UINT8,<sp/>uint8_t&gt;<sp/>{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="532" refid="classarrow_1_1_u_int8_type_1a30ca5caaafac0c244f217aa99b55bfee" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classarrow_1_1_u_int8_type_1a30ca5caaafac0c244f217aa99b55bfee" kindref="member">type_name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;uint8&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/>std::string<sp/>ComputeFingerprint()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="536"><highlight class="normal">};</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="539" refid="classarrow_1_1_int8_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_int8_type" kindref="compound">Int8Type</ref></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>detail::IntegerTypeImpl&lt;Int8Type,<sp/>Type::INT8,<sp/>int8_t&gt;<sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="542" refid="classarrow_1_1_int8_type_1a79cffc98b72922037fc63f672c1b49e7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classarrow_1_1_int8_type_1a79cffc98b72922037fc63f672c1b49e7" kindref="member">type_name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;int8&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/>std::string<sp/>ComputeFingerprint()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="546"><highlight class="normal">};</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="549" refid="classarrow_1_1_u_int16_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_u_int16_type" kindref="compound">UInt16Type</ref></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>detail::IntegerTypeImpl&lt;UInt16Type,<sp/>Type::UINT16,<sp/>uint16_t&gt;<sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="552" refid="classarrow_1_1_u_int16_type_1a4d2fe3408b5ff3e796920c26b952ad61" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classarrow_1_1_u_int16_type_1a4d2fe3408b5ff3e796920c26b952ad61" kindref="member">type_name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;uint16&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/>std::string<sp/>ComputeFingerprint()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="556"><highlight class="normal">};</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="559" refid="classarrow_1_1_int16_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_int16_type" kindref="compound">Int16Type</ref></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>detail::IntegerTypeImpl&lt;Int16Type,<sp/>Type::INT16,<sp/>int16_t&gt;<sp/>{</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="562" refid="classarrow_1_1_int16_type_1a8557869b7c9a4a60ac1713ae3e5b9a3b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classarrow_1_1_int16_type_1a8557869b7c9a4a60ac1713ae3e5b9a3b" kindref="member">type_name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;int16&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/>std::string<sp/>ComputeFingerprint()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="566"><highlight class="normal">};</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="569" refid="classarrow_1_1_u_int32_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_u_int32_type" kindref="compound">UInt32Type</ref></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>detail::IntegerTypeImpl&lt;UInt32Type,<sp/>Type::UINT32,<sp/>uint32_t&gt;<sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="572" refid="classarrow_1_1_u_int32_type_1a03d56c02e22f6b0bab1f9bf6fbc2a009" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classarrow_1_1_u_int32_type_1a03d56c02e22f6b0bab1f9bf6fbc2a009" kindref="member">type_name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;uint32&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/>std::string<sp/>ComputeFingerprint()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="576"><highlight class="normal">};</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="579" refid="classarrow_1_1_int32_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_int32_type" kindref="compound">Int32Type</ref></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>detail::IntegerTypeImpl&lt;Int32Type,<sp/>Type::INT32,<sp/>int32_t&gt;<sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="582" refid="classarrow_1_1_int32_type_1a9588631e0883421a1b9df584225b6544" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classarrow_1_1_int32_type_1a9588631e0883421a1b9df584225b6544" kindref="member">type_name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;int32&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/>std::string<sp/>ComputeFingerprint()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="586"><highlight class="normal">};</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="589" refid="classarrow_1_1_u_int64_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_u_int64_type" kindref="compound">UInt64Type</ref></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>detail::IntegerTypeImpl&lt;UInt64Type,<sp/>Type::UINT64,<sp/>uint64_t&gt;<sp/>{</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="592" refid="classarrow_1_1_u_int64_type_1a2613d9727f8dd7a04f518f80e79395df" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classarrow_1_1_u_int64_type_1a2613d9727f8dd7a04f518f80e79395df" kindref="member">type_name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;uint64&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="593"><highlight class="normal"></highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>std::string<sp/>ComputeFingerprint()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="596"><highlight class="normal">};</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="599" refid="classarrow_1_1_int64_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_int64_type" kindref="compound">Int64Type</ref></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>detail::IntegerTypeImpl&lt;Int64Type,<sp/>Type::INT64,<sp/>int64_t&gt;<sp/>{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="602" refid="classarrow_1_1_int64_type_1aa6e77d7b301e9fe0659cdca82719e9a6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classarrow_1_1_int64_type_1aa6e77d7b301e9fe0659cdca82719e9a6" kindref="member">type_name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;int64&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/>std::string<sp/>ComputeFingerprint()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="606"><highlight class="normal">};</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="609" refid="classarrow_1_1_half_float_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_half_float_type" kindref="compound">HalfFloatType</ref></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>detail::CTypeImpl&lt;HalfFloatType,<sp/>FloatingPointType,<sp/>Type::HALF_FLOAT,</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t&gt;<sp/>{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_floating_point_type_1a5b11d7365a95daf044b4d502c1059543" kindref="member">Precision</ref><sp/>precision()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="614" refid="classarrow_1_1_half_float_type_1ad145af13dc6e5cd78f2273fb220ef17c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classarrow_1_1_half_float_type_1ad145af13dc6e5cd78f2273fb220ef17c" kindref="member">type_name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;halffloat&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/>std::string<sp/>ComputeFingerprint()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="618"><highlight class="normal">};</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="621" refid="classarrow_1_1_float_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_float_type" kindref="compound">FloatType</ref></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>detail::CTypeImpl&lt;FloatType,<sp/>FloatingPointType,<sp/>Type::FLOAT,<sp/>float&gt;<sp/>{</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_floating_point_type_1a5b11d7365a95daf044b4d502c1059543" kindref="member">Precision</ref><sp/>precision()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="625" refid="classarrow_1_1_float_type_1a2d58fcf7652a6b3fb16b4fde13348320" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classarrow_1_1_float_type_1a2d58fcf7652a6b3fb16b4fde13348320" kindref="member">type_name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;float&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/>std::string<sp/>ComputeFingerprint()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="629"><highlight class="normal">};</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="632" refid="classarrow_1_1_double_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_double_type" kindref="compound">DoubleType</ref></highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>detail::CTypeImpl&lt;DoubleType,<sp/>FloatingPointType,<sp/>Type::DOUBLE,<sp/>double&gt;<sp/>{</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_floating_point_type_1a5b11d7365a95daf044b4d502c1059543" kindref="member">Precision</ref><sp/>precision()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="636" refid="classarrow_1_1_double_type_1a426fdf49241062e92f0409e2a675ba52" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classarrow_1_1_double_type_1a426fdf49241062e92f0409e2a675ba52" kindref="member">type_name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;double&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/>std::string<sp/>ComputeFingerprint()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="640"><highlight class="normal">};</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="643" refid="classarrow_1_1_base_list_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_base_list_type" kindref="compound">BaseListType</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_nested_type" kindref="compound">NestedType</ref><sp/>{</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>NestedType::NestedType;</highlight></codeline>
<codeline lineno="646" refid="classarrow_1_1_base_list_type_1a96796f232e5c1c97fc68ee09dc097446" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Field&gt;<sp/><ref refid="classarrow_1_1_base_list_type_1a96796f232e5c1c97fc68ee09dc097446" kindref="member">value_field</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>children_[0];<sp/>}</highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight></codeline>
<codeline lineno="648" refid="classarrow_1_1_base_list_type_1ad484128f731e55fa51c1f70a704e3857" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;DataType&gt;<sp/><ref refid="classarrow_1_1_base_list_type_1ad484128f731e55fa51c1f70a704e3857" kindref="member">value_type</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>children_[0]-&gt;type();<sp/>}</highlight></codeline>
<codeline lineno="649"><highlight class="normal">};</highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="656" refid="classarrow_1_1_list_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_list_type" kindref="compound">ListType</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_base_list_type" kindref="compound">BaseListType</ref><sp/>{</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="658" refid="classarrow_1_1_list_type_1adf15465afd0a2d3b4d32afe98d82a799" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref><sp/>type_id<sp/>=<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44ad074f9c02567b5945293b9114f84f210" kindref="member">Type::LIST</ref>;</highlight></codeline>
<codeline lineno="659" refid="classarrow_1_1_list_type_1ad8ffbe4af2de59367166c279a58e731c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_list_type_1ad8ffbe4af2de59367166c279a58e731c" kindref="member">offset_type</ref><sp/>=<sp/>int32_t;</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661" refid="classarrow_1_1_list_type_1ad2bcfc58fd1900e219dce13c08246148" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classarrow_1_1_list_type_1ad2bcfc58fd1900e219dce13c08246148" kindref="member">type_name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;list&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>List<sp/>can<sp/>contain<sp/>any<sp/>other<sp/>logical<sp/>value<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="664" refid="classarrow_1_1_list_type_1ab2b8aa644656466440477e285ebe3111" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_list_type_1ab2b8aa644656466440477e285ebe3111" kindref="member">ListType</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>value_type)</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classarrow_1_1_list_type" kindref="compound">ListType</ref>(<ref refid="namespacestd" kindref="compound">std</ref>::make_shared&lt;<ref refid="classarrow_1_1_field" kindref="compound">Field</ref>&gt;(</highlight><highlight class="stringliteral">&quot;item&quot;</highlight><highlight class="normal">,<sp/>value_type))<sp/>{}</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight></codeline>
<codeline lineno="667" refid="classarrow_1_1_list_type_1abee8a3b58f1d7e05ba474fd5225e699b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_list_type_1abee8a3b58f1d7e05ba474fd5225e699b" kindref="member">ListType</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Field&gt;&amp;<sp/>value_field)<sp/>:<sp/><ref refid="classarrow_1_1_base_list_type" kindref="compound">BaseListType</ref>(type_id)<sp/>{</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>children_<sp/>=<sp/>{value_field};</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="671" refid="classarrow_1_1_list_type_1a448fdb34f319e62fbd310997a8ba4c32" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_data_type_layout" kindref="compound">DataTypeLayout</ref><sp/><ref refid="classarrow_1_1_list_type_1a448fdb34f319e62fbd310997a8ba4c32" kindref="member">layout</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_data_type_layout" kindref="compound">DataTypeLayout</ref>(</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<ref refid="structarrow_1_1_data_type_layout_1aa3772878ee24b7af10de8306836500a2" kindref="member">DataTypeLayout::Bitmap</ref>(),<sp/><ref refid="structarrow_1_1_data_type_layout_1a29a463149351d5219cf304c921211069" kindref="member">DataTypeLayout::FixedWidth</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="classarrow_1_1_list_type_1ad8ffbe4af2de59367166c279a58e731c" kindref="member">offset_type</ref>))});</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight></codeline>
<codeline lineno="678" refid="classarrow_1_1_list_type_1a6320a08c4881865abcac2fdeab4fb0a2" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classarrow_1_1_list_type_1a6320a08c4881865abcac2fdeab4fb0a2" kindref="member">name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;list&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/>std::string<sp/>ComputeFingerprint()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="682"><highlight class="normal">};</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="687" refid="classarrow_1_1_large_list_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_large_list_type" kindref="compound">LargeListType</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_base_list_type" kindref="compound">BaseListType</ref><sp/>{</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="689" refid="classarrow_1_1_large_list_type_1ad6b8c7a397c1ebb2c7bb3fe5b8be05b2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref><sp/>type_id<sp/>=<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a573d9118191906864e808bf3d5c75049" kindref="member">Type::LARGE_LIST</ref>;</highlight></codeline>
<codeline lineno="690" refid="classarrow_1_1_large_list_type_1af1a77b6511f14bbf8485cbd825b795f9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_large_list_type_1af1a77b6511f14bbf8485cbd825b795f9" kindref="member">offset_type</ref><sp/>=<sp/>int64_t;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="692" refid="classarrow_1_1_large_list_type_1aee798541e6d1c03bbd5f65a6b7e8f290" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classarrow_1_1_large_list_type_1aee798541e6d1c03bbd5f65a6b7e8f290" kindref="member">type_name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;large_list&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="693"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>List<sp/>can<sp/>contain<sp/>any<sp/>other<sp/>logical<sp/>value<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="695" refid="classarrow_1_1_large_list_type_1a831c42342f89f01fb188bb47eb46f8ce" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_large_list_type_1a831c42342f89f01fb188bb47eb46f8ce" kindref="member">LargeListType</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>value_type)</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classarrow_1_1_large_list_type" kindref="compound">LargeListType</ref>(<ref refid="namespacestd" kindref="compound">std</ref>::make_shared&lt;<ref refid="classarrow_1_1_field" kindref="compound">Field</ref>&gt;(</highlight><highlight class="stringliteral">&quot;item&quot;</highlight><highlight class="normal">,<sp/>value_type))<sp/>{}</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698" refid="classarrow_1_1_large_list_type_1ad234897c1f44e553a952c6151acf3d98" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_large_list_type_1ad234897c1f44e553a952c6151acf3d98" kindref="member">LargeListType</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Field&gt;&amp;<sp/>value_field)</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classarrow_1_1_base_list_type" kindref="compound">BaseListType</ref>(type_id)<sp/>{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>children_<sp/>=<sp/>{value_field};</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="702"><highlight class="normal"></highlight></codeline>
<codeline lineno="703" refid="classarrow_1_1_large_list_type_1a56516c286c62a40e51f94281b024cdde" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_data_type_layout" kindref="compound">DataTypeLayout</ref><sp/><ref refid="classarrow_1_1_large_list_type_1a56516c286c62a40e51f94281b024cdde" kindref="member">layout</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_data_type_layout" kindref="compound">DataTypeLayout</ref>(</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<ref refid="structarrow_1_1_data_type_layout_1aa3772878ee24b7af10de8306836500a2" kindref="member">DataTypeLayout::Bitmap</ref>(),<sp/><ref refid="structarrow_1_1_data_type_layout_1a29a463149351d5219cf304c921211069" kindref="member">DataTypeLayout::FixedWidth</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="classarrow_1_1_large_list_type_1af1a77b6511f14bbf8485cbd825b795f9" kindref="member">offset_type</ref>))});</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710" refid="classarrow_1_1_large_list_type_1ac639156265552e6b9372afa525a8af50" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classarrow_1_1_large_list_type_1ac639156265552e6b9372afa525a8af50" kindref="member">name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;large_list&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/>std::string<sp/>ComputeFingerprint()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="714"><highlight class="normal">};</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="721" refid="classarrow_1_1_map_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_map_type" kindref="compound">MapType</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_list_type" kindref="compound">ListType</ref><sp/>{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="723" refid="classarrow_1_1_map_type_1ab5624caee3fadf1765c838c34442af0f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref><sp/>type_id<sp/>=<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a51838b04a2cdc2db91890e4c70f45e61" kindref="member">Type::MAP</ref>;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725" refid="classarrow_1_1_map_type_1a63271dd5a7b4ed2da6a20c210fc67b94" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classarrow_1_1_map_type_1a63271dd5a7b4ed2da6a20c210fc67b94" kindref="member">type_name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;map&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_map_type" kindref="compound">MapType</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>key_type,</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>item_type,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>keys_sorted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_map_type" kindref="compound">MapType</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>key_type,</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Field&gt;&amp;<sp/>item_field,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>keys_sorted<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"></highlight></codeline>
<codeline lineno="733" refid="classarrow_1_1_map_type_1a7d4a440df81608ae880caec5873184d6" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Field&gt;<sp/><ref refid="classarrow_1_1_map_type_1a7d4a440df81608ae880caec5873184d6" kindref="member">key_field</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_type()-&gt;child(0);<sp/>}</highlight></codeline>
<codeline lineno="734" refid="classarrow_1_1_map_type_1a59b305323a6a67dde52148ff72eac53b" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;DataType&gt;<sp/><ref refid="classarrow_1_1_map_type_1a59b305323a6a67dde52148ff72eac53b" kindref="member">key_type</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>key_field()-&gt;type();<sp/>}</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="736" refid="classarrow_1_1_map_type_1a7fc4783341a7fa595946d47d8ab189ee" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Field&gt;<sp/><ref refid="classarrow_1_1_map_type_1a7fc4783341a7fa595946d47d8ab189ee" kindref="member">item_field</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_type()-&gt;child(1);<sp/>}</highlight></codeline>
<codeline lineno="737" refid="classarrow_1_1_map_type_1ade2942b1beb42c90a163c4f1a0442b8d" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;DataType&gt;<sp/><ref refid="classarrow_1_1_map_type_1ade2942b1beb42c90a163c4f1a0442b8d" kindref="member">item_type</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>item_field()-&gt;type();<sp/>}</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741" refid="classarrow_1_1_map_type_1aaec81c349f7561f49253006f35735e5e" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classarrow_1_1_map_type_1aaec81c349f7561f49253006f35735e5e" kindref="member">name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;map&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743" refid="classarrow_1_1_map_type_1a9ef41c55f1971df5ec8d0888262ac8a5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_map_type_1a9ef41c55f1971df5ec8d0888262ac8a5" kindref="member">keys_sorted</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>keys_sorted_;<sp/>}</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/>std::string<sp/>ComputeFingerprint()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>keys_sorted_;</highlight></codeline>
<codeline lineno="749"><highlight class="normal">};</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="752" refid="classarrow_1_1_fixed_size_list_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_fixed_size_list_type" kindref="compound">FixedSizeListType</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_base_list_type" kindref="compound">BaseListType</ref><sp/>{</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="754" refid="classarrow_1_1_fixed_size_list_type_1a1bf5da6ca990e27adea4694e09d8a0d2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref><sp/>type_id<sp/>=<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a870656978bd9028566f88fe1c0afb127" kindref="member">Type::FIXED_SIZE_LIST</ref>;</highlight></codeline>
<codeline lineno="755" refid="classarrow_1_1_fixed_size_list_type_1afb8571e18fc3b51ef6f671fffabdea3c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_fixed_size_list_type_1afb8571e18fc3b51ef6f671fffabdea3c" kindref="member">offset_type</ref><sp/>=<sp/>int32_t;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757" refid="classarrow_1_1_fixed_size_list_type_1a299209d15f5a49e1846a0e3cee985680" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classarrow_1_1_fixed_size_list_type_1a299209d15f5a49e1846a0e3cee985680" kindref="member">type_name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;fixed_size_list&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>List<sp/>can<sp/>contain<sp/>any<sp/>other<sp/>logical<sp/>value<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="760" refid="classarrow_1_1_fixed_size_list_type_1a540da8f0d9bacead007be4ad4803a049" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_fixed_size_list_type_1a540da8f0d9bacead007be4ad4803a049" kindref="member">FixedSizeListType</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>value_type,<sp/>int32_t<sp/>list_size)</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classarrow_1_1_fixed_size_list_type" kindref="compound">FixedSizeListType</ref>(<ref refid="namespacestd" kindref="compound">std</ref>::make_shared&lt;<ref refid="classarrow_1_1_field" kindref="compound">Field</ref>&gt;(</highlight><highlight class="stringliteral">&quot;item&quot;</highlight><highlight class="normal">,<sp/>value_type),<sp/>list_size)<sp/>{}</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763" refid="classarrow_1_1_fixed_size_list_type_1a58340740db098ec0f42c1e301a0e4d96" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_fixed_size_list_type_1a58340740db098ec0f42c1e301a0e4d96" kindref="member">FixedSizeListType</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Field&gt;&amp;<sp/>value_field,<sp/>int32_t<sp/>list_size)</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classarrow_1_1_base_list_type" kindref="compound">BaseListType</ref>(type_id),<sp/>list_size_(list_size)<sp/>{</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>children_<sp/>=<sp/>{value_field};</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight></codeline>
<codeline lineno="768" refid="classarrow_1_1_fixed_size_list_type_1a81e0399d0c9af775bdbc05cd72b4b9a6" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_data_type_layout" kindref="compound">DataTypeLayout</ref><sp/><ref refid="classarrow_1_1_fixed_size_list_type_1a81e0399d0c9af775bdbc05cd72b4b9a6" kindref="member">layout</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_data_type_layout" kindref="compound">DataTypeLayout</ref>({<ref refid="structarrow_1_1_data_type_layout_1aa3772878ee24b7af10de8306836500a2" kindref="member">DataTypeLayout::Bitmap</ref>()});</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="774" refid="classarrow_1_1_fixed_size_list_type_1aeff3a940628ad39fbf065c8fbb7c00f8" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classarrow_1_1_fixed_size_list_type_1aeff3a940628ad39fbf065c8fbb7c00f8" kindref="member">name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;fixed_size_list&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776" refid="classarrow_1_1_fixed_size_list_type_1ad4548f4e0c6706babea2b47b363cca83" refkind="member"><highlight class="normal"><sp/><sp/>int32_t<sp/><ref refid="classarrow_1_1_fixed_size_list_type_1ad4548f4e0c6706babea2b47b363cca83" kindref="member">list_size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>list_size_;<sp/>}</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/>std::string<sp/>ComputeFingerprint()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight></codeline>
<codeline lineno="781" refid="classarrow_1_1_fixed_size_list_type_1ac1f5a9867029aebe997907722d66a1d3" refkind="member"><highlight class="normal"><sp/><sp/>int32_t<sp/><ref refid="classarrow_1_1_fixed_size_list_type_1ac1f5a9867029aebe997907722d66a1d3" kindref="member">list_size_</ref>;</highlight></codeline>
<codeline lineno="782"><highlight class="normal">};</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="785" refid="classarrow_1_1_base_binary_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_base_binary_type" kindref="compound">BaseBinaryType</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref><sp/>{</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_data_type_1a1b8a7ece05983649f67396177f40e844" kindref="member">DataType::DataType</ref>;</highlight></codeline>
<codeline lineno="788"><highlight class="normal">};</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
<codeline lineno="791" refid="classarrow_1_1_binary_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_binary_type" kindref="compound">BinaryType</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_base_binary_type" kindref="compound">BaseBinaryType</ref><sp/>{</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="793" refid="classarrow_1_1_binary_type_1ad80bf06cffec1a067ded02d208985e19" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref><sp/>type_id<sp/>=<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a442cc62761c7e5a83d26da4d3ed2fe01" kindref="member">Type::BINARY</ref>;</highlight></codeline>
<codeline lineno="794" refid="classarrow_1_1_binary_type_1adf5b60299c46ffad9e2ab2e076ea9470" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_utf8<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="795" refid="classarrow_1_1_binary_type_1a9622766aa289f240f21d4508efe6996d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_binary_type_1a9622766aa289f240f21d4508efe6996d" kindref="member">offset_type</ref><sp/>=<sp/>int32_t;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"></highlight></codeline>
<codeline lineno="797" refid="classarrow_1_1_binary_type_1aebac098da73098598de3cee705f0d79b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classarrow_1_1_binary_type_1aebac098da73098598de3cee705f0d79b" kindref="member">type_name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;binary&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799" refid="classarrow_1_1_binary_type_1a38d8b09303796253fe22a85a50d03224" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_binary_type_1a38d8b09303796253fe22a85a50d03224" kindref="member">BinaryType</ref>()<sp/>:<sp/><ref refid="classarrow_1_1_binary_type" kindref="compound">BinaryType</ref>(<ref refid="structarrow_1_1_type" kindref="compound">Type</ref>::<ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a442cc62761c7e5a83d26da4d3ed2fe01" kindref="member">BINARY</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="800"><highlight class="normal"></highlight></codeline>
<codeline lineno="801" refid="classarrow_1_1_binary_type_1a0db59e35b5b3afa44fc15f53ff86235f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_data_type_layout" kindref="compound">DataTypeLayout</ref><sp/><ref refid="classarrow_1_1_binary_type_1a0db59e35b5b3afa44fc15f53ff86235f" kindref="member">layout</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_data_type_layout" kindref="compound">DataTypeLayout</ref>({<ref refid="structarrow_1_1_data_type_layout_1aa3772878ee24b7af10de8306836500a2" kindref="member">DataTypeLayout::Bitmap</ref>(),</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_data_type_layout_1a29a463149351d5219cf304c921211069" kindref="member">DataTypeLayout::FixedWidth</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="classarrow_1_1_binary_type_1a9622766aa289f240f21d4508efe6996d" kindref="member">offset_type</ref>)),</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_data_type_layout_1a97670a7fa95a46c4e549218656505a52" kindref="member">DataTypeLayout::VariableWidth</ref>()});</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="808" refid="classarrow_1_1_binary_type_1a4c345ca9ef34a6099b29c3e694bedae3" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classarrow_1_1_binary_type_1a4c345ca9ef34a6099b29c3e694bedae3" kindref="member">name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;binary&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="811"><highlight class="normal"><sp/><sp/>std::string<sp/>ComputeFingerprint()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Allow<sp/>subclasses<sp/>like<sp/>StringType<sp/>to<sp/>change<sp/>the<sp/>logical<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814" refid="classarrow_1_1_binary_type_1a678c380577aca8bd39edbcf02842a61c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_binary_type_1a678c380577aca8bd39edbcf02842a61c" kindref="member">BinaryType</ref>(<ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref><sp/>logical_type)<sp/>:<sp/><ref refid="classarrow_1_1_base_binary_type" kindref="compound">BaseBinaryType</ref>(logical_type)<sp/>{}</highlight></codeline>
<codeline lineno="815"><highlight class="normal">};</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="818" refid="classarrow_1_1_large_binary_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_large_binary_type" kindref="compound">LargeBinaryType</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_base_binary_type" kindref="compound">BaseBinaryType</ref><sp/>{</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="820" refid="classarrow_1_1_large_binary_type_1aba8fc6e3853d32df8a92d11c5d8dee36" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref><sp/>type_id<sp/>=<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44ac15fc368bd8a9390a69d4e174635781d" kindref="member">Type::LARGE_BINARY</ref>;</highlight></codeline>
<codeline lineno="821" refid="classarrow_1_1_large_binary_type_1ace61abcc6beb04b35d835a1cc8d73d25" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_utf8<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="822" refid="classarrow_1_1_large_binary_type_1af062b46bc4740286b1f0c2f502203a05" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_large_binary_type_1af062b46bc4740286b1f0c2f502203a05" kindref="member">offset_type</ref><sp/>=<sp/>int64_t;</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="824" refid="classarrow_1_1_large_binary_type_1a0ef94f53843747849d060e689d37be11" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classarrow_1_1_large_binary_type_1a0ef94f53843747849d060e689d37be11" kindref="member">type_name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;large_binary&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826" refid="classarrow_1_1_large_binary_type_1a9bfcd4b8120c8b03cdf2dfd8f5f57346" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_large_binary_type_1a9bfcd4b8120c8b03cdf2dfd8f5f57346" kindref="member">LargeBinaryType</ref>()<sp/>:<sp/><ref refid="classarrow_1_1_large_binary_type" kindref="compound">LargeBinaryType</ref>(<ref refid="structarrow_1_1_type" kindref="compound">Type</ref>::<ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44ac15fc368bd8a9390a69d4e174635781d" kindref="member">LARGE_BINARY</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="827"><highlight class="normal"></highlight></codeline>
<codeline lineno="828" refid="classarrow_1_1_large_binary_type_1a224295a081273aa84c2e5134f0321997" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_data_type_layout" kindref="compound">DataTypeLayout</ref><sp/><ref refid="classarrow_1_1_large_binary_type_1a224295a081273aa84c2e5134f0321997" kindref="member">layout</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_data_type_layout" kindref="compound">DataTypeLayout</ref>({<ref refid="structarrow_1_1_data_type_layout_1aa3772878ee24b7af10de8306836500a2" kindref="member">DataTypeLayout::Bitmap</ref>(),</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_data_type_layout_1a29a463149351d5219cf304c921211069" kindref="member">DataTypeLayout::FixedWidth</ref>(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="classarrow_1_1_large_binary_type_1af062b46bc4740286b1f0c2f502203a05" kindref="member">offset_type</ref>)),</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_data_type_layout_1a97670a7fa95a46c4e549218656505a52" kindref="member">DataTypeLayout::VariableWidth</ref>()});</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="833"><highlight class="normal"></highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="835" refid="classarrow_1_1_large_binary_type_1a13b91514b5c18c6ad41d84cb92e0c31f" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classarrow_1_1_large_binary_type_1a13b91514b5c18c6ad41d84cb92e0c31f" kindref="member">name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;large_binary&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/>std::string<sp/>ComputeFingerprint()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"></highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Allow<sp/>subclasses<sp/>like<sp/>LargeStringType<sp/>to<sp/>change<sp/>the<sp/>logical<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="841" refid="classarrow_1_1_large_binary_type_1a6c29e5c9d8f7d4c49da7e19ccb8bc77f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_large_binary_type_1a6c29e5c9d8f7d4c49da7e19ccb8bc77f" kindref="member">LargeBinaryType</ref>(<ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref><sp/>logical_type)<sp/>:<sp/><ref refid="classarrow_1_1_base_binary_type" kindref="compound">BaseBinaryType</ref>(logical_type)<sp/>{}</highlight></codeline>
<codeline lineno="842"><highlight class="normal">};</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="845" refid="classarrow_1_1_string_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_string_type" kindref="compound">StringType</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_binary_type" kindref="compound">BinaryType</ref><sp/>{</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="847" refid="classarrow_1_1_string_type_1a310bfaefc36fe1eab6c864f777b4459a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref><sp/>type_id<sp/>=<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a864933bd7cdfa63ea75498c34db6545f" kindref="member">Type::STRING</ref>;</highlight></codeline>
<codeline lineno="848" refid="classarrow_1_1_string_type_1a1bc67b1448e300a4559087c4003372b1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_utf8<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="849" refid="classarrow_1_1_string_type_1a899b9b1518c8fd595845b9c3f047dc45" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_binary_type" kindref="compound">EquivalentBinaryType</ref><sp/>=<sp/><ref refid="classarrow_1_1_binary_type" kindref="compound">BinaryType</ref>;</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851" refid="classarrow_1_1_string_type_1a0eca085fb5f881a3c8213d7278d7090c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classarrow_1_1_string_type_1a0eca085fb5f881a3c8213d7278d7090c" kindref="member">type_name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;utf8&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853" refid="classarrow_1_1_string_type_1ae9b778fdccec4116ea1905b8803885a7" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_string_type_1ae9b778fdccec4116ea1905b8803885a7" kindref="member">StringType</ref>()<sp/>:<sp/><ref refid="classarrow_1_1_binary_type" kindref="compound">BinaryType</ref>(<ref refid="structarrow_1_1_type" kindref="compound">Type</ref>::<ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a864933bd7cdfa63ea75498c34db6545f" kindref="member">STRING</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="856" refid="classarrow_1_1_string_type_1ac286b24f3c2b3eeaf1e7d897ecd7a8d1" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classarrow_1_1_string_type_1ac286b24f3c2b3eeaf1e7d897ecd7a8d1" kindref="member">name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;utf8&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/>std::string<sp/>ComputeFingerprint()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="860"><highlight class="normal">};</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight></codeline>
<codeline lineno="863" refid="classarrow_1_1_large_string_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_large_string_type" kindref="compound">LargeStringType</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_large_binary_type" kindref="compound">LargeBinaryType</ref><sp/>{</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="865" refid="classarrow_1_1_large_string_type_1a2efbb029b500b4548b3094a82e41fac9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref><sp/>type_id<sp/>=<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a97279348163fabb0441e9ae939dc7ef5" kindref="member">Type::LARGE_STRING</ref>;</highlight></codeline>
<codeline lineno="866" refid="classarrow_1_1_large_string_type_1ad8fbb665a05e2cb96fe47ad65cd0260d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_utf8<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="867" refid="classarrow_1_1_large_string_type_1a0ab649a23ceb0abffb71a1caf0bfde49" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_large_binary_type" kindref="compound">EquivalentBinaryType</ref><sp/>=<sp/><ref refid="classarrow_1_1_large_binary_type" kindref="compound">LargeBinaryType</ref>;</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869" refid="classarrow_1_1_large_string_type_1a711c1ba82b53411fb775dbf143b83e2d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classarrow_1_1_large_string_type_1a711c1ba82b53411fb775dbf143b83e2d" kindref="member">type_name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;large_utf8&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="870"><highlight class="normal"></highlight></codeline>
<codeline lineno="871" refid="classarrow_1_1_large_string_type_1a00749e3798b523b2996e77c73bcd4651" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_large_string_type_1a00749e3798b523b2996e77c73bcd4651" kindref="member">LargeStringType</ref>()<sp/>:<sp/><ref refid="classarrow_1_1_large_binary_type" kindref="compound">LargeBinaryType</ref>(<ref refid="structarrow_1_1_type" kindref="compound">Type</ref>::<ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a97279348163fabb0441e9ae939dc7ef5" kindref="member">LARGE_STRING</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="872"><highlight class="normal"></highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="874" refid="classarrow_1_1_large_string_type_1a07c2864eabf436e15ec944e488f17f6e" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classarrow_1_1_large_string_type_1a07c2864eabf436e15ec944e488f17f6e" kindref="member">name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;large_utf8&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="875"><highlight class="normal"></highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/>std::string<sp/>ComputeFingerprint()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="878"><highlight class="normal">};</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="881" refid="classarrow_1_1_fixed_size_binary_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_fixed_size_binary_type" kindref="compound">FixedSizeBinaryType</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_fixed_width_type" kindref="compound">FixedWidthType</ref>,<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_parametric_type" kindref="compound">ParametricType</ref><sp/>{</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="883" refid="classarrow_1_1_fixed_size_binary_type_1a81bf6bef1117f7ecad1c529ccab4984e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref><sp/>type_id<sp/>=<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a1b3f48148c5ff94c039d09ff689da179" kindref="member">Type::FIXED_SIZE_BINARY</ref>;</highlight></codeline>
<codeline lineno="884" refid="classarrow_1_1_fixed_size_binary_type_1a809705b1401eb473cb45de6c3ad97507" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_utf8<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886" refid="classarrow_1_1_fixed_size_binary_type_1afde5bea8e2a5344b4f17c33e71003271" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classarrow_1_1_fixed_size_binary_type_1afde5bea8e2a5344b4f17c33e71003271" kindref="member">type_name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;fixed_size_binary&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888" refid="classarrow_1_1_fixed_size_binary_type_1a0a6a0f0fed4fbaafaff6d6c74569d5ac" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_fixed_size_binary_type_1a0a6a0f0fed4fbaafaff6d6c74569d5ac" kindref="member">FixedSizeBinaryType</ref>(int32_t<sp/>byte_width)</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classarrow_1_1_fixed_width_type" kindref="compound">FixedWidthType</ref>(<ref refid="structarrow_1_1_type" kindref="compound">Type</ref>::<ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a1b3f48148c5ff94c039d09ff689da179" kindref="member">FIXED_SIZE_BINARY</ref>),<sp/>byte_width_(byte_width)<sp/>{}</highlight></codeline>
<codeline lineno="890" refid="classarrow_1_1_fixed_size_binary_type_1a3f57f5b4f09bf5d93df7a33600427500" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_fixed_size_binary_type_1a3f57f5b4f09bf5d93df7a33600427500" kindref="member">FixedSizeBinaryType</ref>(int32_t<sp/>byte_width,<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref><sp/>override_type_id)</highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classarrow_1_1_fixed_width_type" kindref="compound">FixedWidthType</ref>(override_type_id),<sp/>byte_width_(byte_width)<sp/>{}</highlight></codeline>
<codeline lineno="892"><highlight class="normal"></highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="894" refid="classarrow_1_1_fixed_size_binary_type_1af533276c83d45b5cefa826a169bef6c7" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classarrow_1_1_fixed_size_binary_type_1af533276c83d45b5cefa826a169bef6c7" kindref="member">name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;fixed_size_binary&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="895"><highlight class="normal"></highlight></codeline>
<codeline lineno="896" refid="classarrow_1_1_fixed_size_binary_type_1a272445981e412ccca95784e133f0a6cc" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_data_type_layout" kindref="compound">DataTypeLayout</ref><sp/><ref refid="classarrow_1_1_fixed_size_binary_type_1a272445981e412ccca95784e133f0a6cc" kindref="member">layout</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_data_type_layout" kindref="compound">DataTypeLayout</ref>(</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<ref refid="structarrow_1_1_data_type_layout_1aa3772878ee24b7af10de8306836500a2" kindref="member">DataTypeLayout::Bitmap</ref>(),<sp/><ref refid="structarrow_1_1_data_type_layout_1a29a463149351d5219cf304c921211069" kindref="member">DataTypeLayout::FixedWidth</ref>(byte_width())});</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="900"><highlight class="normal"></highlight></codeline>
<codeline lineno="901" refid="classarrow_1_1_fixed_size_binary_type_1a684663b4cfeedd523eece039c6c0955a" refkind="member"><highlight class="normal"><sp/><sp/>int32_t<sp/><ref refid="classarrow_1_1_fixed_size_binary_type_1a684663b4cfeedd523eece039c6c0955a" kindref="member">byte_width</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>byte_width_;<sp/>}</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit_width()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="903"><highlight class="normal"></highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/>std::string<sp/>ComputeFingerprint()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="907" refid="classarrow_1_1_fixed_size_binary_type_1a2dfa5ac6ba9a94d355533f5b23a7b1bc" refkind="member"><highlight class="normal"><sp/><sp/>int32_t<sp/><ref refid="classarrow_1_1_fixed_size_binary_type_1a2dfa5ac6ba9a94d355533f5b23a7b1bc" kindref="member">byte_width_</ref>;</highlight></codeline>
<codeline lineno="908"><highlight class="normal">};</highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight></codeline>
<codeline lineno="911" refid="classarrow_1_1_struct_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_struct_type" kindref="compound">StructType</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_nested_type" kindref="compound">NestedType</ref><sp/>{</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="913" refid="classarrow_1_1_struct_type_1a9a372413a92743e6da9448e2f462fdd1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref><sp/>type_id<sp/>=<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44aaa028b35c4e6a047c0e510ef1b0389ef" kindref="member">Type::STRUCT</ref>;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"></highlight></codeline>
<codeline lineno="915" refid="classarrow_1_1_struct_type_1a0059f564e6a85500c83f93968a9380b4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classarrow_1_1_struct_type_1a0059f564e6a85500c83f93968a9380b4" kindref="member">type_name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;struct&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="916"><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_struct_type" kindref="compound">StructType</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;Field&gt;&gt;&amp;<sp/>fields);</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/>~<ref refid="classarrow_1_1_struct_type" kindref="compound">StructType</ref>()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921" refid="classarrow_1_1_struct_type_1a5c4c6bfa924d21316798b936ec37d18d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_data_type_layout" kindref="compound">DataTypeLayout</ref><sp/><ref refid="classarrow_1_1_struct_type_1a5c4c6bfa924d21316798b936ec37d18d" kindref="member">layout</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_data_type_layout" kindref="compound">DataTypeLayout</ref>({<ref refid="structarrow_1_1_data_type_layout_1aa3772878ee24b7af10de8306836500a2" kindref="member">DataTypeLayout::Bitmap</ref>()});</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="926" refid="classarrow_1_1_struct_type_1a5a6f3d58e837712a49e507925e2b40ec" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classarrow_1_1_struct_type_1a5a6f3d58e837712a49e507925e2b40ec" kindref="member">name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;struct&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Field&gt;<sp/>GetFieldByName(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Field&gt;&gt;<sp/>GetAllFieldsByName(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GetFieldIndex(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>GetAllFieldIndices(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/>std::string<sp/>ComputeFingerprint()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"></highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Impl;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;Impl&gt;<sp/>impl_;</highlight></codeline>
<codeline lineno="946"><highlight class="normal">};</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="949" refid="classarrow_1_1_decimal_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_decimal_type" kindref="compound">DecimalType</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_fixed_size_binary_type" kindref="compound">FixedSizeBinaryType</ref><sp/>{</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="951" refid="classarrow_1_1_decimal_type_1a543c9830ae2a5ceb96cb5d2d62b85092" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_decimal_type_1a543c9830ae2a5ceb96cb5d2d62b85092" kindref="member">DecimalType</ref>(int32_t<sp/>byte_width,<sp/>int32_t<sp/>precision,<sp/>int32_t<sp/>scale)</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classarrow_1_1_fixed_size_binary_type" kindref="compound">FixedSizeBinaryType</ref>(byte_width,<sp/><ref refid="structarrow_1_1_type" kindref="compound">Type</ref>::<ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a014fe7104b592dbd7c70e4e861774a63" kindref="member">DECIMAL</ref>),</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>precision_(precision),</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scale_(scale)<sp/>{}</highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight></codeline>
<codeline lineno="956" refid="classarrow_1_1_decimal_type_1ae0614854692c96eb26115585d83448b8" refkind="member"><highlight class="normal"><sp/><sp/>int32_t<sp/><ref refid="classarrow_1_1_decimal_type_1ae0614854692c96eb26115585d83448b8" kindref="member">precision</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>precision_;<sp/>}</highlight></codeline>
<codeline lineno="957" refid="classarrow_1_1_decimal_type_1af2d0aac6bef37b491f35a6464619a736" refkind="member"><highlight class="normal"><sp/><sp/>int32_t<sp/><ref refid="classarrow_1_1_decimal_type_1af2d0aac6bef37b491f35a6464619a736" kindref="member">scale</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>scale_;<sp/>}</highlight></codeline>
<codeline lineno="958"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/>std::string<sp/>ComputeFingerprint()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962" refid="classarrow_1_1_decimal_type_1a09ebc67c090d23e5c0851da68b0a9745" refkind="member"><highlight class="normal"><sp/><sp/>int32_t<sp/><ref refid="classarrow_1_1_decimal_type_1a09ebc67c090d23e5c0851da68b0a9745" kindref="member">precision_</ref>;</highlight></codeline>
<codeline lineno="963" refid="classarrow_1_1_decimal_type_1a8cdef6e38e4f984e614f4c81baaa8d1c" refkind="member"><highlight class="normal"><sp/><sp/>int32_t<sp/><ref refid="classarrow_1_1_decimal_type_1a8cdef6e38e4f984e614f4c81baaa8d1c" kindref="member">scale_</ref>;</highlight></codeline>
<codeline lineno="964"><highlight class="normal">};</highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="967" refid="classarrow_1_1_decimal128_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_decimal128_type" kindref="compound">Decimal128Type</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_decimal_type" kindref="compound">DecimalType</ref><sp/>{</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="969" refid="classarrow_1_1_decimal128_type_1a7ea0448809b48b8d9ad921807433a7c9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref><sp/>type_id<sp/>=<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a014fe7104b592dbd7c70e4e861774a63" kindref="member">Type::DECIMAL</ref>;</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="971" refid="classarrow_1_1_decimal128_type_1a0947b8f705f447ae896c62e0caede55a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classarrow_1_1_decimal128_type_1a0947b8f705f447ae896c62e0caede55a" kindref="member">type_name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;decimal&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_decimal128_type" kindref="compound">Decimal128Type</ref>(int32_t<sp/>precision,<sp/>int32_t<sp/>scale);</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;DataType&gt;</ref>&gt;<sp/>Make(int32_t<sp/>precision,<sp/>int32_t<sp/>scale);</highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><ref refid="macros_8h_1aa2ec0a506575823661e32d0be213b070" kindref="member">ARROW_DEPRECATED</ref>(</highlight><highlight class="stringliteral">&quot;Use<sp/>Result-returning<sp/>version&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>Make(int32_t<sp/>precision,<sp/>int32_t<sp/>scale,<sp/>std::shared_ptr&lt;DataType&gt;*<sp/>out);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="983" refid="classarrow_1_1_decimal128_type_1a369b5ae40c271133e15571f9c6198170" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classarrow_1_1_decimal128_type_1a369b5ae40c271133e15571f9c6198170" kindref="member">name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;decimal&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985" refid="classarrow_1_1_decimal128_type_1ab389aafefe37140f196113f302247b3c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>int32_t<sp/>kMinPrecision<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="986" refid="classarrow_1_1_decimal128_type_1a3beb616ece98e2f3cc314b676e87c188" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>int32_t<sp/>kMaxPrecision<sp/>=<sp/>38;</highlight></codeline>
<codeline lineno="987"><highlight class="normal">};</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="990" refid="classarrow_1_1_union_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_union_type" kindref="compound">UnionType</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_nested_type" kindref="compound">NestedType</ref><sp/>{</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="992" refid="classarrow_1_1_union_type_1abef5ab55bb61d53e4d2e4866480768dd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref><sp/>type_id<sp/>=<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a2fa6d3a8e3947b7d0024304bfb8b5fad" kindref="member">Type::UNION</ref>;</highlight></codeline>
<codeline lineno="993" refid="classarrow_1_1_union_type_1a4cbe5b2d272bd69fb5094677480ae59f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>int8_t<sp/>kMaxTypeCode<sp/>=<sp/>127;</highlight></codeline>
<codeline lineno="994" refid="classarrow_1_1_union_type_1a9f24378a829ba26dac4ed059bbcbf03b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kInvalidChildId<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="995"><highlight class="normal"></highlight></codeline>
<codeline lineno="996" refid="classarrow_1_1_union_type_1a6fe66faeb090bb897df76fed0d3d1cc4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classarrow_1_1_union_type_1a6fe66faeb090bb897df76fed0d3d1cc4" kindref="member">type_name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;union&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_union_type" kindref="compound">UnionType</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;Field&gt;&gt;&amp;<sp/>fields,</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int8_t&gt;&amp;<sp/>type_codes,</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_union_mode_1a98f368f8fb8a5553a17abc2fb1e76dac" kindref="member">UnionMode::type</ref><sp/>mode<sp/>=<sp/><ref refid="structarrow_1_1_union_mode_1a98f368f8fb8a5553a17abc2fb1e76dacaf747592e2e0c52a802406811b95b3a60" kindref="member">UnionMode::SPARSE</ref>);</highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>constructor<sp/>variant<sp/>that<sp/>validates<sp/>input<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;DataType&gt;</ref>&gt;<sp/>Make(</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;Field&gt;&gt;&amp;<sp/>fields,</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int8_t&gt;&amp;<sp/>type_codes,<sp/><ref refid="structarrow_1_1_union_mode_1a98f368f8fb8a5553a17abc2fb1e76dac" kindref="member">UnionMode::type</ref><sp/>mode<sp/>=<sp/><ref refid="structarrow_1_1_union_mode_1a98f368f8fb8a5553a17abc2fb1e76dacaf747592e2e0c52a802406811b95b3a60" kindref="member">UnionMode::SPARSE</ref>);</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_data_type_layout" kindref="compound">DataTypeLayout</ref><sp/>layout()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1010" refid="classarrow_1_1_union_type_1ae1fa65b67319c82d243e9a95de543bdc" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classarrow_1_1_union_type_1ae1fa65b67319c82d243e9a95de543bdc" kindref="member">name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;union&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016" refid="classarrow_1_1_union_type_1aa4e646e01306320a36650634e2a5001c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int8_t&gt;&amp;<sp/><ref refid="classarrow_1_1_union_type_1aa4e646e01306320a36650634e2a5001c" kindref="member">type_codes</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_codes_;<sp/>}</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019" refid="classarrow_1_1_union_type_1a625f4d3ce632e9bc79dd58999b5e4c5a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;&amp;<sp/><ref refid="classarrow_1_1_union_type_1a625f4d3ce632e9bc79dd58999b5e4c5a" kindref="member">child_ids</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>child_ids_;<sp/>}</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/>uint8_t<sp/>max_type_code()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight></codeline>
<codeline lineno="1023" refid="classarrow_1_1_union_type_1a79895226f596782cae0abf0c14da0173" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_union_mode_1a98f368f8fb8a5553a17abc2fb1e76dac" kindref="member">UnionMode::type</ref><sp/><ref refid="classarrow_1_1_union_type_1a79895226f596782cae0abf0c14da0173" kindref="member">mode</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mode_;<sp/>}</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/>std::string<sp/>ComputeFingerprint()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"></highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>ValidateParameters(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;Field&gt;&gt;&amp;<sp/>fields,</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int8_t&gt;&amp;<sp/>type_codes,</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_union_mode_1a98f368f8fb8a5553a17abc2fb1e76dac" kindref="member">UnionMode::type</ref><sp/>mode);</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight></codeline>
<codeline lineno="1032"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_union_mode_1a98f368f8fb8a5553a17abc2fb1e76dac" kindref="member">UnionMode::type</ref><sp/>mode_;</highlight></codeline>
<codeline lineno="1033"><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="normal"><sp/><sp/>std::vector&lt;int8_t&gt;<sp/>type_codes_;</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>child_ids_;</highlight></codeline>
<codeline lineno="1036"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Date<sp/>and<sp/>time<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041" refid="namespacearrow_1a04410292f01b108a8a8af3c7077afcda" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/><ref refid="namespacearrow_1a04410292f01b108a8a8af3c7077afcda" kindref="member">DateUnit</ref><sp/>:<sp/>char<sp/>{<sp/><ref refid="namespacearrow_1a04410292f01b108a8a8af3c7077afcdaa5b1d59b5451c06afb65ab1bc2713cfb4" kindref="member">DAY</ref><sp/>=<sp/>0,<sp/><ref refid="namespacearrow_1a04410292f01b108a8a8af3c7077afcdaa8f06f9f0a1efa42a2ad3ec880b0a1f70" kindref="member">MILLI</ref><sp/>=<sp/>1<sp/>};</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044" refid="classarrow_1_1_temporal_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_temporal_type" kindref="compound">TemporalType</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_fixed_width_type" kindref="compound">FixedWidthType</ref><sp/>{</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>FixedWidthType::FixedWidthType;</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1048" refid="classarrow_1_1_temporal_type_1a3765b88dae2be6093850dd40f785386b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_data_type_layout" kindref="compound">DataTypeLayout</ref><sp/><ref refid="classarrow_1_1_temporal_type_1a3765b88dae2be6093850dd40f785386b" kindref="member">layout</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_data_type_layout" kindref="compound">DataTypeLayout</ref>(</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<ref refid="structarrow_1_1_data_type_layout_1aa3772878ee24b7af10de8306836500a2" kindref="member">DataTypeLayout::Bitmap</ref>(),<sp/><ref refid="structarrow_1_1_data_type_layout_1a29a463149351d5219cf304c921211069" kindref="member">DataTypeLayout::FixedWidth</ref>(bit_width()<sp/>/<sp/>8)});</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1052"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1055" refid="classarrow_1_1_date_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_date_type" kindref="compound">DateType</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_temporal_type" kindref="compound">TemporalType</ref><sp/>{</highlight></codeline>
<codeline lineno="1056"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="namespacearrow_1a04410292f01b108a8a8af3c7077afcda" kindref="member">DateUnit</ref><sp/>unit()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"></highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_date_type" kindref="compound">DateType</ref>(<ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref><sp/>type_id);</highlight></codeline>
<codeline lineno="1061"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight></codeline>
<codeline lineno="1064" refid="classarrow_1_1_date32_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_date32_type" kindref="compound">Date32Type</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_date_type" kindref="compound">DateType</ref><sp/>{</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1066" refid="classarrow_1_1_date32_type_1a68b792e7905372736c97f9cc45f7908f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref><sp/>type_id<sp/>=<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a4351aedceb3d92f82cf7ae504476ef30" kindref="member">Type::DATE32</ref>;</highlight></codeline>
<codeline lineno="1067" refid="classarrow_1_1_date32_type_1a9a1512752bbd912ea641860a6ca05a0c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="namespacearrow_1a04410292f01b108a8a8af3c7077afcda" kindref="member">DateUnit</ref><sp/>UNIT<sp/>=<sp/><ref refid="namespacearrow_1a04410292f01b108a8a8af3c7077afcdaa5b1d59b5451c06afb65ab1bc2713cfb4" kindref="member">DateUnit::DAY</ref>;</highlight></codeline>
<codeline lineno="1068" refid="classarrow_1_1_date32_type_1a2ef2cdd790a7475ca6064938d75f40c9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_date32_type_1a2ef2cdd790a7475ca6064938d75f40c9" kindref="member">c_type</ref><sp/>=<sp/>int32_t;</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070" refid="classarrow_1_1_date32_type_1af7fe0a29f7a5a9fdbd49482ad9e51401" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classarrow_1_1_date32_type_1af7fe0a29f7a5a9fdbd49482ad9e51401" kindref="member">type_name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;date32&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_date32_type" kindref="compound">Date32Type</ref>();</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight></codeline>
<codeline lineno="1074" refid="classarrow_1_1_date32_type_1a136d1e9e6eb85aae9b1034790d7df087" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_date32_type_1a136d1e9e6eb85aae9b1034790d7df087" kindref="member">bit_width</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="classarrow_1_1_date32_type_1a2ef2cdd790a7475ca6064938d75f40c9" kindref="member">c_type</ref>)<sp/>*<sp/>CHAR_BIT);<sp/>}</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"></highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1078" refid="classarrow_1_1_date32_type_1a67136dde9b0df81a730d9f8aaeea3d10" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classarrow_1_1_date32_type_1a67136dde9b0df81a730d9f8aaeea3d10" kindref="member">name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;date32&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1079" refid="classarrow_1_1_date32_type_1ac22d829d04d5e497f0987cf96b69cfe6" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacearrow_1a04410292f01b108a8a8af3c7077afcda" kindref="member">DateUnit</ref><sp/><ref refid="classarrow_1_1_date32_type_1ac22d829d04d5e497f0987cf96b69cfe6" kindref="member">unit</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNIT;<sp/>}</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/>std::string<sp/>ComputeFingerprint()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight></codeline>
<codeline lineno="1086" refid="classarrow_1_1_date64_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_date64_type" kindref="compound">Date64Type</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_date_type" kindref="compound">DateType</ref><sp/>{</highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1088" refid="classarrow_1_1_date64_type_1aaae0a082fc808d341030114d9593a9e4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref><sp/>type_id<sp/>=<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a17325202e90c23cd194b1698eea87a38" kindref="member">Type::DATE64</ref>;</highlight></codeline>
<codeline lineno="1089" refid="classarrow_1_1_date64_type_1a24aa6c5346e0348ebfd84c254f23c6e4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="namespacearrow_1a04410292f01b108a8a8af3c7077afcda" kindref="member">DateUnit</ref><sp/>UNIT<sp/>=<sp/><ref refid="namespacearrow_1a04410292f01b108a8a8af3c7077afcdaa8f06f9f0a1efa42a2ad3ec880b0a1f70" kindref="member">DateUnit::MILLI</ref>;</highlight></codeline>
<codeline lineno="1090" refid="classarrow_1_1_date64_type_1a33d68b10322a1f00f578acb13a286ff3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_date64_type_1a33d68b10322a1f00f578acb13a286ff3" kindref="member">c_type</ref><sp/>=<sp/>int64_t;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092" refid="classarrow_1_1_date64_type_1a9d24bb1d1f7e2d6ce8ca294ca4ddf5c8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classarrow_1_1_date64_type_1a9d24bb1d1f7e2d6ce8ca294ca4ddf5c8" kindref="member">type_name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;date64&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"></highlight></codeline>
<codeline lineno="1094"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_date64_type" kindref="compound">Date64Type</ref>();</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight></codeline>
<codeline lineno="1096" refid="classarrow_1_1_date64_type_1a8ee39ed5007d48070a9889716e044b04" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_date64_type_1a8ee39ed5007d48070a9889716e044b04" kindref="member">bit_width</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="classarrow_1_1_date64_type_1a33d68b10322a1f00f578acb13a286ff3" kindref="member">c_type</ref>)<sp/>*<sp/>CHAR_BIT);<sp/>}</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100" refid="classarrow_1_1_date64_type_1a48afc838a3ac17c2ae579da3b6387f48" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classarrow_1_1_date64_type_1a48afc838a3ac17c2ae579da3b6387f48" kindref="member">name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;date64&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1101" refid="classarrow_1_1_date64_type_1add949a915088f55b9e6bda963e8abeb2" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacearrow_1a04410292f01b108a8a8af3c7077afcda" kindref="member">DateUnit</ref><sp/><ref refid="classarrow_1_1_date64_type_1add949a915088f55b9e6bda963e8abeb2" kindref="member">unit</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>UNIT;<sp/>}</highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1104"><highlight class="normal"><sp/><sp/>std::string<sp/>ComputeFingerprint()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1105"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"></highlight></codeline>
<codeline lineno="1107"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="1108"><highlight class="normal">std::ostream&amp;<sp/>operator&lt;&lt;(std::ostream&amp;<sp/>os,<sp/><ref refid="structarrow_1_1_time_unit_1a561ef51c3755bd873f8f86f5bc4ec1ff" kindref="member">TimeUnit::type</ref><sp/>unit);</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"></highlight></codeline>
<codeline lineno="1111" refid="classarrow_1_1_time_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_time_type" kindref="compound">TimeType</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_temporal_type" kindref="compound">TemporalType</ref>,<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_parametric_type" kindref="compound">ParametricType</ref><sp/>{</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1113" refid="classarrow_1_1_time_type_1a25ebbb923ec7c54cdf0a58bdc9625c65" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_time_unit_1a561ef51c3755bd873f8f86f5bc4ec1ff" kindref="member">TimeUnit::type</ref><sp/><ref refid="classarrow_1_1_time_type_1a25ebbb923ec7c54cdf0a58bdc9625c65" kindref="member">unit</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unit_;<sp/>}</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_time_type" kindref="compound">TimeType</ref>(<ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref><sp/>type_id,<sp/><ref refid="structarrow_1_1_time_unit_1a561ef51c3755bd873f8f86f5bc4ec1ff" kindref="member">TimeUnit::type</ref><sp/>unit);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/>std::string<sp/>ComputeFingerprint()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight></codeline>
<codeline lineno="1119" refid="classarrow_1_1_time_type_1a4969fc68a0db512dbd75255f2731dc59" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_time_unit_1a561ef51c3755bd873f8f86f5bc4ec1ff" kindref="member">TimeUnit::type</ref><sp/><ref refid="classarrow_1_1_time_type_1a4969fc68a0db512dbd75255f2731dc59" kindref="member">unit_</ref>;</highlight></codeline>
<codeline lineno="1120"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1121"><highlight class="normal"></highlight></codeline>
<codeline lineno="1124" refid="classarrow_1_1_time32_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_time32_type" kindref="compound">Time32Type</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_time_type" kindref="compound">TimeType</ref><sp/>{</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1126" refid="classarrow_1_1_time32_type_1a50eac064fb66811bc23e030ac1db8ddb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref><sp/>type_id<sp/>=<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a73fb0fcd2b5d9a4c6071574c73cdf3c5" kindref="member">Type::TIME32</ref>;</highlight></codeline>
<codeline lineno="1127" refid="classarrow_1_1_time32_type_1afce9c3f8cf3d785c98a4c9f4fb6771b1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_time32_type_1afce9c3f8cf3d785c98a4c9f4fb6771b1" kindref="member">c_type</ref><sp/>=<sp/>int32_t;</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"></highlight></codeline>
<codeline lineno="1129" refid="classarrow_1_1_time32_type_1a92fad37696e8803ee2ea7554bc7a842c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classarrow_1_1_time32_type_1a92fad37696e8803ee2ea7554bc7a842c" kindref="member">type_name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;time32&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight></codeline>
<codeline lineno="1131" refid="classarrow_1_1_time32_type_1af89bb7619663d931abd938f63ffadb91" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_time32_type_1af89bb7619663d931abd938f63ffadb91" kindref="member">bit_width</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="classarrow_1_1_time32_type_1afce9c3f8cf3d785c98a4c9f4fb6771b1" kindref="member">c_type</ref>)<sp/>*<sp/>CHAR_BIT);<sp/>}</highlight></codeline>
<codeline lineno="1132"><highlight class="normal"></highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_time32_type" kindref="compound">Time32Type</ref>(<ref refid="structarrow_1_1_time_unit_1a561ef51c3755bd873f8f86f5bc4ec1ff" kindref="member">TimeUnit::type</ref><sp/>unit<sp/>=<sp/><ref refid="structarrow_1_1_time_unit_1a561ef51c3755bd873f8f86f5bc4ec1ffadc3335445f7fa1b26f9c78754a1f217b" kindref="member">TimeUnit::MILLI</ref>);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"></highlight></codeline>
<codeline lineno="1137" refid="classarrow_1_1_time32_type_1a7ad35f94f66f2e2f6c718328d0b1e928" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classarrow_1_1_time32_type_1a7ad35f94f66f2e2f6c718328d0b1e928" kindref="member">name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;time32&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1138"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight></codeline>
<codeline lineno="1142" refid="classarrow_1_1_time64_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_time64_type" kindref="compound">Time64Type</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_time_type" kindref="compound">TimeType</ref><sp/>{</highlight></codeline>
<codeline lineno="1143"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1144" refid="classarrow_1_1_time64_type_1a9f349dbf2b5d3613f60052f1d5d4041e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref><sp/>type_id<sp/>=<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44ab960cffd22f54b634d9f055f7568d321" kindref="member">Type::TIME64</ref>;</highlight></codeline>
<codeline lineno="1145" refid="classarrow_1_1_time64_type_1a74e5e7ab9e8d52bd7f9dc3fe44296d2a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_time64_type_1a74e5e7ab9e8d52bd7f9dc3fe44296d2a" kindref="member">c_type</ref><sp/>=<sp/>int64_t;</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"></highlight></codeline>
<codeline lineno="1147" refid="classarrow_1_1_time64_type_1a88790a1b9550b5bb30608a93f6139fb7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classarrow_1_1_time64_type_1a88790a1b9550b5bb30608a93f6139fb7" kindref="member">type_name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;time64&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight></codeline>
<codeline lineno="1149" refid="classarrow_1_1_time64_type_1a7122f298d1595a5f4555830ebd38d8bc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_time64_type_1a7122f298d1595a5f4555830ebd38d8bc" kindref="member">bit_width</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="classarrow_1_1_time64_type_1a74e5e7ab9e8d52bd7f9dc3fe44296d2a" kindref="member">c_type</ref>)<sp/>*<sp/>CHAR_BIT);<sp/>}</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"></highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_time64_type" kindref="compound">Time64Type</ref>(<ref refid="structarrow_1_1_time_unit_1a561ef51c3755bd873f8f86f5bc4ec1ff" kindref="member">TimeUnit::type</ref><sp/>unit<sp/>=<sp/><ref refid="structarrow_1_1_time_unit_1a561ef51c3755bd873f8f86f5bc4ec1ffa88a677627c74df18d59f1aa6cd1c88d5" kindref="member">TimeUnit::NANO</ref>);</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight></codeline>
<codeline lineno="1155" refid="classarrow_1_1_time64_type_1abba4ccc76c566ee3f61997f78660dd79" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classarrow_1_1_time64_type_1abba4ccc76c566ee3f61997f78660dd79" kindref="member">name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;time64&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1156"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1157"><highlight class="normal"></highlight></codeline>
<codeline lineno="1190" refid="classarrow_1_1_timestamp_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_timestamp_type" kindref="compound">TimestampType</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_temporal_type" kindref="compound">TemporalType</ref>,<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_parametric_type" kindref="compound">ParametricType</ref><sp/>{</highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1192" refid="classarrow_1_1_timestamp_type_1a895411d8d9ceffe0aa91d125aea7b429" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_time_unit" kindref="compound">Unit</ref><sp/>=<sp/><ref refid="structarrow_1_1_time_unit" kindref="compound">TimeUnit</ref>;</highlight></codeline>
<codeline lineno="1193"><highlight class="normal"></highlight></codeline>
<codeline lineno="1194" refid="classarrow_1_1_timestamp_type_1a21e64acc4074512b6f457692c4524738" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref><sp/>type_id<sp/>=<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a1e41dddee4a6410c4d6fe164b36a230e" kindref="member">Type::TIMESTAMP</ref>;</highlight></codeline>
<codeline lineno="1195" refid="classarrow_1_1_timestamp_type_1a67004dae37b0f04b1038e752c95b82df" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_timestamp_type_1a67004dae37b0f04b1038e752c95b82df" kindref="member">c_type</ref><sp/>=<sp/>int64_t;</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight></codeline>
<codeline lineno="1197" refid="classarrow_1_1_timestamp_type_1af71e1f4dc128e69ff963a07aca18c22b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classarrow_1_1_timestamp_type_1af71e1f4dc128e69ff963a07aca18c22b" kindref="member">type_name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;timestamp&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight></codeline>
<codeline lineno="1199" refid="classarrow_1_1_timestamp_type_1acc58878534b7582bd4b60ba575b18215" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_timestamp_type_1acc58878534b7582bd4b60ba575b18215" kindref="member">bit_width</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int64_t)<sp/>*<sp/>CHAR_BIT);<sp/>}</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"></highlight></codeline>
<codeline lineno="1201" refid="classarrow_1_1_timestamp_type_1a88e0ba47b82571b3fc3798b6c099499b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_timestamp_type_1a88e0ba47b82571b3fc3798b6c099499b" kindref="member">TimestampType</ref>(<ref refid="structarrow_1_1_time_unit_1a561ef51c3755bd873f8f86f5bc4ec1ff" kindref="member">TimeUnit::type</ref><sp/>unit<sp/>=<sp/><ref refid="structarrow_1_1_time_unit_1a561ef51c3755bd873f8f86f5bc4ec1ffadc3335445f7fa1b26f9c78754a1f217b" kindref="member">TimeUnit::MILLI</ref>)</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classarrow_1_1_temporal_type" kindref="compound">TemporalType</ref>(<ref refid="structarrow_1_1_type" kindref="compound">Type</ref>::<ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a1e41dddee4a6410c4d6fe164b36a230e" kindref="member">TIMESTAMP</ref>),<sp/>unit_(unit)<sp/>{}</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight></codeline>
<codeline lineno="1204" refid="classarrow_1_1_timestamp_type_1ad0be5cd4daf44dbbcecacfcdd6499a76" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_timestamp_type_1ad0be5cd4daf44dbbcecacfcdd6499a76" kindref="member">TimestampType</ref>(<ref refid="structarrow_1_1_time_unit_1a561ef51c3755bd873f8f86f5bc4ec1ff" kindref="member">TimeUnit::type</ref><sp/>unit,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>timezone)</highlight></codeline>
<codeline lineno="1205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classarrow_1_1_temporal_type" kindref="compound">TemporalType</ref>(<ref refid="structarrow_1_1_type" kindref="compound">Type</ref>::<ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a1e41dddee4a6410c4d6fe164b36a230e" kindref="member">TIMESTAMP</ref>),<sp/>unit_(unit),<sp/>timezone_(timezone)<sp/>{}</highlight></codeline>
<codeline lineno="1206"><highlight class="normal"></highlight></codeline>
<codeline lineno="1207"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1208" refid="classarrow_1_1_timestamp_type_1acdca1b7fb9a7d6532dcbbfb6dee2172b" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classarrow_1_1_timestamp_type_1acdca1b7fb9a7d6532dcbbfb6dee2172b" kindref="member">name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;timestamp&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1209"><highlight class="normal"></highlight></codeline>
<codeline lineno="1210" refid="classarrow_1_1_timestamp_type_1a8785c01920871facc36e54f79fc53ade" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_time_unit_1a561ef51c3755bd873f8f86f5bc4ec1ff" kindref="member">TimeUnit::type</ref><sp/><ref refid="classarrow_1_1_timestamp_type_1a8785c01920871facc36e54f79fc53ade" kindref="member">unit</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unit_;<sp/>}</highlight></codeline>
<codeline lineno="1211" refid="classarrow_1_1_timestamp_type_1a1a603ac99c48a77cf8c09ba34a3102aa" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="classarrow_1_1_timestamp_type_1a1a603ac99c48a77cf8c09ba34a3102aa" kindref="member">timezone</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>timezone_;<sp/>}</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/>std::string<sp/>ComputeFingerprint()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"></highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_time_unit_1a561ef51c3755bd873f8f86f5bc4ec1ff" kindref="member">TimeUnit::type</ref><sp/>unit_;</highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/>std::string<sp/>timezone_;</highlight></codeline>
<codeline lineno="1219"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"></highlight></codeline>
<codeline lineno="1221"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Base<sp/>class<sp/>for<sp/>the<sp/>different<sp/>kinds<sp/>of<sp/>calendar<sp/>intervals.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1222" refid="classarrow_1_1_interval_type" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_interval_type" kindref="compound">IntervalType</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_temporal_type" kindref="compound">TemporalType</ref>,<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_parametric_type" kindref="compound">ParametricType</ref><sp/>{</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1224" refid="classarrow_1_1_interval_type_1ae72a8a101c098ebf09ed0af253222ecc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_interval_type_1ae72a8a101c098ebf09ed0af253222ecc" kindref="member">type</ref><sp/>{<sp/>MONTHS,<sp/>DAY_TIME<sp/>};</highlight></codeline>
<codeline lineno="1225" refid="classarrow_1_1_interval_type_1a91824bf640a08e541b84a50dacb26045" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_interval_type_1a91824bf640a08e541b84a50dacb26045" kindref="member">IntervalType</ref>()<sp/>:<sp/><ref refid="classarrow_1_1_temporal_type" kindref="compound">TemporalType</ref>(<ref refid="structarrow_1_1_type" kindref="compound">Type</ref>::<ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44aaa546143f5b445f6478b7e157546ec3f" kindref="member">INTERVAL</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_interval_type_1ae72a8a101c098ebf09ed0af253222ecc" kindref="member">type</ref><sp/>interval_type()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1228"><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/>std::string<sp/>ComputeFingerprint()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1231"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"></highlight></codeline>
<codeline lineno="1237" refid="classarrow_1_1_month_interval_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_month_interval_type" kindref="compound">MonthIntervalType</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_interval_type" kindref="compound">IntervalType</ref><sp/>{</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1239" refid="classarrow_1_1_month_interval_type_1aa2a33eb0551cdc4948ea27a2bc66e33c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref><sp/>type_id<sp/>=<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44aaa546143f5b445f6478b7e157546ec3f" kindref="member">Type::INTERVAL</ref>;</highlight></codeline>
<codeline lineno="1240" refid="classarrow_1_1_month_interval_type_1ac221a9de4c51cd6ce5c595ff41e9c125" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_month_interval_type_1ac221a9de4c51cd6ce5c595ff41e9c125" kindref="member">c_type</ref><sp/>=<sp/>int32_t;</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"></highlight></codeline>
<codeline lineno="1242" refid="classarrow_1_1_month_interval_type_1afad94e763adcf31fbf8a2853ca411509" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classarrow_1_1_month_interval_type_1afad94e763adcf31fbf8a2853ca411509" kindref="member">type_name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;month_interval&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1243"><highlight class="normal"></highlight></codeline>
<codeline lineno="1244" refid="classarrow_1_1_month_interval_type_1ae67aaa1e87c8be7a74045f42e89d3c03" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_interval_type_1ae72a8a101c098ebf09ed0af253222ecc" kindref="member">IntervalType::type</ref><sp/><ref refid="classarrow_1_1_month_interval_type_1ae67aaa1e87c8be7a74045f42e89d3c03" kindref="member">interval_type</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_interval_type_1ae72a8a101c098ebf09ed0af253222eccaebf2d56ec2d1e87647e2880577559f3a" kindref="member">IntervalType::MONTHS</ref>;<sp/>}</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"></highlight></codeline>
<codeline lineno="1246" refid="classarrow_1_1_month_interval_type_1a643ee8ee770657cb42406d088215d095" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_month_interval_type_1a643ee8ee770657cb42406d088215d095" kindref="member">bit_width</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="classarrow_1_1_month_interval_type_1ac221a9de4c51cd6ce5c595ff41e9c125" kindref="member">c_type</ref>)<sp/>*<sp/>CHAR_BIT);<sp/>}</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"></highlight></codeline>
<codeline lineno="1248" refid="classarrow_1_1_month_interval_type_1acad947ae1d4c0e82f2b9d5742c6ac7f2" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_month_interval_type_1acad947ae1d4c0e82f2b9d5742c6ac7f2" kindref="member">MonthIntervalType</ref>()<sp/>:<sp/><ref refid="classarrow_1_1_interval_type" kindref="compound">IntervalType</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1250" refid="classarrow_1_1_month_interval_type_1a9445bb7993a337e558e0101c8784dd87" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classarrow_1_1_month_interval_type_1a9445bb7993a337e558e0101c8784dd87" kindref="member">ToString</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name();<sp/>}</highlight></codeline>
<codeline lineno="1251" refid="classarrow_1_1_month_interval_type_1a49fe7c14ff4077443815fc88709711be" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classarrow_1_1_month_interval_type_1a49fe7c14ff4077443815fc88709711be" kindref="member">name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;month_interval&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1252"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1253"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255" refid="classarrow_1_1_day_time_interval_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_day_time_interval_type" kindref="compound">DayTimeIntervalType</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_interval_type" kindref="compound">IntervalType</ref><sp/>{</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1257" refid="structarrow_1_1_day_time_interval_type_1_1_day_milliseconds" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structarrow_1_1_day_time_interval_type_1_1_day_milliseconds" kindref="compound">DayMilliseconds</ref><sp/>{</highlight></codeline>
<codeline lineno="1258" refid="structarrow_1_1_day_time_interval_type_1_1_day_milliseconds_1a9fa1363564d88e93a41680d2525c55e1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/><ref refid="structarrow_1_1_day_time_interval_type_1_1_day_milliseconds_1a9fa1363564d88e93a41680d2525c55e1" kindref="member">days</ref>;</highlight></codeline>
<codeline lineno="1259" refid="structarrow_1_1_day_time_interval_type_1_1_day_milliseconds_1a1f664950464bc281bb266993ed7fb510" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/><ref refid="structarrow_1_1_day_time_interval_type_1_1_day_milliseconds_1a1f664950464bc281bb266993ed7fb510" kindref="member">milliseconds</ref>;</highlight></codeline>
<codeline lineno="1260" refid="structarrow_1_1_day_time_interval_type_1_1_day_milliseconds_1a0c085bb2db582d30d8a223196ee58cb8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_day_time_interval_type_1_1_day_milliseconds_1a0c085bb2db582d30d8a223196ee58cb8" kindref="member">operator==</ref>(<ref refid="structarrow_1_1_day_time_interval_type_1_1_day_milliseconds" kindref="compound">DayMilliseconds</ref><sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;days<sp/>==<sp/>other.<ref refid="structarrow_1_1_day_time_interval_type_1_1_day_milliseconds_1a9fa1363564d88e93a41680d2525c55e1" kindref="member">days</ref><sp/>&amp;&amp;<sp/>this-&gt;milliseconds<sp/>==<sp/>other.<ref refid="structarrow_1_1_day_time_interval_type_1_1_day_milliseconds_1a1f664950464bc281bb266993ed7fb510" kindref="member">milliseconds</ref>;</highlight></codeline>
<codeline lineno="1262"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1263" refid="structarrow_1_1_day_time_interval_type_1_1_day_milliseconds_1abd88f9d4cfa89743646928bd9b31008a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_day_time_interval_type_1_1_day_milliseconds_1abd88f9d4cfa89743646928bd9b31008a" kindref="member">operator!=</ref>(<ref refid="structarrow_1_1_day_time_interval_type_1_1_day_milliseconds" kindref="compound">DayMilliseconds</ref><sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>other);<sp/>}</highlight></codeline>
<codeline lineno="1264" refid="structarrow_1_1_day_time_interval_type_1_1_day_milliseconds_1aaafb3942d80dcd024deeacba83f90131" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_day_time_interval_type_1_1_day_milliseconds_1aaafb3942d80dcd024deeacba83f90131" kindref="member">operator&lt;</ref>(<ref refid="structarrow_1_1_day_time_interval_type_1_1_day_milliseconds" kindref="compound">DayMilliseconds</ref><sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;days<sp/>&lt;<sp/>other.<ref refid="structarrow_1_1_day_time_interval_type_1_1_day_milliseconds_1a9fa1363564d88e93a41680d2525c55e1" kindref="member">days</ref><sp/>||<sp/>this-&gt;milliseconds<sp/>&lt;<sp/>other.<ref refid="structarrow_1_1_day_time_interval_type_1_1_day_milliseconds_1a1f664950464bc281bb266993ed7fb510" kindref="member">milliseconds</ref>;</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1267"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1268" refid="classarrow_1_1_day_time_interval_type_1a794a8567c798887614b223fafa6d1fac" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_day_time_interval_type_1_1_day_milliseconds" kindref="compound">c_type</ref><sp/>=<sp/><ref refid="structarrow_1_1_day_time_interval_type_1_1_day_milliseconds" kindref="compound">DayMilliseconds</ref>;</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"><sp/><sp/>static_assert(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structarrow_1_1_day_time_interval_type_1_1_day_milliseconds" kindref="compound">DayMilliseconds</ref>)<sp/>==<sp/>8,</highlight></codeline>
<codeline lineno="1270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;DayMilliseconds<sp/>struct<sp/>assumed<sp/>to<sp/>be<sp/>of<sp/>size<sp/>8<sp/>bytes&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1271" refid="classarrow_1_1_day_time_interval_type_1a179bbcbca380b935bed249e0b02a52d6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref><sp/>type_id<sp/>=<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44aaa546143f5b445f6478b7e157546ec3f" kindref="member">Type::INTERVAL</ref>;</highlight></codeline>
<codeline lineno="1272"><highlight class="normal"></highlight></codeline>
<codeline lineno="1273" refid="classarrow_1_1_day_time_interval_type_1a5b6371f3fbe78534425913a0e3f791a4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classarrow_1_1_day_time_interval_type_1a5b6371f3fbe78534425913a0e3f791a4" kindref="member">type_name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;day_time_interval&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1274"><highlight class="normal"></highlight></codeline>
<codeline lineno="1275" refid="classarrow_1_1_day_time_interval_type_1aded1f80129c54f864655ab0385c3b94e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_interval_type_1ae72a8a101c098ebf09ed0af253222ecc" kindref="member">IntervalType::type</ref><sp/><ref refid="classarrow_1_1_day_time_interval_type_1aded1f80129c54f864655ab0385c3b94e" kindref="member">interval_type</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_interval_type_1ae72a8a101c098ebf09ed0af253222ecca5893bc3e913db19b82ce8e6c52b3c02f" kindref="member">IntervalType::DAY_TIME</ref>;<sp/>}</highlight></codeline>
<codeline lineno="1276"><highlight class="normal"></highlight></codeline>
<codeline lineno="1277" refid="classarrow_1_1_day_time_interval_type_1a428a5c0288d0cfbfa97886b6102b7c36" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_day_time_interval_type_1a428a5c0288d0cfbfa97886b6102b7c36" kindref="member">DayTimeIntervalType</ref>()<sp/>:<sp/><ref refid="classarrow_1_1_interval_type" kindref="compound">IntervalType</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="1278"><highlight class="normal"></highlight></codeline>
<codeline lineno="1279" refid="classarrow_1_1_day_time_interval_type_1a158fe8b263f6c2c70ab2c0f4062a5579" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_day_time_interval_type_1a158fe8b263f6c2c70ab2c0f4062a5579" kindref="member">bit_width</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structarrow_1_1_day_time_interval_type_1_1_day_milliseconds" kindref="compound">c_type</ref>)<sp/>*<sp/>CHAR_BIT);<sp/>}</highlight></codeline>
<codeline lineno="1280"><highlight class="normal"></highlight></codeline>
<codeline lineno="1281" refid="classarrow_1_1_day_time_interval_type_1a7e064dcb55aa588ed842d98f6babe5e8" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classarrow_1_1_day_time_interval_type_1a7e064dcb55aa588ed842d98f6babe5e8" kindref="member">ToString</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name();<sp/>}</highlight></codeline>
<codeline lineno="1282" refid="classarrow_1_1_day_time_interval_type_1ae49b7efa3b0a38d5d49f581e8688020c" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classarrow_1_1_day_time_interval_type_1ae49b7efa3b0a38d5d49f581e8688020c" kindref="member">name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;day_time_interval&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1283"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1284"><highlight class="normal"></highlight></codeline>
<codeline lineno="1286" refid="classarrow_1_1_duration_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_duration_type" kindref="compound">DurationType</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_temporal_type" kindref="compound">TemporalType</ref>,<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_parametric_type" kindref="compound">ParametricType</ref><sp/>{</highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1288" refid="classarrow_1_1_duration_type_1ae7ad94e22d4139fba7231ee14b983a24" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_time_unit" kindref="compound">Unit</ref><sp/>=<sp/><ref refid="structarrow_1_1_time_unit" kindref="compound">TimeUnit</ref>;</highlight></codeline>
<codeline lineno="1289"><highlight class="normal"></highlight></codeline>
<codeline lineno="1290" refid="classarrow_1_1_duration_type_1a691d94df1b60f41a72e3935e276af648" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref><sp/>type_id<sp/>=<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a5322b7f2fd54030f65ac36e9637ff45b" kindref="member">Type::DURATION</ref>;</highlight></codeline>
<codeline lineno="1291" refid="classarrow_1_1_duration_type_1ac8269f98c489a6b7dd68a50f44f89840" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_duration_type_1ac8269f98c489a6b7dd68a50f44f89840" kindref="member">c_type</ref><sp/>=<sp/>int64_t;</highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight></codeline>
<codeline lineno="1293" refid="classarrow_1_1_duration_type_1af8234435ce3a6e3df7112b1a127cfd04" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classarrow_1_1_duration_type_1af8234435ce3a6e3df7112b1a127cfd04" kindref="member">type_name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;duration&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1294"><highlight class="normal"></highlight></codeline>
<codeline lineno="1295" refid="classarrow_1_1_duration_type_1ae8567a04afb5c28693079819c72e905c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_duration_type_1ae8567a04afb5c28693079819c72e905c" kindref="member">bit_width</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int64_t)<sp/>*<sp/>CHAR_BIT);<sp/>}</highlight></codeline>
<codeline lineno="1296"><highlight class="normal"></highlight></codeline>
<codeline lineno="1297" refid="classarrow_1_1_duration_type_1aa65ae8b5c357bfdb4edc46378875debb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_duration_type_1aa65ae8b5c357bfdb4edc46378875debb" kindref="member">DurationType</ref>(<ref refid="structarrow_1_1_time_unit_1a561ef51c3755bd873f8f86f5bc4ec1ff" kindref="member">TimeUnit::type</ref><sp/>unit<sp/>=<sp/><ref refid="structarrow_1_1_time_unit_1a561ef51c3755bd873f8f86f5bc4ec1ffadc3335445f7fa1b26f9c78754a1f217b" kindref="member">TimeUnit::MILLI</ref>)</highlight></codeline>
<codeline lineno="1298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classarrow_1_1_temporal_type" kindref="compound">TemporalType</ref>(<ref refid="structarrow_1_1_type" kindref="compound">Type</ref>::<ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a5322b7f2fd54030f65ac36e9637ff45b" kindref="member">DURATION</ref>),<sp/>unit_(unit)<sp/>{}</highlight></codeline>
<codeline lineno="1299"><highlight class="normal"></highlight></codeline>
<codeline lineno="1300"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1301" refid="classarrow_1_1_duration_type_1adc9baa39b3f82f912aa9330ea25c1bd1" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classarrow_1_1_duration_type_1adc9baa39b3f82f912aa9330ea25c1bd1" kindref="member">name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;duration&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1302"><highlight class="normal"></highlight></codeline>
<codeline lineno="1303" refid="classarrow_1_1_duration_type_1af8f47334e686b303a14dce8505a42e95" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_time_unit_1a561ef51c3755bd873f8f86f5bc4ec1ff" kindref="member">TimeUnit::type</ref><sp/><ref refid="classarrow_1_1_duration_type_1af8f47334e686b303a14dce8505a42e95" kindref="member">unit</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>unit_;<sp/>}</highlight></codeline>
<codeline lineno="1304"><highlight class="normal"></highlight></codeline>
<codeline lineno="1305"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1306"><highlight class="normal"><sp/><sp/>std::string<sp/>ComputeFingerprint()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1307"><highlight class="normal"></highlight></codeline>
<codeline lineno="1308"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1309"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_time_unit_1a561ef51c3755bd873f8f86f5bc4ec1ff" kindref="member">TimeUnit::type</ref><sp/>unit_;</highlight></codeline>
<codeline lineno="1310"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1311"><highlight class="normal"></highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1313"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Dictionary<sp/>type<sp/>(for<sp/>representing<sp/>categorical<sp/>or<sp/>dictionary-encoded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1314"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>memory)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight></codeline>
<codeline lineno="1318" refid="classarrow_1_1_dictionary_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_dictionary_type" kindref="compound">DictionaryType</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_fixed_width_type" kindref="compound">FixedWidthType</ref><sp/>{</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1320" refid="classarrow_1_1_dictionary_type_1a4c585ffe89dfb0b27a1e6a588dedb362" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref><sp/>type_id<sp/>=<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a3c38b5820a3de12d71713473550c6280" kindref="member">Type::DICTIONARY</ref>;</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight></codeline>
<codeline lineno="1322" refid="classarrow_1_1_dictionary_type_1a61f16ed4917b350cf8a070bedf5838ee" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="classarrow_1_1_dictionary_type_1a61f16ed4917b350cf8a070bedf5838ee" kindref="member">type_name</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;dictionary&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1323"><highlight class="normal"></highlight></codeline>
<codeline lineno="1324"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_dictionary_type" kindref="compound">DictionaryType</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>index_type,</highlight></codeline>
<codeline lineno="1325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>value_type,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ordered<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight></codeline>
<codeline lineno="1327"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>constructor<sp/>variant<sp/>that<sp/>validates<sp/>its<sp/>input<sp/>parameters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;DataType&gt;</ref>&gt;<sp/>Make(</highlight></codeline>
<codeline lineno="1329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>index_type,</highlight></codeline>
<codeline lineno="1330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>value_type,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ordered<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight></codeline>
<codeline lineno="1332"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1333" refid="classarrow_1_1_dictionary_type_1a1423be356f4e0c7d28f2c52881decbed" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classarrow_1_1_dictionary_type_1a1423be356f4e0c7d28f2c52881decbed" kindref="member">name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;dictionary&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit_width()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_data_type_layout" kindref="compound">DataTypeLayout</ref><sp/>layout()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"></highlight></codeline>
<codeline lineno="1339" refid="classarrow_1_1_dictionary_type_1abd55c806e51e680671dfad192ea4b38c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/><ref refid="classarrow_1_1_dictionary_type_1abd55c806e51e680671dfad192ea4b38c" kindref="member">index_type</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>index_type_;<sp/>}</highlight></codeline>
<codeline lineno="1340" refid="classarrow_1_1_dictionary_type_1a2a945223452e821d8cf53b1ac433d100" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/><ref refid="classarrow_1_1_dictionary_type_1a2a945223452e821d8cf53b1ac433d100" kindref="member">value_type</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_type_;<sp/>}</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight></codeline>
<codeline lineno="1342" refid="classarrow_1_1_dictionary_type_1a59060e29adc4140d679e32210c3403ca" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_dictionary_type_1a59060e29adc4140d679e32210c3403ca" kindref="member">ordered</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ordered_;<sp/>}</highlight></codeline>
<codeline lineno="1343"><highlight class="normal"></highlight></codeline>
<codeline lineno="1344"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1345"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>ValidateParameters(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref>&amp;<sp/>index_type,</highlight></codeline>
<codeline lineno="1346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref>&amp;<sp/>value_type);</highlight></codeline>
<codeline lineno="1347"><highlight class="normal"></highlight></codeline>
<codeline lineno="1348"><highlight class="normal"><sp/><sp/>std::string<sp/>ComputeFingerprint()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1349"><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Must<sp/>be<sp/>an<sp/>integer<sp/>type<sp/>(not<sp/>currently<sp/>checked)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1351" refid="classarrow_1_1_dictionary_type_1a1fb69f89a030a26c0e310bc93f0a2801" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;DataType&gt;<sp/><ref refid="classarrow_1_1_dictionary_type_1a1fb69f89a030a26c0e310bc93f0a2801" kindref="member">index_type_</ref>;</highlight></codeline>
<codeline lineno="1352" refid="classarrow_1_1_dictionary_type_1ad0d167a940b0a6bf93d2fa2811919d47" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;DataType&gt;<sp/><ref refid="classarrow_1_1_dictionary_type_1ad0d167a940b0a6bf93d2fa2811919d47" kindref="member">value_type_</ref>;</highlight></codeline>
<codeline lineno="1353" refid="classarrow_1_1_dictionary_type_1aeeac593c8650f4ade4a3fdbb8431b232" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_dictionary_type_1aeeac593c8650f4ade4a3fdbb8431b232" kindref="member">ordered_</ref>;</highlight></codeline>
<codeline lineno="1354"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1355"><highlight class="normal"></highlight></codeline>
<codeline lineno="1357" refid="classarrow_1_1_dictionary_unifier" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_dictionary_unifier" kindref="compound">DictionaryUnifier</ref><sp/>{</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classarrow_1_1_dictionary_unifier" kindref="compound">DictionaryUnifier</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"></highlight></codeline>
<codeline lineno="1364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::unique_ptr&lt;DictionaryUnifier&gt;</ref>&gt;<sp/>Make(</highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;DataType&gt;<sp/>value_type,<sp/><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/>pool<sp/>=<sp/><ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">default_memory_pool</ref>());</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight></codeline>
<codeline lineno="1367"><highlight class="normal"><sp/><sp/><ref refid="macros_8h_1aa2ec0a506575823661e32d0be213b070" kindref="member">ARROW_DEPRECATED</ref>(</highlight><highlight class="stringliteral">&quot;Use<sp/>Result-returning<sp/>version&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>Make(<ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/>pool,<sp/>std::shared_ptr&lt;DataType&gt;<sp/>value_type,</highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::unique_ptr&lt;DictionaryUnifier&gt;*<sp/>out);</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"></highlight></codeline>
<codeline lineno="1372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>Unify(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&amp;<sp/><ref refid="group__type-factories_1ga36f61c68b2a04a9d179cb56ff1186c59" kindref="member">dictionary</ref>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>Unify(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&amp;<sp/>dictionary,</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Buffer&gt;*<sp/>out_transpose)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1382"><highlight class="normal"></highlight></codeline>
<codeline lineno="1386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>GetResult(std::shared_ptr&lt;DataType&gt;*<sp/>out_type,</highlight></codeline>
<codeline lineno="1387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Array&gt;*<sp/>out_dict)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1388"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1389"><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FieldRef</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1392"><highlight class="normal"></highlight></codeline>
<codeline lineno="1410" refid="classarrow_1_1_field_path" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_field_path" kindref="compound">FieldPath</ref><sp/>{</highlight></codeline>
<codeline lineno="1411"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1412"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_field_path" kindref="compound">FieldPath</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1413"><highlight class="normal"></highlight></codeline>
<codeline lineno="1414" refid="classarrow_1_1_field_path_1a76caea76a2f6f3f240b2f27b8cd2d740" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_field_path_1a76caea76a2f6f3f240b2f27b8cd2d740" kindref="member">FieldPath</ref>(std::vector&lt;int&gt;<sp/>indices)<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT<sp/>runtime/explicit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>indices_(<ref refid="namespacestd" kindref="compound">std</ref>::move(indices))<sp/>{}</highlight></codeline>
<codeline lineno="1416"><highlight class="normal"></highlight></codeline>
<codeline lineno="1417" refid="classarrow_1_1_field_path_1a29881fadb83e45f1f66840e0fd05453c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_field_path_1a29881fadb83e45f1f66840e0fd05453c" kindref="member">FieldPath</ref>(std::initializer_list&lt;int&gt;<sp/>indices)<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT<sp/>runtime/explicit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>indices_(<ref refid="namespacestd" kindref="compound">std</ref>::move(indices))<sp/>{}</highlight></codeline>
<codeline lineno="1419"><highlight class="normal"></highlight></codeline>
<codeline lineno="1420"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1421"><highlight class="normal"></highlight></codeline>
<codeline lineno="1422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>hash()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1423"><highlight class="normal"></highlight></codeline>
<codeline lineno="1424" refid="classarrow_1_1_field_path_1a2bbf4202aaff305dd8bf6b1c08979888" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!indices_.empty();<sp/>}</highlight></codeline>
<codeline lineno="1425" refid="classarrow_1_1_field_path_1ab35a0d0ffa5692d1a529d21ba624a8e3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_field_path_1ab35a0d0ffa5692d1a529d21ba624a8e3" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_field_path" kindref="compound">FieldPath</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>indices()<sp/>==<sp/>other.<ref refid="classarrow_1_1_field_path_1a5c1ec626c4e15d8d1a351bd147d51ec7" kindref="member">indices</ref>();<sp/>}</highlight></codeline>
<codeline lineno="1426" refid="classarrow_1_1_field_path_1a405519d45e08fa4687a2492e2fdc3f95" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_field_path_1a405519d45e08fa4687a2492e2fdc3f95" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_field_path" kindref="compound">FieldPath</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!(*</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>==<sp/>other);<sp/>}</highlight></codeline>
<codeline lineno="1427"><highlight class="normal"></highlight></codeline>
<codeline lineno="1428" refid="classarrow_1_1_field_path_1a5c1ec626c4e15d8d1a351bd147d51ec7" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;&amp;<sp/><ref refid="classarrow_1_1_field_path_1a5c1ec626c4e15d8d1a351bd147d51ec7" kindref="member">indices</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>indices_;<sp/>}</highlight></codeline>
<codeline lineno="1429" refid="classarrow_1_1_field_path_1ab438098b298a3f14e615cc389f399c26" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;&amp;<sp/><ref refid="classarrow_1_1_field_path_1ab438098b298a3f14e615cc389f399c26" kindref="member">indices</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>indices_;<sp/>}</highlight></codeline>
<codeline lineno="1430"><highlight class="normal"></highlight></codeline>
<codeline lineno="1432"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;Field&gt;</ref>&gt;<sp/>Get(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref>&amp;<sp/><ref refid="group__schema-factories_1gab03f1059d8776b1e85ee93c7cd03a078" kindref="member">schema</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1433"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;Field&gt;</ref>&gt;<sp/>Get(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_field" kindref="compound">Field</ref>&amp;<sp/><ref refid="group__schema-factories_1gaf9f57798b5abe44d560a52887f28894c" kindref="member">field</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1434"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;Field&gt;</ref>&gt;<sp/>Get(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref>&amp;<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">type</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1435"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;Field&gt;</ref>&gt;<sp/>Get(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacearrow_1a4599536b489227968fbdf37c1f9585cf" kindref="member">FieldVector</ref>&amp;<sp/>fields)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1436"><highlight class="normal"></highlight></codeline>
<codeline lineno="1438"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;Array&gt;</ref>&gt;<sp/>Get(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref>&amp;<sp/>batch)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1439"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;ChunkedArray&gt;</ref>&gt;<sp/>Get(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_table" kindref="compound">Table</ref>&amp;<sp/>table)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1440"><highlight class="normal"></highlight></codeline>
<codeline lineno="1442"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;Array&gt;</ref>&gt;<sp/>Get(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&amp;<sp/>array)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1443"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;ChunkedArray&gt;</ref>&gt;<sp/>Get(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_chunked_array" kindref="compound">ChunkedArray</ref>&amp;<sp/>array)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1444"><highlight class="normal"></highlight></codeline>
<codeline lineno="1445"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1446"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>indices_;</highlight></codeline>
<codeline lineno="1447"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight></codeline>
<codeline lineno="1482" refid="classarrow_1_1_field_ref" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_field_ref" kindref="compound">FieldRef</ref><sp/>{</highlight></codeline>
<codeline lineno="1483"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1484"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_field_ref" kindref="compound">FieldRef</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1485"><highlight class="normal"></highlight></codeline>
<codeline lineno="1490"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_field_ref" kindref="compound">FieldRef</ref>(<ref refid="classarrow_1_1_field_path" kindref="compound">FieldPath</ref><sp/>indices);<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT<sp/>runtime/explicit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1491"><highlight class="normal"></highlight></codeline>
<codeline lineno="1494" refid="classarrow_1_1_field_ref_1a184489f63e9ea5656c1978b135bcfb33" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_field_ref_1a184489f63e9ea5656c1978b135bcfb33" kindref="member">FieldRef</ref>(std::string<sp/>name)<sp/>:<sp/>impl_(<ref refid="namespacestd" kindref="compound">std</ref>::move(name))<sp/>{}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT<sp/>runtime/explicit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1495"><highlight class="normal"></highlight></codeline>
<codeline lineno="1497" refid="classarrow_1_1_field_ref_1ada3081176aebf294d36e69761c395fd0" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_field_ref_1ada3081176aebf294d36e69761c395fd0" kindref="member">FieldRef</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index)<sp/>:<sp/>impl_(<ref refid="classarrow_1_1_field_path" kindref="compound">FieldPath</ref>({index}))<sp/>{}<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT<sp/>runtime/explicit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1498"><highlight class="normal"></highlight></codeline>
<codeline lineno="1501"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A0,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A1,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>A&gt;</highlight></codeline>
<codeline lineno="1502" refid="classarrow_1_1_field_ref_1a34007097362d31fba751b9b7a4516b63" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_field_ref_1a34007097362d31fba751b9b7a4516b63" kindref="member">FieldRef</ref>(A0&amp;&amp;<sp/>a0,<sp/>A1&amp;&amp;<sp/>a1,<sp/>A&amp;&amp;...<sp/>a)<sp/>{</highlight></codeline>
<codeline lineno="1503"><highlight class="normal"><sp/><sp/><sp/><sp/>Flatten({</highlight><highlight class="comment">//<sp/>cpplint<sp/>thinks<sp/>the<sp/>following<sp/>are<sp/>constructor<sp/>decls</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_field_ref" kindref="compound">FieldRef</ref>(std::forward&lt;A0&gt;(a0)),<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT<sp/>runtime/explicit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_field_ref" kindref="compound">FieldRef</ref>(std::forward&lt;A1&gt;(a1)),<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT<sp/>runtime/explicit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_field_ref" kindref="compound">FieldRef</ref>(std::forward&lt;A&gt;(a))...});<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT<sp/>runtime/explicit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1507"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1508"><highlight class="normal"></highlight></codeline>
<codeline lineno="1526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;FieldRef&gt;</ref><sp/>FromDotPath(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>dot_path);</highlight></codeline>
<codeline lineno="1527"><highlight class="normal"></highlight></codeline>
<codeline lineno="1528" refid="classarrow_1_1_field_ref_1ad1d196aa0da401d87faebc252b725150" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_field_ref_1ad1d196aa0da401d87faebc252b725150" kindref="member">Equals</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_field_ref" kindref="compound">FieldRef</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl_<sp/>==<sp/>other.impl_;<sp/>}</highlight></codeline>
<codeline lineno="1529" refid="classarrow_1_1_field_ref_1aa3ec4f70e37c0f65e269a2f7f10c99ce" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_field_ref_1aa3ec4f70e37c0f65e269a2f7f10c99ce" kindref="member">operator==</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_field_ref" kindref="compound">FieldRef</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Equals(other);<sp/>}</highlight></codeline>
<codeline lineno="1530"><highlight class="normal"></highlight></codeline>
<codeline lineno="1531"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1532"><highlight class="normal"></highlight></codeline>
<codeline lineno="1533"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>hash()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1534"><highlight class="normal"></highlight></codeline>
<codeline lineno="1535" refid="classarrow_1_1_field_ref_1ae33cf0296994a6fb6284c4e11027d95a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_field_ref_1ae33cf0296994a6fb6284c4e11027d95a" kindref="member">IsFieldPath</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>util::holds_alternative&lt;FieldPath&gt;(impl_);<sp/>}</highlight></codeline>
<codeline lineno="1536" refid="classarrow_1_1_field_ref_1a56d1b8aeab2722bca9800b27be338b52" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_field_ref_1a56d1b8aeab2722bca9800b27be338b52" kindref="member">IsName</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>util::holds_alternative&lt;std::string&gt;(impl_);<sp/>}</highlight></codeline>
<codeline lineno="1537" refid="classarrow_1_1_field_ref_1aad7e05c92cb4a2a520335b477f1af51e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_field_ref_1aad7e05c92cb4a2a520335b477f1af51e" kindref="member">IsNested</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsName())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1539"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(IsFieldPath())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>util::get&lt;FieldPath&gt;(impl_).indices().size()<sp/>&gt;<sp/>1;</highlight></codeline>
<codeline lineno="1540"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1541"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1542"><highlight class="normal"></highlight></codeline>
<codeline lineno="1544"><highlight class="normal"><sp/><sp/>std::vector&lt;FieldPath&gt;<sp/>FindAll(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref>&amp;<sp/><ref refid="group__schema-factories_1gab03f1059d8776b1e85ee93c7cd03a078" kindref="member">schema</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1545"><highlight class="normal"><sp/><sp/>std::vector&lt;FieldPath&gt;<sp/>FindAll(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_field" kindref="compound">Field</ref>&amp;<sp/><ref refid="group__schema-factories_1gaf9f57798b5abe44d560a52887f28894c" kindref="member">field</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1546"><highlight class="normal"><sp/><sp/>std::vector&lt;FieldPath&gt;<sp/>FindAll(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref>&amp;<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">type</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1547"><highlight class="normal"><sp/><sp/>std::vector&lt;FieldPath&gt;<sp/>FindAll(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacearrow_1a4599536b489227968fbdf37c1f9585cf" kindref="member">FieldVector</ref>&amp;<sp/>fields)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1548"><highlight class="normal"></highlight></codeline>
<codeline lineno="1550"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1551" refid="classarrow_1_1_field_ref_1a1905a993f22a735911a7903e746f05e9" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_field_ref_1a1905a993f22a735911a7903e746f05e9" kindref="member">CheckNonEmpty</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;FieldPath&gt;&amp;<sp/>matches,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>root)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matches.empty())<sp/>{</highlight></codeline>
<codeline lineno="1553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1aa388393c060f3b44316876a630190576" kindref="member">Status::Invalid</ref>(</highlight><highlight class="stringliteral">&quot;No<sp/>match<sp/>for<sp/>&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;<sp/>in<sp/>&quot;</highlight><highlight class="normal">,<sp/>root.ToString());</highlight></codeline>
<codeline lineno="1554"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1a5c0b0031db6eeec3dcc70485d24cfe03" kindref="member">Status::OK</ref>();</highlight></codeline>
<codeline lineno="1556"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1557"><highlight class="normal"></highlight></codeline>
<codeline lineno="1559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1560" refid="classarrow_1_1_field_ref_1a993d0872b2c308ed541d943fc785129d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_field_ref_1a993d0872b2c308ed541d943fc785129d" kindref="member">CheckNonMultiple</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;FieldPath&gt;&amp;<sp/>matches,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>root)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1561"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matches.size()<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="1562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1aa388393c060f3b44316876a630190576" kindref="member">Status::Invalid</ref>(</highlight><highlight class="stringliteral">&quot;Multiple<sp/>matches<sp/>for<sp/>&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;<sp/>in<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="1563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>root.ToString());</highlight></codeline>
<codeline lineno="1564"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1a5c0b0031db6eeec3dcc70485d24cfe03" kindref="member">Status::OK</ref>();</highlight></codeline>
<codeline lineno="1566"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1567"><highlight class="normal"></highlight></codeline>
<codeline lineno="1570"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1571" refid="classarrow_1_1_field_ref_1a3a46e4e8f9041e4ffa5bb34e50ad93b4" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;FieldPath&gt;</ref><sp/><ref refid="classarrow_1_1_field_ref_1a3a46e4e8f9041e4ffa5bb34e50ad93b4" kindref="member">FindOne</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>root)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1572"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>matches<sp/>=<sp/>FindAll(root);</highlight></codeline>
<codeline lineno="1573"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(CheckNonEmpty(matches,<sp/>root));</highlight></codeline>
<codeline lineno="1574"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(CheckNonMultiple(matches,<sp/>root));</highlight></codeline>
<codeline lineno="1575"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(matches[0]);</highlight></codeline>
<codeline lineno="1576"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1577"><highlight class="normal"></highlight></codeline>
<codeline lineno="1581"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1582" refid="classarrow_1_1_field_ref_1a7663e6dcd2b692877ca071f126ac22c1" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;FieldPath&gt;</ref><sp/><ref refid="classarrow_1_1_field_ref_1a7663e6dcd2b692877ca071f126ac22c1" kindref="member">FindOneOrNone</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>root)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1583"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>matches<sp/>=<sp/>FindAll(root);</highlight></codeline>
<codeline lineno="1584"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(CheckNonMultiple(matches,<sp/>root));</highlight></codeline>
<codeline lineno="1585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(matches.empty())<sp/>{</highlight></codeline>
<codeline lineno="1586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_field_path" kindref="compound">FieldPath</ref>();</highlight></codeline>
<codeline lineno="1587"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(matches[0]);</highlight></codeline>
<codeline lineno="1589"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1590"><highlight class="normal"></highlight></codeline>
<codeline lineno="1591"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1592" refid="classarrow_1_1_field_ref_1a45ff0400d878f4a4b928860973bf7c89" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_field_ref_1a45ff0400d878f4a4b928860973bf7c89" kindref="member">GetType</ref><sp/>=<sp/>decltype(std::declval&lt;FieldPath&gt;().Get(std::declval&lt;T&gt;()).ValueOrDie());</highlight></codeline>
<codeline lineno="1593"><highlight class="normal"></highlight></codeline>
<codeline lineno="1595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1596" refid="classarrow_1_1_field_ref_1a658301f688f2cbeb9fad49c7560ad618" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;GetType&lt;T&gt;&gt;<sp/><ref refid="classarrow_1_1_field_ref_1a658301f688f2cbeb9fad49c7560ad618" kindref="member">GetAll</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>root)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1597"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;GetType&lt;T&gt;&gt;<sp/>out;</highlight></codeline>
<codeline lineno="1598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>match<sp/>:<sp/>FindAll(root))<sp/>{</highlight></codeline>
<codeline lineno="1599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out.push_back(match.Get(root).ValueOrDie());</highlight></codeline>
<codeline lineno="1600"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="1602"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1603"><highlight class="normal"></highlight></codeline>
<codeline lineno="1606"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1607" refid="classarrow_1_1_field_ref_1a59b98c599b14aca11a32e2cb3082f583" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;GetType&lt;T&gt;</ref>&gt;<sp/><ref refid="classarrow_1_1_field_ref_1a59b98c599b14aca11a32e2cb3082f583" kindref="member">GetOne</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>root)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1608"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="result_8h_1aaf9efe9debc83022fad249a0fa56e680" kindref="member">ARROW_ASSIGN_OR_RAISE</ref>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>match,<sp/>FindOne(root));</highlight></codeline>
<codeline lineno="1609"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>match.Get(root).ValueOrDie();</highlight></codeline>
<codeline lineno="1610"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1611"><highlight class="normal"></highlight></codeline>
<codeline lineno="1614"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="1615" refid="classarrow_1_1_field_ref_1a6687be25f7b918d83439f33f2969fdc3" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;GetType&lt;T&gt;</ref>&gt;<sp/><ref refid="classarrow_1_1_field_ref_1a6687be25f7b918d83439f33f2969fdc3" kindref="member">GetOneOrNone</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T&amp;<sp/>root)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1616"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="result_8h_1aaf9efe9debc83022fad249a0fa56e680" kindref="member">ARROW_ASSIGN_OR_RAISE</ref>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>match,<sp/>FindOneOrNone(root));</highlight></codeline>
<codeline lineno="1617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(match)<sp/>{</highlight></codeline>
<codeline lineno="1618"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>match.Get(root).ValueOrDie();</highlight></codeline>
<codeline lineno="1619"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>;</highlight></codeline>
<codeline lineno="1621"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1622"><highlight class="normal"></highlight></codeline>
<codeline lineno="1623"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Flatten(std::vector&lt;FieldRef&gt;<sp/>children);</highlight></codeline>
<codeline lineno="1625"><highlight class="normal"></highlight></codeline>
<codeline lineno="1626"><highlight class="normal"><sp/><sp/>util::variant&lt;FieldPath,<sp/>std::string,<sp/>std::vector&lt;FieldRef&gt;&gt;<sp/>impl_;</highlight></codeline>
<codeline lineno="1627"><highlight class="normal"></highlight></codeline>
<codeline lineno="1628"><highlight class="normal"><sp/><sp/>ARROW_EXPORT<sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintTo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_field_ref" kindref="compound">FieldRef</ref>&amp;<sp/>ref,<sp/>std::ostream*<sp/>os);</highlight></codeline>
<codeline lineno="1629"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1630"><highlight class="normal"></highlight></codeline>
<codeline lineno="1631"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1632"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Schema</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1633"><highlight class="normal"></highlight></codeline>
<codeline lineno="1637" refid="classarrow_1_1_schema" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>detail::Fingerprintable,</highlight></codeline>
<codeline lineno="1638"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1util_1_1_equality_comparable" kindref="compound">util::EqualityComparable</ref>&lt;Schema&gt;,</highlight></codeline>
<codeline lineno="1639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1util_1_1_to_string_ostreamable" kindref="compound">util::ToStringOstreamable</ref>&lt;Schema&gt;<sp/>{</highlight></codeline>
<codeline lineno="1640"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1641"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref>(std::vector&lt;std::shared_ptr&lt;Field&gt;&gt;<sp/>fields,</highlight></codeline>
<codeline lineno="1642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;const<sp/>KeyValueMetadata&gt;<sp/>metadata<sp/>=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>);</highlight></codeline>
<codeline lineno="1643"><highlight class="normal"></highlight></codeline>
<codeline lineno="1644"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref>&amp;);</highlight></codeline>
<codeline lineno="1645"><highlight class="normal"></highlight></codeline>
<codeline lineno="1646"><highlight class="normal"><sp/><sp/>~<ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref>()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1647"><highlight class="normal"></highlight></codeline>
<codeline lineno="1649"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Equals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref>&amp;<sp/>other,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>check_metadata<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1650"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Equals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Schema&gt;&amp;<sp/>other,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>check_metadata<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1651"><highlight class="normal"></highlight></codeline>
<codeline lineno="1653"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_fields()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1654"><highlight class="normal"></highlight></codeline>
<codeline lineno="1656"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Field&gt;&amp;<sp/><ref refid="group__schema-factories_1gaf9f57798b5abe44d560a52887f28894c" kindref="member">field</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1657"><highlight class="normal"></highlight></codeline>
<codeline lineno="1658"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;Field&gt;&gt;&amp;<sp/>fields()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1659"><highlight class="normal"></highlight></codeline>
<codeline lineno="1660"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/>field_names()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1661"><highlight class="normal"></highlight></codeline>
<codeline lineno="1663"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Field&gt;<sp/>GetFieldByName(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1664"><highlight class="normal"></highlight></codeline>
<codeline lineno="1666"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Field&gt;&gt;<sp/>GetAllFieldsByName(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1667"><highlight class="normal"></highlight></codeline>
<codeline lineno="1669"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>GetFieldIndex(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1670"><highlight class="normal"></highlight></codeline>
<codeline lineno="1672"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>GetAllFieldIndices(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1673"><highlight class="normal"></highlight></codeline>
<codeline lineno="1675"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>CanReferenceFieldsByNames(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;&amp;<sp/>names)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1676"><highlight class="normal"></highlight></codeline>
<codeline lineno="1680"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;const<sp/>KeyValueMetadata&gt;<sp/>metadata()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1681"><highlight class="normal"></highlight></codeline>
<codeline lineno="1685"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>show_metadata<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1686"><highlight class="normal"></highlight></codeline>
<codeline lineno="1687"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;Schema&gt;</ref>&gt;<sp/>AddField(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,</highlight></codeline>
<codeline lineno="1688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Field&gt;&amp;<sp/>field)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1689"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;Schema&gt;</ref>&gt;<sp/>RemoveField(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1690"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;Schema&gt;</ref>&gt;<sp/>SetField(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,</highlight></codeline>
<codeline lineno="1691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Field&gt;&amp;<sp/>field)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1692"><highlight class="normal"></highlight></codeline>
<codeline lineno="1693"><highlight class="normal"><sp/><sp/><ref refid="macros_8h_1aa2ec0a506575823661e32d0be213b070" kindref="member">ARROW_DEPRECATED</ref>(</highlight><highlight class="stringliteral">&quot;Use<sp/>Result-returning<sp/>version&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1694"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>AddField(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Field&gt;&amp;<sp/>field,</highlight></codeline>
<codeline lineno="1695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Schema&gt;*<sp/>out)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1696"><highlight class="normal"><sp/><sp/><ref refid="macros_8h_1aa2ec0a506575823661e32d0be213b070" kindref="member">ARROW_DEPRECATED</ref>(</highlight><highlight class="stringliteral">&quot;Use<sp/>Result-returning<sp/>version&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1697"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>RemoveField(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>std::shared_ptr&lt;Schema&gt;*<sp/>out)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1698"><highlight class="normal"><sp/><sp/><ref refid="macros_8h_1aa2ec0a506575823661e32d0be213b070" kindref="member">ARROW_DEPRECATED</ref>(</highlight><highlight class="stringliteral">&quot;Use<sp/>Result-returning<sp/>version&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1699"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>SetField(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Field&gt;&amp;<sp/>field,</highlight></codeline>
<codeline lineno="1700"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Schema&gt;*<sp/>out)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1701"><highlight class="normal"></highlight></codeline>
<codeline lineno="1706"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Schema&gt;<sp/>WithMetadata(</highlight></codeline>
<codeline lineno="1707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;const<sp/>KeyValueMetadata&gt;&amp;<sp/>metadata)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1708"><highlight class="normal"></highlight></codeline>
<codeline lineno="1710"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Schema&gt;<sp/>RemoveMetadata()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1711"><highlight class="normal"></highlight></codeline>
<codeline lineno="1713"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HasMetadata()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1714"><highlight class="normal"></highlight></codeline>
<codeline lineno="1716"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HasDistinctFieldNames()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1717"><highlight class="normal"></highlight></codeline>
<codeline lineno="1718"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1719"><highlight class="normal"><sp/><sp/>std::string<sp/>ComputeFingerprint()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1720"><highlight class="normal"><sp/><sp/>std::string<sp/>ComputeMetadataFingerprint()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1721"><highlight class="normal"></highlight></codeline>
<codeline lineno="1722"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1723"><highlight class="normal"><sp/><sp/>ARROW_EXPORT<sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintTo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref>&amp;<sp/>s,<sp/>std::ostream*<sp/>os);</highlight></codeline>
<codeline lineno="1724"><highlight class="normal"></highlight></codeline>
<codeline lineno="1725"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Impl;</highlight></codeline>
<codeline lineno="1726"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;Impl&gt;<sp/>impl_;</highlight></codeline>
<codeline lineno="1727"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1728"><highlight class="normal"></highlight></codeline>
<codeline lineno="1729"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1730"><highlight class="normal"></highlight></codeline>
<codeline lineno="1736" refid="classarrow_1_1_schema_builder" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_schema_builder" kindref="compound">SchemaBuilder</ref><sp/>{</highlight></codeline>
<codeline lineno="1737"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1738"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Indicate<sp/>how<sp/>field<sp/>conflict(s)<sp/>should<sp/>be<sp/>resolved<sp/>when<sp/>building<sp/>a<sp/>schema.<sp/>A</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1739"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>conflict<sp/>arise<sp/>when<sp/>a<sp/>field<sp/>is<sp/>added<sp/>to<sp/>the<sp/>builder<sp/>and<sp/>one<sp/>or<sp/>more<sp/>field(s)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1740"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>same<sp/>name<sp/>already<sp/>exists.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1741" refid="classarrow_1_1_schema_builder_1a6857f64910ab8b3f550a99c5bed91903" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_schema_builder_1a6857f64910ab8b3f550a99c5bed91903" kindref="member">ConflictPolicy</ref><sp/>{</highlight></codeline>
<codeline lineno="1742"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Ignore<sp/>the<sp/>conflict<sp/>and<sp/>append<sp/>the<sp/>field.<sp/>This<sp/>is<sp/>the<sp/>default<sp/>behavior<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Schema<sp/>constructor<sp/>and<sp/>the<sp/>`arrow::schema`<sp/>factory<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1744" refid="classarrow_1_1_schema_builder_1a6857f64910ab8b3f550a99c5bed91903a424d0d713d59bc95f2590e6ef0e2a5c7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CONFLICT_APPEND<sp/>=<sp/>0,</highlight></codeline>
<codeline lineno="1745"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Keep<sp/>the<sp/>existing<sp/>field<sp/>and<sp/>ignore<sp/>the<sp/>newer<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1746" refid="classarrow_1_1_schema_builder_1a6857f64910ab8b3f550a99c5bed91903a941b35990a200fee00b81a8dff84f064" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_schema_builder_1a6857f64910ab8b3f550a99c5bed91903a941b35990a200fee00b81a8dff84f064" kindref="member">CONFLICT_IGNORE</ref>,</highlight></codeline>
<codeline lineno="1747"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Replace<sp/>the<sp/>existing<sp/>field<sp/>with<sp/>the<sp/>newer<sp/>one.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1748" refid="classarrow_1_1_schema_builder_1a6857f64910ab8b3f550a99c5bed91903af2db8becf715530b227b2a974ca18bf6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_schema_builder_1a6857f64910ab8b3f550a99c5bed91903af2db8becf715530b227b2a974ca18bf6" kindref="member">CONFLICT_REPLACE</ref>,</highlight></codeline>
<codeline lineno="1749"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Merge<sp/>the<sp/>fields.<sp/>The<sp/>merging<sp/>behavior<sp/>can<sp/>be<sp/>controlled<sp/>by<sp/>`Field::MergeOptions`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>specified<sp/>at<sp/>construction<sp/>time.<sp/>Also<sp/>see<sp/>documentation<sp/>of<sp/>`Field::MergeWith`.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1751" refid="classarrow_1_1_schema_builder_1a6857f64910ab8b3f550a99c5bed91903ad3fd6f8b59d4a878d69feff658f3d8a4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_schema_builder_1a6857f64910ab8b3f550a99c5bed91903ad3fd6f8b59d4a878d69feff658f3d8a4" kindref="member">CONFLICT_MERGE</ref>,</highlight></codeline>
<codeline lineno="1752"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Refuse<sp/>the<sp/>new<sp/>field<sp/>and<sp/>error<sp/>out.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1753" refid="classarrow_1_1_schema_builder_1a6857f64910ab8b3f550a99c5bed91903ab61b85ae69bbe2db271dfa8005e66a6b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>CONFLICT_ERROR</highlight></codeline>
<codeline lineno="1754"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="1755"><highlight class="normal"></highlight></codeline>
<codeline lineno="1758"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_schema_builder" kindref="compound">SchemaBuilder</ref>(</highlight></codeline>
<codeline lineno="1759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_schema_builder_1a6857f64910ab8b3f550a99c5bed91903" kindref="member">ConflictPolicy</ref><sp/>conflict_policy<sp/>=<sp/>CONFLICT_APPEND,</highlight></codeline>
<codeline lineno="1760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_field_1_1_merge_options" kindref="compound">Field::MergeOptions</ref><sp/>field_merge_options<sp/>=<sp/><ref refid="structarrow_1_1_field_1_1_merge_options_1aad6ec10fe86793101bf688bbf9c9ad96" kindref="member">Field::MergeOptions::Defaults</ref>());</highlight></codeline>
<codeline lineno="1763"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_schema_builder" kindref="compound">SchemaBuilder</ref>(</highlight></codeline>
<codeline lineno="1764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Field&gt;&gt;<sp/>fields,</highlight></codeline>
<codeline lineno="1765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_schema_builder_1a6857f64910ab8b3f550a99c5bed91903" kindref="member">ConflictPolicy</ref><sp/>conflict_policy<sp/>=<sp/>CONFLICT_APPEND,</highlight></codeline>
<codeline lineno="1766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_field_1_1_merge_options" kindref="compound">Field::MergeOptions</ref><sp/>field_merge_options<sp/>=<sp/><ref refid="structarrow_1_1_field_1_1_merge_options_1aad6ec10fe86793101bf688bbf9c9ad96" kindref="member">Field::MergeOptions::Defaults</ref>());</highlight></codeline>
<codeline lineno="1769"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_schema_builder" kindref="compound">SchemaBuilder</ref>(</highlight></codeline>
<codeline lineno="1770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Schema&gt;&amp;<sp/>schema,</highlight></codeline>
<codeline lineno="1771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_schema_builder_1a6857f64910ab8b3f550a99c5bed91903" kindref="member">ConflictPolicy</ref><sp/>conflict_policy<sp/>=<sp/>CONFLICT_APPEND,</highlight></codeline>
<codeline lineno="1772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_field_1_1_merge_options" kindref="compound">Field::MergeOptions</ref><sp/>field_merge_options<sp/>=<sp/><ref refid="structarrow_1_1_field_1_1_merge_options_1aad6ec10fe86793101bf688bbf9c9ad96" kindref="member">Field::MergeOptions::Defaults</ref>());</highlight></codeline>
<codeline lineno="1773"><highlight class="normal"></highlight></codeline>
<codeline lineno="1775"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_schema_builder_1a6857f64910ab8b3f550a99c5bed91903" kindref="member">ConflictPolicy</ref><sp/>policy()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1776"><highlight class="normal"></highlight></codeline>
<codeline lineno="1778"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetPolicy(<ref refid="classarrow_1_1_schema_builder_1a6857f64910ab8b3f550a99c5bed91903" kindref="member">ConflictPolicy</ref><sp/>resolution);</highlight></codeline>
<codeline lineno="1779"><highlight class="normal"></highlight></codeline>
<codeline lineno="1784"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>AddField(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Field&gt;&amp;<sp/>field);</highlight></codeline>
<codeline lineno="1785"><highlight class="normal"></highlight></codeline>
<codeline lineno="1790"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>AddFields(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;Field&gt;&gt;&amp;<sp/>fields);</highlight></codeline>
<codeline lineno="1791"><highlight class="normal"></highlight></codeline>
<codeline lineno="1796"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>AddSchema(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Schema&gt;&amp;<sp/>schema);</highlight></codeline>
<codeline lineno="1797"><highlight class="normal"></highlight></codeline>
<codeline lineno="1802"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>AddSchemas(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;Schema&gt;&gt;&amp;<sp/>schemas);</highlight></codeline>
<codeline lineno="1803"><highlight class="normal"></highlight></codeline>
<codeline lineno="1804"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>AddMetadata(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_key_value_metadata" kindref="compound">KeyValueMetadata</ref>&amp;<sp/>metadata);</highlight></codeline>
<codeline lineno="1805"><highlight class="normal"></highlight></codeline>
<codeline lineno="1812"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;Schema&gt;</ref>&gt;<sp/>Finish()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1813"><highlight class="normal"></highlight></codeline>
<codeline lineno="1815"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;Schema&gt;</ref>&gt;<sp/>Merge(</highlight></codeline>
<codeline lineno="1816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;Schema&gt;&gt;&amp;<sp/>schemas,</highlight></codeline>
<codeline lineno="1817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_schema_builder_1a6857f64910ab8b3f550a99c5bed91903" kindref="member">ConflictPolicy</ref><sp/>policy<sp/>=<sp/>CONFLICT_MERGE);</highlight></codeline>
<codeline lineno="1818"><highlight class="normal"></highlight></codeline>
<codeline lineno="1820"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>AreCompatible(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;Schema&gt;&gt;&amp;<sp/>schemas,</highlight></codeline>
<codeline lineno="1821"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_schema_builder_1a6857f64910ab8b3f550a99c5bed91903" kindref="member">ConflictPolicy</ref><sp/>policy<sp/>=<sp/>CONFLICT_MERGE);</highlight></codeline>
<codeline lineno="1822"><highlight class="normal"></highlight></codeline>
<codeline lineno="1824"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Reset();</highlight></codeline>
<codeline lineno="1825"><highlight class="normal"></highlight></codeline>
<codeline lineno="1826"><highlight class="normal"><sp/><sp/>~<ref refid="classarrow_1_1_schema_builder" kindref="compound">SchemaBuilder</ref>();</highlight></codeline>
<codeline lineno="1827"><highlight class="normal"></highlight></codeline>
<codeline lineno="1828"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1829"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Impl;</highlight></codeline>
<codeline lineno="1830"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;Impl&gt;<sp/>impl_;</highlight></codeline>
<codeline lineno="1831"><highlight class="normal"></highlight></codeline>
<codeline lineno="1832"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>AppendField(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Field&gt;&amp;<sp/>field);</highlight></codeline>
<codeline lineno="1833"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1834"><highlight class="normal"></highlight></codeline>
<codeline lineno="1850"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="1851"><highlight class="normal"><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;Schema&gt;</ref>&gt;<sp/><ref refid="namespacearrow_1abc8d7384b0a61a9a15cfdca6c39c4ded" kindref="member">UnifySchemas</ref>(</highlight></codeline>
<codeline lineno="1852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;Schema&gt;&gt;&amp;<sp/>schemas,</highlight></codeline>
<codeline lineno="1853"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_field_1_1_merge_options" kindref="compound">Field::MergeOptions</ref><sp/>field_merge_options<sp/>=<sp/><ref refid="structarrow_1_1_field_1_1_merge_options_1aad6ec10fe86793101bf688bbf9c9ad96" kindref="member">Field::MergeOptions::Defaults</ref>());</highlight></codeline>
<codeline lineno="1854"><highlight class="normal"></highlight></codeline>
<codeline lineno="1855"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>arrow</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/arrow/cpp/src/arrow/type.h"/>
  </compounddef>
</doxygen>
