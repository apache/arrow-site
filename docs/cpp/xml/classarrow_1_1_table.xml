<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_table" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>arrow::Table</compoundname>
    <includes refid="table_8h" local="no">arrow/table.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="group__concat-tables_1ga40375f7767ae6caea748d87e53aacb45" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Schema&gt; arrow::Table::schema_</definition>
        <argsstring></argsstring>
        <name>schema_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="420" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="420" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__concat-tables_1ga7b7b895c038e468dac1be8d27722ffa6" prot="protected" static="no" mutable="no">
        <type>int64_t</type>
        <definition>int64_t arrow::Table::num_rows_</definition>
        <argsstring></argsstring>
        <name>num_rows_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="421" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="421" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="group__concat-tables_1ga7ea1eed4818941b9b1eb98381e1b9690" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual arrow::Table::~Table</definition>
        <argsstring>()=default</argsstring>
        <name>~Table</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="223" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga8d8626acf4d00e2ac439c4f1cc7a054a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Schema&gt; arrow::Table::schema</definition>
        <argsstring>() const</argsstring>
        <name>schema</name>
        <briefdescription>
<para>Return the table schema. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="281" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="281" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga8096b001837e7ad277e00b50226fbbe6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_chunked_array" kindref="compound">ChunkedArray</ref> &gt;</type>
        <definition>virtual std::shared_ptr&lt;ChunkedArray&gt; arrow::Table::column</definition>
        <argsstring>(int i) const =0</argsstring>
        <name>column</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Return a column by index. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="284" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga89c30f4eb8b98a5ab126dc404c873bed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_chunked_array" kindref="compound">ChunkedArray</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;ChunkedArray&gt; &gt; arrow::Table::columns</definition>
        <argsstring>() const</argsstring>
        <name>columns</name>
        <briefdescription>
<para>Return vector of all columns for table. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="287" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1gad9df57298bb216a45d106d77ffa06def" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Field&gt; arrow::Table::field</definition>
        <argsstring>(int i) const</argsstring>
        <name>field</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Return a column&apos;s field by index. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="290" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="290" bodyend="290"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga82dfb0b822b42639fa95344abc4b0d26" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;Field&gt; &gt; arrow::Table::fields</definition>
        <argsstring>() const</argsstring>
        <name>fields</name>
        <briefdescription>
<para>Return vector of all fields for table. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="293" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga8fb8285ac5af45a9e931564edb4938fc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> &gt;</type>
        <definition>virtual std::shared_ptr&lt;Table&gt; arrow::Table::Slice</definition>
        <argsstring>(int64_t offset, int64_t length) const =0</argsstring>
        <name>Slice</name>
        <param>
          <type>int64_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Construct a zero-copy slice of the table with the indicated offset and length. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the first row in the constructed slice </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of rows of the slice. If there are not enough rows in the table, the length will be adjusted accordingly</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a new object wrapped in std::shared_ptr&lt;Table&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="304" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga3948de704790a778f8568f22e08bca55" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Table&gt; arrow::Table::Slice</definition>
        <argsstring>(int64_t offset) const</argsstring>
        <name>Slice</name>
        <param>
          <type>int64_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Slice from first row at offset until end of the table. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="307" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="307" bodyend="307"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1gacb02268cc5b63206615c88f26194b88c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_chunked_array" kindref="compound">ChunkedArray</ref> &gt;</type>
        <definition>std::shared_ptr&lt;ChunkedArray&gt; arrow::Table::GetColumnByName</definition>
        <argsstring>(const std::string &amp;name) const</argsstring>
        <name>GetColumnByName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Return a column by name. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>field name </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> or null if no field was found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="312" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="312" bodyend="315"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1gabb51bfae47ef4cfc387b45e70c8bf288" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> &gt; &gt;</type>
        <definition>virtual Result&lt;std::shared_ptr&lt;Table&gt; &gt; arrow::Table::RemoveColumn</definition>
        <argsstring>(int i) const =0</argsstring>
        <name>RemoveColumn</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Remove column from the table, producing a new <ref refid="classarrow_1_1_table" kindref="compound">Table</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="318" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga95286e58ddd506b8be041b9c5ce55097" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::Table::RemoveColumn</definition>
        <argsstring>(int i, std::shared_ptr&lt; Table &gt; *out) const</argsstring>
        <name>RemoveColumn</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="321" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga69d4bb372350e0ea6df4f18c6e0024fe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> &gt; &gt;</type>
        <definition>virtual Result&lt;std::shared_ptr&lt;Table&gt; &gt; arrow::Table::AddColumn</definition>
        <argsstring>(int i, std::shared_ptr&lt; Field &gt; field_arg, std::shared_ptr&lt; ChunkedArray &gt; column) const =0</argsstring>
        <name>AddColumn</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt;</type>
          <declname>field_arg</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_chunked_array" kindref="compound">ChunkedArray</ref> &gt;</type>
          <declname>column</declname>
        </param>
        <briefdescription>
<para>Add column to the table, producing a new <ref refid="classarrow_1_1_table" kindref="compound">Table</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="324" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga9a4052b9ed361b073de0686533c148bb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::Table::AddColumn</definition>
        <argsstring>(int i, std::shared_ptr&lt; Field &gt; field_arg, std::shared_ptr&lt; ChunkedArray &gt; column, std::shared_ptr&lt; Table &gt; *out) const</argsstring>
        <name>AddColumn</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt;</type>
          <declname>field_arg</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_chunked_array" kindref="compound">ChunkedArray</ref> &gt;</type>
          <declname>column</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="329" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga586dc478193d88f31afad1a6a17b991d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> &gt; &gt;</type>
        <definition>virtual Result&lt;std::shared_ptr&lt;Table&gt; &gt; arrow::Table::SetColumn</definition>
        <argsstring>(int i, std::shared_ptr&lt; Field &gt; field_arg, std::shared_ptr&lt; ChunkedArray &gt; column) const =0</argsstring>
        <name>SetColumn</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt;</type>
          <declname>field_arg</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_chunked_array" kindref="compound">ChunkedArray</ref> &gt;</type>
          <declname>column</declname>
        </param>
        <briefdescription>
<para>Replace a column in the table, producing a new <ref refid="classarrow_1_1_table" kindref="compound">Table</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="334" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga5254d32e08c04a0524eba75acbc7cd96" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::Table::SetColumn</definition>
        <argsstring>(int i, std::shared_ptr&lt; Field &gt; field_arg, std::shared_ptr&lt; ChunkedArray &gt; column, std::shared_ptr&lt; Table &gt; *out) const</argsstring>
        <name>SetColumn</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt;</type>
          <declname>field_arg</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_chunked_array" kindref="compound">ChunkedArray</ref> &gt;</type>
          <declname>column</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="339" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga1a280d02d926b10484a2a4631c7fa305" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; arrow::Table::ColumnNames</definition>
        <argsstring>() const</argsstring>
        <name>ColumnNames</name>
        <briefdescription>
<para>Return names of all columns. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="344" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1gaf89e68f611db6fc4b2680d272386f776" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;Table&gt; &gt; arrow::Table::RenameColumns</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;names) const</argsstring>
        <name>RenameColumns</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>names</declname>
        </param>
        <briefdescription>
<para>Rename columns with provided names. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="347" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga2bf58206871ca43cbac00e3df4aeea4c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::Table::RenameColumns</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;names, std::shared_ptr&lt; Table &gt; *out) const</argsstring>
        <name>RenameColumns</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>names</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="351" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga53f5891d984e4652f5482096ea32e6d5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> &gt;</type>
        <definition>virtual std::shared_ptr&lt;Table&gt; arrow::Table::ReplaceSchemaMetadata</definition>
        <argsstring>(const std::shared_ptr&lt; const KeyValueMetadata &gt; &amp;metadata) const =0</argsstring>
        <name>ReplaceSchemaMetadata</name>
        <param>
          <type>const std::shared_ptr&lt; const <ref refid="classarrow_1_1_key_value_metadata" kindref="compound">KeyValueMetadata</ref> &gt; &amp;</type>
          <declname>metadata</declname>
        </param>
        <briefdescription>
<para>Replace schema key-value metadata with new metadata (EXPERIMENTAL) </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>0.5.0</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">metadata</parametername>
</parameternamelist>
<parameterdescription>
<para>new <ref refid="classarrow_1_1_key_value_metadata" kindref="compound">KeyValueMetadata</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="359" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga86c741ce1d31a4d14a14e1808f0bf33a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> &gt; &gt;</type>
        <definition>virtual Result&lt;std::shared_ptr&lt;Table&gt; &gt; arrow::Table::Flatten</definition>
        <argsstring>(MemoryPool *pool=default_memory_pool()) const =0</argsstring>
        <name>Flatten</name>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
          <defval><ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">default_memory_pool</ref>()</defval>
        </param>
        <briefdescription>
<para>Flatten the table, producing a new <ref refid="classarrow_1_1_table" kindref="compound">Table</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Any column with a struct type will be flattened into multiple columns</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool for buffer allocations, if any </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="366" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1gad539133daaafc3882aa7bcd2e0497e15" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::Table::Flatten</definition>
        <argsstring>(MemoryPool *pool, std::shared_ptr&lt; Table &gt; *out) const</argsstring>
        <name>Flatten</name>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="370" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga952001529c848c932349b3198d98b680" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arrow::Table::ToString</definition>
        <argsstring>() const</argsstring>
        <name>ToString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>PrettyPrint representation suitable for debugging </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="373" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga4a93ccc812c7ee9992bc9138b53895e0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>virtual Status arrow::Table::Validate</definition>
        <argsstring>() const =0</argsstring>
        <name>Validate</name>
        <briefdescription>
<para>Perform cheap validation checks to determine obvious inconsistencies within the table&apos;s schema and internal data. </para>        </briefdescription>
        <detaileddescription>
<para>This is O(k*m) where k is the total number of field descendents, and m is the number of chunks.</para><para><simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="382" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga5796527d5848794aff9b6b3107011dd7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>virtual Status arrow::Table::ValidateFull</definition>
        <argsstring>() const =0</argsstring>
        <name>ValidateFull</name>
        <briefdescription>
<para>Perform extensive validation checks to determine inconsistencies within the table&apos;s schema and internal data. </para>        </briefdescription>
        <detaileddescription>
<para>This is O(k*n) where k is the total number of field descendents, and n is the number of rows.</para><para><simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="391" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1gabe71e003123973cdff9cfca40dc85e04" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int arrow::Table::num_columns</definition>
        <argsstring>() const</argsstring>
        <name>num_columns</name>
        <briefdescription>
<para>Return the number of columns in the table. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="394" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="394" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga14665d44a57c45343b54c7997d5c92e5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t arrow::Table::num_rows</definition>
        <argsstring>() const</argsstring>
        <name>num_rows</name>
        <briefdescription>
<para>Return the number of rows (equal to each column&apos;s logical length) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="397" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="397" bodyend="397"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1gadc19bf0d1bcd8234e62d6dbce93e643b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::Table::Equals</definition>
        <argsstring>(const Table &amp;other, bool check_metadata=false) const</argsstring>
        <name>Equals</name>
        <param>
          <type>const <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>check_metadata</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Determine if tables are equal. </para>        </briefdescription>
        <detaileddescription>
<para>Two tables can be equal only if they have equal schemas. However, they may be equal even if they have different chunkings. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="403" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga5ee29a152192a220e9502c4b4eb61bfa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;Table&gt; &gt; arrow::Table::CombineChunks</definition>
        <argsstring>(MemoryPool *pool=default_memory_pool()) const</argsstring>
        <name>CombineChunks</name>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
          <defval><ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">default_memory_pool</ref>()</defval>
        </param>
        <briefdescription>
<para>Make a new table by combining the chunks this table has. </para>        </briefdescription>
        <detaileddescription>
<para>All the underlying chunks in the <ref refid="classarrow_1_1_chunked_array" kindref="compound">ChunkedArray</ref> of each column are concatenated into zero or one chunk.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool for buffer allocations </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="411" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1gac8b72567643fa64cde6e88478f97cc1e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::Table::CombineChunks</definition>
        <argsstring>(MemoryPool *pool, std::shared_ptr&lt; Table &gt; *out) const</argsstring>
        <name>CombineChunks</name>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="415" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="group__concat-tables_1gadbbe286a2ac648a8fae4af18ddfc52bf" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;Table&gt; arrow::Table::Make</definition>
        <argsstring>(std::shared_ptr&lt; Schema &gt; schema, std::vector&lt; std::shared_ptr&lt; ChunkedArray &gt;&gt; columns, int64_t num_rows=-1)</argsstring>
        <name>Make</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt;</type>
          <declname>schema</declname>
        </param>
        <param>
          <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_chunked_array" kindref="compound">ChunkedArray</ref> &gt;&gt;</type>
          <declname>columns</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>num_rows</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> from schema and columns If columns is zero-length, the table&apos;s number of rows is zero. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>schema</parametername>
</parameternamelist>
<parameterdescription>
<para>The table schema (column types) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>columns</parametername>
</parameternamelist>
<parameterdescription>
<para>The table&apos;s columns as chunked arrays </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_rows</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows in table, -1 (default) to infer from columns </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="230" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga54fb8a7cc7115373655ec564a9fcf32e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;Table&gt; arrow::Table::Make</definition>
        <argsstring>(std::shared_ptr&lt; Schema &gt; schema, const std::vector&lt; std::shared_ptr&lt; Array &gt;&gt; &amp;arrays, int64_t num_rows=-1)</argsstring>
        <name>Make</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt;</type>
          <declname>schema</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt;&gt; &amp;</type>
          <declname>arrays</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>num_rows</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> from schema and arrays. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>schema</parametername>
</parameternamelist>
<parameterdescription>
<para>The table schema (column types) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>arrays</parametername>
</parameternamelist>
<parameterdescription>
<para>The table&apos;s columns as arrays </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_rows</parametername>
</parameternamelist>
<parameterdescription>
<para>number of rows in table, -1 (default) to infer from columns </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="238" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga6485c5b425e042e2bd346011bbc413fa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;Table&gt; &gt; arrow::Table::FromRecordBatches</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; RecordBatch &gt;&gt; &amp;batches)</argsstring>
        <name>FromRecordBatches</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref> &gt;&gt; &amp;</type>
          <declname>batches</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> from RecordBatches, using schema supplied by the first <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">batches</parametername>
</parameternamelist>
<parameterdescription>
<para>a std::vector of record batches </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="246" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1gaec5f16e5671977e0d948d0e0865935fe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::Table::FromRecordBatches</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; RecordBatch &gt;&gt; &amp;batches, std::shared_ptr&lt; Table &gt; *table)</argsstring>
        <name>FromRecordBatches</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref> &gt;&gt; &amp;</type>
          <declname>batches</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> &gt; *</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="250" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga25b557706b098be27717002fee946856" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;Table&gt; &gt; arrow::Table::FromRecordBatches</definition>
        <argsstring>(std::shared_ptr&lt; Schema &gt; schema, const std::vector&lt; std::shared_ptr&lt; RecordBatch &gt;&gt; &amp;batches)</argsstring>
        <name>FromRecordBatches</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt;</type>
          <declname>schema</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref> &gt;&gt; &amp;</type>
          <declname>batches</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> from RecordBatches, using supplied schema. </para>        </briefdescription>
        <detaileddescription>
<para>There may be zero record batches</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">schema</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classarrow_1_1_schema" kindref="compound">arrow::Schema</ref> for each batch </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">batches</parametername>
</parameternamelist>
<parameterdescription>
<para>a std::vector of record batches </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="259" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1gad5e4e5aa336363beddf51eb789be253b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::Table::FromRecordBatches</definition>
        <argsstring>(std::shared_ptr&lt; Schema &gt; schema, const std::vector&lt; std::shared_ptr&lt; RecordBatch &gt;&gt; &amp;batches, std::shared_ptr&lt; Table &gt; *table)</argsstring>
        <name>FromRecordBatches</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt;</type>
          <declname>schema</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref> &gt;&gt; &amp;</type>
          <declname>batches</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> &gt; *</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="264" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga888a3ea6e291b96c589c08ce4e1c431e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;Table&gt; &gt; arrow::Table::FromChunkedStructArray</definition>
        <argsstring>(const std::shared_ptr&lt; ChunkedArray &gt; &amp;array)</argsstring>
        <name>FromChunkedStructArray</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_chunked_array" kindref="compound">ChunkedArray</ref> &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> from a chunked <ref refid="classarrow_1_1_struct_array" kindref="compound">StructArray</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>One column will be produced for each field of the <ref refid="classarrow_1_1_struct_array" kindref="compound">StructArray</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">array</parametername>
</parameternamelist>
<parameterdescription>
<para>a chunked <ref refid="classarrow_1_1_struct_array" kindref="compound">StructArray</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="273" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__concat-tables_1ga3ff130c5cbb35eda98f55d1e3d0fcfb0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::Table::FromChunkedStructArray</definition>
        <argsstring>(const std::shared_ptr&lt; ChunkedArray &gt; &amp;array, std::shared_ptr&lt; Table &gt; *table)</argsstring>
        <name>FromChunkedStructArray</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_chunked_array" kindref="compound">ChunkedArray</ref> &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> &gt; *</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="277" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="group__concat-tables_1gaebd70d5a21ef0558472d6e594d3ceeb2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::Table::Table</definition>
        <argsstring>()</argsstring>
        <name>Table</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="418" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="group__concat-tables_1ga99b2a29efb8b66cb02786e3f59dac100" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::Table::ARROW_DISALLOW_COPY_AND_ASSIGN</definition>
        <argsstring>(Table)</argsstring>
        <name>ARROW_DISALLOW_COPY_AND_ASSIGN</name>
        <param>
          <type><ref refid="classarrow_1_1_table" kindref="compound">Table</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/table.h" line="424" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Logical table as sequence of chunked arrays. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/arrow/table.h" line="221" column="1" bodyfile="/arrow/cpp/src/arrow/table.h" bodystart="221" bodyend="425"/>
    <listofallmembers>
      <member refid="group__concat-tables_1ga69d4bb372350e0ea6df4f18c6e0024fe" prot="public" virt="pure-virtual"><scope>arrow::Table</scope><name>AddColumn</name></member>
      <member refid="group__concat-tables_1ga9a4052b9ed361b073de0686533c148bb" prot="public" virt="non-virtual"><scope>arrow::Table</scope><name>AddColumn</name></member>
      <member refid="group__concat-tables_1ga99b2a29efb8b66cb02786e3f59dac100" prot="private" virt="non-virtual"><scope>arrow::Table</scope><name>ARROW_DISALLOW_COPY_AND_ASSIGN</name></member>
      <member refid="group__concat-tables_1ga8096b001837e7ad277e00b50226fbbe6" prot="public" virt="pure-virtual"><scope>arrow::Table</scope><name>column</name></member>
      <member refid="group__concat-tables_1ga1a280d02d926b10484a2a4631c7fa305" prot="public" virt="non-virtual"><scope>arrow::Table</scope><name>ColumnNames</name></member>
      <member refid="group__concat-tables_1ga89c30f4eb8b98a5ab126dc404c873bed" prot="public" virt="non-virtual"><scope>arrow::Table</scope><name>columns</name></member>
      <member refid="group__concat-tables_1ga5ee29a152192a220e9502c4b4eb61bfa" prot="public" virt="non-virtual"><scope>arrow::Table</scope><name>CombineChunks</name></member>
      <member refid="group__concat-tables_1gac8b72567643fa64cde6e88478f97cc1e" prot="public" virt="non-virtual"><scope>arrow::Table</scope><name>CombineChunks</name></member>
      <member refid="group__concat-tables_1gadc19bf0d1bcd8234e62d6dbce93e643b" prot="public" virt="non-virtual"><scope>arrow::Table</scope><name>Equals</name></member>
      <member refid="group__concat-tables_1gad9df57298bb216a45d106d77ffa06def" prot="public" virt="non-virtual"><scope>arrow::Table</scope><name>field</name></member>
      <member refid="group__concat-tables_1ga82dfb0b822b42639fa95344abc4b0d26" prot="public" virt="non-virtual"><scope>arrow::Table</scope><name>fields</name></member>
      <member refid="group__concat-tables_1ga86c741ce1d31a4d14a14e1808f0bf33a" prot="public" virt="pure-virtual"><scope>arrow::Table</scope><name>Flatten</name></member>
      <member refid="group__concat-tables_1gad539133daaafc3882aa7bcd2e0497e15" prot="public" virt="non-virtual"><scope>arrow::Table</scope><name>Flatten</name></member>
      <member refid="group__concat-tables_1ga888a3ea6e291b96c589c08ce4e1c431e" prot="public" virt="non-virtual"><scope>arrow::Table</scope><name>FromChunkedStructArray</name></member>
      <member refid="group__concat-tables_1ga3ff130c5cbb35eda98f55d1e3d0fcfb0" prot="public" virt="non-virtual"><scope>arrow::Table</scope><name>FromChunkedStructArray</name></member>
      <member refid="group__concat-tables_1ga6485c5b425e042e2bd346011bbc413fa" prot="public" virt="non-virtual"><scope>arrow::Table</scope><name>FromRecordBatches</name></member>
      <member refid="group__concat-tables_1gaec5f16e5671977e0d948d0e0865935fe" prot="public" virt="non-virtual"><scope>arrow::Table</scope><name>FromRecordBatches</name></member>
      <member refid="group__concat-tables_1ga25b557706b098be27717002fee946856" prot="public" virt="non-virtual"><scope>arrow::Table</scope><name>FromRecordBatches</name></member>
      <member refid="group__concat-tables_1gad5e4e5aa336363beddf51eb789be253b" prot="public" virt="non-virtual"><scope>arrow::Table</scope><name>FromRecordBatches</name></member>
      <member refid="group__concat-tables_1gacb02268cc5b63206615c88f26194b88c" prot="public" virt="non-virtual"><scope>arrow::Table</scope><name>GetColumnByName</name></member>
      <member refid="group__concat-tables_1gadbbe286a2ac648a8fae4af18ddfc52bf" prot="public" virt="non-virtual"><scope>arrow::Table</scope><name>Make</name></member>
      <member refid="group__concat-tables_1ga54fb8a7cc7115373655ec564a9fcf32e" prot="public" virt="non-virtual"><scope>arrow::Table</scope><name>Make</name></member>
      <member refid="group__concat-tables_1gabe71e003123973cdff9cfca40dc85e04" prot="public" virt="non-virtual"><scope>arrow::Table</scope><name>num_columns</name></member>
      <member refid="group__concat-tables_1ga14665d44a57c45343b54c7997d5c92e5" prot="public" virt="non-virtual"><scope>arrow::Table</scope><name>num_rows</name></member>
      <member refid="group__concat-tables_1ga7b7b895c038e468dac1be8d27722ffa6" prot="protected" virt="non-virtual"><scope>arrow::Table</scope><name>num_rows_</name></member>
      <member refid="group__concat-tables_1gabb51bfae47ef4cfc387b45e70c8bf288" prot="public" virt="pure-virtual"><scope>arrow::Table</scope><name>RemoveColumn</name></member>
      <member refid="group__concat-tables_1ga95286e58ddd506b8be041b9c5ce55097" prot="public" virt="non-virtual"><scope>arrow::Table</scope><name>RemoveColumn</name></member>
      <member refid="group__concat-tables_1gaf89e68f611db6fc4b2680d272386f776" prot="public" virt="non-virtual"><scope>arrow::Table</scope><name>RenameColumns</name></member>
      <member refid="group__concat-tables_1ga2bf58206871ca43cbac00e3df4aeea4c" prot="public" virt="non-virtual"><scope>arrow::Table</scope><name>RenameColumns</name></member>
      <member refid="group__concat-tables_1ga53f5891d984e4652f5482096ea32e6d5" prot="public" virt="pure-virtual"><scope>arrow::Table</scope><name>ReplaceSchemaMetadata</name></member>
      <member refid="group__concat-tables_1ga8d8626acf4d00e2ac439c4f1cc7a054a" prot="public" virt="non-virtual"><scope>arrow::Table</scope><name>schema</name></member>
      <member refid="group__concat-tables_1ga40375f7767ae6caea748d87e53aacb45" prot="protected" virt="non-virtual"><scope>arrow::Table</scope><name>schema_</name></member>
      <member refid="group__concat-tables_1ga586dc478193d88f31afad1a6a17b991d" prot="public" virt="pure-virtual"><scope>arrow::Table</scope><name>SetColumn</name></member>
      <member refid="group__concat-tables_1ga5254d32e08c04a0524eba75acbc7cd96" prot="public" virt="non-virtual"><scope>arrow::Table</scope><name>SetColumn</name></member>
      <member refid="group__concat-tables_1ga8fb8285ac5af45a9e931564edb4938fc" prot="public" virt="pure-virtual"><scope>arrow::Table</scope><name>Slice</name></member>
      <member refid="group__concat-tables_1ga3948de704790a778f8568f22e08bca55" prot="public" virt="non-virtual"><scope>arrow::Table</scope><name>Slice</name></member>
      <member refid="group__concat-tables_1gaebd70d5a21ef0558472d6e594d3ceeb2" prot="protected" virt="non-virtual"><scope>arrow::Table</scope><name>Table</name></member>
      <member refid="group__concat-tables_1ga952001529c848c932349b3198d98b680" prot="public" virt="non-virtual"><scope>arrow::Table</scope><name>ToString</name></member>
      <member refid="group__concat-tables_1ga4a93ccc812c7ee9992bc9138b53895e0" prot="public" virt="pure-virtual"><scope>arrow::Table</scope><name>Validate</name></member>
      <member refid="group__concat-tables_1ga5796527d5848794aff9b6b3107011dd7" prot="public" virt="pure-virtual"><scope>arrow::Table</scope><name>ValidateFull</name></member>
      <member refid="group__concat-tables_1ga7ea1eed4818941b9b1eb98381e1b9690" prot="public" virt="virtual"><scope>arrow::Table</scope><name>~Table</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
