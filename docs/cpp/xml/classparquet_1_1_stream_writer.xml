<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classparquet_1_1_stream_writer" kind="class" language="C++" prot="public">
    <compoundname>parquet::StreamWriter</compoundname>
    <includes refid="stream__writer_8h" local="no">parquet/stream_writer.h</includes>
    <innerclass refid="structparquet_1_1_stream_writer_1_1_fixed_string_view" prot="public">parquet::StreamWriter::FixedStringView</innerclass>
    <innerclass refid="structparquet_1_1_stream_writer_1_1null__deleter" prot="private">parquet::StreamWriter::null_deleter</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classparquet_1_1_stream_writer_1a0a15920b79d888e2c5ffb1d0591e01ea" prot="public" static="no">
        <type><ref refid="namespacearrow_1_1util_1a37597d23d580458d4547f817e2943744" kindref="member">arrow::util::optional</ref>&lt; T &gt;</type>
        <definition>using parquet::StreamWriter::optional =  arrow::util::optional&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>optional</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="65" column="1" bodyfile="/arrow/cpp/src/parquet/stream_writer.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classparquet_1_1_stream_writer_1a6fdf84cb46872cd87274a15fcf68e571" prot="private" static="no">
        <type>std::shared_ptr&lt; <ref refid="classparquet_1_1schema_1_1_primitive_node" kindref="compound">schema::PrimitiveNode</ref> &gt;</type>
        <definition>using parquet::StreamWriter::node_ptr_type =  std::shared_ptr&lt;schema::PrimitiveNode&gt;</definition>
        <argsstring></argsstring>
        <name>node_ptr_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="208" column="1" bodyfile="/arrow/cpp/src/parquet/stream_writer.h" bodystart="208" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classparquet_1_1_stream_writer_1a1b0e1370d1563539fb1005db3647d110" prot="private" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t parquet::StreamWriter::column_index_</definition>
        <argsstring></argsstring>
        <name>column_index_</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="214" column="1" bodyfile="/arrow/cpp/src/parquet/stream_writer.h" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classparquet_1_1_stream_writer_1ae443c50a3217c9af65e5fbc62cc9c729" prot="private" static="no" mutable="no">
        <type>int64_t</type>
        <definition>int64_t parquet::StreamWriter::current_row_</definition>
        <argsstring></argsstring>
        <name>current_row_</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="215" column="1" bodyfile="/arrow/cpp/src/parquet/stream_writer.h" bodystart="215" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classparquet_1_1_stream_writer_1ae59979d6e6f1b46391e5e317f19d4592" prot="private" static="no" mutable="no">
        <type>int64_t</type>
        <definition>int64_t parquet::StreamWriter::row_group_size_</definition>
        <argsstring></argsstring>
        <name>row_group_size_</name>
        <initializer>{0}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="216" column="1" bodyfile="/arrow/cpp/src/parquet/stream_writer.h" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classparquet_1_1_stream_writer_1af36712e8826dfcd9e92a75395a6b4605" prot="private" static="no" mutable="no">
        <type>int64_t</type>
        <definition>int64_t parquet::StreamWriter::max_row_group_size_</definition>
        <argsstring></argsstring>
        <name>max_row_group_size_</name>
        <initializer>{default_row_group_size_}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="217" column="1" bodyfile="/arrow/cpp/src/parquet/stream_writer.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classparquet_1_1_stream_writer_1a3dbd21b63cfa504edfb818ce62f4dc98" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classparquet_1_1_parquet_file_writer" kindref="compound">ParquetFileWriter</ref> &gt;</type>
        <definition>std::unique_ptr&lt;ParquetFileWriter&gt; parquet::StreamWriter::file_writer_</definition>
        <argsstring></argsstring>
        <name>file_writer_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="219" column="1" bodyfile="/arrow/cpp/src/parquet/stream_writer.h" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classparquet_1_1_stream_writer_1a48f6a1cd4c494a0478ea61a06fa2d656" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classparquet_1_1_row_group_writer" kindref="compound">RowGroupWriter</ref>, null_deleter &gt;</type>
        <definition>std::unique_ptr&lt;RowGroupWriter, null_deleter&gt; parquet::StreamWriter::row_group_writer_</definition>
        <argsstring></argsstring>
        <name>row_group_writer_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="220" column="1" bodyfile="/arrow/cpp/src/parquet/stream_writer.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classparquet_1_1_stream_writer_1ada224a970e9f9962e9f2098227cc265d" prot="private" static="no" mutable="no">
        <type>std::vector&lt; node_ptr_type &gt;</type>
        <definition>std::vector&lt;node_ptr_type&gt; parquet::StreamWriter::nodes_</definition>
        <argsstring></argsstring>
        <name>nodes_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="221" column="1" bodyfile="/arrow/cpp/src/parquet/stream_writer.h" bodystart="221" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classparquet_1_1_stream_writer_1a15a17702602a4c4fe08e198a77e97fa1" prot="private" static="yes" mutable="no">
        <type>constexpr int16_t</type>
        <definition>constexpr int16_t parquet::StreamWriter::kDefLevelZero</definition>
        <argsstring></argsstring>
        <name>kDefLevelZero</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="223" column="1" bodyfile="/arrow/cpp/src/parquet/stream_writer.h" bodystart="223" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classparquet_1_1_stream_writer_1a1bc1d22befe40fd6e50cd5f3fbc5c8c8" prot="private" static="yes" mutable="no">
        <type>constexpr int16_t</type>
        <definition>constexpr int16_t parquet::StreamWriter::kDefLevelOne</definition>
        <argsstring></argsstring>
        <name>kDefLevelOne</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="224" column="1" bodyfile="/arrow/cpp/src/parquet/stream_writer.h" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classparquet_1_1_stream_writer_1a103f819a9e8bedf1b85d4c3b9a5e294f" prot="private" static="yes" mutable="no">
        <type>constexpr int16_t</type>
        <definition>constexpr int16_t parquet::StreamWriter::kRepLevelZero</definition>
        <argsstring></argsstring>
        <name>kRepLevelZero</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="225" column="1" bodyfile="/arrow/cpp/src/parquet/stream_writer.h" bodystart="225" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classparquet_1_1_stream_writer_1abd021a8530fda14ebbedc61755bbb9ce" prot="private" static="yes" mutable="no">
        <type>constexpr int64_t</type>
        <definition>constexpr int64_t parquet::StreamWriter::kBatchSizeOne</definition>
        <argsstring></argsstring>
        <name>kBatchSizeOne</name>
        <initializer>= 1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="226" column="1" bodyfile="/arrow/cpp/src/parquet/stream_writer.h" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classparquet_1_1_stream_writer_1a3dd72fe31443b8e841818400b20ca7fb" prot="private" static="yes" mutable="no">
        <type>int64_t</type>
        <definition>int64_t parquet::StreamWriter::default_row_group_size_</definition>
        <argsstring></argsstring>
        <name>default_row_group_size_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="228" column="1" bodyfile="/arrow/cpp/src/parquet/stream_writer.h" bodystart="228" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classparquet_1_1_stream_writer_1a50f89d819f2b9f76dcf7b053f5b498d7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>parquet::StreamWriter::StreamWriter</definition>
        <argsstring>()=default</argsstring>
        <name>StreamWriter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_stream_writer_1a848d7ca043c532ddcfd8f418ef5626df" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>parquet::StreamWriter::StreamWriter</definition>
        <argsstring>(std::unique_ptr&lt; ParquetFileWriter &gt; writer)</argsstring>
        <name>StreamWriter</name>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classparquet_1_1_parquet_file_writer" kindref="compound">ParquetFileWriter</ref> &gt;</type>
          <declname>writer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_stream_writer_1a2e5e562d06a87e22928c2347a143f540" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>parquet::StreamWriter::~StreamWriter</definition>
        <argsstring>()=default</argsstring>
        <name>~StreamWriter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_stream_writer_1a6f0d136f39a8a2ccf0163d8e98e05fa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parquet::StreamWriter::SetMaxRowGroupSize</definition>
        <argsstring>(int64_t max_size)</argsstring>
        <name>SetMaxRowGroupSize</name>
        <param>
          <type>int64_t</type>
          <declname>max_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_stream_writer_1abc13fafd68f48aad8df595763c57c4e0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int parquet::StreamWriter::current_column</definition>
        <argsstring>() const</argsstring>
        <name>current_column</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="80" column="1" bodyfile="/arrow/cpp/src/parquet/stream_writer.h" bodystart="80" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_stream_writer_1a87fc3f9a6f3d29722c5d518e130f774b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t parquet::StreamWriter::current_row</definition>
        <argsstring>() const</argsstring>
        <name>current_row</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="82" column="1" bodyfile="/arrow/cpp/src/parquet/stream_writer.h" bodystart="82" bodyend="82"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_stream_writer_1a8b8991893d4228a8ea997c1fac9abbb0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int parquet::StreamWriter::num_columns</definition>
        <argsstring>() const</argsstring>
        <name>num_columns</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_stream_writer_1a30cb032a1872fdb5d7826247a621bb14" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>parquet::StreamWriter::StreamWriter</definition>
        <argsstring>(StreamWriter &amp;&amp;)=default</argsstring>
        <name>StreamWriter</name>
        <param>
          <type><ref refid="classparquet_1_1_stream_writer" kindref="compound">StreamWriter</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_stream_writer_1a5378216dca7a7f5116baa00c1f376dc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classparquet_1_1_stream_writer" kindref="compound">StreamWriter</ref> &amp;</type>
        <definition>StreamWriter&amp; parquet::StreamWriter::operator=</definition>
        <argsstring>(StreamWriter &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classparquet_1_1_stream_writer" kindref="compound">StreamWriter</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_stream_writer_1ab6c835c199bfa6f9c2c511f1f2359cdb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>parquet::StreamWriter::StreamWriter</definition>
        <argsstring>(const StreamWriter &amp;)=delete</argsstring>
        <name>StreamWriter</name>
        <param>
          <type>const <ref refid="classparquet_1_1_stream_writer" kindref="compound">StreamWriter</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_stream_writer_1a73685ff27abcd191a33a415ce49e8a21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classparquet_1_1_stream_writer" kindref="compound">StreamWriter</ref> &amp;</type>
        <definition>StreamWriter&amp; parquet::StreamWriter::operator=</definition>
        <argsstring>(const StreamWriter &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classparquet_1_1_stream_writer" kindref="compound">StreamWriter</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_stream_writer_1acff41e4a5995d054addcf18013cb85af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classparquet_1_1_stream_writer" kindref="compound">StreamWriter</ref> &amp;</type>
        <definition>StreamWriter&amp; parquet::StreamWriter::operator&lt;&lt;</definition>
        <argsstring>(bool v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>bool</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Output operators for required fields. </para>        </briefdescription>
        <detaileddescription>
<para>These can also be used for optional fields when a value must be set. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_stream_writer_1a42e14c0d63c429cca4a3fef1ac282e7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classparquet_1_1_stream_writer" kindref="compound">StreamWriter</ref> &amp;</type>
        <definition>StreamWriter&amp; parquet::StreamWriter::operator&lt;&lt;</definition>
        <argsstring>(int8_t v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>int8_t</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_stream_writer_1a8363ceab888c6e7d2f56b9deae0bdf7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classparquet_1_1_stream_writer" kindref="compound">StreamWriter</ref> &amp;</type>
        <definition>StreamWriter&amp; parquet::StreamWriter::operator&lt;&lt;</definition>
        <argsstring>(uint8_t v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>uint8_t</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_stream_writer_1a6cb1baf199515dae558ee9cc6d1be3e9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classparquet_1_1_stream_writer" kindref="compound">StreamWriter</ref> &amp;</type>
        <definition>StreamWriter&amp; parquet::StreamWriter::operator&lt;&lt;</definition>
        <argsstring>(int16_t v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>int16_t</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_stream_writer_1af84ccbfbb67081a7538f9139d0d4259e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classparquet_1_1_stream_writer" kindref="compound">StreamWriter</ref> &amp;</type>
        <definition>StreamWriter&amp; parquet::StreamWriter::operator&lt;&lt;</definition>
        <argsstring>(uint16_t v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>uint16_t</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_stream_writer_1a7fa8c3495b7d459e5d833b7db736e417" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classparquet_1_1_stream_writer" kindref="compound">StreamWriter</ref> &amp;</type>
        <definition>StreamWriter&amp; parquet::StreamWriter::operator&lt;&lt;</definition>
        <argsstring>(int32_t v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>int32_t</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_stream_writer_1ab9bb1607b51dcd5ac3d3e6455749fc94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classparquet_1_1_stream_writer" kindref="compound">StreamWriter</ref> &amp;</type>
        <definition>StreamWriter&amp; parquet::StreamWriter::operator&lt;&lt;</definition>
        <argsstring>(uint32_t v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>uint32_t</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_stream_writer_1a7afb2bd2cfc1393056ae0268d1815168" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classparquet_1_1_stream_writer" kindref="compound">StreamWriter</ref> &amp;</type>
        <definition>StreamWriter&amp; parquet::StreamWriter::operator&lt;&lt;</definition>
        <argsstring>(int64_t v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>int64_t</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="110" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_stream_writer_1a1c21fc159c58c5dbff15c11b7a23ec64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classparquet_1_1_stream_writer" kindref="compound">StreamWriter</ref> &amp;</type>
        <definition>StreamWriter&amp; parquet::StreamWriter::operator&lt;&lt;</definition>
        <argsstring>(uint64_t v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>uint64_t</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_stream_writer_1add66ec19f186650442a4e1d538f78188" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classparquet_1_1_stream_writer" kindref="compound">StreamWriter</ref> &amp;</type>
        <definition>StreamWriter&amp; parquet::StreamWriter::operator&lt;&lt;</definition>
        <argsstring>(const std::chrono::milliseconds &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const std::chrono::milliseconds &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_stream_writer_1a85655f1fb3aea051a65bf91af23582f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classparquet_1_1_stream_writer" kindref="compound">StreamWriter</ref> &amp;</type>
        <definition>StreamWriter&amp; parquet::StreamWriter::operator&lt;&lt;</definition>
        <argsstring>(const std::chrono::microseconds &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const std::chrono::microseconds &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="116" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_stream_writer_1a8f1d0a9e683a04772d55815c89975c7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classparquet_1_1_stream_writer" kindref="compound">StreamWriter</ref> &amp;</type>
        <definition>StreamWriter&amp; parquet::StreamWriter::operator&lt;&lt;</definition>
        <argsstring>(float v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>float</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_stream_writer_1a3e33c15c220224ed869c3f66eb6606ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classparquet_1_1_stream_writer" kindref="compound">StreamWriter</ref> &amp;</type>
        <definition>StreamWriter&amp; parquet::StreamWriter::operator&lt;&lt;</definition>
        <argsstring>(double v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>double</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_stream_writer_1a35574b729659f1b087b7f252a46ad846" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classparquet_1_1_stream_writer" kindref="compound">StreamWriter</ref> &amp;</type>
        <definition>StreamWriter&amp; parquet::StreamWriter::operator&lt;&lt;</definition>
        <argsstring>(char v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>char</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="122" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_stream_writer_1ac0c3d0ee8fd393951632d76bdd6ee8f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>int</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classparquet_1_1_stream_writer" kindref="compound">StreamWriter</ref> &amp;</type>
        <definition>StreamWriter&amp; parquet::StreamWriter::operator&lt;&lt;</definition>
        <argsstring>(const char(&amp;v)[N])</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const char(&amp;)</type>
          <declname>v</declname>
          <array>[N]</array>
        </param>
        <briefdescription>
<para>Output operators for fixed length strings. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="140" column="1" bodyfile="/arrow/cpp/src/parquet/stream_writer.h" bodystart="140" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_stream_writer_1a77245a100b71c461959a37da181a7de7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>N</declname>
            <defname>N</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classparquet_1_1_stream_writer" kindref="compound">StreamWriter</ref> &amp;</type>
        <definition>StreamWriter&amp; parquet::StreamWriter::operator&lt;&lt;</definition>
        <argsstring>(const std::array&lt; char, N &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const std::array&lt; char, N &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="144" column="1" bodyfile="/arrow/cpp/src/parquet/stream_writer.h" bodystart="144" bodyend="146"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_stream_writer_1acdde3f4e326bf297e84bb2d370c22991" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classparquet_1_1_stream_writer" kindref="compound">StreamWriter</ref> &amp;</type>
        <definition>StreamWriter&amp; parquet::StreamWriter::operator&lt;&lt;</definition>
        <argsstring>(FixedStringView v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type><ref refid="structparquet_1_1_stream_writer_1_1_fixed_string_view" kindref="compound">FixedStringView</ref></type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_stream_writer_1a6493bc19104a2229d6f9b9495446fe2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classparquet_1_1_stream_writer" kindref="compound">StreamWriter</ref> &amp;</type>
        <definition>StreamWriter&amp; parquet::StreamWriter::operator&lt;&lt;</definition>
        <argsstring>(const char *v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const char *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Output operators for variable length strings. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="150" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_stream_writer_1a20bee06e61bd9ee12f0a92e3a11a7e95" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classparquet_1_1_stream_writer" kindref="compound">StreamWriter</ref> &amp;</type>
        <definition>StreamWriter&amp; parquet::StreamWriter::operator&lt;&lt;</definition>
        <argsstring>(const std::string &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="151" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_stream_writer_1a3034b68ffcf7b8e985abfd2b0e584bd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classparquet_1_1_stream_writer" kindref="compound">StreamWriter</ref> &amp;</type>
        <definition>StreamWriter&amp; parquet::StreamWriter::operator&lt;&lt;</definition>
        <argsstring>(arrow::util::string_view v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>arrow::util::string_view</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="152" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_stream_writer_1a42b244df5378f2b4f9d5bbd6fb27c388" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classparquet_1_1_stream_writer" kindref="compound">StreamWriter</ref> &amp;</type>
        <definition>StreamWriter&amp; parquet::StreamWriter::operator&lt;&lt;</definition>
        <argsstring>(const optional&lt; T &gt; &amp;v)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>const <ref refid="classparquet_1_1_stream_writer_1a0a15920b79d888e2c5ffb1d0591e01ea" kindref="member">optional</ref>&lt; T &gt; &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Output operator for optional fields. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="156" column="1" bodyfile="/arrow/cpp/src/parquet/stream_writer.h" bodystart="156" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_stream_writer_1a114e27b01243f89388da4147d420f360" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t parquet::StreamWriter::SkipColumns</definition>
        <argsstring>(int num_columns_to_skip)</argsstring>
        <name>SkipColumns</name>
        <param>
          <type>int</type>
          <declname>num_columns_to_skip</declname>
        </param>
        <briefdescription>
<para>Skip the next N columns of optional data. </para>        </briefdescription>
        <detaileddescription>
<para>If there are less than N columns remaining then the excess columns are ignored. <parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classparquet_1_1_parquet_exception" kindref="compound">ParquetException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if there is an attempt to skip any required column. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Number of columns actually skipped. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="170" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_stream_writer_1aa221a9e128e55f0e0a6d53971309b66c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parquet::StreamWriter::EndRow</definition>
        <argsstring>()</argsstring>
        <name>EndRow</name>
        <briefdescription>
<para>Terminate the current row and advance to next one. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classparquet_1_1_parquet_exception" kindref="compound">ParquetException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if all columns in the row were not written or skipped. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="175" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_stream_writer_1aed67b735efc0e110c6efd21b64d01b47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parquet::StreamWriter::EndRowGroup</definition>
        <argsstring>()</argsstring>
        <name>EndRowGroup</name>
        <briefdescription>
<para>Terminate the current row group and create new one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="178" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classparquet_1_1_stream_writer_1a59f37f9b46b4fd4d17d267fff8463003" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void parquet::StreamWriter::SetDefaultMaxRowGroupSize</definition>
        <argsstring>(int64_t max_size)</argsstring>
        <name>SetDefaultMaxRowGroupSize</name>
        <param>
          <type>int64_t</type>
          <declname>max_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="76" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classparquet_1_1_stream_writer_1a0553bb4e6be1d749cee84e0d20b67f81" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename WriterType</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classparquet_1_1_stream_writer" kindref="compound">StreamWriter</ref> &amp;</type>
        <definition>StreamWriter&amp; parquet::StreamWriter::Write</definition>
        <argsstring>(const T v)</argsstring>
        <name>Write</name>
        <param>
          <type>const T</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="182" column="1" bodyfile="/arrow/cpp/src/parquet/stream_writer.h" bodystart="182" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_stream_writer_1a2771d1e9bf1a21380e99cf32c505eead" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classparquet_1_1_stream_writer" kindref="compound">StreamWriter</ref> &amp;</type>
        <definition>StreamWriter&amp; parquet::StreamWriter::WriteVariableLength</definition>
        <argsstring>(const char *data_ptr, std::size_t data_len)</argsstring>
        <name>WriteVariableLength</name>
        <param>
          <type>const char *</type>
          <declname>data_ptr</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>data_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="193" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_stream_writer_1a94bd1b52c1ca54f2ef0bd36c5c2d1b28" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classparquet_1_1_stream_writer" kindref="compound">StreamWriter</ref> &amp;</type>
        <definition>StreamWriter&amp; parquet::StreamWriter::WriteFixedLength</definition>
        <argsstring>(const char *data_ptr, std::size_t data_len)</argsstring>
        <name>WriteFixedLength</name>
        <param>
          <type>const char *</type>
          <declname>data_ptr</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>data_len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="195" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_stream_writer_1a34c02902ab6424be0679d159189227f1" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parquet::StreamWriter::CheckColumn</definition>
        <argsstring>(Type::type physical_type, ConvertedType::type converted_type, int length=-1)</argsstring>
        <name>CheckColumn</name>
        <param>
          <type><ref refid="structparquet_1_1_type_1a2a4b0ad3da98a8a407a0dc3ecbf737ca" kindref="member">Type::type</ref></type>
          <declname>physical_type</declname>
        </param>
        <param>
          <type><ref refid="structparquet_1_1_converted_type_1a4c93674b47bffc29042acda48281e198" kindref="member">ConvertedType::type</ref></type>
          <declname>converted_type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="197" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_stream_writer_1a942e6675250bda48d3057dd4fa6a46db" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parquet::StreamWriter::SkipOptionalColumn</definition>
        <argsstring>()</argsstring>
        <name>SkipOptionalColumn</name>
        <briefdescription>
<para>Skip the next column which must be optional. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername><ref refid="classparquet_1_1_parquet_exception" kindref="compound">ParquetException</ref></parametername>
</parameternamelist>
<parameterdescription>
<para>if the next column does not exist or is not optional. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="203" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_stream_writer_1a03247fd0beab5355fd8a5a520081ad01" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parquet::StreamWriter::WriteNullValue</definition>
        <argsstring>(ColumnWriter *writer)</argsstring>
        <name>WriteNullValue</name>
        <param>
          <type><ref refid="classparquet_1_1_column_writer" kindref="compound">ColumnWriter</ref> *</type>
          <declname>writer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/stream_writer.h" line="205" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A class for writing Parquet files using an output stream type API. </para>    </briefdescription>
    <detaileddescription>
<para>The values given must be of the correct type i.e. the type must match the file schema exactly otherwise a <ref refid="classparquet_1_1_parquet_exception" kindref="compound">ParquetException</ref> will be thrown.</para><para>The user must explicitly indicate the end of the row using the <ref refid="classparquet_1_1_stream_writer_1aa221a9e128e55f0e0a6d53971309b66c" kindref="member">EndRow()</ref> function or EndRow output manipulator.</para><para>A maximum row group size can be configured, the default size is 512MB. Alternatively the row group size can be set to zero and the user can create new row groups by calling the <ref refid="classparquet_1_1_stream_writer_1aed67b735efc0e110c6efd21b64d01b47" kindref="member">EndRowGroup()</ref> function or using the EndRowGroup output manipulator.</para><para>Required and optional fields are supported:<itemizedlist>
<listitem><para>Required fields are written using operator&lt;&lt;(T)</para></listitem><listitem><para>Optional fields are written using operator&lt;&lt;(arrow::util::optional&lt;T&gt;).</para></listitem></itemizedlist>
</para><para>Note that operator&lt;&lt;(T) can be used to write optional fields.</para><para>Similarly, operator&lt;&lt;(arrow::util::optional&lt;T&gt;) can be used to write required fields. However if the optional parameter does not have a value (i.e. it is nullopt) then a <ref refid="classparquet_1_1_parquet_exception" kindref="compound">ParquetException</ref> will be raised.</para><para>Currently there is no support for repeated fields. </para>    </detaileddescription>
    <location file="/arrow/cpp/src/parquet/stream_writer.h" line="62" column="1" bodyfile="/arrow/cpp/src/parquet/stream_writer.h" bodystart="62" bodyend="229"/>
    <listofallmembers>
      <member refid="classparquet_1_1_stream_writer_1a34c02902ab6424be0679d159189227f1" prot="protected" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>CheckColumn</name></member>
      <member refid="classparquet_1_1_stream_writer_1a1b0e1370d1563539fb1005db3647d110" prot="private" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>column_index_</name></member>
      <member refid="classparquet_1_1_stream_writer_1abc13fafd68f48aad8df595763c57c4e0" prot="public" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>current_column</name></member>
      <member refid="classparquet_1_1_stream_writer_1a87fc3f9a6f3d29722c5d518e130f774b" prot="public" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>current_row</name></member>
      <member refid="classparquet_1_1_stream_writer_1ae443c50a3217c9af65e5fbc62cc9c729" prot="private" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>current_row_</name></member>
      <member refid="classparquet_1_1_stream_writer_1a3dd72fe31443b8e841818400b20ca7fb" prot="private" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>default_row_group_size_</name></member>
      <member refid="classparquet_1_1_stream_writer_1aa221a9e128e55f0e0a6d53971309b66c" prot="public" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>EndRow</name></member>
      <member refid="classparquet_1_1_stream_writer_1aed67b735efc0e110c6efd21b64d01b47" prot="public" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>EndRowGroup</name></member>
      <member refid="classparquet_1_1_stream_writer_1a3dbd21b63cfa504edfb818ce62f4dc98" prot="private" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>file_writer_</name></member>
      <member refid="classparquet_1_1_stream_writer_1abd021a8530fda14ebbedc61755bbb9ce" prot="private" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>kBatchSizeOne</name></member>
      <member refid="classparquet_1_1_stream_writer_1a1bc1d22befe40fd6e50cd5f3fbc5c8c8" prot="private" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>kDefLevelOne</name></member>
      <member refid="classparquet_1_1_stream_writer_1a15a17702602a4c4fe08e198a77e97fa1" prot="private" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>kDefLevelZero</name></member>
      <member refid="classparquet_1_1_stream_writer_1a103f819a9e8bedf1b85d4c3b9a5e294f" prot="private" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>kRepLevelZero</name></member>
      <member refid="classparquet_1_1_stream_writer_1af36712e8826dfcd9e92a75395a6b4605" prot="private" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>max_row_group_size_</name></member>
      <member refid="classparquet_1_1_stream_writer_1a6fdf84cb46872cd87274a15fcf68e571" prot="private" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>node_ptr_type</name></member>
      <member refid="classparquet_1_1_stream_writer_1ada224a970e9f9962e9f2098227cc265d" prot="private" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>nodes_</name></member>
      <member refid="classparquet_1_1_stream_writer_1a8b8991893d4228a8ea997c1fac9abbb0" prot="public" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>num_columns</name></member>
      <member refid="classparquet_1_1_stream_writer_1acff41e4a5995d054addcf18013cb85af" prot="public" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>operator&lt;&lt;</name></member>
      <member refid="classparquet_1_1_stream_writer_1a42e14c0d63c429cca4a3fef1ac282e7d" prot="public" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>operator&lt;&lt;</name></member>
      <member refid="classparquet_1_1_stream_writer_1a8363ceab888c6e7d2f56b9deae0bdf7a" prot="public" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>operator&lt;&lt;</name></member>
      <member refid="classparquet_1_1_stream_writer_1a6cb1baf199515dae558ee9cc6d1be3e9" prot="public" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>operator&lt;&lt;</name></member>
      <member refid="classparquet_1_1_stream_writer_1af84ccbfbb67081a7538f9139d0d4259e" prot="public" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>operator&lt;&lt;</name></member>
      <member refid="classparquet_1_1_stream_writer_1a7fa8c3495b7d459e5d833b7db736e417" prot="public" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>operator&lt;&lt;</name></member>
      <member refid="classparquet_1_1_stream_writer_1ab9bb1607b51dcd5ac3d3e6455749fc94" prot="public" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>operator&lt;&lt;</name></member>
      <member refid="classparquet_1_1_stream_writer_1a7afb2bd2cfc1393056ae0268d1815168" prot="public" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>operator&lt;&lt;</name></member>
      <member refid="classparquet_1_1_stream_writer_1a1c21fc159c58c5dbff15c11b7a23ec64" prot="public" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>operator&lt;&lt;</name></member>
      <member refid="classparquet_1_1_stream_writer_1add66ec19f186650442a4e1d538f78188" prot="public" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>operator&lt;&lt;</name></member>
      <member refid="classparquet_1_1_stream_writer_1a85655f1fb3aea051a65bf91af23582f7" prot="public" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>operator&lt;&lt;</name></member>
      <member refid="classparquet_1_1_stream_writer_1a8f1d0a9e683a04772d55815c89975c7b" prot="public" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>operator&lt;&lt;</name></member>
      <member refid="classparquet_1_1_stream_writer_1a3e33c15c220224ed869c3f66eb6606ea" prot="public" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>operator&lt;&lt;</name></member>
      <member refid="classparquet_1_1_stream_writer_1a35574b729659f1b087b7f252a46ad846" prot="public" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>operator&lt;&lt;</name></member>
      <member refid="classparquet_1_1_stream_writer_1ac0c3d0ee8fd393951632d76bdd6ee8f6" prot="public" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>operator&lt;&lt;</name></member>
      <member refid="classparquet_1_1_stream_writer_1a77245a100b71c461959a37da181a7de7" prot="public" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>operator&lt;&lt;</name></member>
      <member refid="classparquet_1_1_stream_writer_1acdde3f4e326bf297e84bb2d370c22991" prot="public" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>operator&lt;&lt;</name></member>
      <member refid="classparquet_1_1_stream_writer_1a6493bc19104a2229d6f9b9495446fe2a" prot="public" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>operator&lt;&lt;</name></member>
      <member refid="classparquet_1_1_stream_writer_1a20bee06e61bd9ee12f0a92e3a11a7e95" prot="public" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>operator&lt;&lt;</name></member>
      <member refid="classparquet_1_1_stream_writer_1a3034b68ffcf7b8e985abfd2b0e584bd7" prot="public" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>operator&lt;&lt;</name></member>
      <member refid="classparquet_1_1_stream_writer_1a42b244df5378f2b4f9d5bbd6fb27c388" prot="public" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>operator&lt;&lt;</name></member>
      <member refid="classparquet_1_1_stream_writer_1a5378216dca7a7f5116baa00c1f376dc6" prot="public" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>operator=</name></member>
      <member refid="classparquet_1_1_stream_writer_1a73685ff27abcd191a33a415ce49e8a21" prot="public" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>operator=</name></member>
      <member refid="classparquet_1_1_stream_writer_1a0a15920b79d888e2c5ffb1d0591e01ea" prot="public" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>optional</name></member>
      <member refid="classparquet_1_1_stream_writer_1ae59979d6e6f1b46391e5e317f19d4592" prot="private" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>row_group_size_</name></member>
      <member refid="classparquet_1_1_stream_writer_1a48f6a1cd4c494a0478ea61a06fa2d656" prot="private" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>row_group_writer_</name></member>
      <member refid="classparquet_1_1_stream_writer_1a59f37f9b46b4fd4d17d267fff8463003" prot="public" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>SetDefaultMaxRowGroupSize</name></member>
      <member refid="classparquet_1_1_stream_writer_1a6f0d136f39a8a2ccf0163d8e98e05fa0" prot="public" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>SetMaxRowGroupSize</name></member>
      <member refid="classparquet_1_1_stream_writer_1a114e27b01243f89388da4147d420f360" prot="public" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>SkipColumns</name></member>
      <member refid="classparquet_1_1_stream_writer_1a942e6675250bda48d3057dd4fa6a46db" prot="protected" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>SkipOptionalColumn</name></member>
      <member refid="classparquet_1_1_stream_writer_1a50f89d819f2b9f76dcf7b053f5b498d7" prot="public" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>StreamWriter</name></member>
      <member refid="classparquet_1_1_stream_writer_1a848d7ca043c532ddcfd8f418ef5626df" prot="public" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>StreamWriter</name></member>
      <member refid="classparquet_1_1_stream_writer_1a30cb032a1872fdb5d7826247a621bb14" prot="public" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>StreamWriter</name></member>
      <member refid="classparquet_1_1_stream_writer_1ab6c835c199bfa6f9c2c511f1f2359cdb" prot="public" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>StreamWriter</name></member>
      <member refid="classparquet_1_1_stream_writer_1a0553bb4e6be1d749cee84e0d20b67f81" prot="protected" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>Write</name></member>
      <member refid="classparquet_1_1_stream_writer_1a94bd1b52c1ca54f2ef0bd36c5c2d1b28" prot="protected" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>WriteFixedLength</name></member>
      <member refid="classparquet_1_1_stream_writer_1a03247fd0beab5355fd8a5a520081ad01" prot="protected" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>WriteNullValue</name></member>
      <member refid="classparquet_1_1_stream_writer_1a2771d1e9bf1a21380e99cf32c505eead" prot="protected" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>WriteVariableLength</name></member>
      <member refid="classparquet_1_1_stream_writer_1a2e5e562d06a87e22928c2347a143f540" prot="public" virt="non-virtual"><scope>parquet::StreamWriter</scope><name>~StreamWriter</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
