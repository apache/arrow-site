<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_device" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>arrow::Device</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::enable_shared_from_this&lt; Device &gt;</basecompoundref>
    <basecompoundref refid="classarrow_1_1util_1_1_equality_comparable" prot="public" virt="non-virtual">arrow::util::EqualityComparable&lt; Device &gt;</basecompoundref>
    <derivedcompoundref refid="classarrow_1_1_c_p_u_device" prot="public" virt="non-virtual">arrow::CPUDevice</derivedcompoundref>
    <derivedcompoundref refid="classarrow_1_1cuda_1_1_cuda_device" prot="public" virt="non-virtual">arrow::cuda::CudaDevice</derivedcompoundref>
    <includes refid="device_8h" local="no">arrow/device.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classarrow_1_1_device_1a02b860fa62500dbbcc2c9eb1dc56b7ca" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool arrow::Device::is_cpu_</definition>
        <argsstring></argsstring>
        <name>is_cpu_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/device.h" line="78" column="1" bodyfile="/arrow/cpp/src/arrow/device.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1_device_1adf74fdaa9671bc62208cc0d1adda947b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual arrow::Device::~Device</definition>
        <argsstring>()</argsstring>
        <name>~Device</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/device.h" line="43" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_device_1a64fa6c42b0237fab3002c0da05be613d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>const char *</type>
        <definition>virtual const char* arrow::Device::type_name</definition>
        <argsstring>() const =0</argsstring>
        <name>type_name</name>
        <reimplementedby refid="classarrow_1_1cuda_1_1_cuda_device_1a57b40c4ecf7bd25cc566c50be60da394">type_name</reimplementedby>
        <reimplementedby refid="classarrow_1_1_c_p_u_device_1a56de6467569661983bf89cca4e23e313">type_name</reimplementedby>
        <briefdescription>
<para>A shorthand for this device&apos;s type. </para>        </briefdescription>
        <detaileddescription>
<para>The returned value is different for each device class, but is the same for all instances of a given class. It can be used as a replacement for RTTI. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/device.h" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_device_1a308203da24624f8ef8df7329f214ef6f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::string</type>
        <definition>virtual std::string arrow::Device::ToString</definition>
        <argsstring>() const =0</argsstring>
        <name>ToString</name>
        <reimplementedby refid="classarrow_1_1cuda_1_1_cuda_device_1ae741b9314ceb089df43cd9d3ea9a05c8">ToString</reimplementedby>
        <reimplementedby refid="classarrow_1_1_c_p_u_device_1af136696c33197fac051e3cca0688f31e">ToString</reimplementedby>
        <briefdescription>
<para>A human-readable description of the device. </para>        </briefdescription>
        <detaileddescription>
<para>The returned value should be detailed enough to distinguish between different instances, where necessary. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/device.h" line="56" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_device_1acaaa334c017c8e0d097918a730d8544b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool arrow::Device::Equals</definition>
        <argsstring>(const Device &amp;) const =0</argsstring>
        <name>Equals</name>
        <reimplementedby refid="classarrow_1_1cuda_1_1_cuda_device_1a632ead1002d4f6a198f9e2cc875afe18">Equals</reimplementedby>
        <reimplementedby refid="classarrow_1_1_c_p_u_device_1a23a4f5100acda607a63371a89e5bb7e5">Equals</reimplementedby>
        <param>
          <type>const <ref refid="classarrow_1_1_device" kindref="compound">Device</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Whether this instance points to the same device as another one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/device.h" line="59" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_device_1acd6a82de24ea679e2041159b18cfe294" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::Device::is_cpu</definition>
        <argsstring>() const</argsstring>
        <name>is_cpu</name>
        <briefdescription>
<para>Whether this device is the main CPU device. </para>        </briefdescription>
        <detaileddescription>
<para>This shorthand method is very useful when deciding whether a memory address is CPU-accessible. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/device.h" line="65" column="1" bodyfile="/arrow/cpp/src/arrow/device.h" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_device_1a9615d7d1f5136d43bcf1061782197412" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_memory_manager" kindref="compound">MemoryManager</ref> &gt;</type>
        <definition>virtual std::shared_ptr&lt;MemoryManager&gt; arrow::Device::default_memory_manager</definition>
        <argsstring>()=0</argsstring>
        <name>default_memory_manager</name>
        <reimplementedby refid="classarrow_1_1cuda_1_1_cuda_device_1af55d521eca3e9be9962d3bce9ba03102">default_memory_manager</reimplementedby>
        <reimplementedby refid="classarrow_1_1_c_p_u_device_1ab5acfa03ea867c7b7fe4f903e8b19547">default_memory_manager</reimplementedby>
        <briefdescription>
<para>Return a <ref refid="classarrow_1_1_memory_manager" kindref="compound">MemoryManager</ref> instance tied to this device. </para>        </briefdescription>
        <detaileddescription>
<para>The returned instance uses default parameters for this device type&apos;s <ref refid="classarrow_1_1_memory_manager" kindref="compound">MemoryManager</ref> implementation. Some devices also allow constructing <ref refid="classarrow_1_1_memory_manager" kindref="compound">MemoryManager</ref> instances with non-default parameters. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/device.h" line="72" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classarrow_1_1_device_1a40af03efaa113e357d7f466ce3510fe7" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::Device::ARROW_DISALLOW_COPY_AND_ASSIGN</definition>
        <argsstring>(Device)</argsstring>
        <name>ARROW_DISALLOW_COPY_AND_ASSIGN</name>
        <param>
          <type><ref refid="classarrow_1_1_device" kindref="compound">Device</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/device.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_device_1a4cbc670928eb29bd33f96c3915648695" prot="protected" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::Device::Device</definition>
        <argsstring>(bool is_cpu=false)</argsstring>
        <name>Device</name>
        <param>
          <type>bool</type>
          <declname>is_cpu</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/device.h" line="76" column="1" bodyfile="/arrow/cpp/src/arrow/device.h" bodystart="76" bodyend="76"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>EXPERIMENTAL: Abstract interface for hardware devices. </para>    </briefdescription>
    <detaileddescription>
<para>This object represents a device with access to some memory spaces. When handling a <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> or raw memory address, it allows deciding in which context the raw memory address should be interpreted (e.g. CPU-accessible memory, or embedded memory on some particular GPU). </para>    </detaileddescription>
    <inheritancegraph>
      <node id="1202">
        <label>arrow::cuda::CudaDevice</label>
        <link refid="classarrow_1_1cuda_1_1_cuda_device"/>
        <childnode refid="1198" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1201">
        <label>arrow::CPUDevice</label>
        <link refid="classarrow_1_1_c_p_u_device"/>
        <childnode refid="1198" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1199">
        <label>std::enable_shared_from_this&lt; Device &gt;</label>
      </node>
      <node id="1198">
        <label>arrow::Device</label>
        <link refid="classarrow_1_1_device"/>
        <childnode refid="1199" relation="public-inheritance">
        </childnode>
        <childnode refid="1200" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1200">
        <label>arrow::util::EqualityComparable&lt; Device &gt;</label>
        <link refid="classarrow_1_1util_1_1_equality_comparable"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1204">
        <label>std::enable_shared_from_this&lt; Device &gt;</label>
      </node>
      <node id="1203">
        <label>arrow::Device</label>
        <link refid="classarrow_1_1_device"/>
        <childnode refid="1204" relation="public-inheritance">
        </childnode>
        <childnode refid="1205" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1205">
        <label>arrow::util::EqualityComparable&lt; Device &gt;</label>
        <link refid="classarrow_1_1util_1_1_equality_comparable"/>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/device.h" line="41" column="1" bodyfile="/arrow/cpp/src/arrow/device.h" bodystart="40" bodyend="79"/>
    <listofallmembers>
      <member refid="classarrow_1_1_device_1a40af03efaa113e357d7f466ce3510fe7" prot="protected" virt="non-virtual"><scope>arrow::Device</scope><name>ARROW_DISALLOW_COPY_AND_ASSIGN</name></member>
      <member refid="classarrow_1_1_device_1a9615d7d1f5136d43bcf1061782197412" prot="public" virt="pure-virtual"><scope>arrow::Device</scope><name>default_memory_manager</name></member>
      <member refid="classarrow_1_1_device_1a4cbc670928eb29bd33f96c3915648695" prot="protected" virt="non-virtual"><scope>arrow::Device</scope><name>Device</name></member>
      <member refid="classarrow_1_1_device_1acaaa334c017c8e0d097918a730d8544b" prot="public" virt="pure-virtual"><scope>arrow::Device</scope><name>Equals</name></member>
      <member refid="classarrow_1_1util_1_1_equality_comparable_1a140cfdea92ae17331d8db8f69aad082f" prot="public" virt="non-virtual" ambiguityscope="EqualityComparable&lt; Device &gt;::"><scope>arrow::Device</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_device_1acd6a82de24ea679e2041159b18cfe294" prot="public" virt="non-virtual"><scope>arrow::Device</scope><name>is_cpu</name></member>
      <member refid="classarrow_1_1_device_1a02b860fa62500dbbcc2c9eb1dc56b7ca" prot="protected" virt="non-virtual"><scope>arrow::Device</scope><name>is_cpu_</name></member>
      <member refid="classarrow_1_1util_1_1_equality_comparable_1a1a7ff2c6f720209bc960524c47ad0535" prot="public" virt="non-virtual"><scope>arrow::Device</scope><name>operator!=</name></member>
      <member refid="classarrow_1_1util_1_1_equality_comparable_1ac0e8ec25e77ece923689ee31c389200e" prot="public" virt="non-virtual"><scope>arrow::Device</scope><name>operator==</name></member>
      <member refid="classarrow_1_1_device_1a308203da24624f8ef8df7329f214ef6f" prot="public" virt="pure-virtual"><scope>arrow::Device</scope><name>ToString</name></member>
      <member refid="classarrow_1_1_device_1a64fa6c42b0237fab3002c0da05be613d" prot="public" virt="pure-virtual"><scope>arrow::Device</scope><name>type_name</name></member>
      <member refid="classarrow_1_1_device_1adf74fdaa9671bc62208cc0d1adda947b" prot="public" virt="virtual"><scope>arrow::Device</scope><name>~Device</name></member>
      <member refid="classarrow_1_1util_1_1_equality_comparable_1a14c5ed61e030855eef29edebc6355806" prot="public" virt="non-virtual"><scope>arrow::Device</scope><name>~EqualityComparable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
