<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structarrow_1_1compute_1_1_datum" kind="class" language="C++" prot="public">
    <compoundname>arrow::compute::Datum</compoundname>
    <includes refid="kernel_8h" local="no">arrow/compute/kernel.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="structarrow_1_1compute_1_1_datum_1ae1164fc67b6c27e5f39a7064fafd2ee6" prot="public" static="no">
        <name>type</name>
        <enumvalue id="structarrow_1_1compute_1_1_datum_1ae1164fc67b6c27e5f39a7064fafd2ee6a93a8e6ae66bd39e6f66623732190c7ad" prot="public">
          <name>NONE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structarrow_1_1compute_1_1_datum_1ae1164fc67b6c27e5f39a7064fafd2ee6af67bf720dedf0b00b8a901ccf71b5b97" prot="public">
          <name>SCALAR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structarrow_1_1compute_1_1_datum_1ae1164fc67b6c27e5f39a7064fafd2ee6a0338511a5afa9fba4e3902538e1f91ed" prot="public">
          <name>ARRAY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structarrow_1_1compute_1_1_datum_1ae1164fc67b6c27e5f39a7064fafd2ee6afaf77078cf2a26f90d518f266c0ee02e" prot="public">
          <name>CHUNKED_ARRAY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structarrow_1_1compute_1_1_datum_1ae1164fc67b6c27e5f39a7064fafd2ee6a30df8c66a1ba345b77d2c7014b5ca716" prot="public">
          <name>RECORD_BATCH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structarrow_1_1compute_1_1_datum_1ae1164fc67b6c27e5f39a7064fafd2ee6a0d5a6833df8890d7eea1a4ecfd49b70a" prot="public">
          <name>TABLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structarrow_1_1compute_1_1_datum_1ae1164fc67b6c27e5f39a7064fafd2ee6acd656e55e0c106a6f360a1b67e8a56cc" prot="public">
          <name>COLLECTION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="73" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="73" bodyend="73"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structarrow_1_1compute_1_1_datum_1a1341a0a64659deda898e0b53d094f505" prot="public" static="no" mutable="no">
        <type>util::variant&lt; decltype(<ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>), std::shared_ptr&lt; <ref refid="structarrow_1_1_scalar" kindref="compound">Scalar</ref> &gt;, std::shared_ptr&lt; <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &gt;, std::shared_ptr&lt; <ref refid="classarrow_1_1_chunked_array" kindref="compound">ChunkedArray</ref> &gt;, std::shared_ptr&lt; <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref> &gt;, std::shared_ptr&lt; <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> &gt;, std::vector&lt; <ref refid="structarrow_1_1compute_1_1_datum" kindref="compound">Datum</ref> &gt; &gt;</type>
        <definition>util::variant&lt;decltype(NULLPTR), std::shared_ptr&lt;Scalar&gt;, std::shared_ptr&lt;ArrayData&gt;, std::shared_ptr&lt;ChunkedArray&gt;, std::shared_ptr&lt;RecordBatch&gt;, std::shared_ptr&lt;Table&gt;, std::vector&lt;Datum&gt; &gt; arrow::compute::Datum::value</definition>
        <argsstring></argsstring>
        <name>value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="78" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structarrow_1_1compute_1_1_datum_1af13284bf6d4949a9cc1cb529a06268fc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::compute::Datum::Datum</definition>
        <argsstring>()</argsstring>
        <name>Datum</name>
        <briefdescription>
<para>Empty datum, to be populated elsewhere. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="81" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="81" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1compute_1_1_datum_1ab9678f366e0ffc7416b5b8c6148913b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::compute::Datum::Datum</definition>
        <argsstring>(const std::shared_ptr&lt; Scalar &gt; &amp;value)</argsstring>
        <name>Datum</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="structarrow_1_1_scalar" kindref="compound">Scalar</ref> &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="83" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="83" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1compute_1_1_datum_1a87b0edf42d69a7d53733c3c70b3c28f8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::compute::Datum::Datum</definition>
        <argsstring>(const std::shared_ptr&lt; ArrayData &gt; &amp;value)</argsstring>
        <name>Datum</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="85" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="85" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1compute_1_1_datum_1aad87489fb4ef280f2c8d965bf856178d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::compute::Datum::Datum</definition>
        <argsstring>(const std::shared_ptr&lt; Array &gt; &amp;value)</argsstring>
        <name>Datum</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="88" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="88" bodyend="89"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1compute_1_1_datum_1a859e00830f4573331b919aa33c84c2d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::compute::Datum::Datum</definition>
        <argsstring>(const std::shared_ptr&lt; ChunkedArray &gt; &amp;value)</argsstring>
        <name>Datum</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_chunked_array" kindref="compound">ChunkedArray</ref> &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="91" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="91" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1compute_1_1_datum_1a536b5c89243aeabb156881d3032ba8fc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::compute::Datum::Datum</definition>
        <argsstring>(const std::shared_ptr&lt; RecordBatch &gt; &amp;value)</argsstring>
        <name>Datum</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref> &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="93" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="93" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1compute_1_1_datum_1af9b49dafc0c7563b934914d8b756db41" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::compute::Datum::Datum</definition>
        <argsstring>(const std::shared_ptr&lt; Table &gt; &amp;value)</argsstring>
        <name>Datum</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="95" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="95" bodyend="96"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1compute_1_1_datum_1aa7d5faca8e15b9b6227a21966b04ac08" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::compute::Datum::Datum</definition>
        <argsstring>(const std::vector&lt; Datum &gt; &amp;value)</argsstring>
        <name>Datum</name>
        <param>
          <type>const std::vector&lt; <ref refid="structarrow_1_1compute_1_1_datum" kindref="compound">Datum</ref> &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="97" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="97" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1compute_1_1_datum_1a9c56d4aaba003ab7ff0033be5c92d371" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename</type>
            <defval><ref refid="namespacearrow_1a6ffa941ae85f4dd1545a9fad796324c6" kindref="member">enable_if_t</ref>&lt;std::is_base_of&lt;<ref refid="classarrow_1_1_array" kindref="compound">Array</ref>, T&gt;::<ref refid="structarrow_1_1compute_1_1_datum_1a1341a0a64659deda898e0b53d094f505" kindref="member">value</ref>&gt;</defval>
          </param>
        </templateparamlist>
        <type></type>
        <definition>arrow::compute::Datum::Datum</definition>
        <argsstring>(const std::shared_ptr&lt; T &gt; &amp;value)</argsstring>
        <name>Datum</name>
        <param>
          <type>const std::shared_ptr&lt; T &gt; &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="102" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="102" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1compute_1_1_datum_1a6f53f4756e83981e4083130dd7960e36" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::compute::Datum::Datum</definition>
        <argsstring>(bool value)</argsstring>
        <name>Datum</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="106" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="106" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1compute_1_1_datum_1a970201fea3d818ae6c753fa6b63f8839" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::compute::Datum::Datum</definition>
        <argsstring>(int8_t value)</argsstring>
        <name>Datum</name>
        <param>
          <type>int8_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="107" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1compute_1_1_datum_1a4edca0184af7b5b9f21d392029d9ed00" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::compute::Datum::Datum</definition>
        <argsstring>(uint8_t value)</argsstring>
        <name>Datum</name>
        <param>
          <type>uint8_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="108" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="108" bodyend="108"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1compute_1_1_datum_1a16dfa3f5d6a29b2bac367c1a0ba17c37" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::compute::Datum::Datum</definition>
        <argsstring>(int16_t value)</argsstring>
        <name>Datum</name>
        <param>
          <type>int16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="109" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="109" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1compute_1_1_datum_1a4bb126ef3ed9e8ffff32c5db13d8c676" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::compute::Datum::Datum</definition>
        <argsstring>(uint16_t value)</argsstring>
        <name>Datum</name>
        <param>
          <type>uint16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="110" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="110" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1compute_1_1_datum_1adae3481b9a2a8862f0717f9df51f3a2d" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::compute::Datum::Datum</definition>
        <argsstring>(int32_t value)</argsstring>
        <name>Datum</name>
        <param>
          <type>int32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="111" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1compute_1_1_datum_1a0a24b4d54c607a6c080f2e85b2a4f068" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::compute::Datum::Datum</definition>
        <argsstring>(uint32_t value)</argsstring>
        <name>Datum</name>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="112" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="112" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1compute_1_1_datum_1af9f39a8a94a0f9422460c33655f9b3d9" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::compute::Datum::Datum</definition>
        <argsstring>(int64_t value)</argsstring>
        <name>Datum</name>
        <param>
          <type>int64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="113" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="113" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1compute_1_1_datum_1ad5218eb777c1c71781a0c30164dcf124" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::compute::Datum::Datum</definition>
        <argsstring>(uint64_t value)</argsstring>
        <name>Datum</name>
        <param>
          <type>uint64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="114" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="114" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1compute_1_1_datum_1a028016e772cbfc360331c761da21ca60" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::compute::Datum::Datum</definition>
        <argsstring>(float value)</argsstring>
        <name>Datum</name>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="115" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="115" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1compute_1_1_datum_1a0141f79e08af4049355c301d9745d129" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::compute::Datum::Datum</definition>
        <argsstring>(double value)</argsstring>
        <name>Datum</name>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="116" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="116" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1compute_1_1_datum_1a42149c2e161aead5ae7ba424d3bf67ad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::compute::Datum::~Datum</definition>
        <argsstring>()</argsstring>
        <name>~Datum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="118" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="118" bodyend="118"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1compute_1_1_datum_1a3fce98fa0a734b9f40d050d15b58ba30" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::compute::Datum::Datum</definition>
        <argsstring>(const Datum &amp;other) noexcept</argsstring>
        <name>Datum</name>
        <param>
          <type>const <ref refid="structarrow_1_1compute_1_1_datum" kindref="compound">Datum</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="120" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="120" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1compute_1_1_datum_1a4a6950d8c3aceab49c91dbca029b5aad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structarrow_1_1compute_1_1_datum" kindref="compound">Datum</ref> &amp;</type>
        <definition>Datum&amp; arrow::compute::Datum::operator=</definition>
        <argsstring>(const Datum &amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="structarrow_1_1compute_1_1_datum" kindref="compound">Datum</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="122" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="122" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1compute_1_1_datum_1aa41c697628fe44a8decf0aa884db59d1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::compute::Datum::Datum</definition>
        <argsstring>(Datum &amp;&amp;other) noexcept</argsstring>
        <name>Datum</name>
        <param>
          <type><ref refid="structarrow_1_1compute_1_1_datum" kindref="compound">Datum</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="128" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="128" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1compute_1_1_datum_1a296dfe91e1b5cefeb0b0e916f62d9780" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structarrow_1_1compute_1_1_datum" kindref="compound">Datum</ref> &amp;</type>
        <definition>Datum&amp; arrow::compute::Datum::operator=</definition>
        <argsstring>(Datum &amp;&amp;other) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structarrow_1_1compute_1_1_datum" kindref="compound">Datum</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="130" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="130" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1compute_1_1_datum_1adcb3aa98cf8a42819bb252d9e158e1dd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structarrow_1_1compute_1_1_datum_1ae1164fc67b6c27e5f39a7064fafd2ee6" kindref="member">Datum::type</ref></type>
        <definition>Datum::type arrow::compute::Datum::kind</definition>
        <argsstring>() const</argsstring>
        <name>kind</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="135" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="135" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1compute_1_1_datum_1a27f774ccf0aea79b557a6485f1e378bd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &gt;</type>
        <definition>std::shared_ptr&lt;ArrayData&gt; arrow::compute::Datum::array</definition>
        <argsstring>() const</argsstring>
        <name>array</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="156" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="156" bodyend="158"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1compute_1_1_datum_1a7b8b774b951418f53dcf0a41643b3b53" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Array&gt; arrow::compute::Datum::make_array</definition>
        <argsstring>() const</argsstring>
        <name>make_array</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="160" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="160" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1compute_1_1_datum_1add3a24fbc016ad7f6f6b374a93c287cb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_chunked_array" kindref="compound">ChunkedArray</ref> &gt;</type>
        <definition>std::shared_ptr&lt;ChunkedArray&gt; arrow::compute::Datum::chunked_array</definition>
        <argsstring>() const</argsstring>
        <name>chunked_array</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="164" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="164" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1compute_1_1_datum_1a771f7fd8aa35dbdf1e9adfc9b539f203" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref> &gt;</type>
        <definition>std::shared_ptr&lt;RecordBatch&gt; arrow::compute::Datum::record_batch</definition>
        <argsstring>() const</argsstring>
        <name>record_batch</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="168" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="168" bodyend="170"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1compute_1_1_datum_1a9500494e8aebae2e14080d31d4658e07" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Table&gt; arrow::compute::Datum::table</definition>
        <argsstring>() const</argsstring>
        <name>table</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="172" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="172" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1compute_1_1_datum_1abe6ee6c7ed56c5b055e5760a5b3282a7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="structarrow_1_1compute_1_1_datum" kindref="compound">Datum</ref> &gt;</type>
        <definition>const std::vector&lt;Datum&gt; arrow::compute::Datum::collection</definition>
        <argsstring>() const</argsstring>
        <name>collection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="176" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="176" bodyend="178"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1compute_1_1_datum_1a8860865135e4c5526981c023e01c12ec" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="structarrow_1_1_scalar" kindref="compound">Scalar</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Scalar&gt; arrow::compute::Datum::scalar</definition>
        <argsstring>() const</argsstring>
        <name>scalar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="180" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="180" bodyend="182"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1compute_1_1_datum_1a57c3201fb146439464a8f67f2af1a459" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::compute::Datum::is_array</definition>
        <argsstring>() const</argsstring>
        <name>is_array</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="184" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="184" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1compute_1_1_datum_1a161763455ed027a8301ce846a34dd327" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::compute::Datum::is_arraylike</definition>
        <argsstring>() const</argsstring>
        <name>is_arraylike</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="186" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="186" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1compute_1_1_datum_1ab2c96b42eed17b5196e4bb2ade4da37c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::compute::Datum::is_scalar</definition>
        <argsstring>() const</argsstring>
        <name>is_scalar</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="190" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="190" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1compute_1_1_datum_1aacb09357480e0c91bf0b0b2eb04b5c9e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::compute::Datum::is_collection</definition>
        <argsstring>() const</argsstring>
        <name>is_collection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="192" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="192" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1compute_1_1_datum_1a52955347865f1d6cd2ce541e1ee80ab5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::compute::Datum::type</definition>
        <argsstring>() const</argsstring>
        <name>type</name>
        <briefdescription>
<para>The value type of the variant, if any. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>nullptr if no type </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="197" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="197" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1compute_1_1_datum_1af3e815055afa33a39d3f0cdad340b6f9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t arrow::compute::Datum::length</definition>
        <argsstring>() const</argsstring>
        <name>length</name>
        <briefdescription>
<para>The value length of the variant, if any. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>kUnknownLength if no type </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="211" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="211" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1compute_1_1_datum_1a4eb7ee8cfd61f3dc1f645b0aa40f38ce" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacearrow_1ad77c54b51dac02d857f3a26d11ed58b3" kindref="member">ArrayVector</ref></type>
        <definition>ArrayVector arrow::compute::Datum::chunks</definition>
        <argsstring>() const</argsstring>
        <name>chunks</name>
        <briefdescription>
<para>The array chunks of the variant, if any. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>empty if not arraylike </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="225" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="225" bodyend="233"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1compute_1_1_datum_1a23f7eeaaccab2907f1d80d7010670536" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::compute::Datum::Equals</definition>
        <argsstring>(const Datum &amp;other) const</argsstring>
        <name>Equals</name>
        <param>
          <type>const <ref refid="structarrow_1_1compute_1_1_datum" kindref="compound">Datum</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="235" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="235" bodyend="256"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Variant type for various Arrow C++ data structures. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="72" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="72" bodyend="257"/>
    <listofallmembers>
      <member refid="structarrow_1_1compute_1_1_datum_1ae1164fc67b6c27e5f39a7064fafd2ee6a0338511a5afa9fba4e3902538e1f91ed" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>ARRAY</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1a27f774ccf0aea79b557a6485f1e378bd" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>array</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1add3a24fbc016ad7f6f6b374a93c287cb" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>chunked_array</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1ae1164fc67b6c27e5f39a7064fafd2ee6afaf77078cf2a26f90d518f266c0ee02e" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>CHUNKED_ARRAY</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1a4eb7ee8cfd61f3dc1f645b0aa40f38ce" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>chunks</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1ae1164fc67b6c27e5f39a7064fafd2ee6acd656e55e0c106a6f360a1b67e8a56cc" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>COLLECTION</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1abe6ee6c7ed56c5b055e5760a5b3282a7" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>collection</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1af13284bf6d4949a9cc1cb529a06268fc" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>Datum</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1ab9678f366e0ffc7416b5b8c6148913b5" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>Datum</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1a87b0edf42d69a7d53733c3c70b3c28f8" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>Datum</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1aad87489fb4ef280f2c8d965bf856178d" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>Datum</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1a859e00830f4573331b919aa33c84c2d9" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>Datum</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1a536b5c89243aeabb156881d3032ba8fc" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>Datum</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1af9b49dafc0c7563b934914d8b756db41" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>Datum</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1aa7d5faca8e15b9b6227a21966b04ac08" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>Datum</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1a9c56d4aaba003ab7ff0033be5c92d371" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>Datum</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1a6f53f4756e83981e4083130dd7960e36" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>Datum</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1a970201fea3d818ae6c753fa6b63f8839" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>Datum</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1a4edca0184af7b5b9f21d392029d9ed00" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>Datum</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1a16dfa3f5d6a29b2bac367c1a0ba17c37" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>Datum</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1a4bb126ef3ed9e8ffff32c5db13d8c676" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>Datum</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1adae3481b9a2a8862f0717f9df51f3a2d" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>Datum</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1a0a24b4d54c607a6c080f2e85b2a4f068" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>Datum</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1af9f39a8a94a0f9422460c33655f9b3d9" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>Datum</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1ad5218eb777c1c71781a0c30164dcf124" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>Datum</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1a028016e772cbfc360331c761da21ca60" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>Datum</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1a0141f79e08af4049355c301d9745d129" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>Datum</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1a3fce98fa0a734b9f40d050d15b58ba30" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>Datum</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1aa41c697628fe44a8decf0aa884db59d1" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>Datum</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1a23f7eeaaccab2907f1d80d7010670536" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>Equals</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1a57c3201fb146439464a8f67f2af1a459" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>is_array</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1a161763455ed027a8301ce846a34dd327" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>is_arraylike</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1aacb09357480e0c91bf0b0b2eb04b5c9e" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>is_collection</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1ab2c96b42eed17b5196e4bb2ade4da37c" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>is_scalar</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1adcb3aa98cf8a42819bb252d9e158e1dd" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>kind</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1af3e815055afa33a39d3f0cdad340b6f9" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>length</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1a7b8b774b951418f53dcf0a41643b3b53" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>make_array</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1ae1164fc67b6c27e5f39a7064fafd2ee6a93a8e6ae66bd39e6f66623732190c7ad" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>NONE</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1a4a6950d8c3aceab49c91dbca029b5aad" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>operator=</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1a296dfe91e1b5cefeb0b0e916f62d9780" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>operator=</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1a771f7fd8aa35dbdf1e9adfc9b539f203" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>record_batch</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1ae1164fc67b6c27e5f39a7064fafd2ee6a30df8c66a1ba345b77d2c7014b5ca716" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>RECORD_BATCH</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1ae1164fc67b6c27e5f39a7064fafd2ee6af67bf720dedf0b00b8a901ccf71b5b97" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>SCALAR</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1a8860865135e4c5526981c023e01c12ec" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>scalar</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1ae1164fc67b6c27e5f39a7064fafd2ee6a0d5a6833df8890d7eea1a4ecfd49b70a" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>TABLE</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1a9500494e8aebae2e14080d31d4658e07" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>table</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1ae1164fc67b6c27e5f39a7064fafd2ee6" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>type</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1a52955347865f1d6cd2ce541e1ee80ab5" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>type</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1a1341a0a64659deda898e0b53d094f505" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>value</name></member>
      <member refid="structarrow_1_1compute_1_1_datum_1a42149c2e161aead5ae7ba424d3bf67ad" prot="public" virt="non-virtual"><scope>arrow::compute::Datum</scope><name>~Datum</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
