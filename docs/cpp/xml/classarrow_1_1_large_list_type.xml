<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_large_list_type" kind="class" language="C++" prot="public">
    <compoundname>arrow::LargeListType</compoundname>
    <basecompoundref refid="classarrow_1_1_base_list_type" prot="public" virt="non-virtual">arrow::BaseListType</basecompoundref>
    <includes refid="type_8h" local="no">arrow/type.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classarrow_1_1_large_list_type_1af1a77b6511f14bbf8485cbd825b795f9" prot="public" static="no">
        <type>int64_t</type>
        <definition>using arrow::LargeListType::offset_type =  int64_t</definition>
        <argsstring></argsstring>
        <name>offset_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="690" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="690" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classarrow_1_1_large_list_type_1ad6b8c7a397c1ebb2c7bb3fe5b8be05b2" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref></type>
        <definition>constexpr Type::type arrow::LargeListType::type_id</definition>
        <argsstring></argsstring>
        <name>type_id</name>
        <initializer>= <ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a573d9118191906864e808bf3d5c75049" kindref="member">Type::LARGE_LIST</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="689" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="689" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1_large_list_type_1aee798541e6d1c03bbd5f65a6b7e8f290" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const char *</type>
        <definition>static constexpr const char* arrow::LargeListType::type_name</definition>
        <argsstring>()</argsstring>
        <name>type_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="692" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="692" bodyend="692"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1_large_list_type_1a831c42342f89f01fb188bb47eb46f8ce" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::LargeListType::LargeListType</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;value_type)</argsstring>
        <name>LargeListType</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>value_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="695" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="695" bodyend="696"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_large_list_type_1ad234897c1f44e553a952c6151acf3d98" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::LargeListType::LargeListType</definition>
        <argsstring>(const std::shared_ptr&lt; Field &gt; &amp;value_field)</argsstring>
        <name>LargeListType</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt; &amp;</type>
          <declname>value_field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="698" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="698" bodyend="701"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_large_list_type_1a56516c286c62a40e51f94281b024cdde" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="structarrow_1_1_data_type_layout" kindref="compound">DataTypeLayout</ref></type>
        <definition>DataTypeLayout arrow::LargeListType::layout</definition>
        <argsstring>() const override</argsstring>
        <name>layout</name>
        <reimplements refid="classarrow_1_1_data_type_1a4fe70f6a45eda029ea118c8470ff925e">layout</reimplements>
        <briefdescription>
<para>Return the data type layout. </para>        </briefdescription>
        <detaileddescription>
<para>Children are not included.</para><para><simplesect kind="note"><para>Experimental API </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="703" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="703" bodyend="706"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_large_list_type_1a82769560f063232ddf248c62b4f96c6d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string arrow::LargeListType::ToString</definition>
        <argsstring>() const override</argsstring>
        <name>ToString</name>
        <reimplements refid="classarrow_1_1_data_type_1a944727354fb11138ebd46368319598f2">ToString</reimplements>
        <briefdescription>
<para>A string representation of the type, including any children. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="708" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_large_list_type_1ac639156265552e6b9372afa525a8af50" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string arrow::LargeListType::name</definition>
        <argsstring>() const override</argsstring>
        <name>name</name>
        <reimplements refid="classarrow_1_1_data_type_1a94985d12273f5dd353d6142921299d4d">name</reimplements>
        <briefdescription>
<para>A string name of the type, omitting any child fields. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Experimental API </para></simplesect>
<simplesect kind="since"><para>0.7.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="710" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="710" bodyend="710"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classarrow_1_1_large_list_type_1a76a1871c5a0ab8f7617bde12a4fd6844" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arrow::LargeListType::ComputeFingerprint</definition>
        <argsstring>() const override</argsstring>
        <name>ComputeFingerprint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="713" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Concrete type class for large list data. </para>    </briefdescription>
    <detaileddescription>
<para><ref refid="classarrow_1_1_large_list_type" kindref="compound">LargeListType</ref> is like <ref refid="classarrow_1_1_list_type" kindref="compound">ListType</ref> but with 64-bit rather than 32-bit offsets. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="2740">
        <label>arrow::ParametricType</label>
        <link refid="classarrow_1_1_parametric_type"/>
      </node>
      <node id="2737">
        <label>arrow::NestedType</label>
        <link refid="classarrow_1_1_nested_type"/>
        <childnode refid="2738" relation="public-inheritance">
        </childnode>
        <childnode refid="2740" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2738">
        <label>arrow::DataType</label>
        <link refid="classarrow_1_1_data_type"/>
        <childnode refid="2739" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2739">
        <label>arrow::detail::Fingerprintable</label>
      </node>
      <node id="2735">
        <label>arrow::LargeListType</label>
        <link refid="classarrow_1_1_large_list_type"/>
        <childnode refid="2736" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2736">
        <label>arrow::BaseListType</label>
        <link refid="classarrow_1_1_base_list_type"/>
        <childnode refid="2737" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2746">
        <label>arrow::ParametricType</label>
        <link refid="classarrow_1_1_parametric_type"/>
      </node>
      <node id="2743">
        <label>arrow::NestedType</label>
        <link refid="classarrow_1_1_nested_type"/>
        <childnode refid="2744" relation="public-inheritance">
        </childnode>
        <childnode refid="2746" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2744">
        <label>arrow::DataType</label>
        <link refid="classarrow_1_1_data_type"/>
        <childnode refid="2745" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2745">
        <label>arrow::detail::Fingerprintable</label>
      </node>
      <node id="2741">
        <label>arrow::LargeListType</label>
        <link refid="classarrow_1_1_large_list_type"/>
        <childnode refid="2742" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2742">
        <label>arrow::BaseListType</label>
        <link refid="classarrow_1_1_base_list_type"/>
        <childnode refid="2743" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/type.h" line="687" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="687" bodyend="714"/>
    <listofallmembers>
      <member refid="classarrow_1_1_data_type_1a97571c4039e363f7ebcb09f7c789064a" prot="public" virt="non-virtual"><scope>arrow::LargeListType</scope><name>Accept</name></member>
      <member refid="classarrow_1_1_data_type_1a3c9f77b8d895abd8618566386cbeb7c0" prot="public" virt="non-virtual"><scope>arrow::LargeListType</scope><name>child</name></member>
      <member refid="classarrow_1_1_data_type_1a36061c037a2e6e974cc3b22dfb6a5bac" prot="public" virt="non-virtual"><scope>arrow::LargeListType</scope><name>children</name></member>
      <member refid="classarrow_1_1_data_type_1a8dd2f042289733133c386463afcea902" prot="protected" virt="non-virtual"><scope>arrow::LargeListType</scope><name>children_</name></member>
      <member refid="classarrow_1_1_large_list_type_1a76a1871c5a0ab8f7617bde12a4fd6844" prot="protected" virt="non-virtual"><scope>arrow::LargeListType</scope><name>ComputeFingerprint</name></member>
      <member refid="classarrow_1_1_data_type_1a1e0bf7cc98ce39872b8044f375d7de6b" prot="protected" virt="non-virtual"><scope>arrow::LargeListType</scope><name>ComputeMetadataFingerprint</name></member>
      <member refid="classarrow_1_1_data_type_1a1b8a7ece05983649f67396177f40e844" prot="public" virt="non-virtual"><scope>arrow::LargeListType</scope><name>DataType</name></member>
      <member refid="classarrow_1_1_data_type_1aaf003113bb8f4c51a03a16f4b27a52bb" prot="public" virt="non-virtual"><scope>arrow::LargeListType</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_data_type_1ae974f4c707ef998d25368d278818af6b" prot="public" virt="non-virtual"><scope>arrow::LargeListType</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_data_type_1a5ec6a1c93420c68e9c8065d4a56ad645" prot="public" virt="non-virtual"><scope>arrow::LargeListType</scope><name>id</name></member>
      <member refid="classarrow_1_1_data_type_1aa2704f1cfc50018d02e109b32f67e422" prot="protected" virt="non-virtual"><scope>arrow::LargeListType</scope><name>id_</name></member>
      <member refid="classarrow_1_1_large_list_type_1a831c42342f89f01fb188bb47eb46f8ce" prot="public" virt="non-virtual"><scope>arrow::LargeListType</scope><name>LargeListType</name></member>
      <member refid="classarrow_1_1_large_list_type_1ad234897c1f44e553a952c6151acf3d98" prot="public" virt="non-virtual"><scope>arrow::LargeListType</scope><name>LargeListType</name></member>
      <member refid="classarrow_1_1_large_list_type_1a56516c286c62a40e51f94281b024cdde" prot="public" virt="virtual"><scope>arrow::LargeListType</scope><name>layout</name></member>
      <member refid="classarrow_1_1_large_list_type_1ac639156265552e6b9372afa525a8af50" prot="public" virt="virtual"><scope>arrow::LargeListType</scope><name>name</name></member>
      <member refid="classarrow_1_1_data_type_1ac8920179a6c1e7f434c495d5ec4662f1" prot="public" virt="non-virtual"><scope>arrow::LargeListType</scope><name>num_children</name></member>
      <member refid="classarrow_1_1_large_list_type_1af1a77b6511f14bbf8485cbd825b795f9" prot="public" virt="non-virtual"><scope>arrow::LargeListType</scope><name>offset_type</name></member>
      <member refid="classarrow_1_1_large_list_type_1a82769560f063232ddf248c62b4f96c6d" prot="public" virt="virtual"><scope>arrow::LargeListType</scope><name>ToString</name></member>
      <member refid="classarrow_1_1_large_list_type_1ad6b8c7a397c1ebb2c7bb3fe5b8be05b2" prot="public" virt="non-virtual"><scope>arrow::LargeListType</scope><name>type_id</name></member>
      <member refid="classarrow_1_1_large_list_type_1aee798541e6d1c03bbd5f65a6b7e8f290" prot="public" virt="non-virtual"><scope>arrow::LargeListType</scope><name>type_name</name></member>
      <member refid="classarrow_1_1_base_list_type_1a96796f232e5c1c97fc68ee09dc097446" prot="public" virt="non-virtual"><scope>arrow::LargeListType</scope><name>value_field</name></member>
      <member refid="classarrow_1_1_base_list_type_1ad484128f731e55fa51c1f70a704e3857" prot="public" virt="non-virtual"><scope>arrow::LargeListType</scope><name>value_type</name></member>
      <member refid="classarrow_1_1_data_type_1a268b7e57ebec17a48930c73d8c0605d2" prot="public" virt="non-virtual"><scope>arrow::LargeListType</scope><name>~DataType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
