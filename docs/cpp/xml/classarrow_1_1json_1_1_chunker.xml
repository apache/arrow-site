<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1json_1_1_chunker" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>arrow::json::Chunker</compoundname>
    <includes refid="json_2chunker_8h" local="no">arrow/json/chunker.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1json_1_1_chunker_1a1392ceab841bd242f8ab4babbd68e05c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual arrow::json::Chunker::~Chunker</definition>
        <argsstring>()=default</argsstring>
        <name>~Chunker</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/json/chunker.h" line="41" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1json_1_1_chunker_1a2c840697e676e60169c4e0056870b523" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>virtual Status arrow::json::Chunker::Process</definition>
        <argsstring>(std::shared_ptr&lt; Buffer &gt; block, std::shared_ptr&lt; Buffer &gt; *whole, std::shared_ptr&lt; Buffer &gt; *partial)=0</argsstring>
        <name>Process</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;</type>
          <declname>block</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; *</type>
          <declname>whole</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; *</type>
          <declname>partial</declname>
        </param>
        <briefdescription>
<para>Carve up a chunk in a block of data to contain only whole objects. </para>        </briefdescription>
        <detaileddescription>
<para>Post-conditions:<itemizedlist>
<listitem><para>block == whole + partial</para></listitem><listitem><para><computeroutput>whole</computeroutput> is a valid block of JSON data</para></listitem><listitem><para><computeroutput>partial</computeroutput> doesn&apos;t contain an entire JSON object</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">block</parametername>
</parameternamelist>
<parameterdescription>
<para>json data to be chunked </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">whole</parametername>
</parameternamelist>
<parameterdescription>
<para>subrange of block containing whole json objects </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">partial</parametername>
</parameternamelist>
<parameterdescription>
<para>subrange of block a partial json object </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/json/chunker.h" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1json_1_1_chunker_1af6e5a59366c366e8ecdea870e5cae629" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>virtual Status arrow::json::Chunker::ProcessWithPartial</definition>
        <argsstring>(std::shared_ptr&lt; Buffer &gt; partial, std::shared_ptr&lt; Buffer &gt; block, std::shared_ptr&lt; Buffer &gt; *completion, std::shared_ptr&lt; Buffer &gt; *rest)=0</argsstring>
        <name>ProcessWithPartial</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;</type>
          <declname>partial</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;</type>
          <declname>block</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; *</type>
          <declname>completion</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; *</type>
          <declname>rest</declname>
        </param>
        <briefdescription>
<para>Carve the completion of a partial object out of a block. </para>        </briefdescription>
        <detaileddescription>
<para>Post-conditions:<itemizedlist>
<listitem><para>block == completion + rest</para></listitem><listitem><para><computeroutput>partial + completion</computeroutput> is a valid block of JSON data</para></listitem><listitem><para><computeroutput>completion</computeroutput> doesn&apos;t contain an entire JSON object</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">partial</parametername>
</parameternamelist>
<parameterdescription>
<para>incomplete json object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">block</parametername>
</parameternamelist>
<parameterdescription>
<para>json data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">completion</parametername>
</parameternamelist>
<parameterdescription>
<para>subrange of block containing the completion of partial </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">rest</parametername>
</parameternamelist>
<parameterdescription>
<para>subrange of block containing what completion does not cover </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/json/chunker.h" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1json_1_1_chunker_1ad494d2a61b04ea83ea8d84851a8e2efc" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>virtual Status arrow::json::Chunker::ProcessFinal</definition>
        <argsstring>(std::shared_ptr&lt; Buffer &gt; partial, std::shared_ptr&lt; Buffer &gt; block, std::shared_ptr&lt; Buffer &gt; *completion, std::shared_ptr&lt; Buffer &gt; *rest)=0</argsstring>
        <name>ProcessFinal</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;</type>
          <declname>partial</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;</type>
          <declname>block</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; *</type>
          <declname>completion</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; *</type>
          <declname>rest</declname>
        </param>
        <briefdescription>
<para>Like ProcessWithPartial, but for the lastblock of a file. </para>        </briefdescription>
        <detaileddescription>
<para>This method allows for a final JSON object without a trailing newline (ProcessWithPartial would return an error in that case).</para><para>Post-conditions:<itemizedlist>
<listitem><para>block == completion + rest</para></listitem><listitem><para><computeroutput>partial + completion</computeroutput> is a valid block of JSON data</para></listitem><listitem><para><computeroutput>completion</computeroutput> doesn&apos;t contain an entire JSON object </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/json/chunker.h" line="81" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1json_1_1_chunker_1a0f061108122b1faf7a5726f123c1618f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classarrow_1_1json_1_1_chunker" kindref="compound">Chunker</ref> &gt;</type>
        <definition>static std::unique_ptr&lt;Chunker&gt; arrow::json::Chunker::Make</definition>
        <argsstring>(const ParseOptions &amp;options)</argsstring>
        <name>Make</name>
        <param>
          <type>const <ref refid="structarrow_1_1json_1_1_parse_options" kindref="compound">ParseOptions</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/json/chunker.h" line="86" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classarrow_1_1json_1_1_chunker_1add0c034410082b7ff5bf1dcde7b39aac" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::json::Chunker::Chunker</definition>
        <argsstring>()=default</argsstring>
        <name>Chunker</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/json/chunker.h" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1json_1_1_chunker_1a42bfb19203e3974f3fbc3c091dccc617" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::json::Chunker::ARROW_DISALLOW_COPY_AND_ASSIGN</definition>
        <argsstring>(Chunker)</argsstring>
        <name>ARROW_DISALLOW_COPY_AND_ASSIGN</name>
        <param>
          <type><ref refid="classarrow_1_1json_1_1_chunker" kindref="compound">Chunker</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/json/chunker.h" line="90" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A reusable block-based chunker for JSON data. </para>    </briefdescription>
    <detaileddescription>
<para>The chunker takes a block of JSON data and finds a suitable place to cut it up without splitting an object. </para>    </detaileddescription>
    <location file="/arrow/cpp/src/arrow/json/chunker.h" line="39" column="1" bodyfile="/arrow/cpp/src/arrow/json/chunker.h" bodystart="39" bodyend="91"/>
    <listofallmembers>
      <member refid="classarrow_1_1json_1_1_chunker_1a42bfb19203e3974f3fbc3c091dccc617" prot="protected" virt="non-virtual"><scope>arrow::json::Chunker</scope><name>ARROW_DISALLOW_COPY_AND_ASSIGN</name></member>
      <member refid="classarrow_1_1json_1_1_chunker_1add0c034410082b7ff5bf1dcde7b39aac" prot="protected" virt="non-virtual"><scope>arrow::json::Chunker</scope><name>Chunker</name></member>
      <member refid="classarrow_1_1json_1_1_chunker_1a0f061108122b1faf7a5726f123c1618f" prot="public" virt="non-virtual"><scope>arrow::json::Chunker</scope><name>Make</name></member>
      <member refid="classarrow_1_1json_1_1_chunker_1a2c840697e676e60169c4e0056870b523" prot="public" virt="pure-virtual"><scope>arrow::json::Chunker</scope><name>Process</name></member>
      <member refid="classarrow_1_1json_1_1_chunker_1ad494d2a61b04ea83ea8d84851a8e2efc" prot="public" virt="pure-virtual"><scope>arrow::json::Chunker</scope><name>ProcessFinal</name></member>
      <member refid="classarrow_1_1json_1_1_chunker_1af6e5a59366c366e8ecdea870e5cae629" prot="public" virt="pure-virtual"><scope>arrow::json::Chunker</scope><name>ProcessWithPartial</name></member>
      <member refid="classarrow_1_1json_1_1_chunker_1a1392ceab841bd242f8ab4babbd68e05c" prot="public" virt="virtual"><scope>arrow::json::Chunker</scope><name>~Chunker</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
