<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1cuda_1_1_cuda_context" kind="class" language="C++" prot="public">
    <compoundname>arrow::cuda::CudaContext</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::enable_shared_from_this&lt; CudaContext &gt;</basecompoundref>
    <includes refid="cuda__context_8h" local="no">arrow/gpu/cuda_context.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classarrow_1_1cuda_1_1_cuda_context_1a8dc9b3aa5589d99edb6df0bfc9f3c113" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; Impl &gt;</type>
        <definition>std::unique_ptr&lt;Impl&gt; arrow::cuda::CudaContext::impl_</definition>
        <argsstring></argsstring>
        <name>impl_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="362" column="1" bodyfile="/arrow/cpp/src/arrow/gpu/cuda_context.h" bodystart="361" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classarrow_1_1cuda_1_1_cuda_context_1a9a63715d21d223f39d48f10e553308a7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class CudaBuffer</definition>
        <argsstring></argsstring>
        <name>CudaBuffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="364" column="1" bodyfile="/arrow/cpp/src/arrow/gpu/cuda_context.h" bodystart="364" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classarrow_1_1cuda_1_1_cuda_context_1a8826918627c48382075d2435f2d751ed" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class CudaBufferReader</definition>
        <argsstring></argsstring>
        <name>CudaBufferReader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="365" column="1" bodyfile="/arrow/cpp/src/arrow/gpu/cuda_context.h" bodystart="365" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classarrow_1_1cuda_1_1_cuda_context_1a800a9758eea43a5ec89dde1658777434" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class CudaBufferWriter</definition>
        <argsstring></argsstring>
        <name>CudaBufferWriter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="366" column="1" bodyfile="/arrow/cpp/src/arrow/gpu/cuda_context.h" bodystart="366" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classarrow_1_1cuda_1_1_cuda_context_1af8631e429d4a54336e15c1272492651c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class CudaDevice</definition>
        <argsstring></argsstring>
        <name>CudaDevice</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="367" column="1" bodyfile="/arrow/cpp/src/arrow/gpu/cuda_context.h" bodystart="367" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classarrow_1_1cuda_1_1_cuda_context_1a2d6807b1861c4b896d2d1844eadc752e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class CudaMemoryManager</definition>
        <argsstring></argsstring>
        <name>CudaMemoryManager</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="368" column="1" bodyfile="/arrow/cpp/src/arrow/gpu/cuda_context.h" bodystart="368" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_context_1a5c6d09d34480de0822efdecf294ae9bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::cuda::CudaContext::~CudaContext</definition>
        <argsstring>()</argsstring>
        <name>~CudaContext</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="238" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_context_1adbe3c44dcd110fb00c954de38a3e3e0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::cuda::CudaContext::Close</definition>
        <argsstring>()</argsstring>
        <name>Close</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="240" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_context_1a836d70bdb85abbe60bf861d2b6d01d62" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1cuda_1_1_cuda_buffer" kindref="compound">CudaBuffer</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;CudaBuffer&gt; &gt; arrow::cuda::CudaContext::Allocate</definition>
        <argsstring>(int64_t nbytes)</argsstring>
        <name>Allocate</name>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
<para>Allocate CUDA memory on GPU device for this context. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the allocated buffer </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="245" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_context_1ae1f7fd73ef674ac0a670467d72cc28e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::cuda::CudaContext::Allocate</definition>
        <argsstring>(int64_t nbytes, std::shared_ptr&lt; CudaBuffer &gt; *out)</argsstring>
        <name>Allocate</name>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1cuda_1_1_cuda_buffer" kindref="compound">CudaBuffer</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Allocate CUDA memory on GPU device for this context. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the allocated buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="252" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_context_1aa08710d029fe38ea3ec8ad065ffe50fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::cuda::CudaContext::Free</definition>
        <argsstring>(void *device_ptr, int64_t nbytes)</argsstring>
        <name>Free</name>
        <param>
          <type>void *</type>
          <declname>device_ptr</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
<para>Release CUDA memory on GPU device for this context. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">device_ptr</parametername>
</parameternamelist>
<parameterdescription>
<para>the buffer address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="258" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_context_1a32f1e6f2fa80d1762ba9f559e14af27c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1cuda_1_1_cuda_buffer" kindref="compound">CudaBuffer</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;CudaBuffer&gt; &gt; arrow::cuda::CudaContext::View</definition>
        <argsstring>(uint8_t *data, int64_t nbytes)</argsstring>
        <name>View</name>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
<para>Create a view of CUDA memory on GPU device of this context. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>the starting device address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the view buffer</para></simplesect>
<simplesect kind="note"><para>The caller is responsible for allocating and freeing the memory as well as ensuring that the memory belongs to the CUDA context that this <ref refid="classarrow_1_1cuda_1_1_cuda_context" kindref="compound">CudaContext</ref> instance holds. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="268" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_context_1a20f0a6eaa90944b58a99f9bccd52497d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::cuda::CudaContext::View</definition>
        <argsstring>(uint8_t *data, int64_t nbytes, std::shared_ptr&lt; CudaBuffer &gt; *out)</argsstring>
        <name>View</name>
        <param>
          <type>uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1cuda_1_1_cuda_buffer" kindref="compound">CudaBuffer</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Create a view of CUDA memory on GPU device of this context. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>the starting device address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the view buffer </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></para></simplesect>
<simplesect kind="note"><para>The caller is responsible for allocating and freeing the memory as well as ensuring that the memory belongs to the CUDA context that this <ref refid="classarrow_1_1cuda_1_1_cuda_context" kindref="compound">CudaContext</ref> instance holds. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="280" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_context_1a6f8c1f0e4df6d368e36859d59f17dbf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1cuda_1_1_cuda_buffer" kindref="compound">CudaBuffer</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;CudaBuffer&gt; &gt; arrow::cuda::CudaContext::OpenIpcBuffer</definition>
        <argsstring>(const CudaIpcMemHandle &amp;ipc_handle)</argsstring>
        <name>OpenIpcBuffer</name>
        <param>
          <type>const <ref refid="classarrow_1_1cuda_1_1_cuda_ipc_mem_handle" kindref="compound">CudaIpcMemHandle</ref> &amp;</type>
          <declname>ipc_handle</declname>
        </param>
        <briefdescription>
<para>Open existing CUDA IPC memory handle. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ipc_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>opaque pointer to CUipcMemHandle (driver API) </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a <ref refid="classarrow_1_1cuda_1_1_cuda_buffer" kindref="compound">CudaBuffer</ref> referencing the IPC segment </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="285" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_context_1a71525204ccd5e3a30f8456b6ca29dc38" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::cuda::CudaContext::OpenIpcBuffer</definition>
        <argsstring>(const CudaIpcMemHandle &amp;ipc_handle, std::shared_ptr&lt; CudaBuffer &gt; *out)</argsstring>
        <name>OpenIpcBuffer</name>
        <param>
          <type>const <ref refid="classarrow_1_1cuda_1_1_cuda_ipc_mem_handle" kindref="compound">CudaIpcMemHandle</ref> &amp;</type>
          <declname>ipc_handle</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1cuda_1_1_cuda_buffer" kindref="compound">CudaBuffer</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Open existing CUDA IPC memory handle. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ipc_handle</parametername>
</parameternamelist>
<parameterdescription>
<para>opaque pointer to CUipcMemHandle (driver API) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classarrow_1_1cuda_1_1_cuda_buffer" kindref="compound">CudaBuffer</ref> referencing the IPC segment </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="292" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_context_1a3228bd973c2da795b1b916f81d3bd164" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::cuda::CudaContext::CloseIpcBuffer</definition>
        <argsstring>(CudaBuffer *buffer)</argsstring>
        <name>CloseIpcBuffer</name>
        <param>
          <type><ref refid="classarrow_1_1cuda_1_1_cuda_buffer" kindref="compound">CudaBuffer</ref> *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Close memory mapped with IPC buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classarrow_1_1cuda_1_1_cuda_buffer" kindref="compound">CudaBuffer</ref> referencing </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="298" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_context_1a80b22b35b08acac1c0a7b796932612c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::cuda::CudaContext::Synchronize</definition>
        <argsstring>(void)</argsstring>
        <name>Synchronize</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Block until the all device tasks are completed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="301" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_context_1a4846be0dcaaa16833c3275b1156dcb78" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t arrow::cuda::CudaContext::bytes_allocated</definition>
        <argsstring>() const</argsstring>
        <name>bytes_allocated</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="303" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_context_1a6e96e4e5ef6abaecf3448d0f9563b34c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* arrow::cuda::CudaContext::handle</definition>
        <argsstring>() const</argsstring>
        <name>handle</name>
        <briefdescription>
<para>Expose CUDA context handle to other libraries. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="306" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_context_1ac1c28d2d0b1bb58a4aa07bf52f45945d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1cuda_1_1_cuda_memory_manager" kindref="compound">CudaMemoryManager</ref> &gt;</type>
        <definition>std::shared_ptr&lt;CudaMemoryManager&gt; arrow::cuda::CudaContext::memory_manager</definition>
        <argsstring>() const</argsstring>
        <name>memory_manager</name>
        <briefdescription>
<para>Return the default memory manager tied to this context&apos;s device. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="309" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_context_1a3586821e56c60693f1eb67039298fdf4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1cuda_1_1_cuda_device" kindref="compound">CudaDevice</ref> &gt;</type>
        <definition>std::shared_ptr&lt;CudaDevice&gt; arrow::cuda::CudaContext::device</definition>
        <argsstring>() const</argsstring>
        <name>device</name>
        <briefdescription>
<para>Return the device instance associated with this context. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="312" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_context_1ab5427be57b455cffa58b353ad8d6fdbf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int arrow::cuda::CudaContext::device_number</definition>
        <argsstring>() const</argsstring>
        <name>device_number</name>
        <briefdescription>
<para>Return the logical device number. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="315" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_context_1af242669d7f31c122547ab562b2a65e30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; uintptr_t &gt;</type>
        <definition>Result&lt;uintptr_t&gt; arrow::cuda::CudaContext::GetDeviceAddress</definition>
        <argsstring>(uint8_t *addr)</argsstring>
        <name>GetDeviceAddress</name>
        <param>
          <type>uint8_t *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Return the device address that is reachable from kernels running in the context. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>device or host memory address </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the device address</para></simplesect>
The device address is defined as a memory address accessible by device. While it is often a device memory address, it can be also a host memory address, for instance, when the memory is allocated as host memory (using cudaMallocHost or cudaHostAlloc) or as managed memory (using cudaMallocManaged) or the host memory is page-locked (using cudaHostRegister). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="328" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_context_1a38d0700f761d7a7675c46428b2ba0ecc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; uintptr_t &gt;</type>
        <definition>Result&lt;uintptr_t&gt; arrow::cuda::CudaContext::GetDeviceAddress</definition>
        <argsstring>(uintptr_t addr)</argsstring>
        <name>GetDeviceAddress</name>
        <param>
          <type>uintptr_t</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="329" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_context_1a700f8db21b0cd27376b57792aa78d9f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::cuda::CudaContext::GetDeviceAddress</definition>
        <argsstring>(uint8_t *addr, uint8_t **devaddr)</argsstring>
        <name>GetDeviceAddress</name>
        <param>
          <type>uint8_t *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>uint8_t **</type>
          <declname>devaddr</declname>
        </param>
        <briefdescription>
<para>Return the device address that is reachable from kernels running in the context. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>device or host memory address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">devaddr</parametername>
</parameternamelist>
<parameterdescription>
<para>the device address </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></para></simplesect>
The device address is defined as a memory address accessible by device. While it is often a device memory address, it can be also a host memory address, for instance, when the memory is allocated as host memory (using cudaMallocHost or cudaHostAlloc) or as managed memory (using cudaMallocManaged) or the host memory is page-locked (using cudaHostRegister). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="344" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_context_1a9c8c91b282d191e53c6d1b9d615a0698" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::cuda::CudaContext::CudaContext</definition>
        <argsstring>()</argsstring>
        <name>CudaContext</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="347" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_context_1a88e272552470e36733f107769d83e428" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1cuda_1_1_cuda_ipc_mem_handle" kindref="compound">CudaIpcMemHandle</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;CudaIpcMemHandle&gt; &gt; arrow::cuda::CudaContext::ExportIpcBuffer</definition>
        <argsstring>(void *data, int64_t size)</argsstring>
        <name>ExportIpcBuffer</name>
        <param>
          <type>void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="349" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_context_1aa3d92b8f94154f0e320a96361ac8723d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::cuda::CudaContext::CopyHostToDevice</definition>
        <argsstring>(void *dst, const void *src, int64_t nbytes)</argsstring>
        <name>CopyHostToDevice</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="350" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_context_1add4ace946c5bfd197537a35ac2bbcac5" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::cuda::CudaContext::CopyHostToDevice</definition>
        <argsstring>(uintptr_t dst, const void *src, int64_t nbytes)</argsstring>
        <name>CopyHostToDevice</name>
        <param>
          <type>uintptr_t</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="351" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_context_1a43dfdd59011cb3085f83a0f29da1efb7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::cuda::CudaContext::CopyDeviceToHost</definition>
        <argsstring>(void *dst, const void *src, int64_t nbytes)</argsstring>
        <name>CopyDeviceToHost</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="352" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_context_1ab6c63a6a7dc32de7f3fc133acebd31dc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::cuda::CudaContext::CopyDeviceToHost</definition>
        <argsstring>(void *dst, uintptr_t src, int64_t nbytes)</argsstring>
        <name>CopyDeviceToHost</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="353" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_context_1a4030020d8441820e55f0a226c4f85214" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::cuda::CudaContext::CopyDeviceToDevice</definition>
        <argsstring>(void *dst, const void *src, int64_t nbytes)</argsstring>
        <name>CopyDeviceToDevice</name>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="354" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_context_1ad41186e1483a75f07a50112fd8efa0bb" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::cuda::CudaContext::CopyDeviceToDevice</definition>
        <argsstring>(uintptr_t dst, uintptr_t src, int64_t nbytes)</argsstring>
        <name>CopyDeviceToDevice</name>
        <param>
          <type>uintptr_t</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="355" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_context_1adffc9a1aae25845cf23b1a1490a35def" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::cuda::CudaContext::CopyDeviceToAnotherDevice</definition>
        <argsstring>(const std::shared_ptr&lt; CudaContext &gt; &amp;dst_ctx, void *dst, const void *src, int64_t nbytes)</argsstring>
        <name>CopyDeviceToAnotherDevice</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1cuda_1_1_cuda_context" kindref="compound">CudaContext</ref> &gt; &amp;</type>
          <declname>dst_ctx</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="356" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_context_1a533e0a54fec5652587854bfb676d60ea" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::cuda::CudaContext::CopyDeviceToAnotherDevice</definition>
        <argsstring>(const std::shared_ptr&lt; CudaContext &gt; &amp;dst_ctx, uintptr_t dst, uintptr_t src, int64_t nbytes)</argsstring>
        <name>CopyDeviceToAnotherDevice</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1cuda_1_1_cuda_context" kindref="compound">CudaContext</ref> &gt; &amp;</type>
          <declname>dst_ctx</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>uintptr_t</type>
          <declname>src</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="358" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Object-oriented interface to the low-level CUDA driver API. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="803">
        <label>arrow::cuda::CudaContext</label>
        <link refid="classarrow_1_1cuda_1_1_cuda_context"/>
        <childnode refid="804" relation="public-inheritance">
        </childnode>
      </node>
      <node id="804">
        <label>std::enable_shared_from_this&lt; CudaContext &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="805">
        <label>arrow::cuda::CudaContext</label>
        <link refid="classarrow_1_1cuda_1_1_cuda_context"/>
        <childnode refid="806" relation="public-inheritance">
        </childnode>
      </node>
      <node id="806">
        <label>std::enable_shared_from_this&lt; CudaContext &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="236" column="1" bodyfile="/arrow/cpp/src/arrow/gpu/cuda_context.h" bodystart="236" bodyend="373"/>
    <listofallmembers>
      <member refid="classarrow_1_1cuda_1_1_cuda_context_1a836d70bdb85abbe60bf861d2b6d01d62" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaContext</scope><name>Allocate</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_context_1ae1f7fd73ef674ac0a670467d72cc28e5" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaContext</scope><name>Allocate</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_context_1a4846be0dcaaa16833c3275b1156dcb78" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaContext</scope><name>bytes_allocated</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_context_1adbe3c44dcd110fb00c954de38a3e3e0c" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaContext</scope><name>Close</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_context_1a3228bd973c2da795b1b916f81d3bd164" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaContext</scope><name>CloseIpcBuffer</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_context_1adffc9a1aae25845cf23b1a1490a35def" prot="private" virt="non-virtual"><scope>arrow::cuda::CudaContext</scope><name>CopyDeviceToAnotherDevice</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_context_1a533e0a54fec5652587854bfb676d60ea" prot="private" virt="non-virtual"><scope>arrow::cuda::CudaContext</scope><name>CopyDeviceToAnotherDevice</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_context_1a4030020d8441820e55f0a226c4f85214" prot="private" virt="non-virtual"><scope>arrow::cuda::CudaContext</scope><name>CopyDeviceToDevice</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_context_1ad41186e1483a75f07a50112fd8efa0bb" prot="private" virt="non-virtual"><scope>arrow::cuda::CudaContext</scope><name>CopyDeviceToDevice</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_context_1a43dfdd59011cb3085f83a0f29da1efb7" prot="private" virt="non-virtual"><scope>arrow::cuda::CudaContext</scope><name>CopyDeviceToHost</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_context_1ab6c63a6a7dc32de7f3fc133acebd31dc" prot="private" virt="non-virtual"><scope>arrow::cuda::CudaContext</scope><name>CopyDeviceToHost</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_context_1aa3d92b8f94154f0e320a96361ac8723d" prot="private" virt="non-virtual"><scope>arrow::cuda::CudaContext</scope><name>CopyHostToDevice</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_context_1add4ace946c5bfd197537a35ac2bbcac5" prot="private" virt="non-virtual"><scope>arrow::cuda::CudaContext</scope><name>CopyHostToDevice</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_context_1a9c8c91b282d191e53c6d1b9d615a0698" prot="private" virt="non-virtual"><scope>arrow::cuda::CudaContext</scope><name>CudaContext</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_context_1a3586821e56c60693f1eb67039298fdf4" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaContext</scope><name>device</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_context_1ab5427be57b455cffa58b353ad8d6fdbf" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaContext</scope><name>device_number</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_context_1a88e272552470e36733f107769d83e428" prot="private" virt="non-virtual"><scope>arrow::cuda::CudaContext</scope><name>ExportIpcBuffer</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_context_1aa08710d029fe38ea3ec8ad065ffe50fa" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaContext</scope><name>Free</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_context_1af242669d7f31c122547ab562b2a65e30" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaContext</scope><name>GetDeviceAddress</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_context_1a38d0700f761d7a7675c46428b2ba0ecc" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaContext</scope><name>GetDeviceAddress</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_context_1a700f8db21b0cd27376b57792aa78d9f7" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaContext</scope><name>GetDeviceAddress</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_context_1a6e96e4e5ef6abaecf3448d0f9563b34c" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaContext</scope><name>handle</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_context_1a8dc9b3aa5589d99edb6df0bfc9f3c113" prot="private" virt="non-virtual"><scope>arrow::cuda::CudaContext</scope><name>impl_</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_context_1ac1c28d2d0b1bb58a4aa07bf52f45945d" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaContext</scope><name>memory_manager</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_context_1a6f8c1f0e4df6d368e36859d59f17dbf8" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaContext</scope><name>OpenIpcBuffer</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_context_1a71525204ccd5e3a30f8456b6ca29dc38" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaContext</scope><name>OpenIpcBuffer</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_context_1a80b22b35b08acac1c0a7b796932612c0" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaContext</scope><name>Synchronize</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_context_1a32f1e6f2fa80d1762ba9f559e14af27c" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaContext</scope><name>View</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_context_1a20f0a6eaa90944b58a99f9bccd52497d" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaContext</scope><name>View</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_context_1a5c6d09d34480de0822efdecf294ae9bf" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaContext</scope><name>~CudaContext</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
