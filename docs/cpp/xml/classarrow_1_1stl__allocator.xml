<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.16">
  <compounddef id="classarrow_1_1stl__allocator" kind="class" language="C++" prot="public">
    <compoundname>arrow::stl_allocator</compoundname>
    <includes refid="allocator_8h" local="no">arrow/allocator.h</includes>
    <innerclass refid="structarrow_1_1stl__allocator_1_1rebind" prot="public">arrow::stl_allocator::rebind</innerclass>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classarrow_1_1stl__allocator_1a116d180eeb40ae7a06fbc93dd59f71b6" prot="public" static="no">
        <type>T</type>
        <definition>using arrow::stl_allocator&lt; T &gt;::value_type =  T</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/allocator.h" line="36" column="3" bodyfile="/arrow/cpp/src/arrow/allocator.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classarrow_1_1stl__allocator_1a2d0de6d0a6a43e2cca7b980a6fedc375" prot="public" static="no">
        <type>T *</type>
        <definition>using arrow::stl_allocator&lt; T &gt;::pointer =  T*</definition>
        <argsstring></argsstring>
        <name>pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/allocator.h" line="37" column="3" bodyfile="/arrow/cpp/src/arrow/allocator.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classarrow_1_1stl__allocator_1aa46e64f7ed3c0196f45d746f7a75f563" prot="public" static="no">
        <type>const T *</type>
        <definition>using arrow::stl_allocator&lt; T &gt;::const_pointer =  const T*</definition>
        <argsstring></argsstring>
        <name>const_pointer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/allocator.h" line="38" column="3" bodyfile="/arrow/cpp/src/arrow/allocator.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classarrow_1_1stl__allocator_1a3044d12cb8624ecd5478b07c47d9d588" prot="public" static="no">
        <type>T &amp;</type>
        <definition>using arrow::stl_allocator&lt; T &gt;::reference =  T&amp;</definition>
        <argsstring></argsstring>
        <name>reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/allocator.h" line="39" column="3" bodyfile="/arrow/cpp/src/arrow/allocator.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classarrow_1_1stl__allocator_1aa7ec62c2bdb40ed6b65c77e4ebebfc43" prot="public" static="no">
        <type>const T &amp;</type>
        <definition>using arrow::stl_allocator&lt; T &gt;::const_reference =  const T&amp;</definition>
        <argsstring></argsstring>
        <name>const_reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/allocator.h" line="40" column="3" bodyfile="/arrow/cpp/src/arrow/allocator.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classarrow_1_1stl__allocator_1aa8a67276663a6f604bc1c34d7602e9df" prot="public" static="no">
        <type>std::size_t</type>
        <definition>using arrow::stl_allocator&lt; T &gt;::size_type =  std::size_t</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/allocator.h" line="41" column="3" bodyfile="/arrow/cpp/src/arrow/allocator.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classarrow_1_1stl__allocator_1a152ab29988f774a19a9e03a22485badf" prot="public" static="no">
        <type>std::ptrdiff_t</type>
        <definition>using arrow::stl_allocator&lt; T &gt;::difference_type =  std::ptrdiff_t</definition>
        <argsstring></argsstring>
        <name>difference_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/allocator.h" line="42" column="3" bodyfile="/arrow/cpp/src/arrow/allocator.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classarrow_1_1stl__allocator_1a0de6135734ffef192518f5d412d3f8b4" prot="private" static="no" mutable="no">
        <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
        <definition>MemoryPool* arrow::stl_allocator&lt; T &gt;::pool_</definition>
        <argsstring></argsstring>
        <name>pool_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/allocator.h" line="89" column="14" bodyfile="/arrow/cpp/src/arrow/allocator.h" bodystart="89" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1stl__allocator_1acc68d9df47ec479864980e24e5206c0b" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::stl_allocator&lt; T &gt;::stl_allocator</definition>
        <argsstring>() noexcept</argsstring>
        <name>stl_allocator</name>
        <briefdescription>
<para>Construct an allocator from the default <ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/allocator.h" line="50" column="3" bodyfile="/arrow/cpp/src/arrow/allocator.h" bodystart="50" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1stl__allocator_1affeec274a43deb7cc79152837558eab5" prot="public" static="no" const="no" explicit="yes" inline="yes" noexcept="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::stl_allocator&lt; T &gt;::stl_allocator</definition>
        <argsstring>(MemoryPool *pool) noexcept</argsstring>
        <name>stl_allocator</name>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
<para>Construct an allocator from the given <ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/allocator.h" line="52" column="12" bodyfile="/arrow/cpp/src/arrow/allocator.h" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1stl__allocator_1abcb413f5f18708e06fef91f20e20d2ab" prot="public" static="no" const="no" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>arrow::stl_allocator&lt; T &gt;::stl_allocator</definition>
        <argsstring>(const stl_allocator&lt; U &gt; &amp;rhs) noexcept</argsstring>
        <name>stl_allocator</name>
        <param>
          <type>const <ref refid="classarrow_1_1stl__allocator" kindref="compound">stl_allocator</ref>&lt; U &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/allocator.h" line="55" column="3" bodyfile="/arrow/cpp/src/arrow/allocator.h" bodystart="55" bodyend="55"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1stl__allocator_1a51aa02f5c3b0f1e00c9027965bc3f146" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::stl_allocator&lt; T &gt;::~stl_allocator</definition>
        <argsstring>()</argsstring>
        <name>~stl_allocator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/allocator.h" line="57" column="3" bodyfile="/arrow/cpp/src/arrow/allocator.h" bodystart="57" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1stl__allocator_1aed433bf67f62bcb87538ac56f3f66f0f" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1stl__allocator_1a2d0de6d0a6a43e2cca7b980a6fedc375" kindref="member">pointer</ref></type>
        <definition>pointer arrow::stl_allocator&lt; T &gt;::address</definition>
        <argsstring>(reference r) const noexcept</argsstring>
        <name>address</name>
        <param>
          <type><ref refid="classarrow_1_1stl__allocator_1a3044d12cb8624ecd5478b07c47d9d588" kindref="member">reference</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/allocator.h" line="59" column="11" bodyfile="/arrow/cpp/src/arrow/allocator.h" bodystart="59" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1stl__allocator_1a75b0f32329edd8c06b5c0e6ba2c41f9d" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1stl__allocator_1aa46e64f7ed3c0196f45d746f7a75f563" kindref="member">const_pointer</ref></type>
        <definition>const_pointer arrow::stl_allocator&lt; T &gt;::address</definition>
        <argsstring>(const_reference r) const noexcept</argsstring>
        <name>address</name>
        <param>
          <type><ref refid="classarrow_1_1stl__allocator_1aa7ec62c2bdb40ed6b65c77e4ebebfc43" kindref="member">const_reference</ref></type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/allocator.h" line="61" column="17" bodyfile="/arrow/cpp/src/arrow/allocator.h" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1stl__allocator_1a4ee13a5952515f13b65c26272e0e2429" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1stl__allocator_1a2d0de6d0a6a43e2cca7b980a6fedc375" kindref="member">pointer</ref></type>
        <definition>pointer arrow::stl_allocator&lt; T &gt;::allocate</definition>
        <argsstring>(size_type n, const void *=NULLPTR)</argsstring>
        <name>allocate</name>
        <param>
          <type><ref refid="classarrow_1_1stl__allocator_1aa8a67276663a6f604bc1c34d7602e9df" kindref="member">size_type</ref></type>
          <declname>n</declname>
        </param>
        <param>
          <type>const void *</type>
          <defval><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/allocator.h" line="63" column="11" bodyfile="/arrow/cpp/src/arrow/allocator.h" bodystart="63" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1stl__allocator_1af0f44b507ab7ed0e5734929e1f255daa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void arrow::stl_allocator&lt; T &gt;::deallocate</definition>
        <argsstring>(pointer p, size_type n)</argsstring>
        <name>deallocate</name>
        <param>
          <type><ref refid="classarrow_1_1stl__allocator_1a2d0de6d0a6a43e2cca7b980a6fedc375" kindref="member">pointer</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1stl__allocator_1aa8a67276663a6f604bc1c34d7602e9df" kindref="member">size_type</ref></type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/allocator.h" line="70" column="8" bodyfile="/arrow/cpp/src/arrow/allocator.h" bodystart="70" bodyend="72"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1stl__allocator_1a971781ef19b30cdd0f31d5cc3aa8e0c1" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1stl__allocator_1aa8a67276663a6f604bc1c34d7602e9df" kindref="member">size_type</ref></type>
        <definition>size_type arrow::stl_allocator&lt; T &gt;::size_max</definition>
        <argsstring>() const noexcept</argsstring>
        <name>size_max</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/allocator.h" line="74" column="13" bodyfile="/arrow/cpp/src/arrow/allocator.h" bodystart="74" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1stl__allocator_1a94843982d72329e69b9069ee781e5460" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
          <param>
            <type>class...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void arrow::stl_allocator&lt; T &gt;::construct</definition>
        <argsstring>(U *p, Args &amp;&amp;... args)</argsstring>
        <name>construct</name>
        <param>
          <type>U *</type>
          <declname>p</declname>
        </param>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/allocator.h" line="77" column="8" bodyfile="/arrow/cpp/src/arrow/allocator.h" bodystart="77" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1stl__allocator_1aca67cbdb60e9bdaa25c9a3ecde8410ba" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class U</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void arrow::stl_allocator&lt; T &gt;::destroy</definition>
        <argsstring>(U *p)</argsstring>
        <name>destroy</name>
        <param>
          <type>U *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/allocator.h" line="82" column="8" bodyfile="/arrow/cpp/src/arrow/allocator.h" bodystart="82" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1stl__allocator_1ae2832ef5c557af5db4a7c0623d6f2e48" prot="public" static="no" const="yes" explicit="no" inline="yes" noexcept="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
        <definition>MemoryPool* arrow::stl_allocator&lt; T &gt;::pool</definition>
        <argsstring>() const noexcept</argsstring>
        <name>pool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/allocator.h" line="86" column="14" bodyfile="/arrow/cpp/src/arrow/allocator.h" bodystart="86" bodyend="86"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A STL allocator delegating allocations to a Arrow <ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/arrow/allocator.h" line="34" column="20" bodyfile="/arrow/cpp/src/arrow/allocator.h" bodystart="34" bodyend="90"/>
    <listofallmembers>
      <member refid="classarrow_1_1stl__allocator_1aed433bf67f62bcb87538ac56f3f66f0f" prot="public" virt="non-virtual"><scope>arrow::stl_allocator</scope><name>address</name></member>
      <member refid="classarrow_1_1stl__allocator_1a75b0f32329edd8c06b5c0e6ba2c41f9d" prot="public" virt="non-virtual"><scope>arrow::stl_allocator</scope><name>address</name></member>
      <member refid="classarrow_1_1stl__allocator_1a4ee13a5952515f13b65c26272e0e2429" prot="public" virt="non-virtual"><scope>arrow::stl_allocator</scope><name>allocate</name></member>
      <member refid="classarrow_1_1stl__allocator_1aa46e64f7ed3c0196f45d746f7a75f563" prot="public" virt="non-virtual"><scope>arrow::stl_allocator</scope><name>const_pointer</name></member>
      <member refid="classarrow_1_1stl__allocator_1aa7ec62c2bdb40ed6b65c77e4ebebfc43" prot="public" virt="non-virtual"><scope>arrow::stl_allocator</scope><name>const_reference</name></member>
      <member refid="classarrow_1_1stl__allocator_1a94843982d72329e69b9069ee781e5460" prot="public" virt="non-virtual"><scope>arrow::stl_allocator</scope><name>construct</name></member>
      <member refid="classarrow_1_1stl__allocator_1af0f44b507ab7ed0e5734929e1f255daa" prot="public" virt="non-virtual"><scope>arrow::stl_allocator</scope><name>deallocate</name></member>
      <member refid="classarrow_1_1stl__allocator_1aca67cbdb60e9bdaa25c9a3ecde8410ba" prot="public" virt="non-virtual"><scope>arrow::stl_allocator</scope><name>destroy</name></member>
      <member refid="classarrow_1_1stl__allocator_1a152ab29988f774a19a9e03a22485badf" prot="public" virt="non-virtual"><scope>arrow::stl_allocator</scope><name>difference_type</name></member>
      <member refid="classarrow_1_1stl__allocator_1a2d0de6d0a6a43e2cca7b980a6fedc375" prot="public" virt="non-virtual"><scope>arrow::stl_allocator</scope><name>pointer</name></member>
      <member refid="classarrow_1_1stl__allocator_1ae2832ef5c557af5db4a7c0623d6f2e48" prot="public" virt="non-virtual"><scope>arrow::stl_allocator</scope><name>pool</name></member>
      <member refid="classarrow_1_1stl__allocator_1a0de6135734ffef192518f5d412d3f8b4" prot="private" virt="non-virtual"><scope>arrow::stl_allocator</scope><name>pool_</name></member>
      <member refid="classarrow_1_1stl__allocator_1a3044d12cb8624ecd5478b07c47d9d588" prot="public" virt="non-virtual"><scope>arrow::stl_allocator</scope><name>reference</name></member>
      <member refid="classarrow_1_1stl__allocator_1a971781ef19b30cdd0f31d5cc3aa8e0c1" prot="public" virt="non-virtual"><scope>arrow::stl_allocator</scope><name>size_max</name></member>
      <member refid="classarrow_1_1stl__allocator_1aa8a67276663a6f604bc1c34d7602e9df" prot="public" virt="non-virtual"><scope>arrow::stl_allocator</scope><name>size_type</name></member>
      <member refid="classarrow_1_1stl__allocator_1acc68d9df47ec479864980e24e5206c0b" prot="public" virt="non-virtual"><scope>arrow::stl_allocator</scope><name>stl_allocator</name></member>
      <member refid="classarrow_1_1stl__allocator_1affeec274a43deb7cc79152837558eab5" prot="public" virt="non-virtual"><scope>arrow::stl_allocator</scope><name>stl_allocator</name></member>
      <member refid="classarrow_1_1stl__allocator_1abcb413f5f18708e06fef91f20e20d2ab" prot="public" virt="non-virtual"><scope>arrow::stl_allocator</scope><name>stl_allocator</name></member>
      <member refid="classarrow_1_1stl__allocator_1a116d180eeb40ae7a06fbc93dd59f71b6" prot="public" virt="non-virtual"><scope>arrow::stl_allocator</scope><name>value_type</name></member>
      <member refid="classarrow_1_1stl__allocator_1a51aa02f5c3b0f1e00c9027965bc3f146" prot="public" virt="non-virtual"><scope>arrow::stl_allocator</scope><name>~stl_allocator</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
