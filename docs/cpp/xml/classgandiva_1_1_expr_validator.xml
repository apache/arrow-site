<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classgandiva_1_1_expr_validator" kind="class" language="C++" prot="public">
    <compoundname>gandiva::ExprValidator</compoundname>
    <basecompoundref refid="classgandiva_1_1_node_visitor" prot="public" virt="non-virtual">gandiva::NodeVisitor</basecompoundref>
    <includes refid="expr__validator_8h" local="no">gandiva/expr_validator.h</includes>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classgandiva_1_1_expr_validator_1a4b14d13c8379f65441ec0895d6711a1d" prot="private" static="no">
        <type>std::unordered_map&lt; std::string, <ref refid="namespacegandiva_1a8202d69b17c893247edc1c7653412438" kindref="member">FieldPtr</ref>, boost::hash&lt; std::string &gt; &gt;</type>
        <definition>using gandiva::ExprValidator::FieldMap =  std::unordered_map&lt;std::string, FieldPtr, boost::hash&lt;std::string&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>FieldMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_validator.h" line="74" column="1" bodyfile="/arrow/cpp/src/gandiva/expr_validator.h" bodystart="74" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classgandiva_1_1_expr_validator_1ad8bed99a85dfe692ba735c92e1e4bd61" prot="private" static="no" mutable="no">
        <type><ref refid="classgandiva_1_1_function_registry" kindref="compound">FunctionRegistry</ref></type>
        <definition>FunctionRegistry gandiva::ExprValidator::registry_</definition>
        <argsstring></argsstring>
        <name>registry_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_validator.h" line="68" column="1" bodyfile="/arrow/cpp/src/gandiva/expr_validator.h" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgandiva_1_1_expr_validator_1a360885388b0b8c39516437190f767a7f" prot="private" static="no" mutable="no">
        <type><ref refid="classgandiva_1_1_l_l_v_m_types" kindref="compound">LLVMTypes</ref> *</type>
        <definition>LLVMTypes* gandiva::ExprValidator::types_</definition>
        <argsstring></argsstring>
        <name>types_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_validator.h" line="70" column="1" bodyfile="/arrow/cpp/src/gandiva/expr_validator.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgandiva_1_1_expr_validator_1afea9e561904936aca43ae2135a968e31" prot="private" static="no" mutable="no">
        <type><ref refid="namespacegandiva_1a650de9b918fc7348689854c307e50d56" kindref="member">SchemaPtr</ref></type>
        <definition>SchemaPtr gandiva::ExprValidator::schema_</definition>
        <argsstring></argsstring>
        <name>schema_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_validator.h" line="72" column="1" bodyfile="/arrow/cpp/src/gandiva/expr_validator.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgandiva_1_1_expr_validator_1a33a27630cf2adbf2e81d1d1eb2118d9d" prot="private" static="no" mutable="no">
        <type>FieldMap</type>
        <definition>FieldMap gandiva::ExprValidator::field_map_</definition>
        <argsstring></argsstring>
        <name>field_map_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_validator.h" line="75" column="1" bodyfile="/arrow/cpp/src/gandiva/expr_validator.h" bodystart="75" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgandiva_1_1_expr_validator_1ae72d8f4531cf122bdf0fdc7c581b9bef" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>gandiva::ExprValidator::ExprValidator</definition>
        <argsstring>(LLVMTypes *types, SchemaPtr schema)</argsstring>
        <name>ExprValidator</name>
        <param>
          <type><ref refid="classgandiva_1_1_l_l_v_m_types" kindref="compound">LLVMTypes</ref> *</type>
          <declname>types</declname>
        </param>
        <param>
          <type><ref refid="namespacegandiva_1a650de9b918fc7348689854c307e50d56" kindref="member">SchemaPtr</ref></type>
          <declname>schema</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_validator.h" line="41" column="1" bodyfile="/arrow/cpp/src/gandiva/expr_validator.h" bodystart="41" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_expr_validator_1a7e823285fc1bbd20f9111a5a03550a6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>Status gandiva::ExprValidator::Validate</definition>
        <argsstring>(const ExpressionPtr &amp;expr)</argsstring>
        <name>Validate</name>
        <param>
          <type>const <ref refid="namespacegandiva_1a6735ddd686b37cdc7cda5f33008497c9" kindref="member">ExpressionPtr</ref> &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
<para>Validates the root node of an expression. </para>        </briefdescription>
        <detaileddescription>
<para><orderedlist>
<listitem><para>Data type of fields and literals.</para></listitem><listitem><para>Function signature is supported.</para></listitem><listitem><para>For if nodes that return types match for if, then and else nodes. </para></listitem></orderedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_validator.h" line="54" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classgandiva_1_1_expr_validator_1a1a4c5537e58f3f8f609e4d469e8ce8b9" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>Status gandiva::ExprValidator::Visit</definition>
        <argsstring>(const FieldNode &amp;node) override</argsstring>
        <name>Visit</name>
        <reimplements refid="classgandiva_1_1_node_visitor_1a313074d7d961481bcc607dde4968a763">Visit</reimplements>
        <param>
          <type>const <ref refid="classgandiva_1_1_field_node" kindref="compound">FieldNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_validator.h" line="57" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_expr_validator_1aa444966e38ee3668ca38a1a7ea7e1e9e" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>Status gandiva::ExprValidator::Visit</definition>
        <argsstring>(const FunctionNode &amp;node) override</argsstring>
        <name>Visit</name>
        <reimplements refid="classgandiva_1_1_node_visitor_1a09d499c2d3b35d74dbee7229e7246331">Visit</reimplements>
        <param>
          <type>const <ref refid="classgandiva_1_1_function_node" kindref="compound">FunctionNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_validator.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_expr_validator_1a196724af1589cd9be19e84aae0e4a9de" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>Status gandiva::ExprValidator::Visit</definition>
        <argsstring>(const IfNode &amp;node) override</argsstring>
        <name>Visit</name>
        <reimplements refid="classgandiva_1_1_node_visitor_1a3ce1ab66ad7c8604c5113c84f5ebb71c">Visit</reimplements>
        <param>
          <type>const <ref refid="classgandiva_1_1_if_node" kindref="compound">IfNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_validator.h" line="59" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_expr_validator_1a7016cf2750fd0ac0f6f524348e780095" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>Status gandiva::ExprValidator::Visit</definition>
        <argsstring>(const LiteralNode &amp;node) override</argsstring>
        <name>Visit</name>
        <reimplements refid="classgandiva_1_1_node_visitor_1aa626388db2d288fadaf4f068a03a370f">Visit</reimplements>
        <param>
          <type>const <ref refid="classgandiva_1_1_literal_node" kindref="compound">LiteralNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_validator.h" line="60" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_expr_validator_1a380ad9a40bebf534fb47ec9784f2d8f8" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>Status gandiva::ExprValidator::Visit</definition>
        <argsstring>(const BooleanNode &amp;node) override</argsstring>
        <name>Visit</name>
        <reimplements refid="classgandiva_1_1_node_visitor_1ab8df9dcf0f4506f980720a037aee2bab">Visit</reimplements>
        <param>
          <type>const <ref refid="classgandiva_1_1_boolean_node" kindref="compound">BooleanNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_validator.h" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_expr_validator_1afc5df0408a925b626323d2467f879f75" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>Status gandiva::ExprValidator::Visit</definition>
        <argsstring>(const InExpressionNode&lt; int32_t &gt; &amp;node) override</argsstring>
        <name>Visit</name>
        <reimplements refid="classgandiva_1_1_node_visitor_1aa8478c2ec83c07bd63b21e9f73e29ee5">Visit</reimplements>
        <param>
          <type>const <ref refid="classgandiva_1_1_in_expression_node" kindref="compound">InExpressionNode</ref>&lt; int32_t &gt; &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_validator.h" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_expr_validator_1af30e19b104802765ed9ee34f35c9a131" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>Status gandiva::ExprValidator::Visit</definition>
        <argsstring>(const InExpressionNode&lt; int64_t &gt; &amp;node) override</argsstring>
        <name>Visit</name>
        <reimplements refid="classgandiva_1_1_node_visitor_1a8f41dd56c1e1f2b6178f7d31db8d816a">Visit</reimplements>
        <param>
          <type>const <ref refid="classgandiva_1_1_in_expression_node" kindref="compound">InExpressionNode</ref>&lt; int64_t &gt; &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_validator.h" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_expr_validator_1af0d264d4c87c0df49f18d080eaa9c623" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>Status gandiva::ExprValidator::Visit</definition>
        <argsstring>(const InExpressionNode&lt; std::string &gt; &amp;node) override</argsstring>
        <name>Visit</name>
        <reimplements refid="classgandiva_1_1_node_visitor_1a16c30d3fe1f5e2230af81bfa95df534d">Visit</reimplements>
        <param>
          <type>const <ref refid="classgandiva_1_1_in_expression_node" kindref="compound">InExpressionNode</ref>&lt; std::string &gt; &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_validator.h" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_expr_validator_1ac87a8369fd49196ff4b1c505059505ec" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>Status gandiva::ExprValidator::ValidateInExpression</definition>
        <argsstring>(size_t number_of_values, DataTypePtr in_expr_return_type, DataTypePtr type_of_values)</argsstring>
        <name>ValidateInExpression</name>
        <param>
          <type>size_t</type>
          <declname>number_of_values</declname>
        </param>
        <param>
          <type><ref refid="namespacegandiva_1a3e3446d98cf1dcf281b0d3f6c16a65d3" kindref="member">DataTypePtr</ref></type>
          <declname>in_expr_return_type</declname>
        </param>
        <param>
          <type><ref refid="namespacegandiva_1a3e3446d98cf1dcf281b0d3f6c16a65d3" kindref="member">DataTypePtr</ref></type>
          <declname>type_of_values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_validator.h" line="65" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Validates the entire expression tree including data types, signatures and return types. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1499">
        <label>gandiva::ExprValidator</label>
        <link refid="classgandiva_1_1_expr_validator"/>
        <childnode refid="1500" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1500">
        <label>gandiva::NodeVisitor</label>
        <link refid="classgandiva_1_1_node_visitor"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1501">
        <label>gandiva::ExprValidator</label>
        <link refid="classgandiva_1_1_expr_validator"/>
        <childnode refid="1502" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1502">
        <label>gandiva::NodeVisitor</label>
        <link refid="classgandiva_1_1_node_visitor"/>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/gandiva/expr_validator.h" line="39" column="1" bodyfile="/arrow/cpp/src/gandiva/expr_validator.h" bodystart="39" bodyend="76"/>
    <listofallmembers>
      <member refid="classgandiva_1_1_expr_validator_1ae72d8f4531cf122bdf0fdc7c581b9bef" prot="public" virt="non-virtual"><scope>gandiva::ExprValidator</scope><name>ExprValidator</name></member>
      <member refid="classgandiva_1_1_expr_validator_1a33a27630cf2adbf2e81d1d1eb2118d9d" prot="private" virt="non-virtual"><scope>gandiva::ExprValidator</scope><name>field_map_</name></member>
      <member refid="classgandiva_1_1_expr_validator_1a4b14d13c8379f65441ec0895d6711a1d" prot="private" virt="non-virtual"><scope>gandiva::ExprValidator</scope><name>FieldMap</name></member>
      <member refid="classgandiva_1_1_expr_validator_1ad8bed99a85dfe692ba735c92e1e4bd61" prot="private" virt="non-virtual"><scope>gandiva::ExprValidator</scope><name>registry_</name></member>
      <member refid="classgandiva_1_1_expr_validator_1afea9e561904936aca43ae2135a968e31" prot="private" virt="non-virtual"><scope>gandiva::ExprValidator</scope><name>schema_</name></member>
      <member refid="classgandiva_1_1_expr_validator_1a360885388b0b8c39516437190f767a7f" prot="private" virt="non-virtual"><scope>gandiva::ExprValidator</scope><name>types_</name></member>
      <member refid="classgandiva_1_1_expr_validator_1a7e823285fc1bbd20f9111a5a03550a6e" prot="public" virt="non-virtual"><scope>gandiva::ExprValidator</scope><name>Validate</name></member>
      <member refid="classgandiva_1_1_expr_validator_1ac87a8369fd49196ff4b1c505059505ec" prot="private" virt="non-virtual"><scope>gandiva::ExprValidator</scope><name>ValidateInExpression</name></member>
      <member refid="classgandiva_1_1_expr_validator_1a1a4c5537e58f3f8f609e4d469e8ce8b9" prot="private" virt="virtual"><scope>gandiva::ExprValidator</scope><name>Visit</name></member>
      <member refid="classgandiva_1_1_expr_validator_1aa444966e38ee3668ca38a1a7ea7e1e9e" prot="private" virt="virtual"><scope>gandiva::ExprValidator</scope><name>Visit</name></member>
      <member refid="classgandiva_1_1_expr_validator_1a196724af1589cd9be19e84aae0e4a9de" prot="private" virt="virtual"><scope>gandiva::ExprValidator</scope><name>Visit</name></member>
      <member refid="classgandiva_1_1_expr_validator_1a7016cf2750fd0ac0f6f524348e780095" prot="private" virt="virtual"><scope>gandiva::ExprValidator</scope><name>Visit</name></member>
      <member refid="classgandiva_1_1_expr_validator_1a380ad9a40bebf534fb47ec9784f2d8f8" prot="private" virt="virtual"><scope>gandiva::ExprValidator</scope><name>Visit</name></member>
      <member refid="classgandiva_1_1_expr_validator_1afc5df0408a925b626323d2467f879f75" prot="private" virt="virtual"><scope>gandiva::ExprValidator</scope><name>Visit</name></member>
      <member refid="classgandiva_1_1_expr_validator_1af30e19b104802765ed9ee34f35c9a131" prot="private" virt="virtual"><scope>gandiva::ExprValidator</scope><name>Visit</name></member>
      <member refid="classgandiva_1_1_expr_validator_1af0d264d4c87c0df49f18d080eaa9c623" prot="private" virt="virtual"><scope>gandiva::ExprValidator</scope><name>Visit</name></member>
      <member refid="classgandiva_1_1_node_visitor_1a897bcc379c8b844c74dc32e77a445b6e" prot="public" virt="virtual"><scope>gandiva::ExprValidator</scope><name>~NodeVisitor</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
