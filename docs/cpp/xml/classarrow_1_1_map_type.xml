<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_map_type" kind="class" language="C++" prot="public">
    <compoundname>arrow::MapType</compoundname>
    <basecompoundref refid="classarrow_1_1_list_type" prot="public" virt="non-virtual">arrow::ListType</basecompoundref>
    <includes refid="type_8h" local="no">arrow/type.h</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classarrow_1_1_map_type_1ab5624caee3fadf1765c838c34442af0f" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref></type>
        <definition>constexpr Type::type arrow::MapType::type_id</definition>
        <argsstring></argsstring>
        <name>type_id</name>
        <initializer>= <ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a51838b04a2cdc2db91890e4c70f45e61" kindref="member">Type::MAP</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="723" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="723" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classarrow_1_1_map_type_1a721dee6da89580913c0ee54b5f5d9069" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool arrow::MapType::keys_sorted_</definition>
        <argsstring></argsstring>
        <name>keys_sorted_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="748" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="748" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1_map_type_1a63271dd5a7b4ed2da6a20c210fc67b94" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const char *</type>
        <definition>static constexpr const char* arrow::MapType::type_name</definition>
        <argsstring>()</argsstring>
        <name>type_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="725" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="725" bodyend="725"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1_map_type_1a394cfe61aedea7dfbca218d4da1db0ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::MapType::MapType</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;key_type, const std::shared_ptr&lt; DataType &gt; &amp;item_type, bool keys_sorted=false)</argsstring>
        <name>MapType</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>key_type</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>item_type</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keys_sorted</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="727" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_map_type_1ab80df66997260ba38b6524b3bbcdbf34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::MapType::MapType</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;key_type, const std::shared_ptr&lt; Field &gt; &amp;item_field, bool keys_sorted=false)</argsstring>
        <name>MapType</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>key_type</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt; &amp;</type>
          <declname>item_field</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keys_sorted</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="730" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_map_type_1a7d4a440df81608ae880caec5873184d6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Field&gt; arrow::MapType::key_field</definition>
        <argsstring>() const</argsstring>
        <name>key_field</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="733" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="733" bodyend="733"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_map_type_1a59b305323a6a67dde52148ff72eac53b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::MapType::key_type</definition>
        <argsstring>() const</argsstring>
        <name>key_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="734" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="734" bodyend="734"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_map_type_1a7fc4783341a7fa595946d47d8ab189ee" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Field&gt; arrow::MapType::item_field</definition>
        <argsstring>() const</argsstring>
        <name>item_field</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="736" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="736" bodyend="736"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_map_type_1ade2942b1beb42c90a163c4f1a0442b8d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::MapType::item_type</definition>
        <argsstring>() const</argsstring>
        <name>item_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="737" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="737" bodyend="737"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_map_type_1a127513f6fba9038f36ec0bc772d55adc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string arrow::MapType::ToString</definition>
        <argsstring>() const override</argsstring>
        <name>ToString</name>
        <reimplements refid="classarrow_1_1_list_type_1a652c8b1865ebc3e4c606cb169b5fdd01">ToString</reimplements>
        <briefdescription>
<para>A string representation of the type, including any children. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="739" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_map_type_1aaec81c349f7561f49253006f35735e5e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string arrow::MapType::name</definition>
        <argsstring>() const override</argsstring>
        <name>name</name>
        <reimplements refid="classarrow_1_1_list_type_1a6320a08c4881865abcac2fdeab4fb0a2">name</reimplements>
        <briefdescription>
<para>A string name of the type, omitting any child fields. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Experimental API </para></simplesect>
<simplesect kind="since"><para>0.7.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="741" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="741" bodyend="741"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_map_type_1a9ef41c55f1971df5ec8d0888262ac8a5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::MapType::keys_sorted</definition>
        <argsstring>() const</argsstring>
        <name>keys_sorted</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="743" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="743" bodyend="743"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classarrow_1_1_map_type_1ae6e6d0b288ef146f651e6656441ac598" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arrow::MapType::ComputeFingerprint</definition>
        <argsstring>() const override</argsstring>
        <name>ComputeFingerprint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="746" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Concrete type class for map data. </para>    </briefdescription>
    <detaileddescription>
<para>Map data is nested data where each value is a variable number of key-item pairs. Maps can be recursively nested, for example map(utf8, map(utf8, int32)). </para>    </detaileddescription>
    <inheritancegraph>
      <node id="3002">
        <label>arrow::ParametricType</label>
        <link refid="classarrow_1_1_parametric_type"/>
      </node>
      <node id="2999">
        <label>arrow::NestedType</label>
        <link refid="classarrow_1_1_nested_type"/>
        <childnode refid="3000" relation="public-inheritance">
        </childnode>
        <childnode refid="3002" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3000">
        <label>arrow::DataType</label>
        <link refid="classarrow_1_1_data_type"/>
        <childnode refid="3001" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3001">
        <label>arrow::detail::Fingerprintable</label>
      </node>
      <node id="2997">
        <label>arrow::ListType</label>
        <link refid="classarrow_1_1_list_type"/>
        <childnode refid="2998" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2996">
        <label>arrow::MapType</label>
        <link refid="classarrow_1_1_map_type"/>
        <childnode refid="2997" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2998">
        <label>arrow::BaseListType</label>
        <link refid="classarrow_1_1_base_list_type"/>
        <childnode refid="2999" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3009">
        <label>arrow::ParametricType</label>
        <link refid="classarrow_1_1_parametric_type"/>
      </node>
      <node id="3006">
        <label>arrow::NestedType</label>
        <link refid="classarrow_1_1_nested_type"/>
        <childnode refid="3007" relation="public-inheritance">
        </childnode>
        <childnode refid="3009" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3007">
        <label>arrow::DataType</label>
        <link refid="classarrow_1_1_data_type"/>
        <childnode refid="3008" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3008">
        <label>arrow::detail::Fingerprintable</label>
      </node>
      <node id="3004">
        <label>arrow::ListType</label>
        <link refid="classarrow_1_1_list_type"/>
        <childnode refid="3005" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3003">
        <label>arrow::MapType</label>
        <link refid="classarrow_1_1_map_type"/>
        <childnode refid="3004" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3005">
        <label>arrow::BaseListType</label>
        <link refid="classarrow_1_1_base_list_type"/>
        <childnode refid="3006" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/type.h" line="721" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="721" bodyend="749"/>
    <listofallmembers>
      <member refid="classarrow_1_1_data_type_1a97571c4039e363f7ebcb09f7c789064a" prot="public" virt="non-virtual"><scope>arrow::MapType</scope><name>Accept</name></member>
      <member refid="classarrow_1_1_data_type_1a3c9f77b8d895abd8618566386cbeb7c0" prot="public" virt="non-virtual"><scope>arrow::MapType</scope><name>child</name></member>
      <member refid="classarrow_1_1_data_type_1a36061c037a2e6e974cc3b22dfb6a5bac" prot="public" virt="non-virtual"><scope>arrow::MapType</scope><name>children</name></member>
      <member refid="classarrow_1_1_data_type_1a8dd2f042289733133c386463afcea902" prot="protected" virt="non-virtual"><scope>arrow::MapType</scope><name>children_</name></member>
      <member refid="classarrow_1_1_map_type_1ae6e6d0b288ef146f651e6656441ac598" prot="private" virt="non-virtual"><scope>arrow::MapType</scope><name>ComputeFingerprint</name></member>
      <member refid="classarrow_1_1_data_type_1a1e0bf7cc98ce39872b8044f375d7de6b" prot="protected" virt="non-virtual"><scope>arrow::MapType</scope><name>ComputeMetadataFingerprint</name></member>
      <member refid="classarrow_1_1_data_type_1a1b8a7ece05983649f67396177f40e844" prot="public" virt="non-virtual"><scope>arrow::MapType</scope><name>DataType</name></member>
      <member refid="classarrow_1_1_data_type_1aaf003113bb8f4c51a03a16f4b27a52bb" prot="public" virt="non-virtual"><scope>arrow::MapType</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_data_type_1ae974f4c707ef998d25368d278818af6b" prot="public" virt="non-virtual"><scope>arrow::MapType</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_data_type_1a5ec6a1c93420c68e9c8065d4a56ad645" prot="public" virt="non-virtual"><scope>arrow::MapType</scope><name>id</name></member>
      <member refid="classarrow_1_1_data_type_1aa2704f1cfc50018d02e109b32f67e422" prot="protected" virt="non-virtual"><scope>arrow::MapType</scope><name>id_</name></member>
      <member refid="classarrow_1_1_map_type_1a7fc4783341a7fa595946d47d8ab189ee" prot="public" virt="non-virtual"><scope>arrow::MapType</scope><name>item_field</name></member>
      <member refid="classarrow_1_1_map_type_1ade2942b1beb42c90a163c4f1a0442b8d" prot="public" virt="non-virtual"><scope>arrow::MapType</scope><name>item_type</name></member>
      <member refid="classarrow_1_1_map_type_1a7d4a440df81608ae880caec5873184d6" prot="public" virt="non-virtual"><scope>arrow::MapType</scope><name>key_field</name></member>
      <member refid="classarrow_1_1_map_type_1a59b305323a6a67dde52148ff72eac53b" prot="public" virt="non-virtual"><scope>arrow::MapType</scope><name>key_type</name></member>
      <member refid="classarrow_1_1_map_type_1a9ef41c55f1971df5ec8d0888262ac8a5" prot="public" virt="non-virtual"><scope>arrow::MapType</scope><name>keys_sorted</name></member>
      <member refid="classarrow_1_1_map_type_1a721dee6da89580913c0ee54b5f5d9069" prot="private" virt="non-virtual"><scope>arrow::MapType</scope><name>keys_sorted_</name></member>
      <member refid="classarrow_1_1_list_type_1a448fdb34f319e62fbd310997a8ba4c32" prot="public" virt="virtual"><scope>arrow::MapType</scope><name>layout</name></member>
      <member refid="classarrow_1_1_list_type_1ab2b8aa644656466440477e285ebe3111" prot="public" virt="non-virtual"><scope>arrow::MapType</scope><name>ListType</name></member>
      <member refid="classarrow_1_1_list_type_1abee8a3b58f1d7e05ba474fd5225e699b" prot="public" virt="non-virtual"><scope>arrow::MapType</scope><name>ListType</name></member>
      <member refid="classarrow_1_1_map_type_1a394cfe61aedea7dfbca218d4da1db0ef" prot="public" virt="non-virtual"><scope>arrow::MapType</scope><name>MapType</name></member>
      <member refid="classarrow_1_1_map_type_1ab80df66997260ba38b6524b3bbcdbf34" prot="public" virt="non-virtual"><scope>arrow::MapType</scope><name>MapType</name></member>
      <member refid="classarrow_1_1_map_type_1aaec81c349f7561f49253006f35735e5e" prot="public" virt="virtual"><scope>arrow::MapType</scope><name>name</name></member>
      <member refid="classarrow_1_1_data_type_1ac8920179a6c1e7f434c495d5ec4662f1" prot="public" virt="non-virtual"><scope>arrow::MapType</scope><name>num_children</name></member>
      <member refid="classarrow_1_1_list_type_1ad8ffbe4af2de59367166c279a58e731c" prot="public" virt="non-virtual"><scope>arrow::MapType</scope><name>offset_type</name></member>
      <member refid="classarrow_1_1_map_type_1a127513f6fba9038f36ec0bc772d55adc" prot="public" virt="virtual"><scope>arrow::MapType</scope><name>ToString</name></member>
      <member refid="classarrow_1_1_map_type_1ab5624caee3fadf1765c838c34442af0f" prot="public" virt="non-virtual"><scope>arrow::MapType</scope><name>type_id</name></member>
      <member refid="classarrow_1_1_map_type_1a63271dd5a7b4ed2da6a20c210fc67b94" prot="public" virt="non-virtual"><scope>arrow::MapType</scope><name>type_name</name></member>
      <member refid="classarrow_1_1_base_list_type_1a96796f232e5c1c97fc68ee09dc097446" prot="public" virt="non-virtual"><scope>arrow::MapType</scope><name>value_field</name></member>
      <member refid="classarrow_1_1_base_list_type_1ad484128f731e55fa51c1f70a704e3857" prot="public" virt="non-virtual"><scope>arrow::MapType</scope><name>value_type</name></member>
      <member refid="classarrow_1_1_data_type_1a268b7e57ebec17a48930c73d8c0605d2" prot="public" virt="non-virtual"><scope>arrow::MapType</scope><name>~DataType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
