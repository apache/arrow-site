<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="future_8h" kind="file" language="C++">
    <compoundname>future.h</compoundname>
    <includes local="no">atomic</includes>
    <includes local="no">cmath</includes>
    <includes local="no">memory</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes refid="result_8h" local="yes">arrow/result.h</includes>
    <includes refid="status_8h" local="yes">arrow/status.h</includes>
    <includes refid="macros_8h" local="yes">arrow/util/macros.h</includes>
    <includes refid="arrow_2util_2visibility_8h" local="yes">arrow/util/visibility.h</includes>
    <includedby refid="future__iterator_8h" local="yes">/arrow/cpp/src/arrow/util/future_iterator.h</includedby>
    <includedby refid="thread__pool_8h" local="yes">/arrow/cpp/src/arrow/util/thread_pool.h</includedby>
    <incdepgraph>
      <node id="12579">
        <label>atomic</label>
      </node>
      <node id="12591">
        <label>arrow/util/compare.h</label>
        <link refid="util_2compare_8h"/>
        <childnode refid="12581" relation="include">
        </childnode>
        <childnode refid="12582" relation="include">
        </childnode>
        <childnode refid="12583" relation="include">
        </childnode>
        <childnode refid="12592" relation="include">
        </childnode>
      </node>
      <node id="12593">
        <label>cstdint</label>
      </node>
      <node id="12588">
        <label>arrow/status.h</label>
        <link refid="status_8h"/>
        <childnode refid="12589" relation="include">
        </childnode>
        <childnode refid="12590" relation="include">
        </childnode>
        <childnode refid="12581" relation="include">
        </childnode>
        <childnode refid="12587" relation="include">
        </childnode>
        <childnode refid="12583" relation="include">
        </childnode>
        <childnode refid="12591" relation="include">
        </childnode>
        <childnode refid="12592" relation="include">
        </childnode>
        <childnode refid="12594" relation="include">
        </childnode>
        <childnode refid="12596" relation="include">
        </childnode>
      </node>
      <node id="12580">
        <label>cmath</label>
      </node>
      <node id="12587">
        <label>string</label>
      </node>
      <node id="12595">
        <label>ostream</label>
      </node>
      <node id="12596">
        <label>arrow/util/visibility.h</label>
        <link refid="arrow_2util_2visibility_8h"/>
      </node>
      <node id="12578">
        <label>/arrow/cpp/src/arrow/util/future.h</label>
        <link refid="future_8h"/>
        <childnode refid="12579" relation="include">
        </childnode>
        <childnode refid="12580" relation="include">
        </childnode>
        <childnode refid="12581" relation="include">
        </childnode>
        <childnode refid="12582" relation="include">
        </childnode>
        <childnode refid="12583" relation="include">
        </childnode>
        <childnode refid="12584" relation="include">
        </childnode>
        <childnode refid="12585" relation="include">
        </childnode>
        <childnode refid="12588" relation="include">
        </childnode>
        <childnode refid="12592" relation="include">
        </childnode>
        <childnode refid="12596" relation="include">
        </childnode>
      </node>
      <node id="12584">
        <label>vector</label>
      </node>
      <node id="12586">
        <label>new</label>
      </node>
      <node id="12583">
        <label>utility</label>
      </node>
      <node id="12590">
        <label>iosfwd</label>
      </node>
      <node id="12585">
        <label>arrow/result.h</label>
        <link refid="result_8h"/>
        <childnode refid="12586" relation="include">
        </childnode>
        <childnode refid="12587" relation="include">
        </childnode>
        <childnode refid="12582" relation="include">
        </childnode>
        <childnode refid="12583" relation="include">
        </childnode>
        <childnode refid="12588" relation="include">
        </childnode>
        <childnode refid="12591" relation="include">
        </childnode>
      </node>
      <node id="12582">
        <label>type_traits</label>
      </node>
      <node id="12589">
        <label>cstring</label>
      </node>
      <node id="12594">
        <label>arrow/util/string_builder.h</label>
        <link refid="string__builder_8h"/>
        <childnode refid="12581" relation="include">
        </childnode>
        <childnode refid="12595" relation="include">
        </childnode>
        <childnode refid="12587" relation="include">
        </childnode>
        <childnode refid="12583" relation="include">
        </childnode>
        <childnode refid="12596" relation="include">
        </childnode>
      </node>
      <node id="12581">
        <label>memory</label>
      </node>
      <node id="12592">
        <label>arrow/util/macros.h</label>
        <link refid="macros_8h"/>
        <childnode refid="12593" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="12598">
        <label>/arrow/cpp/src/arrow/util/future_iterator.h</label>
        <link refid="future__iterator_8h"/>
      </node>
      <node id="12600">
        <label>/arrow/cpp/src/arrow/util/parallel.h</label>
        <link refid="parallel_8h"/>
      </node>
      <node id="12599">
        <label>/arrow/cpp/src/arrow/util/thread_pool.h</label>
        <link refid="thread__pool_8h"/>
        <childnode refid="12600" relation="include">
        </childnode>
      </node>
      <node id="12597">
        <label>/arrow/cpp/src/arrow/util/future.h</label>
        <link refid="future_8h"/>
        <childnode refid="12598" relation="include">
        </childnode>
        <childnode refid="12599" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classarrow_1_1_future" prot="public">arrow::Future</innerclass>
    <innerclass refid="classarrow_1_1_future_impl" prot="public">arrow::FutureImpl</innerclass>
    <innerclass refid="classarrow_1_1_future_waiter" prot="public">arrow::FutureWaiter</innerclass>
    <innerclass refid="classarrow_1_1_future_storage_base" prot="public">arrow::FutureStorageBase</innerclass>
    <innerclass refid="classarrow_1_1_future_storage" prot="public">arrow::FutureStorage</innerclass>
    <innerclass refid="classarrow_1_1_future_storage_3_01void_01_4" prot="public">arrow::FutureStorage&lt; void &gt;</innerclass>
    <innerclass refid="classarrow_1_1_future_storage_3_01_status_01_4" prot="public">arrow::FutureStorage&lt; Status &gt;</innerclass>
    <innerclass refid="classarrow_1_1_future" prot="public">arrow::Future</innerclass>
    <innernamespace refid="namespacearrow">arrow</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="future_8h_1a3270d0e788d3ea029123677ccdde5fc5" prot="public" static="no">
        <name>ARROW_ASSIGN_OR_RETURN_FUTURE_IMPL</name>
        <param><defname>result_name</defname></param>
        <param><defname>lhs</defname></param>
        <param><defname>T</defname></param>
        <param><defname>rexpr</defname></param>
        <initializer>auto result_name = (rexpr);                                          \
  if (<ref refid="macros_8h_1a6f2ee7ad52872edb915cf48e163ac99c" kindref="member">ARROW_PREDICT_FALSE</ref>(!(result_name).ok())) {                      \
    return Future&lt;T&gt;::MakeFinished(std::move(result_name).status());   \
  }                                                                    \
  lhs = std::move(result_name).MoveValueUnsafe();</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/future.h" line="422" column="9" bodyfile="/arrow/cpp/src/arrow/util/future.h" bodystart="422" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="future_8h_1aa8e8c69a8c5268d74af0fd93a73213ea" prot="public" static="no">
        <name>ARROW_ASSIGN_OR_RETURN_FUTURE</name>
        <param><defname>lhs</defname></param>
        <param><defname>T</defname></param>
        <param><defname>rexpr</defname></param>
        <initializer><ref refid="future_8h_1a3270d0e788d3ea029123677ccdde5fc5" kindref="member">ARROW_ASSIGN_OR_RETURN_FUTURE_IMPL</ref>(                \
      <ref refid="result_8h_1abeca814d9139f0541465f4837fdf15aa" kindref="member">ARROW_ASSIGN_OR_RAISE_NAME</ref>(_error_or_value, __COUNTER__), lhs, T, rexpr);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/future.h" line="429" column="9" bodyfile="/arrow/cpp/src/arrow/util/future.h" bodystart="429" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;atomic&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="result_8h" kindref="compound">arrow/result.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="status_8h" kindref="compound">arrow/status.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="macros_8h" kindref="compound">arrow/util/macros.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="arrow_2util_2visibility_8h" kindref="compound">arrow/util/visibility.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacearrow" kindref="compound">arrow</ref><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="namespacearrow_1a235876e04ae6167cfde18ad69cf2821a" refkind="member"><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/><ref refid="namespacearrow_1a235876e04ae6167cfde18ad69cf2821a" kindref="member">FutureState</ref><sp/>:<sp/>int8_t<sp/>{<sp/><ref refid="namespacearrow_1a235876e04ae6167cfde18ad69cf2821aac69f06e1a9b016d133907b4e5f5864d2" kindref="member">PENDING</ref>,<sp/><ref refid="namespacearrow_1a235876e04ae6167cfde18ad69cf2821aad0749aaba8b833466dfcbb0428e4f89c" kindref="member">SUCCESS</ref>,<sp/><ref refid="namespacearrow_1a235876e04ae6167cfde18ad69cf2821aa36fc6065a3e970bc3e6b2e59da52bf2a" kindref="member">FAILURE</ref><sp/>};</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="namespacearrow_1a1f52379e463af0bd762c960323ba6f2b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacearrow_1a1f52379e463af0bd762c960323ba6f2b" kindref="member">IsFutureFinished</ref>(<ref refid="namespacearrow_1a235876e04ae6167cfde18ad69cf2821a" kindref="member">FutureState</ref><sp/>state)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state<sp/>!=<sp/><ref refid="namespacearrow_1a235876e04ae6167cfde18ad69cf2821aac69f06e1a9b016d133907b4e5f5864d2" kindref="member">FutureState::PENDING</ref>;<sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">//<sp/>---------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Type-erased<sp/>helpers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classarrow_1_1_future_waiter" kindref="compound">FutureWaiter</ref>;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classarrow_1_1_future" kindref="compound">Future</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="classarrow_1_1_future_impl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_future_impl" kindref="compound">FutureImpl</ref><sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="48" refid="classarrow_1_1_future_impl_1a99300ca801a4ca330c592bd5a588d915" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>kInfinity<sp/>=<sp/>HUGE_VAL;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classarrow_1_1_future_impl" kindref="compound">FutureImpl</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="classarrow_1_1_future_impl_1ae8efcaad9bde371df856f2da15d78a15" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacearrow_1a235876e04ae6167cfde18ad69cf2821a" kindref="member">FutureState</ref><sp/><ref refid="classarrow_1_1_future_impl_1ae8efcaad9bde371df856f2da15d78a15" kindref="member">state</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>state_.load();<sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;FutureImpl&gt;<sp/>Make();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_future_impl" kindref="compound">FutureImpl</ref>();</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><ref refid="macros_8h_1a40d72e185b1488b5659b761f0b6115bb" kindref="member">ARROW_DISALLOW_COPY_AND_ASSIGN</ref>(<ref refid="classarrow_1_1_future_impl" kindref="compound">FutureImpl</ref>);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Future<sp/>API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MarkFinished();</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MarkFailed();</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Wait();</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Wait(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>seconds);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Waiter<sp/>API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="namespacearrow_1a235876e04ae6167cfde18ad69cf2821a" kindref="member">FutureState</ref><sp/>SetWaiter(<ref refid="classarrow_1_1_future_waiter" kindref="compound">FutureWaiter</ref>*<sp/>w,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>future_num);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RemoveWaiter(<ref refid="classarrow_1_1_future_waiter" kindref="compound">FutureWaiter</ref>*<sp/>w);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="classarrow_1_1_future_impl_1a49bb0ea22f1d3099770d173791ecf378" refkind="member"><highlight class="normal"><sp/><sp/>std::atomic&lt;FutureState&gt;<sp/><ref refid="classarrow_1_1_future_impl_1a49bb0ea22f1d3099770d173791ecf378" kindref="member">state_</ref>;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="73" refid="classarrow_1_1_future_impl_1ab033f7626ddfc7f1d62cb3d3952d166e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classarrow_1_1_future" kindref="compound">Future</ref>;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="75" refid="classarrow_1_1_future_impl_1a0a18d5849d085595d2ab766d738c6445" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classarrow_1_1_future_storage" kindref="compound">FutureStorage</ref>;</highlight></codeline>
<codeline lineno="76" refid="classarrow_1_1_future_impl_1a0392e480c9a553ce4efe5be4ed6db938" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classarrow_1_1_future_waiter" kindref="compound">FutureWaiter</ref>;</highlight></codeline>
<codeline lineno="77" refid="classarrow_1_1_future_impl_1ab918a8e1997f115abd9a3bad101954d5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">FutureWaiterImpl;</highlight></codeline>
<codeline lineno="78"><highlight class="normal">};</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>object<sp/>that<sp/>waits<sp/>on<sp/>multiple<sp/>futures<sp/>at<sp/>once.<sp/><sp/>Only<sp/>one<sp/>waiter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="comment">//<sp/>can<sp/>be<sp/>registered<sp/>for<sp/>each<sp/>future<sp/>at<sp/>any<sp/>time.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82" refid="classarrow_1_1_future_waiter" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_future_waiter" kindref="compound">FutureWaiter</ref><sp/>{</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="84" refid="classarrow_1_1_future_waiter_1aa6cc77f1aa79a7e2f70c135eabbc41d5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_future_waiter_1aa6cc77f1aa79a7e2f70c135eabbc41d5" kindref="member">Kind</ref><sp/>:<sp/>int8_t<sp/>{<sp/>ANY,<sp/>ALL,<sp/>ALL_OR_FIRST_FAILED,<sp/>ITERATE<sp/>};</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="classarrow_1_1_future_waiter_1ae9bf616b6751ab4f0cb84ec0d0894458" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>kInfinity<sp/>=<sp/><ref refid="classarrow_1_1_future_impl_1a99300ca801a4ca330c592bd5a588d915" kindref="member">FutureImpl::kInfinity</ref>;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;FutureWaiter&gt;<sp/>Make(<ref refid="classarrow_1_1_future_waiter_1aa6cc77f1aa79a7e2f70c135eabbc41d5" kindref="member">Kind</ref><sp/>kind,<sp/>std::vector&lt;FutureImpl*&gt;<sp/>futures);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FutureType&gt;</highlight></codeline>
<codeline lineno="91" refid="classarrow_1_1_future_waiter_1a6b97bc8f3347b0e0c010391ffaf18301" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;FutureWaiter&gt;<sp/><ref refid="classarrow_1_1_future_waiter_1a6b97bc8f3347b0e0c010391ffaf18301" kindref="member">Make</ref>(<ref refid="classarrow_1_1_future_waiter_1aa6cc77f1aa79a7e2f70c135eabbc41d5" kindref="member">Kind</ref><sp/>kind,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;FutureType&gt;&amp;<sp/>futures)<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Make(kind,<sp/>ExtractFutures(futures));</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classarrow_1_1_future_waiter" kindref="compound">FutureWaiter</ref>();</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Wait(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>seconds<sp/>=<sp/>kInfinity);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>WaitAndFetchOne();</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>MoveFinishedFutures();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>FutureImpls<sp/>from<sp/>Futures</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FutureType,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Enable<sp/>=<sp/>std::enable_if&lt;!std::is_pointer&lt;FutureType&gt;::value&gt;&gt;</highlight></codeline>
<codeline lineno="107" refid="classarrow_1_1_future_waiter_1a416880160d813ec5754ac265ffe2b967" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;FutureImpl*&gt;<sp/><ref refid="classarrow_1_1_future_waiter_1a416880160d813ec5754ac265ffe2b967" kindref="member">ExtractFutures</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;FutureType&gt;&amp;<sp/>futures)<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;FutureImpl*&gt;<sp/>base_futures(futures.size());</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>static_cast&lt;int&gt;(futures.size());<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base_futures[i]<sp/>=<sp/>futures[i].impl_;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>base_futures;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Extract<sp/>FutureImpls<sp/>from<sp/>Future<sp/>pointers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>FutureType&gt;</highlight></codeline>
<codeline lineno="117" refid="classarrow_1_1_future_waiter_1a168804a5e150c9df201e6acd47cad5ca" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::vector&lt;FutureImpl*&gt;<sp/><ref refid="classarrow_1_1_future_waiter_1a168804a5e150c9df201e6acd47cad5ca" kindref="member">ExtractFutures</ref>(</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;FutureType*&gt;&amp;<sp/>futures)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;FutureImpl*&gt;<sp/>base_futures(futures.size());</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>static_cast&lt;int&gt;(futures.size());<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>base_futures[i]<sp/>=<sp/>futures[i]-&gt;impl_;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>base_futures;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_future_waiter" kindref="compound">FutureWaiter</ref>();</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><ref refid="macros_8h_1a40d72e185b1488b5659b761f0b6115bb" kindref="member">ARROW_DISALLOW_COPY_AND_ASSIGN</ref>(<ref refid="classarrow_1_1_future_waiter" kindref="compound">FutureWaiter</ref>);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>MarkFutureFinishedUnlocked(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>future_num,<sp/><ref refid="namespacearrow_1a235876e04ae6167cfde18ad69cf2821a" kindref="member">FutureState</ref><sp/>state);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="classarrow_1_1_future_waiter_1acd29cbf6b5a0e256c9285c65f319cd98" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classarrow_1_1_future_impl" kindref="compound">FutureImpl</ref>;</highlight></codeline>
<codeline lineno="132" refid="classarrow_1_1_future_waiter_1a53093de0670ac3058011a767e221db70" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ConcreteFutureImpl;</highlight></codeline>
<codeline lineno="133"><highlight class="normal">};</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">//<sp/>---------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//<sp/>An<sp/>intermediate<sp/>class<sp/>for<sp/>storing<sp/>Future<sp/>results</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="classarrow_1_1_future_storage_base" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classarrow_1_1_future_storage_base" kindref="compound">FutureStorageBase</ref><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="140" refid="classarrow_1_1_future_storage_base_1a5da96cb10355f33a0ff891a4ed2fd795" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_future_storage_base_1a5da96cb10355f33a0ff891a4ed2fd795" kindref="member">FutureStorageBase</ref>()<sp/>:<sp/>impl_(<ref refid="classarrow_1_1_future_impl" kindref="compound">FutureImpl</ref>::Make())<sp/>{}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><ref refid="macros_8h_1a40d72e185b1488b5659b761f0b6115bb" kindref="member">ARROW_DISALLOW_COPY_AND_ASSIGN</ref>(<ref refid="classarrow_1_1_future_storage_base" kindref="compound">FutureStorageBase</ref>);</highlight></codeline>
<codeline lineno="144" refid="classarrow_1_1_future_storage_base_1abc496e1b2bc391ec485243360d175400" refkind="member"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;FutureImpl&gt;<sp/><ref refid="classarrow_1_1_future_storage_base_1abc496e1b2bc391ec485243360d175400" kindref="member">impl_</ref>;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="147" refid="classarrow_1_1_future_storage_base_1ab033f7626ddfc7f1d62cb3d3952d166e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classarrow_1_1_future" kindref="compound">Future</ref>;</highlight></codeline>
<codeline lineno="148"><highlight class="normal">};</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="151" refid="classarrow_1_1_future_storage" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classarrow_1_1_future_storage" kindref="compound">FutureStorage</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_future_storage_base" kindref="compound">FutureStorageBase</ref><sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="153" refid="classarrow_1_1_future_storage_1a042a552f5683c223164aa0e8037a9458" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HasValue<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155" refid="classarrow_1_1_future_storage_1a16b39e17671d52a25d74e17e7f851e79" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_future_storage_1a16b39e17671d52a25d74e17e7f851e79" kindref="member">status</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>result_.status();<sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="158" refid="classarrow_1_1_future_storage_1a37b6b6e6bd3a78a4c93bf196300a450d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_future_storage_1a37b6b6e6bd3a78a4c93bf196300a450d" kindref="member">MarkFinished</ref>(U&amp;&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>result_<sp/>=<sp/>std::forward&lt;U&gt;(value);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="macros_8h_1a1f418a9edc46d53e62732e7ccd06f329" kindref="member">ARROW_PREDICT_TRUE</ref>(result_.ok()))<sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>impl_-&gt;MarkFinished();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>impl_-&gt;MarkFailed();</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func&gt;</highlight></codeline>
<codeline lineno="168" refid="classarrow_1_1_future_storage_1a22ceebaba1fbe08ceed6cccecce5a791" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_future_storage_1a22ceebaba1fbe08ceed6cccecce5a791" kindref="member">ExecuteAndMarkFinished</ref>(Func&amp;&amp;<sp/>func)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>MarkFinished(func());</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="173" refid="classarrow_1_1_future_storage_1a1dbcce7cae9a23482847eafbd9320951" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;T&gt;</ref><sp/><ref refid="classarrow_1_1_future_storage_1a1dbcce7cae9a23482847eafbd9320951" kindref="member">result_</ref>;</highlight></codeline>
<codeline lineno="174" refid="classarrow_1_1_future_storage_1a3764cc1bcb8b7944580563d334984ace" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classarrow_1_1_future" kindref="compound">Future</ref>&lt;T&gt;;</highlight></codeline>
<codeline lineno="175"><highlight class="normal">};</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>Future&lt;void&gt;<sp/>just<sp/>stores<sp/>a<sp/>Status<sp/>(always<sp/>ok<sp/>for<sp/>now,<sp/>but<sp/>that<sp/>could<sp/>change</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="comment">//<sp/>if<sp/>we<sp/>implement<sp/>cancellation).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="180" refid="classarrow_1_1_future_storage_3_01void_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classarrow_1_1_future_storage" kindref="compound">FutureStorage</ref>&lt;void&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_future_storage_base" kindref="compound">FutureStorageBase</ref><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="182" refid="classarrow_1_1_future_storage_3_01void_01_4_1a00a541c829cc277094cc718fefdb0ca7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HasValue<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184" refid="classarrow_1_1_future_storage_3_01void_01_4_1a65deef99c41ca22c58af521f8075af5a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_future_storage_3_01void_01_4_1a65deef99c41ca22c58af521f8075af5a" kindref="member">status</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status_;<sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186" refid="classarrow_1_1_future_storage_3_01void_01_4_1a17a51c016dd5331e4ed6b42563fddbd8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_future_storage_3_01void_01_4_1a17a51c016dd5331e4ed6b42563fddbd8" kindref="member">MarkFinished</ref>(<ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>st<sp/>=<sp/><ref refid="classarrow_1_1_status_1a5c0b0031db6eeec3dcc70485d24cfe03" kindref="member">Status::OK</ref>())<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>status_<sp/>=<sp/>std::move(st);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>impl_-&gt;MarkFinished();</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func&gt;</highlight></codeline>
<codeline lineno="192" refid="classarrow_1_1_future_storage_3_01void_01_4_1a564a021d112e821777dcb7b915570947" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_future_storage_3_01void_01_4_1a564a021d112e821777dcb7b915570947" kindref="member">ExecuteAndMarkFinished</ref>(Func&amp;&amp;<sp/>func)<sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>func();</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/>MarkFinished();</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="198" refid="classarrow_1_1_future_storage_3_01void_01_4_1ac9afe3f3df5a26592cb8ef159c018185" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_future_storage_3_01void_01_4_1ac9afe3f3df5a26592cb8ef159c018185" kindref="member">status_</ref>;</highlight></codeline>
<codeline lineno="199"><highlight class="normal">};</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>Future&lt;Status&gt;<sp/>just<sp/>stores<sp/>a<sp/>Status.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="203" refid="classarrow_1_1_future_storage_3_01_status_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classarrow_1_1_future_storage" kindref="compound">FutureStorage</ref>&lt;<ref refid="classarrow_1_1_status" kindref="compound">Status</ref>&gt;<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_future_storage_base" kindref="compound">FutureStorageBase</ref><sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="205" refid="classarrow_1_1_future_storage_3_01_status_01_4_1adf88cf7018bb8262a081f680c8660d33" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HasValue<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207" refid="classarrow_1_1_future_storage_3_01_status_01_4_1ab35c6c3b16338ab6ba5f4e4993a0a1d0" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_future_storage_3_01_status_01_4_1ab35c6c3b16338ab6ba5f4e4993a0a1d0" kindref="member">status</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>status_;<sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209" refid="classarrow_1_1_future_storage_3_01_status_01_4_1a6250b7384f1155206b590787b8b08f4f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_future_storage_3_01_status_01_4_1a6250b7384f1155206b590787b8b08f4f" kindref="member">MarkFinished</ref>(<ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>st)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>status_<sp/>=<sp/>std::move(st);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="macros_8h_1a1f418a9edc46d53e62732e7ccd06f329" kindref="member">ARROW_PREDICT_TRUE</ref>(status_.ok()))<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>impl_-&gt;MarkFinished();</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>impl_-&gt;MarkFailed();</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func&gt;</highlight></codeline>
<codeline lineno="219" refid="classarrow_1_1_future_storage_3_01_status_01_4_1ae90ba01e97360a477b0f44b6673598bf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_future_storage_3_01_status_01_4_1ae90ba01e97360a477b0f44b6673598bf" kindref="member">ExecuteAndMarkFinished</ref>(Func&amp;&amp;<sp/>func)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>MarkFinished(func());</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="224" refid="classarrow_1_1_future_storage_3_01_status_01_4_1a9f839b4be83258f8f5d05b8da838bd80" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_future_storage_3_01_status_01_4_1a9f839b4be83258f8f5d05b8da838bd80" kindref="member">status_</ref>;</highlight></codeline>
<codeline lineno="225"><highlight class="normal">};</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight><highlight class="comment">//<sp/>---------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Public<sp/>API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classarrow_1_1_future" kindref="compound">Future</ref><sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HasValue<sp/>=<sp/><ref refid="classarrow_1_1_future_storage" kindref="compound">FutureStorage&lt;T&gt;::HasValue</ref>;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U&gt;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>EnableResult<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;HasValue,<sp/>Result&lt;U&gt;&gt;::type;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="248" refid="classarrow_1_1_future_1a007dafa635b5f0aac2b4f8a979646095" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>kInfinity<sp/>=<sp/><ref refid="classarrow_1_1_future_impl_1a99300ca801a4ca330c592bd5a588d915" kindref="member">FutureImpl::kInfinity</ref>;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>default<sp/>constructor<sp/>creates<sp/>an<sp/>invalid<sp/>Future.<sp/><sp/>Use<sp/>Future::Make()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>a<sp/>valid<sp/>Future.<sp/><sp/>This<sp/>constructor<sp/>is<sp/>mostly<sp/>for<sp/>the<sp/>convenience</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>being<sp/>able<sp/>to<sp/>presize<sp/>a<sp/>vector<sp/>of<sp/>Futures.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253" refid="classarrow_1_1_future_1a3e69c5d668fdfdb3c0bf485228146393" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_future_1a3e69c5d668fdfdb3c0bf485228146393" kindref="member">Future</ref>()<sp/>:<sp/>impl_(<ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Consumer<sp/>API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257" refid="classarrow_1_1_future_1af2ba2618de95a29e50181cfbe4803764" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_future_1af2ba2618de95a29e50181cfbe4803764" kindref="member">is_valid</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>storage_<sp/>!=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>;<sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="263" refid="classarrow_1_1_future_1af5ed07708946f090bb76f7544f68e483" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacearrow_1a235876e04ae6167cfde18ad69cf2821a" kindref="member">FutureState</ref><sp/><ref refid="classarrow_1_1_future_1af5ed07708946f090bb76f7544f68e483" kindref="member">state</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/>CheckValid();</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl_-&gt;state();</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U<sp/>=<sp/>T&gt;</highlight></codeline>
<codeline lineno="273" refid="classarrow_1_1_future_1a5dd58e6ba0ffd155c0e6757f8a306f27" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;T&gt;</ref>&amp;<sp/><ref refid="classarrow_1_1_future_1a5dd58e6ba0ffd155c0e6757f8a306f27" kindref="member">result</ref>(EnableResult&lt;U&gt;*<sp/>=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>CheckValid();</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>Wait();</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>storage_-&gt;result_;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>U<sp/>=<sp/>T&gt;</highlight></codeline>
<codeline lineno="280" refid="classarrow_1_1_future_1a1fae482e513493f2a7d4da21193fcdd9" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;T&gt;</ref><sp/><ref refid="classarrow_1_1_future_1a1fae482e513493f2a7d4da21193fcdd9" kindref="member">result</ref>(EnableResult&lt;U&gt;*<sp/>=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>)<sp/>&amp;&amp;<sp/>{</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>CheckValid();</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>Wait();</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(storage_-&gt;result_);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="287" refid="classarrow_1_1_future_1af690abcebd3049d956dd39b04dd29463" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_future_1af690abcebd3049d956dd39b04dd29463" kindref="member">status</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>CheckValid();</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>Wait();</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>storage_-&gt;status();</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="294" refid="classarrow_1_1_future_1aa0af9b784ec0ebf42360f1c64b3fdf4c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_future_1aa0af9b784ec0ebf42360f1c64b3fdf4c" kindref="member">Wait</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>CheckValid();</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="namespacearrow_1a1f52379e463af0bd762c960323ba6f2b" kindref="member">IsFutureFinished</ref>(impl_-&gt;state()))<sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>impl_-&gt;Wait();</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="306" refid="classarrow_1_1_future_1aef547d9d980e9d011812886ba0f6fae2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_future_1aef547d9d980e9d011812886ba0f6fae2" kindref="member">Wait</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>seconds)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>CheckValid();</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="namespacearrow_1a1f52379e463af0bd762c960323ba6f2b" kindref="member">IsFutureFinished</ref>(impl_-&gt;state()))<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>impl_-&gt;Wait(seconds);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Producer<sp/>API</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func&gt;</highlight></codeline>
<codeline lineno="323" refid="classarrow_1_1_future_1a045fd7356132f0655f4fea480d9616ac" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_future_1a045fd7356132f0655f4fea480d9616ac" kindref="member">ExecuteAndMarkFinished</ref>(Func&amp;&amp;<sp/>func)<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>storage_-&gt;ExecuteAndMarkFinished(std::forward&lt;Func&gt;(func));</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="336" refid="classarrow_1_1_future_1aecfdd8249da4b7a6bbceb4216d084643" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_future_1aecfdd8249da4b7a6bbceb4216d084643" kindref="member">MarkFinished</ref>(Args&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>storage_-&gt;MarkFinished(std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="343" refid="classarrow_1_1_future_1a100c35295441f491f161120c815091f2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_future" kindref="compound">Future</ref><sp/><ref refid="classarrow_1_1_future_1a100c35295441f491f161120c815091f2" kindref="member">Make</ref>()<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_future" kindref="compound">Future</ref><sp/>fut;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>fut.<ref refid="classarrow_1_1_future_1aa51be76771324fc42b9d7b168e7f7813" kindref="member">storage_</ref><sp/>=<sp/>std::make_shared&lt;FutureStorage&lt;T&gt;&gt;();</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>fut.<ref refid="classarrow_1_1_future_1acadfe2e4dc340be798b940aadf9fd230" kindref="member">impl_</ref><sp/>=<sp/>fut.<ref refid="classarrow_1_1_future_1aa51be76771324fc42b9d7b168e7f7813" kindref="member">storage_</ref>-&gt;impl_.get();</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fut;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Args&gt;</highlight></codeline>
<codeline lineno="354" refid="classarrow_1_1_future_1af06bbaf371e3028b86d9b2d898a1846a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_future" kindref="compound">Future</ref><sp/><ref refid="classarrow_1_1_future_1af06bbaf371e3028b86d9b2d898a1846a" kindref="member">MakeFinished</ref>(Args&amp;&amp;...<sp/>args)<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO<sp/>we<sp/>can<sp/>optimize<sp/>this<sp/>by<sp/>directly<sp/>creating<sp/>a<sp/>finished<sp/>FutureImpl</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>fut<sp/>=<sp/>Make();</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>fut.MarkFinished(std::forward&lt;Args&gt;(args)...);</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fut;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="362" refid="classarrow_1_1_future_1a6433ca67fd5783a26a4baa2f6f004202" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_future_1a6433ca67fd5783a26a4baa2f6f004202" kindref="member">CheckValid</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_valid())<sp/>{</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_status_1aa388393c060f3b44316876a630190576" kindref="member">Status::Invalid</ref>(</highlight><highlight class="stringliteral">&quot;Invalid<sp/>Future<sp/>(default-initialized?)&quot;</highlight><highlight class="normal">).<ref refid="classarrow_1_1_status_1a2fe3b61bd3e54c243a01f0d540d3d9ff" kindref="member">Abort</ref>();</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370" refid="classarrow_1_1_future_1aa51be76771324fc42b9d7b168e7f7813" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;FutureStorage&lt;T&gt;&gt;<sp/><ref refid="classarrow_1_1_future_1aa51be76771324fc42b9d7b168e7f7813" kindref="member">storage_</ref>;</highlight></codeline>
<codeline lineno="371" refid="classarrow_1_1_future_1acadfe2e4dc340be798b940aadf9fd230" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_future_impl" kindref="compound">FutureImpl</ref>*<sp/><ref refid="classarrow_1_1_future_1acadfe2e4dc340be798b940aadf9fd230" kindref="member">impl_</ref>;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373" refid="classarrow_1_1_future_1a0392e480c9a553ce4efe5be4ed6db938" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classarrow_1_1_future_waiter" kindref="compound">FutureWaiter</ref>;</highlight></codeline>
<codeline lineno="374"><highlight class="normal">};</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="381" refid="namespacearrow_1a00640e225ff259f4982520b907f8ca6a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacearrow_1a00640e225ff259f4982520b907f8ca6a" kindref="member">WaitForAll</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;<ref refid="classarrow_1_1_future" kindref="compound">Future&lt;T&gt;</ref>&gt;&amp;<sp/>futures,</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>seconds<sp/>=<sp/><ref refid="classarrow_1_1_future_waiter_1ae9bf616b6751ab4f0cb84ec0d0894458" kindref="member">FutureWaiter::kInfinity</ref>)<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>waiter<sp/>=<sp/><ref refid="classarrow_1_1_future_waiter_1a961a7710fff17d85e4dba34fc2992717" kindref="member">FutureWaiter::Make</ref>(<ref refid="classarrow_1_1_future_waiter_1aa6cc77f1aa79a7e2f70c135eabbc41d5a23481d8f634c19eb938bf2e45b7fbeac" kindref="member">FutureWaiter::ALL</ref>,<sp/>futures);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>waiter-&gt;Wait(seconds);</highlight></codeline>
<codeline lineno="385"><highlight class="normal">}</highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="392" refid="namespacearrow_1a63fe3a20ec0285cbffe038e142ab3451" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="namespacearrow_1a00640e225ff259f4982520b907f8ca6a" kindref="member">WaitForAll</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;<ref refid="classarrow_1_1_future" kindref="compound">Future&lt;T&gt;</ref>*&gt;&amp;<sp/>futures,</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>seconds<sp/>=<sp/><ref refid="classarrow_1_1_future_waiter_1ae9bf616b6751ab4f0cb84ec0d0894458" kindref="member">FutureWaiter::kInfinity</ref>)<sp/>{</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>waiter<sp/>=<sp/><ref refid="classarrow_1_1_future_waiter_1a961a7710fff17d85e4dba34fc2992717" kindref="member">FutureWaiter::Make</ref>(<ref refid="classarrow_1_1_future_waiter_1aa6cc77f1aa79a7e2f70c135eabbc41d5a23481d8f634c19eb938bf2e45b7fbeac" kindref="member">FutureWaiter::ALL</ref>,<sp/>futures);</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>waiter-&gt;Wait(seconds);</highlight></codeline>
<codeline lineno="396"><highlight class="normal">}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="403" refid="namespacearrow_1a51d296f6420eb66d3f734f7afceaa563" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/><ref refid="namespacearrow_1a51d296f6420eb66d3f734f7afceaa563" kindref="member">WaitForAny</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;<ref refid="classarrow_1_1_future" kindref="compound">Future&lt;T&gt;</ref>&gt;&amp;<sp/>futures,</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>seconds<sp/>=<sp/><ref refid="classarrow_1_1_future_waiter_1ae9bf616b6751ab4f0cb84ec0d0894458" kindref="member">FutureWaiter::kInfinity</ref>)<sp/>{</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>waiter<sp/>=<sp/><ref refid="classarrow_1_1_future_waiter_1a961a7710fff17d85e4dba34fc2992717" kindref="member">FutureWaiter::Make</ref>(<ref refid="classarrow_1_1_future_waiter_1aa6cc77f1aa79a7e2f70c135eabbc41d5a6d284795f7c02c54d74103b26dd9e2a5" kindref="member">FutureWaiter::ANY</ref>,<sp/>futures);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/>waiter-&gt;Wait(seconds);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>waiter-&gt;MoveFinishedFutures();</highlight></codeline>
<codeline lineno="408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="415" refid="namespacearrow_1a8a7cfda6170118560ee19e8d6bbdd599" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::vector&lt;int&gt;<sp/><ref refid="namespacearrow_1a51d296f6420eb66d3f734f7afceaa563" kindref="member">WaitForAny</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;<ref refid="classarrow_1_1_future" kindref="compound">Future&lt;T&gt;</ref>*&gt;&amp;<sp/>futures,</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>seconds<sp/>=<sp/><ref refid="classarrow_1_1_future_waiter_1ae9bf616b6751ab4f0cb84ec0d0894458" kindref="member">FutureWaiter::kInfinity</ref>)<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>waiter<sp/>=<sp/><ref refid="classarrow_1_1_future_waiter_1a961a7710fff17d85e4dba34fc2992717" kindref="member">FutureWaiter::Make</ref>(<ref refid="classarrow_1_1_future_waiter_1aa6cc77f1aa79a7e2f70c135eabbc41d5a6d284795f7c02c54d74103b26dd9e2a5" kindref="member">FutureWaiter::ANY</ref>,<sp/>futures);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/>waiter-&gt;Wait(seconds);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>waiter-&gt;MoveFinishedFutures();</highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422" refid="future_8h_1a3270d0e788d3ea029123677ccdde5fc5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ARROW_ASSIGN_OR_RETURN_FUTURE_IMPL(result_name,<sp/>lhs,<sp/>T,<sp/>rexpr)<sp/>\</highlight></codeline>
<codeline lineno="423"><highlight class="preprocessor"><sp/><sp/>auto<sp/>result_name<sp/>=<sp/>(rexpr);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="424"><highlight class="preprocessor"><sp/><sp/>if<sp/>(ARROW_PREDICT_FALSE(!(result_name).ok()))<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="425"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>Future&lt;T&gt;::MakeFinished(std::move(result_name).status());<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="426"><highlight class="preprocessor"><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="427"><highlight class="preprocessor"><sp/><sp/>lhs<sp/>=<sp/>std::move(result_name).MoveValueUnsafe();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="429" refid="future_8h_1aa8e8c69a8c5268d74af0fd93a73213ea" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ARROW_ASSIGN_OR_RETURN_FUTURE(lhs,<sp/>T,<sp/>rexpr)<sp/>\</highlight></codeline>
<codeline lineno="430"><highlight class="preprocessor"><sp/><sp/>ARROW_ASSIGN_OR_RETURN_FUTURE_IMPL(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="431"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>ARROW_ASSIGN_OR_RAISE_NAME(_error_or_value,<sp/>__COUNTER__),<sp/>lhs,<sp/>T,<sp/>rexpr);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>arrow</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/arrow/cpp/src/arrow/util/future.h"/>
  </compounddef>
</doxygen>
