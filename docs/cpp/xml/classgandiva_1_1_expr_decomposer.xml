<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classgandiva_1_1_expr_decomposer" kind="class" language="C++" prot="public">
    <compoundname>gandiva::ExprDecomposer</compoundname>
    <basecompoundref refid="classgandiva_1_1_node_visitor" prot="public" virt="non-virtual">gandiva::NodeVisitor</basecompoundref>
    <includes refid="expr__decomposer_8h" local="no">gandiva/expr_decomposer.h</includes>
    <innerclass refid="classgandiva_1_1_expr_decomposer_1_1_if_stack_entry" prot="private">gandiva::ExprDecomposer::IfStackEntry</innerclass>
      <sectiondef kind="private-type">
      <memberdef kind="enum" id="classgandiva_1_1_expr_decomposer_1a03b88cb9da2587e2f9c8269d7821ff25" prot="private" static="no">
        <name>StackEntryType</name>
        <enumvalue id="classgandiva_1_1_expr_decomposer_1a03b88cb9da2587e2f9c8269d7821ff25a049f7687f2c730fda197cf90b4aaf19b" prot="private">
          <name>kStackEntryCondition</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classgandiva_1_1_expr_decomposer_1a03b88cb9da2587e2f9c8269d7821ff25ab0b6a7c5cd6e96f7c4dae3dec8c40329" prot="private">
          <name>kStackEntryThen</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classgandiva_1_1_expr_decomposer_1a03b88cb9da2587e2f9c8269d7821ff25a5e93707ecb35de971227e577a07187e8" prot="private">
          <name>kStackEntryElse</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_decomposer.h" line="72" column="1" bodyfile="/arrow/cpp/src/gandiva/expr_decomposer.h" bodystart="72" bodyend="72"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classgandiva_1_1_expr_decomposer_1a9ad8fed7c3f726acc727bc4e487ffb62" prot="private" static="no" mutable="no">
        <type>const <ref refid="classgandiva_1_1_function_registry" kindref="compound">FunctionRegistry</ref> &amp;</type>
        <definition>const FunctionRegistry&amp; gandiva::ExprDecomposer::registry_</definition>
        <argsstring></argsstring>
        <name>registry_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_decomposer.h" line="115" column="1" bodyfile="/arrow/cpp/src/gandiva/expr_decomposer.h" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgandiva_1_1_expr_decomposer_1aaa5ce305a17d45725b10fb2f408ba993" prot="private" static="no" mutable="no">
        <type><ref refid="classgandiva_1_1_annotator" kindref="compound">Annotator</ref> &amp;</type>
        <definition>Annotator&amp; gandiva::ExprDecomposer::annotator_</definition>
        <argsstring></argsstring>
        <name>annotator_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_decomposer.h" line="116" column="1" bodyfile="/arrow/cpp/src/gandiva/expr_decomposer.h" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgandiva_1_1_expr_decomposer_1ae22720d36241d9b615c007aba5f96201" prot="private" static="no" mutable="no">
        <type>std::stack&lt; std::unique_ptr&lt; IfStackEntry &gt; &gt;</type>
        <definition>std::stack&lt;std::unique_ptr&lt;IfStackEntry&gt; &gt; gandiva::ExprDecomposer::if_entries_stack_</definition>
        <argsstring></argsstring>
        <name>if_entries_stack_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_decomposer.h" line="117" column="1" bodyfile="/arrow/cpp/src/gandiva/expr_decomposer.h" bodystart="117" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgandiva_1_1_expr_decomposer_1a6a471029d71f70971f78449942cdd3c8" prot="private" static="no" mutable="no">
        <type><ref refid="namespacegandiva_1ac7916e2d63d469d1c3a12e0110d2db80" kindref="member">ValueValidityPairPtr</ref></type>
        <definition>ValueValidityPairPtr gandiva::ExprDecomposer::result_</definition>
        <argsstring></argsstring>
        <name>result_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_decomposer.h" line="118" column="1" bodyfile="/arrow/cpp/src/gandiva/expr_decomposer.h" bodystart="118" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgandiva_1_1_expr_decomposer_1a45392a6045510387112c566b47534b69" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>gandiva::ExprDecomposer::ExprDecomposer</definition>
        <argsstring>(const FunctionRegistry &amp;registry, Annotator &amp;annotator)</argsstring>
        <name>ExprDecomposer</name>
        <param>
          <type>const <ref refid="classgandiva_1_1_function_registry" kindref="compound">FunctionRegistry</ref> &amp;</type>
          <declname>registry</declname>
        </param>
        <param>
          <type><ref refid="classgandiva_1_1_annotator" kindref="compound">Annotator</ref> &amp;</type>
          <declname>annotator</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_decomposer.h" line="40" column="1" bodyfile="/arrow/cpp/src/gandiva/expr_decomposer.h" bodystart="40" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_expr_decomposer_1a6b4caf7b9ee5d6a49355757f722c1ef5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>Status gandiva::ExprDecomposer::Decompose</definition>
        <argsstring>(const Node &amp;root, ValueValidityPairPtr *out)</argsstring>
        <name>Decompose</name>
        <param>
          <type>const <ref refid="classgandiva_1_1_node" kindref="compound">Node</ref> &amp;</type>
          <declname>root</declname>
        </param>
        <param>
          <type><ref refid="namespacegandiva_1ac7916e2d63d469d1c3a12e0110d2db80" kindref="member">ValueValidityPairPtr</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_decomposer.h" line="43" column="1" bodyfile="/arrow/cpp/src/gandiva/expr_decomposer.h" bodystart="43" bodyend="49"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classgandiva_1_1_expr_decomposer_1a191791889816a14366b21a486154680e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gandiva::ExprDecomposer::ARROW_DISALLOW_COPY_AND_ASSIGN</definition>
        <argsstring>(ExprDecomposer)</argsstring>
        <name>ARROW_DISALLOW_COPY_AND_ASSIGN</name>
        <param>
          <type><ref refid="classgandiva_1_1_expr_decomposer" kindref="compound">ExprDecomposer</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_decomposer.h" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_expr_decomposer_1ae8cb217d081d67af522d8c1ae6f4002b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gandiva::ExprDecomposer::FRIEND_TEST</definition>
        <argsstring>(TestExprDecomposer, TestStackSimple)</argsstring>
        <name>FRIEND_TEST</name>
        <param>
          <type>TestExprDecomposer</type>
        </param>
        <param>
          <type>TestStackSimple</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_decomposer.h" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_expr_decomposer_1a31cb800bd5c2c066c8b820ceb317e669" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gandiva::ExprDecomposer::FRIEND_TEST</definition>
        <argsstring>(TestExprDecomposer, TestNested)</argsstring>
        <name>FRIEND_TEST</name>
        <param>
          <type>TestExprDecomposer</type>
        </param>
        <param>
          <type>TestNested</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_decomposer.h" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_expr_decomposer_1a0930f489328f28f6ec456c7560e6f21a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gandiva::ExprDecomposer::FRIEND_TEST</definition>
        <argsstring>(TestExprDecomposer, TestInternalIf)</argsstring>
        <name>FRIEND_TEST</name>
        <param>
          <type>TestExprDecomposer</type>
        </param>
        <param>
          <type>TestInternalIf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_decomposer.h" line="56" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_expr_decomposer_1a2e965959a7346978599ab8f91920bce0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gandiva::ExprDecomposer::FRIEND_TEST</definition>
        <argsstring>(TestExprDecomposer, TestParallelIf)</argsstring>
        <name>FRIEND_TEST</name>
        <param>
          <type>TestExprDecomposer</type>
        </param>
        <param>
          <type>TestParallelIf</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_decomposer.h" line="57" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_expr_decomposer_1a34db8196bb1967cc03017ae25899dc68" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gandiva::ExprDecomposer::FRIEND_TEST</definition>
        <argsstring>(TestExprDecomposer, TestIfInCondition)</argsstring>
        <name>FRIEND_TEST</name>
        <param>
          <type>TestExprDecomposer</type>
        </param>
        <param>
          <type>TestIfInCondition</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_decomposer.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_expr_decomposer_1a4a61ed4115211b1c40c04363cd5f286b" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>Status gandiva::ExprDecomposer::Visit</definition>
        <argsstring>(const FieldNode &amp;node) override</argsstring>
        <name>Visit</name>
        <reimplements refid="classgandiva_1_1_node_visitor_1a313074d7d961481bcc607dde4968a763">Visit</reimplements>
        <param>
          <type>const <ref refid="classgandiva_1_1_field_node" kindref="compound">FieldNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_decomposer.h" line="60" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_expr_decomposer_1ab7c8f315d21c1f3aaffbf9da6b75658d" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>Status gandiva::ExprDecomposer::Visit</definition>
        <argsstring>(const FunctionNode &amp;node) override</argsstring>
        <name>Visit</name>
        <reimplements refid="classgandiva_1_1_node_visitor_1a09d499c2d3b35d74dbee7229e7246331">Visit</reimplements>
        <param>
          <type>const <ref refid="classgandiva_1_1_function_node" kindref="compound">FunctionNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_decomposer.h" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_expr_decomposer_1a17c62498ab2dc95fc382a5fb0c0213a3" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>Status gandiva::ExprDecomposer::Visit</definition>
        <argsstring>(const IfNode &amp;node) override</argsstring>
        <name>Visit</name>
        <reimplements refid="classgandiva_1_1_node_visitor_1a3ce1ab66ad7c8604c5113c84f5ebb71c">Visit</reimplements>
        <param>
          <type>const <ref refid="classgandiva_1_1_if_node" kindref="compound">IfNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_decomposer.h" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_expr_decomposer_1aab71831a51fb37e651776d3a008fbc68" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>Status gandiva::ExprDecomposer::Visit</definition>
        <argsstring>(const LiteralNode &amp;node) override</argsstring>
        <name>Visit</name>
        <reimplements refid="classgandiva_1_1_node_visitor_1aa626388db2d288fadaf4f068a03a370f">Visit</reimplements>
        <param>
          <type>const <ref refid="classgandiva_1_1_literal_node" kindref="compound">LiteralNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_decomposer.h" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_expr_decomposer_1a2387a1990526c92578b2f61772bfb6df" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>Status gandiva::ExprDecomposer::Visit</definition>
        <argsstring>(const BooleanNode &amp;node) override</argsstring>
        <name>Visit</name>
        <reimplements refid="classgandiva_1_1_node_visitor_1ab8df9dcf0f4506f980720a037aee2bab">Visit</reimplements>
        <param>
          <type>const <ref refid="classgandiva_1_1_boolean_node" kindref="compound">BooleanNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_decomposer.h" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_expr_decomposer_1adcfbbf2dec8acb5779be27b70c2bc628" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>Status gandiva::ExprDecomposer::Visit</definition>
        <argsstring>(const InExpressionNode&lt; int32_t &gt; &amp;node) override</argsstring>
        <name>Visit</name>
        <reimplements refid="classgandiva_1_1_node_visitor_1aa8478c2ec83c07bd63b21e9f73e29ee5">Visit</reimplements>
        <param>
          <type>const <ref refid="classgandiva_1_1_in_expression_node" kindref="compound">InExpressionNode</ref>&lt; int32_t &gt; &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_decomposer.h" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_expr_decomposer_1a7d9ee03303d527e64a9cadd2d0d52bdd" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>Status gandiva::ExprDecomposer::Visit</definition>
        <argsstring>(const InExpressionNode&lt; int64_t &gt; &amp;node) override</argsstring>
        <name>Visit</name>
        <reimplements refid="classgandiva_1_1_node_visitor_1a8f41dd56c1e1f2b6178f7d31db8d816a">Visit</reimplements>
        <param>
          <type>const <ref refid="classgandiva_1_1_in_expression_node" kindref="compound">InExpressionNode</ref>&lt; int64_t &gt; &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_decomposer.h" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_expr_decomposer_1ad1f89fa5f2c942c839ea3947588f8c5c" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>Status gandiva::ExprDecomposer::Visit</definition>
        <argsstring>(const InExpressionNode&lt; std::string &gt; &amp;node) override</argsstring>
        <name>Visit</name>
        <reimplements refid="classgandiva_1_1_node_visitor_1a16c30d3fe1f5e2230af81bfa95df534d">Visit</reimplements>
        <param>
          <type>const <ref refid="classgandiva_1_1_in_expression_node" kindref="compound">InExpressionNode</ref>&lt; std::string &gt; &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_decomposer.h" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_expr_decomposer_1accb8c1d135e5bbc73b29cb7812afe355" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classgandiva_1_1_function_node" kindref="compound">FunctionNode</ref></type>
        <definition>const FunctionNode gandiva::ExprDecomposer::TryOptimize</definition>
        <argsstring>(const FunctionNode &amp;node)</argsstring>
        <name>TryOptimize</name>
        <param>
          <type>const <ref refid="classgandiva_1_1_function_node" kindref="compound">FunctionNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_decomposer.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_expr_decomposer_1a1a2eef4389f5ef752dbf844fefd3ec93" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gandiva::ExprDecomposer::PushConditionEntry</definition>
        <argsstring>(const IfNode &amp;node)</argsstring>
        <name>PushConditionEntry</name>
        <param>
          <type>const <ref refid="classgandiva_1_1_if_node" kindref="compound">IfNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_decomposer.h" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_expr_decomposer_1a96f5069cb6038cce42524998ac8b1fcc" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gandiva::ExprDecomposer::PopConditionEntry</definition>
        <argsstring>(const IfNode &amp;node)</argsstring>
        <name>PopConditionEntry</name>
        <param>
          <type>const <ref refid="classgandiva_1_1_if_node" kindref="compound">IfNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_decomposer.h" line="97" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_expr_decomposer_1ac3c43963582405785ef1173ac9135da8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int gandiva::ExprDecomposer::PushThenEntry</definition>
        <argsstring>(const IfNode &amp;node)</argsstring>
        <name>PushThenEntry</name>
        <param>
          <type>const <ref refid="classgandiva_1_1_if_node" kindref="compound">IfNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_decomposer.h" line="101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_expr_decomposer_1ac4c7ca4e4127146a26a874524a59c8c8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gandiva::ExprDecomposer::PopThenEntry</definition>
        <argsstring>(const IfNode &amp;node)</argsstring>
        <name>PopThenEntry</name>
        <param>
          <type>const <ref refid="classgandiva_1_1_if_node" kindref="compound">IfNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_decomposer.h" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_expr_decomposer_1aa82ddabc3d5a44d53806fe59f5fa16ba" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gandiva::ExprDecomposer::PushElseEntry</definition>
        <argsstring>(const IfNode &amp;node, int local_bitmap_idx)</argsstring>
        <name>PushElseEntry</name>
        <param>
          <type>const <ref refid="classgandiva_1_1_if_node" kindref="compound">IfNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>int</type>
          <declname>local_bitmap_idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_decomposer.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_expr_decomposer_1a2bbba959fce699eaeb86ffe69629901f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool gandiva::ExprDecomposer::PopElseEntry</definition>
        <argsstring>(const IfNode &amp;node)</argsstring>
        <name>PopElseEntry</name>
        <param>
          <type>const <ref refid="classgandiva_1_1_if_node" kindref="compound">IfNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_decomposer.h" line="111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_expr_decomposer_1a15de9156cc73655315597e1203a6355a" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacegandiva_1ac7916e2d63d469d1c3a12e0110d2db80" kindref="member">ValueValidityPairPtr</ref></type>
        <definition>ValueValidityPairPtr gandiva::ExprDecomposer::result</definition>
        <argsstring>()</argsstring>
        <name>result</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/expr_decomposer.h" line="113" column="1" bodyfile="/arrow/cpp/src/gandiva/expr_decomposer.h" bodystart="113" bodyend="113"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Decomposes an expression tree to separate out the validity and value expressions. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1461">
        <label>gandiva::NodeVisitor</label>
        <link refid="classgandiva_1_1_node_visitor"/>
      </node>
      <node id="1460">
        <label>gandiva::ExprDecomposer</label>
        <link refid="classgandiva_1_1_expr_decomposer"/>
        <childnode refid="1461" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1463">
        <label>gandiva::NodeVisitor</label>
        <link refid="classgandiva_1_1_node_visitor"/>
      </node>
      <node id="1462">
        <label>gandiva::ExprDecomposer</label>
        <link refid="classgandiva_1_1_expr_decomposer"/>
        <childnode refid="1463" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/gandiva/expr_decomposer.h" line="38" column="1" bodyfile="/arrow/cpp/src/gandiva/expr_decomposer.h" bodystart="38" bodyend="119"/>
    <listofallmembers>
      <member refid="classgandiva_1_1_expr_decomposer_1aaa5ce305a17d45725b10fb2f408ba993" prot="private" virt="non-virtual"><scope>gandiva::ExprDecomposer</scope><name>annotator_</name></member>
      <member refid="classgandiva_1_1_expr_decomposer_1a191791889816a14366b21a486154680e" prot="private" virt="non-virtual"><scope>gandiva::ExprDecomposer</scope><name>ARROW_DISALLOW_COPY_AND_ASSIGN</name></member>
      <member refid="classgandiva_1_1_expr_decomposer_1a6b4caf7b9ee5d6a49355757f722c1ef5" prot="public" virt="non-virtual"><scope>gandiva::ExprDecomposer</scope><name>Decompose</name></member>
      <member refid="classgandiva_1_1_expr_decomposer_1a45392a6045510387112c566b47534b69" prot="public" virt="non-virtual"><scope>gandiva::ExprDecomposer</scope><name>ExprDecomposer</name></member>
      <member refid="classgandiva_1_1_expr_decomposer_1ae8cb217d081d67af522d8c1ae6f4002b" prot="private" virt="non-virtual"><scope>gandiva::ExprDecomposer</scope><name>FRIEND_TEST</name></member>
      <member refid="classgandiva_1_1_expr_decomposer_1a31cb800bd5c2c066c8b820ceb317e669" prot="private" virt="non-virtual"><scope>gandiva::ExprDecomposer</scope><name>FRIEND_TEST</name></member>
      <member refid="classgandiva_1_1_expr_decomposer_1a0930f489328f28f6ec456c7560e6f21a" prot="private" virt="non-virtual"><scope>gandiva::ExprDecomposer</scope><name>FRIEND_TEST</name></member>
      <member refid="classgandiva_1_1_expr_decomposer_1a2e965959a7346978599ab8f91920bce0" prot="private" virt="non-virtual"><scope>gandiva::ExprDecomposer</scope><name>FRIEND_TEST</name></member>
      <member refid="classgandiva_1_1_expr_decomposer_1a34db8196bb1967cc03017ae25899dc68" prot="private" virt="non-virtual"><scope>gandiva::ExprDecomposer</scope><name>FRIEND_TEST</name></member>
      <member refid="classgandiva_1_1_expr_decomposer_1ae22720d36241d9b615c007aba5f96201" prot="private" virt="non-virtual"><scope>gandiva::ExprDecomposer</scope><name>if_entries_stack_</name></member>
      <member refid="classgandiva_1_1_expr_decomposer_1a03b88cb9da2587e2f9c8269d7821ff25a049f7687f2c730fda197cf90b4aaf19b" prot="private" virt="non-virtual"><scope>gandiva::ExprDecomposer</scope><name>kStackEntryCondition</name></member>
      <member refid="classgandiva_1_1_expr_decomposer_1a03b88cb9da2587e2f9c8269d7821ff25a5e93707ecb35de971227e577a07187e8" prot="private" virt="non-virtual"><scope>gandiva::ExprDecomposer</scope><name>kStackEntryElse</name></member>
      <member refid="classgandiva_1_1_expr_decomposer_1a03b88cb9da2587e2f9c8269d7821ff25ab0b6a7c5cd6e96f7c4dae3dec8c40329" prot="private" virt="non-virtual"><scope>gandiva::ExprDecomposer</scope><name>kStackEntryThen</name></member>
      <member refid="classgandiva_1_1_expr_decomposer_1a96f5069cb6038cce42524998ac8b1fcc" prot="private" virt="non-virtual"><scope>gandiva::ExprDecomposer</scope><name>PopConditionEntry</name></member>
      <member refid="classgandiva_1_1_expr_decomposer_1a2bbba959fce699eaeb86ffe69629901f" prot="private" virt="non-virtual"><scope>gandiva::ExprDecomposer</scope><name>PopElseEntry</name></member>
      <member refid="classgandiva_1_1_expr_decomposer_1ac4c7ca4e4127146a26a874524a59c8c8" prot="private" virt="non-virtual"><scope>gandiva::ExprDecomposer</scope><name>PopThenEntry</name></member>
      <member refid="classgandiva_1_1_expr_decomposer_1a1a2eef4389f5ef752dbf844fefd3ec93" prot="private" virt="non-virtual"><scope>gandiva::ExprDecomposer</scope><name>PushConditionEntry</name></member>
      <member refid="classgandiva_1_1_expr_decomposer_1aa82ddabc3d5a44d53806fe59f5fa16ba" prot="private" virt="non-virtual"><scope>gandiva::ExprDecomposer</scope><name>PushElseEntry</name></member>
      <member refid="classgandiva_1_1_expr_decomposer_1ac3c43963582405785ef1173ac9135da8" prot="private" virt="non-virtual"><scope>gandiva::ExprDecomposer</scope><name>PushThenEntry</name></member>
      <member refid="classgandiva_1_1_expr_decomposer_1a9ad8fed7c3f726acc727bc4e487ffb62" prot="private" virt="non-virtual"><scope>gandiva::ExprDecomposer</scope><name>registry_</name></member>
      <member refid="classgandiva_1_1_expr_decomposer_1a15de9156cc73655315597e1203a6355a" prot="private" virt="non-virtual"><scope>gandiva::ExprDecomposer</scope><name>result</name></member>
      <member refid="classgandiva_1_1_expr_decomposer_1a6a471029d71f70971f78449942cdd3c8" prot="private" virt="non-virtual"><scope>gandiva::ExprDecomposer</scope><name>result_</name></member>
      <member refid="classgandiva_1_1_expr_decomposer_1a03b88cb9da2587e2f9c8269d7821ff25" prot="private" virt="non-virtual"><scope>gandiva::ExprDecomposer</scope><name>StackEntryType</name></member>
      <member refid="classgandiva_1_1_expr_decomposer_1accb8c1d135e5bbc73b29cb7812afe355" prot="private" virt="non-virtual"><scope>gandiva::ExprDecomposer</scope><name>TryOptimize</name></member>
      <member refid="classgandiva_1_1_expr_decomposer_1a4a61ed4115211b1c40c04363cd5f286b" prot="private" virt="virtual"><scope>gandiva::ExprDecomposer</scope><name>Visit</name></member>
      <member refid="classgandiva_1_1_expr_decomposer_1ab7c8f315d21c1f3aaffbf9da6b75658d" prot="private" virt="virtual"><scope>gandiva::ExprDecomposer</scope><name>Visit</name></member>
      <member refid="classgandiva_1_1_expr_decomposer_1a17c62498ab2dc95fc382a5fb0c0213a3" prot="private" virt="virtual"><scope>gandiva::ExprDecomposer</scope><name>Visit</name></member>
      <member refid="classgandiva_1_1_expr_decomposer_1aab71831a51fb37e651776d3a008fbc68" prot="private" virt="virtual"><scope>gandiva::ExprDecomposer</scope><name>Visit</name></member>
      <member refid="classgandiva_1_1_expr_decomposer_1a2387a1990526c92578b2f61772bfb6df" prot="private" virt="virtual"><scope>gandiva::ExprDecomposer</scope><name>Visit</name></member>
      <member refid="classgandiva_1_1_expr_decomposer_1adcfbbf2dec8acb5779be27b70c2bc628" prot="private" virt="virtual"><scope>gandiva::ExprDecomposer</scope><name>Visit</name></member>
      <member refid="classgandiva_1_1_expr_decomposer_1a7d9ee03303d527e64a9cadd2d0d52bdd" prot="private" virt="virtual"><scope>gandiva::ExprDecomposer</scope><name>Visit</name></member>
      <member refid="classgandiva_1_1_expr_decomposer_1ad1f89fa5f2c942c839ea3947588f8c5c" prot="private" virt="virtual"><scope>gandiva::ExprDecomposer</scope><name>Visit</name></member>
      <member refid="classgandiva_1_1_node_visitor_1a897bcc379c8b844c74dc32e77a445b6e" prot="public" virt="virtual"><scope>gandiva::ExprDecomposer</scope><name>~NodeVisitor</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
