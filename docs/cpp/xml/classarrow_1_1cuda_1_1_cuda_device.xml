<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1cuda_1_1_cuda_device" kind="class" language="C++" prot="public">
    <compoundname>arrow::cuda::CudaDevice</compoundname>
    <basecompoundref refid="classarrow_1_1_device" prot="public" virt="non-virtual">arrow::Device</basecompoundref>
    <includes refid="cuda__context_8h" local="no">arrow/gpu/cuda_context.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classarrow_1_1cuda_1_1_cuda_device_1a7aa0a2f5bdafbd79c27ead26fa52e3f6" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class CudaContext</definition>
        <argsstring></argsstring>
        <name>CudaContext</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="167" column="1" bodyfile="/arrow/cpp/src/arrow/gpu/cuda_context.h" bodystart="165" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classarrow_1_1cuda_1_1_cuda_device_1aabb9fcc1047a0d31fa407b5dd0af875f" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; Impl &gt;</type>
        <definition>std::unique_ptr&lt;Impl&gt; arrow::cuda::CudaDevice::impl_</definition>
        <argsstring></argsstring>
        <name>impl_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="174" column="1" bodyfile="/arrow/cpp/src/arrow/gpu/cuda_context.h" bodystart="174" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_device_1a57b40c4ecf7bd25cc566c50be60da394" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const char *</type>
        <definition>const char* arrow::cuda::CudaDevice::type_name</definition>
        <argsstring>() const override</argsstring>
        <name>type_name</name>
        <reimplements refid="classarrow_1_1_device_1a64fa6c42b0237fab3002c0da05be613d">type_name</reimplements>
        <briefdescription>
<para>A shorthand for this device&apos;s type. </para>        </briefdescription>
        <detaileddescription>
<para>The returned value is different for each device class, but is the same for all instances of a given class. It can be used as a replacement for RTTI. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="116" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_device_1ae741b9314ceb089df43cd9d3ea9a05c8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string arrow::cuda::CudaDevice::ToString</definition>
        <argsstring>() const override</argsstring>
        <name>ToString</name>
        <reimplements refid="classarrow_1_1_device_1a308203da24624f8ef8df7329f214ef6f">ToString</reimplements>
        <briefdescription>
<para>A human-readable description of the device. </para>        </briefdescription>
        <detaileddescription>
<para>The returned value should be detailed enough to distinguish between different instances, where necessary. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="117" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_device_1a632ead1002d4f6a198f9e2cc875afe18" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool arrow::cuda::CudaDevice::Equals</definition>
        <argsstring>(const Device &amp;) const override</argsstring>
        <name>Equals</name>
        <reimplements refid="classarrow_1_1_device_1acaaa334c017c8e0d097918a730d8544b">Equals</reimplements>
        <param>
          <type>const <ref refid="classarrow_1_1_device" kindref="compound">Device</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Whether this instance points to the same device as another one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_device_1af55d521eca3e9be9962d3bce9ba03102" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_memory_manager" kindref="compound">MemoryManager</ref> &gt;</type>
        <definition>std::shared_ptr&lt;MemoryManager&gt; arrow::cuda::CudaDevice::default_memory_manager</definition>
        <argsstring>() override</argsstring>
        <name>default_memory_manager</name>
        <reimplements refid="classarrow_1_1_device_1a9615d7d1f5136d43bcf1061782197412">default_memory_manager</reimplements>
        <briefdescription>
<para>Return a <ref refid="classarrow_1_1_memory_manager" kindref="compound">MemoryManager</ref> instance tied to this device. </para>        </briefdescription>
        <detaileddescription>
<para>The returned instance uses default parameters for this device type&apos;s <ref refid="classarrow_1_1_memory_manager" kindref="compound">MemoryManager</ref> implementation. Some devices also allow constructing <ref refid="classarrow_1_1_memory_manager" kindref="compound">MemoryManager</ref> instances with non-default parameters. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_device_1afbde12a21ab99759801332997f1f39c6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int arrow::cuda::CudaDevice::device_number</definition>
        <argsstring>() const</argsstring>
        <name>device_number</name>
        <briefdescription>
<para>Return the device logical number. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="126" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_device_1a8e9ef59ab09a8eb774ba25c788f17e95" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arrow::cuda::CudaDevice::device_name</definition>
        <argsstring>() const</argsstring>
        <name>device_name</name>
        <briefdescription>
<para>Return the GPU model name. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="129" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_device_1ae1e25a912004c83bb6af55574a74da00" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t arrow::cuda::CudaDevice::total_memory</definition>
        <argsstring>() const</argsstring>
        <name>total_memory</name>
        <briefdescription>
<para>Return total memory on this device. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_device_1ab5ef7531f8a55cfa3589ad7b57f6a9bd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int arrow::cuda::CudaDevice::handle</definition>
        <argsstring>() const</argsstring>
        <name>handle</name>
        <briefdescription>
<para>Return a raw CUDA device handle. </para>        </briefdescription>
        <detaileddescription>
<para>The returned value can be used to expose this device to other libraries. It should be interpreted as <computeroutput>CUdevice</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="138" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_device_1a4ea5aa189076e2ec459611b98059edb8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1cuda_1_1_cuda_context" kindref="compound">CudaContext</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;CudaContext&gt; &gt; arrow::cuda::CudaDevice::GetContext</definition>
        <argsstring>()</argsstring>
        <name>GetContext</name>
        <briefdescription>
<para>Get a CUDA driver context for this device. </para>        </briefdescription>
        <detaileddescription>
<para>The returned context is associated with the primary CUDA context for the device. This is the recommended way of getting a context for a device, as it allows interoperating transparently with any library using the primary CUDA context API. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="146" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_device_1a50b6040df34a45d76ac8a6436ecdc87d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1cuda_1_1_cuda_context" kindref="compound">CudaContext</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;CudaContext&gt; &gt; arrow::cuda::CudaDevice::GetSharedContext</definition>
        <argsstring>(void *handle)</argsstring>
        <name>GetSharedContext</name>
        <param>
          <type>void *</type>
          <declname>handle</declname>
        </param>
        <briefdescription>
<para>Get a CUDA driver context for this device, using an existing handle. </para>        </briefdescription>
        <detaileddescription>
<para>The handle is not owned: it will not be released when the <ref refid="classarrow_1_1cuda_1_1_cuda_context" kindref="compound">CudaContext</ref> is destroyed. This function should only be used if you need interoperation with a library that uses a non-primary context.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">handle</parametername>
</parameternamelist>
<parameterdescription>
<para>CUDA context handle created by another library </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_device_1a19ff77c57f37d739cbb402a7a6cd23dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1cuda_1_1_cuda_host_buffer" kindref="compound">CudaHostBuffer</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;CudaHostBuffer&gt; &gt; arrow::cuda::CudaDevice::AllocateHostBuffer</definition>
        <argsstring>(int64_t size)</argsstring>
        <name>AllocateHostBuffer</name>
        <param>
          <type>int64_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Allocate a host-residing, GPU-accessible buffer. </para>        </briefdescription>
        <detaileddescription>
<para>The buffer is allocated using this device&apos;s primary context.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer size in bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="162" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_device_1a79f4b445a02561642f489b977fe4b6e9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1cuda_1_1_cuda_device" kindref="compound">CudaDevice</ref> &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;CudaDevice&gt; &gt; arrow::cuda::CudaDevice::Make</definition>
        <argsstring>(int device_number)</argsstring>
        <name>Make</name>
        <param>
          <type>int</type>
          <declname>device_number</declname>
        </param>
        <briefdescription>
<para>Return a <ref refid="classarrow_1_1cuda_1_1_cuda_device" kindref="compound">CudaDevice</ref> instance for a particular device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">device_number</parametername>
</parameternamelist>
<parameterdescription>
<para>the CUDA device number </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="123" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_device_1a6d6eec515c1a71f424ddb92c1f2b206d" prot="protected" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::cuda::CudaDevice::CudaDevice</definition>
        <argsstring>(Impl)</argsstring>
        <name>CudaDevice</name>
        <param>
          <type>Impl</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="173" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classarrow_1_1_device" kindref="compound">Device</ref> implementation for CUDA. </para>    </briefdescription>
    <detaileddescription>
<para>Each <ref refid="classarrow_1_1cuda_1_1_cuda_device" kindref="compound">CudaDevice</ref> instance is tied to a particular CUDA device (identified by its logical device number). </para>    </detaileddescription>
    <inheritancegraph>
      <node id="807">
        <label>arrow::cuda::CudaDevice</label>
        <link refid="classarrow_1_1cuda_1_1_cuda_device"/>
        <childnode refid="808" relation="public-inheritance">
        </childnode>
      </node>
      <node id="809">
        <label>std::enable_shared_from_this&lt; Device &gt;</label>
      </node>
      <node id="808">
        <label>arrow::Device</label>
        <link refid="classarrow_1_1_device"/>
        <childnode refid="809" relation="public-inheritance">
        </childnode>
        <childnode refid="810" relation="public-inheritance">
        </childnode>
      </node>
      <node id="810">
        <label>arrow::util::EqualityComparable&lt; Device &gt;</label>
        <link refid="classarrow_1_1util_1_1_equality_comparable"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="811">
        <label>arrow::cuda::CudaDevice</label>
        <link refid="classarrow_1_1cuda_1_1_cuda_device"/>
        <childnode refid="812" relation="public-inheritance">
        </childnode>
      </node>
      <node id="813">
        <label>std::enable_shared_from_this&lt; Device &gt;</label>
      </node>
      <node id="812">
        <label>arrow::Device</label>
        <link refid="classarrow_1_1_device"/>
        <childnode refid="813" relation="public-inheritance">
        </childnode>
        <childnode refid="814" relation="public-inheritance">
        </childnode>
      </node>
      <node id="814">
        <label>arrow::util::EqualityComparable&lt; Device &gt;</label>
        <link refid="classarrow_1_1util_1_1_equality_comparable"/>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="114" column="1" bodyfile="/arrow/cpp/src/arrow/gpu/cuda_context.h" bodystart="114" bodyend="175"/>
    <listofallmembers>
      <member refid="classarrow_1_1cuda_1_1_cuda_device_1a19ff77c57f37d739cbb402a7a6cd23dc" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaDevice</scope><name>AllocateHostBuffer</name></member>
      <member refid="classarrow_1_1_device_1a40af03efaa113e357d7f466ce3510fe7" prot="protected" virt="non-virtual"><scope>arrow::cuda::CudaDevice</scope><name>ARROW_DISALLOW_COPY_AND_ASSIGN</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_device_1a6d6eec515c1a71f424ddb92c1f2b206d" prot="protected" virt="non-virtual"><scope>arrow::cuda::CudaDevice</scope><name>CudaDevice</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_device_1af55d521eca3e9be9962d3bce9ba03102" prot="public" virt="virtual"><scope>arrow::cuda::CudaDevice</scope><name>default_memory_manager</name></member>
      <member refid="classarrow_1_1_device_1a4cbc670928eb29bd33f96c3915648695" prot="protected" virt="non-virtual"><scope>arrow::cuda::CudaDevice</scope><name>Device</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_device_1a8e9ef59ab09a8eb774ba25c788f17e95" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaDevice</scope><name>device_name</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_device_1afbde12a21ab99759801332997f1f39c6" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaDevice</scope><name>device_number</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_device_1a632ead1002d4f6a198f9e2cc875afe18" prot="public" virt="virtual"><scope>arrow::cuda::CudaDevice</scope><name>Equals</name></member>
      <member refid="classarrow_1_1util_1_1_equality_comparable_1a140cfdea92ae17331d8db8f69aad082f" prot="public" virt="non-virtual" ambiguityscope="EqualityComparable&lt; Device &gt;::"><scope>arrow::cuda::CudaDevice</scope><name>Equals</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_device_1a4ea5aa189076e2ec459611b98059edb8" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaDevice</scope><name>GetContext</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_device_1a50b6040df34a45d76ac8a6436ecdc87d" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaDevice</scope><name>GetSharedContext</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_device_1ab5ef7531f8a55cfa3589ad7b57f6a9bd" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaDevice</scope><name>handle</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_device_1aabb9fcc1047a0d31fa407b5dd0af875f" prot="protected" virt="non-virtual"><scope>arrow::cuda::CudaDevice</scope><name>impl_</name></member>
      <member refid="classarrow_1_1_device_1acd6a82de24ea679e2041159b18cfe294" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaDevice</scope><name>is_cpu</name></member>
      <member refid="classarrow_1_1_device_1a02b860fa62500dbbcc2c9eb1dc56b7ca" prot="protected" virt="non-virtual"><scope>arrow::cuda::CudaDevice</scope><name>is_cpu_</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_device_1a79f4b445a02561642f489b977fe4b6e9" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaDevice</scope><name>Make</name></member>
      <member refid="classarrow_1_1util_1_1_equality_comparable_1a1a7ff2c6f720209bc960524c47ad0535" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaDevice</scope><name>operator!=</name></member>
      <member refid="classarrow_1_1util_1_1_equality_comparable_1ac0e8ec25e77ece923689ee31c389200e" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaDevice</scope><name>operator==</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_device_1ae741b9314ceb089df43cd9d3ea9a05c8" prot="public" virt="virtual"><scope>arrow::cuda::CudaDevice</scope><name>ToString</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_device_1ae1e25a912004c83bb6af55574a74da00" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaDevice</scope><name>total_memory</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_device_1a57b40c4ecf7bd25cc566c50be60da394" prot="public" virt="virtual"><scope>arrow::cuda::CudaDevice</scope><name>type_name</name></member>
      <member refid="classarrow_1_1_device_1adf74fdaa9671bc62208cc0d1adda947b" prot="public" virt="virtual"><scope>arrow::cuda::CudaDevice</scope><name>~Device</name></member>
      <member refid="classarrow_1_1util_1_1_equality_comparable_1a14c5ed61e030855eef29edebc6355806" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaDevice</scope><name>~EqualityComparable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
