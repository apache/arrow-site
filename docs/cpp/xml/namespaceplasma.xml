<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespaceplasma" kind="namespace" language="C++">
    <compoundname>plasma</compoundname>
    <innerclass refid="structplasma_1_1_client" prot="public">plasma::Client</innerclass>
    <innerclass refid="classplasma_1_1_event_loop" prot="public">plasma::EventLoop</innerclass>
    <innerclass refid="classplasma_1_1_eviction_policy" prot="public">plasma::EvictionPolicy</innerclass>
    <innerclass refid="classplasma_1_1_external_store" prot="public">plasma::ExternalStore</innerclass>
    <innerclass refid="classplasma_1_1_external_stores" prot="public">plasma::ExternalStores</innerclass>
    <innerclass refid="classplasma_1_1_hash_table_store" prot="public">plasma::HashTableStore</innerclass>
    <innerclass refid="classplasma_1_1_l_r_u_cache" prot="public">plasma::LRUCache</innerclass>
    <innerclass refid="structplasma_1_1_mmap_record" prot="public">plasma::MmapRecord</innerclass>
    <innerclass refid="structplasma_1_1_notification_queue" prot="public">plasma::NotificationQueue</innerclass>
    <innerclass refid="structplasma_1_1_object_buffer" prot="public">plasma::ObjectBuffer</innerclass>
    <innerclass refid="structplasma_1_1_object_table_entry" prot="public">plasma::ObjectTableEntry</innerclass>
    <innerclass refid="classplasma_1_1_plasma_allocator" prot="public">plasma::PlasmaAllocator</innerclass>
    <innerclass refid="classplasma_1_1_plasma_client" prot="public">plasma::PlasmaClient</innerclass>
    <innerclass refid="structplasma_1_1_plasma_object" prot="public">plasma::PlasmaObject</innerclass>
    <innerclass refid="classplasma_1_1_plasma_store" prot="public">plasma::PlasmaStore</innerclass>
    <innerclass refid="structplasma_1_1_plasma_store_info" prot="public">plasma::PlasmaStoreInfo</innerclass>
    <innerclass refid="classplasma_1_1_quota_aware_policy" prot="public">plasma::QuotaAwarePolicy</innerclass>
    <innerclass refid="classplasma_1_1_unique_i_d" prot="public">plasma::UniqueID</innerclass>
    <innernamespace refid="namespaceplasma_1_1flatbuf">plasma::flatbuf</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespaceplasma_1a1c81245984dbccd8316cc42f98bacb45" prot="public" static="no">
        <name>ObjectLocation</name>
        <enumvalue id="namespaceplasma_1a1c81245984dbccd8316cc42f98bacb45a509820290d57f333403f490dde7316f4" prot="public">
          <name>Local</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceplasma_1a1c81245984dbccd8316cc42f98bacb45af8508f576cd3f742dfc268258dcdf0dd" prot="public">
          <name>Remote</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceplasma_1a1c81245984dbccd8316cc42f98bacb45a38c300f4fc9ce8a77aad4a30de05cad8" prot="public">
          <name>NotFound</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/common.h" line="41" column="1" bodyfile="/arrow/cpp/src/plasma/common.h" bodystart="41" bodyend="41"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceplasma_1a57d04d585d40f8545ff6e31e58a1d198" prot="public" static="no">
        <name>PlasmaErrorCode</name>
        <enumvalue id="namespaceplasma_1a57d04d585d40f8545ff6e31e58a1d198aa28166d3ea8fe93848f8e63f233c21f9" prot="public">
          <name>PlasmaObjectExists</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceplasma_1a57d04d585d40f8545ff6e31e58a1d198adeedf341fc9d8cb5567343c35c7691f3" prot="public">
          <name>PlasmaObjectNotFound</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceplasma_1a57d04d585d40f8545ff6e31e58a1d198a0eb600736e91ace6e9125aba8f0ebf98" prot="public">
          <name>PlasmaStoreFull</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceplasma_1a57d04d585d40f8545ff6e31e58a1d198a1c1a82ff5b211dfbed2bfd5bdd245356" prot="public">
          <name>PlasmaObjectAlreadySealed</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/common.h" line="43" column="1" bodyfile="/arrow/cpp/src/plasma/common.h" bodystart="43" bodyend="48"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceplasma_1a6a1816422abb257eda0498d6df72cfdc" prot="public" static="no">
        <name>ObjectState</name>
        <enumvalue id="namespaceplasma_1a6a1816422abb257eda0498d6df72cfdca719df393e8a50579639ab2278715b788" prot="public">
          <name>PLASMA_CREATED</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Object was created but not sealed in the local Plasma Store. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceplasma_1a6a1816422abb257eda0498d6df72cfdca8b8234a4599538aa87ac9abc6562efbd" prot="public">
          <name>PLASMA_SEALED</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>Object is sealed and stored in the local Plasma Store. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceplasma_1a6a1816422abb257eda0498d6df72cfdca9a5543b89708c4578da00939bdc333bf" prot="public">
          <name>PLASMA_EVICTED</name>
          <initializer>= 3</initializer>
          <briefdescription>
<para>Object is evicted to external store. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/common.h" line="84" column="1" bodyfile="/arrow/cpp/src/plasma/common.h" bodystart="84" bodyend="91"/>
      </memberdef>
      <memberdef kind="enum" id="namespaceplasma_1a730a54bdeef458d4c0e17ba9b349e884" prot="public" static="no">
        <name>ObjectStatus</name>
        <enumvalue id="namespaceplasma_1a730a54bdeef458d4c0e17ba9b349e884a76a2a975f3363fabb39417b4f6217c11" prot="public">
          <name>OBJECT_NOT_FOUND</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>The object was not found. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespaceplasma_1a730a54bdeef458d4c0e17ba9b349e884a6c48201d40a60b7390aee409913f8ab5" prot="public">
          <name>OBJECT_FOUND</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>The object was found. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/plasma.h" line="124" column="1" bodyfile="/arrow/cpp/src/plasma/plasma.h" bodystart="124" bodyend="129"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" prot="public" static="no">
        <type><ref refid="classplasma_1_1_unique_i_d" kindref="compound">UniqueID</ref></type>
        <definition>typedef UniqueID plasma::ObjectID</definition>
        <argsstring></argsstring>
        <name>ObjectID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/common.h" line="79" column="1" bodyfile="/arrow/cpp/src/plasma/common.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceplasma_1a115d6577b87e1cc4d9f547eae6b372d6" prot="public" static="no">
        <type>std::unordered_map&lt; <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref>, std::unique_ptr&lt; <ref refid="structplasma_1_1_object_table_entry" kindref="compound">ObjectTableEntry</ref> &gt; &gt;</type>
        <definition>typedef std::unordered_map&lt;ObjectID, std::unique_ptr&lt;ObjectTableEntry&gt; &gt; plasma::ObjectTable</definition>
        <argsstring></argsstring>
        <name>ObjectTable</name>
        <briefdescription>
<para>Mapping from ObjectIDs to information about the object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/common.h" line="141" column="1" bodyfile="/arrow/cpp/src/plasma/common.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespaceplasma_1a62f124d2399362309e83ba8344cd155b" prot="public" static="no">
        <type>long long</type>
        <definition>typedef long long plasma::TimerID</definition>
        <argsstring></argsstring>
        <name>TimerID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/events.h" line="43" column="1" bodyfile="/arrow/cpp/src/plasma/events.h" bodystart="43" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespaceplasma_1aa4472f35b20c7f87cfd8343de3efbd14" prot="public" static="no" mutable="no">
        <type>constexpr int64_t</type>
        <definition>constexpr int64_t plasma::kUniqueIDSize</definition>
        <argsstring></argsstring>
        <name>kUniqueIDSize</name>
        <initializer>= 20</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/common.h" line="60" column="1" bodyfile="/arrow/cpp/src/plasma/common.h" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceplasma_1a9063b8c2b48b267f01082f522b5a3d61" prot="public" static="no" mutable="no">
        <type>constexpr int64_t</type>
        <definition>constexpr int64_t plasma::kDigestSize</definition>
        <argsstring></argsstring>
        <name>kDigestSize</name>
        <initializer>= sizeof(uint64_t)</initializer>
        <briefdescription>
<para>Size of object hash digests. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/common.h" line="82" column="1" bodyfile="/arrow/cpp/src/plasma/common.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceplasma_1a79f03df6bdbea4f7c9bc644473aef03d" prot="public" static="no" mutable="no">
        <type>const <ref refid="structplasma_1_1_plasma_store_info" kindref="compound">PlasmaStoreInfo</ref> *</type>
        <definition>const PlasmaStoreInfo* plasma::plasma_config</definition>
        <argsstring></argsstring>
        <name>plasma_config</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/common.h" line="147" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceplasma_1aa25f7f9aa7f8808dd0d42553b16cf31b" prot="public" static="no" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int plasma::kEventLoopTimerDone</definition>
        <argsstring></argsstring>
        <name>kEventLoopTimerDone</name>
        <initializer>= -1</initializer>
        <briefdescription>
<para>Constant specifying that the timer is done and it will be removed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/events.h" line="32" column="1" bodyfile="/arrow/cpp/src/plasma/events.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceplasma_1aa4e30567f7b90b28008fd1fe6b2c3e14" prot="public" static="no" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int plasma::kEventLoopOk</definition>
        <argsstring></argsstring>
        <name>kEventLoopOk</name>
        <initializer>= 0</initializer>
        <briefdescription>
<para>A successful status. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/events.h" line="35" column="1" bodyfile="/arrow/cpp/src/plasma/events.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceplasma_1ae84cd1d6c21a08a2bedf3d1f308a371d" prot="public" static="no" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int plasma::kEventLoopRead</definition>
        <argsstring></argsstring>
        <name>kEventLoopRead</name>
        <initializer>= 1</initializer>
        <briefdescription>
<para>Read event on the file descriptor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/events.h" line="38" column="1" bodyfile="/arrow/cpp/src/plasma/events.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceplasma_1aa384c4e46a42a377972561a3cbafb472" prot="public" static="no" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int plasma::kEventLoopWrite</definition>
        <argsstring></argsstring>
        <name>kEventLoopWrite</name>
        <initializer>= 2</initializer>
        <briefdescription>
<para>Write event on the file descriptor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/events.h" line="41" column="1" bodyfile="/arrow/cpp/src/plasma/events.h" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceplasma_1a682cd9d488bb9c40ddd472312b06a47e" prot="public" static="no" mutable="no">
        <type>constexpr int64_t</type>
        <definition>constexpr int64_t plasma::kPlasmaProtocolVersion</definition>
        <argsstring></argsstring>
        <name>kPlasmaProtocolVersion</name>
        <initializer>= 0x0000000000000000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/io.h" line="44" column="1" bodyfile="/arrow/cpp/src/plasma/io.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceplasma_1ae5da0c6c6c6594332903f44effe11978" prot="public" static="no" mutable="no">
        <type>constexpr int64_t</type>
        <definition>constexpr int64_t plasma::kMmapRegionsGap</definition>
        <argsstring></argsstring>
        <name>kMmapRegionsGap</name>
        <initializer>= sizeof(size_t)</initializer>
        <briefdescription>
<para>Gap between two consecutive mmap regions allocated by fake_mmap. </para>        </briefdescription>
        <detaileddescription>
<para>This ensures that the segments of memory returned by fake_mmap are never contiguous and dlmalloc does not coalesce it (in the client we cannot guarantee that these mmaps are contiguous). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/malloc.h" line="31" column="1" bodyfile="/arrow/cpp/src/plasma/malloc.h" bodystart="31" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceplasma_1af369991ffda4ba89c7f5fbd510bf4b3a" prot="public" static="no" mutable="no">
        <type>std::unordered_map&lt; void *, <ref refid="structplasma_1_1_mmap_record" kindref="compound">MmapRecord</ref> &gt;</type>
        <definition>std::unordered_map&lt;void*, MmapRecord&gt; plasma::mmap_records</definition>
        <argsstring></argsstring>
        <name>mmap_records</name>
        <briefdescription>
<para>Hashtable that contains one entry per segment that we got from the OS via mmap. </para>        </briefdescription>
        <detaileddescription>
<para>Associates the address of that segment with its file descriptor and size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/malloc.h" line="49" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceplasma_1a1cb36d2ae0e90107e1b466197706e24c" prot="public" static="no" mutable="no">
        <type>constexpr int64_t</type>
        <definition>constexpr int64_t plasma::kBlockSize</definition>
        <argsstring></argsstring>
        <name>kBlockSize</name>
        <initializer>= 64</initializer>
        <briefdescription>
<para>Allocation granularity used in plasma for object allocation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/plasma.h" line="70" column="1" bodyfile="/arrow/cpp/src/plasma/plasma.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespaceplasma_1a2e23290bdc2ef5c82e2de8b4400e99cf" prot="public" static="no" mutable="no">
        <type>constexpr double</type>
        <definition>constexpr double plasma::kGlobalLruReserveFraction</definition>
        <argsstring></argsstring>
        <name>kGlobalLruReserveFraction</name>
        <initializer>= 0.3</initializer>
        <briefdescription>
<para>Reserve this fraction of memory for shared usage. </para>        </briefdescription>
        <detaileddescription>
<para>Attempts to set client quotas that would cause the global LRU memory fraction to fall below this value will be rejected. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/quota_aware_policy.h" line="37" column="1" bodyfile="/arrow/cpp/src/plasma/quota_aware_policy.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceplasma_1acee1e06f131bbbfa8881bdc3589beb4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>arrow::Status plasma::MakePlasmaError</definition>
        <argsstring>(PlasmaErrorCode code, std::string message)</argsstring>
        <name>MakePlasmaError</name>
        <param>
          <type><ref refid="namespaceplasma_1a57d04d585d40f8545ff6e31e58a1d198" kindref="member">PlasmaErrorCode</ref></type>
          <declname>code</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>message</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/common.h" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1ae1c50e561766242d0f2d1c6a943f5d8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool plasma::IsPlasmaObjectExists</definition>
        <argsstring>(const arrow::Status &amp;status)</argsstring>
        <name>IsPlasmaObjectExists</name>
        <param>
          <type>const <ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref> &amp;</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Return true iff the status indicates an already existing Plasma object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/common.h" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a3cba8d56364006c334a38c85ff18f18a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool plasma::IsPlasmaObjectNotFound</definition>
        <argsstring>(const arrow::Status &amp;status)</argsstring>
        <name>IsPlasmaObjectNotFound</name>
        <param>
          <type>const <ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref> &amp;</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Return true iff the status indicates a nonexistent Plasma object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/common.h" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a7bf4032db70828eba7f3c917236912c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool plasma::IsPlasmaObjectAlreadySealed</definition>
        <argsstring>(const arrow::Status &amp;status)</argsstring>
        <name>IsPlasmaObjectAlreadySealed</name>
        <param>
          <type>const <ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref> &amp;</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Return true iff the status indicates an already sealed Plasma object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/common.h" line="56" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a9c06524b90447a8c18eb8544c25ab2a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool plasma::IsPlasmaStoreFull</definition>
        <argsstring>(const arrow::Status &amp;status)</argsstring>
        <name>IsPlasmaStoreFull</name>
        <param>
          <type>const <ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref> &amp;</type>
          <declname>status</declname>
        </param>
        <briefdescription>
<para>Return true iff the status indicates the Plasma store reached its capacity limit. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/common.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1aacbe7037e6ebb567ec3ce7080979250b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::WriteBytes</definition>
        <argsstring>(int fd, uint8_t *cursor, size_t length)</argsstring>
        <name>WriteBytes</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>cursor</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/io.h" line="48" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a68bd3a6932b98b7f12de980b2f008d83" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::WriteMessage</definition>
        <argsstring>(int fd, flatbuf::MessageType type, int64_t length, uint8_t *bytes)</argsstring>
        <name>WriteMessage</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>flatbuf::MessageType</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/io.h" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a54a35f317b285137bb6ee924b81a86fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::ReadBytes</definition>
        <argsstring>(int fd, uint8_t *cursor, size_t length)</argsstring>
        <name>ReadBytes</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>cursor</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/io.h" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1af6b502f6c102927d36c53ce7ecec7565" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::ReadMessage</definition>
        <argsstring>(int fd, flatbuf::MessageType *type, std::vector&lt; uint8_t &gt; *buffer)</argsstring>
        <name>ReadMessage</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>flatbuf::MessageType *</type>
          <declname>type</declname>
        </param>
        <param>
          <type>std::vector&lt; uint8_t &gt; *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/io.h" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a3e13fe1da2a3539e0425ace3c1208728" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int plasma::BindIpcSock</definition>
        <argsstring>(const std::string &amp;pathname, bool shall_listen)</argsstring>
        <name>BindIpcSock</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>pathname</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>shall_listen</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/io.h" line="56" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a190f468e2796bb27ddacb4842ee3ebf3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int plasma::ConnectIpcSock</definition>
        <argsstring>(const std::string &amp;pathname)</argsstring>
        <name>ConnectIpcSock</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>pathname</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/io.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1ada38718497b348090aa7ad7f6f4f58bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::ConnectIpcSocketRetry</definition>
        <argsstring>(const std::string &amp;pathname, int num_retries, int64_t timeout, int *fd)</argsstring>
        <name>ConnectIpcSocketRetry</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>pathname</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_retries</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>timeout</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/io.h" line="60" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a921c700c8cae2dd7bf7a47f07c53bd46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int plasma::AcceptClient</definition>
        <argsstring>(int socket_fd)</argsstring>
        <name>AcceptClient</name>
        <param>
          <type>int</type>
          <declname>socket_fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/io.h" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1ad23e003f802853cfd20e120616004658" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; uint8_t[]&gt;</type>
        <definition>std::unique_ptr&lt;uint8_t[]&gt; plasma::ReadMessageAsync</definition>
        <argsstring>(int sock)</argsstring>
        <name>ReadMessageAsync</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/io.h" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a567a2b5e684721767843eb99c4c2872a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void plasma::GetMallocMapinfo</definition>
        <argsstring>(void *addr, int *fd, int64_t *map_length, ptrdiff_t *offset)</argsstring>
        <name>GetMallocMapinfo</name>
        <param>
          <type>void *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>map_length</declname>
        </param>
        <param>
          <type>ptrdiff_t *</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/malloc.h" line="33" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a879f3e280a496392958fffcc2c5f2e82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t plasma::GetMmapSize</definition>
        <argsstring>(int fd)</argsstring>
        <name>GetMmapSize</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
<para>Get the mmap size corresponding to a specific file descriptor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fd</parametername>
</parameternamelist>
<parameterdescription>
<para>The file descriptor to look up. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The size of the corresponding memory-mapped file. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/malloc.h" line="39" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a518ed937fbf133b16a18f020f0ea2d2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structplasma_1_1_object_table_entry" kindref="compound">ObjectTableEntry</ref> *</type>
        <definition>ObjectTableEntry* plasma::GetObjectTableEntry</definition>
        <argsstring>(PlasmaStoreInfo *store_info, const ObjectID &amp;object_id)</argsstring>
        <name>GetObjectTableEntry</name>
        <param>
          <type><ref refid="structplasma_1_1_plasma_store_info" kindref="compound">PlasmaStoreInfo</ref> *</type>
          <declname>store_info</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &amp;</type>
          <declname>object_id</declname>
        </param>
        <briefdescription>
<para>Get an entry from the object table and return NULL if the object_id is not present. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>store_info</parametername>
</parameternamelist>
<parameterdescription>
<para>The <ref refid="structplasma_1_1_plasma_store_info" kindref="compound">PlasmaStoreInfo</ref> that contains the object table. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The object_id of the entry we are looking for. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The entry associated with the object_id or NULL if the object_id is not present. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/plasma.h" line="151" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a34ce316d4c9054366305963c1b3b7d4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int plasma::WarnIfSigpipe</definition>
        <argsstring>(int status, int client_sock)</argsstring>
        <name>WarnIfSigpipe</name>
        <param>
          <type>int</type>
          <declname>status</declname>
        </param>
        <param>
          <type>int</type>
          <declname>client_sock</declname>
        </param>
        <briefdescription>
<para>Print a warning if the status is less than zero. </para>        </briefdescription>
        <detaileddescription>
<para>This should be used to check the success of messages sent to plasma clients. We print a warning instead of failing because the plasma clients are allowed to die. This is used to handle situations where the store writes to a client file descriptor, and the client may already have disconnected. If we have processed the disconnection and closed the file descriptor, we should get a BAD FILE DESCRIPTOR error. If we have not, then we should get a SIGPIPE. If we write to a TCP socket that isn&apos;t connected yet, then we should get an ECONNRESET.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>status</parametername>
</parameternamelist>
<parameterdescription>
<para>The status to check. If it is less less than zero, we will print a warning. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>client_sock</parametername>
</parameternamelist>
<parameterdescription>
<para>The client socket. This is just used to print some extra information. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The errno set. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/plasma.h" line="168" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a2294be960d6390b135146489ba00d31a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; uint8_t[]&gt;</type>
        <definition>std::unique_ptr&lt;uint8_t[]&gt; plasma::CreateObjectInfoBuffer</definition>
        <argsstring>(flatbuf::ObjectInfoT *object_info)</argsstring>
        <name>CreateObjectInfoBuffer</name>
        <param>
          <type>flatbuf::ObjectInfoT *</type>
          <declname>object_info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/plasma.h" line="170" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a24347d9f48b5e9975e93e4f08bd45ad0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; uint8_t[]&gt;</type>
        <definition>std::unique_ptr&lt;uint8_t[]&gt; plasma::CreatePlasmaNotificationBuffer</definition>
        <argsstring>(std::vector&lt; flatbuf::ObjectInfoT &gt; &amp;object_info)</argsstring>
        <name>CreatePlasmaNotificationBuffer</name>
        <param>
          <type>std::vector&lt; flatbuf::ObjectInfoT &gt; &amp;</type>
          <declname>object_info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/plasma.h" line="172" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1af75fb0542bf0c79cebbc4427817a5033" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool plasma::VerifyFlatbuffer</definition>
        <argsstring>(T *object, const uint8_t *data, size_t size)</argsstring>
        <name>VerifyFlatbuffer</name>
        <param>
          <type>T *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="37" column="1" bodyfile="/arrow/cpp/src/plasma/protocol.h" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a51820813b0adf9bc10303c9870c6d834" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>flatbuffers::Offset&lt; flatbuffers::Vector&lt; flatbuffers::Offset&lt; flatbuffers::String &gt; &gt; &gt;</type>
        <definition>flatbuffers::Offset&lt;flatbuffers::Vector&lt;flatbuffers::Offset&lt;flatbuffers::String&gt; &gt; &gt; plasma::ToFlatbuffer</definition>
        <argsstring>(flatbuffers::FlatBufferBuilder *fbb, const ObjectID *object_ids, int64_t num_objects)</argsstring>
        <name>ToFlatbuffer</name>
        <param>
          <type>flatbuffers::FlatBufferBuilder *</type>
          <declname>fbb</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> *</type>
          <declname>object_ids</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>num_objects</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="43" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1afd4f9b9ad94ee0ca8bb7c82282043db1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>flatbuffers::Offset&lt; flatbuffers::Vector&lt; flatbuffers::Offset&lt; flatbuffers::String &gt; &gt; &gt;</type>
        <definition>flatbuffers::Offset&lt;flatbuffers::Vector&lt;flatbuffers::Offset&lt;flatbuffers::String&gt; &gt; &gt; plasma::ToFlatbuffer</definition>
        <argsstring>(flatbuffers::FlatBufferBuilder *fbb, const std::vector&lt; std::string &gt; &amp;strings)</argsstring>
        <name>ToFlatbuffer</name>
        <param>
          <type>flatbuffers::FlatBufferBuilder *</type>
          <declname>fbb</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>strings</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a7f785f3814667398c231199401ea4bc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>flatbuffers::Offset&lt; flatbuffers::Vector&lt; int64_t &gt; &gt;</type>
        <definition>flatbuffers::Offset&lt;flatbuffers::Vector&lt;int64_t&gt; &gt; plasma::ToFlatbuffer</definition>
        <argsstring>(flatbuffers::FlatBufferBuilder *fbb, const std::vector&lt; int64_t &gt; &amp;data)</argsstring>
        <name>ToFlatbuffer</name>
        <param>
          <type>flatbuffers::FlatBufferBuilder *</type>
          <declname>fbb</declname>
        </param>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1aac54d24365b6556dc01ba0109bb4a8a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::PlasmaReceive</definition>
        <argsstring>(int sock, MessageType message_type, std::vector&lt; uint8_t &gt; *buffer)</argsstring>
        <name>PlasmaReceive</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>MessageType</type>
          <declname>message_type</declname>
        </param>
        <param>
          <type>std::vector&lt; uint8_t &gt; *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1aa8d9b7978a5b284e2d31c18464c12607" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::SendSetOptionsRequest</definition>
        <argsstring>(int sock, const std::string &amp;client_name, int64_t output_memory_limit)</argsstring>
        <name>SendSetOptionsRequest</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>client_name</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>output_memory_limit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="59" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1afda2448b8e2a51154fc5533b5f60a894" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::ReadSetOptionsRequest</definition>
        <argsstring>(const uint8_t *data, size_t size, std::string *client_name, int64_t *output_memory_quota)</argsstring>
        <name>ReadSetOptionsRequest</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>client_name</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>output_memory_quota</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a4b9b0913063d33443893a4dce5d53147" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::SendSetOptionsReply</definition>
        <argsstring>(int sock, PlasmaError error)</argsstring>
        <name>SendSetOptionsReply</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>PlasmaError</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1ad0ca0a2e442cf37e7673ac43270b4b66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::ReadSetOptionsReply</definition>
        <argsstring>(const uint8_t *data, size_t size)</argsstring>
        <name>ReadSetOptionsReply</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a07d7a5578649a81a6e7149894b91542f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::SendGetDebugStringRequest</definition>
        <argsstring>(int sock)</argsstring>
        <name>SendGetDebugStringRequest</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1abee9082eeba324e6810aa7a624f6d0ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::SendGetDebugStringReply</definition>
        <argsstring>(int sock, const std::string &amp;debug_string)</argsstring>
        <name>SendGetDebugStringReply</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>debug_string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1ad54b2707c3cfbeb6a31f9465fa81c33b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::ReadGetDebugStringReply</definition>
        <argsstring>(const uint8_t *data, size_t size, std::string *debug_string)</argsstring>
        <name>ReadGetDebugStringReply</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>debug_string</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1afcc23587233159110d928c15900ee5e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::SendCreateRequest</definition>
        <argsstring>(int sock, ObjectID object_id, bool evict_if_full, int64_t data_size, int64_t metadata_size, int device_num)</argsstring>
        <name>SendCreateRequest</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type><ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref></type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>evict_if_full</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>data_size</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>metadata_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>device_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1ab50c22ededf263b65c324b2c76116169" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::ReadCreateRequest</definition>
        <argsstring>(const uint8_t *data, size_t size, ObjectID *object_id, bool *evict_if_full, int64_t *data_size, int64_t *metadata_size, int *device_num)</argsstring>
        <name>ReadCreateRequest</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> *</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>evict_if_full</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>data_size</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>metadata_size</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>device_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a3bd712582d2ebf0a83c8c0c0e26407a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::SendCreateReply</definition>
        <argsstring>(int sock, ObjectID object_id, PlasmaObject *object, PlasmaError error, int64_t mmap_size)</argsstring>
        <name>SendCreateReply</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type><ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref></type>
          <declname>object_id</declname>
        </param>
        <param>
          <type><ref refid="structplasma_1_1_plasma_object" kindref="compound">PlasmaObject</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>PlasmaError</type>
          <declname>error</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>mmap_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a222d97d4e7f2cbaa2a124bd7da78762b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::ReadCreateReply</definition>
        <argsstring>(const uint8_t *data, size_t size, ObjectID *object_id, PlasmaObject *object, int *store_fd, int64_t *mmap_size)</argsstring>
        <name>ReadCreateReply</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> *</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type><ref refid="structplasma_1_1_plasma_object" kindref="compound">PlasmaObject</ref> *</type>
          <declname>object</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>store_fd</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>mmap_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="90" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1ad5b98b68722bc6c39805863d062e983d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::SendCreateAndSealRequest</definition>
        <argsstring>(int sock, const ObjectID &amp;object_id, bool evict_if_full, const std::string &amp;data, const std::string &amp;metadata, unsigned char *digest)</argsstring>
        <name>SendCreateAndSealRequest</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &amp;</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>evict_if_full</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>metadata</declname>
        </param>
        <param>
          <type>unsigned char *</type>
          <declname>digest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1aa5d7af2d1f4f85e62ed9c19a0888d8a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::ReadCreateAndSealRequest</definition>
        <argsstring>(const uint8_t *data, size_t size, ObjectID *object_id, bool *evict_if_full, std::string *object_data, std::string *metadata, std::string *digest)</argsstring>
        <name>ReadCreateAndSealRequest</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> *</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>evict_if_full</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>object_data</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>metadata</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>digest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="97" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a3b25630f58d636ac89db8cecb0073fb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::SendCreateAndSealBatchRequest</definition>
        <argsstring>(int sock, const std::vector&lt; ObjectID &gt; &amp;object_ids, bool evict_if_full, const std::vector&lt; std::string &gt; &amp;data, const std::vector&lt; std::string &gt; &amp;metadata, const std::vector&lt; std::string &gt; &amp;digests)</argsstring>
        <name>SendCreateAndSealBatchRequest</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &gt; &amp;</type>
          <declname>object_ids</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>evict_if_full</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>metadata</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>digests</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a0b95e1e5ea9884c1d1dee191eea9b2ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::ReadCreateAndSealBatchRequest</definition>
        <argsstring>(const uint8_t *data, size_t size, std::vector&lt; ObjectID &gt; *object_id, bool *evict_if_full, std::vector&lt; std::string &gt; *object_data, std::vector&lt; std::string &gt; *metadata, std::vector&lt; std::string &gt; *digests)</argsstring>
        <name>ReadCreateAndSealBatchRequest</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &gt; *</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>evict_if_full</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; *</type>
          <declname>object_data</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; *</type>
          <declname>metadata</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; *</type>
          <declname>digests</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a5a7bd10e62e9607f145fdbd4708c7c86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::SendCreateAndSealReply</definition>
        <argsstring>(int sock, PlasmaError error)</argsstring>
        <name>SendCreateAndSealReply</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>PlasmaError</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1ab8d01d168bcddda8a827a8dfb1522579" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::ReadCreateAndSealReply</definition>
        <argsstring>(const uint8_t *data, size_t size)</argsstring>
        <name>ReadCreateAndSealReply</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="116" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a8fa4ee31b3e4b6dcc816b4aba2a746bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::SendCreateAndSealBatchReply</definition>
        <argsstring>(int sock, PlasmaError error)</argsstring>
        <name>SendCreateAndSealBatchReply</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>PlasmaError</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1acb1872dd03d996f40837bbc98eab1173" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::ReadCreateAndSealBatchReply</definition>
        <argsstring>(const uint8_t *data, size_t size)</argsstring>
        <name>ReadCreateAndSealBatchReply</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1ab10e4d376f6900e316ef8dd9fa2d96fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::SendAbortRequest</definition>
        <argsstring>(int sock, ObjectID object_id)</argsstring>
        <name>SendAbortRequest</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type><ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref></type>
          <declname>object_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="122" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a4f97e2c36a25f727be077ffe03c1ad21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::ReadAbortRequest</definition>
        <argsstring>(const uint8_t *data, size_t size, ObjectID *object_id)</argsstring>
        <name>ReadAbortRequest</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> *</type>
          <declname>object_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1af189f0d3538e2c447c48d1171602d59d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::SendAbortReply</definition>
        <argsstring>(int sock, ObjectID object_id)</argsstring>
        <name>SendAbortReply</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type><ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref></type>
          <declname>object_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="126" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1abe46aa9548a694e80a4a65078862078d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::ReadAbortReply</definition>
        <argsstring>(const uint8_t *data, size_t size, ObjectID *object_id)</argsstring>
        <name>ReadAbortReply</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> *</type>
          <declname>object_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="128" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1af596f794dacd0b3e02ecc09b6e3b731d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::SendSealRequest</definition>
        <argsstring>(int sock, ObjectID object_id, const std::string &amp;digest)</argsstring>
        <name>SendSealRequest</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type><ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref></type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>digest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="132" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1ac3487e809e3b9b677e537fd84e2ded16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::ReadSealRequest</definition>
        <argsstring>(const uint8_t *data, size_t size, ObjectID *object_id, std::string *digest)</argsstring>
        <name>ReadSealRequest</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> *</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>digest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a84607b5ce97cd807f4d4493642764d3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::SendSealReply</definition>
        <argsstring>(int sock, ObjectID object_id, PlasmaError error)</argsstring>
        <name>SendSealReply</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type><ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref></type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>PlasmaError</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a69b27887d3ba5b8604680b99ebd5dec8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::ReadSealReply</definition>
        <argsstring>(const uint8_t *data, size_t size, ObjectID *object_id)</argsstring>
        <name>ReadSealReply</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> *</type>
          <declname>object_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a32c56789c459f828d40673917720f40b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::SendGetRequest</definition>
        <argsstring>(int sock, const ObjectID *object_ids, int64_t num_objects, int64_t timeout_ms)</argsstring>
        <name>SendGetRequest</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> *</type>
          <declname>object_ids</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>num_objects</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>timeout_ms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a8aa3fdb17f245b2ece9d562b97f5dd7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::ReadGetRequest</definition>
        <argsstring>(const uint8_t *data, size_t size, std::vector&lt; ObjectID &gt; &amp;object_ids, int64_t *timeout_ms)</argsstring>
        <name>ReadGetRequest</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &gt; &amp;</type>
          <declname>object_ids</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>timeout_ms</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="146" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a9b175618045769b43bc5edd586ef3268" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::SendGetReply</definition>
        <argsstring>(int sock, ObjectID object_ids[], std::unordered_map&lt; ObjectID, PlasmaObject &gt; &amp;plasma_objects, int64_t num_objects, const std::vector&lt; int &gt; &amp;store_fds, const std::vector&lt; int64_t &gt; &amp;mmap_sizes)</argsstring>
        <name>SendGetReply</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type><ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref></type>
          <declname>object_ids</declname>
          <array>[]</array>
        </param>
        <param>
          <type>std::unordered_map&lt; <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref>, <ref refid="structplasma_1_1_plasma_object" kindref="compound">PlasmaObject</ref> &gt; &amp;</type>
          <declname>plasma_objects</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>num_objects</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>store_fds</declname>
        </param>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>mmap_sizes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="149" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a029d23e978827246301163f3a1ee0806" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::ReadGetReply</definition>
        <argsstring>(const uint8_t *data, size_t size, ObjectID object_ids[], PlasmaObject plasma_objects[], int64_t num_objects, std::vector&lt; int &gt; &amp;store_fds, std::vector&lt; int64_t &gt; &amp;mmap_sizes)</argsstring>
        <name>ReadGetReply</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref></type>
          <declname>object_ids</declname>
          <array>[]</array>
        </param>
        <param>
          <type><ref refid="structplasma_1_1_plasma_object" kindref="compound">PlasmaObject</ref></type>
          <declname>plasma_objects</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int64_t</type>
          <declname>num_objects</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt; &amp;</type>
          <declname>store_fds</declname>
        </param>
        <param>
          <type>std::vector&lt; int64_t &gt; &amp;</type>
          <declname>mmap_sizes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a12ae3d07523ef07775320bf609ed281f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::SendReleaseRequest</definition>
        <argsstring>(int sock, ObjectID object_id)</argsstring>
        <name>SendReleaseRequest</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type><ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref></type>
          <declname>object_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="160" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a0a1ea8f648a4a1fe1df9c460def06298" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::ReadReleaseRequest</definition>
        <argsstring>(const uint8_t *data, size_t size, ObjectID *object_id)</argsstring>
        <name>ReadReleaseRequest</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> *</type>
          <declname>object_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="162" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a35ffff05f67592dad1574798e7acb19a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::SendReleaseReply</definition>
        <argsstring>(int sock, ObjectID object_id, PlasmaError error)</argsstring>
        <name>SendReleaseReply</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type><ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref></type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>PlasmaError</type>
          <declname>error</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="164" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a9f89977cac32f8e7e83a9935c44ef5aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::ReadReleaseReply</definition>
        <argsstring>(const uint8_t *data, size_t size, ObjectID *object_id)</argsstring>
        <name>ReadReleaseReply</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> *</type>
          <declname>object_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="166" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1afc043da9124a96379e13ac18f2212e06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::SendDeleteRequest</definition>
        <argsstring>(int sock, const std::vector&lt; ObjectID &gt; &amp;object_ids)</argsstring>
        <name>SendDeleteRequest</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &gt; &amp;</type>
          <declname>object_ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="170" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1ab0cf3b2b63850467264a71ca4994b1aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::ReadDeleteRequest</definition>
        <argsstring>(const uint8_t *data, size_t size, std::vector&lt; ObjectID &gt; *object_ids)</argsstring>
        <name>ReadDeleteRequest</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &gt; *</type>
          <declname>object_ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="172" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1aef8e360f789390cb1bb84b155e9e33ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::SendDeleteReply</definition>
        <argsstring>(int sock, const std::vector&lt; ObjectID &gt; &amp;object_ids, const std::vector&lt; PlasmaError &gt; &amp;errors)</argsstring>
        <name>SendDeleteReply</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &gt; &amp;</type>
          <declname>object_ids</declname>
        </param>
        <param>
          <type>const std::vector&lt; PlasmaError &gt; &amp;</type>
          <declname>errors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="175" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1ac0bc92f410be17b792ed47a7969d77ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::ReadDeleteReply</definition>
        <argsstring>(const uint8_t *data, size_t size, std::vector&lt; ObjectID &gt; *object_ids, std::vector&lt; PlasmaError &gt; *errors)</argsstring>
        <name>ReadDeleteReply</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &gt; *</type>
          <declname>object_ids</declname>
        </param>
        <param>
          <type>std::vector&lt; PlasmaError &gt; *</type>
          <declname>errors</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="178" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a2f4207d7cd35766e09fc9d5beb88ca07" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::SendContainsRequest</definition>
        <argsstring>(int sock, ObjectID object_id)</argsstring>
        <name>SendContainsRequest</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type><ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref></type>
          <declname>object_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="184" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1aa60fa6cd0fda8ceb5b5e7b3560c9b128" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::ReadContainsRequest</definition>
        <argsstring>(const uint8_t *data, size_t size, ObjectID *object_id)</argsstring>
        <name>ReadContainsRequest</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> *</type>
          <declname>object_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="186" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1abc1bc708dd7223a72f3b54c7e140a79f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::SendContainsReply</definition>
        <argsstring>(int sock, ObjectID object_id, bool has_object)</argsstring>
        <name>SendContainsReply</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type><ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref></type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>has_object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="188" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a3b18a243efa702efe5662f27b30ee1f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::ReadContainsReply</definition>
        <argsstring>(const uint8_t *data, size_t size, ObjectID *object_id, bool *has_object)</argsstring>
        <name>ReadContainsReply</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> *</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>bool *</type>
          <declname>has_object</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="190" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a79a86d4dc69f7e7e79e0ee747a86c037" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::SendListRequest</definition>
        <argsstring>(int sock)</argsstring>
        <name>SendListRequest</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="195" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1ab1a99847dcf9b08c797d3f7bc63d3fb1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::ReadListRequest</definition>
        <argsstring>(const uint8_t *data, size_t size)</argsstring>
        <name>ReadListRequest</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="197" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a64269276087f1e63e33d3430bfe96662" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::SendListReply</definition>
        <argsstring>(int sock, const ObjectTable &amp;objects)</argsstring>
        <name>SendListReply</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceplasma_1a115d6577b87e1cc4d9f547eae6b372d6" kindref="member">ObjectTable</ref> &amp;</type>
          <declname>objects</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="199" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a19d720d6b6be7ad8b2f6f39b9d17e5a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::ReadListReply</definition>
        <argsstring>(const uint8_t *data, size_t size, ObjectTable *objects)</argsstring>
        <name>ReadListReply</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="namespaceplasma_1a115d6577b87e1cc4d9f547eae6b372d6" kindref="member">ObjectTable</ref> *</type>
          <declname>objects</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="201" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a68b512d8fbdfce47b0a09f47bc428711" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::SendConnectRequest</definition>
        <argsstring>(int sock)</argsstring>
        <name>SendConnectRequest</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="205" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1ab0188e5e35a1f21599dc0ef4375c43a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::ReadConnectRequest</definition>
        <argsstring>(const uint8_t *data, size_t size)</argsstring>
        <name>ReadConnectRequest</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="207" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a99eb16aa20af60809867bcf01d8a0582" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::SendConnectReply</definition>
        <argsstring>(int sock, int64_t memory_capacity)</argsstring>
        <name>SendConnectReply</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>memory_capacity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="209" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a7199a38258749df90f4e54cec5dc8619" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::ReadConnectReply</definition>
        <argsstring>(const uint8_t *data, size_t size, int64_t *memory_capacity)</argsstring>
        <name>ReadConnectReply</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>memory_capacity</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="211" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a97c31bd87bc7531529c2979d01d13bcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::SendEvictRequest</definition>
        <argsstring>(int sock, int64_t num_bytes)</argsstring>
        <name>SendEvictRequest</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>num_bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="215" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a7b4c0644b8dcd9d1a98893ce22987425" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::ReadEvictRequest</definition>
        <argsstring>(const uint8_t *data, size_t size, int64_t *num_bytes)</argsstring>
        <name>ReadEvictRequest</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>num_bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="217" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1ad52ef21cab9d50f2e2689a30e726b69e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::SendEvictReply</definition>
        <argsstring>(int sock, int64_t num_bytes)</argsstring>
        <name>SendEvictReply</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>num_bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="219" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a3d9414d9265b6d9a53081c4d5fd7750d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::ReadEvictReply</definition>
        <argsstring>(const uint8_t *data, size_t size, int64_t &amp;num_bytes)</argsstring>
        <name>ReadEvictReply</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>int64_t &amp;</type>
          <declname>num_bytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="221" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1acc0f4c176f2431e583b8a8af876bf3eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::SendSubscribeRequest</definition>
        <argsstring>(int sock)</argsstring>
        <name>SendSubscribeRequest</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="225" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1aa5544bd9070476806c359647f50e19f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::SendDataRequest</definition>
        <argsstring>(int sock, ObjectID object_id, const char *address, int port)</argsstring>
        <name>SendDataRequest</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type><ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref></type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>address</declname>
        </param>
        <param>
          <type>int</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="229" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a8c59222171e0824768687dcd16d1bc39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::ReadDataRequest</definition>
        <argsstring>(const uint8_t *data, size_t size, ObjectID *object_id, char **address, int *port)</argsstring>
        <name>ReadDataRequest</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> *</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>address</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>port</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="231" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1ac33ef57473e43babaf459466b9ab6b3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::SendDataReply</definition>
        <argsstring>(int sock, ObjectID object_id, int64_t object_size, int64_t metadata_size)</argsstring>
        <name>SendDataReply</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type><ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref></type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>object_size</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>metadata_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="234" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a4abbc31247a0b974148154520a64934a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::ReadDataReply</definition>
        <argsstring>(const uint8_t *data, size_t size, ObjectID *object_id, int64_t *object_size, int64_t *metadata_size)</argsstring>
        <name>ReadDataReply</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type><ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> *</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>object_size</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>metadata_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="237" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a2b4261c8fbd5f5574330e0363a929eda" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::SendRefreshLRURequest</definition>
        <argsstring>(int sock, const std::vector&lt; ObjectID &gt; &amp;object_ids)</argsstring>
        <name>SendRefreshLRURequest</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &gt; &amp;</type>
          <declname>object_ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="242" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a6487f736e646af8a11e830989bdc668b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::ReadRefreshLRURequest</definition>
        <argsstring>(const uint8_t *data, size_t size, std::vector&lt; ObjectID &gt; *object_ids)</argsstring>
        <name>ReadRefreshLRURequest</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &gt; *</type>
          <declname>object_ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="244" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1aba8d9a23e9d2e4731f0242fd282fd58d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::SendRefreshLRUReply</definition>
        <argsstring>(int sock)</argsstring>
        <name>SendRefreshLRUReply</name>
        <param>
          <type>int</type>
          <declname>sock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="247" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceplasma_1a458b63e795f65cc1631e3f4c0f4cab7d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status plasma::ReadRefreshLRUReply</definition>
        <argsstring>(const uint8_t *data, size_t size)</argsstring>
        <name>ReadRefreshLRUReply</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/protocol.h" line="249" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/plasma/client.h" line="34" column="1"/>
  </compounddef>
</doxygen>
