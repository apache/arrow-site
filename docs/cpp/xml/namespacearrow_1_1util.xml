<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacearrow_1_1util" kind="namespace" language="C++">
    <compoundname>arrow::util</compoundname>
    <innerclass refid="classarrow_1_1util_1_1_arrow_log" prot="public">arrow::util::ArrowLog</innerclass>
    <innerclass refid="classarrow_1_1util_1_1_arrow_log_base" prot="public">arrow::util::ArrowLogBase</innerclass>
    <innerclass refid="classarrow_1_1util_1_1_codec" prot="public">arrow::util::Codec</innerclass>
    <innerclass refid="classarrow_1_1util_1_1_compressor" prot="public">arrow::util::Compressor</innerclass>
    <innerclass refid="classarrow_1_1util_1_1_decompressor" prot="public">arrow::util::Decompressor</innerclass>
    <innerclass refid="classarrow_1_1util_1_1_equality_comparable" prot="public">arrow::util::EqualityComparable</innerclass>
    <innerclass refid="classarrow_1_1util_1_1_rle_decoder" prot="public">arrow::util::RleDecoder</innerclass>
    <innerclass refid="classarrow_1_1util_1_1_rle_encoder" prot="public">arrow::util::RleEncoder</innerclass>
    <innerclass refid="classarrow_1_1util_1_1_to_string_ostreamable" prot="public">arrow::util::ToStringOstreamable</innerclass>
    <innerclass refid="classarrow_1_1util_1_1_voidify" prot="public">arrow::util::Voidify</innerclass>
    <innernamespace refid="namespacearrow_1_1util_1_1double__conversion">arrow::util::double_conversion</innernamespace>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacearrow_1_1util_1ad921118fae6f84dae836cab22cc54343" prot="public" static="no">
        <name>ArrowLogLevel</name>
        <enumvalue id="namespacearrow_1_1util_1ad921118fae6f84dae836cab22cc54343ade6223c04ded375f7f3ab3fefec97af6" prot="public">
          <name>ARROW_DEBUG</name>
          <initializer>= -1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacearrow_1_1util_1ad921118fae6f84dae836cab22cc54343a59aacc91653e3ffb42c555add8409dd9" prot="public">
          <name>ARROW_INFO</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacearrow_1_1util_1ad921118fae6f84dae836cab22cc54343a80e9d720776be880337c96040fb86866" prot="public">
          <name>ARROW_WARNING</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacearrow_1_1util_1ad921118fae6f84dae836cab22cc54343a86f3256350f2f67e5c2e411b91da506c" prot="public">
          <name>ARROW_ERROR</name>
          <initializer>= 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacearrow_1_1util_1ad921118fae6f84dae836cab22cc54343ac9ccec604c7eea73f2278940d586e3e5" prot="public">
          <name>ARROW_FATAL</name>
          <initializer>= 3</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/logging.h" line="48" column="1" bodyfile="/arrow/cpp/src/arrow/util/logging.h" bodystart="48" bodyend="54"/>
      </memberdef>
      <memberdef kind="enum" id="namespacearrow_1_1util_1aed82108ddd8f5ef27d5241ef7bd4206a" prot="public" static="no">
        <name>DivideOrMultiply</name>
        <enumvalue id="namespacearrow_1_1util_1aed82108ddd8f5ef27d5241ef7bd4206aab09753583a0f0a7cb17b5a87e54ab880" prot="public">
          <name>MULTIPLY</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacearrow_1_1util_1aed82108ddd8f5ef27d5241ef7bd4206aa0b5b6c8bbd7821665ec1d429224d9ec0" prot="public">
          <name>DIVIDE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/time.h" line="29" column="1" bodyfile="/arrow/cpp/src/arrow/util/time.h" bodystart="29" bodyend="32"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacearrow_1_1util_1a37597d23d580458d4547f817e2943744" prot="public" static="no">
        <type>nonstd::optional&lt; T &gt;</type>
        <definition>using arrow::util::optional = typedef nonstd::optional&lt;T&gt;</definition>
        <argsstring></argsstring>
        <name>optional</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/optional.h" line="28" column="1" bodyfile="/arrow/cpp/src/arrow/util/optional.h" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacearrow_1_1util_1a71a22bd9f6abddf41814d148e92e628b" prot="public" static="no">
        <type>nonstd::basic_string_view&lt; Char, Traits &gt;</type>
        <definition>using arrow::util::basic_string_view = typedef nonstd::basic_string_view&lt;Char, Traits&gt;</definition>
        <argsstring></argsstring>
        <name>basic_string_view</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/string_view.h" line="33" column="1" bodyfile="/arrow/cpp/src/arrow/util/string_view.h" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacearrow_1_1util_1a550cadd9d8d2f10f4b3c968065b9287b" prot="public" static="no">
        <type><ref refid="namespacearrow_1_1util_1a71a22bd9f6abddf41814d148e92e628b" kindref="member">basic_string_view</ref>&lt; uint8_t &gt;</type>
        <definition>using arrow::util::bytes_view = typedef basic_string_view&lt;uint8_t&gt;</definition>
        <argsstring></argsstring>
        <name>bytes_view</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/string_view.h" line="35" column="1" bodyfile="/arrow/cpp/src/arrow/util/string_view.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacearrow_1_1util_1ac1fbe4367a2f5b84c3d760d42c4f7c84" prot="public" static="no" mutable="no">
        <type>constexpr int</type>
        <definition>constexpr int arrow::util::kUseDefaultCompressionLevel</definition>
        <argsstring></argsstring>
        <name>kUseDefaultCompressionLevel</name>
        <initializer>= Compression::kUseDefaultCompressionLevel</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/compression.h" line="40" column="1" bodyfile="/arrow/cpp/src/arrow/util/compression.h" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacearrow_1_1util_1adf8a674dd44abf3ec60b7c32875e9687" prot="public" static="yes" mutable="no">
        <type>std::pair&lt; <ref refid="namespacearrow_1_1util_1aed82108ddd8f5ef27d5241ef7bd4206a" kindref="member">DivideOrMultiply</ref>, int64_t &gt;</type>
        <definition>std::pair&lt;DivideOrMultiply, int64_t&gt; arrow::util::kTimestampConversionTable[4][4]</definition>
        <argsstring>[4][4]</argsstring>
        <name>kTimestampConversionTable</name>
        <initializer>= {
    
    {{<ref refid="namespacearrow_1_1util_1aed82108ddd8f5ef27d5241ef7bd4206aab09753583a0f0a7cb17b5a87e54ab880" kindref="member">MULTIPLY</ref>, 1}, {<ref refid="namespacearrow_1_1util_1aed82108ddd8f5ef27d5241ef7bd4206aab09753583a0f0a7cb17b5a87e54ab880" kindref="member">MULTIPLY</ref>, 1000}, {<ref refid="namespacearrow_1_1util_1aed82108ddd8f5ef27d5241ef7bd4206aab09753583a0f0a7cb17b5a87e54ab880" kindref="member">MULTIPLY</ref>, 1000000}, {<ref refid="namespacearrow_1_1util_1aed82108ddd8f5ef27d5241ef7bd4206aab09753583a0f0a7cb17b5a87e54ab880" kindref="member">MULTIPLY</ref>, 1000000000}},
    
    {{<ref refid="namespacearrow_1_1util_1aed82108ddd8f5ef27d5241ef7bd4206aa0b5b6c8bbd7821665ec1d429224d9ec0" kindref="member">DIVIDE</ref>, 1000}, {<ref refid="namespacearrow_1_1util_1aed82108ddd8f5ef27d5241ef7bd4206aab09753583a0f0a7cb17b5a87e54ab880" kindref="member">MULTIPLY</ref>, 1}, {<ref refid="namespacearrow_1_1util_1aed82108ddd8f5ef27d5241ef7bd4206aab09753583a0f0a7cb17b5a87e54ab880" kindref="member">MULTIPLY</ref>, 1000}, {<ref refid="namespacearrow_1_1util_1aed82108ddd8f5ef27d5241ef7bd4206aab09753583a0f0a7cb17b5a87e54ab880" kindref="member">MULTIPLY</ref>, 1000000}},
    
    {{<ref refid="namespacearrow_1_1util_1aed82108ddd8f5ef27d5241ef7bd4206aa0b5b6c8bbd7821665ec1d429224d9ec0" kindref="member">DIVIDE</ref>, 1000000}, {<ref refid="namespacearrow_1_1util_1aed82108ddd8f5ef27d5241ef7bd4206aa0b5b6c8bbd7821665ec1d429224d9ec0" kindref="member">DIVIDE</ref>, 1000}, {<ref refid="namespacearrow_1_1util_1aed82108ddd8f5ef27d5241ef7bd4206aab09753583a0f0a7cb17b5a87e54ab880" kindref="member">MULTIPLY</ref>, 1}, {<ref refid="namespacearrow_1_1util_1aed82108ddd8f5ef27d5241ef7bd4206aab09753583a0f0a7cb17b5a87e54ab880" kindref="member">MULTIPLY</ref>, 1000}},
    
    {{<ref refid="namespacearrow_1_1util_1aed82108ddd8f5ef27d5241ef7bd4206aa0b5b6c8bbd7821665ec1d429224d9ec0" kindref="member">DIVIDE</ref>, 1000000000}, {<ref refid="namespacearrow_1_1util_1aed82108ddd8f5ef27d5241ef7bd4206aa0b5b6c8bbd7821665ec1d429224d9ec0" kindref="member">DIVIDE</ref>, 1000000}, {<ref refid="namespacearrow_1_1util_1aed82108ddd8f5ef27d5241ef7bd4206aa0b5b6c8bbd7821665ec1d429224d9ec0" kindref="member">DIVIDE</ref>, 1000}, {<ref refid="namespacearrow_1_1util_1aed82108ddd8f5ef27d5241ef7bd4206aab09753583a0f0a7cb17b5a87e54ab880" kindref="member">MULTIPLY</ref>, 1}},
}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/time.h" line="35" column="1" bodyfile="/arrow/cpp/src/arrow/util/time.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacearrow_1_1util_1a94415482c39682ec54269de2519a1f35" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arrow::util::base64_encode</definition>
        <argsstring>(unsigned char const *, unsigned int len)</argsstring>
        <name>base64_encode</name>
        <param>
          <type>unsigned char const *</type>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>len</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/base64.h" line="28" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1util_1a41759838e5945bb7b25fe77044dbaf10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arrow::util::base64_decode</definition>
        <argsstring>(std::string const &amp;s)</argsstring>
        <name>base64_decode</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/base64.h" line="31" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1util_1aab61e963836ca04099e97867d43bb1ad" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>static bool arrow::util::IndexInRange</definition>
        <argsstring>(int32_t idx, int32_t dictionary_length)</argsstring>
        <name>IndexInRange</name>
        <param>
          <type>int32_t</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>dictionary_length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/rle_encoding.h" line="410" column="1" bodyfile="/arrow/cpp/src/arrow/util/rle_encoding.h" bodystart="410" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1util_1a0be14f44c8d2a4e9deb471cf25539437" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Head</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void arrow::util::StringBuilderRecursive</definition>
        <argsstring>(std::ostream &amp;stream, Head &amp;&amp;head)</argsstring>
        <name>StringBuilderRecursive</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>Head &amp;&amp;</type>
          <declname>head</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/string_builder.h" line="48" column="1" bodyfile="/arrow/cpp/src/arrow/util/string_builder.h" bodystart="48" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1util_1a7f2642fe42f5b2fb857f4e6d095d0204" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Head</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Tail</declname>
            <defname>Tail</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void arrow::util::StringBuilderRecursive</definition>
        <argsstring>(std::ostream &amp;stream, Head &amp;&amp;head, Tail &amp;&amp;... tail)</argsstring>
        <name>StringBuilderRecursive</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>Head &amp;&amp;</type>
          <declname>head</declname>
        </param>
        <param>
          <type>Tail &amp;&amp;...</type>
          <declname>tail</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/string_builder.h" line="53" column="1" bodyfile="/arrow/cpp/src/arrow/util/string_builder.h" bodystart="53" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1util_1a7ed4c56c317fc0ac75eb983185f7e2d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Args</declname>
            <defname>Args</defname>
          </param>
        </templateparamlist>
        <type>std::string</type>
        <definition>std::string arrow::util::StringBuilder</definition>
        <argsstring>(Args &amp;&amp;... args)</argsstring>
        <name>StringBuilder</name>
        <param>
          <type>Args &amp;&amp;...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/string_builder.h" line="59" column="1" bodyfile="/arrow/cpp/src/arrow/util/string_builder.h" bodystart="59" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1util_1a310e42721ec288adc4066e18442c4668" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; int64_t &gt;</type>
        <definition>Result&lt;int64_t&gt; arrow::util::ConvertTimestampValue</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;in, const std::shared_ptr&lt; DataType &gt; &amp;out, int64_t value)</argsstring>
        <name>ConvertTimestampValue</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>out</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/time.h" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1util_1a9e6444baee483fa0501fb8c87096a1bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T* arrow::util::MakeNonNull</definition>
        <argsstring>(T *maybe_null)</argsstring>
        <name>MakeNonNull</name>
        <param>
          <type>T *</type>
          <declname>maybe_null</declname>
        </param>
        <briefdescription>
<para>Returns maybe_null if not null or a non-null pointer to an arbitrary memory that shouldn&apos;t be dereferenced. </para>        </briefdescription>
        <detaileddescription>
<para>Memset/Memcpy are undefined when a nullptr is passed as an argument use this utility method to wrap locations where this could happen.</para><para>Note: Flatbuffers has UBSan warnings if a zero length vector is passed. <ulink url="https://github.com/google/flatbuffers/pull/5355">https://github.com/google/flatbuffers/pull/5355</ulink> is trying to resolve them. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/ubsan.h" line="47" column="1" bodyfile="/arrow/cpp/src/arrow/util/ubsan.h" bodystart="47" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1util_1a384bf38e6df397bca2cf97c7ce193532" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_trivial&lt; T &gt;::value, T &gt;::type</type>
        <definition>std::enable_if&lt;std::is_trivial&lt;T&gt;::value, T&gt;::type arrow::util::SafeLoadAs</definition>
        <argsstring>(const uint8_t *unaligned)</argsstring>
        <name>SafeLoadAs</name>
        <param>
          <type>const uint8_t *</type>
          <declname>unaligned</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/ubsan.h" line="56" column="1" bodyfile="/arrow/cpp/src/arrow/util/ubsan.h" bodystart="56" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1util_1a05444666488ef31743a79c61d43f1729" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_trivial&lt; T &gt;::value, T &gt;::type</type>
        <definition>std::enable_if&lt;std::is_trivial&lt;T&gt;::value, T&gt;::type arrow::util::SafeLoad</definition>
        <argsstring>(const T *unaligned)</argsstring>
        <name>SafeLoad</name>
        <param>
          <type>const T *</type>
          <declname>unaligned</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/ubsan.h" line="64" column="1" bodyfile="/arrow/cpp/src/arrow/util/ubsan.h" bodystart="64" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1util_1a82a2f3463673740303d5525e2f5a0187" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; std::is_trivial&lt; T &gt;::value &amp;&amp;std::is_trivial&lt; U &gt;::value &amp;&amp;sizeof(T)==sizeof(U), U &gt;::type</type>
        <definition>std::enable_if&lt;std::is_trivial&lt;T&gt;::value &amp;&amp; std::is_trivial&lt;U&gt;::value &amp;&amp; sizeof(T) == sizeof(U), U&gt;::type arrow::util::SafeCopy</definition>
        <argsstring>(T value)</argsstring>
        <name>SafeCopy</name>
        <param>
          <type>T</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/ubsan.h" line="75" column="1" bodyfile="/arrow/cpp/src/arrow/util/ubsan.h" bodystart="75" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1util_1a7909a03f042880e6ae142a80f3d86767" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::wstring &gt;</type>
        <definition>Result&lt;std::wstring&gt; arrow::util::UTF8ToWideString</definition>
        <argsstring>(const std::string &amp;source)</argsstring>
        <name>UTF8ToWideString</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/utf8.h" line="36" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1util_1a2486fab4c7c5159ef9a2bb940058aa2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::string &gt;</type>
        <definition>Result&lt;std::string&gt; arrow::util::WideStringToUTF8</definition>
        <argsstring>(const std::wstring &amp;source)</argsstring>
        <name>WideStringToUTF8</name>
        <param>
          <type>const std::wstring &amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/utf8.h" line="39" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1util_1a63153cdf6fe72db6874908f6b9f1cf28" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void arrow::util::InitializeUTF8</definition>
        <argsstring>()</argsstring>
        <name>InitializeUTF8</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/utf8.h" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1util_1a2a7f89976d28b34473545a2beeac7416" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::util::ValidateUTF8</definition>
        <argsstring>(const uint8_t *data, int64_t size)</argsstring>
        <name>ValidateUTF8</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/utf8.h" line="87" column="1" bodyfile="/arrow/cpp/src/arrow/util/utf8.h" bodystart="87" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1util_1a84e32f25759164fa6e943970d7dccc7e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::util::ValidateUTF8</definition>
        <argsstring>(const util::string_view &amp;str)</argsstring>
        <name>ValidateUTF8</name>
        <param>
          <type>const util::string_view &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/utf8.h" line="167" column="1" bodyfile="/arrow/cpp/src/arrow/util/utf8.h" bodystart="167" bodyend="172"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1util_1af429223eb850ef36a3e38c22c9bb945a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; const uint8_t * &gt;</type>
        <definition>Result&lt;const uint8_t*&gt; arrow::util::SkipUTF8BOM</definition>
        <argsstring>(const uint8_t *data, int64_t size)</argsstring>
        <name>SkipUTF8BOM</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/utf8.h" line="176" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/arrow/io/compressed.h" line="34" column="1"/>
  </compounddef>
</doxygen>
