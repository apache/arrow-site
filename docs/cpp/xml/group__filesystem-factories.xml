<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__filesystem-factories" kind="group">
    <compoundname>filesystem-factories</compoundname>
    <title>Functions for creating FileSystem instances</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__filesystem-factories_1gad7710ab97df6770825aa002930c84553" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; std::shared_ptr&lt; FileSystem &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;FileSystem&gt; &gt; arrow::fs::FileSystemFromUri</definition>
        <argsstring>(const std::string &amp;uri, std::string *out_path=NULLPTR)</argsstring>
        <name>FileSystemFromUri</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>uri</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>out_path</declname>
          <defval><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></defval>
        </param>
        <briefdescription>
<para>Create a new <ref refid="classarrow_1_1fs_1_1_file_system" kindref="compound">FileSystem</ref> by URI. </para>        </briefdescription>
        <detaileddescription>
<para>Recognized schemes are &quot;file&quot;, &quot;mock&quot;, &quot;hdfs&quot; and &quot;s3fs&quot;.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">uri</parametername>
</parameternamelist>
<parameterdescription>
<para>a URI-based path, ex: <ulink url="file:///some/local/path">file:///some/local/path</ulink> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out_path</parametername>
</parameternamelist>
<parameterdescription>
<para>(optional) Path inside the filesystem. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>out_fs <ref refid="classarrow_1_1fs_1_1_file_system" kindref="compound">FileSystem</ref> instance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="369" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__filesystem-factories_1ga8687f598b2c715fcc85f067fa94a5fab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; std::shared_ptr&lt; FileSystem &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;FileSystem&gt; &gt; arrow::fs::FileSystemFromUriOrPath</definition>
        <argsstring>(const std::string &amp;uri, std::string *out_path=NULLPTR)</argsstring>
        <name>FileSystemFromUriOrPath</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>uri</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>out_path</declname>
          <defval><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></defval>
        </param>
        <briefdescription>
<para>Create a new <ref refid="classarrow_1_1fs_1_1_file_system" kindref="compound">FileSystem</ref> by URI. </para>        </briefdescription>
        <detaileddescription>
<para>Same as FileSystemFromUri, but in addition also recognize non-URIs and treat them as local filesystem paths. Only absolute local filesystem paths are allowed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="378" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
