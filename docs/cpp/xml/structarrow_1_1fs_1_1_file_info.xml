<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structarrow_1_1fs_1_1_file_info" kind="struct" language="C++" prot="public">
    <compoundname>arrow::fs::FileInfo</compoundname>
    <basecompoundref refid="classarrow_1_1util_1_1_equality_comparable" prot="public" virt="non-virtual">arrow::util::EqualityComparable&lt; FileInfo &gt;</basecompoundref>
    <includes refid="filesystem_8h" local="no">arrow/filesystem/filesystem.h</includes>
    <innerclass refid="structarrow_1_1fs_1_1_file_info_1_1_by_path" prot="public">arrow::fs::FileInfo::ByPath</innerclass>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="structarrow_1_1fs_1_1_file_info_1a8068def0347bbbe1a2745b04f1c2ef2f" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacearrow_1_1fs_1ae7f70d357901a07a605fcdd5e2bfc98b" kindref="member">FileType</ref></type>
        <definition>FileType arrow::fs::FileInfo::type_</definition>
        <argsstring></argsstring>
        <name>type_</name>
        <initializer>= <ref refid="namespacearrow_1_1fs_1ae7f70d357901a07a605fcdd5e2bfc98ba88183b946cc5f0e8c96b2e66e1c74a7e" kindref="member">FileType::Unknown</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="133" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/filesystem.h" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structarrow_1_1fs_1_1_file_info_1a1e219c4bb797c59cd253379b9f5e5866" prot="protected" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string arrow::fs::FileInfo::path_</definition>
        <argsstring></argsstring>
        <name>path_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="134" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/filesystem.h" bodystart="134" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structarrow_1_1fs_1_1_file_info_1a34d55e9844ecdc19025d831ffd2b9d29" prot="protected" static="no" mutable="no">
        <type>int64_t</type>
        <definition>int64_t arrow::fs::FileInfo::size_</definition>
        <argsstring></argsstring>
        <name>size_</name>
        <initializer>= kNoSize</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="135" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/filesystem.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structarrow_1_1fs_1_1_file_info_1aa0b3bdcd23c051de20b22dfee3c7a316" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacearrow_1_1fs_1ae5daf21ab2c817a43e3f937b7fc9d3b8" kindref="member">TimePoint</ref></type>
        <definition>TimePoint arrow::fs::FileInfo::mtime_</definition>
        <argsstring></argsstring>
        <name>mtime_</name>
        <initializer>= kNoTime</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="136" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/filesystem.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structarrow_1_1fs_1_1_file_info_1af95ce4f7e15ad4c6867661dbdc8e1e6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::fs::FileInfo::FileInfo</definition>
        <argsstring>()=default</argsstring>
        <name>FileInfo</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1fs_1_1_file_info_1aeb3655a1370d6d10ab0b542e4e808feb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::fs::FileInfo::FileInfo</definition>
        <argsstring>(FileInfo &amp;&amp;)=default</argsstring>
        <name>FileInfo</name>
        <param>
          <type><ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1fs_1_1_file_info_1a28a720672e7569dd617eed70e14c1482" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref> &amp;</type>
        <definition>FileInfo&amp; arrow::fs::FileInfo::operator=</definition>
        <argsstring>(FileInfo &amp;&amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref> &amp;&amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1fs_1_1_file_info_1a9fbc961add6270e0a5f44fb2891f0d30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::fs::FileInfo::FileInfo</definition>
        <argsstring>(const FileInfo &amp;)=default</argsstring>
        <name>FileInfo</name>
        <param>
          <type>const <ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1fs_1_1_file_info_1af02272db67b9bc3338f1588ffccb3d00" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref> &amp;</type>
        <definition>FileInfo&amp; arrow::fs::FileInfo::operator=</definition>
        <argsstring>(const FileInfo &amp;)=default</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1fs_1_1_file_info_1a5a5713d7cc8113a9dd0c2ea36393878d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacearrow_1_1fs_1ae7f70d357901a07a605fcdd5e2bfc98b" kindref="member">FileType</ref></type>
        <definition>FileType arrow::fs::FileInfo::type</definition>
        <argsstring>() const</argsstring>
        <name>type</name>
        <briefdescription>
<para>The file type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="83" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/filesystem.h" bodystart="83" bodyend="83"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1fs_1_1_file_info_1aa5d96d2e13523351b51f7a05cde137fa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void arrow::fs::FileInfo::set_type</definition>
        <argsstring>(FileType type)</argsstring>
        <name>set_type</name>
        <param>
          <type><ref refid="namespacearrow_1_1fs_1ae7f70d357901a07a605fcdd5e2bfc98b" kindref="member">FileType</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="84" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/filesystem.h" bodystart="84" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1fs_1_1_file_info_1a8d8afac04486180d00a165bdd4357c63" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; arrow::fs::FileInfo::path</definition>
        <argsstring>() const</argsstring>
        <name>path</name>
        <briefdescription>
<para>The full file path in the filesystem. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="87" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/filesystem.h" bodystart="87" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1fs_1_1_file_info_1ad008575c02a7804c37dad021afc62b8d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void arrow::fs::FileInfo::set_path</definition>
        <argsstring>(std::string path)</argsstring>
        <name>set_path</name>
        <param>
          <type>std::string</type>
          <declname>path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="88" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/filesystem.h" bodystart="88" bodyend="88"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1fs_1_1_file_info_1a60b7d1f0cb774b9bee7097539e5bbc15" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arrow::fs::FileInfo::base_name</definition>
        <argsstring>() const</argsstring>
        <name>base_name</name>
        <briefdescription>
<para>The file base name (component after the last directory separator) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1fs_1_1_file_info_1a02d79dc6d1b05250ea59dd5b4aeff49a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arrow::fs::FileInfo::dir_name</definition>
        <argsstring>() const</argsstring>
        <name>dir_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1fs_1_1_file_info_1a331d4198caafc5657a4b12b6eafb407e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t arrow::fs::FileInfo::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
<para>The size in bytes, if available. </para>        </briefdescription>
        <detaileddescription>
<para>Only regular files are guaranteed to have a size. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="99" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/filesystem.h" bodystart="99" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1fs_1_1_file_info_1aae32805a95348633228d24018bfbe1cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void arrow::fs::FileInfo::set_size</definition>
        <argsstring>(int64_t size)</argsstring>
        <name>set_size</name>
        <param>
          <type>int64_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="100" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/filesystem.h" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1fs_1_1_file_info_1ab832cd3ab31da2a6a80754388d1113d6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arrow::fs::FileInfo::extension</definition>
        <argsstring>() const</argsstring>
        <name>extension</name>
        <briefdescription>
<para>The file extension (excluding the dot) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1fs_1_1_file_info_1ac20f62017b58598d50452891d9d7d85f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacearrow_1_1fs_1ae5daf21ab2c817a43e3f937b7fc9d3b8" kindref="member">TimePoint</ref></type>
        <definition>TimePoint arrow::fs::FileInfo::mtime</definition>
        <argsstring>() const</argsstring>
        <name>mtime</name>
        <briefdescription>
<para>The time of last modification, if available. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="106" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/filesystem.h" bodystart="106" bodyend="106"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1fs_1_1_file_info_1a49f82612c3339fc4ead4c35d69ee4f35" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void arrow::fs::FileInfo::set_mtime</definition>
        <argsstring>(TimePoint mtime)</argsstring>
        <name>set_mtime</name>
        <param>
          <type><ref refid="namespacearrow_1_1fs_1ae5daf21ab2c817a43e3f937b7fc9d3b8" kindref="member">TimePoint</ref></type>
          <declname>mtime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="107" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/filesystem.h" bodystart="107" bodyend="107"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1fs_1_1_file_info_1a83a268ff1e1cfea2487c0d8640f268f4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::fs::FileInfo::IsFile</definition>
        <argsstring>() const</argsstring>
        <name>IsFile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="109" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/filesystem.h" bodystart="109" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1fs_1_1_file_info_1a3a1753df078593fa05200c84bbf5dc04" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::fs::FileInfo::IsDirectory</definition>
        <argsstring>() const</argsstring>
        <name>IsDirectory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="110" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/filesystem.h" bodystart="110" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1fs_1_1_file_info_1affe395af25376e394d41a0d9d578799f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::fs::FileInfo::Equals</definition>
        <argsstring>(const FileInfo &amp;other) const</argsstring>
        <name>Equals</name>
        <param>
          <type>const <ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="112" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/filesystem.h" bodystart="112" bodyend="115"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1fs_1_1_file_info_1a7e413d59aae930b69cb955723df2ad92" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arrow::fs::FileInfo::ToString</definition>
        <argsstring>() const</argsstring>
        <name>ToString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="117" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classarrow_1_1fs_1_1_file_system" kindref="compound">FileSystem</ref> entry info. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1571">
        <label>arrow::fs::FileInfo</label>
        <link refid="structarrow_1_1fs_1_1_file_info"/>
        <childnode refid="1572" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1572">
        <label>arrow::util::EqualityComparable&lt; FileInfo &gt;</label>
        <link refid="classarrow_1_1util_1_1_equality_comparable"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1573">
        <label>arrow::fs::FileInfo</label>
        <link refid="structarrow_1_1fs_1_1_file_info"/>
        <childnode refid="1574" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1574">
        <label>arrow::util::EqualityComparable&lt; FileInfo &gt;</label>
        <link refid="classarrow_1_1util_1_1_equality_comparable"/>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="75" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/filesystem.h" bodystart="75" bodyend="137"/>
    <listofallmembers>
      <member refid="structarrow_1_1fs_1_1_file_info_1a60b7d1f0cb774b9bee7097539e5bbc15" prot="public" virt="non-virtual"><scope>arrow::fs::FileInfo</scope><name>base_name</name></member>
      <member refid="structarrow_1_1fs_1_1_file_info_1a02d79dc6d1b05250ea59dd5b4aeff49a" prot="public" virt="non-virtual"><scope>arrow::fs::FileInfo</scope><name>dir_name</name></member>
      <member refid="structarrow_1_1fs_1_1_file_info_1affe395af25376e394d41a0d9d578799f" prot="public" virt="non-virtual"><scope>arrow::fs::FileInfo</scope><name>Equals</name></member>
      <member refid="classarrow_1_1util_1_1_equality_comparable_1a140cfdea92ae17331d8db8f69aad082f" prot="public" virt="non-virtual" ambiguityscope="EqualityComparable&lt; FileInfo &gt;::"><scope>arrow::fs::FileInfo</scope><name>Equals</name></member>
      <member refid="structarrow_1_1fs_1_1_file_info_1ab832cd3ab31da2a6a80754388d1113d6" prot="public" virt="non-virtual"><scope>arrow::fs::FileInfo</scope><name>extension</name></member>
      <member refid="structarrow_1_1fs_1_1_file_info_1af95ce4f7e15ad4c6867661dbdc8e1e6f" prot="public" virt="non-virtual"><scope>arrow::fs::FileInfo</scope><name>FileInfo</name></member>
      <member refid="structarrow_1_1fs_1_1_file_info_1aeb3655a1370d6d10ab0b542e4e808feb" prot="public" virt="non-virtual"><scope>arrow::fs::FileInfo</scope><name>FileInfo</name></member>
      <member refid="structarrow_1_1fs_1_1_file_info_1a9fbc961add6270e0a5f44fb2891f0d30" prot="public" virt="non-virtual"><scope>arrow::fs::FileInfo</scope><name>FileInfo</name></member>
      <member refid="structarrow_1_1fs_1_1_file_info_1a3a1753df078593fa05200c84bbf5dc04" prot="public" virt="non-virtual"><scope>arrow::fs::FileInfo</scope><name>IsDirectory</name></member>
      <member refid="structarrow_1_1fs_1_1_file_info_1a83a268ff1e1cfea2487c0d8640f268f4" prot="public" virt="non-virtual"><scope>arrow::fs::FileInfo</scope><name>IsFile</name></member>
      <member refid="structarrow_1_1fs_1_1_file_info_1ac20f62017b58598d50452891d9d7d85f" prot="public" virt="non-virtual"><scope>arrow::fs::FileInfo</scope><name>mtime</name></member>
      <member refid="structarrow_1_1fs_1_1_file_info_1aa0b3bdcd23c051de20b22dfee3c7a316" prot="protected" virt="non-virtual"><scope>arrow::fs::FileInfo</scope><name>mtime_</name></member>
      <member refid="classarrow_1_1util_1_1_equality_comparable_1a1a7ff2c6f720209bc960524c47ad0535" prot="public" virt="non-virtual"><scope>arrow::fs::FileInfo</scope><name>operator!=</name></member>
      <member refid="structarrow_1_1fs_1_1_file_info_1a28a720672e7569dd617eed70e14c1482" prot="public" virt="non-virtual"><scope>arrow::fs::FileInfo</scope><name>operator=</name></member>
      <member refid="structarrow_1_1fs_1_1_file_info_1af02272db67b9bc3338f1588ffccb3d00" prot="public" virt="non-virtual"><scope>arrow::fs::FileInfo</scope><name>operator=</name></member>
      <member refid="classarrow_1_1util_1_1_equality_comparable_1ac0e8ec25e77ece923689ee31c389200e" prot="public" virt="non-virtual"><scope>arrow::fs::FileInfo</scope><name>operator==</name></member>
      <member refid="structarrow_1_1fs_1_1_file_info_1a8d8afac04486180d00a165bdd4357c63" prot="public" virt="non-virtual"><scope>arrow::fs::FileInfo</scope><name>path</name></member>
      <member refid="structarrow_1_1fs_1_1_file_info_1a1e219c4bb797c59cd253379b9f5e5866" prot="protected" virt="non-virtual"><scope>arrow::fs::FileInfo</scope><name>path_</name></member>
      <member refid="structarrow_1_1fs_1_1_file_info_1a49f82612c3339fc4ead4c35d69ee4f35" prot="public" virt="non-virtual"><scope>arrow::fs::FileInfo</scope><name>set_mtime</name></member>
      <member refid="structarrow_1_1fs_1_1_file_info_1ad008575c02a7804c37dad021afc62b8d" prot="public" virt="non-virtual"><scope>arrow::fs::FileInfo</scope><name>set_path</name></member>
      <member refid="structarrow_1_1fs_1_1_file_info_1aae32805a95348633228d24018bfbe1cf" prot="public" virt="non-virtual"><scope>arrow::fs::FileInfo</scope><name>set_size</name></member>
      <member refid="structarrow_1_1fs_1_1_file_info_1aa5d96d2e13523351b51f7a05cde137fa" prot="public" virt="non-virtual"><scope>arrow::fs::FileInfo</scope><name>set_type</name></member>
      <member refid="structarrow_1_1fs_1_1_file_info_1a331d4198caafc5657a4b12b6eafb407e" prot="public" virt="non-virtual"><scope>arrow::fs::FileInfo</scope><name>size</name></member>
      <member refid="structarrow_1_1fs_1_1_file_info_1a34d55e9844ecdc19025d831ffd2b9d29" prot="protected" virt="non-virtual"><scope>arrow::fs::FileInfo</scope><name>size_</name></member>
      <member refid="structarrow_1_1fs_1_1_file_info_1a7e413d59aae930b69cb955723df2ad92" prot="public" virt="non-virtual"><scope>arrow::fs::FileInfo</scope><name>ToString</name></member>
      <member refid="structarrow_1_1fs_1_1_file_info_1a5a5713d7cc8113a9dd0c2ea36393878d" prot="public" virt="non-virtual"><scope>arrow::fs::FileInfo</scope><name>type</name></member>
      <member refid="structarrow_1_1fs_1_1_file_info_1a8068def0347bbbe1a2745b04f1c2ef2f" prot="protected" virt="non-virtual"><scope>arrow::fs::FileInfo</scope><name>type_</name></member>
      <member refid="classarrow_1_1util_1_1_equality_comparable_1a14c5ed61e030855eef29edebc6355806" prot="public" virt="non-virtual"><scope>arrow::fs::FileInfo</scope><name>~EqualityComparable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
