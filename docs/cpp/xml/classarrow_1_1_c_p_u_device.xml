<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_c_p_u_device" kind="class" language="C++" prot="public">
    <compoundname>arrow::CPUDevice</compoundname>
    <basecompoundref refid="classarrow_1_1_device" prot="public" virt="non-virtual">arrow::Device</basecompoundref>
    <includes refid="device_8h" local="no">arrow/device.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1_c_p_u_device_1a56de6467569661983bf89cca4e23e313" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>const char *</type>
        <definition>const char* arrow::CPUDevice::type_name</definition>
        <argsstring>() const override</argsstring>
        <name>type_name</name>
        <reimplements refid="classarrow_1_1_device_1a64fa6c42b0237fab3002c0da05be613d">type_name</reimplements>
        <briefdescription>
<para>A shorthand for this device&apos;s type. </para>        </briefdescription>
        <detaileddescription>
<para>The returned value is different for each device class, but is the same for all instances of a given class. It can be used as a replacement for RTTI. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/device.h" line="162" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_c_p_u_device_1af136696c33197fac051e3cca0688f31e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string arrow::CPUDevice::ToString</definition>
        <argsstring>() const override</argsstring>
        <name>ToString</name>
        <reimplements refid="classarrow_1_1_device_1a308203da24624f8ef8df7329f214ef6f">ToString</reimplements>
        <briefdescription>
<para>A human-readable description of the device. </para>        </briefdescription>
        <detaileddescription>
<para>The returned value should be detailed enough to distinguish between different instances, where necessary. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/device.h" line="163" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_c_p_u_device_1a23a4f5100acda607a63371a89e5bb7e5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool arrow::CPUDevice::Equals</definition>
        <argsstring>(const Device &amp;) const override</argsstring>
        <name>Equals</name>
        <reimplements refid="classarrow_1_1_device_1acaaa334c017c8e0d097918a730d8544b">Equals</reimplements>
        <param>
          <type>const <ref refid="classarrow_1_1_device" kindref="compound">Device</ref> &amp;</type>
        </param>
        <briefdescription>
<para>Whether this instance points to the same device as another one. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/device.h" line="164" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_c_p_u_device_1ab5acfa03ea867c7b7fe4f903e8b19547" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_memory_manager" kindref="compound">MemoryManager</ref> &gt;</type>
        <definition>std::shared_ptr&lt;MemoryManager&gt; arrow::CPUDevice::default_memory_manager</definition>
        <argsstring>() override</argsstring>
        <name>default_memory_manager</name>
        <reimplements refid="classarrow_1_1_device_1a9615d7d1f5136d43bcf1061782197412">default_memory_manager</reimplements>
        <briefdescription>
<para>Return a <ref refid="classarrow_1_1_memory_manager" kindref="compound">MemoryManager</ref> instance tied to this device. </para>        </briefdescription>
        <detaileddescription>
<para>The returned instance uses default parameters for this device type&apos;s <ref refid="classarrow_1_1_memory_manager" kindref="compound">MemoryManager</ref> implementation. Some devices also allow constructing <ref refid="classarrow_1_1_memory_manager" kindref="compound">MemoryManager</ref> instances with non-default parameters. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/device.h" line="166" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1_c_p_u_device_1a2639c1933007a4c0b553b245c9a59896" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_device" kindref="compound">Device</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;Device&gt; arrow::CPUDevice::Instance</definition>
        <argsstring>()</argsstring>
        <name>Instance</name>
        <briefdescription>
<para>Return the global <ref refid="classarrow_1_1_c_p_u_device" kindref="compound">CPUDevice</ref> instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/device.h" line="169" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_c_p_u_device_1a477fdfe0a1f4400985dd0efe1da6ad34" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_memory_manager" kindref="compound">MemoryManager</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;MemoryManager&gt; arrow::CPUDevice::memory_manager</definition>
        <argsstring>(MemoryPool *pool)</argsstring>
        <name>memory_manager</name>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="classarrow_1_1_memory_manager" kindref="compound">MemoryManager</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>The returned <ref refid="classarrow_1_1_memory_manager" kindref="compound">MemoryManager</ref> will use the given <ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> for allocations. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/device.h" line="174" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classarrow_1_1_c_p_u_device_1af311a2498989611ab08d2706efc21d61" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::CPUDevice::CPUDevice</definition>
        <argsstring>()</argsstring>
        <name>CPUDevice</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/device.h" line="177" column="1" bodyfile="/arrow/cpp/src/arrow/device.h" bodystart="177" bodyend="177"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="719">
        <label>arrow::CPUDevice</label>
        <link refid="classarrow_1_1_c_p_u_device"/>
        <childnode refid="720" relation="public-inheritance">
        </childnode>
      </node>
      <node id="721">
        <label>std::enable_shared_from_this&lt; Device &gt;</label>
      </node>
      <node id="720">
        <label>arrow::Device</label>
        <link refid="classarrow_1_1_device"/>
        <childnode refid="721" relation="public-inheritance">
        </childnode>
        <childnode refid="722" relation="public-inheritance">
        </childnode>
      </node>
      <node id="722">
        <label>arrow::util::EqualityComparable&lt; Device &gt;</label>
        <link refid="classarrow_1_1util_1_1_equality_comparable"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="723">
        <label>arrow::CPUDevice</label>
        <link refid="classarrow_1_1_c_p_u_device"/>
        <childnode refid="724" relation="public-inheritance">
        </childnode>
      </node>
      <node id="725">
        <label>std::enable_shared_from_this&lt; Device &gt;</label>
      </node>
      <node id="724">
        <label>arrow::Device</label>
        <link refid="classarrow_1_1_device"/>
        <childnode refid="725" relation="public-inheritance">
        </childnode>
        <childnode refid="726" relation="public-inheritance">
        </childnode>
      </node>
      <node id="726">
        <label>arrow::util::EqualityComparable&lt; Device &gt;</label>
        <link refid="classarrow_1_1util_1_1_equality_comparable"/>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/device.h" line="160" column="1" bodyfile="/arrow/cpp/src/arrow/device.h" bodystart="160" bodyend="178"/>
    <listofallmembers>
      <member refid="classarrow_1_1_device_1a40af03efaa113e357d7f466ce3510fe7" prot="protected" virt="non-virtual"><scope>arrow::CPUDevice</scope><name>ARROW_DISALLOW_COPY_AND_ASSIGN</name></member>
      <member refid="classarrow_1_1_c_p_u_device_1af311a2498989611ab08d2706efc21d61" prot="protected" virt="non-virtual"><scope>arrow::CPUDevice</scope><name>CPUDevice</name></member>
      <member refid="classarrow_1_1_c_p_u_device_1ab5acfa03ea867c7b7fe4f903e8b19547" prot="public" virt="virtual"><scope>arrow::CPUDevice</scope><name>default_memory_manager</name></member>
      <member refid="classarrow_1_1_device_1a4cbc670928eb29bd33f96c3915648695" prot="protected" virt="non-virtual"><scope>arrow::CPUDevice</scope><name>Device</name></member>
      <member refid="classarrow_1_1_c_p_u_device_1a23a4f5100acda607a63371a89e5bb7e5" prot="public" virt="virtual"><scope>arrow::CPUDevice</scope><name>Equals</name></member>
      <member refid="classarrow_1_1util_1_1_equality_comparable_1a140cfdea92ae17331d8db8f69aad082f" prot="public" virt="non-virtual" ambiguityscope="EqualityComparable&lt; Device &gt;::"><scope>arrow::CPUDevice</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_c_p_u_device_1a2639c1933007a4c0b553b245c9a59896" prot="public" virt="non-virtual"><scope>arrow::CPUDevice</scope><name>Instance</name></member>
      <member refid="classarrow_1_1_device_1acd6a82de24ea679e2041159b18cfe294" prot="public" virt="non-virtual"><scope>arrow::CPUDevice</scope><name>is_cpu</name></member>
      <member refid="classarrow_1_1_device_1a02b860fa62500dbbcc2c9eb1dc56b7ca" prot="protected" virt="non-virtual"><scope>arrow::CPUDevice</scope><name>is_cpu_</name></member>
      <member refid="classarrow_1_1_c_p_u_device_1a477fdfe0a1f4400985dd0efe1da6ad34" prot="public" virt="non-virtual"><scope>arrow::CPUDevice</scope><name>memory_manager</name></member>
      <member refid="classarrow_1_1util_1_1_equality_comparable_1a1a7ff2c6f720209bc960524c47ad0535" prot="public" virt="non-virtual"><scope>arrow::CPUDevice</scope><name>operator!=</name></member>
      <member refid="classarrow_1_1util_1_1_equality_comparable_1ac0e8ec25e77ece923689ee31c389200e" prot="public" virt="non-virtual"><scope>arrow::CPUDevice</scope><name>operator==</name></member>
      <member refid="classarrow_1_1_c_p_u_device_1af136696c33197fac051e3cca0688f31e" prot="public" virt="virtual"><scope>arrow::CPUDevice</scope><name>ToString</name></member>
      <member refid="classarrow_1_1_c_p_u_device_1a56de6467569661983bf89cca4e23e313" prot="public" virt="virtual"><scope>arrow::CPUDevice</scope><name>type_name</name></member>
      <member refid="classarrow_1_1_device_1adf74fdaa9671bc62208cc0d1adda947b" prot="public" virt="virtual"><scope>arrow::CPUDevice</scope><name>~Device</name></member>
      <member refid="classarrow_1_1util_1_1_equality_comparable_1a14c5ed61e030855eef29edebc6355806" prot="public" virt="non-virtual"><scope>arrow::CPUDevice</scope><name>~EqualityComparable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
