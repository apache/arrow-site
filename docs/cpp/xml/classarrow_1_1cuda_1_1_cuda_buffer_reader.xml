<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1cuda_1_1_cuda_buffer_reader" kind="class" language="C++" prot="public">
    <compoundname>arrow::cuda::CudaBufferReader</compoundname>
    <basecompoundref prot="public" virt="non-virtual">arrow::io::internal::RandomAccessFileConcurrencyWrapper&lt; CudaBufferReader &gt;</basecompoundref>
    <includes refid="cuda__memory_8h" local="no">arrow/gpu/cuda_memory.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classarrow_1_1cuda_1_1_cuda_buffer_reader_1aa06ee0184921f48c829d6f537f1c9a98" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1cuda_1_1_cuda_buffer" kindref="compound">CudaBuffer</ref> &gt;</type>
        <definition>std::shared_ptr&lt;CudaBuffer&gt; arrow::cuda::CudaBufferReader::buffer_</definition>
        <argsstring></argsstring>
        <name>buffer_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="226" column="1" bodyfile="/arrow/cpp/src/arrow/gpu/cuda_memory.h" bodystart="226" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1cuda_1_1_cuda_buffer_reader_1a22f58c0024dc9994df8d5a75bf663a49" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1cuda_1_1_cuda_context" kindref="compound">CudaContext</ref> &gt;</type>
        <definition>std::shared_ptr&lt;CudaContext&gt; arrow::cuda::CudaBufferReader::context_</definition>
        <argsstring></argsstring>
        <name>context_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="227" column="1" bodyfile="/arrow/cpp/src/arrow/gpu/cuda_memory.h" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1cuda_1_1_cuda_buffer_reader_1a01bad8257cc83ac5d9ed478309008871" prot="protected" static="no" mutable="no">
        <type>const uintptr_t</type>
        <definition>const uintptr_t arrow::cuda::CudaBufferReader::address_</definition>
        <argsstring></argsstring>
        <name>address_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="228" column="1" bodyfile="/arrow/cpp/src/arrow/gpu/cuda_memory.h" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1cuda_1_1_cuda_buffer_reader_1a106a3cc03156e5c5ebea89d9d2ccbe7b" prot="protected" static="no" mutable="no">
        <type>int64_t</type>
        <definition>int64_t arrow::cuda::CudaBufferReader::size_</definition>
        <argsstring></argsstring>
        <name>size_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="229" column="1" bodyfile="/arrow/cpp/src/arrow/gpu/cuda_memory.h" bodystart="229" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1cuda_1_1_cuda_buffer_reader_1a0ce99137d11a0b96dd3024199579a2c0" prot="protected" static="no" mutable="no">
        <type>int64_t</type>
        <definition>int64_t arrow::cuda::CudaBufferReader::position_</definition>
        <argsstring></argsstring>
        <name>position_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="230" column="1" bodyfile="/arrow/cpp/src/arrow/gpu/cuda_memory.h" bodystart="230" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1cuda_1_1_cuda_buffer_reader_1a7510efdea3627481eb15029f7de4e232" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool arrow::cuda::CudaBufferReader::is_open_</definition>
        <argsstring></argsstring>
        <name>is_open_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="231" column="1" bodyfile="/arrow/cpp/src/arrow/gpu/cuda_memory.h" bodystart="231" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_buffer_reader_1a0dfc51e2512774a97e24754733810db5" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::cuda::CudaBufferReader::CudaBufferReader</definition>
        <argsstring>(const std::shared_ptr&lt; Buffer &gt; &amp;buffer)</argsstring>
        <name>CudaBufferReader</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="197" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_buffer_reader_1a0d572faa3e6b61d8df77b677549a6049" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool arrow::cuda::CudaBufferReader::closed</definition>
        <argsstring>() const override</argsstring>
        <name>closed</name>
        <reimplements refid="classarrow_1_1io_1_1_file_interface_1a5ba1d2c3cec2e05e7b0018624f19c10b">closed</reimplements>
        <briefdescription>
<para>Return whether the stream is closed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="199" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_buffer_reader_1ab01cdb213d900351c43dba8078c81f10" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool arrow::cuda::CudaBufferReader::supports_zero_copy</definition>
        <argsstring>() const override</argsstring>
        <name>supports_zero_copy</name>
        <reimplements refid="classarrow_1_1io_1_1_input_stream_1a2b9978739db7fa75ba81e794bfba2a64">supports_zero_copy</reimplements>
        <briefdescription>
<para>Return true if InputStream is capable of zero copy <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> reads. </para>        </briefdescription>
        <detaileddescription>
<para>Zero copy reads imply the use of Buffer-returning <ref refid="classarrow_1_1io_1_1_readable_1ab94d6d47006df39f6cf77c078a61b8d8" kindref="member">Read()</ref> overloads. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="201" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_buffer_reader_1a84ad7364befe895392dfa954a0156996" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1cuda_1_1_cuda_buffer" kindref="compound">CudaBuffer</ref> &gt;</type>
        <definition>std::shared_ptr&lt;CudaBuffer&gt; arrow::cuda::CudaBufferReader::buffer</definition>
        <argsstring>() const</argsstring>
        <name>buffer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="203" column="1" bodyfile="/arrow/cpp/src/arrow/gpu/cuda_memory.h" bodystart="203" bodyend="203"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_buffer_reader_1a083f3c2ae383ae5083ba6841cb7e8513" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::cuda::CudaBufferReader::DoClose</definition>
        <argsstring>()</argsstring>
        <name>DoClose</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="208" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_buffer_reader_1aa3f57c1649ee6e8df5e3c4a4d3378420" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; int64_t &gt;</type>
        <definition>Result&lt;int64_t&gt; arrow::cuda::CudaBufferReader::DoRead</definition>
        <argsstring>(int64_t nbytes, void *buffer)</argsstring>
        <name>DoRead</name>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="210" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_buffer_reader_1a2227d0f86261df25a504e3ceb11ed879" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;Buffer&gt; &gt; arrow::cuda::CudaBufferReader::DoRead</definition>
        <argsstring>(int64_t nbytes)</argsstring>
        <name>DoRead</name>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="211" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_buffer_reader_1a3bd4bd7b33754b98f560fa8ee82c43bd" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; int64_t &gt;</type>
        <definition>Result&lt;int64_t&gt; arrow::cuda::CudaBufferReader::DoReadAt</definition>
        <argsstring>(int64_t position, int64_t nbytes, void *out)</argsstring>
        <name>DoReadAt</name>
        <param>
          <type>int64_t</type>
          <declname>position</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="212" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_buffer_reader_1abe96c0e271a61db301941d8c465d55f2" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;Buffer&gt; &gt; arrow::cuda::CudaBufferReader::DoReadAt</definition>
        <argsstring>(int64_t position, int64_t nbytes)</argsstring>
        <name>DoReadAt</name>
        <param>
          <type>int64_t</type>
          <declname>position</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="213" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_buffer_reader_1a6f1b846bf01cbea790ac7aed5431be39" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; int64_t &gt;</type>
        <definition>Result&lt;int64_t&gt; arrow::cuda::CudaBufferReader::DoTell</definition>
        <argsstring>() const</argsstring>
        <name>DoTell</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="215" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_buffer_reader_1a57dd6f2e8d5a0641dc7de7922740ce72" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::cuda::CudaBufferReader::DoSeek</definition>
        <argsstring>(int64_t position)</argsstring>
        <name>DoSeek</name>
        <param>
          <type>int64_t</type>
          <declname>position</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="216" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_buffer_reader_1aaa86d782a6ac70ddc9fd3d99f7c689a1" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; int64_t &gt;</type>
        <definition>Result&lt;int64_t&gt; arrow::cuda::CudaBufferReader::DoGetSize</definition>
        <argsstring>()</argsstring>
        <name>DoGetSize</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="217" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_buffer_reader_1afb4e9abe2c74575ab9ec161b8b276b16" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::cuda::CudaBufferReader::CheckClosed</definition>
        <argsstring>() const</argsstring>
        <name>CheckClosed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="219" column="1" bodyfile="/arrow/cpp/src/arrow/gpu/cuda_memory.h" bodystart="219" bodyend="224"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>File interface for zero-copy read from CUDA buffers. </para>    </briefdescription>
    <detaileddescription>
<para>CAUTION: reading to a <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> returns a <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> pointing to device memory. It will generally not be compatible with Arrow code expecting a buffer pointing to CPU memory. Reading to a raw pointer, though, copies device memory into the host memory pointed to. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="781">
        <label>arrow::io::Readable</label>
        <link refid="classarrow_1_1io_1_1_readable"/>
      </node>
      <node id="780">
        <label>arrow::io::FileInterface</label>
        <link refid="classarrow_1_1io_1_1_file_interface"/>
      </node>
      <node id="782">
        <label>arrow::io::Seekable</label>
        <link refid="classarrow_1_1io_1_1_seekable"/>
      </node>
      <node id="775">
        <label>arrow::cuda::CudaBufferReader</label>
        <link refid="classarrow_1_1cuda_1_1_cuda_buffer_reader"/>
        <childnode refid="776" relation="public-inheritance">
        </childnode>
      </node>
      <node id="778">
        <label>std::enable_shared_from_this&lt; RandomAccessFile &gt;</label>
      </node>
      <node id="779">
        <label>arrow::io::InputStream</label>
        <link refid="classarrow_1_1io_1_1_input_stream"/>
        <childnode refid="780" relation="public-inheritance">
        </childnode>
        <childnode refid="781" relation="public-inheritance">
        </childnode>
      </node>
      <node id="776">
        <label>arrow::io::internal::RandomAccessFileConcurrencyWrapper&lt; CudaBufferReader &gt;</label>
        <childnode refid="777" relation="public-inheritance">
        </childnode>
      </node>
      <node id="777">
        <label>arrow::io::RandomAccessFile</label>
        <link refid="classarrow_1_1io_1_1_random_access_file"/>
        <childnode refid="778" relation="public-inheritance">
        </childnode>
        <childnode refid="779" relation="public-inheritance">
        </childnode>
        <childnode refid="782" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="789">
        <label>arrow::io::Readable</label>
        <link refid="classarrow_1_1io_1_1_readable"/>
      </node>
      <node id="788">
        <label>arrow::io::FileInterface</label>
        <link refid="classarrow_1_1io_1_1_file_interface"/>
      </node>
      <node id="790">
        <label>arrow::io::Seekable</label>
        <link refid="classarrow_1_1io_1_1_seekable"/>
      </node>
      <node id="783">
        <label>arrow::cuda::CudaBufferReader</label>
        <link refid="classarrow_1_1cuda_1_1_cuda_buffer_reader"/>
        <childnode refid="784" relation="public-inheritance">
        </childnode>
      </node>
      <node id="786">
        <label>std::enable_shared_from_this&lt; RandomAccessFile &gt;</label>
      </node>
      <node id="787">
        <label>arrow::io::InputStream</label>
        <link refid="classarrow_1_1io_1_1_input_stream"/>
        <childnode refid="788" relation="public-inheritance">
        </childnode>
        <childnode refid="789" relation="public-inheritance">
        </childnode>
      </node>
      <node id="784">
        <label>arrow::io::internal::RandomAccessFileConcurrencyWrapper&lt; CudaBufferReader &gt;</label>
        <childnode refid="785" relation="public-inheritance">
        </childnode>
      </node>
      <node id="785">
        <label>arrow::io::RandomAccessFile</label>
        <link refid="classarrow_1_1io_1_1_random_access_file"/>
        <childnode refid="786" relation="public-inheritance">
        </childnode>
        <childnode refid="787" relation="public-inheritance">
        </childnode>
        <childnode refid="790" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h" line="195" column="1" bodyfile="/arrow/cpp/src/arrow/gpu/cuda_memory.h" bodystart="194" bodyend="232"/>
    <listofallmembers>
      <member refid="classarrow_1_1io_1_1_file_interface_1a0fa59fe92d3c99c9d9701210626aac60" prot="public" virt="virtual"><scope>arrow::cuda::CudaBufferReader</scope><name>Abort</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_buffer_reader_1a01bad8257cc83ac5d9ed478309008871" prot="protected" virt="non-virtual"><scope>arrow::cuda::CudaBufferReader</scope><name>address_</name></member>
      <member refid="classarrow_1_1io_1_1_input_stream_1ab5e2e1bdb05f7847363461bc3b90d386" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaBufferReader</scope><name>Advance</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_buffer_reader_1a84ad7364befe895392dfa954a0156996" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaBufferReader</scope><name>buffer</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_buffer_reader_1aa06ee0184921f48c829d6f537f1c9a98" prot="protected" virt="non-virtual"><scope>arrow::cuda::CudaBufferReader</scope><name>buffer_</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_buffer_reader_1afb4e9abe2c74575ab9ec161b8b276b16" prot="protected" virt="non-virtual"><scope>arrow::cuda::CudaBufferReader</scope><name>CheckClosed</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1ae0f46d227a430af180576715e7aa0b78" prot="public" virt="pure-virtual"><scope>arrow::cuda::CudaBufferReader</scope><name>Close</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_buffer_reader_1a0d572faa3e6b61d8df77b677549a6049" prot="public" virt="virtual"><scope>arrow::cuda::CudaBufferReader</scope><name>closed</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_buffer_reader_1a22f58c0024dc9994df8d5a75bf663a49" prot="protected" virt="non-virtual"><scope>arrow::cuda::CudaBufferReader</scope><name>context_</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_buffer_reader_1a0dfc51e2512774a97e24754733810db5" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaBufferReader</scope><name>CudaBufferReader</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_buffer_reader_1a083f3c2ae383ae5083ba6841cb7e8513" prot="protected" virt="non-virtual"><scope>arrow::cuda::CudaBufferReader</scope><name>DoClose</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_buffer_reader_1aaa86d782a6ac70ddc9fd3d99f7c689a1" prot="protected" virt="non-virtual"><scope>arrow::cuda::CudaBufferReader</scope><name>DoGetSize</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_buffer_reader_1aa3f57c1649ee6e8df5e3c4a4d3378420" prot="protected" virt="non-virtual"><scope>arrow::cuda::CudaBufferReader</scope><name>DoRead</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_buffer_reader_1a2227d0f86261df25a504e3ceb11ed879" prot="protected" virt="non-virtual"><scope>arrow::cuda::CudaBufferReader</scope><name>DoRead</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_buffer_reader_1a3bd4bd7b33754b98f560fa8ee82c43bd" prot="protected" virt="non-virtual"><scope>arrow::cuda::CudaBufferReader</scope><name>DoReadAt</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_buffer_reader_1abe96c0e271a61db301941d8c465d55f2" prot="protected" virt="non-virtual"><scope>arrow::cuda::CudaBufferReader</scope><name>DoReadAt</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_buffer_reader_1a57dd6f2e8d5a0641dc7de7922740ce72" prot="protected" virt="non-virtual"><scope>arrow::cuda::CudaBufferReader</scope><name>DoSeek</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_buffer_reader_1a6f1b846bf01cbea790ac7aed5431be39" prot="protected" virt="non-virtual"><scope>arrow::cuda::CudaBufferReader</scope><name>DoTell</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1afea9126bb21e3720212a826aa78b5534" prot="protected" virt="non-virtual"><scope>arrow::cuda::CudaBufferReader</scope><name>FileInterface</name></member>
      <member refid="classarrow_1_1io_1_1_random_access_file_1a2a476c2a6ad474e123d1aab20be289c4" prot="public" virt="pure-virtual"><scope>arrow::cuda::CudaBufferReader</scope><name>GetSize</name></member>
      <member refid="classarrow_1_1io_1_1_random_access_file_1a077348c5eb5ad0147582a3e5aa073847" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaBufferReader</scope><name>GetStream</name></member>
      <member refid="classarrow_1_1io_1_1_input_stream_1aeb778572d0e9bf4902dbfbbc5353d7fd" prot="protected" virt="non-virtual"><scope>arrow::cuda::CudaBufferReader</scope><name>InputStream</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_buffer_reader_1a7510efdea3627481eb15029f7de4e232" prot="protected" virt="non-virtual"><scope>arrow::cuda::CudaBufferReader</scope><name>is_open_</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1a75a3739361570bb121b9adb04d5d8686" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaBufferReader</scope><name>mode</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1a504d0410eb6066316365a4549d000ee0" prot="protected" virt="non-virtual"><scope>arrow::cuda::CudaBufferReader</scope><name>mode_</name></member>
      <member refid="classarrow_1_1io_1_1_input_stream_1aba80e2518abc166625077bd065ae3721" prot="public" virt="virtual"><scope>arrow::cuda::CudaBufferReader</scope><name>Peek</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_buffer_reader_1a0ce99137d11a0b96dd3024199579a2c0" prot="protected" virt="non-virtual"><scope>arrow::cuda::CudaBufferReader</scope><name>position_</name></member>
      <member refid="classarrow_1_1io_1_1_random_access_file_1a32c1cb28aa86db601b68a96615a3161c" prot="protected" virt="non-virtual"><scope>arrow::cuda::CudaBufferReader</scope><name>RandomAccessFile</name></member>
      <member refid="classarrow_1_1io_1_1_readable_1ab94d6d47006df39f6cf77c078a61b8d8" prot="public" virt="pure-virtual"><scope>arrow::cuda::CudaBufferReader</scope><name>Read</name></member>
      <member refid="classarrow_1_1io_1_1_readable_1aca2d005299c3af1092bedff34b5b015b" prot="public" virt="pure-virtual"><scope>arrow::cuda::CudaBufferReader</scope><name>Read</name></member>
      <member refid="classarrow_1_1io_1_1_random_access_file_1ae37e086e71206380188a28fa5b125ac4" prot="public" virt="virtual"><scope>arrow::cuda::CudaBufferReader</scope><name>ReadAsync</name></member>
      <member refid="classarrow_1_1io_1_1_random_access_file_1adb9d40656e516d6b77ee2bdfc00126f3" prot="public" virt="virtual"><scope>arrow::cuda::CudaBufferReader</scope><name>ReadAt</name></member>
      <member refid="classarrow_1_1io_1_1_random_access_file_1a562433f2be06021acb9abd20bd5a8219" prot="public" virt="virtual"><scope>arrow::cuda::CudaBufferReader</scope><name>ReadAt</name></member>
      <member refid="classarrow_1_1io_1_1_seekable_1a410ba0e0932dbcb939b570ee3c8c6d25" prot="public" virt="pure-virtual"><scope>arrow::cuda::CudaBufferReader</scope><name>Seek</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1af3dd01a780076e39a34770beb513f71f" prot="protected" virt="non-virtual"><scope>arrow::cuda::CudaBufferReader</scope><name>set_mode</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_buffer_reader_1a106a3cc03156e5c5ebea89d9d2ccbe7b" prot="protected" virt="non-virtual"><scope>arrow::cuda::CudaBufferReader</scope><name>size_</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_buffer_reader_1ab01cdb213d900351c43dba8078c81f10" prot="public" virt="virtual"><scope>arrow::cuda::CudaBufferReader</scope><name>supports_zero_copy</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1ac6c6709147a46cd7f45d0779c1819ce6" prot="public" virt="pure-virtual"><scope>arrow::cuda::CudaBufferReader</scope><name>Tell</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1aa42dcdfad00634f01192b39f1d9b4929" prot="public" virt="pure-virtual"><scope>arrow::cuda::CudaBufferReader</scope><name>~FileInterface</name></member>
      <member refid="classarrow_1_1io_1_1_random_access_file_1a30c6917dfe0b6e508dac2ecc81917187" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaBufferReader</scope><name>~RandomAccessFile</name></member>
      <member refid="classarrow_1_1io_1_1_readable_1a96a411d4494a9872d7eef4f8bb6396b4" prot="public" virt="virtual"><scope>arrow::cuda::CudaBufferReader</scope><name>~Readable</name></member>
      <member refid="classarrow_1_1io_1_1_seekable_1a7642c30d2f852e0f79fec036a94ca093" prot="public" virt="virtual"><scope>arrow::cuda::CudaBufferReader</scope><name>~Seekable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
