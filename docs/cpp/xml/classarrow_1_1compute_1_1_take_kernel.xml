<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1compute_1_1_take_kernel" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>arrow::compute::TakeKernel</compoundname>
    <basecompoundref refid="classarrow_1_1compute_1_1_binary_kernel" prot="public" virt="non-virtual">arrow::compute::BinaryKernel</basecompoundref>
    <includes refid="take_8h" local="no">arrow/compute/kernels/take.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classarrow_1_1compute_1_1_take_kernel_1aa81d3beb17f76c633498b06b1a8449c6" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::compute::TakeKernel::type_</definition>
        <argsstring></argsstring>
        <name>type_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernels/take.h" line="211" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernels/take.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1compute_1_1_take_kernel_1ad8bda6fbd8862dadcb91e64109013bfa" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::compute::TakeKernel::TakeKernel</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;type, TakeOptions options={})</argsstring>
        <name>TakeKernel</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="structarrow_1_1compute_1_1_take_options" kindref="compound">TakeOptions</ref></type>
          <declname>options</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernels/take.h" line="183" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernels/take.h" bodystart="183" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1compute_1_1_take_kernel_1a5534795bddc484e38c2779b8297e50cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::compute::TakeKernel::Call</definition>
        <argsstring>(FunctionContext *ctx, const Datum &amp;values, const Datum &amp;indices, Datum *out) override</argsstring>
        <name>Call</name>
        <reimplements refid="classarrow_1_1compute_1_1_binary_kernel_1a14dc9caa940f7992faa0bac221ac95dd">Call</reimplements>
        <param>
          <type><ref refid="classarrow_1_1compute_1_1_function_context" kindref="compound">FunctionContext</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1compute_1_1_datum" kindref="compound">Datum</ref> &amp;</type>
          <declname>values</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1compute_1_1_datum" kindref="compound">Datum</ref> &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type><ref refid="structarrow_1_1compute_1_1_datum" kindref="compound">Datum</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para><ref refid="classarrow_1_1compute_1_1_binary_kernel" kindref="compound">BinaryKernel</ref> interface. </para>        </briefdescription>
        <detaileddescription>
<para>delegates to subclasses via <ref refid="classarrow_1_1compute_1_1_take_kernel_1a5fb0471e7bbd0e14f666fd6b73ee2f50" kindref="member">Take()</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernels/take.h" line="189" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1compute_1_1_take_kernel_1a92e44db1c4d86667f66c0e9f1456b740" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::compute::TakeKernel::out_type</definition>
        <argsstring>() const override</argsstring>
        <name>out_type</name>
        <reimplements refid="classarrow_1_1compute_1_1_op_kernel_1a7c5f16b7acdba73640c9131e2cd04270">out_type</reimplements>
        <briefdescription>
<para>output type of this kernel (identical to type of values taken) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernels/take.h" line="193" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernels/take.h" bodystart="193" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1compute_1_1_take_kernel_1a5fb0471e7bbd0e14f666fd6b73ee2f50" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>virtual Status arrow::compute::TakeKernel::Take</definition>
        <argsstring>(FunctionContext *ctx, const Array &amp;values, const Array &amp;indices, std::shared_ptr&lt; Array &gt; *out)=0</argsstring>
        <name>Take</name>
        <param>
          <type><ref refid="classarrow_1_1compute_1_1_function_context" kindref="compound">FunctionContext</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>values</declname>
        </param>
        <param>
          <type>const <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>indices</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>single-array implementation </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernels/take.h" line="207" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1compute_1_1_take_kernel_1ac0d9ca8d5116f8049e1519a50dfe23a0" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::compute::TakeKernel::Make</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;value_type, const std::shared_ptr&lt; DataType &gt; &amp;index_type, std::unique_ptr&lt; TakeKernel &gt; *out)</argsstring>
        <name>Make</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>value_type</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>index_type</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classarrow_1_1compute_1_1_take_kernel" kindref="compound">TakeKernel</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>factory for TakeKernels </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value_type</parametername>
</parameternamelist>
<parameterdescription>
<para>constructed <ref refid="classarrow_1_1compute_1_1_take_kernel" kindref="compound">TakeKernel</ref> will support taking values of this type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">index_type</parametername>
</parameternamelist>
<parameterdescription>
<para>constructed <ref refid="classarrow_1_1compute_1_1_take_kernel" kindref="compound">TakeKernel</ref> will support taking with indices of this type </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>created kernel </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernels/take.h" line="202" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classarrow_1_1compute_1_1_binary_kernel" kindref="compound">BinaryKernel</ref> implementing Take operation. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4462">
        <label>arrow::compute::OpKernel</label>
        <link refid="classarrow_1_1compute_1_1_op_kernel"/>
      </node>
      <node id="4461">
        <label>arrow::compute::BinaryKernel</label>
        <link refid="classarrow_1_1compute_1_1_binary_kernel"/>
        <childnode refid="4462" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4460">
        <label>arrow::compute::TakeKernel</label>
        <link refid="classarrow_1_1compute_1_1_take_kernel"/>
        <childnode refid="4461" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4465">
        <label>arrow::compute::OpKernel</label>
        <link refid="classarrow_1_1compute_1_1_op_kernel"/>
      </node>
      <node id="4464">
        <label>arrow::compute::BinaryKernel</label>
        <link refid="classarrow_1_1compute_1_1_binary_kernel"/>
        <childnode refid="4465" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4463">
        <label>arrow::compute::TakeKernel</label>
        <link refid="classarrow_1_1compute_1_1_take_kernel"/>
        <childnode refid="4464" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/compute/kernels/take.h" line="181" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernels/take.h" bodystart="181" bodyend="212"/>
    <listofallmembers>
      <member refid="classarrow_1_1compute_1_1_take_kernel_1a5534795bddc484e38c2779b8297e50cc" prot="public" virt="virtual"><scope>arrow::compute::TakeKernel</scope><name>Call</name></member>
      <member refid="classarrow_1_1compute_1_1_take_kernel_1ac0d9ca8d5116f8049e1519a50dfe23a0" prot="public" virt="non-virtual"><scope>arrow::compute::TakeKernel</scope><name>Make</name></member>
      <member refid="classarrow_1_1compute_1_1_take_kernel_1a92e44db1c4d86667f66c0e9f1456b740" prot="public" virt="virtual"><scope>arrow::compute::TakeKernel</scope><name>out_type</name></member>
      <member refid="classarrow_1_1compute_1_1_take_kernel_1a5fb0471e7bbd0e14f666fd6b73ee2f50" prot="public" virt="pure-virtual"><scope>arrow::compute::TakeKernel</scope><name>Take</name></member>
      <member refid="classarrow_1_1compute_1_1_take_kernel_1ad8bda6fbd8862dadcb91e64109013bfa" prot="public" virt="non-virtual"><scope>arrow::compute::TakeKernel</scope><name>TakeKernel</name></member>
      <member refid="classarrow_1_1compute_1_1_take_kernel_1aa81d3beb17f76c633498b06b1a8449c6" prot="protected" virt="non-virtual"><scope>arrow::compute::TakeKernel</scope><name>type_</name></member>
      <member refid="classarrow_1_1compute_1_1_op_kernel_1a640d7e2c51722436ed428013dabb63d3" prot="public" virt="virtual"><scope>arrow::compute::TakeKernel</scope><name>~OpKernel</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
