<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1stl_1_1_s_t_l_memory_pool" kind="class" language="C++" prot="public">
    <compoundname>arrow::stl::STLMemoryPool</compoundname>
    <basecompoundref refid="classarrow_1_1_memory_pool" prot="public" virt="non-virtual">arrow::MemoryPool</basecompoundref>
    <includes refid="stl__allocator_8h" local="no">arrow/stl_allocator.h</includes>
    <templateparamlist>
      <param>
        <type>typename Allocator</type>
        <defval>std::allocator&lt;uint8_t&gt;</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classarrow_1_1stl_1_1_s_t_l_memory_pool_1abba8675e1ddfdaa2d8b556d655d2d63d" prot="private" static="no" mutable="no">
        <type>Allocator</type>
        <definition>Allocator arrow::stl::STLMemoryPool&lt; Allocator &gt;::alloc_</definition>
        <argsstring></argsstring>
        <name>alloc_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/stl_allocator.h" line="138" column="1" bodyfile="/arrow/cpp/src/arrow/stl_allocator.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1stl_1_1_s_t_l_memory_pool_1af88d763017d83f61b7d0f025cca754a5" prot="private" static="no" mutable="no">
        <type>arrow::internal::MemoryPoolStats</type>
        <definition>arrow::internal::MemoryPoolStats arrow::stl::STLMemoryPool&lt; Allocator &gt;::stats_</definition>
        <argsstring></argsstring>
        <name>stats_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/stl_allocator.h" line="139" column="1" bodyfile="/arrow/cpp/src/arrow/stl_allocator.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1stl_1_1_s_t_l_memory_pool_1a04f9e7c6b4995ffad23f3a60f8e34a9f" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::stl::STLMemoryPool&lt; Allocator &gt;::STLMemoryPool</definition>
        <argsstring>(const Allocator &amp;alloc)</argsstring>
        <name>STLMemoryPool</name>
        <param>
          <type>const Allocator &amp;</type>
          <declname>alloc</declname>
        </param>
        <briefdescription>
<para>Construct a memory pool from the given allocator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/stl_allocator.h" line="101" column="1" bodyfile="/arrow/cpp/src/arrow/stl_allocator.h" bodystart="101" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1stl_1_1_s_t_l_memory_pool_1ae9533be0fa6306cf5045ab53a74bc79b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::stl::STLMemoryPool&lt; Allocator &gt;::Allocate</definition>
        <argsstring>(int64_t size, uint8_t **out) override</argsstring>
        <name>Allocate</name>
        <reimplements refid="classarrow_1_1_memory_pool_1afa452b21a4d401403cc509cc50a384f9">Allocate</reimplements>
        <param>
          <type>int64_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>uint8_t **</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Allocate a new memory region of at least size bytes. </para>        </briefdescription>
        <detaileddescription>
<para>The allocated region shall be 64-byte aligned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/stl_allocator.h" line="103" column="1" bodyfile="/arrow/cpp/src/arrow/stl_allocator.h" bodystart="103" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1stl_1_1_s_t_l_memory_pool_1ae092742351b7986c620370b0b40a6a6f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::stl::STLMemoryPool&lt; Allocator &gt;::Reallocate</definition>
        <argsstring>(int64_t old_size, int64_t new_size, uint8_t **ptr) override</argsstring>
        <name>Reallocate</name>
        <reimplements refid="classarrow_1_1_memory_pool_1af64bda5eccc8fa42ce9ae0aba1ad9077">Reallocate</reimplements>
        <param>
          <type>int64_t</type>
          <declname>old_size</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>new_size</declname>
        </param>
        <param>
          <type>uint8_t **</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Resize an already allocated memory section. </para>        </briefdescription>
        <detaileddescription>
<para>As by default most default allocators on a platform don&apos;t support aligned reallocation, this function can involve a copy of the underlying data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/stl_allocator.h" line="113" column="1" bodyfile="/arrow/cpp/src/arrow/stl_allocator.h" bodystart="113" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1stl_1_1_s_t_l_memory_pool_1abb27dc235972168141885d167dd4097d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void arrow::stl::STLMemoryPool&lt; Allocator &gt;::Free</definition>
        <argsstring>(uint8_t *buffer, int64_t size) override</argsstring>
        <name>Free</name>
        <reimplements refid="classarrow_1_1_memory_pool_1a5a45c822a4ca7b3d8387501acfa69911">Free</reimplements>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Free an allocated region. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the start of the allocated memory region </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Allocated size located at buffer. An allocator implementation may use this for tracking the amount of allocated bytes as well as for faster deallocation if supported by its backend. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/stl_allocator.h" line="126" column="1" bodyfile="/arrow/cpp/src/arrow/stl_allocator.h" bodystart="126" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1stl_1_1_s_t_l_memory_pool_1a5de9db81dd9b9b6c854c7ece6d13e063" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>int64_t</type>
        <definition>int64_t arrow::stl::STLMemoryPool&lt; Allocator &gt;::bytes_allocated</definition>
        <argsstring>() const override</argsstring>
        <name>bytes_allocated</name>
        <reimplements refid="classarrow_1_1_memory_pool_1abd12cd4bfb8ce8afcfc7a25d0293cd85">bytes_allocated</reimplements>
        <briefdescription>
<para>The number of bytes that were allocated and not yet free&apos;d through this allocator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/stl_allocator.h" line="131" column="1" bodyfile="/arrow/cpp/src/arrow/stl_allocator.h" bodystart="131" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1stl_1_1_s_t_l_memory_pool_1ab65e96df014e555fa03f7e8ba043d003" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>int64_t</type>
        <definition>int64_t arrow::stl::STLMemoryPool&lt; Allocator &gt;::max_memory</definition>
        <argsstring>() const override</argsstring>
        <name>max_memory</name>
        <reimplements refid="classarrow_1_1_memory_pool_1a4d1fe541389b4afd4d49d727dc3088f0">max_memory</reimplements>
        <briefdescription>
<para>Return peak memory allocation in this memory pool. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Maximum bytes allocated. If not known (or not implemented), returns -1 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/stl_allocator.h" line="133" column="1" bodyfile="/arrow/cpp/src/arrow/stl_allocator.h" bodystart="133" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1stl_1_1_s_t_l_memory_pool_1ad90be605fdb1f922aff9a4abfedfad4b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string arrow::stl::STLMemoryPool&lt; Allocator &gt;::backend_name</definition>
        <argsstring>() const override</argsstring>
        <name>backend_name</name>
        <reimplements refid="classarrow_1_1_memory_pool_1a60f07985878503603da92c64ab4ba03c">backend_name</reimplements>
        <briefdescription>
<para>The name of the backend used by this <ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> (e.g. &quot;system&quot; or &quot;jemalloc&quot;);. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/stl_allocator.h" line="135" column="1" bodyfile="/arrow/cpp/src/arrow/stl_allocator.h" bodystart="135" bodyend="135"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A <ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> implementation delegating allocations to a STL allocator. </para>    </briefdescription>
    <detaileddescription>
<para>Note that STL allocators don&apos;t provide a resizing operation, and therefore any buffer resizes will do a full reallocation and copy. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="4319">
        <label>arrow::MemoryPool</label>
        <link refid="classarrow_1_1_memory_pool"/>
      </node>
      <node id="4318">
        <label>arrow::stl::STLMemoryPool&lt; Allocator &gt;</label>
        <link refid="classarrow_1_1stl_1_1_s_t_l_memory_pool"/>
        <childnode refid="4319" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4321">
        <label>arrow::MemoryPool</label>
        <link refid="classarrow_1_1_memory_pool"/>
      </node>
      <node id="4320">
        <label>arrow::stl::STLMemoryPool&lt; Allocator &gt;</label>
        <link refid="classarrow_1_1stl_1_1_s_t_l_memory_pool"/>
        <childnode refid="4321" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/stl_allocator.h" line="98" column="1" bodyfile="/arrow/cpp/src/arrow/stl_allocator.h" bodystart="98" bodyend="140"/>
    <listofallmembers>
      <member refid="classarrow_1_1stl_1_1_s_t_l_memory_pool_1abba8675e1ddfdaa2d8b556d655d2d63d" prot="private" virt="non-virtual"><scope>arrow::stl::STLMemoryPool</scope><name>alloc_</name></member>
      <member refid="classarrow_1_1stl_1_1_s_t_l_memory_pool_1ae9533be0fa6306cf5045ab53a74bc79b" prot="public" virt="virtual"><scope>arrow::stl::STLMemoryPool</scope><name>Allocate</name></member>
      <member refid="classarrow_1_1stl_1_1_s_t_l_memory_pool_1ad90be605fdb1f922aff9a4abfedfad4b" prot="public" virt="virtual"><scope>arrow::stl::STLMemoryPool</scope><name>backend_name</name></member>
      <member refid="classarrow_1_1stl_1_1_s_t_l_memory_pool_1a5de9db81dd9b9b6c854c7ece6d13e063" prot="public" virt="virtual"><scope>arrow::stl::STLMemoryPool</scope><name>bytes_allocated</name></member>
      <member refid="classarrow_1_1_memory_pool_1a844c3276d2f14daf186ceb9585fe3581" prot="public" virt="non-virtual"><scope>arrow::stl::STLMemoryPool</scope><name>CreateDefault</name></member>
      <member refid="classarrow_1_1stl_1_1_s_t_l_memory_pool_1abb27dc235972168141885d167dd4097d" prot="public" virt="virtual"><scope>arrow::stl::STLMemoryPool</scope><name>Free</name></member>
      <member refid="classarrow_1_1stl_1_1_s_t_l_memory_pool_1ab65e96df014e555fa03f7e8ba043d003" prot="public" virt="virtual"><scope>arrow::stl::STLMemoryPool</scope><name>max_memory</name></member>
      <member refid="classarrow_1_1_memory_pool_1aa4b251669cc9858c40cffda6caedde75" prot="protected" virt="non-virtual"><scope>arrow::stl::STLMemoryPool</scope><name>MemoryPool</name></member>
      <member refid="classarrow_1_1stl_1_1_s_t_l_memory_pool_1ae092742351b7986c620370b0b40a6a6f" prot="public" virt="virtual"><scope>arrow::stl::STLMemoryPool</scope><name>Reallocate</name></member>
      <member refid="classarrow_1_1stl_1_1_s_t_l_memory_pool_1af88d763017d83f61b7d0f025cca754a5" prot="private" virt="non-virtual"><scope>arrow::stl::STLMemoryPool</scope><name>stats_</name></member>
      <member refid="classarrow_1_1stl_1_1_s_t_l_memory_pool_1a04f9e7c6b4995ffad23f3a60f8e34a9f" prot="public" virt="non-virtual"><scope>arrow::stl::STLMemoryPool</scope><name>STLMemoryPool</name></member>
      <member refid="classarrow_1_1_memory_pool_1a3176bcc9789be165f1af2217d144b02a" prot="public" virt="virtual"><scope>arrow::stl::STLMemoryPool</scope><name>~MemoryPool</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
