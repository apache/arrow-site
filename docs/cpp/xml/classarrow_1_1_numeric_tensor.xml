<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_numeric_tensor" kind="class" language="C++" prot="public">
    <compoundname>arrow::NumericTensor</compoundname>
    <basecompoundref refid="classarrow_1_1_tensor" prot="public" virt="non-virtual">arrow::Tensor</basecompoundref>
    <includes refid="tensor_8h" local="no">arrow/tensor.h</includes>
    <templateparamlist>
      <param>
        <type>typename TYPE</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classarrow_1_1_numeric_tensor_1a45584fca9da9a327b08e0097c432fb3b" prot="public" static="no">
        <type>TYPE</type>
        <definition>using arrow::NumericTensor&lt; TYPE &gt;::TypeClass =  TYPE</definition>
        <argsstring></argsstring>
        <name>TypeClass</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/tensor.h" line="187" column="1" bodyfile="/arrow/cpp/src/arrow/tensor.h" bodystart="187" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classarrow_1_1_numeric_tensor_1aab67a970fa1ce3ccb7acc7f4fde52bbf" prot="public" static="no">
        <type>typename TypeClass::c_type</type>
        <definition>using arrow::NumericTensor&lt; TYPE &gt;::value_type =  typename TypeClass::c_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/tensor.h" line="188" column="1" bodyfile="/arrow/cpp/src/arrow/tensor.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1_numeric_tensor_1ae9a2a18ee78a3b0d025f79608b258321" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_numeric_tensor" kindref="compound">NumericTensor</ref>&lt; TYPE &gt; &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;NumericTensor&lt;TYPE&gt; &gt; &gt; arrow::NumericTensor&lt; TYPE &gt;::Make</definition>
        <argsstring>(const std::shared_ptr&lt; Buffer &gt; &amp;data, const std::vector&lt; int64_t &gt; &amp;shape, const std::vector&lt; int64_t &gt; &amp;strides={}, const std::vector&lt; std::string &gt; &amp;dim_names={})</argsstring>
        <name>Make</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>strides</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dim_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Create a <ref refid="classarrow_1_1_numeric_tensor" kindref="compound">NumericTensor</ref> with full parameters. </para>        </briefdescription>
        <detaileddescription>
<para>This factory function will return <ref refid="classarrow_1_1_status_1aa388393c060f3b44316876a630190576" kindref="member">Status::Invalid</ref> when the parameters are inconsistent</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer of the tensor content </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The shape of the tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">strides</parametername>
</parameternamelist>
<parameterdescription>
<para>The strides of the tensor (if this is empty, the data assumed to be row-major) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_names</parametername>
</parameternamelist>
<parameterdescription>
<para>The names of the tensor dimensions </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/tensor.h" line="200" column="1" bodyfile="/arrow/cpp/src/arrow/tensor.h" bodystart="200" bodyend="207"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1_numeric_tensor_1a4aeea1af541551baf382eda9497bd8a4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::NumericTensor&lt; TYPE &gt;::NumericTensor</definition>
        <argsstring>(const std::shared_ptr&lt; Buffer &gt; &amp;data, const std::vector&lt; int64_t &gt; &amp;shape, const std::vector&lt; int64_t &gt; &amp;strides, const std::vector&lt; std::string &gt; &amp;dim_names)</argsstring>
        <name>NumericTensor</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>strides</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dim_names</declname>
        </param>
        <briefdescription>
<para>Constructor with non-negative strides and dimension names. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/tensor.h" line="210" column="1" bodyfile="/arrow/cpp/src/arrow/tensor.h" bodystart="210" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_numeric_tensor_1afa3c1356beb206dd95464087cf919ef3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::NumericTensor&lt; TYPE &gt;::NumericTensor</definition>
        <argsstring>(const std::shared_ptr&lt; Buffer &gt; &amp;data, const std::vector&lt; int64_t &gt; &amp;shape)</argsstring>
        <name>NumericTensor</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
<para>Constructor with no dimension names or strides, data assumed to be row-major. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/tensor.h" line="216" column="1" bodyfile="/arrow/cpp/src/arrow/tensor.h" bodystart="216" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_numeric_tensor_1a47aa4eda9e62bfe1d6a0c0d218a7526d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::NumericTensor&lt; TYPE &gt;::NumericTensor</definition>
        <argsstring>(const std::shared_ptr&lt; Buffer &gt; &amp;data, const std::vector&lt; int64_t &gt; &amp;shape, const std::vector&lt; int64_t &gt; &amp;strides)</argsstring>
        <name>NumericTensor</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>strides</declname>
        </param>
        <briefdescription>
<para>Constructor with non-negative strides. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/tensor.h" line="220" column="1" bodyfile="/arrow/cpp/src/arrow/tensor.h" bodystart="220" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_numeric_tensor_1ab4ac2792df290ffcdc2c45c77d47572a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classarrow_1_1_numeric_tensor_1aab67a970fa1ce3ccb7acc7f4fde52bbf" kindref="member">value_type</ref> &amp;</type>
        <definition>const value_type&amp; arrow::NumericTensor&lt; TYPE &gt;::Value</definition>
        <argsstring>(const std::vector&lt; int64_t &gt; &amp;index) const</argsstring>
        <name>Value</name>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/tensor.h" line="224" column="1" bodyfile="/arrow/cpp/src/arrow/tensor.h" bodystart="224" bodyend="226"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3331">
        <label>arrow::NumericTensor&lt; TYPE &gt;</label>
        <link refid="classarrow_1_1_numeric_tensor"/>
        <childnode refid="3332" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3332">
        <label>arrow::Tensor</label>
        <link refid="classarrow_1_1_tensor"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3333">
        <label>arrow::NumericTensor&lt; TYPE &gt;</label>
        <link refid="classarrow_1_1_numeric_tensor"/>
        <childnode refid="3334" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3334">
        <label>arrow::Tensor</label>
        <link refid="classarrow_1_1_tensor"/>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/tensor.h" line="185" column="1" bodyfile="/arrow/cpp/src/arrow/tensor.h" bodystart="185" bodyend="227"/>
    <listofallmembers>
      <member refid="classarrow_1_1_tensor_1a78dae60d7cb7cc5a70b61f0cde2c585d" prot="public" virt="non-virtual"><scope>arrow::NumericTensor</scope><name>CalculateValueOffset</name></member>
      <member refid="classarrow_1_1_tensor_1a0969c2fc1357fe8d3c3834ceacc147dc" prot="public" virt="non-virtual"><scope>arrow::NumericTensor</scope><name>CountNonZero</name></member>
      <member refid="classarrow_1_1_tensor_1a27e72ed5e1ad825b0a5813bf6bd04010" prot="public" virt="non-virtual"><scope>arrow::NumericTensor</scope><name>data</name></member>
      <member refid="classarrow_1_1_tensor_1a00dd73d91a790484b94aabcb4fedcdc7" prot="protected" virt="non-virtual"><scope>arrow::NumericTensor</scope><name>data_</name></member>
      <member refid="classarrow_1_1_tensor_1a9af40b1b35447dd832873dc43b07d663" prot="public" virt="non-virtual"><scope>arrow::NumericTensor</scope><name>dim_name</name></member>
      <member refid="classarrow_1_1_tensor_1ad41ab4a1764534d20213970191b4bd0c" prot="public" virt="non-virtual"><scope>arrow::NumericTensor</scope><name>dim_names</name></member>
      <member refid="classarrow_1_1_tensor_1a84f88a8835ecb20532f89fb804b8ce2a" prot="protected" virt="non-virtual"><scope>arrow::NumericTensor</scope><name>dim_names_</name></member>
      <member refid="classarrow_1_1_tensor_1aab7f17af07a9db83afa3a72287ff3841" prot="public" virt="non-virtual"><scope>arrow::NumericTensor</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_tensor_1a0008e372a7ebca8a386f7a37f4d01e31" prot="public" virt="non-virtual"><scope>arrow::NumericTensor</scope><name>is_column_major</name></member>
      <member refid="classarrow_1_1_tensor_1a907568a5bf3646ef440b0b6342b5ebfa" prot="public" virt="non-virtual"><scope>arrow::NumericTensor</scope><name>is_contiguous</name></member>
      <member refid="classarrow_1_1_tensor_1a8620cbf7de60ce9a2cd8527e30a2e8ad" prot="public" virt="non-virtual"><scope>arrow::NumericTensor</scope><name>is_mutable</name></member>
      <member refid="classarrow_1_1_tensor_1af76f12b10080b0a8e6302c7a1b17e294" prot="public" virt="non-virtual"><scope>arrow::NumericTensor</scope><name>is_row_major</name></member>
      <member refid="classarrow_1_1_numeric_tensor_1ae9a2a18ee78a3b0d025f79608b258321" prot="public" virt="non-virtual"><scope>arrow::NumericTensor</scope><name>Make</name></member>
      <member refid="classarrow_1_1_tensor_1a85ca08ba70b81e474cef7d9eb73c2b34" prot="public" virt="non-virtual" ambiguityscope="arrow::Tensor::"><scope>arrow::NumericTensor</scope><name>Make</name></member>
      <member refid="classarrow_1_1_tensor_1af5cafa13ed1ef13d6a2d68be1dc8820b" prot="public" virt="non-virtual"><scope>arrow::NumericTensor</scope><name>ndim</name></member>
      <member refid="classarrow_1_1_numeric_tensor_1a4aeea1af541551baf382eda9497bd8a4" prot="public" virt="non-virtual"><scope>arrow::NumericTensor</scope><name>NumericTensor</name></member>
      <member refid="classarrow_1_1_numeric_tensor_1afa3c1356beb206dd95464087cf919ef3" prot="public" virt="non-virtual"><scope>arrow::NumericTensor</scope><name>NumericTensor</name></member>
      <member refid="classarrow_1_1_numeric_tensor_1a47aa4eda9e62bfe1d6a0c0d218a7526d" prot="public" virt="non-virtual"><scope>arrow::NumericTensor</scope><name>NumericTensor</name></member>
      <member refid="classarrow_1_1_tensor_1a5dc0bc200a25fcb6bf313427133d7dce" prot="public" virt="non-virtual"><scope>arrow::NumericTensor</scope><name>raw_data</name></member>
      <member refid="classarrow_1_1_tensor_1a3badcfee7ddfbceeb3accdf49f9959ac" prot="public" virt="non-virtual"><scope>arrow::NumericTensor</scope><name>raw_mutable_data</name></member>
      <member refid="classarrow_1_1_tensor_1ad1135e664dda72de17680475a28fbee5" prot="public" virt="non-virtual"><scope>arrow::NumericTensor</scope><name>shape</name></member>
      <member refid="classarrow_1_1_tensor_1adfbc5876ce2f4c71d5503554a1cba2f2" prot="protected" virt="non-virtual"><scope>arrow::NumericTensor</scope><name>shape_</name></member>
      <member refid="classarrow_1_1_tensor_1aca5e2f0d617530dd732d8cb7f10db1d3" prot="public" virt="non-virtual"><scope>arrow::NumericTensor</scope><name>size</name></member>
      <member refid="classarrow_1_1_tensor_1adecc04e39498baf201453fb5ebddcc85" prot="public" virt="non-virtual"><scope>arrow::NumericTensor</scope><name>strides</name></member>
      <member refid="classarrow_1_1_tensor_1a5224d67e07ebb71c1c9f83e07bec303f" prot="protected" virt="non-virtual"><scope>arrow::NumericTensor</scope><name>strides_</name></member>
      <member refid="classarrow_1_1_tensor_1a979c34866a43fe9f2dfe4239e95e2b64" prot="public" virt="non-virtual"><scope>arrow::NumericTensor</scope><name>Tensor</name></member>
      <member refid="classarrow_1_1_tensor_1a1b6cd46945a5b6406c8007e78e15fb66" prot="public" virt="non-virtual"><scope>arrow::NumericTensor</scope><name>Tensor</name></member>
      <member refid="classarrow_1_1_tensor_1a6777ab3878c9aaabc8e6af8d2788e662" prot="public" virt="non-virtual"><scope>arrow::NumericTensor</scope><name>Tensor</name></member>
      <member refid="classarrow_1_1_tensor_1a2d08c525c1c829cf81f2f64c96b9e7d5" prot="protected" virt="non-virtual"><scope>arrow::NumericTensor</scope><name>Tensor</name></member>
      <member refid="classarrow_1_1_tensor_1a9bcd93151c9086430ebde46c0c3e2370" prot="public" virt="non-virtual"><scope>arrow::NumericTensor</scope><name>type</name></member>
      <member refid="classarrow_1_1_tensor_1ade1e4a39856e1377baf50c587b11272b" prot="protected" virt="non-virtual"><scope>arrow::NumericTensor</scope><name>type_</name></member>
      <member refid="classarrow_1_1_tensor_1a52b0c43c0b897dfb87cd90cf250cf5eb" prot="public" virt="non-virtual"><scope>arrow::NumericTensor</scope><name>type_id</name></member>
      <member refid="classarrow_1_1_numeric_tensor_1a45584fca9da9a327b08e0097c432fb3b" prot="public" virt="non-virtual"><scope>arrow::NumericTensor</scope><name>TypeClass</name></member>
      <member refid="classarrow_1_1_numeric_tensor_1ab4ac2792df290ffcdc2c45c77d47572a" prot="public" virt="non-virtual"><scope>arrow::NumericTensor</scope><name>Value</name></member>
      <member refid="classarrow_1_1_numeric_tensor_1aab67a970fa1ce3ccb7acc7f4fde52bbf" prot="public" virt="non-virtual"><scope>arrow::NumericTensor</scope><name>value_type</name></member>
      <member refid="classarrow_1_1_tensor_1a90486db9727a9fa84746f4132311b16f" prot="public" virt="virtual"><scope>arrow::NumericTensor</scope><name>~Tensor</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
