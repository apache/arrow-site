<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1csv_1_1_column_decoder" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>arrow::csv::ColumnDecoder</compoundname>
    <includes refid="column__decoder_8h" local="no">arrow/csv/column_decoder.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classarrow_1_1csv_1_1_column_decoder_1a364b6b9be7eff8758e0898ce446def91" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; internal::TaskGroup &gt;</type>
        <definition>std::shared_ptr&lt;internal::TaskGroup&gt; arrow::csv::ColumnDecoder::task_group_</definition>
        <argsstring></argsstring>
        <name>task_group_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/column_decoder.h" line="82" column="1" bodyfile="/arrow/cpp/src/arrow/csv/column_decoder.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1csv_1_1_column_decoder_1a222a80dfddd43833465472651ed8b3ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual arrow::csv::ColumnDecoder::~ColumnDecoder</definition>
        <argsstring>()=default</argsstring>
        <name>~ColumnDecoder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/column_decoder.h" line="42" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1csv_1_1_column_decoder_1a04ee15936e8a80b912ffc41212ef9355" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void arrow::csv::ColumnDecoder::Append</definition>
        <argsstring>(const std::shared_ptr&lt; BlockParser &gt; &amp;parser)=0</argsstring>
        <name>Append</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1csv_1_1_block_parser" kindref="compound">BlockParser</ref> &gt; &amp;</type>
          <declname>parser</declname>
        </param>
        <briefdescription>
<para>Spawn a task that will try to convert and append the given CSV block. </para>        </briefdescription>
        <detaileddescription>
<para>All calls to <ref refid="classarrow_1_1csv_1_1_column_decoder_1a04ee15936e8a80b912ffc41212ef9355" kindref="member">Append()</ref> should happen on the same thread, otherwise call <ref refid="classarrow_1_1csv_1_1_column_decoder_1a3054ef2ac4c2e8a1a6f74f7d764d4d22" kindref="member">Insert()</ref> instead. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/column_decoder.h" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1csv_1_1_column_decoder_1a3054ef2ac4c2e8a1a6f74f7d764d4d22" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void arrow::csv::ColumnDecoder::Insert</definition>
        <argsstring>(int64_t block_index, const std::shared_ptr&lt; BlockParser &gt; &amp;parser)=0</argsstring>
        <name>Insert</name>
        <param>
          <type>int64_t</type>
          <declname>block_index</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1csv_1_1_block_parser" kindref="compound">BlockParser</ref> &gt; &amp;</type>
          <declname>parser</declname>
        </param>
        <briefdescription>
<para>Spawn a task that will try to convert and insert the given CSV block. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/column_decoder.h" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1csv_1_1_column_decoder_1ac9854b4336bc79fa634cfab5e9448a52" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void arrow::csv::ColumnDecoder::SetEOF</definition>
        <argsstring>(int64_t num_blocks)=0</argsstring>
        <name>SetEOF</name>
        <param>
          <type>int64_t</type>
          <declname>num_blocks</declname>
        </param>
        <briefdescription>
<para>Set EOF at the given number of blocks. Must only be called once. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/column_decoder.h" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1csv_1_1_column_decoder_1ab0249ad3da4d87cc34e08f65c18baee1" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; &gt;</type>
        <definition>virtual Result&lt;std::shared_ptr&lt;Array&gt; &gt; arrow::csv::ColumnDecoder::NextChunk</definition>
        <argsstring>()=0</argsstring>
        <name>NextChunk</name>
        <briefdescription>
<para>Fetch a chunk. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/column_decoder.h" line="57" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1csv_1_1_column_decoder_1a339495b30affe49222468509a94a2afe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; internal::TaskGroup &gt;</type>
        <definition>std::shared_ptr&lt;internal::TaskGroup&gt; arrow::csv::ColumnDecoder::task_group</definition>
        <argsstring>()</argsstring>
        <name>task_group</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/column_decoder.h" line="59" column="1" bodyfile="/arrow/cpp/src/arrow/csv/column_decoder.h" bodystart="59" bodyend="59"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1csv_1_1_column_decoder_1ae4c10114da0fea4da81b034862c3ee62" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1csv_1_1_column_decoder" kindref="compound">ColumnDecoder</ref> &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;ColumnDecoder&gt; &gt; arrow::csv::ColumnDecoder::Make</definition>
        <argsstring>(MemoryPool *pool, std::shared_ptr&lt; DataType &gt; type, int32_t col_index, const ConvertOptions &amp;options, std::shared_ptr&lt; internal::TaskGroup &gt; task_group)</argsstring>
        <name>Make</name>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>col_index</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1csv_1_1_convert_options" kindref="compound">ConvertOptions</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; internal::TaskGroup &gt;</type>
          <declname>task_group</declname>
        </param>
        <briefdescription>
<para>Construct a strictly-typed <ref refid="classarrow_1_1csv_1_1_column_decoder" kindref="compound">ColumnDecoder</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/column_decoder.h" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1csv_1_1_column_decoder_1aa12048bebb80247110a849b5ec40df3c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1csv_1_1_column_decoder" kindref="compound">ColumnDecoder</ref> &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;ColumnDecoder&gt; &gt; arrow::csv::ColumnDecoder::Make</definition>
        <argsstring>(MemoryPool *pool, int32_t col_index, const ConvertOptions &amp;options, std::shared_ptr&lt; internal::TaskGroup &gt; task_group)</argsstring>
        <name>Make</name>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>col_index</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1csv_1_1_convert_options" kindref="compound">ConvertOptions</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; internal::TaskGroup &gt;</type>
          <declname>task_group</declname>
        </param>
        <briefdescription>
<para>Construct a type-inferring <ref refid="classarrow_1_1csv_1_1_column_decoder" kindref="compound">ColumnDecoder</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Inference will run only on the first block, the type will be frozen afterwards. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/column_decoder.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1csv_1_1_column_decoder_1ad75972420dae33a2a6be47e3d31ed95d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1csv_1_1_column_decoder" kindref="compound">ColumnDecoder</ref> &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;ColumnDecoder&gt; &gt; arrow::csv::ColumnDecoder::MakeNull</definition>
        <argsstring>(MemoryPool *pool, std::shared_ptr&lt; DataType &gt; type, std::shared_ptr&lt; internal::TaskGroup &gt; task_group)</argsstring>
        <name>MakeNull</name>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; internal::TaskGroup &gt;</type>
          <declname>task_group</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classarrow_1_1csv_1_1_column_decoder" kindref="compound">ColumnDecoder</ref> for a column of nulls (i.e. </para>        </briefdescription>
        <detaileddescription>
<para>not present in the CSV file). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/column_decoder.h" line="74" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classarrow_1_1csv_1_1_column_decoder_1ad09feeec42423108624a0056ef0214d1" prot="protected" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::csv::ColumnDecoder::ColumnDecoder</definition>
        <argsstring>(std::shared_ptr&lt; internal::TaskGroup &gt; task_group)</argsstring>
        <name>ColumnDecoder</name>
        <param>
          <type>std::shared_ptr&lt; internal::TaskGroup &gt;</type>
          <declname>task_group</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/csv/column_decoder.h" line="79" column="1" bodyfile="/arrow/cpp/src/arrow/csv/column_decoder.h" bodystart="79" bodyend="80"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/arrow/csv/column_decoder.h" line="40" column="1" bodyfile="/arrow/cpp/src/arrow/csv/column_decoder.h" bodystart="40" bodyend="83"/>
    <listofallmembers>
      <member refid="classarrow_1_1csv_1_1_column_decoder_1a04ee15936e8a80b912ffc41212ef9355" prot="public" virt="pure-virtual"><scope>arrow::csv::ColumnDecoder</scope><name>Append</name></member>
      <member refid="classarrow_1_1csv_1_1_column_decoder_1ad09feeec42423108624a0056ef0214d1" prot="protected" virt="non-virtual"><scope>arrow::csv::ColumnDecoder</scope><name>ColumnDecoder</name></member>
      <member refid="classarrow_1_1csv_1_1_column_decoder_1a3054ef2ac4c2e8a1a6f74f7d764d4d22" prot="public" virt="pure-virtual"><scope>arrow::csv::ColumnDecoder</scope><name>Insert</name></member>
      <member refid="classarrow_1_1csv_1_1_column_decoder_1ae4c10114da0fea4da81b034862c3ee62" prot="public" virt="non-virtual"><scope>arrow::csv::ColumnDecoder</scope><name>Make</name></member>
      <member refid="classarrow_1_1csv_1_1_column_decoder_1aa12048bebb80247110a849b5ec40df3c" prot="public" virt="non-virtual"><scope>arrow::csv::ColumnDecoder</scope><name>Make</name></member>
      <member refid="classarrow_1_1csv_1_1_column_decoder_1ad75972420dae33a2a6be47e3d31ed95d" prot="public" virt="non-virtual"><scope>arrow::csv::ColumnDecoder</scope><name>MakeNull</name></member>
      <member refid="classarrow_1_1csv_1_1_column_decoder_1ab0249ad3da4d87cc34e08f65c18baee1" prot="public" virt="pure-virtual"><scope>arrow::csv::ColumnDecoder</scope><name>NextChunk</name></member>
      <member refid="classarrow_1_1csv_1_1_column_decoder_1ac9854b4336bc79fa634cfab5e9448a52" prot="public" virt="pure-virtual"><scope>arrow::csv::ColumnDecoder</scope><name>SetEOF</name></member>
      <member refid="classarrow_1_1csv_1_1_column_decoder_1a339495b30affe49222468509a94a2afe" prot="public" virt="non-virtual"><scope>arrow::csv::ColumnDecoder</scope><name>task_group</name></member>
      <member refid="classarrow_1_1csv_1_1_column_decoder_1a364b6b9be7eff8758e0898ce446def91" prot="protected" virt="non-virtual"><scope>arrow::csv::ColumnDecoder</scope><name>task_group_</name></member>
      <member refid="classarrow_1_1csv_1_1_column_decoder_1a222a80dfddd43833465472651ed8b3ff" prot="public" virt="virtual"><scope>arrow::csv::ColumnDecoder</scope><name>~ColumnDecoder</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
