<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1flight_1_1_flight_server_base" kind="class" language="C++" prot="public">
    <compoundname>arrow::flight::FlightServerBase</compoundname>
    <derivedcompoundref refid="classarrow_1_1py_1_1flight_1_1_py_flight_server" prot="public" virt="non-virtual">arrow::py::flight::PyFlightServer</derivedcompoundref>
    <includes refid="server_8h" local="no">arrow/flight/server.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classarrow_1_1flight_1_1_flight_server_base_1a97a95079c95b26da3b075592c35b2c96" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; Impl &gt;</type>
        <definition>std::unique_ptr&lt;Impl&gt; arrow::flight::FlightServerBase::impl_</definition>
        <argsstring></argsstring>
        <name>impl_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/server.h" line="253" column="1" bodyfile="/arrow/cpp/src/arrow/flight/server.h" bodystart="252" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_server_base_1ac25d285cce14b3c4cf6834bfd86b8a96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::flight::FlightServerBase::FlightServerBase</definition>
        <argsstring>()</argsstring>
        <name>FlightServerBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/server.h" line="147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_server_base_1a4de9f5574db7ebc5ffdb9b5e4fb10873" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual arrow::flight::FlightServerBase::~FlightServerBase</definition>
        <argsstring>()</argsstring>
        <name>~FlightServerBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/server.h" line="148" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_server_base_1a06a8ce8cfc29ea5fc361873fe76764fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::flight::FlightServerBase::Init</definition>
        <argsstring>(const FlightServerOptions &amp;options)</argsstring>
        <name>Init</name>
        <param>
          <type>const <ref refid="classarrow_1_1flight_1_1_flight_server_options" kindref="compound">FlightServerOptions</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Initialize a Flight server listening at the given location. </para>        </briefdescription>
        <detaileddescription>
<para>This method must be called before any other method. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">options</parametername>
</parameternamelist>
<parameterdescription>
<para>The configuration for this server. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/server.h" line="155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_server_base_1ac9c3d43f50ae7905fa4723b843d8cd98" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int arrow::flight::FlightServerBase::port</definition>
        <argsstring>() const</argsstring>
        <name>port</name>
        <briefdescription>
<para>Get the port that the Flight server is listening on. </para>        </briefdescription>
        <detaileddescription>
<para>This method must only be called after <ref refid="classarrow_1_1flight_1_1_flight_server_base_1a06a8ce8cfc29ea5fc361873fe76764fa" kindref="member">Init()</ref>. Will return a non-positive value if no port exists (e.g. when listening on a domain socket). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/server.h" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_server_base_1ae02679a91fbfb8dac640df0569c0e32d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::flight::FlightServerBase::SetShutdownOnSignals</definition>
        <argsstring>(const std::vector&lt; int &gt; sigs)</argsstring>
        <name>SetShutdownOnSignals</name>
        <param>
          <type>const std::vector&lt; int &gt;</type>
          <declname>sigs</declname>
        </param>
        <briefdescription>
<para>Set the server to stop when receiving any of the given signal numbers. </para>        </briefdescription>
        <detaileddescription>
<para>This method must be called before <ref refid="classarrow_1_1flight_1_1_flight_server_base_1a7fa89e356d84b3bc61c78f509a16e202" kindref="member">Serve()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/server.h" line="166" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_server_base_1a7fa89e356d84b3bc61c78f509a16e202" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::flight::FlightServerBase::Serve</definition>
        <argsstring>()</argsstring>
        <name>Serve</name>
        <briefdescription>
<para>Start serving. </para>        </briefdescription>
        <detaileddescription>
<para>This method blocks until either <ref refid="classarrow_1_1flight_1_1_flight_server_base_1a9fa570580e87d5308dc38f929daa35fc" kindref="member">Shutdown()</ref> is called or one of the signals registered in <ref refid="classarrow_1_1flight_1_1_flight_server_base_1ae02679a91fbfb8dac640df0569c0e32d" kindref="member">SetShutdownOnSignals()</ref> is received. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/server.h" line="171" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_server_base_1a3005b9262b4a5a97d53d9fed8a469097" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int arrow::flight::FlightServerBase::GotSignal</definition>
        <argsstring>() const</argsstring>
        <name>GotSignal</name>
        <briefdescription>
<para>Query whether <ref refid="classarrow_1_1flight_1_1_flight_server_base_1a7fa89e356d84b3bc61c78f509a16e202" kindref="member">Serve()</ref> was interrupted by a signal. </para>        </briefdescription>
        <detaileddescription>
<para>This method must be called after <ref refid="classarrow_1_1flight_1_1_flight_server_base_1a7fa89e356d84b3bc61c78f509a16e202" kindref="member">Serve()</ref> has returned.</para><para><simplesect kind="return"><para>int the signal number that interrupted <ref refid="classarrow_1_1flight_1_1_flight_server_base_1a7fa89e356d84b3bc61c78f509a16e202" kindref="member">Serve()</ref>, if any, otherwise 0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/server.h" line="177" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_server_base_1a9fa570580e87d5308dc38f929daa35fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::flight::FlightServerBase::Shutdown</definition>
        <argsstring>()</argsstring>
        <name>Shutdown</name>
        <briefdescription>
<para>Shut down the server. </para>        </briefdescription>
        <detaileddescription>
<para>Can be called from signal handler or another thread while <ref refid="classarrow_1_1flight_1_1_flight_server_base_1a7fa89e356d84b3bc61c78f509a16e202" kindref="member">Serve()</ref> blocks.</para><para>TODO(wesm): Shutdown with deadline </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/server.h" line="183" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_server_base_1ad68a6e1600bf121f1fe2bc32459ad391" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::flight::FlightServerBase::Wait</definition>
        <argsstring>()</argsstring>
        <name>Wait</name>
        <briefdescription>
<para>Block until server is terminated with Shutdown. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/server.h" line="186" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_server_base_1aa9b655acfcfdaf6e2b911565827dd2b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>virtual Status arrow::flight::FlightServerBase::ListFlights</definition>
        <argsstring>(const ServerCallContext &amp;context, const Criteria *criteria, std::unique_ptr&lt; FlightListing &gt; *listings)</argsstring>
        <name>ListFlights</name>
        <reimplementedby refid="classarrow_1_1py_1_1flight_1_1_py_flight_server_1a1d2cfe7548b9a387256a5ef7b04c9972">ListFlights</reimplementedby>
        <param>
          <type>const <ref refid="classarrow_1_1flight_1_1_server_call_context" kindref="compound">ServerCallContext</ref> &amp;</type>
          <declname>context</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1flight_1_1_criteria" kindref="compound">Criteria</ref> *</type>
          <declname>criteria</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classarrow_1_1flight_1_1_flight_listing" kindref="compound">FlightListing</ref> &gt; *</type>
          <declname>listings</declname>
        </param>
        <briefdescription>
<para>Retrieve a list of available fields given an optional opaque criteria. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">context</parametername>
</parameternamelist>
<parameterdescription>
<para>The call context. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">criteria</parametername>
</parameternamelist>
<parameterdescription>
<para>may be null </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">listings</parametername>
</parameternamelist>
<parameterdescription>
<para>the returned listings iterator </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/server.h" line="197" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_server_base_1a225ae1502c6f9b09f650768e98280cf9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>virtual Status arrow::flight::FlightServerBase::GetFlightInfo</definition>
        <argsstring>(const ServerCallContext &amp;context, const FlightDescriptor &amp;request, std::unique_ptr&lt; FlightInfo &gt; *info)</argsstring>
        <name>GetFlightInfo</name>
        <reimplementedby refid="classarrow_1_1py_1_1flight_1_1_py_flight_server_1aa3850b3f2df8a3e8f32335119dc99c0c">GetFlightInfo</reimplementedby>
        <param>
          <type>const <ref refid="classarrow_1_1flight_1_1_server_call_context" kindref="compound">ServerCallContext</ref> &amp;</type>
          <declname>context</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1flight_1_1_flight_descriptor" kindref="compound">FlightDescriptor</ref> &amp;</type>
          <declname>request</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classarrow_1_1flight_1_1_flight_info" kindref="compound">FlightInfo</ref> &gt; *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Retrieve the schema and an access plan for the indicated descriptor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">context</parametername>
</parameternamelist>
<parameterdescription>
<para>The call context. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">request</parametername>
</parameternamelist>
<parameterdescription>
<para>may be null </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">info</parametername>
</parameternamelist>
<parameterdescription>
<para>the returned flight info provider </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/server.h" line="206" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_server_base_1a7b4107bd314af21cd1284d7c9c0c450a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>virtual Status arrow::flight::FlightServerBase::GetSchema</definition>
        <argsstring>(const ServerCallContext &amp;context, const FlightDescriptor &amp;request, std::unique_ptr&lt; SchemaResult &gt; *schema)</argsstring>
        <name>GetSchema</name>
        <reimplementedby refid="classarrow_1_1py_1_1flight_1_1_py_flight_server_1abbe05599f9b5a6639308a7e3af05d8a4">GetSchema</reimplementedby>
        <param>
          <type>const <ref refid="classarrow_1_1flight_1_1_server_call_context" kindref="compound">ServerCallContext</ref> &amp;</type>
          <declname>context</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1flight_1_1_flight_descriptor" kindref="compound">FlightDescriptor</ref> &amp;</type>
          <declname>request</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="structarrow_1_1flight_1_1_schema_result" kindref="compound">SchemaResult</ref> &gt; *</type>
          <declname>schema</declname>
        </param>
        <briefdescription>
<para>Retrieve the schema for the indicated descriptor. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">context</parametername>
</parameternamelist>
<parameterdescription>
<para>The call context. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">request</parametername>
</parameternamelist>
<parameterdescription>
<para>may be null </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">schema</parametername>
</parameternamelist>
<parameterdescription>
<para>the returned flight schema provider </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/server.h" line="215" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_server_base_1a6a28902c5eaad91cd3cab3c9a7b694f9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>virtual Status arrow::flight::FlightServerBase::DoGet</definition>
        <argsstring>(const ServerCallContext &amp;context, const Ticket &amp;request, std::unique_ptr&lt; FlightDataStream &gt; *stream)</argsstring>
        <name>DoGet</name>
        <reimplementedby refid="classarrow_1_1py_1_1flight_1_1_py_flight_server_1adf81d1b985e3f7a224239291a0a9a0c2">DoGet</reimplementedby>
        <param>
          <type>const <ref refid="classarrow_1_1flight_1_1_server_call_context" kindref="compound">ServerCallContext</ref> &amp;</type>
          <declname>context</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1flight_1_1_ticket" kindref="compound">Ticket</ref> &amp;</type>
          <declname>request</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classarrow_1_1flight_1_1_flight_data_stream" kindref="compound">FlightDataStream</ref> &gt; *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Get a stream of IPC payloads to put on the wire. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">context</parametername>
</parameternamelist>
<parameterdescription>
<para>The call context. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">request</parametername>
</parameternamelist>
<parameterdescription>
<para>an opaque ticket </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>the returned stream provider </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/server.h" line="224" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_server_base_1a3dd52ff2cf92b7bb1e7e5c449294bfd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>virtual Status arrow::flight::FlightServerBase::DoPut</definition>
        <argsstring>(const ServerCallContext &amp;context, std::unique_ptr&lt; FlightMessageReader &gt; reader, std::unique_ptr&lt; FlightMetadataWriter &gt; writer)</argsstring>
        <name>DoPut</name>
        <reimplementedby refid="classarrow_1_1py_1_1flight_1_1_py_flight_server_1a2a99b01e1beda44887b863ea13cbd0c7">DoPut</reimplementedby>
        <param>
          <type>const <ref refid="classarrow_1_1flight_1_1_server_call_context" kindref="compound">ServerCallContext</ref> &amp;</type>
          <declname>context</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classarrow_1_1flight_1_1_flight_message_reader" kindref="compound">FlightMessageReader</ref> &gt;</type>
          <declname>reader</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classarrow_1_1flight_1_1_flight_metadata_writer" kindref="compound">FlightMetadataWriter</ref> &gt;</type>
          <declname>writer</declname>
        </param>
        <briefdescription>
<para>Process a stream of IPC payloads sent from a client. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">context</parametername>
</parameternamelist>
<parameterdescription>
<para>The call context. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reader</parametername>
</parameternamelist>
<parameterdescription>
<para>a sequence of uploaded record batches </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">writer</parametername>
</parameternamelist>
<parameterdescription>
<para>send metadata back to the client </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/server.h" line="232" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_server_base_1af386bc5f425feb6d7953e6bb041d1a8b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>virtual Status arrow::flight::FlightServerBase::DoAction</definition>
        <argsstring>(const ServerCallContext &amp;context, const Action &amp;action, std::unique_ptr&lt; ResultStream &gt; *result)</argsstring>
        <name>DoAction</name>
        <reimplementedby refid="classarrow_1_1py_1_1flight_1_1_py_flight_server_1a632a9e22a2e895679a14e4c5d60cb50a">DoAction</reimplementedby>
        <param>
          <type>const <ref refid="classarrow_1_1flight_1_1_server_call_context" kindref="compound">ServerCallContext</ref> &amp;</type>
          <declname>context</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1flight_1_1_action" kindref="compound">Action</ref> &amp;</type>
          <declname>action</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classarrow_1_1flight_1_1_result_stream" kindref="compound">ResultStream</ref> &gt; *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Execute an action, return stream of zero or more results. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">context</parametername>
</parameternamelist>
<parameterdescription>
<para>The call context. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">action</parametername>
</parameternamelist>
<parameterdescription>
<para>the action to execute, with type and body </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">result</parametername>
</parameternamelist>
<parameterdescription>
<para>the result iterator </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/server.h" line="241" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_server_base_1a32e5270b934ee373b64cef4cee07bf97" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>virtual Status arrow::flight::FlightServerBase::ListActions</definition>
        <argsstring>(const ServerCallContext &amp;context, std::vector&lt; ActionType &gt; *actions)</argsstring>
        <name>ListActions</name>
        <reimplementedby refid="classarrow_1_1py_1_1flight_1_1_py_flight_server_1acb4e4acb88c0bb12e2b50a2bde0d1fca">ListActions</reimplementedby>
        <param>
          <type>const <ref refid="classarrow_1_1flight_1_1_server_call_context" kindref="compound">ServerCallContext</ref> &amp;</type>
          <declname>context</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structarrow_1_1flight_1_1_action_type" kindref="compound">ActionType</ref> &gt; *</type>
          <declname>actions</declname>
        </param>
        <briefdescription>
<para>Retrieve the list of available actions. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">context</parametername>
</parameternamelist>
<parameterdescription>
<para>The call context. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">actions</parametername>
</parameternamelist>
<parameterdescription>
<para>a vector of available action types </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/server.h" line="248" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Skeleton RPC server implementation which can be used to create custom servers by implementing its abstract methods. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1914">
        <label>arrow::flight::FlightServerBase</label>
        <link refid="classarrow_1_1flight_1_1_flight_server_base"/>
      </node>
      <node id="1915">
        <label>arrow::py::flight::PyFlightServer</label>
        <link refid="classarrow_1_1py_1_1flight_1_1_py_flight_server"/>
        <childnode refid="1914" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/arrow/cpp/src/arrow/flight/server.h" line="145" column="1" bodyfile="/arrow/cpp/src/arrow/flight/server.h" bodystart="145" bodyend="254"/>
    <listofallmembers>
      <member refid="classarrow_1_1flight_1_1_flight_server_base_1af386bc5f425feb6d7953e6bb041d1a8b" prot="public" virt="virtual"><scope>arrow::flight::FlightServerBase</scope><name>DoAction</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_server_base_1a6a28902c5eaad91cd3cab3c9a7b694f9" prot="public" virt="virtual"><scope>arrow::flight::FlightServerBase</scope><name>DoGet</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_server_base_1a3dd52ff2cf92b7bb1e7e5c449294bfd3" prot="public" virt="virtual"><scope>arrow::flight::FlightServerBase</scope><name>DoPut</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_server_base_1ac25d285cce14b3c4cf6834bfd86b8a96" prot="public" virt="non-virtual"><scope>arrow::flight::FlightServerBase</scope><name>FlightServerBase</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_server_base_1a225ae1502c6f9b09f650768e98280cf9" prot="public" virt="virtual"><scope>arrow::flight::FlightServerBase</scope><name>GetFlightInfo</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_server_base_1a7b4107bd314af21cd1284d7c9c0c450a" prot="public" virt="virtual"><scope>arrow::flight::FlightServerBase</scope><name>GetSchema</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_server_base_1a3005b9262b4a5a97d53d9fed8a469097" prot="public" virt="non-virtual"><scope>arrow::flight::FlightServerBase</scope><name>GotSignal</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_server_base_1a97a95079c95b26da3b075592c35b2c96" prot="private" virt="non-virtual"><scope>arrow::flight::FlightServerBase</scope><name>impl_</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_server_base_1a06a8ce8cfc29ea5fc361873fe76764fa" prot="public" virt="non-virtual"><scope>arrow::flight::FlightServerBase</scope><name>Init</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_server_base_1a32e5270b934ee373b64cef4cee07bf97" prot="public" virt="virtual"><scope>arrow::flight::FlightServerBase</scope><name>ListActions</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_server_base_1aa9b655acfcfdaf6e2b911565827dd2b9" prot="public" virt="virtual"><scope>arrow::flight::FlightServerBase</scope><name>ListFlights</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_server_base_1ac9c3d43f50ae7905fa4723b843d8cd98" prot="public" virt="non-virtual"><scope>arrow::flight::FlightServerBase</scope><name>port</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_server_base_1a7fa89e356d84b3bc61c78f509a16e202" prot="public" virt="non-virtual"><scope>arrow::flight::FlightServerBase</scope><name>Serve</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_server_base_1ae02679a91fbfb8dac640df0569c0e32d" prot="public" virt="non-virtual"><scope>arrow::flight::FlightServerBase</scope><name>SetShutdownOnSignals</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_server_base_1a9fa570580e87d5308dc38f929daa35fc" prot="public" virt="non-virtual"><scope>arrow::flight::FlightServerBase</scope><name>Shutdown</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_server_base_1ad68a6e1600bf121f1fe2bc32459ad391" prot="public" virt="non-virtual"><scope>arrow::flight::FlightServerBase</scope><name>Wait</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_server_base_1a4de9f5574db7ebc5ffdb9b5e4fb10873" prot="public" virt="virtual"><scope>arrow::flight::FlightServerBase</scope><name>~FlightServerBase</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
