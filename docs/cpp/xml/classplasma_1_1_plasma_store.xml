<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classplasma_1_1_plasma_store" kind="class" language="C++" prot="public">
    <compoundname>plasma::PlasmaStore</compoundname>
    <includes refid="store_8h" local="no">plasma/store.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classplasma_1_1_plasma_store_1a6ee0dac1e2a98dd99b13a2f5643ae79d" prot="public" static="no">
        <type>std::unordered_map&lt; int, <ref refid="structplasma_1_1_notification_queue" kindref="compound">NotificationQueue</ref> &gt;</type>
        <definition>using plasma::PlasmaStore::NotificationMap =  std::unordered_map&lt;int, NotificationQueue&gt;</definition>
        <argsstring></argsstring>
        <name>NotificationMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/store.h" line="58" column="1" bodyfile="/arrow/cpp/src/plasma/store.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classplasma_1_1_plasma_store_1afd7168c4d387a7114b69c71be7732ae4" prot="private" static="no" mutable="no">
        <type><ref refid="classplasma_1_1_event_loop" kindref="compound">EventLoop</ref> *</type>
        <definition>EventLoop* plasma::PlasmaStore::loop_</definition>
        <argsstring></argsstring>
        <name>loop_</name>
        <briefdescription>
<para>Event loop of the plasma store. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/store.h" line="216" column="1" bodyfile="/arrow/cpp/src/plasma/store.h" bodystart="216" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classplasma_1_1_plasma_store_1a533b9bc54d59415e151e2c4e42c74ccc" prot="private" static="no" mutable="no">
        <type><ref refid="structplasma_1_1_plasma_store_info" kindref="compound">PlasmaStoreInfo</ref></type>
        <definition>PlasmaStoreInfo plasma::PlasmaStore::store_info_</definition>
        <argsstring></argsstring>
        <name>store_info_</name>
        <briefdescription>
<para>The plasma store information, including the object tables, that is exposed to the eviction policy. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/store.h" line="219" column="1" bodyfile="/arrow/cpp/src/plasma/store.h" bodystart="219" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classplasma_1_1_plasma_store_1acd2ddb8b3225982621377e587b9b8f67" prot="private" static="no" mutable="no">
        <type><ref refid="classplasma_1_1_quota_aware_policy" kindref="compound">QuotaAwarePolicy</ref></type>
        <definition>QuotaAwarePolicy plasma::PlasmaStore::eviction_policy_</definition>
        <argsstring></argsstring>
        <name>eviction_policy_</name>
        <briefdescription>
<para>The state that is managed by the eviction policy. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/store.h" line="221" column="1" bodyfile="/arrow/cpp/src/plasma/store.h" bodystart="221" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classplasma_1_1_plasma_store_1acf07c6e24efda6e903614d2b63b66bef" prot="private" static="no" mutable="no">
        <type>std::vector&lt; uint8_t &gt;</type>
        <definition>std::vector&lt;uint8_t&gt; plasma::PlasmaStore::input_buffer_</definition>
        <argsstring></argsstring>
        <name>input_buffer_</name>
        <briefdescription>
<para>Input buffer. </para>        </briefdescription>
        <detaileddescription>
<para>This is allocated only once to avoid mallocs for every call to process_message. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/store.h" line="224" column="1" bodyfile="/arrow/cpp/src/plasma/store.h" bodystart="224" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classplasma_1_1_plasma_store_1adfd9577f0ce47336bfb2270795812777" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref>, std::vector&lt; GetRequest * &gt; &gt;</type>
        <definition>std::unordered_map&lt;ObjectID, std::vector&lt;GetRequest*&gt; &gt; plasma::PlasmaStore::object_get_requests_</definition>
        <argsstring></argsstring>
        <name>object_get_requests_</name>
        <briefdescription>
<para>A hash table mapping object IDs to a vector of the get requests that are waiting for the object to arrive. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/store.h" line="227" column="1" bodyfile="/arrow/cpp/src/plasma/store.h" bodystart="227" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classplasma_1_1_plasma_store_1af857ae939d67bfdfdc162a119159f1e9" prot="private" static="no" mutable="no">
        <type><ref refid="classplasma_1_1_plasma_store_1a6ee0dac1e2a98dd99b13a2f5643ae79d" kindref="member">NotificationMap</ref></type>
        <definition>NotificationMap plasma::PlasmaStore::pending_notifications_</definition>
        <argsstring></argsstring>
        <name>pending_notifications_</name>
        <briefdescription>
<para>The pending notifications that have not been sent to subscribers because the socket send buffers were full. </para>        </briefdescription>
        <detaileddescription>
<para>This is a hash table from client file descriptor to an array of object_ids to send to that client. TODO(pcm): Consider putting this into the <ref refid="structplasma_1_1_client" kindref="compound">Client</ref> data structure and reorganize the code slightly. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/store.h" line="233" column="1" bodyfile="/arrow/cpp/src/plasma/store.h" bodystart="233" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classplasma_1_1_plasma_store_1ad8b88564f0dd766976a1fce140ae18bc" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; int, std::unique_ptr&lt; <ref refid="structplasma_1_1_client" kindref="compound">Client</ref> &gt; &gt;</type>
        <definition>std::unordered_map&lt;int, std::unique_ptr&lt;Client&gt; &gt; plasma::PlasmaStore::connected_clients_</definition>
        <argsstring></argsstring>
        <name>connected_clients_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/store.h" line="235" column="1" bodyfile="/arrow/cpp/src/plasma/store.h" bodystart="235" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classplasma_1_1_plasma_store_1a8caad66bf05fa7b8972bb65d563694b9" prot="private" static="no" mutable="no">
        <type>std::unordered_set&lt; <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &gt;</type>
        <definition>std::unordered_set&lt;ObjectID&gt; plasma::PlasmaStore::deletion_cache_</definition>
        <argsstring></argsstring>
        <name>deletion_cache_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/store.h" line="237" column="1" bodyfile="/arrow/cpp/src/plasma/store.h" bodystart="237" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classplasma_1_1_plasma_store_1a0b67ee7a55db3f8526a3486abfc5cb63" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classplasma_1_1_external_store" kindref="compound">ExternalStore</ref> &gt;</type>
        <definition>std::shared_ptr&lt;ExternalStore&gt; plasma::PlasmaStore::external_store_</definition>
        <argsstring></argsstring>
        <name>external_store_</name>
        <briefdescription>
<para>Manages worker threads for handling asynchronous/multi-threaded requests for reading/writing data to/from external store. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/store.h" line="241" column="1" bodyfile="/arrow/cpp/src/plasma/store.h" bodystart="241" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classplasma_1_1_plasma_store_1a32ca9ac29ec104cfadc22faa475adb2d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>plasma::PlasmaStore::PlasmaStore</definition>
        <argsstring>(EventLoop *loop, std::string directory, bool hugepages_enabled, const std::string &amp;socket_name, std::shared_ptr&lt; ExternalStore &gt; external_store)</argsstring>
        <name>PlasmaStore</name>
        <param>
          <type><ref refid="classplasma_1_1_event_loop" kindref="compound">EventLoop</ref> *</type>
          <declname>loop</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>directory</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>hugepages_enabled</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>socket_name</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classplasma_1_1_external_store" kindref="compound">ExternalStore</ref> &gt;</type>
          <declname>external_store</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/store.h" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_store_1ae7d6e71db4bcf20c3fac9cfa8aca8539" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>plasma::PlasmaStore::~PlasmaStore</definition>
        <argsstring>()</argsstring>
        <name>~PlasmaStore</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/store.h" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_store_1a28f533e52e95a0c92350bc483cfa472f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structplasma_1_1_plasma_store_info" kindref="compound">PlasmaStoreInfo</ref> *</type>
        <definition>const PlasmaStoreInfo* plasma::PlasmaStore::GetPlasmaStoreInfo</definition>
        <argsstring>()</argsstring>
        <name>GetPlasmaStoreInfo</name>
        <briefdescription>
<para>Get a const pointer to the internal <ref refid="structplasma_1_1_plasma_store_info" kindref="compound">PlasmaStoreInfo</ref> object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/store.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_store_1ac2fdfd44f9e2c4a5d3c5f54581183565" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PlasmaError</type>
        <definition>PlasmaError plasma::PlasmaStore::CreateObject</definition>
        <argsstring>(const ObjectID &amp;object_id, bool evict_if_full, int64_t data_size, int64_t metadata_size, int device_num, Client *client, PlasmaObject *result)</argsstring>
        <name>CreateObject</name>
        <param>
          <type>const <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &amp;</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>evict_if_full</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>data_size</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>metadata_size</declname>
        </param>
        <param>
          <type>int</type>
          <declname>device_num</declname>
        </param>
        <param>
          <type><ref refid="structplasma_1_1_client" kindref="compound">Client</ref> *</type>
          <declname>client</declname>
        </param>
        <param>
          <type><ref refid="structplasma_1_1_plasma_object" kindref="compound">PlasmaObject</ref> *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Create a new object. </para>        </briefdescription>
        <detaileddescription>
<para>The client must do a call to release_object to tell the store when it is done with the object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Object ID of the object to be created. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>evict_if_full</parametername>
</parameternamelist>
<parameterdescription>
<para>If this is true, then when the object store is full, try to evict objects that are not currently referenced before creating the object. Else, do not evict any objects and immediately return an PlasmaError::OutOfMemory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size in bytes of the object to be created. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>metadata_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Size in bytes of the object metadata. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>device_num</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of the device where the object is being created. device_num = 0 corresponds to the host, device_num = 1 corresponds to GPU0, device_num = 2 corresponds to GPU1, etc. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>client</parametername>
</parameternamelist>
<parameterdescription>
<para>The client that created the object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>result</parametername>
</parameternamelist>
<parameterdescription>
<para>The object that has been created. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>One of the following error codes:<itemizedlist>
<listitem><para>PlasmaError::OK, if the object was created successfully.</para></listitem><listitem><para>PlasmaError::ObjectExists, if an object with this ID is already present in the store. In this case, the client should not call plasma_release.</para></listitem><listitem><para>PlasmaError::OutOfMemory, if the store is out of memory and cannot create the object. In this case, the client should not call plasma_release. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/store.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_store_1a5ad67f706c877dbf734f4a0716c90411" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int plasma::PlasmaStore::AbortObject</definition>
        <argsstring>(const ObjectID &amp;object_id, Client *client)</argsstring>
        <name>AbortObject</name>
        <param>
          <type>const <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &amp;</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type><ref refid="structplasma_1_1_client" kindref="compound">Client</ref> *</type>
          <declname>client</declname>
        </param>
        <briefdescription>
<para>Abort a created but unsealed object. </para>        </briefdescription>
        <detaileddescription>
<para>If the client is not the creator, then the abort will fail.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Object ID of the object to be aborted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>client</parametername>
</parameternamelist>
<parameterdescription>
<para>The client who created the object. If this does not match the creator of the object, then the abort will fail. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>1 if the abort succeeds, else 0. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/store.h" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_store_1a95d49aeae790f8e2be380fc2a2692b68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PlasmaError</type>
        <definition>PlasmaError plasma::PlasmaStore::DeleteObject</definition>
        <argsstring>(ObjectID &amp;object_id)</argsstring>
        <name>DeleteObject</name>
        <param>
          <type><ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &amp;</type>
          <declname>object_id</declname>
        </param>
        <briefdescription>
<para>Delete a specific object by object_id that have been created in the hash table. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Object ID of the object to be deleted. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>One of the following error codes:<itemizedlist>
<listitem><para>PlasmaError::OK, if the object was delete successfully.</para></listitem><listitem><para>PlasmaError::ObjectNotFound, if ths object isn&apos;t existed.</para></listitem><listitem><para>PlasmaError::ObjectInUse, if the object is in use. </para></listitem></itemizedlist>
</para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/store.h" line="115" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_store_1a085c8ecfe10a2a5cfcebd169220e8f09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void plasma::PlasmaStore::EvictObjects</definition>
        <argsstring>(const std::vector&lt; ObjectID &gt; &amp;object_ids)</argsstring>
        <name>EvictObjects</name>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &gt; &amp;</type>
          <declname>object_ids</declname>
        </param>
        <briefdescription>
<para>Evict objects returned by the eviction policy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>Object IDs of the objects to be evicted. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/store.h" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_store_1a7270b3211313d526f8ae66ac8a1bbdc5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void plasma::PlasmaStore::ProcessGetRequest</definition>
        <argsstring>(Client *client, const std::vector&lt; ObjectID &gt; &amp;object_ids, int64_t timeout_ms)</argsstring>
        <name>ProcessGetRequest</name>
        <param>
          <type><ref refid="structplasma_1_1_client" kindref="compound">Client</ref> *</type>
          <declname>client</declname>
        </param>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &gt; &amp;</type>
          <declname>object_ids</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>timeout_ms</declname>
        </param>
        <briefdescription>
<para>Process a get request from a client. </para>        </briefdescription>
        <detaileddescription>
<para>This method assumes that we will eventually have these objects sealed. If one of the objects has not yet been sealed, the client that requested the object will be notified when it is sealed.</para><para>For each object, the client must do a call to release_object to tell the store when it is done with the object.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>client</parametername>
</parameternamelist>
<parameterdescription>
<para>The client making this request. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>object_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>Object IDs of the objects to be gotten. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>timeout_ms</parametername>
</parameternamelist>
<parameterdescription>
<para>The timeout for the get request in milliseconds. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/store.h" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_store_1ae047aadb342b80a30bf0d41ae418a143" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void plasma::PlasmaStore::SealObjects</definition>
        <argsstring>(const std::vector&lt; ObjectID &gt; &amp;object_ids, const std::vector&lt; std::string &gt; &amp;digests)</argsstring>
        <name>SealObjects</name>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &gt; &amp;</type>
          <declname>object_ids</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>digests</declname>
        </param>
        <briefdescription>
<para>Seal a vector of objects. </para>        </briefdescription>
        <detaileddescription>
<para>The objects are now immutable and can be accessed with get.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object_ids</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector of Object IDs of the objects to be sealed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>digests</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector of digests of the objects. This is used to tell if two objects with the same object ID are the same. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/store.h" line="142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_store_1a43bc6d90600441de294c106265295dde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceplasma_1a730a54bdeef458d4c0e17ba9b349e884" kindref="member">ObjectStatus</ref></type>
        <definition>ObjectStatus plasma::PlasmaStore::ContainsObject</definition>
        <argsstring>(const ObjectID &amp;object_id)</argsstring>
        <name>ContainsObject</name>
        <param>
          <type>const <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &amp;</type>
          <declname>object_id</declname>
        </param>
        <briefdescription>
<para>Check if the plasma store contains an object: </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>Object ID that will be checked. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>OBJECT_FOUND if the object is in the store, OBJECT_NOT_FOUND if not </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/store.h" line="150" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_store_1a4532bd7154cfc9c713967f56c24a1565" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void plasma::PlasmaStore::ReleaseObject</definition>
        <argsstring>(const ObjectID &amp;object_id, Client *client)</argsstring>
        <name>ReleaseObject</name>
        <param>
          <type>const <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &amp;</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type><ref refid="structplasma_1_1_client" kindref="compound">Client</ref> *</type>
          <declname>client</declname>
        </param>
        <briefdescription>
<para>Record the fact that a particular client is no longer using an object. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The object ID of the object that is being released. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>client</parametername>
</parameternamelist>
<parameterdescription>
<para>The client making this request. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/store.h" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_store_1a86b9b3ac62c4195abc13b00781d2ff88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void plasma::PlasmaStore::SubscribeToUpdates</definition>
        <argsstring>(Client *client)</argsstring>
        <name>SubscribeToUpdates</name>
        <param>
          <type><ref refid="structplasma_1_1_client" kindref="compound">Client</ref> *</type>
          <declname>client</declname>
        </param>
        <briefdescription>
<para>Subscribe a file descriptor to updates about new sealed objects. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>client</parametername>
</parameternamelist>
<parameterdescription>
<para>The client making this request. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/store.h" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_store_1a98e9dace06923fb1a35d36d9bc19e065" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void plasma::PlasmaStore::ConnectClient</definition>
        <argsstring>(int listener_sock)</argsstring>
        <name>ConnectClient</name>
        <param>
          <type>int</type>
          <declname>listener_sock</declname>
        </param>
        <briefdescription>
<para>Connect a new client to the <ref refid="classplasma_1_1_plasma_store" kindref="compound">PlasmaStore</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>listener_sock</parametername>
</parameternamelist>
<parameterdescription>
<para>The socket that is listening to incoming connections. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/store.h" line="166" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_store_1ab3f89fd88a34166aa29c70dd62f35911" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void plasma::PlasmaStore::DisconnectClient</definition>
        <argsstring>(int client_fd)</argsstring>
        <name>DisconnectClient</name>
        <param>
          <type>int</type>
          <declname>client_fd</declname>
        </param>
        <briefdescription>
<para>Disconnect a client from the <ref refid="classplasma_1_1_plasma_store" kindref="compound">PlasmaStore</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>client_fd</parametername>
</parameternamelist>
<parameterdescription>
<para>The client file descriptor that is disconnected. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/store.h" line="171" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_store_1a5ad7038beca665390b471ea5667c25ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>NotificationMap::iterator</type>
        <definition>NotificationMap::iterator plasma::PlasmaStore::SendNotifications</definition>
        <argsstring>(NotificationMap::iterator it)</argsstring>
        <name>SendNotifications</name>
        <param>
          <type>NotificationMap::iterator</type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/store.h" line="173" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_store_1af35737c509f371ea7178a34b1c3d9533" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>arrow::Status plasma::PlasmaStore::ProcessMessage</definition>
        <argsstring>(Client *client)</argsstring>
        <name>ProcessMessage</name>
        <param>
          <type><ref refid="structplasma_1_1_client" kindref="compound">Client</ref> *</type>
          <declname>client</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/store.h" line="175" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classplasma_1_1_plasma_store_1a677434d7dfc5dec09836c7638f6420f9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void plasma::PlasmaStore::PushNotification</definition>
        <argsstring>(ObjectInfoT *object_notification)</argsstring>
        <name>PushNotification</name>
        <param>
          <type>ObjectInfoT *</type>
          <declname>object_notification</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/store.h" line="178" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_store_1a3fcff4257c4cd62dedcbac4b1f1b9d89" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void plasma::PlasmaStore::PushNotifications</definition>
        <argsstring>(std::vector&lt; ObjectInfoT &gt; &amp;object_notifications)</argsstring>
        <name>PushNotifications</name>
        <param>
          <type>std::vector&lt; ObjectInfoT &gt; &amp;</type>
          <declname>object_notifications</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/store.h" line="180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_store_1a98f1d942bc9c1346b9028df0482e914e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void plasma::PlasmaStore::PushNotification</definition>
        <argsstring>(ObjectInfoT *object_notification, int client_fd)</argsstring>
        <name>PushNotification</name>
        <param>
          <type>ObjectInfoT *</type>
          <declname>object_notification</declname>
        </param>
        <param>
          <type>int</type>
          <declname>client_fd</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/store.h" line="182" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_store_1ab3f4fc13f9a8528ee7c844d528185425" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void plasma::PlasmaStore::AddToClientObjectIds</definition>
        <argsstring>(const ObjectID &amp;object_id, ObjectTableEntry *entry, Client *client)</argsstring>
        <name>AddToClientObjectIds</name>
        <param>
          <type>const <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &amp;</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type><ref refid="structplasma_1_1_object_table_entry" kindref="compound">ObjectTableEntry</ref> *</type>
          <declname>entry</declname>
        </param>
        <param>
          <type><ref refid="structplasma_1_1_client" kindref="compound">Client</ref> *</type>
          <declname>client</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/store.h" line="184" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_store_1af0b0aa343c0b6299b1ce615adf8572da" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void plasma::PlasmaStore::RemoveGetRequest</definition>
        <argsstring>(GetRequest *get_request)</argsstring>
        <name>RemoveGetRequest</name>
        <param>
          <type>GetRequest *</type>
          <declname>get_request</declname>
        </param>
        <briefdescription>
<para>Remove a GetRequest and clean up the relevant data structures. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>get_request</parametername>
</parameternamelist>
<parameterdescription>
<para>The GetRequest to remove. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/store.h" line="190" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_store_1aeaa33aa496e7006417fb17f971c77c2d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void plasma::PlasmaStore::RemoveGetRequestsForClient</definition>
        <argsstring>(Client *client)</argsstring>
        <name>RemoveGetRequestsForClient</name>
        <param>
          <type><ref refid="structplasma_1_1_client" kindref="compound">Client</ref> *</type>
          <declname>client</declname>
        </param>
        <briefdescription>
<para>Remove all of the GetRequests for a given client. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>client</parametername>
</parameternamelist>
<parameterdescription>
<para>The client whose GetRequests should be removed. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/store.h" line="195" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_store_1a336d8791f45268928cd764dae4abdc21" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void plasma::PlasmaStore::ReturnFromGet</definition>
        <argsstring>(GetRequest *get_req)</argsstring>
        <name>ReturnFromGet</name>
        <param>
          <type>GetRequest *</type>
          <declname>get_req</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/store.h" line="197" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_store_1ad16ea4ecf1f70d9df6eb5abff2838f57" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void plasma::PlasmaStore::UpdateObjectGetRequests</definition>
        <argsstring>(const ObjectID &amp;object_id)</argsstring>
        <name>UpdateObjectGetRequests</name>
        <param>
          <type>const <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &amp;</type>
          <declname>object_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/store.h" line="199" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_store_1a5d60ba8181c6faf5146d6cc3f3e8e667" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int plasma::PlasmaStore::RemoveFromClientObjectIds</definition>
        <argsstring>(const ObjectID &amp;object_id, ObjectTableEntry *entry, Client *client)</argsstring>
        <name>RemoveFromClientObjectIds</name>
        <param>
          <type>const <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &amp;</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type><ref refid="structplasma_1_1_object_table_entry" kindref="compound">ObjectTableEntry</ref> *</type>
          <declname>entry</declname>
        </param>
        <param>
          <type><ref refid="structplasma_1_1_client" kindref="compound">Client</ref> *</type>
          <declname>client</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/store.h" line="201" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_store_1ad0baa24cc4d026c4799c22da869f3e87" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void plasma::PlasmaStore::EraseFromObjectTable</definition>
        <argsstring>(const ObjectID &amp;object_id)</argsstring>
        <name>EraseFromObjectTable</name>
        <param>
          <type>const <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &amp;</type>
          <declname>object_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/store.h" line="204" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_store_1a8dda7cc89f89c9944ee7ffee02c61b96" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t *</type>
        <definition>uint8_t* plasma::PlasmaStore::AllocateMemory</definition>
        <argsstring>(size_t size, bool evict_if_full, int *fd, int64_t *map_size, ptrdiff_t *offset, Client *client, bool is_create)</argsstring>
        <name>AllocateMemory</name>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>evict_if_full</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>fd</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>map_size</declname>
        </param>
        <param>
          <type>ptrdiff_t *</type>
          <declname>offset</declname>
        </param>
        <param>
          <type><ref refid="structplasma_1_1_client" kindref="compound">Client</ref> *</type>
          <declname>client</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_create</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/store.h" line="206" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/plasma/store.h" line="56" column="1" bodyfile="/arrow/cpp/src/plasma/store.h" bodystart="56" bodyend="245"/>
    <listofallmembers>
      <member refid="classplasma_1_1_plasma_store_1a5ad67f706c877dbf734f4a0716c90411" prot="public" virt="non-virtual"><scope>plasma::PlasmaStore</scope><name>AbortObject</name></member>
      <member refid="classplasma_1_1_plasma_store_1ab3f4fc13f9a8528ee7c844d528185425" prot="private" virt="non-virtual"><scope>plasma::PlasmaStore</scope><name>AddToClientObjectIds</name></member>
      <member refid="classplasma_1_1_plasma_store_1a8dda7cc89f89c9944ee7ffee02c61b96" prot="private" virt="non-virtual"><scope>plasma::PlasmaStore</scope><name>AllocateMemory</name></member>
      <member refid="classplasma_1_1_plasma_store_1a98e9dace06923fb1a35d36d9bc19e065" prot="public" virt="non-virtual"><scope>plasma::PlasmaStore</scope><name>ConnectClient</name></member>
      <member refid="classplasma_1_1_plasma_store_1ad8b88564f0dd766976a1fce140ae18bc" prot="private" virt="non-virtual"><scope>plasma::PlasmaStore</scope><name>connected_clients_</name></member>
      <member refid="classplasma_1_1_plasma_store_1a43bc6d90600441de294c106265295dde" prot="public" virt="non-virtual"><scope>plasma::PlasmaStore</scope><name>ContainsObject</name></member>
      <member refid="classplasma_1_1_plasma_store_1ac2fdfd44f9e2c4a5d3c5f54581183565" prot="public" virt="non-virtual"><scope>plasma::PlasmaStore</scope><name>CreateObject</name></member>
      <member refid="classplasma_1_1_plasma_store_1a95d49aeae790f8e2be380fc2a2692b68" prot="public" virt="non-virtual"><scope>plasma::PlasmaStore</scope><name>DeleteObject</name></member>
      <member refid="classplasma_1_1_plasma_store_1a8caad66bf05fa7b8972bb65d563694b9" prot="private" virt="non-virtual"><scope>plasma::PlasmaStore</scope><name>deletion_cache_</name></member>
      <member refid="classplasma_1_1_plasma_store_1ab3f89fd88a34166aa29c70dd62f35911" prot="public" virt="non-virtual"><scope>plasma::PlasmaStore</scope><name>DisconnectClient</name></member>
      <member refid="classplasma_1_1_plasma_store_1ad0baa24cc4d026c4799c22da869f3e87" prot="private" virt="non-virtual"><scope>plasma::PlasmaStore</scope><name>EraseFromObjectTable</name></member>
      <member refid="classplasma_1_1_plasma_store_1acd2ddb8b3225982621377e587b9b8f67" prot="private" virt="non-virtual"><scope>plasma::PlasmaStore</scope><name>eviction_policy_</name></member>
      <member refid="classplasma_1_1_plasma_store_1a085c8ecfe10a2a5cfcebd169220e8f09" prot="public" virt="non-virtual"><scope>plasma::PlasmaStore</scope><name>EvictObjects</name></member>
      <member refid="classplasma_1_1_plasma_store_1a0b67ee7a55db3f8526a3486abfc5cb63" prot="private" virt="non-virtual"><scope>plasma::PlasmaStore</scope><name>external_store_</name></member>
      <member refid="classplasma_1_1_plasma_store_1a28f533e52e95a0c92350bc483cfa472f" prot="public" virt="non-virtual"><scope>plasma::PlasmaStore</scope><name>GetPlasmaStoreInfo</name></member>
      <member refid="classplasma_1_1_plasma_store_1acf07c6e24efda6e903614d2b63b66bef" prot="private" virt="non-virtual"><scope>plasma::PlasmaStore</scope><name>input_buffer_</name></member>
      <member refid="classplasma_1_1_plasma_store_1afd7168c4d387a7114b69c71be7732ae4" prot="private" virt="non-virtual"><scope>plasma::PlasmaStore</scope><name>loop_</name></member>
      <member refid="classplasma_1_1_plasma_store_1a6ee0dac1e2a98dd99b13a2f5643ae79d" prot="public" virt="non-virtual"><scope>plasma::PlasmaStore</scope><name>NotificationMap</name></member>
      <member refid="classplasma_1_1_plasma_store_1adfd9577f0ce47336bfb2270795812777" prot="private" virt="non-virtual"><scope>plasma::PlasmaStore</scope><name>object_get_requests_</name></member>
      <member refid="classplasma_1_1_plasma_store_1af857ae939d67bfdfdc162a119159f1e9" prot="private" virt="non-virtual"><scope>plasma::PlasmaStore</scope><name>pending_notifications_</name></member>
      <member refid="classplasma_1_1_plasma_store_1a32ca9ac29ec104cfadc22faa475adb2d" prot="public" virt="non-virtual"><scope>plasma::PlasmaStore</scope><name>PlasmaStore</name></member>
      <member refid="classplasma_1_1_plasma_store_1a7270b3211313d526f8ae66ac8a1bbdc5" prot="public" virt="non-virtual"><scope>plasma::PlasmaStore</scope><name>ProcessGetRequest</name></member>
      <member refid="classplasma_1_1_plasma_store_1af35737c509f371ea7178a34b1c3d9533" prot="public" virt="non-virtual"><scope>plasma::PlasmaStore</scope><name>ProcessMessage</name></member>
      <member refid="classplasma_1_1_plasma_store_1a677434d7dfc5dec09836c7638f6420f9" prot="private" virt="non-virtual"><scope>plasma::PlasmaStore</scope><name>PushNotification</name></member>
      <member refid="classplasma_1_1_plasma_store_1a98f1d942bc9c1346b9028df0482e914e" prot="private" virt="non-virtual"><scope>plasma::PlasmaStore</scope><name>PushNotification</name></member>
      <member refid="classplasma_1_1_plasma_store_1a3fcff4257c4cd62dedcbac4b1f1b9d89" prot="private" virt="non-virtual"><scope>plasma::PlasmaStore</scope><name>PushNotifications</name></member>
      <member refid="classplasma_1_1_plasma_store_1a4532bd7154cfc9c713967f56c24a1565" prot="public" virt="non-virtual"><scope>plasma::PlasmaStore</scope><name>ReleaseObject</name></member>
      <member refid="classplasma_1_1_plasma_store_1a5d60ba8181c6faf5146d6cc3f3e8e667" prot="private" virt="non-virtual"><scope>plasma::PlasmaStore</scope><name>RemoveFromClientObjectIds</name></member>
      <member refid="classplasma_1_1_plasma_store_1af0b0aa343c0b6299b1ce615adf8572da" prot="private" virt="non-virtual"><scope>plasma::PlasmaStore</scope><name>RemoveGetRequest</name></member>
      <member refid="classplasma_1_1_plasma_store_1aeaa33aa496e7006417fb17f971c77c2d" prot="private" virt="non-virtual"><scope>plasma::PlasmaStore</scope><name>RemoveGetRequestsForClient</name></member>
      <member refid="classplasma_1_1_plasma_store_1a336d8791f45268928cd764dae4abdc21" prot="private" virt="non-virtual"><scope>plasma::PlasmaStore</scope><name>ReturnFromGet</name></member>
      <member refid="classplasma_1_1_plasma_store_1ae047aadb342b80a30bf0d41ae418a143" prot="public" virt="non-virtual"><scope>plasma::PlasmaStore</scope><name>SealObjects</name></member>
      <member refid="classplasma_1_1_plasma_store_1a5ad7038beca665390b471ea5667c25ea" prot="public" virt="non-virtual"><scope>plasma::PlasmaStore</scope><name>SendNotifications</name></member>
      <member refid="classplasma_1_1_plasma_store_1a533b9bc54d59415e151e2c4e42c74ccc" prot="private" virt="non-virtual"><scope>plasma::PlasmaStore</scope><name>store_info_</name></member>
      <member refid="classplasma_1_1_plasma_store_1a86b9b3ac62c4195abc13b00781d2ff88" prot="public" virt="non-virtual"><scope>plasma::PlasmaStore</scope><name>SubscribeToUpdates</name></member>
      <member refid="classplasma_1_1_plasma_store_1ad16ea4ecf1f70d9df6eb5abff2838f57" prot="private" virt="non-virtual"><scope>plasma::PlasmaStore</scope><name>UpdateObjectGetRequests</name></member>
      <member refid="classplasma_1_1_plasma_store_1ae7d6e71db4bcf20c3fac9cfa8aca8539" prot="public" virt="non-virtual"><scope>plasma::PlasmaStore</scope><name>~PlasmaStore</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
