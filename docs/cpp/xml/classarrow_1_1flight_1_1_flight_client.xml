<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1flight_1_1_flight_client" kind="class" language="C++" prot="public">
    <compoundname>arrow::flight::FlightClient</compoundname>
    <includes refid="arrow_2flight_2client_8h" local="no">arrow/flight/client.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classarrow_1_1flight_1_1_flight_client_1a5c83e6b7b3dc3837abc01df2cac8375a" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; FlightClientImpl &gt;</type>
        <definition>std::unique_ptr&lt;FlightClientImpl&gt; arrow::flight::FlightClient::impl_</definition>
        <argsstring></argsstring>
        <name>impl_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/client.h" line="247" column="1" bodyfile="/arrow/cpp/src/arrow/flight/client.h" bodystart="246" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_client_1a2ee1179f9241b2978831ad4e50c4bd3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::flight::FlightClient::~FlightClient</definition>
        <argsstring>()</argsstring>
        <name>~FlightClient</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/client.h" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_client_1aed24e3c298ae6669e7cade15aafd6eeb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::flight::FlightClient::Authenticate</definition>
        <argsstring>(const FlightCallOptions &amp;options, std::unique_ptr&lt; ClientAuthHandler &gt; auth_handler)</argsstring>
        <name>Authenticate</name>
        <param>
          <type>const <ref refid="classarrow_1_1flight_1_1_flight_call_options" kindref="compound">FlightCallOptions</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classarrow_1_1flight_1_1_client_auth_handler" kindref="compound">ClientAuthHandler</ref> &gt;</type>
          <declname>auth_handler</declname>
        </param>
        <briefdescription>
<para>Authenticate to the server using the given handler. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">options</parametername>
</parameternamelist>
<parameterdescription>
<para>Per-RPC options </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">auth_handler</parametername>
</parameternamelist>
<parameterdescription>
<para>The authentication mechanism to use </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> OK if the client authenticated successfully </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/client.h" line="142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_client_1a390e35877659b6e975656dfeeb063caf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::flight::FlightClient::DoAction</definition>
        <argsstring>(const FlightCallOptions &amp;options, const Action &amp;action, std::unique_ptr&lt; ResultStream &gt; *results)</argsstring>
        <name>DoAction</name>
        <param>
          <type>const <ref refid="classarrow_1_1flight_1_1_flight_call_options" kindref="compound">FlightCallOptions</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1flight_1_1_action" kindref="compound">Action</ref> &amp;</type>
          <declname>action</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classarrow_1_1flight_1_1_result_stream" kindref="compound">ResultStream</ref> &gt; *</type>
          <declname>results</declname>
        </param>
        <briefdescription>
<para>Perform the indicated action, returning an iterator to the stream of results, if any. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">options</parametername>
</parameternamelist>
<parameterdescription>
<para>Per-RPC options </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">action</parametername>
</parameternamelist>
<parameterdescription>
<para>the action to be performed </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">results</parametername>
</parameternamelist>
<parameterdescription>
<para>an iterator object for reading the returned results </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/client.h" line="151" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_client_1a0033871f8b5cbe1217adadf0571ae165" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::flight::FlightClient::DoAction</definition>
        <argsstring>(const Action &amp;action, std::unique_ptr&lt; ResultStream &gt; *results)</argsstring>
        <name>DoAction</name>
        <param>
          <type>const <ref refid="structarrow_1_1flight_1_1_action" kindref="compound">Action</ref> &amp;</type>
          <declname>action</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classarrow_1_1flight_1_1_result_stream" kindref="compound">ResultStream</ref> &gt; *</type>
          <declname>results</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/client.h" line="153" column="1" bodyfile="/arrow/cpp/src/arrow/flight/client.h" bodystart="153" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_client_1a3824825cbab04ade6d37f3b466335905" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::flight::FlightClient::ListActions</definition>
        <argsstring>(const FlightCallOptions &amp;options, std::vector&lt; ActionType &gt; *actions)</argsstring>
        <name>ListActions</name>
        <param>
          <type>const <ref refid="classarrow_1_1flight_1_1_flight_call_options" kindref="compound">FlightCallOptions</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structarrow_1_1flight_1_1_action_type" kindref="compound">ActionType</ref> &gt; *</type>
          <declname>actions</declname>
        </param>
        <briefdescription>
<para>Retrieve a list of available <ref refid="structarrow_1_1flight_1_1_action" kindref="compound">Action</ref> types. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">options</parametername>
</parameternamelist>
<parameterdescription>
<para>Per-RPC options </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">actions</parametername>
</parameternamelist>
<parameterdescription>
<para>the available actions </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/client.h" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_client_1a3a4da49c1a2e886ce1f6f5ef06b25ca6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::flight::FlightClient::ListActions</definition>
        <argsstring>(std::vector&lt; ActionType &gt; *actions)</argsstring>
        <name>ListActions</name>
        <param>
          <type>std::vector&lt; <ref refid="structarrow_1_1flight_1_1_action_type" kindref="compound">ActionType</ref> &gt; *</type>
          <declname>actions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/client.h" line="162" column="1" bodyfile="/arrow/cpp/src/arrow/flight/client.h" bodystart="162" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_client_1af95b8bb8081f7e83de6531e3cd3eded3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::flight::FlightClient::GetFlightInfo</definition>
        <argsstring>(const FlightCallOptions &amp;options, const FlightDescriptor &amp;descriptor, std::unique_ptr&lt; FlightInfo &gt; *info)</argsstring>
        <name>GetFlightInfo</name>
        <param>
          <type>const <ref refid="classarrow_1_1flight_1_1_flight_call_options" kindref="compound">FlightCallOptions</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1flight_1_1_flight_descriptor" kindref="compound">FlightDescriptor</ref> &amp;</type>
          <declname>descriptor</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classarrow_1_1flight_1_1_flight_info" kindref="compound">FlightInfo</ref> &gt; *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
<para>Request access plan for a single flight, which may be an existing dataset or a command to be executed. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">options</parametername>
</parameternamelist>
<parameterdescription>
<para>Per-RPC options </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">descriptor</parametername>
</parameternamelist>
<parameterdescription>
<para>the dataset request, whether a named dataset or command </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">info</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classarrow_1_1flight_1_1_flight_info" kindref="compound">FlightInfo</ref> describing where to access the dataset </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/client.h" line="173" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_client_1ab368fa17f562e27467a593dde6f53afc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::flight::FlightClient::GetFlightInfo</definition>
        <argsstring>(const FlightDescriptor &amp;descriptor, std::unique_ptr&lt; FlightInfo &gt; *info)</argsstring>
        <name>GetFlightInfo</name>
        <param>
          <type>const <ref refid="structarrow_1_1flight_1_1_flight_descriptor" kindref="compound">FlightDescriptor</ref> &amp;</type>
          <declname>descriptor</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classarrow_1_1flight_1_1_flight_info" kindref="compound">FlightInfo</ref> &gt; *</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/client.h" line="176" column="1" bodyfile="/arrow/cpp/src/arrow/flight/client.h" bodystart="176" bodyend="179"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_client_1ae1afd8df73fa755667f85acc846a9528" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::flight::FlightClient::GetSchema</definition>
        <argsstring>(const FlightCallOptions &amp;options, const FlightDescriptor &amp;descriptor, std::unique_ptr&lt; SchemaResult &gt; *schema_result)</argsstring>
        <name>GetSchema</name>
        <param>
          <type>const <ref refid="classarrow_1_1flight_1_1_flight_call_options" kindref="compound">FlightCallOptions</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1flight_1_1_flight_descriptor" kindref="compound">FlightDescriptor</ref> &amp;</type>
          <declname>descriptor</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="structarrow_1_1flight_1_1_schema_result" kindref="compound">SchemaResult</ref> &gt; *</type>
          <declname>schema_result</declname>
        </param>
        <briefdescription>
<para>Request schema for a single flight, which may be an existing dataset or a command to be executed. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">options</parametername>
</parameternamelist>
<parameterdescription>
<para>Per-RPC options </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">descriptor</parametername>
</parameternamelist>
<parameterdescription>
<para>the dataset request, whether a named dataset or command </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">schema_result</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="structarrow_1_1flight_1_1_schema_result" kindref="compound">SchemaResult</ref> describing the dataset schema </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/client.h" line="188" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_client_1ab91bdbb8a09e9084be5f4ec4276043cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::flight::FlightClient::GetSchema</definition>
        <argsstring>(const FlightDescriptor &amp;descriptor, std::unique_ptr&lt; SchemaResult &gt; *schema_result)</argsstring>
        <name>GetSchema</name>
        <param>
          <type>const <ref refid="structarrow_1_1flight_1_1_flight_descriptor" kindref="compound">FlightDescriptor</ref> &amp;</type>
          <declname>descriptor</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="structarrow_1_1flight_1_1_schema_result" kindref="compound">SchemaResult</ref> &gt; *</type>
          <declname>schema_result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/client.h" line="190" column="1" bodyfile="/arrow/cpp/src/arrow/flight/client.h" bodystart="190" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_client_1ac69cc9ce6c42740aa0eb7c298f744162" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::flight::FlightClient::ListFlights</definition>
        <argsstring>(std::unique_ptr&lt; FlightListing &gt; *listing)</argsstring>
        <name>ListFlights</name>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classarrow_1_1flight_1_1_flight_listing" kindref="compound">FlightListing</ref> &gt; *</type>
          <declname>listing</declname>
        </param>
        <briefdescription>
<para>List all available flights known to the server. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">listing</parametername>
</parameternamelist>
<parameterdescription>
<para>an iterator that returns a <ref refid="classarrow_1_1flight_1_1_flight_info" kindref="compound">FlightInfo</ref> for each flight </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/client.h" line="198" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_client_1a3f68fc0382631de5eb3bfe20603dca50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::flight::FlightClient::ListFlights</definition>
        <argsstring>(const FlightCallOptions &amp;options, const Criteria &amp;criteria, std::unique_ptr&lt; FlightListing &gt; *listing)</argsstring>
        <name>ListFlights</name>
        <param>
          <type>const <ref refid="classarrow_1_1flight_1_1_flight_call_options" kindref="compound">FlightCallOptions</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1flight_1_1_criteria" kindref="compound">Criteria</ref> &amp;</type>
          <declname>criteria</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classarrow_1_1flight_1_1_flight_listing" kindref="compound">FlightListing</ref> &gt; *</type>
          <declname>listing</declname>
        </param>
        <briefdescription>
<para>List available flights given indicated filter criteria. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">options</parametername>
</parameternamelist>
<parameterdescription>
<para>Per-RPC options </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">criteria</parametername>
</parameternamelist>
<parameterdescription>
<para>the filter criteria (opaque) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">listing</parametername>
</parameternamelist>
<parameterdescription>
<para>an iterator that returns a <ref refid="classarrow_1_1flight_1_1_flight_info" kindref="compound">FlightInfo</ref> for each flight </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/client.h" line="205" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_client_1a18f7186e0a7417b4dd5d58d11ea223d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::flight::FlightClient::DoGet</definition>
        <argsstring>(const FlightCallOptions &amp;options, const Ticket &amp;ticket, std::unique_ptr&lt; FlightStreamReader &gt; *stream)</argsstring>
        <name>DoGet</name>
        <param>
          <type>const <ref refid="classarrow_1_1flight_1_1_flight_call_options" kindref="compound">FlightCallOptions</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1flight_1_1_ticket" kindref="compound">Ticket</ref> &amp;</type>
          <declname>ticket</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classarrow_1_1flight_1_1_flight_stream_reader" kindref="compound">FlightStreamReader</ref> &gt; *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
<para>Given a flight ticket and schema, request to be sent the stream. </para>        </briefdescription>
        <detaileddescription>
<para>Returns record batch stream reader <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">options</parametername>
</parameternamelist>
<parameterdescription>
<para>Per-RPC options </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ticket</parametername>
</parameternamelist>
<parameterdescription>
<para>The flight ticket to use </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>the returned <ref refid="classarrow_1_1_record_batch_reader" kindref="compound">RecordBatchReader</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/client.h" line="214" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_client_1a2a35b3b94c736248609529fa69b29a7e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::flight::FlightClient::DoGet</definition>
        <argsstring>(const Ticket &amp;ticket, std::unique_ptr&lt; FlightStreamReader &gt; *stream)</argsstring>
        <name>DoGet</name>
        <param>
          <type>const <ref refid="structarrow_1_1flight_1_1_ticket" kindref="compound">Ticket</ref> &amp;</type>
          <declname>ticket</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classarrow_1_1flight_1_1_flight_stream_reader" kindref="compound">FlightStreamReader</ref> &gt; *</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/client.h" line="216" column="1" bodyfile="/arrow/cpp/src/arrow/flight/client.h" bodystart="216" bodyend="218"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_client_1a1936c7c7fe7e1589838af10e47f01313" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::flight::FlightClient::DoPut</definition>
        <argsstring>(const FlightCallOptions &amp;options, const FlightDescriptor &amp;descriptor, const std::shared_ptr&lt; Schema &gt; &amp;schema, std::unique_ptr&lt; FlightStreamWriter &gt; *stream, std::unique_ptr&lt; FlightMetadataReader &gt; *reader)</argsstring>
        <name>DoPut</name>
        <param>
          <type>const <ref refid="classarrow_1_1flight_1_1_flight_call_options" kindref="compound">FlightCallOptions</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1flight_1_1_flight_descriptor" kindref="compound">FlightDescriptor</ref> &amp;</type>
          <declname>descriptor</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt; &amp;</type>
          <declname>schema</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classarrow_1_1flight_1_1_flight_stream_writer" kindref="compound">FlightStreamWriter</ref> &gt; *</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classarrow_1_1flight_1_1_flight_metadata_reader" kindref="compound">FlightMetadataReader</ref> &gt; *</type>
          <declname>reader</declname>
        </param>
        <briefdescription>
<para>Upload data to a Flight described by the given descriptor. </para>        </briefdescription>
        <detaileddescription>
<para>The caller must call Close() on the returned stream once they are done writing.</para><para>The reader and writer are linked; closing the writer will also close the reader. Use <emphasis>DoneWriting</emphasis> to only close the write side of the channel.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">options</parametername>
</parameternamelist>
<parameterdescription>
<para>Per-RPC options </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">descriptor</parametername>
</parameternamelist>
<parameterdescription>
<para>the descriptor of the stream </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">schema</parametername>
</parameternamelist>
<parameterdescription>
<para>the schema for the data to upload </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">stream</parametername>
</parameternamelist>
<parameterdescription>
<para>a writer to write record batches to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">reader</parametername>
</parameternamelist>
<parameterdescription>
<para>a reader for application metadata from the server </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/client.h" line="234" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_client_1ac1c9e5455e78df910581792278a0dbe9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::flight::FlightClient::DoPut</definition>
        <argsstring>(const FlightDescriptor &amp;descriptor, const std::shared_ptr&lt; Schema &gt; &amp;schema, std::unique_ptr&lt; FlightStreamWriter &gt; *stream, std::unique_ptr&lt; FlightMetadataReader &gt; *reader)</argsstring>
        <name>DoPut</name>
        <param>
          <type>const <ref refid="structarrow_1_1flight_1_1_flight_descriptor" kindref="compound">FlightDescriptor</ref> &amp;</type>
          <declname>descriptor</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt; &amp;</type>
          <declname>schema</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classarrow_1_1flight_1_1_flight_stream_writer" kindref="compound">FlightStreamWriter</ref> &gt; *</type>
          <declname>stream</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classarrow_1_1flight_1_1_flight_metadata_reader" kindref="compound">FlightMetadataReader</ref> &gt; *</type>
          <declname>reader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/client.h" line="238" column="1" bodyfile="/arrow/cpp/src/arrow/flight/client.h" bodystart="238" bodyend="242"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_client_1a4f6f53a7e955fffa3243902d4180471b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::flight::FlightClient::Connect</definition>
        <argsstring>(const Location &amp;location, std::unique_ptr&lt; FlightClient &gt; *client)</argsstring>
        <name>Connect</name>
        <param>
          <type>const <ref refid="structarrow_1_1flight_1_1_location" kindref="compound">Location</ref> &amp;</type>
          <declname>location</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classarrow_1_1flight_1_1_flight_client" kindref="compound">FlightClient</ref> &gt; *</type>
          <declname>client</declname>
        </param>
        <briefdescription>
<para>Connect to an unauthenticated flight service. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">location</parametername>
</parameternamelist>
<parameterdescription>
<para>the URI </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">client</parametername>
</parameternamelist>
<parameterdescription>
<para>the created <ref refid="classarrow_1_1flight_1_1_flight_client" kindref="compound">FlightClient</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> OK status may not indicate that the connection was successful </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/client.h" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_client_1a8cf7a50ad0ec8554a3888d07d2e14219" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::flight::FlightClient::Connect</definition>
        <argsstring>(const Location &amp;location, const FlightClientOptions &amp;options, std::unique_ptr&lt; FlightClient &gt; *client)</argsstring>
        <name>Connect</name>
        <param>
          <type>const <ref refid="structarrow_1_1flight_1_1_location" kindref="compound">Location</ref> &amp;</type>
          <declname>location</declname>
        </param>
        <param>
          <type>const <ref refid="classarrow_1_1flight_1_1_flight_client_options" kindref="compound">FlightClientOptions</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classarrow_1_1flight_1_1_flight_client" kindref="compound">FlightClient</ref> &gt; *</type>
          <declname>client</declname>
        </param>
        <briefdescription>
<para>Connect to an unauthenticated flight service. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">location</parametername>
</parameternamelist>
<parameterdescription>
<para>the URI </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">options</parametername>
</parameternamelist>
<parameterdescription>
<para>Other options for setting up the client </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">client</parametername>
</parameternamelist>
<parameterdescription>
<para>the created <ref refid="classarrow_1_1flight_1_1_flight_client" kindref="compound">FlightClient</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> OK status may not indicate that the connection was successful </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/client.h" line="135" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_client_1a3fee6388e8950cf15d94a48582aa1483" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::flight::FlightClient::FlightClient</definition>
        <argsstring>()</argsstring>
        <name>FlightClient</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/client.h" line="245" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Client class for Arrow Flight RPC services (gRPC-based). </para>    </briefdescription>
    <detaileddescription>
<para>API experimental for now </para>    </detaileddescription>
    <location file="/arrow/cpp/src/arrow/flight/client.h" line="118" column="1" bodyfile="/arrow/cpp/src/arrow/flight/client.h" bodystart="118" bodyend="248"/>
    <listofallmembers>
      <member refid="classarrow_1_1flight_1_1_flight_client_1aed24e3c298ae6669e7cade15aafd6eeb" prot="public" virt="non-virtual"><scope>arrow::flight::FlightClient</scope><name>Authenticate</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_client_1a4f6f53a7e955fffa3243902d4180471b" prot="public" virt="non-virtual"><scope>arrow::flight::FlightClient</scope><name>Connect</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_client_1a8cf7a50ad0ec8554a3888d07d2e14219" prot="public" virt="non-virtual"><scope>arrow::flight::FlightClient</scope><name>Connect</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_client_1a390e35877659b6e975656dfeeb063caf" prot="public" virt="non-virtual"><scope>arrow::flight::FlightClient</scope><name>DoAction</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_client_1a0033871f8b5cbe1217adadf0571ae165" prot="public" virt="non-virtual"><scope>arrow::flight::FlightClient</scope><name>DoAction</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_client_1a18f7186e0a7417b4dd5d58d11ea223d5" prot="public" virt="non-virtual"><scope>arrow::flight::FlightClient</scope><name>DoGet</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_client_1a2a35b3b94c736248609529fa69b29a7e" prot="public" virt="non-virtual"><scope>arrow::flight::FlightClient</scope><name>DoGet</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_client_1a1936c7c7fe7e1589838af10e47f01313" prot="public" virt="non-virtual"><scope>arrow::flight::FlightClient</scope><name>DoPut</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_client_1ac1c9e5455e78df910581792278a0dbe9" prot="public" virt="non-virtual"><scope>arrow::flight::FlightClient</scope><name>DoPut</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_client_1a3fee6388e8950cf15d94a48582aa1483" prot="private" virt="non-virtual"><scope>arrow::flight::FlightClient</scope><name>FlightClient</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_client_1af95b8bb8081f7e83de6531e3cd3eded3" prot="public" virt="non-virtual"><scope>arrow::flight::FlightClient</scope><name>GetFlightInfo</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_client_1ab368fa17f562e27467a593dde6f53afc" prot="public" virt="non-virtual"><scope>arrow::flight::FlightClient</scope><name>GetFlightInfo</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_client_1ae1afd8df73fa755667f85acc846a9528" prot="public" virt="non-virtual"><scope>arrow::flight::FlightClient</scope><name>GetSchema</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_client_1ab91bdbb8a09e9084be5f4ec4276043cd" prot="public" virt="non-virtual"><scope>arrow::flight::FlightClient</scope><name>GetSchema</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_client_1a5c83e6b7b3dc3837abc01df2cac8375a" prot="private" virt="non-virtual"><scope>arrow::flight::FlightClient</scope><name>impl_</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_client_1a3824825cbab04ade6d37f3b466335905" prot="public" virt="non-virtual"><scope>arrow::flight::FlightClient</scope><name>ListActions</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_client_1a3a4da49c1a2e886ce1f6f5ef06b25ca6" prot="public" virt="non-virtual"><scope>arrow::flight::FlightClient</scope><name>ListActions</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_client_1ac69cc9ce6c42740aa0eb7c298f744162" prot="public" virt="non-virtual"><scope>arrow::flight::FlightClient</scope><name>ListFlights</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_client_1a3f68fc0382631de5eb3bfe20603dca50" prot="public" virt="non-virtual"><scope>arrow::flight::FlightClient</scope><name>ListFlights</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_client_1a2ee1179f9241b2978831ad4e50c4bd3e" prot="public" virt="non-virtual"><scope>arrow::flight::FlightClient</scope><name>~FlightClient</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
