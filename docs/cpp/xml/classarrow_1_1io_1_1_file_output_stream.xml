<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1io_1_1_file_output_stream" kind="class" language="C++" prot="public">
    <compoundname>arrow::io::FileOutputStream</compoundname>
    <basecompoundref refid="classarrow_1_1io_1_1_output_stream" prot="public" virt="non-virtual">arrow::io::OutputStream</basecompoundref>
    <includes refid="file_8h" local="no">arrow/io/file.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classarrow_1_1io_1_1_file_output_stream_1a299dae0b4d4b66db546499a485af179a" prot="private" static="no" mutable="no">
        <type>class <ref refid="arrow_2util_2visibility_8h_1a843cb8dccea68a22a2b9995605cb5a74" kindref="member">ARROW_NO_EXPORT</ref></type>
        <definition>class ARROW_NO_EXPORT arrow::io::FileOutputStream::FileOutputStreamImpl</definition>
        <argsstring></argsstring>
        <name>FileOutputStreamImpl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/file.h" line="76" column="1" bodyfile="/arrow/cpp/src/arrow/io/file.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1io_1_1_file_output_stream_1a734d36c2d211316b6e0ad7d774c8878d" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; FileOutputStreamImpl &gt;</type>
        <definition>std::unique_ptr&lt;FileOutputStreamImpl&gt; arrow::io::FileOutputStream::impl_</definition>
        <argsstring></argsstring>
        <name>impl_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/file.h" line="79" column="1" bodyfile="/arrow/cpp/src/arrow/io/file.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1io_1_1_file_output_stream_1aabe83ee582be72521bd7bf4a8076afba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::io::FileOutputStream::~FileOutputStream</definition>
        <argsstring>() override</argsstring>
        <name>~FileOutputStream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/file.h" line="41" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_file_output_stream_1a4fdfa45d3271c43096508d09c30e08c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::FileOutputStream::Close</definition>
        <argsstring>() override</argsstring>
        <name>Close</name>
        <reimplements refid="classarrow_1_1io_1_1_file_interface_1ae0f46d227a430af180576715e7aa0b78">Close</reimplements>
        <briefdescription>
<para>Close the stream cleanly. </para>        </briefdescription>
        <detaileddescription>
<para>For writable streams, this will attempt to flush any pending data before releasing the underlying resource.</para><para>After <ref refid="classarrow_1_1io_1_1_file_output_stream_1a4fdfa45d3271c43096508d09c30e08c2" kindref="member">Close()</ref> is called, <ref refid="classarrow_1_1io_1_1_file_output_stream_1a94f90b0171ff2a53d80394165cf58d4a" kindref="member">closed()</ref> returns true and the stream is not available for further operations. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/file.h" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_file_output_stream_1a94f90b0171ff2a53d80394165cf58d4a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool arrow::io::FileOutputStream::closed</definition>
        <argsstring>() const override</argsstring>
        <name>closed</name>
        <reimplements refid="classarrow_1_1io_1_1_file_interface_1a5ba1d2c3cec2e05e7b0018624f19c10b">closed</reimplements>
        <briefdescription>
<para>Return whether the stream is closed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/file.h" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_file_output_stream_1a270bfa60011624aebf9cec2b619cf6e8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; int64_t &gt;</type>
        <definition>Result&lt;int64_t&gt; arrow::io::FileOutputStream::Tell</definition>
        <argsstring>() const override</argsstring>
        <name>Tell</name>
        <reimplements refid="classarrow_1_1io_1_1_file_interface_1ac6c6709147a46cd7f45d0779c1819ce6">Tell</reimplements>
        <briefdescription>
<para>Return the position in this stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/file.h" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_file_output_stream_1a0f696e1c6827955c6306337b930247ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::FileOutputStream::Write</definition>
        <argsstring>(const void *data, int64_t nbytes) override</argsstring>
        <name>Write</name>
        <reimplements refid="classarrow_1_1io_1_1_writable_1a51d9feed73c33f095ca4b9f35dede84d">Write</reimplements>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
<para>Write the given data to the stream. </para>        </briefdescription>
        <detaileddescription>
<para>This method always processes the bytes in full. Depending on the semantics of the stream, the data may be written out immediately, held in a buffer, or written asynchronously. In the case where the stream buffers the data, it will be copied. To avoid potentially large copies, use the Write variant that takes an owned <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/file.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_file_output_stream_1a4b169ece857e82eff1a86e84c1012ac8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int arrow::io::FileOutputStream::file_descriptor</definition>
        <argsstring>() const</argsstring>
        <name>file_descriptor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/file.h" line="73" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1io_1_1_file_output_stream_1a27363f7b230b20768be6d2f606667829" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_file_output_stream" kindref="compound">FileOutputStream</ref> &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;FileOutputStream&gt; &gt; arrow::io::FileOutputStream::Open</definition>
        <argsstring>(const std::string &amp;path, bool append=false)</argsstring>
        <name>Open</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>append</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Open a local file for writing, truncating any existing file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">path</parametername>
</parameternamelist>
<parameterdescription>
<para>with UTF8 encoding </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">append</parametername>
</parameternamelist>
<parameterdescription>
<para>append to existing file, otherwise truncate to 0 bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an open <ref refid="classarrow_1_1io_1_1_file_output_stream" kindref="compound">FileOutputStream</ref></para></simplesect>
When opening a new file, any existing file with the indicated path is truncated to 0 bytes, deleting any existing data </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/file.h" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_file_output_stream_1a6096b1b7a24724e32fb6aa078f9fdd12" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_file_output_stream" kindref="compound">FileOutputStream</ref> &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;FileOutputStream&gt; &gt; arrow::io::FileOutputStream::Open</definition>
        <argsstring>(int fd)</argsstring>
        <name>Open</name>
        <param>
          <type>int</type>
          <declname>fd</declname>
        </param>
        <briefdescription>
<para>Open a file descriptor for writing. </para>        </briefdescription>
        <detaileddescription>
<para>The underlying file isn&apos;t truncated. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fd</parametername>
</parameternamelist>
<parameterdescription>
<para>file descriptor </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an open <ref refid="classarrow_1_1io_1_1_file_output_stream" kindref="compound">FileOutputStream</ref></para></simplesect>
The file descriptor becomes owned by the <ref refid="classarrow_1_1io_1_1_output_stream" kindref="compound">OutputStream</ref>, and will be closed on <ref refid="classarrow_1_1io_1_1_file_output_stream_1a4fdfa45d3271c43096508d09c30e08c2" kindref="member">Close()</ref> or destruction. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/file.h" line="60" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classarrow_1_1io_1_1_file_output_stream_1a1c2e4378bea37c926be49a071f3700f4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::io::FileOutputStream::FileOutputStream</definition>
        <argsstring>()</argsstring>
        <name>FileOutputStream</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/file.h" line="76" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An operating system file open in write-only mode. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1626">
        <label>arrow::io::OutputStream</label>
        <link refid="classarrow_1_1io_1_1_output_stream"/>
        <childnode refid="1627" relation="public-inheritance">
        </childnode>
        <childnode refid="1628" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1628">
        <label>arrow::io::Writable</label>
        <link refid="classarrow_1_1io_1_1_writable"/>
      </node>
      <node id="1627">
        <label>arrow::io::FileInterface</label>
        <link refid="classarrow_1_1io_1_1_file_interface"/>
      </node>
      <node id="1625">
        <label>arrow::io::FileOutputStream</label>
        <link refid="classarrow_1_1io_1_1_file_output_stream"/>
        <childnode refid="1626" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1630">
        <label>arrow::io::OutputStream</label>
        <link refid="classarrow_1_1io_1_1_output_stream"/>
        <childnode refid="1631" relation="public-inheritance">
        </childnode>
        <childnode refid="1632" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1632">
        <label>arrow::io::Writable</label>
        <link refid="classarrow_1_1io_1_1_writable"/>
      </node>
      <node id="1631">
        <label>arrow::io::FileInterface</label>
        <link refid="classarrow_1_1io_1_1_file_interface"/>
      </node>
      <node id="1629">
        <label>arrow::io::FileOutputStream</label>
        <link refid="classarrow_1_1io_1_1_file_output_stream"/>
        <childnode refid="1630" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/io/file.h" line="39" column="1" bodyfile="/arrow/cpp/src/arrow/io/file.h" bodystart="39" bodyend="80"/>
    <listofallmembers>
      <member refid="classarrow_1_1io_1_1_file_interface_1a0fa59fe92d3c99c9d9701210626aac60" prot="public" virt="virtual"><scope>arrow::io::FileOutputStream</scope><name>Abort</name></member>
      <member refid="classarrow_1_1io_1_1_file_output_stream_1a4fdfa45d3271c43096508d09c30e08c2" prot="public" virt="virtual"><scope>arrow::io::FileOutputStream</scope><name>Close</name></member>
      <member refid="classarrow_1_1io_1_1_file_output_stream_1a94f90b0171ff2a53d80394165cf58d4a" prot="public" virt="virtual"><scope>arrow::io::FileOutputStream</scope><name>closed</name></member>
      <member refid="classarrow_1_1io_1_1_file_output_stream_1a4b169ece857e82eff1a86e84c1012ac8" prot="public" virt="non-virtual"><scope>arrow::io::FileOutputStream</scope><name>file_descriptor</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1afea9126bb21e3720212a826aa78b5534" prot="protected" virt="non-virtual"><scope>arrow::io::FileOutputStream</scope><name>FileInterface</name></member>
      <member refid="classarrow_1_1io_1_1_file_output_stream_1a1c2e4378bea37c926be49a071f3700f4" prot="private" virt="non-virtual"><scope>arrow::io::FileOutputStream</scope><name>FileOutputStream</name></member>
      <member refid="classarrow_1_1io_1_1_file_output_stream_1a299dae0b4d4b66db546499a485af179a" prot="private" virt="non-virtual"><scope>arrow::io::FileOutputStream</scope><name>FileOutputStreamImpl</name></member>
      <member refid="classarrow_1_1io_1_1_writable_1a06e513a551f68603013c1586ba8b939f" prot="public" virt="virtual"><scope>arrow::io::FileOutputStream</scope><name>Flush</name></member>
      <member refid="classarrow_1_1io_1_1_file_output_stream_1a734d36c2d211316b6e0ad7d774c8878d" prot="private" virt="non-virtual"><scope>arrow::io::FileOutputStream</scope><name>impl_</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1a75a3739361570bb121b9adb04d5d8686" prot="public" virt="non-virtual"><scope>arrow::io::FileOutputStream</scope><name>mode</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1a504d0410eb6066316365a4549d000ee0" prot="protected" virt="non-virtual"><scope>arrow::io::FileOutputStream</scope><name>mode_</name></member>
      <member refid="classarrow_1_1io_1_1_file_output_stream_1a27363f7b230b20768be6d2f606667829" prot="public" virt="non-virtual"><scope>arrow::io::FileOutputStream</scope><name>Open</name></member>
      <member refid="classarrow_1_1io_1_1_file_output_stream_1a6096b1b7a24724e32fb6aa078f9fdd12" prot="public" virt="non-virtual"><scope>arrow::io::FileOutputStream</scope><name>Open</name></member>
      <member refid="classarrow_1_1io_1_1_output_stream_1a5b1e0adea7ef92368ddc07027995aca1" prot="protected" virt="non-virtual"><scope>arrow::io::FileOutputStream</scope><name>OutputStream</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1af3dd01a780076e39a34770beb513f71f" prot="protected" virt="non-virtual"><scope>arrow::io::FileOutputStream</scope><name>set_mode</name></member>
      <member refid="classarrow_1_1io_1_1_file_output_stream_1a270bfa60011624aebf9cec2b619cf6e8" prot="public" virt="virtual"><scope>arrow::io::FileOutputStream</scope><name>Tell</name></member>
      <member refid="classarrow_1_1io_1_1_file_output_stream_1a0f696e1c6827955c6306337b930247ca" prot="public" virt="virtual"><scope>arrow::io::FileOutputStream</scope><name>Write</name></member>
      <member refid="classarrow_1_1io_1_1_writable_1a048bbc5e85b1d739bc49c57553e85069" prot="public" virt="virtual" ambiguityscope="arrow::io::OutputStream::"><scope>arrow::io::FileOutputStream</scope><name>Write</name></member>
      <member refid="classarrow_1_1io_1_1_writable_1a00ee30dff05bda7526c91e594a9607e7" prot="public" virt="non-virtual" ambiguityscope="arrow::io::OutputStream::"><scope>arrow::io::FileOutputStream</scope><name>Write</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1aa42dcdfad00634f01192b39f1d9b4929" prot="public" virt="pure-virtual"><scope>arrow::io::FileOutputStream</scope><name>~FileInterface</name></member>
      <member refid="classarrow_1_1io_1_1_file_output_stream_1aabe83ee582be72521bd7bf4a8076afba" prot="public" virt="non-virtual"><scope>arrow::io::FileOutputStream</scope><name>~FileOutputStream</name></member>
      <member refid="classarrow_1_1io_1_1_writable_1acc17343118544c62f14d62f538fa8592" prot="public" virt="virtual"><scope>arrow::io::FileOutputStream</scope><name>~Writable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
