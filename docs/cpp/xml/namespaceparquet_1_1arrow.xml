<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespaceparquet_1_1arrow" kind="namespace" language="C++">
    <compoundname>parquet::arrow</compoundname>
    <innerclass refid="classparquet_1_1arrow_1_1_column_chunk_reader" prot="public">parquet::arrow::ColumnChunkReader</innerclass>
    <innerclass refid="classparquet_1_1arrow_1_1_column_reader" prot="public">parquet::arrow::ColumnReader</innerclass>
    <innerclass refid="structparquet_1_1arrow_1_1_element_range" prot="public">parquet::arrow::ElementRange</innerclass>
    <innerclass refid="classparquet_1_1arrow_1_1_file_column_iterator" prot="public">parquet::arrow::FileColumnIterator</innerclass>
    <innerclass refid="classparquet_1_1arrow_1_1_file_reader" prot="public">parquet::arrow::FileReader</innerclass>
    <innerclass refid="classparquet_1_1arrow_1_1_file_reader_builder" prot="public">parquet::arrow::FileReaderBuilder</innerclass>
    <innerclass refid="classparquet_1_1arrow_1_1_file_writer" prot="public">parquet::arrow::FileWriter</innerclass>
    <innerclass refid="classparquet_1_1arrow_1_1_multipath_level_builder" prot="public">parquet::arrow::MultipathLevelBuilder</innerclass>
    <innerclass refid="structparquet_1_1arrow_1_1_multipath_level_builder_result" prot="public">parquet::arrow::MultipathLevelBuilderResult</innerclass>
    <innerclass refid="structparquet_1_1arrow_1_1_reader_context" prot="public">parquet::arrow::ReaderContext</innerclass>
    <innerclass refid="classparquet_1_1arrow_1_1_row_group_reader" prot="public">parquet::arrow::RowGroupReader</innerclass>
    <innerclass refid="structparquet_1_1arrow_1_1_schema_field" prot="public">parquet::arrow::SchemaField</innerclass>
    <innerclass refid="structparquet_1_1arrow_1_1_schema_manifest" prot="public">parquet::arrow::SchemaManifest</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespaceparquet_1_1arrow_1adbf8a7e6ff91d181981e59c2863eb56f" prot="public" static="no">
        <type>std::function&lt; <ref refid="classparquet_1_1arrow_1_1_file_column_iterator" kindref="compound">FileColumnIterator</ref> *(int, <ref refid="classparquet_1_1_parquet_file_reader" kindref="compound">ParquetFileReader</ref> *)&gt;</type>
        <definition>using parquet::arrow::FileColumnIteratorFactory = typedef std::function&lt;FileColumnIterator*(int, ParquetFileReader*)&gt;</definition>
        <argsstring></argsstring>
        <name>FileColumnIteratorFactory</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/reader_internal.h" line="99" column="1" bodyfile="/arrow/cpp/src/parquet/arrow/reader_internal.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__parquet-arrow-reader-factories_1ga8006fc7e2640ecb8764385513986822b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::<ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>::arrow::Status parquet::arrow::OpenFile</definition>
        <argsstring>(std::shared_ptr&lt;::arrow::io::RandomAccessFile &gt;, ::arrow::MemoryPool *allocator, std::unique_ptr&lt; FileReader &gt; *reader)</argsstring>
        <name>OpenFile</name>
        <param>
          <type>std::shared_ptr&lt;::<ref refid="classarrow_1_1io_1_1_random_access_file" kindref="compound">arrow::io::RandomAccessFile</ref> &gt;</type>
        </param>
        <param>
          <type>::<ref refid="classarrow_1_1_memory_pool" kindref="compound">arrow::MemoryPool</ref> *</type>
          <declname>allocator</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classparquet_1_1arrow_1_1_file_reader" kindref="compound">FileReader</ref> &gt; *</type>
          <declname>reader</declname>
        </param>
        <briefdescription>
<para>Build <ref refid="classparquet_1_1arrow_1_1_file_reader" kindref="compound">FileReader</ref> from Arrow file and MemoryPool. </para>        </briefdescription>
        <detaileddescription>
<para>Advanced settings are supported through the <ref refid="classparquet_1_1arrow_1_1_file_reader_builder" kindref="compound">FileReaderBuilder</ref> class. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/reader.h" line="292" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1_1arrow_1a529c7536c065099b96c789c4a10e520f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::<ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>::arrow::Status parquet::arrow::StatisticsAsScalars</definition>
        <argsstring>(const Statistics &amp;Statistics, std::shared_ptr&lt;::arrow::Scalar &gt; *min, std::shared_ptr&lt;::arrow::Scalar &gt; *max)</argsstring>
        <name>StatisticsAsScalars</name>
        <param>
          <type>const <ref refid="classparquet_1_1_statistics" kindref="compound">Statistics</ref> &amp;</type>
          <declname>Statistics</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt;::<ref refid="structarrow_1_1_scalar" kindref="compound">arrow::Scalar</ref> &gt; *</type>
          <declname>min</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt;::<ref refid="structarrow_1_1_scalar" kindref="compound">arrow::Scalar</ref> &gt; *</type>
          <declname>max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/reader.h" line="299" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1_1arrow_1a405592de0a784143058261fee48435de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status parquet::arrow::TransferColumnData</definition>
        <argsstring>(::parquet::internal::RecordReader *reader, std::shared_ptr&lt;::arrow::DataType &gt; value_type, const ColumnDescriptor *descr, ::arrow::MemoryPool *pool, std::shared_ptr&lt;::arrow::ChunkedArray &gt; *out)</argsstring>
        <name>TransferColumnData</name>
        <param>
          <type>::parquet::internal::RecordReader *</type>
          <declname>reader</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt;::<ref refid="classarrow_1_1_data_type" kindref="compound">arrow::DataType</ref> &gt;</type>
          <declname>value_type</declname>
        </param>
        <param>
          <type>const <ref refid="classparquet_1_1_column_descriptor" kindref="compound">ColumnDescriptor</ref> *</type>
          <declname>descr</declname>
        </param>
        <param>
          <type>::<ref refid="classarrow_1_1_memory_pool" kindref="compound">arrow::MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt;::<ref refid="classarrow_1_1_chunked_array" kindref="compound">arrow::ChunkedArray</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/reader_internal.h" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1_1arrow_1a4912283a3cacff201dbbc4ac4c3a728c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status parquet::arrow::ReconstructNestedList</definition>
        <argsstring>(const std::shared_ptr&lt;::arrow::Array &gt; &amp;arr, std::shared_ptr&lt;::arrow::Field &gt; field, int16_t max_def_level, int16_t max_rep_level, const int16_t *def_levels, const int16_t *rep_levels, int64_t total_levels, ::arrow::MemoryPool *pool, std::shared_ptr&lt;::arrow::Array &gt; *out)</argsstring>
        <name>ReconstructNestedList</name>
        <param>
          <type>const std::shared_ptr&lt;::<ref refid="classarrow_1_1_array" kindref="compound">arrow::Array</ref> &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt;::<ref refid="classarrow_1_1_field" kindref="compound">arrow::Field</ref> &gt;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>max_def_level</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>max_rep_level</declname>
        </param>
        <param>
          <type>const int16_t *</type>
          <declname>def_levels</declname>
        </param>
        <param>
          <type>const int16_t *</type>
          <declname>rep_levels</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>total_levels</declname>
        </param>
        <param>
          <type>::<ref refid="classarrow_1_1_memory_pool" kindref="compound">arrow::MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt;::<ref refid="classarrow_1_1_array" kindref="compound">arrow::Array</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/reader_internal.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1_1arrow_1a34c9ba927562da578e2c1e5dce3343f0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status parquet::arrow::GetReader</definition>
        <argsstring>(const SchemaField &amp;field, const std::shared_ptr&lt; ReaderContext &gt; &amp;context, std::unique_ptr&lt; ColumnReaderImpl &gt; *out)</argsstring>
        <name>GetReader</name>
        <param>
          <type>const <ref refid="structparquet_1_1arrow_1_1_schema_field" kindref="compound">SchemaField</ref> &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="structparquet_1_1arrow_1_1_reader_context" kindref="compound">ReaderContext</ref> &gt; &amp;</type>
          <declname>context</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; ColumnReaderImpl &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/reader_internal.h" line="129" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__arrow-to-parquet-schema-conversion_1ga46ca510e421a89e717f9dc9968ef038c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::<ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>::arrow::Status parquet::arrow::FieldToNode</definition>
        <argsstring>(const std::shared_ptr&lt;::arrow::Field &gt; &amp;field, const WriterProperties &amp;properties, const ArrowWriterProperties &amp;arrow_properties, schema::NodePtr *out)</argsstring>
        <name>FieldToNode</name>
        <param>
          <type>const std::shared_ptr&lt;::<ref refid="classarrow_1_1_field" kindref="compound">arrow::Field</ref> &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>const <ref refid="classparquet_1_1_writer_properties" kindref="compound">WriterProperties</ref> &amp;</type>
          <declname>properties</declname>
        </param>
        <param>
          <type>const <ref refid="classparquet_1_1_arrow_writer_properties" kindref="compound">ArrowWriterProperties</ref> &amp;</type>
          <declname>arrow_properties</declname>
        </param>
        <param>
          <type><ref refid="namespaceparquet_1_1schema_1a7fe5ee27b1dd5f12098ce3f3e6200b9e" kindref="member">schema::NodePtr</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/schema.h" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__arrow-to-parquet-schema-conversion_1ga0b5abbe961761a266490feca3f75e9ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::<ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>::arrow::Status parquet::arrow::ToParquetSchema</definition>
        <argsstring>(const ::arrow::Schema *arrow_schema, const WriterProperties &amp;properties, const ArrowWriterProperties &amp;arrow_properties, std::shared_ptr&lt; SchemaDescriptor &gt; *out)</argsstring>
        <name>ToParquetSchema</name>
        <param>
          <type>const ::<ref refid="classarrow_1_1_schema" kindref="compound">arrow::Schema</ref> *</type>
          <declname>arrow_schema</declname>
        </param>
        <param>
          <type>const <ref refid="classparquet_1_1_writer_properties" kindref="compound">WriterProperties</ref> &amp;</type>
          <declname>properties</declname>
        </param>
        <param>
          <type>const <ref refid="classparquet_1_1_arrow_writer_properties" kindref="compound">ArrowWriterProperties</ref> &amp;</type>
          <declname>arrow_properties</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classparquet_1_1_schema_descriptor" kindref="compound">SchemaDescriptor</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/schema.h" line="56" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__arrow-to-parquet-schema-conversion_1ga0e5b1ecccddbc651dffc29fdd15b6e2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::<ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>::arrow::Status parquet::arrow::ToParquetSchema</definition>
        <argsstring>(const ::arrow::Schema *arrow_schema, const WriterProperties &amp;properties, std::shared_ptr&lt; SchemaDescriptor &gt; *out)</argsstring>
        <name>ToParquetSchema</name>
        <param>
          <type>const ::<ref refid="classarrow_1_1_schema" kindref="compound">arrow::Schema</ref> *</type>
          <declname>arrow_schema</declname>
        </param>
        <param>
          <type>const <ref refid="classparquet_1_1_writer_properties" kindref="compound">WriterProperties</ref> &amp;</type>
          <declname>properties</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classparquet_1_1_schema_descriptor" kindref="compound">SchemaDescriptor</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/schema.h" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__parquet-to-arrow-schema-conversion_1ga4fb75963cbac0e6251e5d6d4efc0c3b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::<ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>::arrow::Status parquet::arrow::FromParquetSchema</definition>
        <argsstring>(const SchemaDescriptor *parquet_schema, const ArrowReaderProperties &amp;properties, const std::shared_ptr&lt; const ::arrow::KeyValueMetadata &gt; &amp;key_value_metadata, std::shared_ptr&lt;::arrow::Schema &gt; *out)</argsstring>
        <name>FromParquetSchema</name>
        <param>
          <type>const <ref refid="classparquet_1_1_schema_descriptor" kindref="compound">SchemaDescriptor</ref> *</type>
          <declname>parquet_schema</declname>
        </param>
        <param>
          <type>const <ref refid="classparquet_1_1_arrow_reader_properties" kindref="compound">ArrowReaderProperties</ref> &amp;</type>
          <declname>properties</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; const ::<ref refid="classarrow_1_1_key_value_metadata" kindref="compound">arrow::KeyValueMetadata</ref> &gt; &amp;</type>
          <declname>key_value_metadata</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt;::<ref refid="classarrow_1_1_schema" kindref="compound">arrow::Schema</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/schema.h" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__parquet-to-arrow-schema-conversion_1ga52853e89c6477c07e2a5638aaa2d3dff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::<ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>::arrow::Status parquet::arrow::FromParquetSchema</definition>
        <argsstring>(const SchemaDescriptor *parquet_schema, const ArrowReaderProperties &amp;properties, std::shared_ptr&lt;::arrow::Schema &gt; *out)</argsstring>
        <name>FromParquetSchema</name>
        <param>
          <type>const <ref refid="classparquet_1_1_schema_descriptor" kindref="compound">SchemaDescriptor</ref> *</type>
          <declname>parquet_schema</declname>
        </param>
        <param>
          <type>const <ref refid="classparquet_1_1_arrow_reader_properties" kindref="compound">ArrowReaderProperties</ref> &amp;</type>
          <declname>properties</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt;::<ref refid="classarrow_1_1_schema" kindref="compound">arrow::Schema</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/schema.h" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__parquet-to-arrow-schema-conversion_1gac3a99e5eb4656861600c33e7d2bd03e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::<ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>::arrow::Status parquet::arrow::FromParquetSchema</definition>
        <argsstring>(const SchemaDescriptor *parquet_schema, std::shared_ptr&lt;::arrow::Schema &gt; *out)</argsstring>
        <name>FromParquetSchema</name>
        <param>
          <type>const <ref refid="classparquet_1_1_schema_descriptor" kindref="compound">SchemaDescriptor</ref> *</type>
          <declname>parquet_schema</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt;::<ref refid="classarrow_1_1_schema" kindref="compound">arrow::Schema</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/schema.h" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1_1arrow_1ae9060fc8bcb8f58ab791e27891bcae24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::<ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>::arrow::Status parquet::arrow::WriteFileMetaData</definition>
        <argsstring>(const FileMetaData &amp;file_metadata, ::arrow::io::OutputStream *sink)</argsstring>
        <name>WriteFileMetaData</name>
        <param>
          <type>const <ref refid="classparquet_1_1_file_meta_data" kindref="compound">FileMetaData</ref> &amp;</type>
          <declname>file_metadata</declname>
        </param>
        <param>
          <type>::<ref refid="classarrow_1_1io_1_1_output_stream" kindref="compound">arrow::io::OutputStream</ref> *</type>
          <declname>sink</declname>
        </param>
        <briefdescription>
<para>Write Parquet file metadata only to indicated Arrow <ref refid="classparquet_1_1_output_stream" kindref="compound">OutputStream</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/writer.h" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1_1arrow_1abbe573bce24d69adbbffa7e6251e2fa0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::<ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>::arrow::Status parquet::arrow::WriteMetaDataFile</definition>
        <argsstring>(const FileMetaData &amp;file_metadata, ::arrow::io::OutputStream *sink)</argsstring>
        <name>WriteMetaDataFile</name>
        <param>
          <type>const <ref refid="classparquet_1_1_file_meta_data" kindref="compound">FileMetaData</ref> &amp;</type>
          <declname>file_metadata</declname>
        </param>
        <param>
          <type>::<ref refid="classarrow_1_1io_1_1_output_stream" kindref="compound">arrow::io::OutputStream</ref> *</type>
          <declname>sink</declname>
        </param>
        <briefdescription>
<para>Write metadata-only Parquet file to indicated Arrow <ref refid="classparquet_1_1_output_stream" kindref="compound">OutputStream</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/writer.h" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespaceparquet_1_1arrow_1a37937bfe8f07acfc8491cec95c36f6ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::<ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>::arrow::Status parquet::arrow::WriteTable</definition>
        <argsstring>(const ::arrow::Table &amp;table, MemoryPool *pool, std::shared_ptr&lt;::arrow::io::OutputStream &gt; sink, int64_t chunk_size, std::shared_ptr&lt; WriterProperties &gt; properties=default_writer_properties(), std::shared_ptr&lt; ArrowWriterProperties &gt; arrow_properties=default_arrow_writer_properties())</argsstring>
        <name>WriteTable</name>
        <param>
          <type>const ::<ref refid="classarrow_1_1_table" kindref="compound">arrow::Table</ref> &amp;</type>
          <declname>table</declname>
        </param>
        <param>
          <type><ref refid="namespaceparquet_1a0d70b006a1f6feca958a1505b38a8cb7" kindref="member">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt;::<ref refid="classarrow_1_1io_1_1_output_stream" kindref="compound">arrow::io::OutputStream</ref> &gt;</type>
          <declname>sink</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>chunk_size</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classparquet_1_1_writer_properties" kindref="compound">WriterProperties</ref> &gt;</type>
          <declname>properties</declname>
          <defval><ref refid="namespaceparquet_1af3ef28d276d5193806a95e7da5309e4d" kindref="member">default_writer_properties</ref>()</defval>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classparquet_1_1_arrow_writer_properties" kindref="compound">ArrowWriterProperties</ref> &gt;</type>
          <declname>arrow_properties</declname>
          <defval><ref refid="namespaceparquet_1a40435a0e4ca51cdfc833ab61d24333ac" kindref="member">default_arrow_writer_properties</ref>()</defval>
        </param>
        <briefdescription>
<para>Write a Table to Parquet. </para>        </briefdescription>
        <detaileddescription>
<para>The table shall only consist of columns of primitive type or of primitive lists. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/writer.h" line="100" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/parquet/arrow/path_internal.h" line="40" column="1"/>
  </compounddef>
</doxygen>
