<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1fs_1_1_hadoop_file_system" kind="class" language="C++" prot="public">
    <compoundname>arrow::fs::HadoopFileSystem</compoundname>
    <basecompoundref refid="classarrow_1_1fs_1_1_file_system" prot="public" virt="non-virtual">arrow::fs::FileSystem</basecompoundref>
    <includes refid="filesystem_2hdfs_8h" local="no">arrow/filesystem/hdfs.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classarrow_1_1fs_1_1_hadoop_file_system_1a5f5b95cf09c291cd15c42cfacfdd65eb" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; Impl &gt;</type>
        <definition>std::unique_ptr&lt;Impl&gt; arrow::fs::HadoopFileSystem::impl_</definition>
        <argsstring></argsstring>
        <name>impl_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/hdfs.h" line="103" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/hdfs.h" bodystart="102" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1fs_1_1_hadoop_file_system_1ac762d5dbbc9849876addebb28f4ad089" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::fs::HadoopFileSystem::~HadoopFileSystem</definition>
        <argsstring>() override</argsstring>
        <name>~HadoopFileSystem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/hdfs.h" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_hadoop_file_system_1af91c96db65100dd2384586a9ad3daf1b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string arrow::fs::HadoopFileSystem::type_name</definition>
        <argsstring>() const override</argsstring>
        <name>type_name</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1a14c1160fbffc2dcb72f2e16c32329bc7">type_name</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/hdfs.h" line="65" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/hdfs.h" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_hadoop_file_system_1aadf17a7ebbfd32ce296d806d16e41680" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structarrow_1_1fs_1_1_hdfs_options" kindref="compound">HdfsOptions</ref></type>
        <definition>HdfsOptions arrow::fs::HadoopFileSystem::options</definition>
        <argsstring>() const</argsstring>
        <name>options</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/hdfs.h" line="66" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_hadoop_file_system_1a0b261bd5afda8c4fdb4565507ab7aa83" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool arrow::fs::HadoopFileSystem::Equals</definition>
        <argsstring>(const FileSystem &amp;other) const override</argsstring>
        <name>Equals</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1ac0a0a670a467fa073bb02b8581731262">Equals</reimplements>
        <param>
          <type>const <ref refid="classarrow_1_1fs_1_1_file_system" kindref="compound">FileSystem</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/hdfs.h" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_hadoop_file_system_1a751760df9a2f2d62e7e4b5052c879c78" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; <ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref> &gt;</type>
        <definition>Result&lt;FileInfo&gt; arrow::fs::HadoopFileSystem::GetFileInfo</definition>
        <argsstring>(const std::string &amp;path) override</argsstring>
        <name>GetFileInfo</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1ae883cb9d3a7b0523ebb346e5851f6aa9">GetFileInfo</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Get info for the given target. </para>        </briefdescription>
        <detaileddescription>
<para>Any symlink is automatically dereferenced, recursively. A nonexistent or unreachable file returns an Ok status and has a FileType of value NotFound. An error status indicates a truly exceptional condition (low-level I/O error, etc.). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/hdfs.h" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_hadoop_file_system_1a546e34a045eaa5cf111e2be742726f03" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::vector&lt; <ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref> &gt; &gt;</type>
        <definition>Result&lt;std::vector&lt;FileInfo&gt; &gt; arrow::fs::HadoopFileSystem::GetFileInfo</definition>
        <argsstring>(const FileSelector &amp;select) override</argsstring>
        <name>GetFileInfo</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1ad472382e0a5e63010e58eb511afb9430">GetFileInfo</reimplements>
        <param>
          <type>const <ref refid="structarrow_1_1fs_1_1_file_selector" kindref="compound">FileSelector</ref> &amp;</type>
          <declname>select</declname>
        </param>
        <briefdescription>
<para>Same, according to a selector. </para>        </briefdescription>
        <detaileddescription>
<para>The selector&apos;s base directory will not be part of the results, even if it exists. If it doesn&apos;t exist, see <computeroutput><ref refid="structarrow_1_1fs_1_1_file_selector_1aead1e24f5aa8bb7a3e893436cde83ea7" kindref="member">FileSelector::allow_not_found</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/hdfs.h" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_hadoop_file_system_1a8ae0bb1cf990a77d2c4706133fe463d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::fs::HadoopFileSystem::CreateDir</definition>
        <argsstring>(const std::string &amp;path, bool recursive=true) override</argsstring>
        <name>CreateDir</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1aff4191ded194fc0d473608264b05ee86">CreateDir</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>recursive</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Create a directory and subdirectories. </para>        </briefdescription>
        <detaileddescription>
<para>This function succeeds if the directory already exists. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/hdfs.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_hadoop_file_system_1a0e31c1cd8826eb7c6ba7fb2ae094104b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::fs::HadoopFileSystem::DeleteDir</definition>
        <argsstring>(const std::string &amp;path) override</argsstring>
        <name>DeleteDir</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1aa6d2d675596ee51935cc4baa9d30ea72">DeleteDir</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Delete a directory and its contents, recursively. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/hdfs.h" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_hadoop_file_system_1ad7ea0931d029f7392ea8a5479d9f7801" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::fs::HadoopFileSystem::DeleteDirContents</definition>
        <argsstring>(const std::string &amp;path) override</argsstring>
        <name>DeleteDirContents</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1a908dd35485e74e91d420adf4b3eb80b2">DeleteDirContents</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Delete a directory&apos;s contents, recursively. </para>        </briefdescription>
        <detaileddescription>
<para>Like DeleteDir, but doesn&apos;t delete the directory itself. Passing an empty path (&quot;&quot;) will wipe the entire filesystem tree. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/hdfs.h" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_hadoop_file_system_1a7b41afc1c5d4f6d01b753ddd5eec3dfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::fs::HadoopFileSystem::DeleteFile</definition>
        <argsstring>(const std::string &amp;path) override</argsstring>
        <name>DeleteFile</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1ac9698e825f1abbe2497850c7d25efa1c">DeleteFile</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Delete a file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/hdfs.h" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_hadoop_file_system_1a8da6de9a71ea147f43d2e7176f9db7c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::fs::HadoopFileSystem::Move</definition>
        <argsstring>(const std::string &amp;src, const std::string &amp;dest) override</argsstring>
        <name>Move</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1a3ab3b162b3ea640076bbd46702735419">Move</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
<para>Move / rename a file or directory. </para>        </briefdescription>
        <detaileddescription>
<para>If the destination exists:<itemizedlist>
<listitem><para>if it is a non-empty directory, an error is returned</para></listitem><listitem><para>otherwise, if it has the same type as the source, it is replaced</para></listitem><listitem><para>otherwise, behavior is unspecified (implementation-dependent). </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/hdfs.h" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_hadoop_file_system_1aabebe495dcbadd32eab6505e7ef271ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::fs::HadoopFileSystem::CopyFile</definition>
        <argsstring>(const std::string &amp;src, const std::string &amp;dest) override</argsstring>
        <name>CopyFile</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1a7222bd63bfcb1ac2a48367ce9e5c9667">CopyFile</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
<para>Copy a file. </para>        </briefdescription>
        <detaileddescription>
<para>If the destination exists and is a directory, an error is returned. Otherwise, it is replaced. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/hdfs.h" line="85" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_hadoop_file_system_1aa10340ef6270b0cca4c8ec0f0cfbb928" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_input_stream" kindref="compound">io::InputStream</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;io::InputStream&gt; &gt; arrow::fs::HadoopFileSystem::OpenInputStream</definition>
        <argsstring>(const std::string &amp;path) override</argsstring>
        <name>OpenInputStream</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1a4baf948a7ebca79d1b085942f32ba65f">OpenInputStream</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Open an input stream for sequential reading. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/hdfs.h" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_hadoop_file_system_1aaca8f88888705150aeee8c7b8eb14c41" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_random_access_file" kindref="compound">io::RandomAccessFile</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;io::RandomAccessFile&gt; &gt; arrow::fs::HadoopFileSystem::OpenInputFile</definition>
        <argsstring>(const std::string &amp;path) override</argsstring>
        <name>OpenInputFile</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1a6e401fc8e1b55d66ab5045845dc3fdae">OpenInputFile</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Open an input file for random access reading. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/hdfs.h" line="89" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_hadoop_file_system_1a9ee04654a0d3a7054d2b6f38b446163f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_output_stream" kindref="compound">io::OutputStream</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;io::OutputStream&gt; &gt; arrow::fs::HadoopFileSystem::OpenOutputStream</definition>
        <argsstring>(const std::string &amp;path) override</argsstring>
        <name>OpenOutputStream</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1ae4ebffb159bef1199092d79c05703415">OpenOutputStream</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Open an output stream for sequential writing. </para>        </briefdescription>
        <detaileddescription>
<para>If the target already exists, existing data is truncated. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/hdfs.h" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_hadoop_file_system_1a042b64a4bdf7da9e1af785f39cd0602e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_output_stream" kindref="compound">io::OutputStream</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;io::OutputStream&gt; &gt; arrow::fs::HadoopFileSystem::OpenAppendStream</definition>
        <argsstring>(const std::string &amp;path) override</argsstring>
        <name>OpenAppendStream</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1ada6e16933e3f62a36cb8ebbcb9c94c46">OpenAppendStream</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Open an output stream for appending. </para>        </briefdescription>
        <detaileddescription>
<para>If the target doesn&apos;t exist, a new empty file is created. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/hdfs.h" line="93" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1fs_1_1_hadoop_file_system_1a3695944c48e1d44a62909a781f7bb740" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1fs_1_1_hadoop_file_system" kindref="compound">HadoopFileSystem</ref> &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;HadoopFileSystem&gt; &gt; arrow::fs::HadoopFileSystem::Make</definition>
        <argsstring>(const HdfsOptions &amp;options)</argsstring>
        <name>Make</name>
        <param>
          <type>const <ref refid="structarrow_1_1fs_1_1_hdfs_options" kindref="compound">HdfsOptions</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Create a HdfsFileSystem instance from the given options. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/hdfs.h" line="97" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classarrow_1_1fs_1_1_hadoop_file_system_1a4e369a92278a99819c546833795cf96a" prot="protected" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::fs::HadoopFileSystem::HadoopFileSystem</definition>
        <argsstring>(const HdfsOptions &amp;options)</argsstring>
        <name>HadoopFileSystem</name>
        <param>
          <type>const <ref refid="structarrow_1_1fs_1_1_hdfs_options" kindref="compound">HdfsOptions</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/hdfs.h" line="100" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>HDFS-backed <ref refid="classarrow_1_1fs_1_1_file_system" kindref="compound">FileSystem</ref> implementation. </para>    </briefdescription>
    <detaileddescription>
<para>implementation notes:<itemizedlist>
<listitem><para>This is a wrapper of arrow/io/hdfs, so we can use <ref refid="classarrow_1_1fs_1_1_file_system" kindref="compound">FileSystem</ref> API to handle hdfs. </para></listitem></itemizedlist>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="2124">
        <label>std::enable_shared_from_this&lt; FileSystem &gt;</label>
      </node>
      <node id="2123">
        <label>arrow::fs::FileSystem</label>
        <link refid="classarrow_1_1fs_1_1_file_system"/>
        <childnode refid="2124" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2122">
        <label>arrow::fs::HadoopFileSystem</label>
        <link refid="classarrow_1_1fs_1_1_hadoop_file_system"/>
        <childnode refid="2123" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2127">
        <label>std::enable_shared_from_this&lt; FileSystem &gt;</label>
      </node>
      <node id="2126">
        <label>arrow::fs::FileSystem</label>
        <link refid="classarrow_1_1fs_1_1_file_system"/>
        <childnode refid="2127" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2125">
        <label>arrow::fs::HadoopFileSystem</label>
        <link refid="classarrow_1_1fs_1_1_hadoop_file_system"/>
        <childnode refid="2126" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/filesystem/hdfs.h" line="61" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/hdfs.h" bodystart="61" bodyend="104"/>
    <listofallmembers>
      <member refid="classarrow_1_1fs_1_1_hadoop_file_system_1aabebe495dcbadd32eab6505e7ef271ff" prot="public" virt="virtual"><scope>arrow::fs::HadoopFileSystem</scope><name>CopyFile</name></member>
      <member refid="classarrow_1_1fs_1_1_hadoop_file_system_1a8ae0bb1cf990a77d2c4706133fe463d2" prot="public" virt="virtual"><scope>arrow::fs::HadoopFileSystem</scope><name>CreateDir</name></member>
      <member refid="classarrow_1_1fs_1_1_hadoop_file_system_1a0e31c1cd8826eb7c6ba7fb2ae094104b" prot="public" virt="virtual"><scope>arrow::fs::HadoopFileSystem</scope><name>DeleteDir</name></member>
      <member refid="classarrow_1_1fs_1_1_hadoop_file_system_1ad7ea0931d029f7392ea8a5479d9f7801" prot="public" virt="virtual"><scope>arrow::fs::HadoopFileSystem</scope><name>DeleteDirContents</name></member>
      <member refid="classarrow_1_1fs_1_1_hadoop_file_system_1a7b41afc1c5d4f6d01b753ddd5eec3dfc" prot="public" virt="virtual"><scope>arrow::fs::HadoopFileSystem</scope><name>DeleteFile</name></member>
      <member refid="classarrow_1_1fs_1_1_file_system_1aabbcfc55e53a8bcf3d88ece0b64fb400" prot="public" virt="virtual"><scope>arrow::fs::HadoopFileSystem</scope><name>DeleteFiles</name></member>
      <member refid="classarrow_1_1fs_1_1_hadoop_file_system_1a0b261bd5afda8c4fdb4565507ab7aa83" prot="public" virt="virtual"><scope>arrow::fs::HadoopFileSystem</scope><name>Equals</name></member>
      <member refid="classarrow_1_1fs_1_1_file_system_1aa0bfcdc572b747ce2b650147d8ddb888" prot="public" virt="virtual" ambiguityscope="arrow::fs::FileSystem::"><scope>arrow::fs::HadoopFileSystem</scope><name>Equals</name></member>
      <member refid="classarrow_1_1fs_1_1_hadoop_file_system_1a751760df9a2f2d62e7e4b5052c879c78" prot="public" virt="virtual"><scope>arrow::fs::HadoopFileSystem</scope><name>GetFileInfo</name></member>
      <member refid="classarrow_1_1fs_1_1_hadoop_file_system_1a546e34a045eaa5cf111e2be742726f03" prot="public" virt="virtual"><scope>arrow::fs::HadoopFileSystem</scope><name>GetFileInfo</name></member>
      <member refid="classarrow_1_1fs_1_1_file_system_1a4e7ff03e540cfba191d9c42aa6bba060" prot="public" virt="virtual" ambiguityscope="arrow::fs::FileSystem::"><scope>arrow::fs::HadoopFileSystem</scope><name>GetFileInfo</name></member>
      <member refid="classarrow_1_1fs_1_1_hadoop_file_system_1a4e369a92278a99819c546833795cf96a" prot="protected" virt="non-virtual"><scope>arrow::fs::HadoopFileSystem</scope><name>HadoopFileSystem</name></member>
      <member refid="classarrow_1_1fs_1_1_hadoop_file_system_1a5f5b95cf09c291cd15c42cfacfdd65eb" prot="protected" virt="non-virtual"><scope>arrow::fs::HadoopFileSystem</scope><name>impl_</name></member>
      <member refid="classarrow_1_1fs_1_1_hadoop_file_system_1a3695944c48e1d44a62909a781f7bb740" prot="public" virt="non-virtual"><scope>arrow::fs::HadoopFileSystem</scope><name>Make</name></member>
      <member refid="classarrow_1_1fs_1_1_hadoop_file_system_1a8da6de9a71ea147f43d2e7176f9db7c6" prot="public" virt="virtual"><scope>arrow::fs::HadoopFileSystem</scope><name>Move</name></member>
      <member refid="classarrow_1_1fs_1_1_file_system_1a73d5af5c51cc4cf569fabcea48781721" prot="public" virt="virtual"><scope>arrow::fs::HadoopFileSystem</scope><name>NormalizePath</name></member>
      <member refid="classarrow_1_1fs_1_1_hadoop_file_system_1a042b64a4bdf7da9e1af785f39cd0602e" prot="public" virt="virtual"><scope>arrow::fs::HadoopFileSystem</scope><name>OpenAppendStream</name></member>
      <member refid="classarrow_1_1fs_1_1_hadoop_file_system_1aaca8f88888705150aeee8c7b8eb14c41" prot="public" virt="virtual"><scope>arrow::fs::HadoopFileSystem</scope><name>OpenInputFile</name></member>
      <member refid="classarrow_1_1fs_1_1_hadoop_file_system_1aa10340ef6270b0cca4c8ec0f0cfbb928" prot="public" virt="virtual"><scope>arrow::fs::HadoopFileSystem</scope><name>OpenInputStream</name></member>
      <member refid="classarrow_1_1fs_1_1_hadoop_file_system_1a9ee04654a0d3a7054d2b6f38b446163f" prot="public" virt="virtual"><scope>arrow::fs::HadoopFileSystem</scope><name>OpenOutputStream</name></member>
      <member refid="classarrow_1_1fs_1_1_hadoop_file_system_1aadf17a7ebbfd32ce296d806d16e41680" prot="public" virt="non-virtual"><scope>arrow::fs::HadoopFileSystem</scope><name>options</name></member>
      <member refid="classarrow_1_1fs_1_1_hadoop_file_system_1af91c96db65100dd2384586a9ad3daf1b" prot="public" virt="virtual"><scope>arrow::fs::HadoopFileSystem</scope><name>type_name</name></member>
      <member refid="classarrow_1_1fs_1_1_file_system_1a364917767b1d2e11b3b8967a4ee08c30" prot="public" virt="virtual"><scope>arrow::fs::HadoopFileSystem</scope><name>~FileSystem</name></member>
      <member refid="classarrow_1_1fs_1_1_hadoop_file_system_1ac762d5dbbc9849876addebb28f4ad089" prot="public" virt="non-virtual"><scope>arrow::fs::HadoopFileSystem</scope><name>~HadoopFileSystem</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
