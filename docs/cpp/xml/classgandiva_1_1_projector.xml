<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classgandiva_1_1_projector" kind="class" language="C++" prot="public">
    <compoundname>gandiva::Projector</compoundname>
    <includes refid="gandiva_2projector_8h" local="no">gandiva/projector.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classgandiva_1_1_projector_1a086dba1b05a120cdd647472ccada8e6e" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classgandiva_1_1_l_l_v_m_generator" kindref="compound">LLVMGenerator</ref> &gt;</type>
        <definition>std::unique_ptr&lt;LLVMGenerator&gt; gandiva::Projector::llvm_generator_</definition>
        <argsstring></argsstring>
        <name>llvm_generator_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/projector.h" line="137" column="1" bodyfile="/arrow/cpp/src/gandiva/projector.h" bodystart="137" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgandiva_1_1_projector_1a80f1d8637a07ba639dca6a28187b10c9" prot="private" static="no" mutable="no">
        <type><ref refid="namespacegandiva_1a650de9b918fc7348689854c307e50d56" kindref="member">SchemaPtr</ref></type>
        <definition>SchemaPtr gandiva::Projector::schema_</definition>
        <argsstring></argsstring>
        <name>schema_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/projector.h" line="138" column="1" bodyfile="/arrow/cpp/src/gandiva/projector.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgandiva_1_1_projector_1a9c75cd135cca58e2690e5d7bc98d7c4e" prot="private" static="no" mutable="no">
        <type><ref refid="namespacegandiva_1adb95d509a13fa694f593ecb37a7c68ac" kindref="member">FieldVector</ref></type>
        <definition>FieldVector gandiva::Projector::output_fields_</definition>
        <argsstring></argsstring>
        <name>output_fields_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/projector.h" line="139" column="1" bodyfile="/arrow/cpp/src/gandiva/projector.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgandiva_1_1_projector_1a251a2068f6bed2b0e3b8d75c94cfd5fc" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classgandiva_1_1_configuration" kindref="compound">Configuration</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Configuration&gt; gandiva::Projector::configuration_</definition>
        <argsstring></argsstring>
        <name>configuration_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/projector.h" line="140" column="1" bodyfile="/arrow/cpp/src/gandiva/projector.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgandiva_1_1_projector_1a388f12d076b3c09bb2eb20144a663d8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gandiva::Projector::~Projector</definition>
        <argsstring>()</argsstring>
        <name>~Projector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/projector.h" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_projector_1ae893931ddae840cea31b1945538545b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>Status gandiva::Projector::Evaluate</definition>
        <argsstring>(const arrow::RecordBatch &amp;batch, arrow::MemoryPool *pool, arrow::ArrayVector *output)</argsstring>
        <name>Evaluate</name>
        <param>
          <type>const <ref refid="classarrow_1_1_record_batch" kindref="compound">arrow::RecordBatch</ref> &amp;</type>
          <declname>batch</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">arrow::MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type><ref refid="namespacearrow_1ad77c54b51dac02d857f3a26d11ed58b3" kindref="member">arrow::ArrayVector</ref> *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Evaluate the specified record batch, and return the allocated and populated output arrays. </para>        </briefdescription>
        <detaileddescription>
<para>The output arrays will be allocated from the memory pool &apos;pool&apos;, and added to the vector &apos;output&apos;.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">batch</parametername>
</parameternamelist>
<parameterdescription>
<para>the record batch. schema should be the same as the one in &apos;Make&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pool</parametername>
</parameternamelist>
<parameterdescription>
<para>memory pool used to allocate output arrays (if required). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">output</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector of allocated/populated arrays. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/projector.h" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_projector_1ae3c8eaa78ea19a4e4aab81f9e287974b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>Status gandiva::Projector::Evaluate</definition>
        <argsstring>(const arrow::RecordBatch &amp;batch, const ArrayDataVector &amp;output)</argsstring>
        <name>Evaluate</name>
        <param>
          <type>const <ref refid="classarrow_1_1_record_batch" kindref="compound">arrow::RecordBatch</ref> &amp;</type>
          <declname>batch</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegandiva_1a0fbce3498a8553897e2ff8371059c8bd" kindref="member">ArrayDataVector</ref> &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Evaluate the specified record batch, and populate the output arrays. </para>        </briefdescription>
        <detaileddescription>
<para>The output arrays of sufficient capacity must be allocated by the caller.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">batch</parametername>
</parameternamelist>
<parameterdescription>
<para>the record batch. schema should be the same as the one in &apos;Make&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">output</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of arrays, the arrays are allocated by the caller and populated by Evaluate. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/projector.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_projector_1a26f59a3485b66a2ab52687039b6a5f40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>Status gandiva::Projector::Evaluate</definition>
        <argsstring>(const arrow::RecordBatch &amp;batch, const SelectionVector *selection_vector, arrow::MemoryPool *pool, arrow::ArrayVector *output)</argsstring>
        <name>Evaluate</name>
        <param>
          <type>const <ref refid="classarrow_1_1_record_batch" kindref="compound">arrow::RecordBatch</ref> &amp;</type>
          <declname>batch</declname>
        </param>
        <param>
          <type>const <ref refid="classgandiva_1_1_selection_vector" kindref="compound">SelectionVector</ref> *</type>
          <declname>selection_vector</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">arrow::MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type><ref refid="namespacearrow_1ad77c54b51dac02d857f3a26d11ed58b3" kindref="member">arrow::ArrayVector</ref> *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Evaluate the specified record batch, and return the allocated and populated output arrays. </para>        </briefdescription>
        <detaileddescription>
<para>The output arrays will be allocated from the memory pool &apos;pool&apos;, and added to the vector &apos;output&apos;.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">batch</parametername>
</parameternamelist>
<parameterdescription>
<para>the record batch. schema should be the same as the one in &apos;Make&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">selection_vector</parametername>
</parameternamelist>
<parameterdescription>
<para>selection vector which has filtered row positions. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pool</parametername>
</parameternamelist>
<parameterdescription>
<para>memory pool used to allocate output arrays (if required). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">output</parametername>
</parameternamelist>
<parameterdescription>
<para>the vector of allocated/populated arrays. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/projector.h" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_projector_1a6777c47ea9e11c085ba90a111e1d61a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>Status gandiva::Projector::Evaluate</definition>
        <argsstring>(const arrow::RecordBatch &amp;batch, const SelectionVector *selection_vector, const ArrayDataVector &amp;output)</argsstring>
        <name>Evaluate</name>
        <param>
          <type>const <ref refid="classarrow_1_1_record_batch" kindref="compound">arrow::RecordBatch</ref> &amp;</type>
          <declname>batch</declname>
        </param>
        <param>
          <type>const <ref refid="classgandiva_1_1_selection_vector" kindref="compound">SelectionVector</ref> *</type>
          <declname>selection_vector</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegandiva_1a0fbce3498a8553897e2ff8371059c8bd" kindref="member">ArrayDataVector</ref> &amp;</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Evaluate the specified record batch, and populate the output arrays at the filtered positions. </para>        </briefdescription>
        <detaileddescription>
<para>The output arrays of sufficient capacity must be allocated by the caller.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">batch</parametername>
</parameternamelist>
<parameterdescription>
<para>the record batch. schema should be the same as the one in &apos;Make&apos; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">selection_vector</parametername>
</parameternamelist>
<parameterdescription>
<para>selection vector which has the filtered row positions </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="inout">output</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of arrays, the arrays are allocated by the caller and populated by Evaluate. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/projector.h" line="117" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_projector_1a93ff669b959b30dcaba283c5452c2198" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string gandiva::Projector::DumpIR</definition>
        <argsstring>()</argsstring>
        <name>DumpIR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/projector.h" line="120" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classgandiva_1_1_projector_1a952b4e76cd11a96457cac008aebf4f0e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>static Status gandiva::Projector::Make</definition>
        <argsstring>(SchemaPtr schema, const ExpressionVector &amp;exprs, std::shared_ptr&lt; Projector &gt; *projector)</argsstring>
        <name>Make</name>
        <param>
          <type><ref refid="namespacegandiva_1a650de9b918fc7348689854c307e50d56" kindref="member">SchemaPtr</ref></type>
          <declname>schema</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegandiva_1aad814820a6a80cb656b0f09decdc4cb9" kindref="member">ExpressionVector</ref> &amp;</type>
          <declname>exprs</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classgandiva_1_1_projector" kindref="compound">Projector</ref> &gt; *</type>
          <declname>projector</declname>
        </param>
        <briefdescription>
<para>Build a default projector for the given schema to evaluate the vector of expressions. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">schema</parametername>
</parameternamelist>
<parameterdescription>
<para>schema for the record batches, and the expressions. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">exprs</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of expressions. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">projector</parametername>
</parameternamelist>
<parameterdescription>
<para>the returned projector object </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/projector.h" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_projector_1a7a49c73ad8fa1de31166796075b4ec25" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>static Status gandiva::Projector::Make</definition>
        <argsstring>(SchemaPtr schema, const ExpressionVector &amp;exprs, std::shared_ptr&lt; Configuration &gt; configuration, std::shared_ptr&lt; Projector &gt; *projector)</argsstring>
        <name>Make</name>
        <param>
          <type><ref refid="namespacegandiva_1a650de9b918fc7348689854c307e50d56" kindref="member">SchemaPtr</ref></type>
          <declname>schema</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegandiva_1aad814820a6a80cb656b0f09decdc4cb9" kindref="member">ExpressionVector</ref> &amp;</type>
          <declname>exprs</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classgandiva_1_1_configuration" kindref="compound">Configuration</ref> &gt;</type>
          <declname>configuration</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classgandiva_1_1_projector" kindref="compound">Projector</ref> &gt; *</type>
          <declname>projector</declname>
        </param>
        <briefdescription>
<para>Build a projector for the given schema to evaluate the vector of expressions. </para>        </briefdescription>
        <detaileddescription>
<para>Customize the projector with runtime configuration.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">schema</parametername>
</parameternamelist>
<parameterdescription>
<para>schema for the record batches, and the expressions. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">exprs</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of expressions. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">configuration</parametername>
</parameternamelist>
<parameterdescription>
<para>run time configuration. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">projector</parametername>
</parameternamelist>
<parameterdescription>
<para>the returned projector object </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/projector.h" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_projector_1adb9e3e5ba118bc886776a4063e81a552" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>static Status gandiva::Projector::Make</definition>
        <argsstring>(SchemaPtr schema, const ExpressionVector &amp;exprs, SelectionVector::Mode selection_vector_mode, std::shared_ptr&lt; Configuration &gt; configuration, std::shared_ptr&lt; Projector &gt; *projector)</argsstring>
        <name>Make</name>
        <param>
          <type><ref refid="namespacegandiva_1a650de9b918fc7348689854c307e50d56" kindref="member">SchemaPtr</ref></type>
          <declname>schema</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegandiva_1aad814820a6a80cb656b0f09decdc4cb9" kindref="member">ExpressionVector</ref> &amp;</type>
          <declname>exprs</declname>
        </param>
        <param>
          <type><ref refid="classgandiva_1_1_selection_vector_1a6b95945ed4cd8c0a38f643d25e3a8fa0" kindref="member">SelectionVector::Mode</ref></type>
          <declname>selection_vector_mode</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classgandiva_1_1_configuration" kindref="compound">Configuration</ref> &gt;</type>
          <declname>configuration</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classgandiva_1_1_projector" kindref="compound">Projector</ref> &gt; *</type>
          <declname>projector</declname>
        </param>
        <briefdescription>
<para>Build a projector for the given schema to evaluate the vector of expressions. </para>        </briefdescription>
        <detaileddescription>
<para>Customize the projector with runtime configuration.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">schema</parametername>
</parameternamelist>
<parameterdescription>
<para>schema for the record batches, and the expressions. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">exprs</parametername>
</parameternamelist>
<parameterdescription>
<para>vector of expressions. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">selection_vector_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>mode of selection vector </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">configuration</parametername>
</parameternamelist>
<parameterdescription>
<para>run time configuration. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">projector</parametername>
</parameternamelist>
<parameterdescription>
<para>the returned projector object </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/projector.h" line="75" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classgandiva_1_1_projector_1afb4d4421992b243e3f9b578aa85b5c65" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gandiva::Projector::Projector</definition>
        <argsstring>(std::unique_ptr&lt; LLVMGenerator &gt; llvm_generator, SchemaPtr schema, const FieldVector &amp;output_fields, std::shared_ptr&lt; Configuration &gt;)</argsstring>
        <name>Projector</name>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classgandiva_1_1_l_l_v_m_generator" kindref="compound">LLVMGenerator</ref> &gt;</type>
          <declname>llvm_generator</declname>
        </param>
        <param>
          <type><ref refid="namespacegandiva_1a650de9b918fc7348689854c307e50d56" kindref="member">SchemaPtr</ref></type>
          <declname>schema</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegandiva_1adb95d509a13fa694f593ecb37a7c68ac" kindref="member">FieldVector</ref> &amp;</type>
          <declname>output_fields</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classgandiva_1_1_configuration" kindref="compound">Configuration</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/projector.h" line="123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_projector_1a82b0c0c14d88c5deec6a466d6b99d998" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>Status gandiva::Projector::AllocArrayData</definition>
        <argsstring>(const DataTypePtr &amp;type, int64_t num_records, arrow::MemoryPool *pool, ArrayDataPtr *array_data)</argsstring>
        <name>AllocArrayData</name>
        <param>
          <type>const <ref refid="namespacegandiva_1a3e3446d98cf1dcf281b0d3f6c16a65d3" kindref="member">DataTypePtr</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>num_records</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">arrow::MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type><ref refid="namespacegandiva_1a7843b88b163b4c20c5ccd06c8704fa29" kindref="member">ArrayDataPtr</ref> *</type>
          <declname>array_data</declname>
        </param>
        <briefdescription>
<para>Allocate an ArrowData of length &apos;length&apos;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/projector.h" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_projector_1a215e8cc2225363de5c9abcdb3ce24629" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>Status gandiva::Projector::ValidateArrayDataCapacity</definition>
        <argsstring>(const arrow::ArrayData &amp;array_data, const arrow::Field &amp;field, int64_t num_records)</argsstring>
        <name>ValidateArrayDataCapacity</name>
        <param>
          <type>const <ref refid="structarrow_1_1_array_data" kindref="compound">arrow::ArrayData</ref> &amp;</type>
          <declname>array_data</declname>
        </param>
        <param>
          <type>const <ref refid="classarrow_1_1_field" kindref="compound">arrow::Field</ref> &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>num_records</declname>
        </param>
        <briefdescription>
<para>Validate that the ArrayData has sufficient capacity to accommodate &apos;num_records&apos;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/projector.h" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_projector_1a12d216c61ca1298e5d1384ba2ff3fc0a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>Status gandiva::Projector::ValidateEvaluateArgsCommon</definition>
        <argsstring>(const arrow::RecordBatch &amp;batch)</argsstring>
        <name>ValidateEvaluateArgsCommon</name>
        <param>
          <type>const <ref refid="classarrow_1_1_record_batch" kindref="compound">arrow::RecordBatch</ref> &amp;</type>
          <declname>batch</declname>
        </param>
        <briefdescription>
<para>Validate the common args for <ref refid="classgandiva_1_1_projector_1ae893931ddae840cea31b1945538545b0" kindref="member">Evaluate()</ref> APIs. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/projector.h" line="135" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>projection using expressions. </para>    </briefdescription>
    <detaileddescription>
<para>A projector is built for a specific schema and vector of expressions. Once the projector is built, it can be used to evaluate many row batches. </para>    </detaileddescription>
    <location file="/arrow/cpp/src/gandiva/projector.h" line="41" column="1" bodyfile="/arrow/cpp/src/gandiva/projector.h" bodystart="41" bodyend="141"/>
    <listofallmembers>
      <member refid="classgandiva_1_1_projector_1a82b0c0c14d88c5deec6a466d6b99d998" prot="private" virt="non-virtual"><scope>gandiva::Projector</scope><name>AllocArrayData</name></member>
      <member refid="classgandiva_1_1_projector_1a251a2068f6bed2b0e3b8d75c94cfd5fc" prot="private" virt="non-virtual"><scope>gandiva::Projector</scope><name>configuration_</name></member>
      <member refid="classgandiva_1_1_projector_1a93ff669b959b30dcaba283c5452c2198" prot="public" virt="non-virtual"><scope>gandiva::Projector</scope><name>DumpIR</name></member>
      <member refid="classgandiva_1_1_projector_1ae893931ddae840cea31b1945538545b0" prot="public" virt="non-virtual"><scope>gandiva::Projector</scope><name>Evaluate</name></member>
      <member refid="classgandiva_1_1_projector_1ae3c8eaa78ea19a4e4aab81f9e287974b" prot="public" virt="non-virtual"><scope>gandiva::Projector</scope><name>Evaluate</name></member>
      <member refid="classgandiva_1_1_projector_1a26f59a3485b66a2ab52687039b6a5f40" prot="public" virt="non-virtual"><scope>gandiva::Projector</scope><name>Evaluate</name></member>
      <member refid="classgandiva_1_1_projector_1a6777c47ea9e11c085ba90a111e1d61a5" prot="public" virt="non-virtual"><scope>gandiva::Projector</scope><name>Evaluate</name></member>
      <member refid="classgandiva_1_1_projector_1a086dba1b05a120cdd647472ccada8e6e" prot="private" virt="non-virtual"><scope>gandiva::Projector</scope><name>llvm_generator_</name></member>
      <member refid="classgandiva_1_1_projector_1a952b4e76cd11a96457cac008aebf4f0e" prot="public" virt="non-virtual"><scope>gandiva::Projector</scope><name>Make</name></member>
      <member refid="classgandiva_1_1_projector_1a7a49c73ad8fa1de31166796075b4ec25" prot="public" virt="non-virtual"><scope>gandiva::Projector</scope><name>Make</name></member>
      <member refid="classgandiva_1_1_projector_1adb9e3e5ba118bc886776a4063e81a552" prot="public" virt="non-virtual"><scope>gandiva::Projector</scope><name>Make</name></member>
      <member refid="classgandiva_1_1_projector_1a9c75cd135cca58e2690e5d7bc98d7c4e" prot="private" virt="non-virtual"><scope>gandiva::Projector</scope><name>output_fields_</name></member>
      <member refid="classgandiva_1_1_projector_1afb4d4421992b243e3f9b578aa85b5c65" prot="private" virt="non-virtual"><scope>gandiva::Projector</scope><name>Projector</name></member>
      <member refid="classgandiva_1_1_projector_1a80f1d8637a07ba639dca6a28187b10c9" prot="private" virt="non-virtual"><scope>gandiva::Projector</scope><name>schema_</name></member>
      <member refid="classgandiva_1_1_projector_1a215e8cc2225363de5c9abcdb3ce24629" prot="private" virt="non-virtual"><scope>gandiva::Projector</scope><name>ValidateArrayDataCapacity</name></member>
      <member refid="classgandiva_1_1_projector_1a12d216c61ca1298e5d1384ba2ff3fc0a" prot="private" virt="non-virtual"><scope>gandiva::Projector</scope><name>ValidateEvaluateArgsCommon</name></member>
      <member refid="classgandiva_1_1_projector_1a388f12d076b3c09bb2eb20144a663d8e" prot="public" virt="non-virtual"><scope>gandiva::Projector</scope><name>~Projector</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
