<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_base_list_builder" kind="class" language="C++" prot="public">
    <compoundname>arrow::BaseListBuilder</compoundname>
    <basecompoundref refid="classarrow_1_1_array_builder" prot="public" virt="non-virtual">arrow::ArrayBuilder</basecompoundref>
    <includes refid="builder__nested_8h" local="no">arrow/array/builder_nested.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>TYPE</declname>
        <defname>TYPE</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classarrow_1_1_base_list_builder_1a1586a61bdd6589ebf50956af61760930" prot="public" static="no">
        <type>TYPE</type>
        <definition>using arrow::BaseListBuilder&lt; TYPE &gt;::TypeClass =  TYPE</definition>
        <argsstring></argsstring>
        <name>TypeClass</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="37" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_nested.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classarrow_1_1_base_list_builder_1a4a684e5301785b173ddda7430b1c0e22" prot="public" static="no">
        <type>typename TypeClass::offset_type</type>
        <definition>using arrow::BaseListBuilder&lt; TYPE &gt;::offset_type =  typename TypeClass::offset_type</definition>
        <argsstring></argsstring>
        <name>offset_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="38" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_nested.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classarrow_1_1_base_list_builder_1a9ff0d0d1d84ef6e57e313facd2f246c3" prot="protected" static="no" mutable="no">
        <type><ref refid="classarrow_1_1_typed_buffer_builder" kindref="compound">TypedBufferBuilder</ref>&lt; <ref refid="classarrow_1_1_base_list_builder_1a4a684e5301785b173ddda7430b1c0e22" kindref="member">offset_type</ref> &gt;</type>
        <definition>TypedBufferBuilder&lt;offset_type&gt; arrow::BaseListBuilder&lt; TYPE &gt;::offsets_builder_</definition>
        <argsstring></argsstring>
        <name>offsets_builder_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="139" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_nested.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_base_list_builder_1afff8260b6999ef8f40b4ae438c577900" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array_builder" kindref="compound">ArrayBuilder</ref> &gt;</type>
        <definition>std::shared_ptr&lt;ArrayBuilder&gt; arrow::BaseListBuilder&lt; TYPE &gt;::value_builder_</definition>
        <argsstring></argsstring>
        <name>value_builder_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="140" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_nested.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_base_list_builder_1ab3c06311b7fe489012e8c50fcc02ec50" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Field&gt; arrow::BaseListBuilder&lt; TYPE &gt;::value_field_</definition>
        <argsstring></argsstring>
        <name>value_field_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="141" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_nested.h" bodystart="141" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1_base_list_builder_1a079b2be2a52ddb19ddb3dee9a485bfd9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::BaseListBuilder&lt; TYPE &gt;::BaseListBuilder</definition>
        <argsstring>(MemoryPool *pool, std::shared_ptr&lt; ArrayBuilder &gt; const &amp;value_builder, const std::shared_ptr&lt; DataType &gt; &amp;type)</argsstring>
        <name>BaseListBuilder</name>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array_builder" kindref="compound">ArrayBuilder</ref> &gt; const &amp;</type>
          <declname>value_builder</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Use this constructor to incrementally build the value array along with offsets and null bitmap. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="42" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_nested.h" bodystart="42" bodyend="47"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_list_builder_1a93eabbf9ec21a104af65a0fa36164a18" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::BaseListBuilder&lt; TYPE &gt;::BaseListBuilder</definition>
        <argsstring>(MemoryPool *pool, std::shared_ptr&lt; ArrayBuilder &gt; const &amp;value_builder)</argsstring>
        <name>BaseListBuilder</name>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array_builder" kindref="compound">ArrayBuilder</ref> &gt; const &amp;</type>
          <declname>value_builder</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="49" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_nested.h" bodystart="49" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_list_builder_1ae82a9301ca92b957b7db7e1362cffb16" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::BaseListBuilder&lt; TYPE &gt;::Resize</definition>
        <argsstring>(int64_t capacity) override</argsstring>
        <name>Resize</name>
        <reimplements refid="classarrow_1_1_array_builder_1a994d873bec453c33fbaeb995442d520b">Resize</reimplements>
        <param>
          <type>int64_t</type>
          <declname>capacity</declname>
        </param>
        <briefdescription>
<para>Ensure that enough memory has been allocated to fit the indicated number of total elements in the builder, including any that have already been appended. </para>        </briefdescription>
        <detaileddescription>
<para>Does not account for reallocations that may be due to variable size data, like binary values. To make space for incremental appends, use Reserve instead.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum number of total array values to accommodate. Must be greater than the current capacity. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="52" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_nested.h" bodystart="52" bodyend="62"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_list_builder_1a5e18aaf8fc9c940e1adf8d20c3658531" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>void arrow::BaseListBuilder&lt; TYPE &gt;::Reset</definition>
        <argsstring>() override</argsstring>
        <name>Reset</name>
        <reimplements refid="classarrow_1_1_array_builder_1a71a25653bdf242da1b3a317f4fd49a98">Reset</reimplements>
        <briefdescription>
<para>Reset the builder. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="64" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_nested.h" bodystart="64" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_list_builder_1a901b86feaa270241a0f46564a2be9afa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::BaseListBuilder&lt; TYPE &gt;::AppendValues</definition>
        <argsstring>(const offset_type *offsets, int64_t length, const uint8_t *valid_bytes=NULLPTR)</argsstring>
        <name>AppendValues</name>
        <param>
          <type>const <ref refid="classarrow_1_1_base_list_builder_1a4a684e5301785b173ddda7430b1c0e22" kindref="member">offset_type</ref> *</type>
          <declname>offsets</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>valid_bytes</declname>
          <defval><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></defval>
        </param>
        <briefdescription>
<para>Vector append. </para>        </briefdescription>
        <detaileddescription>
<para>If passed, valid_bytes is of equal length to values, and any zero byte will be considered as a null for that slot </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="74" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_nested.h" bodystart="74" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_list_builder_1ada18b5551213c8eb7b7a56dceabaefb7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::BaseListBuilder&lt; TYPE &gt;::Append</definition>
        <argsstring>(bool is_valid=true)</argsstring>
        <name>Append</name>
        <param>
          <type>bool</type>
          <declname>is_valid</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Start a new variable-length list slot. </para>        </briefdescription>
        <detaileddescription>
<para>This function should be called before beginning to append elements to the value builder </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="86" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_nested.h" bodystart="86" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_list_builder_1a5f01529de25a28eeeac92463264bb801" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::BaseListBuilder&lt; TYPE &gt;::AppendNull</definition>
        <argsstring>() final</argsstring>
        <name>AppendNull</name>
        <reimplements refid="classarrow_1_1_array_builder_1a6f7c2fbebb93e8630142dca01a328015">AppendNull</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="92" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_nested.h" bodystart="92" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_list_builder_1aeac3db7650e6fad0c89be433eb79e650" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::BaseListBuilder&lt; TYPE &gt;::AppendNulls</definition>
        <argsstring>(int64_t length) final</argsstring>
        <name>AppendNulls</name>
        <reimplements refid="classarrow_1_1_array_builder_1a0900943af067e85d9fa227123c223b14">AppendNulls</reimplements>
        <param>
          <type>int64_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="94" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_nested.h" bodystart="94" bodyend="103"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_list_builder_1a935a4b7804a1f9eec4e334c31838d679" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::BaseListBuilder&lt; TYPE &gt;::FinishInternal</definition>
        <argsstring>(std::shared_ptr&lt; ArrayData &gt; *out) override</argsstring>
        <name>FinishInternal</name>
        <reimplements refid="classarrow_1_1_array_builder_1a0e0aea1c332b472f3671bea9da5ec473">FinishInternal</reimplements>
        <param>
          <type>std::shared_ptr&lt; <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Return result of builder as an internal generic <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> object. </para>        </briefdescription>
        <detaileddescription>
<para>Resets builder except for dictionary builder</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the finalized <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="105" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_nested.h" bodystart="105" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_list_builder_1af84e8c826e4a14ce8866128608c1d660" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_array_builder" kindref="compound">ArrayBuilder</ref> *</type>
        <definition>ArrayBuilder* arrow::BaseListBuilder&lt; TYPE &gt;::value_builder</definition>
        <argsstring>() const</argsstring>
        <name>value_builder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="127" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_nested.h" bodystart="127" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_list_builder_1a1665bd1f7c2e96da2507950d46e03998" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::BaseListBuilder&lt; TYPE &gt;::type</definition>
        <argsstring>() const override</argsstring>
        <name>type</name>
        <reimplements refid="classarrow_1_1_array_builder_1a39b4b420be1fcf4fe7219fe953eb65c7">type</reimplements>
        <briefdescription>
<para>Return the type of the built <ref refid="classarrow_1_1_array" kindref="compound">Array</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="134" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_nested.h" bodystart="134" bodyend="136"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1_base_list_builder_1ac07f9c0c2d1547125e21226aa8583b38" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr int64_t</type>
        <definition>static constexpr int64_t arrow::BaseListBuilder&lt; TYPE &gt;::maximum_elements</definition>
        <argsstring>()</argsstring>
        <name>maximum_elements</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="130" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_nested.h" bodystart="130" bodyend="132"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classarrow_1_1_base_list_builder_1a347a02df95c2fd8a52f6d919b56aa96b" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::BaseListBuilder&lt; TYPE &gt;::CheckNextOffset</definition>
        <argsstring>() const</argsstring>
        <name>CheckNextOffset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="143" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_nested.h" bodystart="143" bodyend="150"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_list_builder_1a4762c55554790935d6d838ca0a0f1225" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::BaseListBuilder&lt; TYPE &gt;::AppendNextOffset</definition>
        <argsstring>()</argsstring>
        <name>AppendNextOffset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="152" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_nested.h" bodystart="152" bodyend="156"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="232">
        <label>arrow::ArrayBuilder</label>
        <link refid="classarrow_1_1_array_builder"/>
      </node>
      <node id="231">
        <label>arrow::BaseListBuilder&lt; TYPE &gt;</label>
        <link refid="classarrow_1_1_base_list_builder"/>
        <childnode refid="232" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="235">
        <label>arrow::MemoryPool</label>
        <link refid="classarrow_1_1_memory_pool"/>
      </node>
      <node id="236">
        <label>arrow::TypedBufferBuilder&lt; bool &gt;</label>
        <link refid="classarrow_1_1_typed_buffer_builder_3_01bool_01_4"/>
      </node>
      <node id="234">
        <label>arrow::ArrayBuilder</label>
        <link refid="classarrow_1_1_array_builder"/>
        <childnode refid="235" relation="usage">
          <edgelabel>pool_</edgelabel>
        </childnode>
        <childnode refid="236" relation="usage">
          <edgelabel>null_bitmap_builder_</edgelabel>
        </childnode>
      </node>
      <node id="237">
        <label>arrow::TypedBufferBuilder&lt; offset_type &gt;</label>
        <link refid="classarrow_1_1_typed_buffer_builder"/>
      </node>
      <node id="233">
        <label>arrow::BaseListBuilder&lt; TYPE &gt;</label>
        <link refid="classarrow_1_1_base_list_builder"/>
        <childnode refid="234" relation="public-inheritance">
        </childnode>
        <childnode refid="237" relation="usage">
          <edgelabel>offsets_builder_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="35" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_nested.h" bodystart="35" bodyend="157"/>
    <listofallmembers>
      <member refid="classarrow_1_1_array_builder_1a630ea6ee96e26b8f1a2d08b45180fb32" prot="public" virt="non-virtual"><scope>arrow::BaseListBuilder</scope><name>Advance</name></member>
      <member refid="classarrow_1_1_base_list_builder_1ada18b5551213c8eb7b7a56dceabaefb7" prot="public" virt="non-virtual"><scope>arrow::BaseListBuilder</scope><name>Append</name></member>
      <member refid="classarrow_1_1_base_list_builder_1a4762c55554790935d6d838ca0a0f1225" prot="protected" virt="non-virtual"><scope>arrow::BaseListBuilder</scope><name>AppendNextOffset</name></member>
      <member refid="classarrow_1_1_base_list_builder_1a5f01529de25a28eeeac92463264bb801" prot="public" virt="virtual"><scope>arrow::BaseListBuilder</scope><name>AppendNull</name></member>
      <member refid="classarrow_1_1_base_list_builder_1aeac3db7650e6fad0c89be433eb79e650" prot="public" virt="virtual"><scope>arrow::BaseListBuilder</scope><name>AppendNulls</name></member>
      <member refid="classarrow_1_1_array_builder_1a21c1d9818e379f41e6c72df407ae029d" prot="protected" virt="non-virtual"><scope>arrow::BaseListBuilder</scope><name>AppendToBitmap</name></member>
      <member refid="classarrow_1_1_array_builder_1a17c9bf5211cb980518df3bb1c33ba4fc" prot="protected" virt="non-virtual"><scope>arrow::BaseListBuilder</scope><name>AppendToBitmap</name></member>
      <member refid="classarrow_1_1_array_builder_1ab8bb1f62d1eaa27de03c41a2db3d53e3" prot="protected" virt="non-virtual"><scope>arrow::BaseListBuilder</scope><name>AppendToBitmap</name></member>
      <member refid="classarrow_1_1_base_list_builder_1a901b86feaa270241a0f46564a2be9afa" prot="public" virt="non-virtual"><scope>arrow::BaseListBuilder</scope><name>AppendValues</name></member>
      <member refid="classarrow_1_1_array_builder_1ab5fe829691bef00b33894d51e16e6aa5" prot="public" virt="non-virtual"><scope>arrow::BaseListBuilder</scope><name>ArrayBuilder</name></member>
      <member refid="classarrow_1_1_base_list_builder_1a079b2be2a52ddb19ddb3dee9a485bfd9" prot="public" virt="non-virtual"><scope>arrow::BaseListBuilder</scope><name>BaseListBuilder</name></member>
      <member refid="classarrow_1_1_base_list_builder_1a93eabbf9ec21a104af65a0fa36164a18" prot="public" virt="non-virtual"><scope>arrow::BaseListBuilder</scope><name>BaseListBuilder</name></member>
      <member refid="classarrow_1_1_array_builder_1a0236e815af8f62c98bd612eea219cd73" prot="public" virt="non-virtual"><scope>arrow::BaseListBuilder</scope><name>capacity</name></member>
      <member refid="classarrow_1_1_array_builder_1aeb92737fe5ada5b372459705c1690d7e" prot="protected" virt="non-virtual"><scope>arrow::BaseListBuilder</scope><name>capacity_</name></member>
      <member refid="classarrow_1_1_array_builder_1a0d77ad3f24791679196dda8b3ac84437" prot="protected" virt="non-virtual"><scope>arrow::BaseListBuilder</scope><name>CheckCapacity</name></member>
      <member refid="classarrow_1_1_base_list_builder_1a347a02df95c2fd8a52f6d919b56aa96b" prot="protected" virt="non-virtual"><scope>arrow::BaseListBuilder</scope><name>CheckNextOffset</name></member>
      <member refid="classarrow_1_1_array_builder_1aad4a1ed2c24204b1cc21e44ab0ad444b" prot="public" virt="non-virtual"><scope>arrow::BaseListBuilder</scope><name>child</name></member>
      <member refid="classarrow_1_1_array_builder_1a66ce8a6890bf6f222baf1642557d889b" prot="protected" virt="non-virtual"><scope>arrow::BaseListBuilder</scope><name>children_</name></member>
      <member refid="classarrow_1_1_array_builder_1a67b2227edb4b51bc44425f1c8a439819" prot="public" virt="non-virtual"><scope>arrow::BaseListBuilder</scope><name>Finish</name></member>
      <member refid="classarrow_1_1_base_list_builder_1a935a4b7804a1f9eec4e334c31838d679" prot="public" virt="virtual"><scope>arrow::BaseListBuilder</scope><name>FinishInternal</name></member>
      <member refid="classarrow_1_1_array_builder_1a9f90da9e81d9db4bc9277458ba70d46a" prot="protected" virt="non-virtual"><scope>arrow::BaseListBuilder</scope><name>FinishTyped</name></member>
      <member refid="classarrow_1_1_array_builder_1a296ac75b9b3d877192e37681c66513ba" prot="public" virt="non-virtual"><scope>arrow::BaseListBuilder</scope><name>length</name></member>
      <member refid="classarrow_1_1_array_builder_1ae8b7ebc042e6684440bd9e1c77f0f5c1" prot="protected" virt="non-virtual"><scope>arrow::BaseListBuilder</scope><name>length_</name></member>
      <member refid="classarrow_1_1_base_list_builder_1ac07f9c0c2d1547125e21226aa8583b38" prot="public" virt="non-virtual"><scope>arrow::BaseListBuilder</scope><name>maximum_elements</name></member>
      <member refid="classarrow_1_1_array_builder_1a0f32beedba413982480c5df287946922" prot="protected" virt="non-virtual"><scope>arrow::BaseListBuilder</scope><name>null_bitmap_builder_</name></member>
      <member refid="classarrow_1_1_array_builder_1aad098f61890072a4576867a7cf4fb9ee" prot="public" virt="non-virtual"><scope>arrow::BaseListBuilder</scope><name>null_count</name></member>
      <member refid="classarrow_1_1_array_builder_1a9ea96ba4121857ab23241b6b408051b9" prot="protected" virt="non-virtual"><scope>arrow::BaseListBuilder</scope><name>null_count_</name></member>
      <member refid="classarrow_1_1_array_builder_1aa829b8339092408c9d710cc2c1bdc46a" prot="public" virt="non-virtual"><scope>arrow::BaseListBuilder</scope><name>num_children</name></member>
      <member refid="classarrow_1_1_base_list_builder_1a4a684e5301785b173ddda7430b1c0e22" prot="public" virt="non-virtual"><scope>arrow::BaseListBuilder</scope><name>offset_type</name></member>
      <member refid="classarrow_1_1_base_list_builder_1a9ff0d0d1d84ef6e57e313facd2f246c3" prot="protected" virt="non-virtual"><scope>arrow::BaseListBuilder</scope><name>offsets_builder_</name></member>
      <member refid="classarrow_1_1_array_builder_1a33e3aa20cedda9f6d8581809437f1c86" prot="protected" virt="non-virtual"><scope>arrow::BaseListBuilder</scope><name>pool_</name></member>
      <member refid="classarrow_1_1_array_builder_1afe8448fda39a8529a119bde5ba7ba119" prot="public" virt="non-virtual"><scope>arrow::BaseListBuilder</scope><name>Reserve</name></member>
      <member refid="classarrow_1_1_base_list_builder_1a5e18aaf8fc9c940e1adf8d20c3658531" prot="public" virt="virtual"><scope>arrow::BaseListBuilder</scope><name>Reset</name></member>
      <member refid="classarrow_1_1_base_list_builder_1ae82a9301ca92b957b7db7e1362cffb16" prot="public" virt="virtual"><scope>arrow::BaseListBuilder</scope><name>Resize</name></member>
      <member refid="classarrow_1_1_array_builder_1aa505ec95646314c3b9254e0cce39538b" prot="protected" virt="non-virtual"><scope>arrow::BaseListBuilder</scope><name>SetNotNull</name></member>
      <member refid="classarrow_1_1_array_builder_1a1e3e49019e307f0829ef66b72ce1b82e" prot="protected" virt="non-virtual"><scope>arrow::BaseListBuilder</scope><name>TrimBuffer</name></member>
      <member refid="classarrow_1_1_base_list_builder_1a1665bd1f7c2e96da2507950d46e03998" prot="public" virt="virtual"><scope>arrow::BaseListBuilder</scope><name>type</name></member>
      <member refid="classarrow_1_1_base_list_builder_1a1586a61bdd6589ebf50956af61760930" prot="public" virt="non-virtual"><scope>arrow::BaseListBuilder</scope><name>TypeClass</name></member>
      <member refid="classarrow_1_1_array_builder_1a44b3f511e5aefdba55aebfd4afa99c8f" prot="protected" virt="non-virtual"><scope>arrow::BaseListBuilder</scope><name>UnsafeAppendNull</name></member>
      <member refid="classarrow_1_1_array_builder_1a2dbe80584eac62147112c4d0a43ceea2" prot="protected" virt="non-virtual"><scope>arrow::BaseListBuilder</scope><name>UnsafeAppendToBitmap</name></member>
      <member refid="classarrow_1_1_array_builder_1afd319659d3125af8a72c0c529c329c12" prot="protected" virt="non-virtual"><scope>arrow::BaseListBuilder</scope><name>UnsafeAppendToBitmap</name></member>
      <member refid="classarrow_1_1_array_builder_1a40a4e3c231f1f47dcd046c42ee63b63b" prot="protected" virt="non-virtual"><scope>arrow::BaseListBuilder</scope><name>UnsafeAppendToBitmap</name></member>
      <member refid="classarrow_1_1_array_builder_1a361c8efe3030a75126cbbbe90e9a3ee4" prot="protected" virt="non-virtual"><scope>arrow::BaseListBuilder</scope><name>UnsafeAppendToBitmap</name></member>
      <member refid="classarrow_1_1_array_builder_1aa0a2125633a3cdb1860d3f62d44ac4a1" prot="protected" virt="non-virtual"><scope>arrow::BaseListBuilder</scope><name>UnsafeSetNotNull</name></member>
      <member refid="classarrow_1_1_array_builder_1ab5622a696215f318672d5a800d4bfe48" prot="protected" virt="non-virtual"><scope>arrow::BaseListBuilder</scope><name>UnsafeSetNull</name></member>
      <member refid="classarrow_1_1_base_list_builder_1af84e8c826e4a14ce8866128608c1d660" prot="public" virt="non-virtual"><scope>arrow::BaseListBuilder</scope><name>value_builder</name></member>
      <member refid="classarrow_1_1_base_list_builder_1afff8260b6999ef8f40b4ae438c577900" prot="protected" virt="non-virtual"><scope>arrow::BaseListBuilder</scope><name>value_builder_</name></member>
      <member refid="classarrow_1_1_base_list_builder_1ab3c06311b7fe489012e8c50fcc02ec50" prot="protected" virt="non-virtual"><scope>arrow::BaseListBuilder</scope><name>value_field_</name></member>
      <member refid="classarrow_1_1_array_builder_1a74bb29b347e12ed7528925d12db109a7" prot="public" virt="virtual"><scope>arrow::BaseListBuilder</scope><name>~ArrayBuilder</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
