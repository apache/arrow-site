<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structarrow_1_1_c_type_traits_3_01std_1_1vector_3_01_c_type_01_4_01_4" kind="struct" language="C++" prot="public">
    <compoundname>arrow::CTypeTraits&lt; std::vector&lt; CType &gt; &gt;</compoundname>
    <basecompoundref refid="structarrow_1_1_type_traits_3_01_list_type_01_4" prot="public" virt="non-virtual">arrow::TypeTraits&lt; ListType &gt;</basecompoundref>
    <includes refid="type__traits_8h" local="no">arrow/type_traits.h</includes>
    <templateparamlist>
      <param>
        <type>typename CType</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structarrow_1_1_c_type_traits_3_01std_1_1vector_3_01_c_type_01_4_01_4_1a8d0326967242749a5830dd0935c52ffb" prot="public" static="no">
        <type><ref refid="classarrow_1_1_list_type" kindref="compound">ListType</ref></type>
        <definition>using arrow::CTypeTraits&lt; std::vector&lt; CType &gt; &gt;::ArrowType =  ListType</definition>
        <argsstring></argsstring>
        <name>ArrowType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_traits.h" line="343" column="1" bodyfile="/arrow/cpp/src/arrow/type_traits.h" bodystart="343" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structarrow_1_1_c_type_traits_3_01std_1_1vector_3_01_c_type_01_4_01_4_1adef23579e8ce4e753a10fe32faf90872" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;DataType&gt; arrow::CTypeTraits&lt; std::vector&lt; CType &gt; &gt;::type_singleton</definition>
        <argsstring>()</argsstring>
        <name>type_singleton</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type_traits.h" line="345" column="1" bodyfile="/arrow/cpp/src/arrow/type_traits.h" bodystart="345" bodyend="347"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="768">
        <label>arrow::TypeTraits&lt; ListType &gt;</label>
        <link refid="structarrow_1_1_type_traits_3_01_list_type_01_4"/>
      </node>
      <node id="767">
        <label>arrow::CTypeTraits&lt; std::vector&lt; CType &gt; &gt;</label>
        <link refid="structarrow_1_1_c_type_traits_3_01std_1_1vector_3_01_c_type_01_4_01_4"/>
        <childnode refid="768" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="770">
        <label>arrow::TypeTraits&lt; ListType &gt;</label>
        <link refid="structarrow_1_1_type_traits_3_01_list_type_01_4"/>
      </node>
      <node id="769">
        <label>arrow::CTypeTraits&lt; std::vector&lt; CType &gt; &gt;</label>
        <link refid="structarrow_1_1_c_type_traits_3_01std_1_1vector_3_01_c_type_01_4_01_4"/>
        <childnode refid="770" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/type_traits.h" line="342" column="1" bodyfile="/arrow/cpp/src/arrow/type_traits.h" bodystart="342" bodyend="348"/>
    <listofallmembers>
      <member refid="structarrow_1_1_type_traits_3_01_list_type_01_4_1aab17a5bd4ab94822e00ec5fd702671d8" prot="public" virt="non-virtual"><scope>arrow::CTypeTraits&lt; std::vector&lt; CType &gt; &gt;</scope><name>ArrayType</name></member>
      <member refid="structarrow_1_1_c_type_traits_3_01std_1_1vector_3_01_c_type_01_4_01_4_1a8d0326967242749a5830dd0935c52ffb" prot="public" virt="non-virtual"><scope>arrow::CTypeTraits&lt; std::vector&lt; CType &gt; &gt;</scope><name>ArrowType</name></member>
      <member refid="structarrow_1_1_type_traits_3_01_list_type_01_4_1a9b2dbeef7548488dc453d76d03e863dd" prot="public" virt="non-virtual"><scope>arrow::CTypeTraits&lt; std::vector&lt; CType &gt; &gt;</scope><name>BuilderType</name></member>
      <member refid="structarrow_1_1_type_traits_3_01_list_type_01_4_1a12b61eb4fd1da8d0f5506a72e994b66a" prot="public" virt="non-virtual"><scope>arrow::CTypeTraits&lt; std::vector&lt; CType &gt; &gt;</scope><name>is_parameter_free</name></member>
      <member refid="structarrow_1_1_type_traits_3_01_list_type_01_4_1a1f8c8e8b9dddb17662f162348ee662fb" prot="public" virt="non-virtual"><scope>arrow::CTypeTraits&lt; std::vector&lt; CType &gt; &gt;</scope><name>OffsetArrayType</name></member>
      <member refid="structarrow_1_1_type_traits_3_01_list_type_01_4_1a5d77a2e18083b08f574157204220f375" prot="public" virt="non-virtual"><scope>arrow::CTypeTraits&lt; std::vector&lt; CType &gt; &gt;</scope><name>OffsetBuilderType</name></member>
      <member refid="structarrow_1_1_type_traits_3_01_list_type_01_4_1a884d779a4f886251bc0f9314735d6df4" prot="public" virt="non-virtual"><scope>arrow::CTypeTraits&lt; std::vector&lt; CType &gt; &gt;</scope><name>OffsetType</name></member>
      <member refid="structarrow_1_1_type_traits_3_01_list_type_01_4_1ace08a50ac6ca62bd69ea8adc0c8d5b2a" prot="public" virt="non-virtual"><scope>arrow::CTypeTraits&lt; std::vector&lt; CType &gt; &gt;</scope><name>ScalarType</name></member>
      <member refid="structarrow_1_1_c_type_traits_3_01std_1_1vector_3_01_c_type_01_4_01_4_1adef23579e8ce4e753a10fe32faf90872" prot="public" virt="non-virtual"><scope>arrow::CTypeTraits&lt; std::vector&lt; CType &gt; &gt;</scope><name>type_singleton</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
