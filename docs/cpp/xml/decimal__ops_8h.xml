<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="decimal__ops_8h" kind="file" language="C++">
    <compoundname>decimal_ops.h</compoundname>
    <includes local="no">cstdint</includes>
    <includes local="no">string</includes>
    <includes refid="basic__decimal__scalar_8h" local="yes">gandiva/basic_decimal_scalar.h</includes>
    <incdepgraph>
      <node id="17834">
        <label>limits</label>
      </node>
      <node id="17829">
        <label>cstdint</label>
      </node>
      <node id="17828">
        <label>/arrow/cpp/src/gandiva/precompiled/decimal_ops.h</label>
        <link refid="decimal__ops_8h"/>
        <childnode refid="17829" relation="include">
        </childnode>
        <childnode refid="17830" relation="include">
        </childnode>
        <childnode refid="17831" relation="include">
        </childnode>
      </node>
      <node id="17830">
        <label>string</label>
      </node>
      <node id="17831">
        <label>gandiva/basic_decimal_scalar.h</label>
        <link refid="basic__decimal__scalar_8h"/>
        <childnode refid="17829" relation="include">
        </childnode>
        <childnode refid="17832" relation="include">
        </childnode>
      </node>
      <node id="17838">
        <label>arrow/util/visibility.h</label>
        <link refid="arrow_2util_2visibility_8h"/>
      </node>
      <node id="17833">
        <label>array</label>
      </node>
      <node id="17832">
        <label>arrow/util/basic_decimal.h</label>
        <link refid="basic__decimal_8h"/>
        <childnode refid="17833" relation="include">
        </childnode>
        <childnode refid="17829" relation="include">
        </childnode>
        <childnode refid="17834" relation="include">
        </childnode>
        <childnode refid="17830" relation="include">
        </childnode>
        <childnode refid="17835" relation="include">
        </childnode>
        <childnode refid="17836" relation="include">
        </childnode>
        <childnode refid="17837" relation="include">
        </childnode>
        <childnode refid="17838" relation="include">
        </childnode>
      </node>
      <node id="17835">
        <label>type_traits</label>
      </node>
      <node id="17836">
        <label>arrow/util/macros.h</label>
        <link refid="macros_8h"/>
        <childnode refid="17829" relation="include">
        </childnode>
      </node>
      <node id="17837">
        <label>arrow/util/type_traits.h</label>
        <link refid="util_2type__traits_8h"/>
        <childnode refid="17835" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacegandiva">gandiva</innernamespace>
    <innernamespace refid="namespacegandiva_1_1decimalops">gandiva::decimalops</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="basic__decimal__scalar_8h" kindref="compound">gandiva/basic_decimal_scalar.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacegandiva" kindref="compound">gandiva</ref><sp/>{</highlight></codeline>
<codeline lineno="25" refid="namespacegandiva_1_1decimalops" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">decimalops<sp/>{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">arrow::BasicDecimal128</ref><sp/><ref refid="namespacegandiva_1_1decimalops_1a1b8916f91bc90639de949e483e5454aa" kindref="member">Add</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgandiva_1_1_basic_decimal_scalar128" kindref="compound">BasicDecimalScalar128</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgandiva_1_1_basic_decimal_scalar128" kindref="compound">BasicDecimalScalar128</ref>&amp;<sp/>y,</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>out_precision,<sp/>int32_t<sp/>out_scale);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">arrow::BasicDecimal128</ref><sp/><ref refid="namespacegandiva_1_1decimalops_1a4cae729e6c97547451580a1d365cebc1" kindref="member">Subtract</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgandiva_1_1_basic_decimal_scalar128" kindref="compound">BasicDecimalScalar128</ref>&amp;<sp/>x,</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgandiva_1_1_basic_decimal_scalar128" kindref="compound">BasicDecimalScalar128</ref>&amp;<sp/>y,<sp/>int32_t<sp/>out_precision,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>out_scale);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">arrow::BasicDecimal128</ref><sp/><ref refid="namespacegandiva_1_1decimalops_1ae48f54bb0ff7c6551573e2c48d058684" kindref="member">Multiply</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgandiva_1_1_basic_decimal_scalar128" kindref="compound">BasicDecimalScalar128</ref>&amp;<sp/>x,</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgandiva_1_1_basic_decimal_scalar128" kindref="compound">BasicDecimalScalar128</ref>&amp;<sp/>y,<sp/>int32_t<sp/>out_precision,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>out_scale,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>overflow);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">arrow::BasicDecimal128</ref><sp/><ref refid="namespacegandiva_1_1decimalops_1a7325e9f3f1c160ffc16e7c7dee3bda37" kindref="member">Divide</ref>(int64_t<sp/>context,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgandiva_1_1_basic_decimal_scalar128" kindref="compound">BasicDecimalScalar128</ref>&amp;<sp/>x,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgandiva_1_1_basic_decimal_scalar128" kindref="compound">BasicDecimalScalar128</ref>&amp;<sp/>y,<sp/>int32_t<sp/>out_precision,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>out_scale,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>overflow);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">arrow::BasicDecimal128</ref><sp/><ref refid="namespacegandiva_1_1decimalops_1a2fe104a486a186df3e22ef3bd18b3c3e" kindref="member">Mod</ref>(int64_t<sp/>context,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgandiva_1_1_basic_decimal_scalar128" kindref="compound">BasicDecimalScalar128</ref>&amp;<sp/>x,</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgandiva_1_1_basic_decimal_scalar128" kindref="compound">BasicDecimalScalar128</ref>&amp;<sp/>y,<sp/>int32_t<sp/>out_precision,</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>out_scale,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>overflow);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal">int32_t<sp/><ref refid="namespacegandiva_1_1decimalops_1a6d6f20970fdf822acf2771330c73ae1d" kindref="member">Compare</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgandiva_1_1_basic_decimal_scalar128" kindref="compound">BasicDecimalScalar128</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgandiva_1_1_basic_decimal_scalar128" kindref="compound">BasicDecimalScalar128</ref>&amp;<sp/>y);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref><sp/><ref refid="namespacegandiva_1_1decimalops_1a2b4260c3a3ca2eaa529a0465ae11d9f8" kindref="member">FromDouble</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>in,<sp/>int32_t<sp/>precision,<sp/>int32_t<sp/>scale,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>overflow);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="namespacegandiva_1_1decimalops_1a09413724b58ac7141ce28a9a18cacd04" kindref="member">ToDouble</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgandiva_1_1_basic_decimal_scalar128" kindref="compound">BasicDecimalScalar128</ref>&amp;<sp/>in,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>overflow);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref><sp/><ref refid="namespacegandiva_1_1decimalops_1af4235dabba6a6f43d928fb58d1cbb7d6" kindref="member">FromInt64</ref>(int64_t<sp/>in,<sp/>int32_t<sp/>precision,<sp/>int32_t<sp/>scale,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>overflow);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">int64_t<sp/><ref refid="namespacegandiva_1_1decimalops_1a346665715e3f72bbaf1b1fc88ecec467" kindref="member">ToInt64</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgandiva_1_1_basic_decimal_scalar128" kindref="compound">BasicDecimalScalar128</ref>&amp;<sp/>in,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>overflow);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref><sp/><ref refid="namespacegandiva_1_1decimalops_1a05826b1f63d9a43e58b359d814abc5d2" kindref="member">Convert</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgandiva_1_1_basic_decimal_scalar128" kindref="compound">BasicDecimalScalar128</ref>&amp;<sp/>x,<sp/>int32_t<sp/>out_precision,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>out_scale,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>overflow);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref><sp/><ref refid="namespacegandiva_1_1decimalops_1acaf2c2063997dc3306bb3f2df3f6bcc1" kindref="member">Round</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgandiva_1_1_basic_decimal_scalar128" kindref="compound">BasicDecimalScalar128</ref>&amp;<sp/>x,<sp/>int32_t<sp/>out_scale,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>overflow);</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref><sp/><ref refid="namespacegandiva_1_1decimalops_1a1df639c08d3c38fe5e2ffa75a0ec3c40" kindref="member">Truncate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgandiva_1_1_basic_decimal_scalar128" kindref="compound">BasicDecimalScalar128</ref>&amp;<sp/>x,<sp/>int32_t<sp/>out_scale,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>overflow);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref><sp/><ref refid="namespacegandiva_1_1decimalops_1ad100411b610679092ed718efab53a4cd" kindref="member">Ceil</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgandiva_1_1_basic_decimal_scalar128" kindref="compound">BasicDecimalScalar128</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>overflow);</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><ref refid="classarrow_1_1_basic_decimal128" kindref="compound">BasicDecimal128</ref><sp/><ref refid="namespacegandiva_1_1decimalops_1ab9a9ff3676c8c2bfee82480f27d479c9" kindref="member">Floor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classgandiva_1_1_basic_decimal_scalar128" kindref="compound">BasicDecimalScalar128</ref>&amp;<sp/>x,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>overflow);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>decimalops</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>gandiva</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/arrow/cpp/src/gandiva/precompiled/decimal_ops.h"/>
  </compounddef>
</doxygen>
