<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_string_type" kind="class" language="C++" prot="public">
    <compoundname>arrow::StringType</compoundname>
    <basecompoundref refid="classarrow_1_1_binary_type" prot="public" virt="non-virtual">arrow::BinaryType</basecompoundref>
    <includes refid="type_8h" local="no">arrow/type.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classarrow_1_1_string_type_1a899b9b1518c8fd595845b9c3f047dc45" prot="public" static="no">
        <type><ref refid="classarrow_1_1_binary_type" kindref="compound">BinaryType</ref></type>
        <definition>using arrow::StringType::EquivalentBinaryType =  BinaryType</definition>
        <argsstring></argsstring>
        <name>EquivalentBinaryType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="849" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="849" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classarrow_1_1_string_type_1a310bfaefc36fe1eab6c864f777b4459a" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref></type>
        <definition>constexpr Type::type arrow::StringType::type_id</definition>
        <argsstring></argsstring>
        <name>type_id</name>
        <initializer>= <ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a864933bd7cdfa63ea75498c34db6545f" kindref="member">Type::STRING</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="847" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="847" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_string_type_1a1bc67b1448e300a4559087c4003372b1" prot="public" static="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool arrow::StringType::is_utf8</definition>
        <argsstring></argsstring>
        <name>is_utf8</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="848" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="848" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1_string_type_1a0eca085fb5f881a3c8213d7278d7090c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const char *</type>
        <definition>static constexpr const char* arrow::StringType::type_name</definition>
        <argsstring>()</argsstring>
        <name>type_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="851" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="851" bodyend="851"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1_string_type_1ae9b778fdccec4116ea1905b8803885a7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::StringType::StringType</definition>
        <argsstring>()</argsstring>
        <name>StringType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="853" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="853" bodyend="853"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_string_type_1a9ad23b52d91b108a0598f1ca40b88538" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string arrow::StringType::ToString</definition>
        <argsstring>() const override</argsstring>
        <name>ToString</name>
        <reimplements refid="classarrow_1_1_binary_type_1af5d9c85c40f4c48adce11196aaa4c0c8">ToString</reimplements>
        <briefdescription>
<para>A string representation of the type, including any children. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="855" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_string_type_1ac286b24f3c2b3eeaf1e7d897ecd7a8d1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string arrow::StringType::name</definition>
        <argsstring>() const override</argsstring>
        <name>name</name>
        <reimplements refid="classarrow_1_1_binary_type_1a4c345ca9ef34a6099b29c3e694bedae3">name</reimplements>
        <briefdescription>
<para>A string name of the type, omitting any child fields. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Experimental API </para></simplesect>
<simplesect kind="since"><para>0.7.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="856" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="856" bodyend="856"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classarrow_1_1_string_type_1a4e5b2baf948abc488f31a85da44d1dab" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arrow::StringType::ComputeFingerprint</definition>
        <argsstring>() const override</argsstring>
        <name>ComputeFingerprint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="859" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Concrete type class for variable-size string data, utf8-encoded. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4375">
        <label>arrow::DataType</label>
        <link refid="classarrow_1_1_data_type"/>
        <childnode refid="4376" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4372">
        <label>arrow::StringType</label>
        <link refid="classarrow_1_1_string_type"/>
        <childnode refid="4373" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4376">
        <label>arrow::detail::Fingerprintable</label>
      </node>
      <node id="4373">
        <label>arrow::BinaryType</label>
        <link refid="classarrow_1_1_binary_type"/>
        <childnode refid="4374" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4374">
        <label>arrow::BaseBinaryType</label>
        <link refid="classarrow_1_1_base_binary_type"/>
        <childnode refid="4375" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4380">
        <label>arrow::DataType</label>
        <link refid="classarrow_1_1_data_type"/>
        <childnode refid="4381" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4377">
        <label>arrow::StringType</label>
        <link refid="classarrow_1_1_string_type"/>
        <childnode refid="4378" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4381">
        <label>arrow::detail::Fingerprintable</label>
      </node>
      <node id="4378">
        <label>arrow::BinaryType</label>
        <link refid="classarrow_1_1_binary_type"/>
        <childnode refid="4379" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4379">
        <label>arrow::BaseBinaryType</label>
        <link refid="classarrow_1_1_base_binary_type"/>
        <childnode refid="4380" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/type.h" line="845" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="845" bodyend="860"/>
    <listofallmembers>
      <member refid="classarrow_1_1_data_type_1a97571c4039e363f7ebcb09f7c789064a" prot="public" virt="non-virtual"><scope>arrow::StringType</scope><name>Accept</name></member>
      <member refid="classarrow_1_1_binary_type_1a38d8b09303796253fe22a85a50d03224" prot="public" virt="non-virtual"><scope>arrow::StringType</scope><name>BinaryType</name></member>
      <member refid="classarrow_1_1_binary_type_1a678c380577aca8bd39edbcf02842a61c" prot="protected" virt="non-virtual"><scope>arrow::StringType</scope><name>BinaryType</name></member>
      <member refid="classarrow_1_1_data_type_1a3c9f77b8d895abd8618566386cbeb7c0" prot="public" virt="non-virtual"><scope>arrow::StringType</scope><name>child</name></member>
      <member refid="classarrow_1_1_data_type_1a36061c037a2e6e974cc3b22dfb6a5bac" prot="public" virt="non-virtual"><scope>arrow::StringType</scope><name>children</name></member>
      <member refid="classarrow_1_1_data_type_1a8dd2f042289733133c386463afcea902" prot="protected" virt="non-virtual"><scope>arrow::StringType</scope><name>children_</name></member>
      <member refid="classarrow_1_1_string_type_1a4e5b2baf948abc488f31a85da44d1dab" prot="protected" virt="non-virtual"><scope>arrow::StringType</scope><name>ComputeFingerprint</name></member>
      <member refid="classarrow_1_1_data_type_1a1e0bf7cc98ce39872b8044f375d7de6b" prot="protected" virt="non-virtual"><scope>arrow::StringType</scope><name>ComputeMetadataFingerprint</name></member>
      <member refid="classarrow_1_1_data_type_1a1b8a7ece05983649f67396177f40e844" prot="public" virt="non-virtual"><scope>arrow::StringType</scope><name>DataType</name></member>
      <member refid="classarrow_1_1_data_type_1aaf003113bb8f4c51a03a16f4b27a52bb" prot="public" virt="non-virtual"><scope>arrow::StringType</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_data_type_1ae974f4c707ef998d25368d278818af6b" prot="public" virt="non-virtual"><scope>arrow::StringType</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_string_type_1a899b9b1518c8fd595845b9c3f047dc45" prot="public" virt="non-virtual"><scope>arrow::StringType</scope><name>EquivalentBinaryType</name></member>
      <member refid="classarrow_1_1_data_type_1a5ec6a1c93420c68e9c8065d4a56ad645" prot="public" virt="non-virtual"><scope>arrow::StringType</scope><name>id</name></member>
      <member refid="classarrow_1_1_data_type_1aa2704f1cfc50018d02e109b32f67e422" prot="protected" virt="non-virtual"><scope>arrow::StringType</scope><name>id_</name></member>
      <member refid="classarrow_1_1_string_type_1a1bc67b1448e300a4559087c4003372b1" prot="public" virt="non-virtual"><scope>arrow::StringType</scope><name>is_utf8</name></member>
      <member refid="classarrow_1_1_binary_type_1a0db59e35b5b3afa44fc15f53ff86235f" prot="public" virt="virtual"><scope>arrow::StringType</scope><name>layout</name></member>
      <member refid="classarrow_1_1_string_type_1ac286b24f3c2b3eeaf1e7d897ecd7a8d1" prot="public" virt="virtual"><scope>arrow::StringType</scope><name>name</name></member>
      <member refid="classarrow_1_1_data_type_1ac8920179a6c1e7f434c495d5ec4662f1" prot="public" virt="non-virtual"><scope>arrow::StringType</scope><name>num_children</name></member>
      <member refid="classarrow_1_1_binary_type_1a9622766aa289f240f21d4508efe6996d" prot="public" virt="non-virtual"><scope>arrow::StringType</scope><name>offset_type</name></member>
      <member refid="classarrow_1_1_string_type_1ae9b778fdccec4116ea1905b8803885a7" prot="public" virt="non-virtual"><scope>arrow::StringType</scope><name>StringType</name></member>
      <member refid="classarrow_1_1_string_type_1a9ad23b52d91b108a0598f1ca40b88538" prot="public" virt="virtual"><scope>arrow::StringType</scope><name>ToString</name></member>
      <member refid="classarrow_1_1_string_type_1a310bfaefc36fe1eab6c864f777b4459a" prot="public" virt="non-virtual"><scope>arrow::StringType</scope><name>type_id</name></member>
      <member refid="classarrow_1_1_string_type_1a0eca085fb5f881a3c8213d7278d7090c" prot="public" virt="non-virtual"><scope>arrow::StringType</scope><name>type_name</name></member>
      <member refid="classarrow_1_1_data_type_1a268b7e57ebec17a48930c73d8c0605d2" prot="public" virt="non-virtual"><scope>arrow::StringType</scope><name>~DataType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
