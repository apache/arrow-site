<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="array_8h" kind="file" language="C++">
    <compoundname>array.h</compoundname>
    <includes local="no">atomic</includes>
    <includes local="no">cstdint</includes>
    <includes local="no">iosfwd</includes>
    <includes local="no">memory</includes>
    <includes local="no">string</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes refid="compare_8h" local="yes">arrow/compare.h</includes>
    <includes refid="type_8h" local="yes">arrow/type.h</includes>
    <includes refid="type__fwd_8h" local="yes">arrow/type_fwd.h</includes>
    <includes refid="type__traits_8h" local="yes">arrow/type_traits.h</includes>
    <includes refid="bit__util_8h" local="yes">arrow/util/bit_util.h</includes>
    <includes refid="checked__cast_8h" local="yes">arrow/util/checked_cast.h</includes>
    <includes refid="macros_8h" local="yes">arrow/util/macros.h</includes>
    <includes refid="string__view_8h" local="yes">arrow/util/string_view.h</includes>
    <includes refid="arrow_2util_2visibility_8h" local="yes">arrow/util/visibility.h</includes>
    <includedby refid="api_8h" local="yes">/arrow/cpp/src/arrow/api.h</includedby>
    <includedby refid="builder__binary_8h" local="yes">/arrow/cpp/src/arrow/array/builder_binary.h</includedby>
    <includedby refid="builder__dict_8h" local="yes">/arrow/cpp/src/arrow/array/builder_dict.h</includedby>
    <includedby refid="builder__nested_8h" local="yes">/arrow/cpp/src/arrow/array/builder_nested.h</includedby>
    <includedby refid="builder__primitive_8h" local="yes">/arrow/cpp/src/arrow/array/builder_primitive.h</includedby>
    <includedby refid="builder__union_8h" local="yes">/arrow/cpp/src/arrow/array/builder_union.h</includedby>
    <includedby refid="concatenate_8h" local="yes">/arrow/cpp/src/arrow/array/concatenate.h</includedby>
    <includedby refid="dict__internal_8h" local="yes">/arrow/cpp/src/arrow/array/dict_internal.h</includedby>
    <includedby refid="kernel_8h" local="yes">/arrow/cpp/src/arrow/compute/kernel.h</includedby>
    <includedby refid="isin_8h" local="yes">/arrow/cpp/src/arrow/compute/kernels/isin.h</includedby>
    <includedby refid="match_8h" local="yes">/arrow/cpp/src/arrow/compute/kernels/match.h</includedby>
    <includedby refid="compute_2kernels_2util__internal_8h" local="yes">/arrow/cpp/src/arrow/compute/kernels/util_internal.h</includedby>
    <includedby refid="extension__type_8h" local="yes">/arrow/cpp/src/arrow/extension_type.h</includedby>
    <includedby refid="ipc_2util_8h" local="yes">/arrow/cpp/src/arrow/ipc/util.h</includedby>
    <includedby refid="arrow_2pch_8h" local="yes">/arrow/cpp/src/arrow/pch.h</includedby>
    <includedby refid="hashing_8h" local="yes">/arrow/cpp/src/arrow/util/hashing.h</includedby>
    <includedby refid="visitor__inline_8h" local="yes">/arrow/cpp/src/arrow/visitor_inline.h</includedby>
    <includedby refid="arrow_8h" local="no">/arrow/cpp/src/gandiva/arrow.h</includedby>
    <incdepgraph>
      <node id="616">
        <label>atomic</label>
      </node>
      <node id="633">
        <label>arrow/util/compare.h</label>
        <link refid="util_2compare_8h"/>
        <childnode refid="619" relation="include">
        </childnode>
        <childnode refid="621" relation="include">
        </childnode>
        <childnode refid="622" relation="include">
        </childnode>
        <childnode refid="625" relation="include">
        </childnode>
      </node>
      <node id="649">
        <label>limits</label>
      </node>
      <node id="617">
        <label>cstdint</label>
      </node>
      <node id="650">
        <label>arrow/buffer.h</label>
        <link refid="buffer_8h"/>
        <childnode refid="617" relation="include">
        </childnode>
        <childnode refid="632" relation="include">
        </childnode>
        <childnode refid="619" relation="include">
        </childnode>
        <childnode refid="620" relation="include">
        </childnode>
        <childnode refid="621" relation="include">
        </childnode>
        <childnode refid="622" relation="include">
        </childnode>
        <childnode refid="623" relation="include">
        </childnode>
        <childnode refid="651" relation="include">
        </childnode>
        <childnode refid="652" relation="include">
        </childnode>
        <childnode refid="631" relation="include">
        </childnode>
        <childnode refid="636" relation="include">
        </childnode>
        <childnode refid="625" relation="include">
        </childnode>
        <childnode refid="653" relation="include">
        </childnode>
        <childnode refid="626" relation="include">
        </childnode>
      </node>
      <node id="643">
        <label>endian.h</label>
      </node>
      <node id="631">
        <label>arrow/status.h</label>
        <link refid="status_8h"/>
        <childnode refid="632" relation="include">
        </childnode>
        <childnode refid="618" relation="include">
        </childnode>
        <childnode refid="619" relation="include">
        </childnode>
        <childnode refid="620" relation="include">
        </childnode>
        <childnode refid="622" relation="include">
        </childnode>
        <childnode refid="633" relation="include">
        </childnode>
        <childnode refid="625" relation="include">
        </childnode>
        <childnode refid="634" relation="include">
        </childnode>
        <childnode refid="626" relation="include">
        </childnode>
      </node>
      <node id="655">
        <label>arrow/util/functional.h</label>
        <link refid="functional_8h"/>
        <childnode refid="656" relation="include">
        </childnode>
        <childnode refid="621" relation="include">
        </childnode>
        <childnode refid="625" relation="include">
        </childnode>
      </node>
      <node id="636">
        <label>arrow/type_fwd.h</label>
        <link refid="type__fwd_8h"/>
        <childnode refid="619" relation="include">
        </childnode>
        <childnode refid="620" relation="include">
        </childnode>
        <childnode refid="623" relation="include">
        </childnode>
        <childnode refid="625" relation="include">
        </childnode>
        <childnode refid="626" relation="include">
        </childnode>
      </node>
      <node id="648">
        <label>cmath</label>
      </node>
      <node id="647">
        <label>cassert</label>
      </node>
      <node id="637">
        <label>arrow/util/checked_cast.h</label>
        <link refid="checked__cast_8h"/>
        <childnode refid="619" relation="include">
        </childnode>
        <childnode refid="621" relation="include">
        </childnode>
      </node>
      <node id="620">
        <label>string</label>
      </node>
      <node id="654">
        <label>arrow/vendored/string_view.hpp</label>
      </node>
      <node id="624">
        <label>arrow/compare.h</label>
        <link refid="compare_8h"/>
        <childnode refid="617" relation="include">
        </childnode>
        <childnode refid="618" relation="include">
        </childnode>
        <childnode refid="625" relation="include">
        </childnode>
        <childnode refid="626" relation="include">
        </childnode>
      </node>
      <node id="638">
        <label>arrow/util/variant.h</label>
        <link refid="variant_8h"/>
        <childnode refid="639" relation="include">
        </childnode>
      </node>
      <node id="640">
        <label>arrow/visitor.h</label>
        <link refid="visitor_8h"/>
        <childnode refid="631" relation="include">
        </childnode>
        <childnode refid="636" relation="include">
        </childnode>
        <childnode refid="626" relation="include">
        </childnode>
      </node>
      <node id="635">
        <label>ostream</label>
      </node>
      <node id="626">
        <label>arrow/util/visibility.h</label>
        <link refid="arrow_2util_2visibility_8h"/>
      </node>
      <node id="651">
        <label>arrow/device.h</label>
        <link refid="device_8h"/>
        <childnode refid="617" relation="include">
        </childnode>
        <childnode refid="619" relation="include">
        </childnode>
        <childnode refid="620" relation="include">
        </childnode>
        <childnode refid="652" relation="include">
        </childnode>
        <childnode refid="636" relation="include">
        </childnode>
        <childnode refid="633" relation="include">
        </childnode>
        <childnode refid="625" relation="include">
        </childnode>
        <childnode refid="626" relation="include">
        </childnode>
      </node>
      <node id="642">
        <label>arrow/util/bit_util.h</label>
        <link refid="bit__util_8h"/>
        <childnode refid="643" relation="include">
        </childnode>
        <childnode refid="644" relation="include">
        </childnode>
        <childnode refid="645" relation="include">
        </childnode>
        <childnode refid="646" relation="include">
        </childnode>
        <childnode refid="647" relation="include">
        </childnode>
        <childnode refid="648" relation="include">
        </childnode>
        <childnode refid="617" relation="include">
        </childnode>
        <childnode refid="632" relation="include">
        </childnode>
        <childnode refid="649" relation="include">
        </childnode>
        <childnode refid="619" relation="include">
        </childnode>
        <childnode refid="620" relation="include">
        </childnode>
        <childnode refid="621" relation="include">
        </childnode>
        <childnode refid="622" relation="include">
        </childnode>
        <childnode refid="623" relation="include">
        </childnode>
        <childnode refid="650" relation="include">
        </childnode>
        <childnode refid="629" relation="include">
        </childnode>
        <childnode refid="633" relation="include">
        </childnode>
        <childnode refid="655" relation="include">
        </childnode>
        <childnode refid="625" relation="include">
        </childnode>
        <childnode refid="634" relation="include">
        </childnode>
        <childnode refid="653" relation="include">
        </childnode>
        <childnode refid="657" relation="include">
        </childnode>
        <childnode refid="626" relation="include">
        </childnode>
      </node>
      <node id="646">
        <label>bitset</label>
      </node>
      <node id="656">
        <label>tuple</label>
      </node>
      <node id="623">
        <label>vector</label>
      </node>
      <node id="630">
        <label>new</label>
      </node>
      <node id="622">
        <label>utility</label>
      </node>
      <node id="653">
        <label>arrow/util/string_view.h</label>
        <link refid="string__view_8h"/>
        <childnode refid="617" relation="include">
        </childnode>
        <childnode refid="620" relation="include">
        </childnode>
        <childnode refid="654" relation="include">
        </childnode>
      </node>
      <node id="645">
        <label>array</label>
      </node>
      <node id="641">
        <label>arrow/type_traits.h</label>
        <link refid="type__traits_8h"/>
        <childnode refid="619" relation="include">
        </childnode>
        <childnode refid="620" relation="include">
        </childnode>
        <childnode refid="621" relation="include">
        </childnode>
        <childnode refid="623" relation="include">
        </childnode>
        <childnode refid="636" relation="include">
        </childnode>
        <childnode refid="642" relation="include">
        </childnode>
      </node>
      <node id="652">
        <label>arrow/io/type_fwd.h</label>
        <link refid="io_2type__fwd_8h"/>
      </node>
      <node id="618">
        <label>iosfwd</label>
      </node>
      <node id="615">
        <label>/arrow/cpp/src/arrow/array.h</label>
        <link refid="array_8h"/>
        <childnode refid="616" relation="include">
        </childnode>
        <childnode refid="617" relation="include">
        </childnode>
        <childnode refid="618" relation="include">
        </childnode>
        <childnode refid="619" relation="include">
        </childnode>
        <childnode refid="620" relation="include">
        </childnode>
        <childnode refid="621" relation="include">
        </childnode>
        <childnode refid="622" relation="include">
        </childnode>
        <childnode refid="623" relation="include">
        </childnode>
        <childnode refid="624" relation="include">
        </childnode>
        <childnode refid="627" relation="include">
        </childnode>
        <childnode refid="636" relation="include">
        </childnode>
        <childnode refid="641" relation="include">
        </childnode>
        <childnode refid="642" relation="include">
        </childnode>
        <childnode refid="637" relation="include">
        </childnode>
        <childnode refid="625" relation="include">
        </childnode>
        <childnode refid="653" relation="include">
        </childnode>
        <childnode refid="626" relation="include">
        </childnode>
      </node>
      <node id="639">
        <label>arrow/vendored/variant.hpp</label>
      </node>
      <node id="629">
        <label>arrow/result.h</label>
        <link refid="result_8h"/>
        <childnode refid="630" relation="include">
        </childnode>
        <childnode refid="620" relation="include">
        </childnode>
        <childnode refid="621" relation="include">
        </childnode>
        <childnode refid="622" relation="include">
        </childnode>
        <childnode refid="631" relation="include">
        </childnode>
        <childnode refid="633" relation="include">
        </childnode>
      </node>
      <node id="628">
        <label>climits</label>
      </node>
      <node id="627">
        <label>arrow/type.h</label>
        <link refid="type_8h"/>
        <childnode refid="616" relation="include">
        </childnode>
        <childnode refid="628" relation="include">
        </childnode>
        <childnode refid="617" relation="include">
        </childnode>
        <childnode refid="618" relation="include">
        </childnode>
        <childnode refid="619" relation="include">
        </childnode>
        <childnode refid="620" relation="include">
        </childnode>
        <childnode refid="622" relation="include">
        </childnode>
        <childnode refid="623" relation="include">
        </childnode>
        <childnode refid="629" relation="include">
        </childnode>
        <childnode refid="636" relation="include">
        </childnode>
        <childnode refid="637" relation="include">
        </childnode>
        <childnode refid="625" relation="include">
        </childnode>
        <childnode refid="638" relation="include">
        </childnode>
        <childnode refid="626" relation="include">
        </childnode>
        <childnode refid="640" relation="include">
        </childnode>
      </node>
      <node id="621">
        <label>type_traits</label>
      </node>
      <node id="644">
        <label>algorithm</label>
      </node>
      <node id="632">
        <label>cstring</label>
      </node>
      <node id="634">
        <label>arrow/util/string_builder.h</label>
        <link refid="string__builder_8h"/>
        <childnode refid="619" relation="include">
        </childnode>
        <childnode refid="635" relation="include">
        </childnode>
        <childnode refid="620" relation="include">
        </childnode>
        <childnode refid="622" relation="include">
        </childnode>
        <childnode refid="626" relation="include">
        </childnode>
      </node>
      <node id="619">
        <label>memory</label>
      </node>
      <node id="625">
        <label>arrow/util/macros.h</label>
        <link refid="macros_8h"/>
        <childnode refid="617" relation="include">
        </childnode>
      </node>
      <node id="657">
        <label>arrow/util/type_traits.h</label>
        <link refid="util_2type__traits_8h"/>
        <childnode refid="621" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="668">
        <label>/arrow/cpp/src/arrow/array/dict_internal.h</label>
        <link refid="dict__internal_8h"/>
      </node>
      <node id="708">
        <label>/arrow/cpp/src/gandiva/exported_funcs_registry.h</label>
        <link refid="exported__funcs__registry_8h"/>
        <childnode refid="709" relation="include">
        </childnode>
      </node>
      <node id="740">
        <label>/arrow/cpp/src/arrow/compute/kernels/filter.h</label>
        <link refid="arrow_2compute_2kernels_2filter_8h"/>
        <childnode refid="727" relation="include">
        </childnode>
      </node>
      <node id="707">
        <label>/arrow/cpp/src/gandiva/engine.h</label>
        <link refid="engine_8h"/>
        <childnode refid="708" relation="include">
        </childnode>
        <childnode refid="710" relation="include">
        </childnode>
        <childnode refid="671" relation="include">
        </childnode>
      </node>
      <node id="745">
        <label>/arrow/cpp/src/arrow/compute/kernels/sort_to_indices.h</label>
        <link refid="sort__to__indices_8h"/>
        <childnode refid="727" relation="include">
        </childnode>
      </node>
      <node id="729">
        <label>/arrow/cpp/src/arrow/compute/kernels/aggregate.h</label>
        <link refid="aggregate_8h"/>
        <childnode refid="730" relation="include">
        </childnode>
      </node>
      <node id="712">
        <label>/arrow/cpp/src/gandiva/pch.h</label>
        <link refid="gandiva_2pch_8h"/>
      </node>
      <node id="690">
        <label>/arrow/cpp/src/gandiva/function_holder_registry.h</label>
        <link refid="function__holder__registry_8h"/>
      </node>
      <node id="660">
        <label>/arrow/cpp/src/arrow/array/builder_binary.h</label>
        <link refid="builder__binary_8h"/>
        <childnode refid="661" relation="include">
        </childnode>
        <childnode refid="662" relation="include">
        </childnode>
      </node>
      <node id="730">
        <label>/arrow/cpp/src/arrow/compute/kernels/sum_internal.h</label>
        <link refid="sum__internal_8h"/>
      </node>
      <node id="722">
        <label>/arrow/cpp/src/arrow/array/builder_primitive.h</label>
        <link refid="builder__primitive_8h"/>
        <childnode refid="720" relation="include">
        </childnode>
        <childnode refid="723" relation="include">
        </childnode>
        <childnode refid="662" relation="include">
        </childnode>
      </node>
      <node id="671">
        <label>/arrow/cpp/src/gandiva/llvm_generator.h</label>
        <link refid="llvm__generator_8h"/>
      </node>
      <node id="746">
        <label>/arrow/cpp/src/arrow/compute/kernels/take.h</label>
        <link refid="take_8h"/>
        <childnode refid="727" relation="include">
        </childnode>
      </node>
      <node id="710">
        <label>/arrow/cpp/src/gandiva/function_ir_builder.h</label>
        <link refid="function__ir__builder_8h"/>
        <childnode refid="711" relation="include">
        </childnode>
      </node>
      <node id="698">
        <label>/arrow/cpp/src/gandiva/function_registry_arithmetic.h</label>
        <link refid="function__registry__arithmetic_8h"/>
      </node>
      <node id="670">
        <label>/arrow/cpp/src/gandiva/annotator.h</label>
        <link refid="annotator_8h"/>
        <childnode refid="671" relation="include">
        </childnode>
      </node>
      <node id="734">
        <label>/arrow/cpp/src/arrow/dataset/partition.h</label>
        <link refid="partition_8h"/>
        <childnode refid="735" relation="include">
        </childnode>
        <childnode refid="736" relation="include">
        </childnode>
      </node>
      <node id="719">
        <label>/arrow/cpp/src/gandiva/execution_context.h</label>
        <link refid="execution__context_8h"/>
        <childnode refid="678" relation="include">
        </childnode>
        <childnode refid="671" relation="include">
        </childnode>
        <childnode refid="693" relation="include">
        </childnode>
      </node>
      <node id="754">
        <label>/arrow/cpp/src/arrow/flight/pch.h</label>
        <link refid="arrow_2flight_2pch_8h"/>
      </node>
      <node id="659">
        <label>/arrow/cpp/src/arrow/api.h</label>
        <link refid="api_8h"/>
      </node>
      <node id="723">
        <label>/arrow/cpp/src/arrow/array/builder_time.h</label>
        <link refid="builder__time_8h"/>
        <childnode refid="662" relation="include">
        </childnode>
      </node>
      <node id="677">
        <label>/arrow/cpp/src/gandiva/decimal_type_util.h</label>
        <link refid="decimal__type__util_8h"/>
      </node>
      <node id="749">
        <label>/arrow/cpp/src/arrow/python/extension_type.h</label>
        <link refid="python_2extension__type_8h"/>
      </node>
      <node id="694">
        <label>/arrow/cpp/src/gandiva/function_registry_common.h</label>
        <link refid="function__registry__common_8h"/>
        <childnode refid="695" relation="include">
        </childnode>
      </node>
      <node id="688">
        <label>/arrow/cpp/src/gandiva/func_descriptor.h</label>
        <link refid="func__descriptor_8h"/>
        <childnode refid="687" relation="include">
        </childnode>
        <childnode refid="689" relation="include">
        </childnode>
      </node>
      <node id="674">
        <label>/arrow/cpp/src/gandiva/filter_cache_key.h</label>
        <link refid="filter__cache__key_8h"/>
      </node>
      <node id="738">
        <label>/arrow/cpp/src/arrow/dataset/file_parquet.h</label>
        <link refid="file__parquet_8h"/>
        <childnode refid="733" relation="include">
        </childnode>
      </node>
      <node id="702">
        <label>/arrow/cpp/src/gandiva/function_registry_string.h</label>
        <link refid="function__registry__string_8h"/>
      </node>
      <node id="750">
        <label>/arrow/cpp/src/arrow/visitor_inline.h</label>
        <link refid="visitor__inline_8h"/>
        <childnode refid="668" relation="include">
        </childnode>
        <childnode refid="663" relation="include">
        </childnode>
      </node>
      <node id="684">
        <label>/arrow/cpp/src/gandiva/projector_cache_key.h</label>
        <link refid="projector__cache__key_8h"/>
      </node>
      <node id="716">
        <label>/arrow/cpp/src/gandiva/compiled_expr.h</label>
        <link refid="compiled__expr_8h"/>
        <childnode refid="671" relation="include">
        </childnode>
      </node>
      <node id="728">
        <label>/arrow/cpp/src/arrow/compute/kernels/add.h</label>
        <link refid="add_8h"/>
      </node>
      <node id="693">
        <label>/arrow/cpp/src/gandiva/to_date_holder.h</label>
        <link refid="to__date__holder_8h"/>
        <childnode refid="690" relation="include">
        </childnode>
      </node>
      <node id="752">
        <label>/arrow/cpp/src/arrow/pch.h</label>
        <link refid="arrow_2pch_8h"/>
        <childnode refid="753" relation="include">
        </childnode>
        <childnode refid="754" relation="include">
        </childnode>
        <childnode refid="755" relation="include">
        </childnode>
        <childnode refid="712" relation="include">
        </childnode>
      </node>
      <node id="721">
        <label>/arrow/cpp/src/arrow/array/builder_nested.h</label>
        <link refid="builder__nested_8h"/>
        <childnode refid="662" relation="include">
        </childnode>
      </node>
      <node id="748">
        <label>/arrow/cpp/src/arrow/extension_type.h</label>
        <link refid="extension__type_8h"/>
        <childnode refid="659" relation="include">
        </childnode>
        <childnode refid="749" relation="include">
        </childnode>
        <childnode refid="750" relation="include">
        </childnode>
      </node>
      <node id="683">
        <label>/arrow/cpp/src/gandiva/projector.h</label>
        <link refid="gandiva_2projector_8h"/>
        <childnode refid="684" relation="include">
        </childnode>
      </node>
      <node id="743">
        <label>/arrow/cpp/src/arrow/compute/kernels/match.h</label>
        <link refid="match_8h"/>
      </node>
      <node id="667">
        <label>/arrow/cpp/src/arrow/util/hashing.h</label>
        <link refid="hashing_8h"/>
        <childnode refid="668" relation="include">
        </childnode>
      </node>
      <node id="755">
        <label>/arrow/cpp/src/arrow/python/pch.h</label>
        <link refid="arrow_2python_2pch_8h"/>
      </node>
      <node id="662">
        <label>/arrow/cpp/src/arrow/builder.h</label>
        <link refid="builder_8h"/>
        <childnode refid="659" relation="include">
        </childnode>
        <childnode refid="663" relation="include">
        </childnode>
        <childnode refid="664" relation="include">
        </childnode>
        <childnode refid="665" relation="include">
        </childnode>
        <childnode refid="666" relation="include">
        </childnode>
        <childnode refid="667" relation="include">
        </childnode>
        <childnode refid="669" relation="include">
        </childnode>
      </node>
      <node id="706">
        <label>/arrow/cpp/src/gandiva/llvm_types.h</label>
        <link refid="llvm__types_8h"/>
        <childnode refid="707" relation="include">
        </childnode>
        <childnode refid="681" relation="include">
        </childnode>
        <childnode refid="710" relation="include">
        </childnode>
        <childnode refid="671" relation="include">
        </childnode>
        <childnode refid="712" relation="include">
        </childnode>
      </node>
      <node id="692">
        <label>/arrow/cpp/src/gandiva/random_generator_holder.h</label>
        <link refid="random__generator__holder_8h"/>
        <childnode refid="690" relation="include">
        </childnode>
      </node>
      <node id="744">
        <label>/arrow/cpp/src/arrow/compute/kernels/nth_to_indices.h</label>
        <link refid="nth__to__indices_8h"/>
        <childnode refid="727" relation="include">
        </childnode>
      </node>
      <node id="736">
        <label>/arrow/cpp/src/arrow/dataset/file_base.h</label>
        <link refid="file__base_8h"/>
        <childnode refid="733" relation="include">
        </childnode>
        <childnode refid="737" relation="include">
        </childnode>
        <childnode refid="738" relation="include">
        </childnode>
      </node>
      <node id="697">
        <label>/arrow/cpp/src/gandiva/native_function.h</label>
        <link refid="native__function_8h"/>
        <childnode refid="687" relation="include">
        </childnode>
        <childnode refid="695" relation="include">
        </childnode>
        <childnode refid="698" relation="include">
        </childnode>
        <childnode refid="694" relation="include">
        </childnode>
        <childnode refid="699" relation="include">
        </childnode>
        <childnode refid="700" relation="include">
        </childnode>
        <childnode refid="701" relation="include">
        </childnode>
        <childnode refid="702" relation="include">
        </childnode>
        <childnode refid="703" relation="include">
        </childnode>
      </node>
      <node id="717">
        <label>/arrow/cpp/src/gandiva/selection_vector_impl.h</label>
        <link refid="selection__vector__impl_8h"/>
      </node>
      <node id="705">
        <label>/arrow/cpp/src/gandiva/jni/module_holder.h</label>
        <link refid="module__holder_8h"/>
      </node>
      <node id="735">
        <label>/arrow/cpp/src/arrow/dataset/discovery.h</label>
        <link refid="discovery_8h"/>
        <childnode refid="733" relation="include">
        </childnode>
      </node>
      <node id="720">
        <label>/arrow/cpp/src/arrow/array/builder_dict.h</label>
        <link refid="builder__dict_8h"/>
        <childnode refid="668" relation="include">
        </childnode>
        <childnode refid="662" relation="include">
        </childnode>
      </node>
      <node id="718">
        <label>/arrow/cpp/src/gandiva/simple_arena.h</label>
        <link refid="simple__arena_8h"/>
        <childnode refid="719" relation="include">
        </childnode>
      </node>
      <node id="685">
        <label>/arrow/cpp/src/gandiva/expression_registry.h</label>
        <link refid="expression__registry_8h"/>
      </node>
      <node id="695">
        <label>/arrow/cpp/src/gandiva/function_registry.h</label>
        <link refid="function__registry_8h"/>
        <childnode refid="681" relation="include">
        </childnode>
        <childnode refid="671" relation="include">
        </childnode>
      </node>
      <node id="742">
        <label>/arrow/cpp/src/arrow/compute/kernels/isin.h</label>
        <link refid="isin_8h"/>
        <childnode refid="727" relation="include">
        </childnode>
      </node>
      <node id="669">
        <label>/arrow/cpp/src/gandiva/arrow.h</label>
        <link refid="arrow_8h"/>
        <childnode refid="670" relation="include">
        </childnode>
        <childnode refid="672" relation="include">
        </childnode>
        <childnode refid="676" relation="include">
        </childnode>
        <childnode refid="677" relation="include">
        </childnode>
        <childnode refid="678" relation="include">
        </childnode>
        <childnode refid="680" relation="include">
        </childnode>
        <childnode refid="681" relation="include">
        </childnode>
        <childnode refid="682" relation="include">
        </childnode>
        <childnode refid="685" relation="include">
        </childnode>
        <childnode refid="686" relation="include">
        </childnode>
        <childnode refid="673" relation="include">
        </childnode>
        <childnode refid="674" relation="include">
        </childnode>
        <childnode refid="688" relation="include">
        </childnode>
        <childnode refid="694" relation="include">
        </childnode>
        <childnode refid="696" relation="include">
        </childnode>
        <childnode refid="704" relation="include">
        </childnode>
        <childnode refid="705" relation="include">
        </childnode>
        <childnode refid="706" relation="include">
        </childnode>
        <childnode refid="713" relation="include">
        </childnode>
        <childnode refid="689" relation="include">
        </childnode>
        <childnode refid="683" relation="include">
        </childnode>
        <childnode refid="684" relation="include">
        </childnode>
        <childnode refid="714" relation="include">
        </childnode>
        <childnode refid="715" relation="include">
        </childnode>
        <childnode refid="717" relation="include">
        </childnode>
        <childnode refid="718" relation="include">
        </childnode>
      </node>
      <node id="676">
        <label>/arrow/cpp/src/gandiva/date_utils.h</label>
        <link refid="date__utils_8h"/>
      </node>
      <node id="687">
        <label>/arrow/cpp/src/gandiva/dex.h</label>
        <link refid="dex_8h"/>
        <childnode refid="679" relation="include">
        </childnode>
      </node>
      <node id="675">
        <label>/arrow/cpp/src/gandiva/tree_expr_builder.h</label>
        <link refid="tree__expr__builder_8h"/>
      </node>
      <node id="727">
        <label>/arrow/cpp/src/arrow/compute/api.h</label>
        <link refid="compute_2api_8h"/>
        <childnode refid="665" relation="include">
        </childnode>
      </node>
      <node id="711">
        <label>/arrow/cpp/src/gandiva/decimal_ir.h</label>
        <link refid="decimal__ir_8h"/>
      </node>
      <node id="689">
        <label>/arrow/cpp/src/gandiva/node.h</label>
        <link refid="node_8h"/>
        <childnode refid="680" relation="include">
        </childnode>
        <childnode refid="681" relation="include">
        </childnode>
        <childnode refid="690" relation="include">
        </childnode>
        <childnode refid="691" relation="include">
        </childnode>
        <childnode refid="692" relation="include">
        </childnode>
        <childnode refid="693" relation="include">
        </childnode>
      </node>
      <node id="686">
        <label>/arrow/cpp/src/gandiva/field_descriptor.h</label>
        <link refid="field__descriptor_8h"/>
        <childnode refid="687" relation="include">
        </childnode>
      </node>
      <node id="725">
        <label>/arrow/cpp/src/arrow/array/concatenate.h</label>
        <link refid="concatenate_8h"/>
        <childnode refid="659" relation="include">
        </childnode>
      </node>
      <node id="661">
        <label>/arrow/cpp/src/arrow/array/builder_decimal.h</label>
        <link refid="builder__decimal_8h"/>
        <childnode refid="662" relation="include">
        </childnode>
      </node>
      <node id="666">
        <label>/arrow/cpp/src/arrow/table_builder.h</label>
        <link refid="table__builder_8h"/>
        <childnode refid="659" relation="include">
        </childnode>
      </node>
      <node id="700">
        <label>/arrow/cpp/src/gandiva/function_registry_hash.h</label>
        <link refid="function__registry__hash_8h"/>
      </node>
      <node id="701">
        <label>/arrow/cpp/src/gandiva/function_registry_math_ops.h</label>
        <link refid="function__registry__math__ops_8h"/>
      </node>
      <node id="679">
        <label>/arrow/cpp/src/gandiva/bitmap_accumulator.h</label>
        <link refid="bitmap__accumulator_8h"/>
      </node>
      <node id="739">
        <label>/arrow/cpp/src/arrow/dataset/scanner_internal.h</label>
        <link refid="scanner__internal_8h"/>
      </node>
      <node id="726">
        <label>/arrow/cpp/src/arrow/compute/kernel.h</label>
        <link refid="kernel_8h"/>
        <childnode refid="727" relation="include">
        </childnode>
        <childnode refid="728" relation="include">
        </childnode>
        <childnode refid="729" relation="include">
        </childnode>
        <childnode refid="731" relation="include">
        </childnode>
        <childnode refid="740" relation="include">
        </childnode>
        <childnode refid="741" relation="include">
        </childnode>
        <childnode refid="742" relation="include">
        </childnode>
        <childnode refid="743" relation="include">
        </childnode>
        <childnode refid="744" relation="include">
        </childnode>
        <childnode refid="745" relation="include">
        </childnode>
        <childnode refid="730" relation="include">
        </childnode>
        <childnode refid="746" relation="include">
        </childnode>
        <childnode refid="747" relation="include">
        </childnode>
        <childnode refid="732" relation="include">
        </childnode>
      </node>
      <node id="682">
        <label>/arrow/cpp/src/gandiva/expression.h</label>
        <link refid="gandiva_2expression_8h"/>
        <childnode refid="672" relation="include">
        </childnode>
        <childnode refid="680" relation="include">
        </childnode>
        <childnode refid="681" relation="include">
        </childnode>
        <childnode refid="683" relation="include">
        </childnode>
        <childnode refid="675" relation="include">
        </childnode>
      </node>
      <node id="737">
        <label>/arrow/cpp/src/arrow/dataset/file_ipc.h</label>
        <link refid="file__ipc_8h"/>
        <childnode refid="733" relation="include">
        </childnode>
      </node>
      <node id="747">
        <label>/arrow/cpp/src/arrow/compute/kernels/util_internal.h</label>
        <link refid="compute_2kernels_2util__internal_8h"/>
      </node>
      <node id="731">
        <label>/arrow/cpp/src/arrow/compute/kernels/compare.h</label>
        <link refid="compute_2kernels_2compare_8h"/>
        <childnode refid="727" relation="include">
        </childnode>
        <childnode refid="732" relation="include">
        </childnode>
      </node>
      <node id="663">
        <label>/arrow/cpp/src/arrow/compute/kernels/take_internal.h</label>
        <link refid="take__internal_8h"/>
      </node>
      <node id="699">
        <label>/arrow/cpp/src/gandiva/function_registry_datetime.h</label>
        <link refid="function__registry__datetime_8h"/>
      </node>
      <node id="732">
        <label>/arrow/cpp/src/arrow/dataset/filter.h</label>
        <link refid="arrow_2dataset_2filter_8h"/>
        <childnode refid="733" relation="include">
        </childnode>
        <childnode refid="734" relation="include">
        </childnode>
        <childnode refid="739" relation="include">
        </childnode>
      </node>
      <node id="672">
        <label>/arrow/cpp/src/gandiva/condition.h</label>
        <link refid="condition_8h"/>
        <childnode refid="673" relation="include">
        </childnode>
        <childnode refid="675" relation="include">
        </childnode>
      </node>
      <node id="703">
        <label>/arrow/cpp/src/gandiva/function_registry_timestamp_arithmetic.h</label>
        <link refid="function__registry__timestamp__arithmetic_8h"/>
      </node>
      <node id="713">
        <label>/arrow/cpp/src/gandiva/local_bitmaps_holder.h</label>
        <link refid="local__bitmaps__holder_8h"/>
        <childnode refid="678" relation="include">
        </childnode>
      </node>
      <node id="741">
        <label>/arrow/cpp/src/arrow/compute/kernels/hash.h</label>
        <link refid="hash_8h"/>
        <childnode refid="727" relation="include">
        </childnode>
      </node>
      <node id="658">
        <label>/arrow/cpp/src/arrow/array.h</label>
        <link refid="array_8h"/>
        <childnode refid="659" relation="include">
        </childnode>
        <childnode refid="660" relation="include">
        </childnode>
        <childnode refid="720" relation="include">
        </childnode>
        <childnode refid="721" relation="include">
        </childnode>
        <childnode refid="722" relation="include">
        </childnode>
        <childnode refid="724" relation="include">
        </childnode>
        <childnode refid="725" relation="include">
        </childnode>
        <childnode refid="668" relation="include">
        </childnode>
        <childnode refid="726" relation="include">
        </childnode>
        <childnode refid="742" relation="include">
        </childnode>
        <childnode refid="743" relation="include">
        </childnode>
        <childnode refid="747" relation="include">
        </childnode>
        <childnode refid="748" relation="include">
        </childnode>
        <childnode refid="751" relation="include">
        </childnode>
        <childnode refid="752" relation="include">
        </childnode>
        <childnode refid="667" relation="include">
        </childnode>
        <childnode refid="750" relation="include">
        </childnode>
        <childnode refid="669" relation="include">
        </childnode>
      </node>
      <node id="715">
        <label>/arrow/cpp/src/gandiva/selection_vector.h</label>
        <link refid="selection__vector_8h"/>
        <childnode refid="716" relation="include">
        </childnode>
        <childnode refid="673" relation="include">
        </childnode>
        <childnode refid="671" relation="include">
        </childnode>
        <childnode refid="683" relation="include">
        </childnode>
        <childnode refid="717" relation="include">
        </childnode>
      </node>
      <node id="704">
        <label>/arrow/cpp/src/gandiva/in_holder.h</label>
        <link refid="in__holder_8h"/>
        <childnode refid="687" relation="include">
        </childnode>
      </node>
      <node id="709">
        <label>/arrow/cpp/src/gandiva/exported_funcs.h</label>
        <link refid="exported__funcs_8h"/>
      </node>
      <node id="673">
        <label>/arrow/cpp/src/gandiva/filter.h</label>
        <link refid="gandiva_2filter_8h"/>
        <childnode refid="674" relation="include">
        </childnode>
      </node>
      <node id="691">
        <label>/arrow/cpp/src/gandiva/like_holder.h</label>
        <link refid="like__holder_8h"/>
        <childnode refid="690" relation="include">
        </childnode>
      </node>
      <node id="753">
        <label>/arrow/cpp/src/arrow/dataset/pch.h</label>
        <link refid="arrow_2dataset_2pch_8h"/>
      </node>
      <node id="696">
        <label>/arrow/cpp/src/gandiva/function_signature.h</label>
        <link refid="function__signature_8h"/>
        <childnode refid="685" relation="include">
        </childnode>
        <childnode refid="694" relation="include">
        </childnode>
        <childnode refid="697" relation="include">
        </childnode>
      </node>
      <node id="751">
        <label>/arrow/cpp/src/arrow/ipc/util.h</label>
        <link refid="ipc_2util_8h"/>
      </node>
      <node id="678">
        <label>/arrow/cpp/src/gandiva/eval_batch.h</label>
        <link refid="eval__batch_8h"/>
        <childnode refid="670" relation="include">
        </childnode>
        <childnode refid="679" relation="include">
        </childnode>
      </node>
      <node id="664">
        <label>/arrow/cpp/src/arrow/python/type_traits.h</label>
        <link refid="python_2type__traits_8h"/>
      </node>
      <node id="680">
        <label>/arrow/cpp/src/gandiva/expr_decomposer.h</label>
        <link refid="expr__decomposer_8h"/>
      </node>
      <node id="681">
        <label>/arrow/cpp/src/gandiva/expr_validator.h</label>
        <link refid="expr__validator_8h"/>
      </node>
      <node id="714">
        <label>/arrow/cpp/src/gandiva/regex_util.h</label>
        <link refid="regex__util_8h"/>
      </node>
      <node id="665">
        <label>/arrow/cpp/src/arrow/stl.h</label>
        <link refid="stl_8h"/>
      </node>
      <node id="733">
        <label>/arrow/cpp/src/arrow/dataset/api.h</label>
        <link refid="dataset_2api_8h"/>
      </node>
      <node id="724">
        <label>/arrow/cpp/src/arrow/array/builder_union.h</label>
        <link refid="builder__union_8h"/>
        <childnode refid="662" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structarrow_1_1_array_data" prot="public">arrow::ArrayData</innerclass>
    <innerclass refid="classarrow_1_1_array" prot="public">arrow::Array</innerclass>
    <innerclass refid="classarrow_1_1_flat_array" prot="public">arrow::FlatArray</innerclass>
    <innerclass refid="classarrow_1_1_null_array" prot="public">arrow::NullArray</innerclass>
    <innerclass refid="classarrow_1_1_primitive_array" prot="public">arrow::PrimitiveArray</innerclass>
    <innerclass refid="classarrow_1_1_numeric_array" prot="public">arrow::NumericArray</innerclass>
    <innerclass refid="classarrow_1_1_boolean_array" prot="public">arrow::BooleanArray</innerclass>
    <innerclass refid="classarrow_1_1_base_list_array" prot="public">arrow::BaseListArray</innerclass>
    <innerclass refid="classarrow_1_1_list_array" prot="public">arrow::ListArray</innerclass>
    <innerclass refid="classarrow_1_1_large_list_array" prot="public">arrow::LargeListArray</innerclass>
    <innerclass refid="classarrow_1_1_map_array" prot="public">arrow::MapArray</innerclass>
    <innerclass refid="classarrow_1_1_fixed_size_list_array" prot="public">arrow::FixedSizeListArray</innerclass>
    <innerclass refid="classarrow_1_1_base_binary_array" prot="public">arrow::BaseBinaryArray</innerclass>
    <innerclass refid="classarrow_1_1_binary_array" prot="public">arrow::BinaryArray</innerclass>
    <innerclass refid="classarrow_1_1_string_array" prot="public">arrow::StringArray</innerclass>
    <innerclass refid="classarrow_1_1_large_binary_array" prot="public">arrow::LargeBinaryArray</innerclass>
    <innerclass refid="classarrow_1_1_large_string_array" prot="public">arrow::LargeStringArray</innerclass>
    <innerclass refid="classarrow_1_1_fixed_size_binary_array" prot="public">arrow::FixedSizeBinaryArray</innerclass>
    <innerclass refid="classarrow_1_1_day_time_interval_array" prot="public">arrow::DayTimeIntervalArray</innerclass>
    <innerclass refid="classarrow_1_1_decimal128_array" prot="public">arrow::Decimal128Array</innerclass>
    <innerclass refid="classarrow_1_1_struct_array" prot="public">arrow::StructArray</innerclass>
    <innerclass refid="classarrow_1_1_union_array" prot="public">arrow::UnionArray</innerclass>
    <innerclass refid="classarrow_1_1_dictionary_array" prot="public">arrow::DictionaryArray</innerclass>
    <innernamespace refid="namespacearrow">arrow</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;atomic&gt;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>IWYU<sp/>pragma:<sp/>export</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iosfwd&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="compare_8h" kindref="compound">arrow/compare.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type_8h" kindref="compound">arrow/type.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type__fwd_8h" kindref="compound">arrow/type_fwd.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type__traits_8h" kindref="compound">arrow/type_traits.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="bit__util_8h" kindref="compound">arrow/util/bit_util.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="checked__cast_8h" kindref="compound">arrow/util/checked_cast.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="macros_8h" kindref="compound">arrow/util/macros.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="string__view_8h" kindref="compound">arrow/util/string_view.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>IWYU<sp/>pragma:<sp/>export</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="arrow_2util_2visibility_8h" kindref="compound">arrow/util/visibility.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacearrow" kindref="compound">arrow</ref><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Array;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ArrayVisitor;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="comment">//<sp/>When<sp/>slicing,<sp/>we<sp/>do<sp/>not<sp/>know<sp/>the<sp/>null<sp/>count<sp/>of<sp/>the<sp/>sliced<sp/>range<sp/>without</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="comment">//<sp/>doing<sp/>some<sp/>computation.<sp/>To<sp/>avoid<sp/>doing<sp/>this<sp/>eagerly,<sp/>we<sp/>set<sp/>the<sp/>null<sp/>count</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>-1<sp/>(any<sp/>negative<sp/>number<sp/>will<sp/>do).<sp/>When<sp/>Array::null_count<sp/>is<sp/>called<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/>first<sp/>time,<sp/>the<sp/>null<sp/>count<sp/>will<sp/>be<sp/>computed.<sp/>See<sp/>ARROW-33</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="namespacearrow_1a2bc89c993234944fd7bdbdfe95812080" refkind="member"><highlight class="normal">constexpr<sp/>int64_t<sp/><ref refid="namespacearrow_1a2bc89c993234944fd7bdbdfe95812080" kindref="member">kUnknownNullCount</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classarrow_1_1_status" kindref="compound">Status</ref>;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generic<sp/>array<sp/>data<sp/>container</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="structarrow_1_1_array_data" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref><sp/>{</highlight></codeline>
<codeline lineno="88" refid="structarrow_1_1_array_data_1a9806122aca6abb3a9157668e42f436e1" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_array_data_1a9806122aca6abb3a9157668e42f436e1" kindref="member">ArrayData</ref>()<sp/>:<sp/>length(0),<sp/>null_count(0),<sp/>offset(0)<sp/>{}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="structarrow_1_1_array_data_1a725a88f484fa8c95bdfaf548a0827b2d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_array_data_1a725a88f484fa8c95bdfaf548a0827b2d" kindref="member">ArrayData</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>type,<sp/>int64_t<sp/>length,</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>null_count<sp/>=<sp/>kUnknownNullCount,<sp/>int64_t<sp/>offset<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>type(type),<sp/>length(length),<sp/>null_count(null_count),<sp/>offset(offset)<sp/>{}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94" refid="structarrow_1_1_array_data_1a7e7031d9b627004042fa77a9052ac0a6" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_array_data_1a7e7031d9b627004042fa77a9052ac0a6" kindref="member">ArrayData</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>type,<sp/>int64_t<sp/>length,</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Buffer&gt;&gt;<sp/>buffers,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>null_count<sp/>=<sp/>kUnknownNullCount,<sp/>int64_t<sp/>offset<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref>(type,<sp/>length,<sp/>null_count,<sp/>offset)<sp/>{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;buffers<sp/>=<sp/>std::move(buffers);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="structarrow_1_1_array_data_1a0c946ce021ef47c73cc710105fa46fed" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_array_data_1a0c946ce021ef47c73cc710105fa46fed" kindref="member">ArrayData</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>type,<sp/>int64_t<sp/>length,</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Buffer&gt;&gt;<sp/>buffers,</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;ArrayData&gt;&gt;<sp/>child_data,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>null_count<sp/>=<sp/>kUnknownNullCount,<sp/>int64_t<sp/>offset<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref>(type,<sp/>length,<sp/>null_count,<sp/>offset)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;buffers<sp/>=<sp/>std::move(buffers);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;child_data<sp/>=<sp/>std::move(child_data);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ArrayData&gt;<sp/>Make(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>type,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>length,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Buffer&gt;&gt;<sp/>buffers,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>null_count<sp/>=<sp/>kUnknownNullCount,</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>offset<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ArrayData&gt;<sp/>Make(</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>type,<sp/>int64_t<sp/>length,</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Buffer&gt;&gt;<sp/>buffers,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;ArrayData&gt;&gt;<sp/>child_data,</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>null_count<sp/>=<sp/>kUnknownNullCount,<sp/>int64_t<sp/>offset<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ArrayData&gt;<sp/>Make(</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>type,<sp/>int64_t<sp/>length,</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Buffer&gt;&gt;<sp/>buffers,</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;std::shared_ptr&lt;ArrayData&gt;&gt;<sp/>child_data,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Array&gt;<sp/><ref refid="group__type-factories_1ga36f61c68b2a04a9d179cb56ff1186c59" kindref="member">dictionary</ref>,<sp/>int64_t<sp/>null_count<sp/>=<sp/>kUnknownNullCount,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>offset<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ArrayData&gt;<sp/>Make(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>type,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>length,</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>null_count<sp/>=<sp/>kUnknownNullCount,</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>offset<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135" refid="structarrow_1_1_array_data_1a0c2ccbdf8cea4048307ccaf85d61749f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_array_data_1a0c2ccbdf8cea4048307ccaf85d61749f" kindref="member">ArrayData</ref>(<ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref>&amp;&amp;<sp/>other)<sp/>noexcept</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>type(std::move(other.type)),</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length(other.length),</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset(other.offset),</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffers(std::move(other.buffers)),</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child_data(std::move(other.child_data)),</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__type-factories_1ga36f61c68b2a04a9d179cb56ff1186c59" kindref="member">dictionary</ref>(std::move(other.dictionary))<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>SetNullCount(other.null_count);</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>constructor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146" refid="structarrow_1_1_array_data_1a4dddad40bc23b9fae38058e499a2568a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_array_data_1a4dddad40bc23b9fae38058e499a2568a" kindref="member">ArrayData</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref>&amp;<sp/>other)<sp/>noexcept</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>type(other.type),</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length(other.length),</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset(other.offset),</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffers(other.buffers),</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>child_data(other.child_data),</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__type-factories_1ga36f61c68b2a04a9d179cb56ff1186c59" kindref="member">dictionary</ref>(other.dictionary)<sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>SetNullCount(other.null_count);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Move<sp/>assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157" refid="structarrow_1_1_array_data_1a32e65ea8a32f114ac930dac02f437bab" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref>&amp;<sp/><ref refid="structarrow_1_1_array_data_1a32e65ea8a32f114ac930dac02f437bab" kindref="member">operator=</ref>(<ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref>&amp;&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>std::move(other.type);</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>length<sp/>=<sp/>other.length;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>SetNullCount(other.null_count);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>other.offset;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>buffers<sp/>=<sp/>std::move(other.buffers);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>child_data<sp/>=<sp/>std::move(other.child_data);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>dictionary<sp/>=<sp/>std::move(other.dictionary);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Copy<sp/>assignment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169" refid="structarrow_1_1_array_data_1a95d3447e6ba3cb0b72a8ac0716d386a1" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref>&amp;<sp/><ref refid="structarrow_1_1_array_data_1a95d3447e6ba3cb0b72a8ac0716d386a1" kindref="member">operator=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref>&amp;<sp/>other)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>type<sp/>=<sp/>other.<ref refid="structarrow_1_1_array_data_1a3fcb28b85ec35b1886359086616869d5" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>length<sp/>=<sp/>other.<ref refid="structarrow_1_1_array_data_1aa4b33bdefec3290da60142301d852120" kindref="member">length</ref>;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>SetNullCount(other.<ref refid="structarrow_1_1_array_data_1a76c53d7331c71833c3be390c602c542d" kindref="member">null_count</ref>);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>offset<sp/>=<sp/>other.<ref refid="structarrow_1_1_array_data_1a62e35001b5555f0b59bb0db3db494419" kindref="member">offset</ref>;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>buffers<sp/>=<sp/>other.<ref refid="structarrow_1_1_array_data_1a11920b2e9bc4cb04cdb5970a45c5d3b0" kindref="member">buffers</ref>;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>child_data<sp/>=<sp/>other.<ref refid="structarrow_1_1_array_data_1afafe31e1a17df975598b5922ce9bb92d" kindref="member">child_data</ref>;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>dictionary<sp/>=<sp/>other.<ref refid="structarrow_1_1_array_data_1ae521d227ef18c9fd8196d47829f5d56d" kindref="member">dictionary</ref>;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180" refid="structarrow_1_1_array_data_1a63afe24c8c7319ad045fa3f9d388d2e9" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;ArrayData&gt;<sp/><ref refid="structarrow_1_1_array_data_1a63afe24c8c7319ad045fa3f9d388d2e9" kindref="member">Copy</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;ArrayData&gt;(*this);<sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Access<sp/>a<sp/>buffer&apos;s<sp/>data<sp/>as<sp/>a<sp/>typed<sp/>C<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="184" refid="structarrow_1_1_array_data_1a3dfb7d5574b7ae1295e20fd0e617f9c4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/><ref refid="structarrow_1_1_array_data_1a3dfb7d5574b7ae1295e20fd0e617f9c4" kindref="member">GetValues</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>int64_t<sp/>absolute_offset)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffers[i])<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(buffers[i]-&gt;data())<sp/>+<sp/>absolute_offset;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="193" refid="structarrow_1_1_array_data_1a915f02e6baac28f650748a2524e33d4d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/><ref refid="structarrow_1_1_array_data_1a915f02e6baac28f650748a2524e33d4d" kindref="member">GetValues</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetValues&lt;T&gt;(i,<sp/>offset);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Access<sp/>a<sp/>buffer&apos;s<sp/>data<sp/>as<sp/>a<sp/>typed<sp/>C<sp/>pointer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="199" refid="structarrow_1_1_array_data_1a4a2c176e644803d72d3d42c8ed873582" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T*<sp/><ref refid="structarrow_1_1_array_data_1a4a2c176e644803d72d3d42c8ed873582" kindref="member">GetMutableValues</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>int64_t<sp/>absolute_offset)<sp/>{</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffers[i])<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(buffers[i]-&gt;mutable_data())<sp/>+<sp/>absolute_offset;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="208" refid="structarrow_1_1_array_data_1a96dbb6d98fc42e9a4628c343806801d3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T*<sp/><ref refid="structarrow_1_1_array_data_1a96dbb6d98fc42e9a4628c343806801d3" kindref="member">GetMutableValues</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetMutableValues&lt;T&gt;(i,<sp/>offset);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Construct<sp/>a<sp/>zero-copy<sp/>slice<sp/>of<sp/>the<sp/>data<sp/>with<sp/>the<sp/>indicated<sp/>offset<sp/>and<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref><sp/>Slice(int64_t<sp/>offset,<sp/>int64_t<sp/>length)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215" refid="structarrow_1_1_array_data_1ae374aac3d9c4f29fc3844f1297520097" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_array_data_1ae374aac3d9c4f29fc3844f1297520097" kindref="member">SetNullCount</ref>(int64_t<sp/>v)<sp/>{<sp/>null_count.store(v);<sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>int64_t<sp/>GetNullCount()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220" refid="structarrow_1_1_array_data_1a3fcb28b85ec35b1886359086616869d5" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;DataType&gt;<sp/><ref refid="structarrow_1_1_array_data_1a3fcb28b85ec35b1886359086616869d5" kindref="member">type</ref>;</highlight></codeline>
<codeline lineno="221" refid="structarrow_1_1_array_data_1aa4b33bdefec3290da60142301d852120" refkind="member"><highlight class="normal"><sp/><sp/>int64_t<sp/><ref refid="structarrow_1_1_array_data_1aa4b33bdefec3290da60142301d852120" kindref="member">length</ref>;</highlight></codeline>
<codeline lineno="222" refid="structarrow_1_1_array_data_1a76c53d7331c71833c3be390c602c542d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>std::atomic&lt;int64_t&gt;<sp/><ref refid="structarrow_1_1_array_data_1a76c53d7331c71833c3be390c602c542d" kindref="member">null_count</ref>;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>logical<sp/>start<sp/>point<sp/>into<sp/>the<sp/>physical<sp/>buffers<sp/>(in<sp/>values,<sp/>not<sp/>bytes).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that,<sp/>for<sp/>child<sp/>data,<sp/>this<sp/>must<sp/>be<sp/>*added*<sp/>to<sp/>the<sp/>child<sp/>data&apos;s<sp/>own<sp/>offset.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225" refid="structarrow_1_1_array_data_1a62e35001b5555f0b59bb0db3db494419" refkind="member"><highlight class="normal"><sp/><sp/>int64_t<sp/><ref refid="structarrow_1_1_array_data_1a62e35001b5555f0b59bb0db3db494419" kindref="member">offset</ref>;</highlight></codeline>
<codeline lineno="226" refid="structarrow_1_1_array_data_1a11920b2e9bc4cb04cdb5970a45c5d3b0" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Buffer&gt;&gt;<sp/><ref refid="structarrow_1_1_array_data_1a11920b2e9bc4cb04cdb5970a45c5d3b0" kindref="member">buffers</ref>;</highlight></codeline>
<codeline lineno="227" refid="structarrow_1_1_array_data_1afafe31e1a17df975598b5922ce9bb92d" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;ArrayData&gt;&gt;<sp/><ref refid="structarrow_1_1_array_data_1afafe31e1a17df975598b5922ce9bb92d" kindref="member">child_data</ref>;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>dictionary<sp/>for<sp/>this<sp/>Array,<sp/>if<sp/>any.<sp/>Only<sp/>used<sp/>for<sp/>dictionary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231" refid="structarrow_1_1_array_data_1ae521d227ef18c9fd8196d47829f5d56d" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Array&gt;<sp/><ref refid="structarrow_1_1_array_data_1ae521d227ef18c9fd8196d47829f5d56d" kindref="member">dictionary</ref>;</highlight></codeline>
<codeline lineno="232"><highlight class="normal">};</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="238"><highlight class="normal">std::shared_ptr&lt;Array&gt;<sp/><ref refid="namespacearrow_1a7edcc7f88dec3ddcfcd8ccf1882cb833" kindref="member">MakeArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ArrayData&gt;&amp;<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;Array&gt;</ref>&gt;<sp/><ref refid="namespacearrow_1a19b8737ab489d01ffc7d216d2d6aabac" kindref="member">MakeArrayOfNull</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>type,</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>length,</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/>pool<sp/>=<sp/><ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">default_memory_pool</ref>());</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;Array&gt;</ref>&gt;<sp/><ref refid="namespacearrow_1ad32cba2e36a1a755389ec57810cec516" kindref="member">MakeArrayFromScalar</ref>(</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_scalar" kindref="compound">Scalar</ref>&amp;<sp/><ref refid="namespacearrow_1_1dataset_1abbc0528fcaf8fe939da7b3784bb120d4" kindref="member">scalar</ref>,<sp/>int64_t<sp/>length,<sp/><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/>pool<sp/>=<sp/><ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">default_memory_pool</ref>());</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><ref refid="macros_8h_1aa2ec0a506575823661e32d0be213b070" kindref="member">ARROW_DEPRECATED</ref>(</highlight><highlight class="stringliteral">&quot;Use<sp/>Result-returning<sp/>version&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="262"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="namespacearrow_1a19b8737ab489d01ffc7d216d2d6aabac" kindref="member">MakeArrayOfNull</ref>(const<sp/><ref refid="namespacestd" kindref="compound">std</ref>::shared_ptr&lt;<ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref>&gt;&amp;<sp/>type,<sp/>int64_t<sp/>length,</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacestd" kindref="compound">std</ref>::shared_ptr&lt;<ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&gt;*<sp/>out);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><ref refid="macros_8h_1aa2ec0a506575823661e32d0be213b070" kindref="member">ARROW_DEPRECATED</ref>(&quot;Use<sp/><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>-returning<sp/>version&quot;)</highlight></codeline>
<codeline lineno="272"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="namespacearrow_1a19b8737ab489d01ffc7d216d2d6aabac" kindref="member">MakeArrayOfNull</ref>(<ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/>pool,<sp/>const<sp/><ref refid="namespacestd" kindref="compound">std</ref>::shared_ptr&lt;<ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref>&gt;&amp;<sp/>type,</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>length,<sp/><ref refid="namespacestd" kindref="compound">std</ref>::shared_ptr&lt;<ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&gt;*<sp/>out);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><ref refid="macros_8h_1aa2ec0a506575823661e32d0be213b070" kindref="member">ARROW_DEPRECATED</ref>(&quot;Use<sp/><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>-returning<sp/>version&quot;)</highlight></codeline>
<codeline lineno="281"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="namespacearrow_1ad32cba2e36a1a755389ec57810cec516" kindref="member">MakeArrayFromScalar</ref>(const<sp/><ref refid="structarrow_1_1_scalar" kindref="compound">Scalar</ref>&amp;<sp/>scalar,<sp/>int64_t<sp/>length,</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacestd" kindref="compound">std</ref>::shared_ptr&lt;<ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&gt;*<sp/>out);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><ref refid="macros_8h_1aa2ec0a506575823661e32d0be213b070" kindref="member">ARROW_DEPRECATED</ref>(&quot;Use<sp/><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>-returning<sp/>version&quot;)</highlight></codeline>
<codeline lineno="291"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="namespacearrow_1ad32cba2e36a1a755389ec57810cec516" kindref="member">MakeArrayFromScalar</ref>(<ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/>pool,<sp/>const<sp/><ref refid="structarrow_1_1_scalar" kindref="compound">Scalar</ref>&amp;<sp/>scalar,<sp/>int64_t<sp/>length,</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacestd" kindref="compound">std</ref>::shared_ptr&lt;<ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&gt;*<sp/>out);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="comment">//<sp/>User<sp/>array<sp/>accessor<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="309" refid="classarrow_1_1_array" refkind="compound"><highlight class="normal">class<sp/>ARROW_EXPORT<sp/><ref refid="classarrow_1_1_array" kindref="compound">Array</ref><sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~Array()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="314" refid="classarrow_1_1_array_1a18c61cd4c8c158a30f30023eabc83acb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_array_1a18c61cd4c8c158a30f30023eabc83acb" kindref="member">IsNull</ref>(int64_t<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>null_bitmap_data_<sp/>!=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>!BitUtil::GetBit(null_bitmap_data_,<sp/>i<sp/>+<sp/>data_-&gt;offset);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="321" refid="classarrow_1_1_array_1ae554bfb313cd6b161f63fb2966dbd662" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_array_1ae554bfb313cd6b161f63fb2966dbd662" kindref="member">IsValid</ref>(int64_t<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>null_bitmap_data_<sp/>==<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref><sp/>||</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BitUtil::GetBit(null_bitmap_data_,<sp/>i<sp/>+<sp/>data_-&gt;offset);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="327" refid="classarrow_1_1_array_1a49c7fb3f73d2d43e7338591c5a8bd8bf" refkind="member"><highlight class="normal"><sp/><sp/>int64_t<sp/><ref refid="classarrow_1_1_array_1a49c7fb3f73d2d43e7338591c5a8bd8bf" kindref="member">length</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_-&gt;length;<sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="331" refid="classarrow_1_1_array_1a1a0c6c1aa06cffd1dcb3813f0d24b2fd" refkind="member"><highlight class="normal"><sp/><sp/>int64_t<sp/><ref refid="classarrow_1_1_array_1a1a0c6c1aa06cffd1dcb3813f0d24b2fd" kindref="member">offset</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_-&gt;offset;<sp/>}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>int64_t<sp/>null_count()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339" refid="classarrow_1_1_array_1a635a694fbadb0bfa731beb97df2ef7ea" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;DataType&gt;<sp/><ref refid="classarrow_1_1_array_1a635a694fbadb0bfa731beb97df2ef7ea" kindref="member">type</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_-&gt;type;<sp/>}</highlight></codeline>
<codeline lineno="340" refid="classarrow_1_1_array_1a155d9d827415438f976e3cb31e0a55f6" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref><sp/><ref refid="classarrow_1_1_array_1a155d9d827415438f976e3cb31e0a55f6" kindref="member">type_id</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_-&gt;type-&gt;id();<sp/>}</highlight></codeline>
<codeline lineno="341"><highlight class="normal"></highlight></codeline>
<codeline lineno="346" refid="classarrow_1_1_array_1a76c4756ac85b29f9135064d68d2ef908" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Buffer&gt;<sp/><ref refid="classarrow_1_1_array_1a76c4756ac85b29f9135064d68d2ef908" kindref="member">null_bitmap</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_-&gt;buffers[0];<sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="352" refid="classarrow_1_1_array_1a7a8838fbc97b9b3b8ca15cb163b2027c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/><ref refid="classarrow_1_1_array_1a7a8838fbc97b9b3b8ca15cb163b2027c" kindref="member">null_bitmap_data</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>null_bitmap_data_;<sp/>}</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Equals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Array&amp;<sp/>arr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_equal_options" kindref="compound">EqualOptions</ref>&amp;<sp/>=<sp/><ref refid="classarrow_1_1_equal_options_1aceb7c9984ead6d5a79ba4a725193d452" kindref="member">EqualOptions::Defaults</ref>())<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Equals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Array&gt;&amp;<sp/>arr,</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_equal_options" kindref="compound">EqualOptions</ref>&amp;<sp/>=<sp/><ref refid="classarrow_1_1_equal_options_1aceb7c9984ead6d5a79ba4a725193d452" kindref="member">EqualOptions::Defaults</ref>())<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1a0d16f62627582ce40fcb90f88471c67e" kindref="member">Diff</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Array&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ApproxEquals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Array&gt;&amp;<sp/>arr,</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_equal_options" kindref="compound">EqualOptions</ref>&amp;<sp/>=<sp/><ref refid="classarrow_1_1_equal_options_1aceb7c9984ead6d5a79ba4a725193d452" kindref="member">EqualOptions::Defaults</ref>())<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ApproxEquals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Array&amp;<sp/>arr,</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_equal_options" kindref="compound">EqualOptions</ref>&amp;<sp/>=<sp/><ref refid="classarrow_1_1_equal_options_1aceb7c9984ead6d5a79ba4a725193d452" kindref="member">EqualOptions::Defaults</ref>())<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>RangeEquals(int64_t<sp/>start_idx,<sp/>int64_t<sp/>end_idx,<sp/>int64_t<sp/>other_start_idx,</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Array&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>RangeEquals(int64_t<sp/>start_idx,<sp/>int64_t<sp/>end_idx,<sp/>int64_t<sp/>other_start_idx,</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Array&gt;&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>RangeEquals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Array&amp;<sp/>other,<sp/>int64_t<sp/>start_idx,<sp/>int64_t<sp/>end_idx,</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>other_start_idx)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>RangeEquals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Array&gt;&amp;<sp/>other,<sp/>int64_t<sp/>start_idx,</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>end_idx,<sp/>int64_t<sp/>other_start_idx)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>Accept(<ref refid="classarrow_1_1_array_visitor" kindref="compound">ArrayVisitor</ref>*<sp/>visitor)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;Array&gt;</ref>&gt;<sp/>View(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>type)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><ref refid="macros_8h_1aa2ec0a506575823661e32d0be213b070" kindref="member">ARROW_DEPRECATED</ref>(</highlight><highlight class="stringliteral">&quot;Use<sp/>Result-returning<sp/>version&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>View(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>type,<sp/>std::shared_ptr&lt;Array&gt;*<sp/>out)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Array&gt;<sp/>Slice(int64_t<sp/>offset,<sp/>int64_t<sp/>length)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Array&gt;<sp/>Slice(int64_t<sp/>offset)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409" refid="classarrow_1_1_array_1aeca84e9b3a1f1e6e3f83a61c90e376a9" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;ArrayData&gt;<sp/><ref refid="classarrow_1_1_array_1aeca84e9b3a1f1e6e3f83a61c90e376a9" kindref="member">data</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_;<sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411" refid="classarrow_1_1_array_1a183e69c91c531609f42a29b593119d58" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_array_1a183e69c91c531609f42a29b593119d58" kindref="member">num_fields</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(data_-&gt;child_data.size());<sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>Validate()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>ValidateFull()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="434" refid="classarrow_1_1_array_1ae44d3c2fae3a8578fe829da20c6732f8" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_array_1ae44d3c2fae3a8578fe829da20c6732f8" kindref="member">Array</ref>()<sp/>:<sp/>null_bitmap_data_(<ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436" refid="classarrow_1_1_array_1a2631dce1d5868216cba0a140e81ef14e" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;ArrayData&gt;<sp/><ref refid="classarrow_1_1_array_1a2631dce1d5868216cba0a140e81ef14e" kindref="member">data_</ref>;</highlight></codeline>
<codeline lineno="437" refid="classarrow_1_1_array_1aed59d9e8608229ff3808983cdc908ccd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/><ref refid="classarrow_1_1_array_1aed59d9e8608229ff3808983cdc908ccd" kindref="member">null_bitmap_data_</ref>;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="440" refid="classarrow_1_1_array_1a7053d3600bccd9cd34fcb6f5470a75c1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_array_1a7053d3600bccd9cd34fcb6f5470a75c1" kindref="member">SetData</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ArrayData&gt;&amp;<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>)<sp/>{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(data-&gt;buffers.size()<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>data-&gt;buffers[0])<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>null_bitmap_data_<sp/>=<sp/>data-&gt;buffers[0]-&gt;data();</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>null_bitmap_data_<sp/>=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>data_<sp/>=<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><ref refid="macros_8h_1a40d72e185b1488b5659b761f0b6115bb" kindref="member">ARROW_DISALLOW_COPY_AND_ASSIGN</ref>(Array);</highlight></codeline>
<codeline lineno="451"><highlight class="normal">};</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="460"><highlight class="normal">std::vector&lt;ArrayVector&gt;<sp/>RechunkArraysConsistently(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;ArrayVector&gt;&amp;);</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="463"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::ostream&amp;<sp/>operator&lt;&lt;(std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&amp;<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/>os<sp/>&lt;&lt;<sp/>x.<ref refid="classarrow_1_1_array_1a41c7af0e40ac55f2ce11785fea3e051e" kindref="member">ToString</ref>();</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>os;</highlight></codeline>
<codeline lineno="467"><highlight class="normal">}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="470" refid="classarrow_1_1_flat_array" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_flat_array" kindref="compound">FlatArray</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_array" kindref="compound">Array</ref><sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_array_1ae44d3c2fae3a8578fe829da20c6732f8" kindref="member">Array::Array</ref>;</highlight></codeline>
<codeline lineno="473"><highlight class="normal">};</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="476" refid="classarrow_1_1_null_array" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_null_array" kindref="compound">NullArray</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_flat_array" kindref="compound">FlatArray</ref><sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="478" refid="classarrow_1_1_null_array_1a08175ba37b2750e1b6886a9b3994e4c7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_null_type" kindref="compound">TypeClass</ref><sp/>=<sp/><ref refid="classarrow_1_1_null_type" kindref="compound">NullType</ref>;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480" refid="classarrow_1_1_null_array_1a4f567b5203d750e74765349fcb0d0f73" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_null_array_1a4f567b5203d750e74765349fcb0d0f73" kindref="member">NullArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ArrayData&gt;&amp;<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>)<sp/>{<sp/>SetData(data);<sp/>}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_null_array" kindref="compound">NullArray</ref>(int64_t<sp/>length);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetData(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ArrayData&gt;&amp;<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>)<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>null_bitmap_data_<sp/>=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>data-&gt;null_count<sp/>=<sp/>data-&gt;length;</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>data_<sp/>=<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal">};</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="492" refid="classarrow_1_1_primitive_array" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_primitive_array" kindref="compound">PrimitiveArray</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_flat_array" kindref="compound">FlatArray</ref><sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_primitive_array" kindref="compound">PrimitiveArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>type,<sp/>int64_t<sp/>length,</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Buffer&gt;&amp;<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>,</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Buffer&gt;&amp;<sp/>null_bitmap<sp/>=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>,</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>null_count<sp/>=<sp/>kUnknownNullCount,<sp/>int64_t<sp/>offset<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="500" refid="classarrow_1_1_primitive_array_1a0c05d9ba21020050abe94e1446a3cee1" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Buffer&gt;<sp/><ref refid="classarrow_1_1_primitive_array_1a0c05d9ba21020050abe94e1446a3cee1" kindref="member">values</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_-&gt;buffers[1];<sp/>}</highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="503" refid="classarrow_1_1_primitive_array_1ae4dd3139919510de3dc418257a240593" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_primitive_array_1ae4dd3139919510de3dc418257a240593" kindref="member">PrimitiveArray</ref>()<sp/>:<sp/>raw_values_(<ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight></codeline>
<codeline lineno="505" refid="classarrow_1_1_primitive_array_1a13f7d6c153121b7efc3442026f3dad71" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_primitive_array_1a13f7d6c153121b7efc3442026f3dad71" kindref="member">SetData</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ArrayData&gt;&amp;<sp/>data)<sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>values<sp/>=<sp/>data-&gt;buffers[1];</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classarrow_1_1_array_1a7053d3600bccd9cd34fcb6f5470a75c1" kindref="member">Array::SetData</ref>(data);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>raw_values_<sp/>=<sp/>values<sp/>==<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref><sp/>?<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref><sp/>:<sp/>values-&gt;data();</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511" refid="classarrow_1_1_primitive_array_1a219c4abd3685725bfa82a0628150cfac" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_primitive_array_1a219c4abd3685725bfa82a0628150cfac" kindref="member">PrimitiveArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ArrayData&gt;&amp;<sp/>data)<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>SetData(data);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515" refid="classarrow_1_1_primitive_array_1ab45d78650d5214bf6c3d0706693c448b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/><ref refid="classarrow_1_1_primitive_array_1ab45d78650d5214bf6c3d0706693c448b" kindref="member">raw_values_</ref>;</highlight></codeline>
<codeline lineno="516"><highlight class="normal">};</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TYPE&gt;</highlight></codeline>
<codeline lineno="520" refid="classarrow_1_1_numeric_array" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classarrow_1_1_numeric_array" kindref="compound">NumericArray</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_primitive_array" kindref="compound">PrimitiveArray</ref><sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="522" refid="classarrow_1_1_numeric_array_1a6c0d0622d835e18f1b2419bdfe31caf5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_numeric_array_1a6c0d0622d835e18f1b2419bdfe31caf5" kindref="member">TypeClass</ref><sp/>=<sp/>TYPE;</highlight></codeline>
<codeline lineno="523" refid="classarrow_1_1_numeric_array_1afd31bfd5f4362d391e159ffbea507e58" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_numeric_array_1afd31bfd5f4362d391e159ffbea507e58" kindref="member">value_type</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TypeClass::c_type;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525" refid="classarrow_1_1_numeric_array_1a4a1cd5a63614aa223c5c5d2090fbcd46" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_numeric_array_1a4a1cd5a63614aa223c5c5d2090fbcd46" kindref="member">NumericArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ArrayData&gt;&amp;<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>)<sp/>:<sp/><ref refid="classarrow_1_1_primitive_array" kindref="compound">PrimitiveArray</ref>(data)<sp/>{}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Only<sp/>enable<sp/>this<sp/>constructor<sp/>without<sp/>a<sp/>type<sp/>argument<sp/>for<sp/>types<sp/>without<sp/>additional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>metadata</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T1<sp/>=<sp/>TYPE&gt;</highlight></codeline>
<codeline lineno="530" refid="classarrow_1_1_numeric_array_1aeef4244dc35939027eb6adcccb386ae6" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_numeric_array_1aeef4244dc35939027eb6adcccb386ae6" kindref="member">NumericArray</ref>(<ref refid="namespacearrow_1a6c7d9fa36c6e17e9653179705ab1f49d" kindref="member">enable_if_parameter_free&lt;T1, int64_t&gt;</ref><sp/>length,</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Buffer&gt;&amp;<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>,</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Buffer&gt;&amp;<sp/>null_bitmap<sp/>=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>,</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>null_count<sp/>=<sp/>kUnknownNullCount,<sp/>int64_t<sp/>offset<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classarrow_1_1_primitive_array" kindref="compound">PrimitiveArray</ref>(<ref refid="structarrow_1_1_type_traits" kindref="compound">TypeTraits</ref>&lt;T1&gt;::type_singleton(),<sp/>length,<sp/>data,<sp/>null_bitmap,</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>null_count,<sp/>offset)<sp/>{}</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537" refid="classarrow_1_1_numeric_array_1a9b820ab827240fbdd77dc9a7dd5eec45" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_numeric_array_1afd31bfd5f4362d391e159ffbea507e58" kindref="member">value_type</ref>*<sp/><ref refid="classarrow_1_1_numeric_array_1a9b820ab827240fbdd77dc9a7dd5eec45" kindref="member">raw_values</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classarrow_1_1_numeric_array_1afd31bfd5f4362d391e159ffbea507e58" kindref="member">value_type</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(raw_values_)<sp/>+<sp/>data_-&gt;offset;</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541" refid="classarrow_1_1_numeric_array_1ad56c6cbdc7562d9db5e1f564db480529" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_numeric_array_1afd31bfd5f4362d391e159ffbea507e58" kindref="member">value_type</ref><sp/><ref refid="classarrow_1_1_numeric_array_1ad56c6cbdc7562d9db5e1f564db480529" kindref="member">Value</ref>(int64_t<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>raw_values()[i];<sp/>}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>API<sp/>compatibility<sp/>with<sp/>BinaryArray<sp/>etc.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544" refid="classarrow_1_1_numeric_array_1a97fcadff01d7e0415aabd035394601b3" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_numeric_array_1afd31bfd5f4362d391e159ffbea507e58" kindref="member">value_type</ref><sp/><ref refid="classarrow_1_1_numeric_array_1a97fcadff01d7e0415aabd035394601b3" kindref="member">GetView</ref>(int64_t<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Value(i);<sp/>}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_primitive_array_1ae4dd3139919510de3dc418257a240593" kindref="member">PrimitiveArray::PrimitiveArray</ref>;</highlight></codeline>
<codeline lineno="548"><highlight class="normal">};</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="551" refid="classarrow_1_1_boolean_array" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_boolean_array" kindref="compound">BooleanArray</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_primitive_array" kindref="compound">PrimitiveArray</ref><sp/>{</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="553" refid="classarrow_1_1_boolean_array_1abf6fcf852d4775a247162cac54453564" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_boolean_type" kindref="compound">TypeClass</ref><sp/>=<sp/><ref refid="namespaceparquet_1a60f6c016c8d8b612f78974bc516006b0" kindref="member">BooleanType</ref>;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_boolean_array" kindref="compound">BooleanArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ArrayData&gt;&amp;<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_boolean_array" kindref="compound">BooleanArray</ref>(int64_t<sp/>length,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Buffer&gt;&amp;<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>,</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Buffer&gt;&amp;<sp/>null_bitmap<sp/>=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>,</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>null_count<sp/>=<sp/>kUnknownNullCount,<sp/>int64_t<sp/>offset<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561" refid="classarrow_1_1_boolean_array_1a2d47354d00e3a3360d319c62e350abf6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_boolean_array_1a2d47354d00e3a3360d319c62e350abf6" kindref="member">Value</ref>(int64_t<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BitUtil::GetBit(reinterpret_cast&lt;const<sp/>uint8_t*&gt;(raw_values_),</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>+<sp/>data_-&gt;offset);</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566" refid="classarrow_1_1_boolean_array_1aeee6b2c8cfdfd73851d3c6b7b6cb9625" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_boolean_array_1aeee6b2c8cfdfd73851d3c6b7b6cb9625" kindref="member">GetView</ref>(int64_t<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Value(i);<sp/>}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_primitive_array_1ae4dd3139919510de3dc418257a240593" kindref="member">PrimitiveArray::PrimitiveArray</ref>;</highlight></codeline>
<codeline lineno="570"><highlight class="normal">};</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ListArray</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TYPE&gt;</highlight></codeline>
<codeline lineno="577" refid="classarrow_1_1_base_list_array" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classarrow_1_1_base_list_array" kindref="compound">BaseListArray</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_array" kindref="compound">Array</ref><sp/>{</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="579" refid="classarrow_1_1_base_list_array_1a696a01784c7bad9658a4f4580842f09a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TypeClass<sp/>=<sp/>TYPE;</highlight></codeline>
<codeline lineno="580" refid="classarrow_1_1_base_list_array_1a2edc91b360b5147b82d5a42daffd954c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>offset_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_list_type_1ad8ffbe4af2de59367166c279a58e731c" kindref="member">TypeClass::offset_type</ref>;</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582" refid="classarrow_1_1_base_list_array_1a1679d66c5b9c09efe11ccc442c264214" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TypeClass*<sp/><ref refid="classarrow_1_1_base_list_array_1a1679d66c5b9c09efe11ccc442c264214" kindref="member">list_type</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>list_type_;<sp/>}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight></codeline>
<codeline lineno="585" refid="classarrow_1_1_base_list_array_1a9a1ed59bfbcc91df5fa44892b2597609" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Array&gt;<sp/><ref refid="classarrow_1_1_base_list_array_1a9a1ed59bfbcc91df5fa44892b2597609" kindref="member">values</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>values_;<sp/>}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="588" refid="classarrow_1_1_base_list_array_1aa5f74bf28ec1a493ce54525ca7055c1f" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Buffer&gt;<sp/><ref refid="classarrow_1_1_base_list_array_1aa5f74bf28ec1a493ce54525ca7055c1f" kindref="member">value_offsets</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_-&gt;buffers[1];<sp/>}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590" refid="classarrow_1_1_base_list_array_1ad4fe8a53d1a06ce4942210223ce50564" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;DataType&gt;<sp/><ref refid="classarrow_1_1_base_list_array_1ad4fe8a53d1a06ce4942210223ce50564" kindref="member">value_type</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>list_type_-&gt;value_type();<sp/>}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="593" refid="classarrow_1_1_base_list_array_1ab29ce049771d7ceb0756fe1f835f51d1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>offset_type*<sp/><ref refid="classarrow_1_1_base_list_array_1ab29ce049771d7ceb0756fe1f835f51d1" kindref="member">raw_value_offsets</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>raw_value_offsets_<sp/>+<sp/>data_-&gt;offset;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>functions<sp/>will<sp/>not<sp/>perform<sp/>boundschecking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598" refid="classarrow_1_1_base_list_array_1a38821c957c8feaee60734c7aff8763d7" refkind="member"><highlight class="normal"><sp/><sp/>offset_type<sp/><ref refid="classarrow_1_1_base_list_array_1a38821c957c8feaee60734c7aff8763d7" kindref="member">value_offset</ref>(int64_t<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>raw_value_offsets_[i<sp/>+<sp/>data_-&gt;offset];</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="601" refid="classarrow_1_1_base_list_array_1ae5acff45549424221ae00865bc674ff2" refkind="member"><highlight class="normal"><sp/><sp/>offset_type<sp/><ref refid="classarrow_1_1_base_list_array_1ae5acff45549424221ae00865bc674ff2" kindref="member">value_length</ref>(int64_t<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>data_-&gt;offset;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>raw_value_offsets_[i<sp/>+<sp/>1]<sp/>-<sp/>raw_value_offsets_[i];</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="605" refid="classarrow_1_1_base_list_array_1a37af8ed233357849d9c76495106943c6" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Array&gt;<sp/><ref refid="classarrow_1_1_base_list_array_1a37af8ed233357849d9c76495106943c6" kindref="member">value_slice</ref>(int64_t<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>values_-&gt;Slice(value_offset(i),<sp/>value_length(i));</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="610" refid="classarrow_1_1_base_list_array_1a1a4b076880f003e0e091834b057935a5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>TypeClass*<sp/>list_type_<sp/>=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>;</highlight></codeline>
<codeline lineno="611" refid="classarrow_1_1_base_list_array_1a0a23bd7a40ce3eb96a7ea61508d42ec8" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Array&gt;<sp/><ref refid="classarrow_1_1_base_list_array_1a0a23bd7a40ce3eb96a7ea61508d42ec8" kindref="member">values_</ref>;</highlight></codeline>
<codeline lineno="612" refid="classarrow_1_1_base_list_array_1a71410a0160aa5c3e6e8e68e207f7eeec" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>offset_type*<sp/>raw_value_offsets_<sp/>=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>;</highlight></codeline>
<codeline lineno="613"><highlight class="normal">};</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="616" refid="classarrow_1_1_list_array" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_list_array" kindref="compound">ListArray</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_base_list_array" kindref="compound">BaseListArray</ref>&lt;ListType&gt;<sp/>{</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_list_array" kindref="compound">ListArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ArrayData&gt;&amp;<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_list_array" kindref="compound">ListArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>type,<sp/>int64_t<sp/>length,</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Buffer&gt;&amp;<sp/>value_offsets,</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Array&gt;&amp;<sp/>values,</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Buffer&gt;&amp;<sp/>null_bitmap<sp/>=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>,</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>null_count<sp/>=<sp/>kUnknownNullCount,<sp/>int64_t<sp/>offset<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;Array&gt;</ref>&gt;<sp/>FromArrays(</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&amp;<sp/>offsets,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&amp;<sp/>values,</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/>pool<sp/>=<sp/><ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">default_memory_pool</ref>());</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><ref refid="macros_8h_1aa2ec0a506575823661e32d0be213b070" kindref="member">ARROW_DEPRECATED</ref>(</highlight><highlight class="stringliteral">&quot;Use<sp/>Result-returning<sp/>version&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>FromArrays(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&amp;<sp/>offsets,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&amp;<sp/>values,<sp/><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/>pool,</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Array&gt;*<sp/>out);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;Array&gt;</ref>&gt;<sp/>Flatten(</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/>memory_pool<sp/>=<sp/><ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">default_memory_pool</ref>())<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>constructor<sp/>defers<sp/>SetData<sp/>to<sp/>a<sp/>derived<sp/>array<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_list_array" kindref="compound">ListArray</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetData(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ArrayData&gt;&amp;<sp/>data,</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref><sp/>expected_type_id<sp/>=<sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44ad074f9c02567b5945293b9114f84f210" kindref="member">Type::LIST</ref>);</highlight></codeline>
<codeline lineno="659"><highlight class="normal">};</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="662" refid="classarrow_1_1_large_list_array" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_large_list_array" kindref="compound">LargeListArray</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_base_list_array" kindref="compound">BaseListArray</ref>&lt;LargeListType&gt;<sp/>{</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_large_list_array" kindref="compound">LargeListArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ArrayData&gt;&amp;<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"></highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_large_list_array" kindref="compound">LargeListArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>type,<sp/>int64_t<sp/>length,</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Buffer&gt;&amp;<sp/>value_offsets,</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Array&gt;&amp;<sp/>values,</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Buffer&gt;&amp;<sp/>null_bitmap<sp/>=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>,</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>null_count<sp/>=<sp/>kUnknownNullCount,<sp/>int64_t<sp/>offset<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;Array&gt;</ref>&gt;<sp/>FromArrays(</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&amp;<sp/>offsets,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&amp;<sp/>values,</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/>pool<sp/>=<sp/><ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">default_memory_pool</ref>());</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><ref refid="macros_8h_1aa2ec0a506575823661e32d0be213b070" kindref="member">ARROW_DEPRECATED</ref>(</highlight><highlight class="stringliteral">&quot;Use<sp/>Result-returning<sp/>version&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>FromArrays(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&amp;<sp/>offsets,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&amp;<sp/>values,<sp/><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/>pool,</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Array&gt;*<sp/>out);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;Array&gt;</ref>&gt;<sp/>Flatten(</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/>memory_pool<sp/>=<sp/><ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">default_memory_pool</ref>())<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="699"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetData(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ArrayData&gt;&amp;<sp/>data);</highlight></codeline>
<codeline lineno="702"><highlight class="normal">};</highlight></codeline>
<codeline lineno="703"><highlight class="normal"></highlight></codeline>
<codeline lineno="704"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight><highlight class="comment">//<sp/>MapArray</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="710" refid="classarrow_1_1_map_array" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_map_array" kindref="compound">MapArray</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_list_array" kindref="compound">ListArray</ref><sp/>{</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="712" refid="classarrow_1_1_map_array_1ab975eee582dc0f548bc74d95de1885e7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_map_type" kindref="compound">TypeClass</ref><sp/>=<sp/><ref refid="classarrow_1_1_map_type" kindref="compound">MapType</ref>;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_map_array" kindref="compound">MapArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ArrayData&gt;&amp;<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_map_array" kindref="compound">MapArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>type,<sp/>int64_t<sp/>length,</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Buffer&gt;&amp;<sp/>value_offsets,</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Array&gt;&amp;<sp/>keys,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Array&gt;&amp;<sp/>items,</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Buffer&gt;&amp;<sp/>null_bitmap<sp/>=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>,</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>null_count<sp/>=<sp/>kUnknownNullCount,<sp/>int64_t<sp/>offset<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_map_array" kindref="compound">MapArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>type,<sp/>int64_t<sp/>length,</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Buffer&gt;&amp;<sp/>value_offsets,</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Array&gt;&amp;<sp/>values,</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Buffer&gt;&amp;<sp/>null_bitmap<sp/>=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>,</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>null_count<sp/>=<sp/>kUnknownNullCount,<sp/>int64_t<sp/>offset<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;Array&gt;</ref>&gt;<sp/>FromArrays(</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Array&gt;&amp;<sp/>offsets,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Array&gt;&amp;<sp/>keys,</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Array&gt;&amp;<sp/>items,<sp/><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/>pool<sp/>=<sp/><ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">default_memory_pool</ref>());</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><ref refid="macros_8h_1aa2ec0a506575823661e32d0be213b070" kindref="member">ARROW_DEPRECATED</ref>(</highlight><highlight class="stringliteral">&quot;Use<sp/>Result-returning<sp/>version&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/>static<sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>FromArrays(const<sp/><ref refid="namespacestd" kindref="compound">std</ref>::shared_ptr&lt;<ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&gt;&amp;<sp/>offsets,</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/><ref refid="namespacestd" kindref="compound">std</ref>::shared_ptr&lt;<ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&gt;&amp;<sp/>keys,</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/><ref refid="namespacestd" kindref="compound">std</ref>::shared_ptr&lt;<ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&gt;&amp;<sp/>items,<sp/><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/>pool,</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacestd" kindref="compound">std</ref>::shared_ptr&lt;<ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&gt;*<sp/>out);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751" refid="classarrow_1_1_map_array_1a8075fce27b8da580f136eaed8e74c858" refkind="member"><highlight class="normal"><sp/><sp/>const<sp/><ref refid="classarrow_1_1_map_type" kindref="compound">MapType</ref>*<sp/>map_type()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>map_type_;<sp/>}</highlight></codeline>
<codeline lineno="752"><highlight class="normal"></highlight></codeline>
<codeline lineno="754" refid="classarrow_1_1_map_array_1aa4aba9d0e2de6592a828199137acc62f" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Array&gt;<sp/><ref refid="classarrow_1_1_map_array_1aa4aba9d0e2de6592a828199137acc62f" kindref="member">keys</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>keys_;<sp/>}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="757" refid="classarrow_1_1_map_array_1a36be64920cc4a5576f0ab4d175647db8" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Array&gt;<sp/><ref refid="classarrow_1_1_map_array_1a36be64920cc4a5576f0ab4d175647db8" kindref="member">items</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>items_;<sp/>}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>ValidateChildData(</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;ArrayData&gt;&gt;&amp;<sp/>child_data);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetData(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ArrayData&gt;&amp;<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="765"><highlight class="normal"></highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_map_type" kindref="compound">MapType</ref>*<sp/>map_type_;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Array&gt;<sp/>keys_,<sp/>items_;</highlight></codeline>
<codeline lineno="769"><highlight class="normal">};</highlight></codeline>
<codeline lineno="770"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FixedSizeListArray</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="773"><highlight class="normal"></highlight></codeline>
<codeline lineno="775" refid="classarrow_1_1_fixed_size_list_array" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_fixed_size_list_array" kindref="compound">FixedSizeListArray</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_array" kindref="compound">Array</ref><sp/>{</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="777" refid="classarrow_1_1_fixed_size_list_array_1a34018edada75e58eaf28f02196a74551" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_fixed_size_list_type" kindref="compound">TypeClass</ref><sp/>=<sp/><ref refid="classarrow_1_1_fixed_size_list_type" kindref="compound">FixedSizeListType</ref>;</highlight></codeline>
<codeline lineno="778" refid="classarrow_1_1_fixed_size_list_array_1a008d02e638ef5e14c155f7505169b8c5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_fixed_size_list_array_1a008d02e638ef5e14c155f7505169b8c5" kindref="member">offset_type</ref><sp/>=<sp/><ref refid="classarrow_1_1_fixed_size_list_type_1afb8571e18fc3b51ef6f671fffabdea3c" kindref="member">TypeClass::offset_type</ref>;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_fixed_size_list_array" kindref="compound">FixedSizeListArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ArrayData&gt;&amp;<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_fixed_size_list_array" kindref="compound">FixedSizeListArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>type,<sp/>int64_t<sp/>length,</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Array&gt;&amp;<sp/>values,</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Buffer&gt;&amp;<sp/>null_bitmap<sp/>=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>,</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>null_count<sp/>=<sp/>kUnknownNullCount,<sp/>int64_t<sp/>offset<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_fixed_size_list_type" kindref="compound">FixedSizeListType</ref>*<sp/>list_type()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Array&gt;<sp/>values()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;DataType&gt;<sp/>value_type()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>functions<sp/>will<sp/>not<sp/>perform<sp/>boundschecking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="795" refid="classarrow_1_1_fixed_size_list_array_1a4e1606690a77fd804727106948d43143" refkind="member"><highlight class="normal"><sp/><sp/>int32_t<sp/><ref refid="classarrow_1_1_fixed_size_list_array_1a4e1606690a77fd804727106948d43143" kindref="member">value_offset</ref>(int64_t<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>data_-&gt;offset;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(list_size_<sp/>*<sp/>i);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="799" refid="classarrow_1_1_fixed_size_list_array_1a14069d3cea9a7b8984fdeef97c775fbf" refkind="member"><highlight class="normal"><sp/><sp/>int32_t<sp/><ref refid="classarrow_1_1_fixed_size_list_array_1a14069d3cea9a7b8984fdeef97c775fbf" kindref="member">value_length</ref>(int64_t<sp/>i<sp/>=<sp/>0)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>list_size_;<sp/>}</highlight></codeline>
<codeline lineno="800" refid="classarrow_1_1_fixed_size_list_array_1aad8caf0d4af38b0d6230326f891d1a88" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Array&gt;<sp/><ref refid="classarrow_1_1_fixed_size_list_array_1aad8caf0d4af38b0d6230326f891d1a88" kindref="member">value_slice</ref>(int64_t<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>values_-&gt;Slice(value_offset(i),<sp/>value_length(i));</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;Array&gt;</ref>&gt;<sp/>FromArrays(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Array&gt;&amp;<sp/>values,</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>list_size);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetData(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ArrayData&gt;&amp;<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="814" refid="classarrow_1_1_fixed_size_list_array_1a61f79108a788ebca0b611eab5c862673" refkind="member"><highlight class="normal"><sp/><sp/>int32_t<sp/><ref refid="classarrow_1_1_fixed_size_list_array_1a61f79108a788ebca0b611eab5c862673" kindref="member">list_size_</ref>;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Array&gt;<sp/>values_;</highlight></codeline>
<codeline lineno="818"><highlight class="normal">};</highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Binary<sp/>and<sp/>String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TYPE&gt;</highlight></codeline>
<codeline lineno="826" refid="classarrow_1_1_base_binary_array" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classarrow_1_1_base_binary_array" kindref="compound">BaseBinaryArray</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_flat_array" kindref="compound">FlatArray</ref><sp/>{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="828" refid="classarrow_1_1_base_binary_array_1aa9de547ce006ad336ed2594caec5be94" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_binary_type" kindref="compound">TypeClass</ref><sp/>=<sp/>TYPE;</highlight></codeline>
<codeline lineno="829" refid="classarrow_1_1_base_binary_array_1ae137dc915809eecda2954eee3841917d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>offset_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_binary_type_1a9622766aa289f240f21d4508efe6996d" kindref="member">TypeClass::offset_type</ref>;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>XXX<sp/>should<sp/>GetValue(int64_t<sp/>i)<sp/>return<sp/>a<sp/>string_view?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="833" refid="classarrow_1_1_base_binary_array_1aac07633b970ccfb80a93ba291e9cf6a8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/><ref refid="classarrow_1_1_base_binary_array_1aac07633b970ccfb80a93ba291e9cf6a8" kindref="member">GetValue</ref>(int64_t<sp/>i,<sp/>offset_type*<sp/>out_length)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Account<sp/>for<sp/>base<sp/>offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>data_-&gt;offset;</highlight></codeline>
<codeline lineno="836"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>offset_type<sp/>pos<sp/>=<sp/>raw_value_offsets_[i];</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>*out_length<sp/>=<sp/>raw_value_offsets_[i<sp/>+<sp/>1]<sp/>-<sp/>pos;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>raw_data_<sp/>+<sp/>pos;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="840"><highlight class="normal"></highlight></codeline>
<codeline lineno="845" refid="classarrow_1_1_base_binary_array_1a2e60168c3ab328c3c3b5427fec03ec22" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespaceparquet_1af53c3c244055490d5dd385dd8a874540" kindref="member">util::string_view</ref><sp/><ref refid="classarrow_1_1_base_binary_array_1a2e60168c3ab328c3c3b5427fec03ec22" kindref="member">GetView</ref>(int64_t<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Account<sp/>for<sp/>base<sp/>offset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>data_-&gt;offset;</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>offset_type<sp/>pos<sp/>=<sp/>raw_value_offsets_[i];</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceparquet_1af53c3c244055490d5dd385dd8a874540" kindref="member">util::string_view</ref>(reinterpret_cast&lt;const<sp/>char*&gt;(raw_data_<sp/>+<sp/>pos),</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>raw_value_offsets_[i<sp/>+<sp/>1]<sp/>-<sp/>pos);</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="857" refid="classarrow_1_1_base_binary_array_1a9794e7292b715f60c9d8496e03ab7674" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classarrow_1_1_base_binary_array_1a9794e7292b715f60c9d8496e03ab7674" kindref="member">GetString</ref>(int64_t<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(GetView(i));<sp/>}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="860" refid="classarrow_1_1_base_binary_array_1a6eb3bfc0f9448179d09c101862e61519" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Buffer&gt;<sp/><ref refid="classarrow_1_1_base_binary_array_1a6eb3bfc0f9448179d09c101862e61519" kindref="member">value_offsets</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_-&gt;buffers[1];<sp/>}</highlight></codeline>
<codeline lineno="861"><highlight class="normal"></highlight></codeline>
<codeline lineno="863" refid="classarrow_1_1_base_binary_array_1aabfb39b8ed388d9a4d7da3f429c1ea64" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Buffer&gt;<sp/><ref refid="classarrow_1_1_base_binary_array_1aabfb39b8ed388d9a4d7da3f429c1ea64" kindref="member">value_data</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_-&gt;buffers[2];<sp/>}</highlight></codeline>
<codeline lineno="864"><highlight class="normal"></highlight></codeline>
<codeline lineno="865" refid="classarrow_1_1_base_binary_array_1a2f3301b94a0cfbfee57a5b716992a760" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>offset_type*<sp/><ref refid="classarrow_1_1_base_binary_array_1a2f3301b94a0cfbfee57a5b716992a760" kindref="member">raw_value_offsets</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>raw_value_offsets_<sp/>+<sp/>data_-&gt;offset;</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Neither<sp/>of<sp/>these<sp/>functions<sp/>will<sp/>perform<sp/>boundschecking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="870" refid="classarrow_1_1_base_binary_array_1a8c492a5b81a3cf56f0bec775f012c4d3" refkind="member"><highlight class="normal"><sp/><sp/>offset_type<sp/><ref refid="classarrow_1_1_base_binary_array_1a8c492a5b81a3cf56f0bec775f012c4d3" kindref="member">value_offset</ref>(int64_t<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>raw_value_offsets_[i<sp/>+<sp/>data_-&gt;offset];</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="873" refid="classarrow_1_1_base_binary_array_1a2c5145c2d8f1572d22c98fe7b489a462" refkind="member"><highlight class="normal"><sp/><sp/>offset_type<sp/><ref refid="classarrow_1_1_base_binary_array_1a2c5145c2d8f1572d22c98fe7b489a462" kindref="member">value_length</ref>(int64_t<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>+=<sp/>data_-&gt;offset;</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>raw_value_offsets_[i<sp/>+<sp/>1]<sp/>-<sp/>raw_value_offsets_[i];</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>subclasses</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="880" refid="classarrow_1_1_base_binary_array_1a9817c0f1c71b9113719e0b0a118a1194" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_base_binary_array_1a9817c0f1c71b9113719e0b0a118a1194" kindref="member">BaseBinaryArray</ref>()<sp/>:<sp/>raw_value_offsets_(<ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>),<sp/>raw_data_(<ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Protected<sp/>method<sp/>for<sp/>constructors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="883" refid="classarrow_1_1_base_binary_array_1abd801f830916c2c149ad787bb10988d8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_base_binary_array_1abd801f830916c2c149ad787bb10988d8" kindref="member">SetData</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ArrayData&gt;&amp;<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>)<sp/>{</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value_offsets<sp/>=<sp/>data-&gt;buffers[1];</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value_data<sp/>=<sp/>data-&gt;buffers[2];</highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classarrow_1_1_array_1a7053d3600bccd9cd34fcb6f5470a75c1" kindref="member">Array::SetData</ref>(data);</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/>raw_data_<sp/>=<sp/>value_data<sp/>==<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref><sp/>?<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref><sp/>:<sp/>value_data-&gt;data();</highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/><sp/><sp/>raw_value_offsets_<sp/>=</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_offsets<sp/>==<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></highlight></codeline>
<codeline lineno="891"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">offset_type*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value_offsets-&gt;data());</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="893"><highlight class="normal"></highlight></codeline>
<codeline lineno="894" refid="classarrow_1_1_base_binary_array_1a15897930376c3fda965f7e0e45982528" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>offset_type*<sp/><ref refid="classarrow_1_1_base_binary_array_1a15897930376c3fda965f7e0e45982528" kindref="member">raw_value_offsets_</ref>;</highlight></codeline>
<codeline lineno="895" refid="classarrow_1_1_base_binary_array_1aa205aaac9f53fa439f1b22e5d6a58201" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/><ref refid="classarrow_1_1_base_binary_array_1aa205aaac9f53fa439f1b22e5d6a58201" kindref="member">raw_data_</ref>;</highlight></codeline>
<codeline lineno="896"><highlight class="normal">};</highlight></codeline>
<codeline lineno="897"><highlight class="normal"></highlight></codeline>
<codeline lineno="899" refid="classarrow_1_1_binary_array" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_binary_array" kindref="compound">BinaryArray</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_base_binary_array" kindref="compound">BaseBinaryArray</ref>&lt;BinaryType&gt;<sp/>{</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_binary_array" kindref="compound">BinaryArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ArrayData&gt;&amp;<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_binary_array" kindref="compound">BinaryArray</ref>(int64_t<sp/>length,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Buffer&gt;&amp;<sp/>value_offsets,</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Buffer&gt;&amp;<sp/>data,</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Buffer&gt;&amp;<sp/>null_bitmap<sp/>=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>,</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>null_count<sp/>=<sp/>kUnknownNullCount,<sp/>int64_t<sp/>offset<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="907"><highlight class="normal"></highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>subclasses<sp/>such<sp/>as<sp/>StringArray</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="910" refid="classarrow_1_1_binary_array_1a4629439f9c405804a04ad554a5d77f98" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_binary_array_1a4629439f9c405804a04ad554a5d77f98" kindref="member">BinaryArray</ref>()<sp/>:<sp/><ref refid="classarrow_1_1_base_binary_array" kindref="compound">BaseBinaryArray</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="911"><highlight class="normal">};</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="914" refid="classarrow_1_1_string_array" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_string_array" kindref="compound">StringArray</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_binary_array" kindref="compound">BinaryArray</ref><sp/>{</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="916" refid="classarrow_1_1_string_array_1a9df6199d476049a0192c5d6e5ebca7ea" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_string_type" kindref="compound">TypeClass</ref><sp/>=<sp/><ref refid="classarrow_1_1_string_type" kindref="compound">StringType</ref>;</highlight></codeline>
<codeline lineno="917"><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_string_array" kindref="compound">StringArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ArrayData&gt;&amp;<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="919"><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_string_array" kindref="compound">StringArray</ref>(int64_t<sp/>length,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Buffer&gt;&amp;<sp/>value_offsets,</highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Buffer&gt;&amp;<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>,</highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Buffer&gt;&amp;<sp/>null_bitmap<sp/>=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>,</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>null_count<sp/>=<sp/>kUnknownNullCount,<sp/>int64_t<sp/>offset<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="924"><highlight class="normal">};</highlight></codeline>
<codeline lineno="925"><highlight class="normal"></highlight></codeline>
<codeline lineno="927" refid="classarrow_1_1_large_binary_array" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_large_binary_array" kindref="compound">LargeBinaryArray</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_base_binary_array" kindref="compound">BaseBinaryArray</ref>&lt;LargeBinaryType&gt;<sp/>{</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_large_binary_array" kindref="compound">LargeBinaryArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ArrayData&gt;&amp;<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_large_binary_array" kindref="compound">LargeBinaryArray</ref>(int64_t<sp/>length,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Buffer&gt;&amp;<sp/>value_offsets,</highlight></codeline>
<codeline lineno="932"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Buffer&gt;&amp;<sp/>data,</highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Buffer&gt;&amp;<sp/>null_bitmap<sp/>=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>,</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>null_count<sp/>=<sp/>kUnknownNullCount,<sp/>int64_t<sp/>offset<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="935"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>subclasses<sp/>such<sp/>as<sp/>LargeStringArray</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938" refid="classarrow_1_1_large_binary_array_1a0be425d9f39ed6ca1b54a9849112bfd9" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_large_binary_array_1a0be425d9f39ed6ca1b54a9849112bfd9" kindref="member">LargeBinaryArray</ref>()<sp/>:<sp/><ref refid="classarrow_1_1_base_binary_array" kindref="compound">BaseBinaryArray</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="939"><highlight class="normal">};</highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="942" refid="classarrow_1_1_large_string_array" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_large_string_array" kindref="compound">LargeStringArray</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_large_binary_array" kindref="compound">LargeBinaryArray</ref><sp/>{</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="944" refid="classarrow_1_1_large_string_array_1ae31394ae0a9e230ce213156f86e61b79" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_large_string_type" kindref="compound">TypeClass</ref><sp/>=<sp/><ref refid="classarrow_1_1_large_string_type" kindref="compound">LargeStringType</ref>;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_large_string_array" kindref="compound">LargeStringArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ArrayData&gt;&amp;<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_large_string_array" kindref="compound">LargeStringArray</ref>(int64_t<sp/>length,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Buffer&gt;&amp;<sp/>value_offsets,</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Buffer&gt;&amp;<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>,</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Buffer&gt;&amp;<sp/>null_bitmap<sp/>=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>,</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>null_count<sp/>=<sp/>kUnknownNullCount,<sp/>int64_t<sp/>offset<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="952"><highlight class="normal">};</highlight></codeline>
<codeline lineno="953"><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Fixed<sp/>width<sp/>binary</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="958" refid="classarrow_1_1_fixed_size_binary_array" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_fixed_size_binary_array" kindref="compound">FixedSizeBinaryArray</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_primitive_array" kindref="compound">PrimitiveArray</ref><sp/>{</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="960" refid="classarrow_1_1_fixed_size_binary_array_1afb0b23293b047e349b8fbd6f6450cfc1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_fixed_size_binary_type" kindref="compound">TypeClass</ref><sp/>=<sp/><ref refid="classarrow_1_1_fixed_size_binary_type" kindref="compound">FixedSizeBinaryType</ref>;</highlight></codeline>
<codeline lineno="961"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_fixed_size_binary_array" kindref="compound">FixedSizeBinaryArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ArrayData&gt;&amp;<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_fixed_size_binary_array" kindref="compound">FixedSizeBinaryArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>type,<sp/>int64_t<sp/>length,</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Buffer&gt;&amp;<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>,</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Buffer&gt;&amp;<sp/>null_bitmap<sp/>=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>,</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>null_count<sp/>=<sp/>kUnknownNullCount,<sp/>int64_t<sp/>offset<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="968"><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>GetValue(int64_t<sp/>i)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="970" refid="classarrow_1_1_fixed_size_binary_array_1a79fb560c0d49ac3b1c9911d17c707dd9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/><ref refid="classarrow_1_1_fixed_size_binary_array_1a79fb560c0d49ac3b1c9911d17c707dd9" kindref="member">Value</ref>(int64_t<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetValue(i);<sp/>}</highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight></codeline>
<codeline lineno="972" refid="classarrow_1_1_fixed_size_binary_array_1aa25ddbf16229d02eb8ec3785e85e70ea" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespaceparquet_1af53c3c244055490d5dd385dd8a874540" kindref="member">util::string_view</ref><sp/><ref refid="classarrow_1_1_fixed_size_binary_array_1aa25ddbf16229d02eb8ec3785e85e70ea" kindref="member">GetView</ref>(int64_t<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceparquet_1af53c3c244055490d5dd385dd8a874540" kindref="member">util::string_view</ref>(reinterpret_cast&lt;const<sp/>char*&gt;(GetValue(i)),<sp/>byte_width());</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976" refid="classarrow_1_1_fixed_size_binary_array_1a592dfa2419a56ed5de48d0a7e135b71e" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classarrow_1_1_fixed_size_binary_array_1a592dfa2419a56ed5de48d0a7e135b71e" kindref="member">GetString</ref>(int64_t<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(GetView(i));<sp/>}</highlight></codeline>
<codeline lineno="977"><highlight class="normal"></highlight></codeline>
<codeline lineno="978" refid="classarrow_1_1_fixed_size_binary_array_1ac087ddef41ad9a5b421bee1c6c1fbdee" refkind="member"><highlight class="normal"><sp/><sp/>int32_t<sp/><ref refid="classarrow_1_1_fixed_size_binary_array_1ac087ddef41ad9a5b421bee1c6c1fbdee" kindref="member">byte_width</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>byte_width_;<sp/>}</highlight></codeline>
<codeline lineno="979"><highlight class="normal"></highlight></codeline>
<codeline lineno="980" refid="classarrow_1_1_fixed_size_binary_array_1a60559969081c4dca3b489598b2082768" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/><ref refid="classarrow_1_1_fixed_size_binary_array_1a60559969081c4dca3b489598b2082768" kindref="member">raw_values</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>raw_values_<sp/>+<sp/>data_-&gt;offset<sp/>*<sp/>byte_width_;<sp/>}</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="983" refid="classarrow_1_1_fixed_size_binary_array_1af8b8dcf1f261f428f91fc483654468d3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_fixed_size_binary_array_1af8b8dcf1f261f428f91fc483654468d3" kindref="member">SetData</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ArrayData&gt;&amp;<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>)<sp/>{</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classarrow_1_1_primitive_array_1a13f7d6c153121b7efc3442026f3dad71" kindref="member">PrimitiveArray::SetData</ref>(data);</highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/>byte_width_<sp/>=</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal::checked_cast&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_fixed_size_binary_type" kindref="compound">FixedSizeBinaryType</ref>&amp;&gt;(*type()).byte_width();</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989" refid="classarrow_1_1_fixed_size_binary_array_1a8c7c1b088c14fd0804418c5272689600" refkind="member"><highlight class="normal"><sp/><sp/>int32_t<sp/><ref refid="classarrow_1_1_fixed_size_binary_array_1a8c7c1b088c14fd0804418c5272689600" kindref="member">byte_width_</ref>;</highlight></codeline>
<codeline lineno="990"><highlight class="normal">};</highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="995" refid="classarrow_1_1_day_time_interval_array" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_day_time_interval_array" kindref="compound">DayTimeIntervalArray</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_primitive_array" kindref="compound">PrimitiveArray</ref><sp/>{</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="997" refid="classarrow_1_1_day_time_interval_array_1a4284b4ffbe0cd5b937ae001aa1693649" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_day_time_interval_type" kindref="compound">TypeClass</ref><sp/>=<sp/><ref refid="classarrow_1_1_day_time_interval_type" kindref="compound">DayTimeIntervalType</ref>;</highlight></codeline>
<codeline lineno="998"><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_day_time_interval_array" kindref="compound">DayTimeIntervalArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ArrayData&gt;&amp;<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_day_time_interval_array" kindref="compound">DayTimeIntervalArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>type,<sp/>int64_t<sp/>length,</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Buffer&gt;&amp;<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>,</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Buffer&gt;&amp;<sp/>null_bitmap<sp/>=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>,</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>null_count<sp/>=<sp/>kUnknownNullCount,<sp/>int64_t<sp/>offset<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"></highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_day_time_interval_type_1_1_day_milliseconds" kindref="compound">TypeClass::DayMilliseconds</ref><sp/>GetValue(int64_t<sp/>i)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1007" refid="classarrow_1_1_day_time_interval_array_1a6e3aa508825b13aaf513d42d8c821944" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_day_time_interval_type_1_1_day_milliseconds" kindref="compound">TypeClass::DayMilliseconds</ref><sp/><ref refid="classarrow_1_1_day_time_interval_array_1a6e3aa508825b13aaf513d42d8c821944" kindref="member">Value</ref>(int64_t<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetValue(i);<sp/>}</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>compatibility<sp/>with<sp/>Take<sp/>kernel.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1010" refid="classarrow_1_1_day_time_interval_array_1ade1304846a70d6425e6824c954cc04c8" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_day_time_interval_type_1_1_day_milliseconds" kindref="compound">TypeClass::DayMilliseconds</ref><sp/><ref refid="classarrow_1_1_day_time_interval_array_1ade1304846a70d6425e6824c954cc04c8" kindref="member">GetView</ref>(int64_t<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetValue(i);<sp/>}</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"></highlight></codeline>
<codeline lineno="1012" refid="classarrow_1_1_day_time_interval_array_1a5712a3287da759aad82717a69ee79ffa" refkind="member"><highlight class="normal"><sp/><sp/>int32_t<sp/><ref refid="classarrow_1_1_day_time_interval_array_1a5712a3287da759aad82717a69ee79ffa" kindref="member">byte_width</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structarrow_1_1_day_time_interval_type_1_1_day_milliseconds" kindref="compound">TypeClass::DayMilliseconds</ref>);<sp/>}</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1014" refid="classarrow_1_1_day_time_interval_array_1abb3c5c7e10544bba9aefc5bf45d3954c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/><ref refid="classarrow_1_1_day_time_interval_array_1abb3c5c7e10544bba9aefc5bf45d3954c" kindref="member">raw_values</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>raw_values_<sp/>+<sp/>data_-&gt;offset<sp/>*<sp/>byte_width();<sp/>}</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1017" refid="classarrow_1_1_day_time_interval_array_1a50e752558821761039755216452cb039" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_day_time_interval_array_1a50e752558821761039755216452cb039" kindref="member">SetData</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ArrayData&gt;&amp;<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>)<sp/>{</highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="classarrow_1_1_primitive_array_1a13f7d6c153121b7efc3442026f3dad71" kindref="member">PrimitiveArray::SetData</ref>(data);</highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1020"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Decimal128Array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1024"><highlight class="normal"></highlight></codeline>
<codeline lineno="1026" refid="classarrow_1_1_decimal128_array" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_decimal128_array" kindref="compound">Decimal128Array</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_fixed_size_binary_array" kindref="compound">FixedSizeBinaryArray</ref><sp/>{</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1028" refid="classarrow_1_1_decimal128_array_1a8a7c20498d001f8f1c9867845a770b04" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_fixed_size_binary_type" kindref="compound">TypeClass</ref><sp/>=<sp/><ref refid="classarrow_1_1_decimal128_type" kindref="compound">Decimal128Type</ref>;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_fixed_size_binary_array_1a71ea4fa21718e7a6520ac98e191d71d7" kindref="member">FixedSizeBinaryArray::FixedSizeBinaryArray</ref>;</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight></codeline>
<codeline lineno="1033"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_decimal128_array" kindref="compound">Decimal128Array</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ArrayData&gt;&amp;<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="1034"><highlight class="normal"></highlight></codeline>
<codeline lineno="1035"><highlight class="normal"><sp/><sp/>std::string<sp/>FormatValue(int64_t<sp/>i)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1036"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1037"><highlight class="normal"></highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Backward<sp/>compatibility</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1039" refid="namespacearrow_1aa9162b62a545f10bb02754571cd7ec80" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_decimal128_array" kindref="compound">DecimalArray</ref><sp/>=<sp/><ref refid="classarrow_1_1_decimal128_array" kindref="compound">Decimal128Array</ref>;</highlight></codeline>
<codeline lineno="1040"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1045" refid="classarrow_1_1_struct_array" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_struct_array" kindref="compound">StructArray</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_array" kindref="compound">Array</ref><sp/>{</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1047" refid="classarrow_1_1_struct_array_1aac4588e3149c6f7558cdb538336a3cdd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_struct_type" kindref="compound">TypeClass</ref><sp/>=<sp/><ref refid="classarrow_1_1_struct_type" kindref="compound">StructType</ref>;</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"></highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_struct_array" kindref="compound">StructArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ArrayData&gt;&amp;<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"></highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_struct_array" kindref="compound">StructArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>type,<sp/>int64_t<sp/>length,</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;Array&gt;&gt;&amp;<sp/>children,</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Buffer&gt;<sp/>null_bitmap<sp/>=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>,</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>null_count<sp/>=<sp/>kUnknownNullCount,<sp/>int64_t<sp/>offset<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;StructArray&gt;</ref>&gt;<sp/>Make(</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;Array&gt;&gt;&amp;<sp/>children,</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;&amp;<sp/>field_names,</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Buffer&gt;<sp/>null_bitmap<sp/>=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>,</highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>null_count<sp/>=<sp/>kUnknownNullCount,<sp/>int64_t<sp/>offset<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"></highlight></codeline>
<codeline lineno="1071"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;StructArray&gt;</ref>&gt;<sp/>Make(</highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;Array&gt;&gt;&amp;<sp/>children,</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;Field&gt;&gt;&amp;<sp/>fields,</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Buffer&gt;<sp/>null_bitmap<sp/>=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>,</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>null_count<sp/>=<sp/>kUnknownNullCount,<sp/>int64_t<sp/>offset<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_struct_type" kindref="compound">StructType</ref>*<sp/>struct_type()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1078"><highlight class="normal"></highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>a<sp/>shared<sp/>pointer<sp/>in<sp/>case<sp/>the<sp/>requestor<sp/>desires<sp/>to<sp/>share<sp/>ownership</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>this<sp/>array.<sp/><sp/>The<sp/>returned<sp/>array<sp/>has<sp/>its<sp/>offset,<sp/>length<sp/>and<sp/>null</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>count<sp/>adjusted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Array&gt;<sp/><ref refid="group__schema-factories_1gaf9f57798b5abe44d560a52887f28894c" kindref="member">field</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"></highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Array&gt;<sp/>GetFieldByName(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>name)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;ArrayVector&gt;</ref><sp/>Flatten(<ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/>pool<sp/>=<sp/><ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">default_memory_pool</ref>())<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/><ref refid="macros_8h_1aa2ec0a506575823661e32d0be213b070" kindref="member">ARROW_DEPRECATED</ref>(</highlight><highlight class="stringliteral">&quot;Use<sp/>Result-returning<sp/>version&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>Flatten(<ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/>pool,<sp/><ref refid="namespacearrow_1ad77c54b51dac02d857f3a26d11ed58b3" kindref="member">ArrayVector</ref>*<sp/>out)<sp/>const;</highlight></codeline>
<codeline lineno="1094"><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/>private:</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>caching<sp/>boxed<sp/>child<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1097"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>XXX<sp/>This<sp/>is<sp/>not<sp/>handled<sp/>in<sp/>a<sp/>thread-safe<sp/>manner.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/>mutable<sp/><ref refid="namespacestd" kindref="compound">std</ref>::vector&lt;<ref refid="namespacestd" kindref="compound">std</ref>::shared_ptr&lt;<ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&gt;&gt;<sp/>boxed_fields_;</highlight></codeline>
<codeline lineno="1099"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1100"><highlight class="normal"></highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1102"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1103"><highlight class="normal"></highlight></codeline>
<codeline lineno="1105" refid="classarrow_1_1_union_array" refkind="compound"><highlight class="normal">class<sp/>ARROW_EXPORT<sp/><ref refid="classarrow_1_1_union_array" kindref="compound">UnionArray</ref><sp/>:<sp/>public<sp/><ref refid="classarrow_1_1_array" kindref="compound">Array</ref><sp/>{</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1107" refid="classarrow_1_1_union_array_1ad5586c93068510028e788bea9e617bc7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_union_type" kindref="compound">TypeClass</ref><sp/>=<sp/><ref refid="classarrow_1_1_union_type" kindref="compound">UnionType</ref>;</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"></highlight></codeline>
<codeline lineno="1109" refid="classarrow_1_1_union_array_1a72f94afa1f396323001b2877cd344535" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_union_array_1a72f94afa1f396323001b2877cd344535" kindref="member">type_code_t</ref><sp/>=<sp/>int8_t;</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"></highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_union_array" kindref="compound">UnionArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ArrayData&gt;&amp;<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_union_array" kindref="compound">UnionArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>type,<sp/>int64_t<sp/>length,</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;Array&gt;&gt;&amp;<sp/>children,</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Buffer&gt;&amp;<sp/>type_ids,</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Buffer&gt;&amp;<sp/>value_offsets<sp/>=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>,</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Buffer&gt;&amp;<sp/>null_bitmap<sp/>=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>,</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>null_count<sp/>=<sp/>kUnknownNullCount,<sp/>int64_t<sp/>offset<sp/>=<sp/>0);</highlight></codeline>
<codeline lineno="1119"><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;Array&gt;</ref>&gt;<sp/>MakeDense(</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Array&amp;<sp/>type_ids,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Array&amp;<sp/>value_offsets,</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;Array&gt;&gt;&amp;<sp/>children,</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;&amp;<sp/>field_names<sp/>=<sp/>{},</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;type_code_t&gt;&amp;<sp/>type_codes<sp/>=<sp/>{});</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight></codeline>
<codeline lineno="1149" refid="classarrow_1_1_union_array_1a7af561645559f4e432f2aa03177581af" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;Array&gt;</ref>&gt;<sp/><ref refid="classarrow_1_1_union_array_1a7af561645559f4e432f2aa03177581af" kindref="member">MakeDense</ref>(</highlight></codeline>
<codeline lineno="1150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Array&amp;<sp/>type_ids,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Array&amp;<sp/>value_offsets,</highlight></codeline>
<codeline lineno="1151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;Array&gt;&gt;&amp;<sp/>children,</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;type_code_t&gt;&amp;<sp/>type_codes)<sp/>{</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeDense(type_ids,<sp/>value_offsets,<sp/>children,<sp/>std::vector&lt;std::string&gt;{},</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>type_codes);</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal"><sp/><sp/><ref refid="macros_8h_1aa2ec0a506575823661e32d0be213b070" kindref="member">ARROW_DEPRECATED</ref>(</highlight><highlight class="stringliteral">&quot;Use<sp/>Result-returning<sp/>version&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1158" refid="classarrow_1_1_union_array_1a0b60007b182c3ddd6faa250f3eb6c81b" refkind="member"><highlight class="normal"><sp/><sp/>static<sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>MakeDense(const<sp/>Array&amp;<sp/>type_ids,<sp/>const<sp/>Array&amp;<sp/>value_offsets,</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/><ref refid="namespacestd" kindref="compound">std</ref>::vector&lt;<ref refid="namespacestd" kindref="compound">std</ref>::shared_ptr&lt;Array&gt;&gt;&amp;<sp/>children,</highlight></codeline>
<codeline lineno="1160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/><ref refid="namespacestd" kindref="compound">std</ref>::vector&lt;<ref refid="namespacestd" kindref="compound">std</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;&amp;<sp/>field_names,</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/><ref refid="namespacestd" kindref="compound">std</ref>::vector&lt;<ref refid="classarrow_1_1_union_array_1a72f94afa1f396323001b2877cd344535" kindref="member">type_code_t</ref>&gt;&amp;<sp/>type_codes,</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacestd" kindref="compound">std</ref>::shared_ptr&lt;Array&gt;*<sp/>out)<sp/>{</highlight></codeline>
<codeline lineno="1163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeDense(type_ids,<sp/>value_offsets,<sp/>children,<sp/>field_names,<sp/>type_codes)</highlight></codeline>
<codeline lineno="1164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.Value(out);</highlight></codeline>
<codeline lineno="1165"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/><ref refid="macros_8h_1aa2ec0a506575823661e32d0be213b070" kindref="member">ARROW_DEPRECATED</ref>(</highlight><highlight class="stringliteral">&quot;Use<sp/>Result-returning<sp/>version&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1168" refid="classarrow_1_1_union_array_1ae3f98d2930cfb3abd5c0c7e9f4668b12" refkind="member"><highlight class="normal"><sp/><sp/>static<sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>MakeDense(const<sp/>Array&amp;<sp/>type_ids,<sp/>const<sp/>Array&amp;<sp/>value_offsets,</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/><ref refid="namespacestd" kindref="compound">std</ref>::vector&lt;<ref refid="namespacestd" kindref="compound">std</ref>::shared_ptr&lt;Array&gt;&gt;&amp;<sp/>children,</highlight></codeline>
<codeline lineno="1170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/><ref refid="namespacestd" kindref="compound">std</ref>::vector&lt;<ref refid="namespacestd" kindref="compound">std</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;&amp;<sp/>field_names,</highlight></codeline>
<codeline lineno="1171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacestd" kindref="compound">std</ref>::shared_ptr&lt;Array&gt;*<sp/>out)<sp/>{</highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeDense(type_ids,<sp/>value_offsets,<sp/>children,<sp/>field_names).Value(out);</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/><ref refid="macros_8h_1aa2ec0a506575823661e32d0be213b070" kindref="member">ARROW_DEPRECATED</ref>(</highlight><highlight class="stringliteral">&quot;Use<sp/>Result-returning<sp/>version&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1176" refid="classarrow_1_1_union_array_1aa57ae052affd5928e32e0dc076f821c7" refkind="member"><highlight class="normal"><sp/><sp/>static<sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>MakeDense(const<sp/><ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&amp;<sp/>type_ids,<sp/>const<sp/><ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&amp;<sp/>value_offsets,</highlight></codeline>
<codeline lineno="1177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/><ref refid="namespacestd" kindref="compound">std</ref>::vector&lt;<ref refid="namespacestd" kindref="compound">std</ref>::shared_ptr&lt;<ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&gt;&gt;&amp;<sp/>children,</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/><ref refid="namespacestd" kindref="compound">std</ref>::vector&lt;<ref refid="classarrow_1_1_union_array_1a72f94afa1f396323001b2877cd344535" kindref="member">type_code_t</ref>&gt;&amp;<sp/>type_codes,</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacestd" kindref="compound">std</ref>::shared_ptr&lt;<ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&gt;*<sp/>out)<sp/>{</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeDense(type_ids,<sp/>value_offsets,<sp/>children,<sp/>type_codes).Value(out);</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="normal"><sp/><sp/><ref refid="macros_8h_1aa2ec0a506575823661e32d0be213b070" kindref="member">ARROW_DEPRECATED</ref>(</highlight><highlight class="stringliteral">&quot;Use<sp/>Result-returning<sp/>version&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1184" refid="classarrow_1_1_union_array_1a1e25bd6a74bb47aee3612d82516ae9fe" refkind="member"><highlight class="normal"><sp/><sp/>static<sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>MakeDense(const<sp/><ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&amp;<sp/>type_ids,<sp/>const<sp/><ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&amp;<sp/>value_offsets,</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/><ref refid="namespacestd" kindref="compound">std</ref>::vector&lt;<ref refid="namespacestd" kindref="compound">std</ref>::shared_ptr&lt;<ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&gt;&gt;&amp;<sp/>children,</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacestd" kindref="compound">std</ref>::shared_ptr&lt;<ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&gt;*<sp/>out)<sp/>{</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeDense(type_ids,<sp/>value_offsets,<sp/>children).Value(out);</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;Array&gt;</ref>&gt;<sp/>MakeSparse(</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&amp;<sp/>type_ids,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;Array&gt;&gt;&amp;<sp/>children,</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;&amp;<sp/>field_names<sp/>=<sp/>{},</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;type_code_t&gt;&amp;<sp/>type_codes<sp/>=<sp/>{});</highlight></codeline>
<codeline lineno="1203"><highlight class="normal"></highlight></codeline>
<codeline lineno="1212" refid="classarrow_1_1_union_array_1ab75861c04be6815d02c98739b7496b3f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;Array&gt;</ref>&gt;<sp/><ref refid="classarrow_1_1_union_array_1ab75861c04be6815d02c98739b7496b3f" kindref="member">MakeSparse</ref>(</highlight></codeline>
<codeline lineno="1213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&amp;<sp/>type_ids,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;Array&gt;&gt;&amp;<sp/>children,</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;type_code_t&gt;&amp;<sp/>type_codes)<sp/>{</highlight></codeline>
<codeline lineno="1215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeSparse(type_ids,<sp/>children,<sp/>std::vector&lt;std::string&gt;{},<sp/>type_codes);</highlight></codeline>
<codeline lineno="1216"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1217"><highlight class="normal"></highlight></codeline>
<codeline lineno="1218"><highlight class="normal"><sp/><sp/><ref refid="macros_8h_1aa2ec0a506575823661e32d0be213b070" kindref="member">ARROW_DEPRECATED</ref>(</highlight><highlight class="stringliteral">&quot;Use<sp/>Result-returning<sp/>version&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1219" refid="classarrow_1_1_union_array_1ac1bbb3b0fde5375f165865b920fac3c4" refkind="member"><highlight class="normal"><sp/><sp/>static<sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>MakeSparse(const<sp/><ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&amp;<sp/>type_ids,</highlight></codeline>
<codeline lineno="1220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/><ref refid="namespacestd" kindref="compound">std</ref>::vector&lt;<ref refid="namespacestd" kindref="compound">std</ref>::shared_ptr&lt;<ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&gt;&gt;&amp;<sp/>children,</highlight></codeline>
<codeline lineno="1221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/><ref refid="namespacestd" kindref="compound">std</ref>::vector&lt;<ref refid="namespacestd" kindref="compound">std</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;&amp;<sp/>field_names,</highlight></codeline>
<codeline lineno="1222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/><ref refid="namespacestd" kindref="compound">std</ref>::vector&lt;<ref refid="classarrow_1_1_union_array_1a72f94afa1f396323001b2877cd344535" kindref="member">type_code_t</ref>&gt;&amp;<sp/>type_codes,</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacestd" kindref="compound">std</ref>::shared_ptr&lt;<ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&gt;*<sp/>out)<sp/>{</highlight></codeline>
<codeline lineno="1224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeSparse(type_ids,<sp/>children,<sp/>field_names,<sp/>type_codes).Value(out);</highlight></codeline>
<codeline lineno="1225"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1226"><highlight class="normal"></highlight></codeline>
<codeline lineno="1227"><highlight class="normal"><sp/><sp/><ref refid="macros_8h_1aa2ec0a506575823661e32d0be213b070" kindref="member">ARROW_DEPRECATED</ref>(</highlight><highlight class="stringliteral">&quot;Use<sp/>Result-returning<sp/>version&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1228" refid="classarrow_1_1_union_array_1ad9b9ccdc1f3c086170c5f7e9624fd643" refkind="member"><highlight class="normal"><sp/><sp/>static<sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>MakeSparse(const<sp/><ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&amp;<sp/>type_ids,</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/><ref refid="namespacestd" kindref="compound">std</ref>::vector&lt;<ref refid="namespacestd" kindref="compound">std</ref>::shared_ptr&lt;<ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&gt;&gt;&amp;<sp/>children,</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/><ref refid="namespacestd" kindref="compound">std</ref>::vector&lt;<ref refid="namespacestd" kindref="compound">std</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&gt;&amp;<sp/>field_names,</highlight></codeline>
<codeline lineno="1231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacestd" kindref="compound">std</ref>::shared_ptr&lt;<ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&gt;*<sp/>out)<sp/>{</highlight></codeline>
<codeline lineno="1232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeSparse(type_ids,<sp/>children,<sp/>field_names).Value(out);</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1234"><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"><sp/><sp/><ref refid="macros_8h_1aa2ec0a506575823661e32d0be213b070" kindref="member">ARROW_DEPRECATED</ref>(</highlight><highlight class="stringliteral">&quot;Use<sp/>Result-returning<sp/>version&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1236" refid="classarrow_1_1_union_array_1a1abc36aef6389990225074369fba1259" refkind="member"><highlight class="normal"><sp/><sp/>static<sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>MakeSparse(const<sp/><ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&amp;<sp/>type_ids,</highlight></codeline>
<codeline lineno="1237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/><ref refid="namespacestd" kindref="compound">std</ref>::vector&lt;<ref refid="namespacestd" kindref="compound">std</ref>::shared_ptr&lt;<ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&gt;&gt;&amp;<sp/>children,</highlight></codeline>
<codeline lineno="1238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/><ref refid="namespacestd" kindref="compound">std</ref>::vector&lt;<ref refid="classarrow_1_1_union_array_1a72f94afa1f396323001b2877cd344535" kindref="member">type_code_t</ref>&gt;&amp;<sp/>type_codes,</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacestd" kindref="compound">std</ref>::shared_ptr&lt;<ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&gt;*<sp/>out)<sp/>{</highlight></codeline>
<codeline lineno="1240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeSparse(type_ids,<sp/>children,<sp/>type_codes).Value(out);</highlight></codeline>
<codeline lineno="1241"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1242"><highlight class="normal"></highlight></codeline>
<codeline lineno="1243"><highlight class="normal"><sp/><sp/><ref refid="macros_8h_1aa2ec0a506575823661e32d0be213b070" kindref="member">ARROW_DEPRECATED</ref>(</highlight><highlight class="stringliteral">&quot;Use<sp/>Result-returning<sp/>version&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1244" refid="classarrow_1_1_union_array_1a570002863522922769fde0ad36260f7f" refkind="member"><highlight class="normal"><sp/><sp/>static<sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>MakeSparse(const<sp/><ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&amp;<sp/>type_ids,</highlight></codeline>
<codeline lineno="1245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/><ref refid="namespacestd" kindref="compound">std</ref>::vector&lt;<ref refid="namespacestd" kindref="compound">std</ref>::shared_ptr&lt;<ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&gt;&gt;&amp;<sp/>children,</highlight></codeline>
<codeline lineno="1246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacestd" kindref="compound">std</ref>::shared_ptr&lt;<ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&gt;*<sp/>out)<sp/>{</highlight></codeline>
<codeline lineno="1247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakeSparse(type_ids,<sp/>children).Value(out);</highlight></codeline>
<codeline lineno="1248"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1249"><highlight class="normal"></highlight></codeline>
<codeline lineno="1251" refid="classarrow_1_1_union_array_1a37dee73e4d44c4a946c412b94165f0d0" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Buffer&gt;<sp/><ref refid="classarrow_1_1_union_array_1a37dee73e4d44c4a946c412b94165f0d0" kindref="member">type_codes</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_-&gt;buffers[1];<sp/>}</highlight></codeline>
<codeline lineno="1252"><highlight class="normal"></highlight></codeline>
<codeline lineno="1253" refid="classarrow_1_1_union_array_1a4f1c505593b63d8cfb4bbda98c5055dc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_union_array_1a72f94afa1f396323001b2877cd344535" kindref="member">type_code_t</ref>*<sp/><ref refid="classarrow_1_1_union_array_1a4f1c505593b63d8cfb4bbda98c5055dc" kindref="member">raw_type_codes</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>raw_type_codes_<sp/>+<sp/>data_-&gt;offset;<sp/>}</highlight></codeline>
<codeline lineno="1254"><highlight class="normal"></highlight></codeline>
<codeline lineno="1256" refid="classarrow_1_1_union_array_1abc77f1ae9bfe6f11013adfd48b3f4dc2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_union_array_1abc77f1ae9bfe6f11013adfd48b3f4dc2" kindref="member">child_id</ref>(int64_t<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>union_type_-&gt;child_ids()[raw_type_codes_[i<sp/>+<sp/>data_-&gt;offset]];</highlight></codeline>
<codeline lineno="1258"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1259"><highlight class="normal"></highlight></codeline>
<codeline lineno="1262" refid="classarrow_1_1_union_array_1a8b2f7da8a7e992670924f06d40c3fd58" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Buffer&gt;<sp/><ref refid="classarrow_1_1_union_array_1a8b2f7da8a7e992670924f06d40c3fd58" kindref="member">value_offsets</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_-&gt;buffers[2];<sp/>}</highlight></codeline>
<codeline lineno="1263"><highlight class="normal"></highlight></codeline>
<codeline lineno="1265" refid="classarrow_1_1_union_array_1a5475c0c7e23a7d3fe3fcb9d7fdba739d" refkind="member"><highlight class="normal"><sp/><sp/>int32_t<sp/><ref refid="classarrow_1_1_union_array_1a5475c0c7e23a7d3fe3fcb9d7fdba739d" kindref="member">value_offset</ref>(int64_t<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>raw_value_offsets_[i<sp/>+<sp/>data_-&gt;offset];<sp/>}</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight></codeline>
<codeline lineno="1268" refid="classarrow_1_1_union_array_1a4d96ec31e2a7024af5a0fb9af1bb6b51" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t*<sp/><ref refid="classarrow_1_1_union_array_1a4d96ec31e2a7024af5a0fb9af1bb6b51" kindref="member">raw_value_offsets</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>raw_value_offsets_<sp/>+<sp/>data_-&gt;offset;<sp/>}</highlight></codeline>
<codeline lineno="1269"><highlight class="normal"></highlight></codeline>
<codeline lineno="1270" refid="classarrow_1_1_union_array_1a324d529fa5e20b32dec84724549a540b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_union_type" kindref="compound">UnionType</ref>*<sp/><ref refid="classarrow_1_1_union_array_1a324d529fa5e20b32dec84724549a540b" kindref="member">union_type</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>union_type_;<sp/>}</highlight></codeline>
<codeline lineno="1271"><highlight class="normal"></highlight></codeline>
<codeline lineno="1272" refid="classarrow_1_1_union_array_1ab168e382bdbb241bf08a761bb13c6a9c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_union_mode_1a98f368f8fb8a5553a17abc2fb1e76dac" kindref="member">UnionMode::type</ref><sp/><ref refid="classarrow_1_1_union_array_1ab168e382bdbb241bf08a761bb13c6a9c" kindref="member">mode</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>union_type_-&gt;mode();<sp/>}</highlight></codeline>
<codeline lineno="1273"><highlight class="normal"></highlight></codeline>
<codeline lineno="1274"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>given<sp/>field<sp/>as<sp/>an<sp/>individual<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1275"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>sparse<sp/>unions,<sp/>the<sp/>returned<sp/>array<sp/>has<sp/>its<sp/>offset,<sp/>length<sp/>and<sp/>null</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1276"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>count<sp/>adjusted.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1277"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>dense<sp/>unions,<sp/>the<sp/>returned<sp/>array<sp/>is<sp/>unchanged.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1278"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Array&gt;<sp/>child(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pos)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1279"><highlight class="normal"></highlight></codeline>
<codeline lineno="1280"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetData(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ArrayData&gt;&amp;<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="1282"><highlight class="normal"></highlight></codeline>
<codeline lineno="1283" refid="classarrow_1_1_union_array_1a5d8c6cdb17b635446c646064b7749adb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_union_array_1a72f94afa1f396323001b2877cd344535" kindref="member">type_code_t</ref>*<sp/><ref refid="classarrow_1_1_union_array_1a5d8c6cdb17b635446c646064b7749adb" kindref="member">raw_type_codes_</ref>;</highlight></codeline>
<codeline lineno="1284" refid="classarrow_1_1_union_array_1a2cd1c82dec5b8dcedc94c05fe9dbe872" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t*<sp/><ref refid="classarrow_1_1_union_array_1a2cd1c82dec5b8dcedc94c05fe9dbe872" kindref="member">raw_value_offsets_</ref>;</highlight></codeline>
<codeline lineno="1285" refid="classarrow_1_1_union_array_1a5647e0b6c19e968a98b9569d5ae19080" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_union_type" kindref="compound">UnionType</ref>*<sp/><ref refid="classarrow_1_1_union_array_1a5647e0b6c19e968a98b9569d5ae19080" kindref="member">union_type_</ref>;</highlight></codeline>
<codeline lineno="1286"><highlight class="normal"></highlight></codeline>
<codeline lineno="1287"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>caching<sp/>boxed<sp/>child<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1288" refid="classarrow_1_1_union_array_1a0ec671cb63da95b44d5d0bcb787aa5c4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;Array&gt;&gt;<sp/><ref refid="classarrow_1_1_union_array_1a0ec671cb63da95b44d5d0bcb787aa5c4" kindref="member">boxed_fields_</ref>;</highlight></codeline>
<codeline lineno="1289"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1290"><highlight class="normal"></highlight></codeline>
<codeline lineno="1291"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1292"><highlight class="normal"></highlight><highlight class="comment">//<sp/>DictionaryArray</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1293"><highlight class="normal"></highlight></codeline>
<codeline lineno="1312" refid="classarrow_1_1_dictionary_array" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_dictionary_array" kindref="compound">DictionaryArray</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_array" kindref="compound">Array</ref><sp/>{</highlight></codeline>
<codeline lineno="1313"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1314" refid="classarrow_1_1_dictionary_array_1acd352de67775187d93c6e34b2ba55440" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_dictionary_type" kindref="compound">TypeClass</ref><sp/>=<sp/><ref refid="classarrow_1_1_dictionary_type" kindref="compound">DictionaryType</ref>;</highlight></codeline>
<codeline lineno="1315"><highlight class="normal"></highlight></codeline>
<codeline lineno="1316"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_dictionary_array" kindref="compound">DictionaryArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ArrayData&gt;&amp;<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="1317"><highlight class="normal"></highlight></codeline>
<codeline lineno="1318"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_dictionary_array" kindref="compound">DictionaryArray</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>type,</highlight></codeline>
<codeline lineno="1319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Array&gt;&amp;<sp/>indices,</highlight></codeline>
<codeline lineno="1320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Array&gt;&amp;<sp/>dictionary);</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight></codeline>
<codeline lineno="1333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;Array&gt;</ref>&gt;<sp/>FromArrays(</highlight></codeline>
<codeline lineno="1334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Array&gt;&amp;<sp/>indices,</highlight></codeline>
<codeline lineno="1335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Array&gt;&amp;<sp/>dictionary);</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight></codeline>
<codeline lineno="1337"><highlight class="normal"><sp/><sp/><ref refid="macros_8h_1aa2ec0a506575823661e32d0be213b070" kindref="member">ARROW_DEPRECATED</ref>(</highlight><highlight class="stringliteral">&quot;Use<sp/>Result-returning<sp/>version&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="1338"><highlight class="normal"><sp/><sp/>static<sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>FromArrays(const<sp/><ref refid="namespacestd" kindref="compound">std</ref>::shared_ptr&lt;<ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref>&gt;&amp;<sp/>type,</highlight></codeline>
<codeline lineno="1339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/><ref refid="namespacestd" kindref="compound">std</ref>::shared_ptr&lt;<ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&gt;&amp;<sp/>indices,</highlight></codeline>
<codeline lineno="1340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/><ref refid="namespacestd" kindref="compound">std</ref>::shared_ptr&lt;<ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&gt;&amp;<sp/>dictionary,</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacestd" kindref="compound">std</ref>::shared_ptr&lt;<ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&gt;*<sp/>out);</highlight></codeline>
<codeline lineno="1342"><highlight class="normal"></highlight></codeline>
<codeline lineno="1355"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt;<ref refid="namespacestd" kindref="compound">std</ref>::shared_ptr&lt;<ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&gt;&gt;<sp/>Transpose(</highlight></codeline>
<codeline lineno="1356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/><ref refid="namespacestd" kindref="compound">std</ref>::shared_ptr&lt;<ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref>&gt;&amp;<sp/>type,<sp/>const<sp/><ref refid="namespacestd" kindref="compound">std</ref>::shared_ptr&lt;<ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&gt;&amp;<sp/>dictionary,</highlight></codeline>
<codeline lineno="1357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>int32_t*<sp/>transpose_map,<sp/><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/>pool<sp/>=<sp/><ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">default_memory_pool</ref>())<sp/>const;</highlight></codeline>
<codeline lineno="1358"><highlight class="normal"></highlight></codeline>
<codeline lineno="1359"><highlight class="normal"><sp/><sp/><ref refid="macros_8h_1aa2ec0a506575823661e32d0be213b070" kindref="member">ARROW_DEPRECATED</ref>(&quot;Use<sp/><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>-returning<sp/>version&quot;)</highlight></codeline>
<codeline lineno="1360"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>Transpose(<ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/>pool,<sp/>const<sp/><ref refid="namespacestd" kindref="compound">std</ref>::shared_ptr&lt;<ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref>&gt;&amp;<sp/>type,</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/><ref refid="namespacestd" kindref="compound">std</ref>::shared_ptr&lt;<ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&gt;&amp;<sp/>dictionary,<sp/>const<sp/>int32_t*<sp/>transpose_map,</highlight></codeline>
<codeline lineno="1362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacestd" kindref="compound">std</ref>::shared_ptr&lt;<ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&gt;*<sp/>out)<sp/>const;</highlight></codeline>
<codeline lineno="1363"><highlight class="normal"></highlight></codeline>
<codeline lineno="1365"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>CanCompareIndices(const<sp/><ref refid="classarrow_1_1_dictionary_array" kindref="compound">DictionaryArray</ref>&amp;<sp/>other)<sp/>const;</highlight></codeline>
<codeline lineno="1366"><highlight class="normal"></highlight></codeline>
<codeline lineno="1369"><highlight class="normal"><sp/><sp/><ref refid="namespacestd" kindref="compound">std</ref>::shared_ptr&lt;<ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&gt;<sp/>dictionary()<sp/>const;</highlight></codeline>
<codeline lineno="1370"><highlight class="normal"><sp/><sp/><ref refid="namespacestd" kindref="compound">std</ref>::shared_ptr&lt;<ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&gt;<sp/>indices()<sp/>const;</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight></codeline>
<codeline lineno="1372" refid="classarrow_1_1_dictionary_array_1a2e9c7a3bf2eea6936f08773861d2ab51" refkind="member"><highlight class="normal"><sp/><sp/>const<sp/><ref refid="classarrow_1_1_dictionary_type" kindref="compound">DictionaryType</ref>*<sp/>dict_type()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dict_type_;<sp/>}</highlight></codeline>
<codeline lineno="1373"><highlight class="normal"></highlight></codeline>
<codeline lineno="1374"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1375"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetData(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ArrayData&gt;&amp;<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>);</highlight></codeline>
<codeline lineno="1376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_dictionary_type" kindref="compound">DictionaryType</ref>*<sp/>dict_type_;</highlight></codeline>
<codeline lineno="1377"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Array&gt;<sp/>indices_;</highlight></codeline>
<codeline lineno="1378"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1379"><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>arrow</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/arrow/cpp/src/arrow/array.h"/>
  </compounddef>
</doxygen>
