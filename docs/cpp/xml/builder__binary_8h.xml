<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="builder__binary_8h" kind="file" language="C++">
    <compoundname>builder_binary.h</compoundname>
    <includes local="no">algorithm</includes>
    <includes local="no">cstdint</includes>
    <includes local="no">limits</includes>
    <includes local="no">memory</includes>
    <includes local="no">numeric</includes>
    <includes local="no">string</includes>
    <includes local="no">vector</includes>
    <includes refid="array_8h" local="yes">arrow/array.h</includes>
    <includes refid="builder__base_8h" local="yes">arrow/array/builder_base.h</includes>
    <includes refid="buffer__builder_8h" local="yes">arrow/buffer_builder.h</includes>
    <includes refid="status_8h" local="yes">arrow/status.h</includes>
    <includes refid="type__traits_8h" local="yes">arrow/type_traits.h</includes>
    <includes refid="macros_8h" local="yes">arrow/util/macros.h</includes>
    <includes refid="string__view_8h" local="yes">arrow/util/string_view.h</includes>
    <includedby refid="builder__decimal_8h" local="yes">/arrow/cpp/src/arrow/array/builder_decimal.h</includedby>
    <includedby refid="builder_8h" local="yes">/arrow/cpp/src/arrow/builder.h</includedby>
    <incdepgraph>
      <node id="984">
        <label>atomic</label>
      </node>
      <node id="997">
        <label>arrow/util/compare.h</label>
        <link refid="util_2compare_8h"/>
        <childnode refid="979" relation="include">
        </childnode>
        <childnode refid="986" relation="include">
        </childnode>
        <childnode refid="987" relation="include">
        </childnode>
        <childnode refid="989" relation="include">
        </childnode>
      </node>
      <node id="978">
        <label>limits</label>
      </node>
      <node id="1021">
        <label>arrow/buffer_builder.h</label>
        <link refid="buffer__builder_8h"/>
        <childnode refid="976" relation="include">
        </childnode>
        <childnode refid="977" relation="include">
        </childnode>
        <childnode refid="996" relation="include">
        </childnode>
        <childnode refid="979" relation="include">
        </childnode>
        <childnode refid="981" relation="include">
        </childnode>
        <childnode refid="987" relation="include">
        </childnode>
        <childnode refid="1012" relation="include">
        </childnode>
        <childnode refid="995" relation="include">
        </childnode>
        <childnode refid="1006" relation="include">
        </childnode>
        <childnode refid="989" relation="include">
        </childnode>
        <childnode refid="1022" relation="include">
        </childnode>
        <childnode refid="990" relation="include">
        </childnode>
      </node>
      <node id="977">
        <label>cstdint</label>
      </node>
      <node id="975">
        <label>/arrow/cpp/src/arrow/array/builder_binary.h</label>
        <link refid="builder__binary_8h"/>
        <childnode refid="976" relation="include">
        </childnode>
        <childnode refid="977" relation="include">
        </childnode>
        <childnode refid="978" relation="include">
        </childnode>
        <childnode refid="979" relation="include">
        </childnode>
        <childnode refid="980" relation="include">
        </childnode>
        <childnode refid="981" relation="include">
        </childnode>
        <childnode refid="982" relation="include">
        </childnode>
        <childnode refid="983" relation="include">
        </childnode>
        <childnode refid="1020" relation="include">
        </childnode>
        <childnode refid="1021" relation="include">
        </childnode>
        <childnode refid="995" relation="include">
        </childnode>
        <childnode refid="1005" relation="include">
        </childnode>
        <childnode refid="989" relation="include">
        </childnode>
        <childnode refid="1015" relation="include">
        </childnode>
      </node>
      <node id="1012">
        <label>arrow/buffer.h</label>
        <link refid="buffer_8h"/>
        <childnode refid="977" relation="include">
        </childnode>
        <childnode refid="996" relation="include">
        </childnode>
        <childnode refid="979" relation="include">
        </childnode>
        <childnode refid="981" relation="include">
        </childnode>
        <childnode refid="986" relation="include">
        </childnode>
        <childnode refid="987" relation="include">
        </childnode>
        <childnode refid="982" relation="include">
        </childnode>
        <childnode refid="1013" relation="include">
        </childnode>
        <childnode refid="1014" relation="include">
        </childnode>
        <childnode refid="995" relation="include">
        </childnode>
        <childnode refid="1000" relation="include">
        </childnode>
        <childnode refid="989" relation="include">
        </childnode>
        <childnode refid="1015" relation="include">
        </childnode>
        <childnode refid="990" relation="include">
        </childnode>
      </node>
      <node id="1007">
        <label>endian.h</label>
      </node>
      <node id="995">
        <label>arrow/status.h</label>
        <link refid="status_8h"/>
        <childnode refid="996" relation="include">
        </childnode>
        <childnode refid="985" relation="include">
        </childnode>
        <childnode refid="979" relation="include">
        </childnode>
        <childnode refid="981" relation="include">
        </childnode>
        <childnode refid="987" relation="include">
        </childnode>
        <childnode refid="997" relation="include">
        </childnode>
        <childnode refid="989" relation="include">
        </childnode>
        <childnode refid="998" relation="include">
        </childnode>
        <childnode refid="990" relation="include">
        </childnode>
      </node>
      <node id="1017">
        <label>arrow/util/functional.h</label>
        <link refid="functional_8h"/>
        <childnode refid="1018" relation="include">
        </childnode>
        <childnode refid="986" relation="include">
        </childnode>
        <childnode refid="989" relation="include">
        </childnode>
      </node>
      <node id="1000">
        <label>arrow/type_fwd.h</label>
        <link refid="type__fwd_8h"/>
        <childnode refid="979" relation="include">
        </childnode>
        <childnode refid="981" relation="include">
        </childnode>
        <childnode refid="982" relation="include">
        </childnode>
        <childnode refid="989" relation="include">
        </childnode>
        <childnode refid="990" relation="include">
        </childnode>
      </node>
      <node id="1011">
        <label>cmath</label>
      </node>
      <node id="1010">
        <label>cassert</label>
      </node>
      <node id="1001">
        <label>arrow/util/checked_cast.h</label>
        <link refid="checked__cast_8h"/>
        <childnode refid="979" relation="include">
        </childnode>
        <childnode refid="986" relation="include">
        </childnode>
      </node>
      <node id="980">
        <label>numeric</label>
      </node>
      <node id="981">
        <label>string</label>
      </node>
      <node id="1016">
        <label>arrow/vendored/string_view.hpp</label>
      </node>
      <node id="988">
        <label>arrow/compare.h</label>
        <link refid="compare_8h"/>
        <childnode refid="977" relation="include">
        </childnode>
        <childnode refid="985" relation="include">
        </childnode>
        <childnode refid="989" relation="include">
        </childnode>
        <childnode refid="990" relation="include">
        </childnode>
      </node>
      <node id="1002">
        <label>arrow/util/variant.h</label>
        <link refid="variant_8h"/>
        <childnode refid="1003" relation="include">
        </childnode>
      </node>
      <node id="1004">
        <label>arrow/visitor.h</label>
        <link refid="visitor_8h"/>
        <childnode refid="995" relation="include">
        </childnode>
        <childnode refid="1000" relation="include">
        </childnode>
        <childnode refid="990" relation="include">
        </childnode>
      </node>
      <node id="999">
        <label>ostream</label>
      </node>
      <node id="990">
        <label>arrow/util/visibility.h</label>
        <link refid="arrow_2util_2visibility_8h"/>
      </node>
      <node id="1013">
        <label>arrow/device.h</label>
        <link refid="device_8h"/>
        <childnode refid="977" relation="include">
        </childnode>
        <childnode refid="979" relation="include">
        </childnode>
        <childnode refid="981" relation="include">
        </childnode>
        <childnode refid="1014" relation="include">
        </childnode>
        <childnode refid="1000" relation="include">
        </childnode>
        <childnode refid="997" relation="include">
        </childnode>
        <childnode refid="989" relation="include">
        </childnode>
        <childnode refid="990" relation="include">
        </childnode>
      </node>
      <node id="1006">
        <label>arrow/util/bit_util.h</label>
        <link refid="bit__util_8h"/>
        <childnode refid="1007" relation="include">
        </childnode>
        <childnode refid="976" relation="include">
        </childnode>
        <childnode refid="1008" relation="include">
        </childnode>
        <childnode refid="1009" relation="include">
        </childnode>
        <childnode refid="1010" relation="include">
        </childnode>
        <childnode refid="1011" relation="include">
        </childnode>
        <childnode refid="977" relation="include">
        </childnode>
        <childnode refid="996" relation="include">
        </childnode>
        <childnode refid="978" relation="include">
        </childnode>
        <childnode refid="979" relation="include">
        </childnode>
        <childnode refid="981" relation="include">
        </childnode>
        <childnode refid="986" relation="include">
        </childnode>
        <childnode refid="987" relation="include">
        </childnode>
        <childnode refid="982" relation="include">
        </childnode>
        <childnode refid="1012" relation="include">
        </childnode>
        <childnode refid="993" relation="include">
        </childnode>
        <childnode refid="997" relation="include">
        </childnode>
        <childnode refid="1017" relation="include">
        </childnode>
        <childnode refid="989" relation="include">
        </childnode>
        <childnode refid="998" relation="include">
        </childnode>
        <childnode refid="1015" relation="include">
        </childnode>
        <childnode refid="1019" relation="include">
        </childnode>
        <childnode refid="990" relation="include">
        </childnode>
      </node>
      <node id="1009">
        <label>bitset</label>
      </node>
      <node id="1018">
        <label>tuple</label>
      </node>
      <node id="982">
        <label>vector</label>
      </node>
      <node id="1020">
        <label>arrow/array/builder_base.h</label>
        <link refid="builder__base_8h"/>
        <childnode refid="976" relation="include">
        </childnode>
        <childnode refid="977" relation="include">
        </childnode>
        <childnode refid="996" relation="include">
        </childnode>
        <childnode refid="978" relation="include">
        </childnode>
        <childnode refid="979" relation="include">
        </childnode>
        <childnode refid="986" relation="include">
        </childnode>
        <childnode refid="987" relation="include">
        </childnode>
        <childnode refid="982" relation="include">
        </childnode>
        <childnode refid="1021" relation="include">
        </childnode>
        <childnode refid="995" relation="include">
        </childnode>
        <childnode refid="991" relation="include">
        </childnode>
        <childnode refid="1005" relation="include">
        </childnode>
        <childnode refid="989" relation="include">
        </childnode>
        <childnode refid="1019" relation="include">
        </childnode>
        <childnode refid="990" relation="include">
        </childnode>
      </node>
      <node id="994">
        <label>new</label>
      </node>
      <node id="987">
        <label>utility</label>
      </node>
      <node id="1015">
        <label>arrow/util/string_view.h</label>
        <link refid="string__view_8h"/>
        <childnode refid="977" relation="include">
        </childnode>
        <childnode refid="981" relation="include">
        </childnode>
        <childnode refid="1016" relation="include">
        </childnode>
      </node>
      <node id="1008">
        <label>array</label>
      </node>
      <node id="1005">
        <label>arrow/type_traits.h</label>
        <link refid="type__traits_8h"/>
        <childnode refid="979" relation="include">
        </childnode>
        <childnode refid="981" relation="include">
        </childnode>
        <childnode refid="986" relation="include">
        </childnode>
        <childnode refid="982" relation="include">
        </childnode>
        <childnode refid="1000" relation="include">
        </childnode>
        <childnode refid="1006" relation="include">
        </childnode>
      </node>
      <node id="1014">
        <label>arrow/io/type_fwd.h</label>
        <link refid="io_2type__fwd_8h"/>
      </node>
      <node id="985">
        <label>iosfwd</label>
      </node>
      <node id="983">
        <label>arrow/array.h</label>
        <link refid="array_8h"/>
        <childnode refid="984" relation="include">
        </childnode>
        <childnode refid="977" relation="include">
        </childnode>
        <childnode refid="985" relation="include">
        </childnode>
        <childnode refid="979" relation="include">
        </childnode>
        <childnode refid="981" relation="include">
        </childnode>
        <childnode refid="986" relation="include">
        </childnode>
        <childnode refid="987" relation="include">
        </childnode>
        <childnode refid="982" relation="include">
        </childnode>
        <childnode refid="988" relation="include">
        </childnode>
        <childnode refid="991" relation="include">
        </childnode>
        <childnode refid="1000" relation="include">
        </childnode>
        <childnode refid="1005" relation="include">
        </childnode>
        <childnode refid="1006" relation="include">
        </childnode>
        <childnode refid="1001" relation="include">
        </childnode>
        <childnode refid="989" relation="include">
        </childnode>
        <childnode refid="1015" relation="include">
        </childnode>
        <childnode refid="990" relation="include">
        </childnode>
      </node>
      <node id="1003">
        <label>arrow/vendored/variant.hpp</label>
      </node>
      <node id="993">
        <label>arrow/result.h</label>
        <link refid="result_8h"/>
        <childnode refid="994" relation="include">
        </childnode>
        <childnode refid="981" relation="include">
        </childnode>
        <childnode refid="986" relation="include">
        </childnode>
        <childnode refid="987" relation="include">
        </childnode>
        <childnode refid="995" relation="include">
        </childnode>
        <childnode refid="997" relation="include">
        </childnode>
      </node>
      <node id="992">
        <label>climits</label>
      </node>
      <node id="1022">
        <label>arrow/util/ubsan.h</label>
        <link refid="ubsan_8h"/>
        <childnode refid="996" relation="include">
        </childnode>
        <childnode refid="979" relation="include">
        </childnode>
        <childnode refid="986" relation="include">
        </childnode>
        <childnode refid="989" relation="include">
        </childnode>
      </node>
      <node id="991">
        <label>arrow/type.h</label>
        <link refid="type_8h"/>
        <childnode refid="984" relation="include">
        </childnode>
        <childnode refid="992" relation="include">
        </childnode>
        <childnode refid="977" relation="include">
        </childnode>
        <childnode refid="985" relation="include">
        </childnode>
        <childnode refid="979" relation="include">
        </childnode>
        <childnode refid="981" relation="include">
        </childnode>
        <childnode refid="987" relation="include">
        </childnode>
        <childnode refid="982" relation="include">
        </childnode>
        <childnode refid="993" relation="include">
        </childnode>
        <childnode refid="1000" relation="include">
        </childnode>
        <childnode refid="1001" relation="include">
        </childnode>
        <childnode refid="989" relation="include">
        </childnode>
        <childnode refid="1002" relation="include">
        </childnode>
        <childnode refid="990" relation="include">
        </childnode>
        <childnode refid="1004" relation="include">
        </childnode>
      </node>
      <node id="986">
        <label>type_traits</label>
      </node>
      <node id="976">
        <label>algorithm</label>
      </node>
      <node id="996">
        <label>cstring</label>
      </node>
      <node id="998">
        <label>arrow/util/string_builder.h</label>
        <link refid="string__builder_8h"/>
        <childnode refid="979" relation="include">
        </childnode>
        <childnode refid="999" relation="include">
        </childnode>
        <childnode refid="981" relation="include">
        </childnode>
        <childnode refid="987" relation="include">
        </childnode>
        <childnode refid="990" relation="include">
        </childnode>
      </node>
      <node id="979">
        <label>memory</label>
      </node>
      <node id="989">
        <label>arrow/util/macros.h</label>
        <link refid="macros_8h"/>
        <childnode refid="977" relation="include">
        </childnode>
      </node>
      <node id="1019">
        <label>arrow/util/type_traits.h</label>
        <link refid="util_2type__traits_8h"/>
        <childnode refid="986" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1032">
        <label>/arrow/cpp/src/arrow/array/dict_internal.h</label>
        <link refid="dict__internal_8h"/>
      </node>
      <node id="1072">
        <label>/arrow/cpp/src/gandiva/exported_funcs_registry.h</label>
        <link refid="exported__funcs__registry_8h"/>
        <childnode refid="1073" relation="include">
        </childnode>
      </node>
      <node id="1071">
        <label>/arrow/cpp/src/gandiva/engine.h</label>
        <link refid="engine_8h"/>
        <childnode refid="1072" relation="include">
        </childnode>
        <childnode refid="1074" relation="include">
        </childnode>
        <childnode refid="1035" relation="include">
        </childnode>
      </node>
      <node id="1076">
        <label>/arrow/cpp/src/gandiva/pch.h</label>
        <link refid="gandiva_2pch_8h"/>
      </node>
      <node id="1054">
        <label>/arrow/cpp/src/gandiva/function_holder_registry.h</label>
        <link refid="function__holder__registry_8h"/>
      </node>
      <node id="1023">
        <label>/arrow/cpp/src/arrow/array/builder_binary.h</label>
        <link refid="builder__binary_8h"/>
        <childnode refid="1024" relation="include">
        </childnode>
        <childnode refid="1025" relation="include">
        </childnode>
      </node>
      <node id="1035">
        <label>/arrow/cpp/src/gandiva/llvm_generator.h</label>
        <link refid="llvm__generator_8h"/>
      </node>
      <node id="1074">
        <label>/arrow/cpp/src/gandiva/function_ir_builder.h</label>
        <link refid="function__ir__builder_8h"/>
        <childnode refid="1075" relation="include">
        </childnode>
      </node>
      <node id="1062">
        <label>/arrow/cpp/src/gandiva/function_registry_arithmetic.h</label>
        <link refid="function__registry__arithmetic_8h"/>
      </node>
      <node id="1034">
        <label>/arrow/cpp/src/gandiva/annotator.h</label>
        <link refid="annotator_8h"/>
        <childnode refid="1035" relation="include">
        </childnode>
      </node>
      <node id="1083">
        <label>/arrow/cpp/src/gandiva/execution_context.h</label>
        <link refid="execution__context_8h"/>
        <childnode refid="1042" relation="include">
        </childnode>
        <childnode refid="1035" relation="include">
        </childnode>
        <childnode refid="1057" relation="include">
        </childnode>
      </node>
      <node id="1026">
        <label>/arrow/cpp/src/arrow/api.h</label>
        <link refid="api_8h"/>
      </node>
      <node id="1041">
        <label>/arrow/cpp/src/gandiva/decimal_type_util.h</label>
        <link refid="decimal__type__util_8h"/>
      </node>
      <node id="1058">
        <label>/arrow/cpp/src/gandiva/function_registry_common.h</label>
        <link refid="function__registry__common_8h"/>
        <childnode refid="1059" relation="include">
        </childnode>
      </node>
      <node id="1052">
        <label>/arrow/cpp/src/gandiva/func_descriptor.h</label>
        <link refid="func__descriptor_8h"/>
        <childnode refid="1051" relation="include">
        </childnode>
        <childnode refid="1053" relation="include">
        </childnode>
      </node>
      <node id="1038">
        <label>/arrow/cpp/src/gandiva/filter_cache_key.h</label>
        <link refid="filter__cache__key_8h"/>
      </node>
      <node id="1066">
        <label>/arrow/cpp/src/gandiva/function_registry_string.h</label>
        <link refid="function__registry__string_8h"/>
      </node>
      <node id="1048">
        <label>/arrow/cpp/src/gandiva/projector_cache_key.h</label>
        <link refid="projector__cache__key_8h"/>
      </node>
      <node id="1080">
        <label>/arrow/cpp/src/gandiva/compiled_expr.h</label>
        <link refid="compiled__expr_8h"/>
        <childnode refid="1035" relation="include">
        </childnode>
      </node>
      <node id="1057">
        <label>/arrow/cpp/src/gandiva/to_date_holder.h</label>
        <link refid="to__date__holder_8h"/>
        <childnode refid="1054" relation="include">
        </childnode>
      </node>
      <node id="1047">
        <label>/arrow/cpp/src/gandiva/projector.h</label>
        <link refid="gandiva_2projector_8h"/>
        <childnode refid="1048" relation="include">
        </childnode>
      </node>
      <node id="1031">
        <label>/arrow/cpp/src/arrow/util/hashing.h</label>
        <link refid="hashing_8h"/>
        <childnode refid="1032" relation="include">
        </childnode>
      </node>
      <node id="1025">
        <label>/arrow/cpp/src/arrow/builder.h</label>
        <link refid="builder_8h"/>
        <childnode refid="1026" relation="include">
        </childnode>
        <childnode refid="1027" relation="include">
        </childnode>
        <childnode refid="1028" relation="include">
        </childnode>
        <childnode refid="1029" relation="include">
        </childnode>
        <childnode refid="1030" relation="include">
        </childnode>
        <childnode refid="1031" relation="include">
        </childnode>
        <childnode refid="1033" relation="include">
        </childnode>
      </node>
      <node id="1070">
        <label>/arrow/cpp/src/gandiva/llvm_types.h</label>
        <link refid="llvm__types_8h"/>
        <childnode refid="1071" relation="include">
        </childnode>
        <childnode refid="1045" relation="include">
        </childnode>
        <childnode refid="1074" relation="include">
        </childnode>
        <childnode refid="1035" relation="include">
        </childnode>
        <childnode refid="1076" relation="include">
        </childnode>
      </node>
      <node id="1056">
        <label>/arrow/cpp/src/gandiva/random_generator_holder.h</label>
        <link refid="random__generator__holder_8h"/>
        <childnode refid="1054" relation="include">
        </childnode>
      </node>
      <node id="1061">
        <label>/arrow/cpp/src/gandiva/native_function.h</label>
        <link refid="native__function_8h"/>
        <childnode refid="1051" relation="include">
        </childnode>
        <childnode refid="1059" relation="include">
        </childnode>
        <childnode refid="1062" relation="include">
        </childnode>
        <childnode refid="1058" relation="include">
        </childnode>
        <childnode refid="1063" relation="include">
        </childnode>
        <childnode refid="1064" relation="include">
        </childnode>
        <childnode refid="1065" relation="include">
        </childnode>
        <childnode refid="1066" relation="include">
        </childnode>
        <childnode refid="1067" relation="include">
        </childnode>
      </node>
      <node id="1081">
        <label>/arrow/cpp/src/gandiva/selection_vector_impl.h</label>
        <link refid="selection__vector__impl_8h"/>
      </node>
      <node id="1069">
        <label>/arrow/cpp/src/gandiva/jni/module_holder.h</label>
        <link refid="module__holder_8h"/>
      </node>
      <node id="1082">
        <label>/arrow/cpp/src/gandiva/simple_arena.h</label>
        <link refid="simple__arena_8h"/>
        <childnode refid="1083" relation="include">
        </childnode>
      </node>
      <node id="1049">
        <label>/arrow/cpp/src/gandiva/expression_registry.h</label>
        <link refid="expression__registry_8h"/>
      </node>
      <node id="1059">
        <label>/arrow/cpp/src/gandiva/function_registry.h</label>
        <link refid="function__registry_8h"/>
        <childnode refid="1045" relation="include">
        </childnode>
        <childnode refid="1035" relation="include">
        </childnode>
      </node>
      <node id="1033">
        <label>/arrow/cpp/src/gandiva/arrow.h</label>
        <link refid="arrow_8h"/>
        <childnode refid="1034" relation="include">
        </childnode>
        <childnode refid="1036" relation="include">
        </childnode>
        <childnode refid="1040" relation="include">
        </childnode>
        <childnode refid="1041" relation="include">
        </childnode>
        <childnode refid="1042" relation="include">
        </childnode>
        <childnode refid="1044" relation="include">
        </childnode>
        <childnode refid="1045" relation="include">
        </childnode>
        <childnode refid="1046" relation="include">
        </childnode>
        <childnode refid="1049" relation="include">
        </childnode>
        <childnode refid="1050" relation="include">
        </childnode>
        <childnode refid="1037" relation="include">
        </childnode>
        <childnode refid="1038" relation="include">
        </childnode>
        <childnode refid="1052" relation="include">
        </childnode>
        <childnode refid="1058" relation="include">
        </childnode>
        <childnode refid="1060" relation="include">
        </childnode>
        <childnode refid="1068" relation="include">
        </childnode>
        <childnode refid="1069" relation="include">
        </childnode>
        <childnode refid="1070" relation="include">
        </childnode>
        <childnode refid="1077" relation="include">
        </childnode>
        <childnode refid="1053" relation="include">
        </childnode>
        <childnode refid="1047" relation="include">
        </childnode>
        <childnode refid="1048" relation="include">
        </childnode>
        <childnode refid="1078" relation="include">
        </childnode>
        <childnode refid="1079" relation="include">
        </childnode>
        <childnode refid="1081" relation="include">
        </childnode>
        <childnode refid="1082" relation="include">
        </childnode>
      </node>
      <node id="1040">
        <label>/arrow/cpp/src/gandiva/date_utils.h</label>
        <link refid="date__utils_8h"/>
      </node>
      <node id="1051">
        <label>/arrow/cpp/src/gandiva/dex.h</label>
        <link refid="dex_8h"/>
        <childnode refid="1043" relation="include">
        </childnode>
      </node>
      <node id="1039">
        <label>/arrow/cpp/src/gandiva/tree_expr_builder.h</label>
        <link refid="tree__expr__builder_8h"/>
      </node>
      <node id="1075">
        <label>/arrow/cpp/src/gandiva/decimal_ir.h</label>
        <link refid="decimal__ir_8h"/>
      </node>
      <node id="1053">
        <label>/arrow/cpp/src/gandiva/node.h</label>
        <link refid="node_8h"/>
        <childnode refid="1044" relation="include">
        </childnode>
        <childnode refid="1045" relation="include">
        </childnode>
        <childnode refid="1054" relation="include">
        </childnode>
        <childnode refid="1055" relation="include">
        </childnode>
        <childnode refid="1056" relation="include">
        </childnode>
        <childnode refid="1057" relation="include">
        </childnode>
      </node>
      <node id="1050">
        <label>/arrow/cpp/src/gandiva/field_descriptor.h</label>
        <link refid="field__descriptor_8h"/>
        <childnode refid="1051" relation="include">
        </childnode>
      </node>
      <node id="1024">
        <label>/arrow/cpp/src/arrow/array/builder_decimal.h</label>
        <link refid="builder__decimal_8h"/>
        <childnode refid="1025" relation="include">
        </childnode>
      </node>
      <node id="1030">
        <label>/arrow/cpp/src/arrow/table_builder.h</label>
        <link refid="table__builder_8h"/>
        <childnode refid="1026" relation="include">
        </childnode>
      </node>
      <node id="1064">
        <label>/arrow/cpp/src/gandiva/function_registry_hash.h</label>
        <link refid="function__registry__hash_8h"/>
      </node>
      <node id="1065">
        <label>/arrow/cpp/src/gandiva/function_registry_math_ops.h</label>
        <link refid="function__registry__math__ops_8h"/>
      </node>
      <node id="1043">
        <label>/arrow/cpp/src/gandiva/bitmap_accumulator.h</label>
        <link refid="bitmap__accumulator_8h"/>
      </node>
      <node id="1046">
        <label>/arrow/cpp/src/gandiva/expression.h</label>
        <link refid="gandiva_2expression_8h"/>
        <childnode refid="1036" relation="include">
        </childnode>
        <childnode refid="1044" relation="include">
        </childnode>
        <childnode refid="1045" relation="include">
        </childnode>
        <childnode refid="1047" relation="include">
        </childnode>
        <childnode refid="1039" relation="include">
        </childnode>
      </node>
      <node id="1027">
        <label>/arrow/cpp/src/arrow/compute/kernels/take_internal.h</label>
        <link refid="take__internal_8h"/>
      </node>
      <node id="1063">
        <label>/arrow/cpp/src/gandiva/function_registry_datetime.h</label>
        <link refid="function__registry__datetime_8h"/>
      </node>
      <node id="1036">
        <label>/arrow/cpp/src/gandiva/condition.h</label>
        <link refid="condition_8h"/>
        <childnode refid="1037" relation="include">
        </childnode>
        <childnode refid="1039" relation="include">
        </childnode>
      </node>
      <node id="1067">
        <label>/arrow/cpp/src/gandiva/function_registry_timestamp_arithmetic.h</label>
        <link refid="function__registry__timestamp__arithmetic_8h"/>
      </node>
      <node id="1077">
        <label>/arrow/cpp/src/gandiva/local_bitmaps_holder.h</label>
        <link refid="local__bitmaps__holder_8h"/>
        <childnode refid="1042" relation="include">
        </childnode>
      </node>
      <node id="1079">
        <label>/arrow/cpp/src/gandiva/selection_vector.h</label>
        <link refid="selection__vector_8h"/>
        <childnode refid="1080" relation="include">
        </childnode>
        <childnode refid="1037" relation="include">
        </childnode>
        <childnode refid="1035" relation="include">
        </childnode>
        <childnode refid="1047" relation="include">
        </childnode>
        <childnode refid="1081" relation="include">
        </childnode>
      </node>
      <node id="1068">
        <label>/arrow/cpp/src/gandiva/in_holder.h</label>
        <link refid="in__holder_8h"/>
        <childnode refid="1051" relation="include">
        </childnode>
      </node>
      <node id="1073">
        <label>/arrow/cpp/src/gandiva/exported_funcs.h</label>
        <link refid="exported__funcs_8h"/>
      </node>
      <node id="1037">
        <label>/arrow/cpp/src/gandiva/filter.h</label>
        <link refid="gandiva_2filter_8h"/>
        <childnode refid="1038" relation="include">
        </childnode>
      </node>
      <node id="1055">
        <label>/arrow/cpp/src/gandiva/like_holder.h</label>
        <link refid="like__holder_8h"/>
        <childnode refid="1054" relation="include">
        </childnode>
      </node>
      <node id="1060">
        <label>/arrow/cpp/src/gandiva/function_signature.h</label>
        <link refid="function__signature_8h"/>
        <childnode refid="1049" relation="include">
        </childnode>
        <childnode refid="1058" relation="include">
        </childnode>
        <childnode refid="1061" relation="include">
        </childnode>
      </node>
      <node id="1042">
        <label>/arrow/cpp/src/gandiva/eval_batch.h</label>
        <link refid="eval__batch_8h"/>
        <childnode refid="1034" relation="include">
        </childnode>
        <childnode refid="1043" relation="include">
        </childnode>
      </node>
      <node id="1028">
        <label>/arrow/cpp/src/arrow/python/type_traits.h</label>
        <link refid="python_2type__traits_8h"/>
      </node>
      <node id="1044">
        <label>/arrow/cpp/src/gandiva/expr_decomposer.h</label>
        <link refid="expr__decomposer_8h"/>
      </node>
      <node id="1045">
        <label>/arrow/cpp/src/gandiva/expr_validator.h</label>
        <link refid="expr__validator_8h"/>
      </node>
      <node id="1078">
        <label>/arrow/cpp/src/gandiva/regex_util.h</label>
        <link refid="regex__util_8h"/>
      </node>
      <node id="1029">
        <label>/arrow/cpp/src/arrow/stl.h</label>
        <link refid="stl_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classarrow_1_1_base_binary_builder" prot="public">arrow::BaseBinaryBuilder</innerclass>
    <innerclass refid="classarrow_1_1_binary_builder" prot="public">arrow::BinaryBuilder</innerclass>
    <innerclass refid="classarrow_1_1_string_builder" prot="public">arrow::StringBuilder</innerclass>
    <innerclass refid="classarrow_1_1_large_binary_builder" prot="public">arrow::LargeBinaryBuilder</innerclass>
    <innerclass refid="classarrow_1_1_large_string_builder" prot="public">arrow::LargeStringBuilder</innerclass>
    <innerclass refid="classarrow_1_1_fixed_size_binary_builder" prot="public">arrow::FixedSizeBinaryBuilder</innerclass>
    <innernamespace refid="namespacearrow">arrow</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;numeric&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="array_8h" kindref="compound">arrow/array.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="builder__base_8h" kindref="compound">arrow/array/builder_base.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="buffer__builder_8h" kindref="compound">arrow/buffer_builder.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="status_8h" kindref="compound">arrow/status.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type__traits_8h" kindref="compound">arrow/type_traits.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="macros_8h" kindref="compound">arrow/util/macros.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="string__view_8h" kindref="compound">arrow/util/string_view.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>IWYU<sp/>pragma:<sp/>export</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacearrow" kindref="compound">arrow</ref><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="namespacearrow_1a6c4f8bc1a6b7bfa3386005a0bede3640" refkind="member"><highlight class="normal">constexpr<sp/>int64_t<sp/><ref refid="namespacearrow_1a6c4f8bc1a6b7bfa3386005a0bede3640" kindref="member">kBinaryMemoryLimit</ref><sp/>=<sp/>std::numeric_limits&lt;int32_t&gt;::max()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Binary<sp/>and<sp/>String</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>TYPE&gt;</highlight></codeline>
<codeline lineno="44" refid="classarrow_1_1_base_binary_builder" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classarrow_1_1_base_binary_builder" kindref="compound">BaseBinaryBuilder</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_array_builder" kindref="compound">ArrayBuilder</ref><sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="46" refid="classarrow_1_1_base_binary_builder_1a548cd46c29eba3853a98b605106d05ee" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_binary_type" kindref="compound">TypeClass</ref><sp/>=<sp/>TYPE;</highlight></codeline>
<codeline lineno="47" refid="classarrow_1_1_base_binary_builder_1a68599cf6ce54173a24df568d42447bb5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_base_binary_builder_1a68599cf6ce54173a24df568d42447bb5" kindref="member">offset_type</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_binary_type_1a9622766aa289f240f21d4508efe6996d" kindref="member">TypeClass::offset_type</ref>;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49" refid="classarrow_1_1_base_binary_builder_1ab240ad50308440395d5226a3c6503811" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_base_binary_builder_1ab240ad50308440395d5226a3c6503811" kindref="member">BaseBinaryBuilder</ref>(<ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/>pool<sp/>=<sp/><ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">default_memory_pool</ref>())</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classarrow_1_1_array_builder" kindref="compound">ArrayBuilder</ref>(pool),<sp/><ref refid="classarrow_1_1_base_binary_builder_1a927a9ee2d418252feb63a075f232aadc" kindref="member">offsets_builder_</ref>(pool),<sp/><ref refid="classarrow_1_1_base_binary_builder_1a8f20bc7bf837919c52e00fcf847554c2" kindref="member">value_data_builder_</ref>(pool)<sp/>{}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="classarrow_1_1_base_binary_builder_1a8155064d46a06faebeea382a65439f9b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_base_binary_builder_1a8155064d46a06faebeea382a65439f9b" kindref="member">BaseBinaryBuilder</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/><ref refid="classarrow_1_1_array_builder_1a39b4b420be1fcf4fe7219fe953eb65c7" kindref="member">type</ref>,<sp/><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/>pool)</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classarrow_1_1_base_binary_builder" kindref="compound">BaseBinaryBuilder</ref>(pool)<sp/>{}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="classarrow_1_1_base_binary_builder_1a2879a4313c6e3076581c42c3cd3e0f32" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_base_binary_builder_1a2879a4313c6e3076581c42c3cd3e0f32" kindref="member">Append</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>value,<sp/><ref refid="classarrow_1_1_base_binary_builder_1a68599cf6ce54173a24df568d42447bb5" kindref="member">offset_type</ref><sp/><ref refid="classarrow_1_1_array_builder_1a296ac75b9b3d877192e37681c66513ba" kindref="member">length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(<ref refid="classarrow_1_1_array_builder_1afe8448fda39a8529a119bde5ba7ba119" kindref="member">Reserve</ref>(1));</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(<ref refid="classarrow_1_1_base_binary_builder_1ab070121e13bb40b89541c4f386e5f7b1" kindref="member">AppendNextOffset</ref>());</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Safety<sp/>check<sp/>for<sp/>UBSAN.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="macros_8h_1a1f418a9edc46d53e62732e7ccd06f329" kindref="member">ARROW_PREDICT_TRUE</ref>(length<sp/>&gt;<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(<ref refid="classarrow_1_1_base_binary_builder_1a8f20bc7bf837919c52e00fcf847554c2" kindref="member">value_data_builder_</ref>.Append(value,<sp/>length));</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_array_builder_1a2dbe80584eac62147112c4d0a43ceea2" kindref="member">UnsafeAppendToBitmap</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1a5c0b0031db6eeec3dcc70485d24cfe03" kindref="member">Status::OK</ref>();</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="classarrow_1_1_base_binary_builder_1ae418ffb2c33bc8af9c5383abed9a6037" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_base_binary_builder_1ae418ffb2c33bc8af9c5383abed9a6037" kindref="member">Append</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>value,<sp/><ref refid="classarrow_1_1_base_binary_builder_1a68599cf6ce54173a24df568d42447bb5" kindref="member">offset_type</ref><sp/><ref refid="classarrow_1_1_array_builder_1a296ac75b9b3d877192e37681c66513ba" kindref="member">length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_base_binary_builder_1a2879a4313c6e3076581c42c3cd3e0f32" kindref="member">Append</ref>(reinterpret_cast&lt;const<sp/>uint8_t*&gt;(value),<sp/>length);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71" refid="classarrow_1_1_base_binary_builder_1a26def5a698d60a1a79eaf642b4b441bd" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_base_binary_builder_1a26def5a698d60a1a79eaf642b4b441bd" kindref="member">Append</ref>(<ref refid="namespaceparquet_1af53c3c244055490d5dd385dd8a874540" kindref="member">util::string_view</ref><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_base_binary_builder_1a2879a4313c6e3076581c42c3cd3e0f32" kindref="member">Append</ref>(value.data(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classarrow_1_1_base_binary_builder_1a68599cf6ce54173a24df568d42447bb5" kindref="member">offset_type</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value.size()));</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="classarrow_1_1_base_binary_builder_1ad3d58ebc0b0233d4d99c69f4d8509c28" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_base_binary_builder_1ad3d58ebc0b0233d4d99c69f4d8509c28" kindref="member">AppendNulls</ref>(int64_t<sp/><ref refid="classarrow_1_1_array_builder_1a296ac75b9b3d877192e37681c66513ba" kindref="member">length</ref>)<sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>num_bytes<sp/>=<sp/><ref refid="classarrow_1_1_base_binary_builder_1a8f20bc7bf837919c52e00fcf847554c2" kindref="member">value_data_builder_</ref>.length();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="macros_8h_1a6f2ee7ad52872edb915cf48e163ac99c" kindref="member">ARROW_PREDICT_FALSE</ref>(num_bytes<sp/>&gt;<sp/><ref refid="classarrow_1_1_base_binary_builder_1ad236580ddb444dd7266e9258b0d815fc" kindref="member">memory_limit</ref>()))<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_base_binary_builder_1a1ffe33a0d231398ed5745a4138d31a40" kindref="member">AppendOverflow</ref>(num_bytes);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(<ref refid="classarrow_1_1_array_builder_1afe8448fda39a8529a119bde5ba7ba119" kindref="member">Reserve</ref>(<ref refid="classarrow_1_1_array_builder_1a296ac75b9b3d877192e37681c66513ba" kindref="member">length</ref>));</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classarrow_1_1_array_builder_1a296ac75b9b3d877192e37681c66513ba" kindref="member">length</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_base_binary_builder_1a927a9ee2d418252feb63a075f232aadc" kindref="member">offsets_builder_</ref>.UnsafeAppend(static_cast&lt;offset_type&gt;(num_bytes));</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_array_builder_1a2dbe80584eac62147112c4d0a43ceea2" kindref="member">UnsafeAppendToBitmap</ref>(length,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1a5c0b0031db6eeec3dcc70485d24cfe03" kindref="member">Status::OK</ref>();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88" refid="classarrow_1_1_base_binary_builder_1adc7a7beaf773747268a8b51d163ad801" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_base_binary_builder_1adc7a7beaf773747268a8b51d163ad801" kindref="member">AppendNull</ref>()<sp/>final<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(<ref refid="classarrow_1_1_base_binary_builder_1ab070121e13bb40b89541c4f386e5f7b1" kindref="member">AppendNextOffset</ref>());</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(<ref refid="classarrow_1_1_array_builder_1afe8448fda39a8529a119bde5ba7ba119" kindref="member">Reserve</ref>(1));</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_array_builder_1a2dbe80584eac62147112c4d0a43ceea2" kindref="member">UnsafeAppendToBitmap</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1a5c0b0031db6eeec3dcc70485d24cfe03" kindref="member">Status::OK</ref>();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="classarrow_1_1_base_binary_builder_1adde0685931a1474bc8bb316a2983e63d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_base_binary_builder_1adde0685931a1474bc8bb316a2983e63d" kindref="member">UnsafeAppend</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>value,<sp/><ref refid="classarrow_1_1_base_binary_builder_1a68599cf6ce54173a24df568d42447bb5" kindref="member">offset_type</ref><sp/><ref refid="classarrow_1_1_array_builder_1a296ac75b9b3d877192e37681c66513ba" kindref="member">length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_base_binary_builder_1aecf1f34175ad51584699bd28465259ff" kindref="member">UnsafeAppendNextOffset</ref>();</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_base_binary_builder_1a8f20bc7bf837919c52e00fcf847554c2" kindref="member">value_data_builder_</ref>.UnsafeAppend(value,<sp/>length);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_array_builder_1a2dbe80584eac62147112c4d0a43ceea2" kindref="member">UnsafeAppendToBitmap</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="classarrow_1_1_base_binary_builder_1aa2be993a29c5ac9886869b8cb0c8dd8c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_base_binary_builder_1aa2be993a29c5ac9886869b8cb0c8dd8c" kindref="member">UnsafeAppend</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>value,<sp/><ref refid="classarrow_1_1_base_binary_builder_1a68599cf6ce54173a24df568d42447bb5" kindref="member">offset_type</ref><sp/><ref refid="classarrow_1_1_array_builder_1a296ac75b9b3d877192e37681c66513ba" kindref="member">length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_base_binary_builder_1adde0685931a1474bc8bb316a2983e63d" kindref="member">UnsafeAppend</ref>(reinterpret_cast&lt;const<sp/>uint8_t*&gt;(value),<sp/>length);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="classarrow_1_1_base_binary_builder_1a84c5b96dd42449e3e375a97c0925949e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_base_binary_builder_1a84c5b96dd42449e3e375a97c0925949e" kindref="member">UnsafeAppend</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_base_binary_builder_1adde0685931a1474bc8bb316a2983e63d" kindref="member">UnsafeAppend</ref>(value.c_str(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classarrow_1_1_base_binary_builder_1a68599cf6ce54173a24df568d42447bb5" kindref="member">offset_type</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value.size()));</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113" refid="classarrow_1_1_base_binary_builder_1a9346a48e354396e8e3dbe7356d7081b0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_base_binary_builder_1a9346a48e354396e8e3dbe7356d7081b0" kindref="member">UnsafeAppend</ref>(<ref refid="namespaceparquet_1af53c3c244055490d5dd385dd8a874540" kindref="member">util::string_view</ref><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_base_binary_builder_1adde0685931a1474bc8bb316a2983e63d" kindref="member">UnsafeAppend</ref>(value.data(),<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classarrow_1_1_base_binary_builder_1a68599cf6ce54173a24df568d42447bb5" kindref="member">offset_type</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value.size()));</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="classarrow_1_1_base_binary_builder_1afa02207b952f50cea4025cbe6475d844" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_base_binary_builder_1afa02207b952f50cea4025cbe6475d844" kindref="member">UnsafeAppendNull</ref>()<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>num_bytes<sp/>=<sp/><ref refid="classarrow_1_1_base_binary_builder_1a8f20bc7bf837919c52e00fcf847554c2" kindref="member">value_data_builder_</ref>.length();</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_base_binary_builder_1a927a9ee2d418252feb63a075f232aadc" kindref="member">offsets_builder_</ref>.UnsafeAppend(static_cast&lt;offset_type&gt;(num_bytes));</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_array_builder_1a2dbe80584eac62147112c4d0a43ceea2" kindref="member">UnsafeAppendToBitmap</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="129" refid="classarrow_1_1_base_binary_builder_1afdc7c1c5d0e2e0ce2cf4db0c6f67238e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_base_binary_builder_1afdc7c1c5d0e2e0ce2cf4db0c6f67238e" kindref="member">AppendValues</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;&amp;<sp/>values,</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>valid_bytes<sp/>=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>)<sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>total_length<sp/>=<sp/>std::accumulate(</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values.begin(),<sp/>values.end(),<sp/>0ULL,</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[](uint64_t<sp/>sum,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>str)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sum<sp/>+<sp/>str.size();<sp/>});</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(<ref refid="classarrow_1_1_array_builder_1afe8448fda39a8529a119bde5ba7ba119" kindref="member">Reserve</ref>(values.size()));</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(<ref refid="classarrow_1_1_base_binary_builder_1a8f20bc7bf837919c52e00fcf847554c2" kindref="member">value_data_builder_</ref>.Reserve(total_length));</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(<ref refid="classarrow_1_1_base_binary_builder_1a927a9ee2d418252feb63a075f232aadc" kindref="member">offsets_builder_</ref>.Reserve(values.size()));</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(valid_bytes<sp/>!=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>values.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_base_binary_builder_1aecf1f34175ad51584699bd28465259ff" kindref="member">UnsafeAppendNextOffset</ref>();</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(valid_bytes[i])<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_base_binary_builder_1a8f20bc7bf837919c52e00fcf847554c2" kindref="member">value_data_builder_</ref>.UnsafeAppend(</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reinterpret_cast&lt;const<sp/>uint8_t*&gt;(values[i].<ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>()),<sp/>values[i].size());</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(std::size_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>values.size();<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_base_binary_builder_1aecf1f34175ad51584699bd28465259ff" kindref="member">UnsafeAppendNextOffset</ref>();</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_base_binary_builder_1a8f20bc7bf837919c52e00fcf847554c2" kindref="member">value_data_builder_</ref>.UnsafeAppend(</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reinterpret_cast&lt;const<sp/>uint8_t*&gt;(values[i].<ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>()),<sp/>values[i].size());</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_array_builder_1a2dbe80584eac62147112c4d0a43ceea2" kindref="member">UnsafeAppendToBitmap</ref>(valid_bytes,<sp/>values.size());</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1a5c0b0031db6eeec3dcc70485d24cfe03" kindref="member">Status::OK</ref>();</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="167" refid="classarrow_1_1_base_binary_builder_1ae7d4b55b71abcbeaa76a3e60c1e14544" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_base_binary_builder_1ae7d4b55b71abcbeaa76a3e60c1e14544" kindref="member">AppendValues</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">**<sp/>values,<sp/>int64_t<sp/><ref refid="classarrow_1_1_array_builder_1a296ac75b9b3d877192e37681c66513ba" kindref="member">length</ref>,</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>valid_bytes<sp/>=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/>total_length<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;std::size_t&gt;<sp/>value_lengths(length);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>have_null_value<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classarrow_1_1_array_builder_1a296ac75b9b3d877192e37681c66513ba" kindref="member">length</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(values[i]<sp/>!=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value_length<sp/>=<sp/>strlen(values[i]);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_lengths[i]<sp/>=<sp/>value_length;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>total_length<sp/>+=<sp/>value_length;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>have_null_value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(<ref refid="classarrow_1_1_array_builder_1afe8448fda39a8529a119bde5ba7ba119" kindref="member">Reserve</ref>(length));</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(<ref refid="classarrow_1_1_base_binary_builder_1a5b7e9f0b08c07fc417c47c9f601156ee" kindref="member">ReserveData</ref>(total_length));</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(valid_bytes)<sp/>{</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>valid_bytes_offset<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classarrow_1_1_array_builder_1a296ac75b9b3d877192e37681c66513ba" kindref="member">length</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_base_binary_builder_1aecf1f34175ad51584699bd28465259ff" kindref="member">UnsafeAppendNextOffset</ref>();</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(valid_bytes[i])<sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(values[i])<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_base_binary_builder_1a8f20bc7bf837919c52e00fcf847554c2" kindref="member">value_data_builder_</ref>.UnsafeAppend(reinterpret_cast&lt;const<sp/>uint8_t*&gt;(values[i]),</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_lengths[i]);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_array_builder_1a2dbe80584eac62147112c4d0a43ceea2" kindref="member">UnsafeAppendToBitmap</ref>(valid_bytes<sp/>+<sp/>valid_bytes_offset,</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i<sp/>-<sp/>valid_bytes_offset);</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_array_builder_1a2dbe80584eac62147112c4d0a43ceea2" kindref="member">UnsafeAppendToBitmap</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valid_bytes_offset<sp/>=<sp/>i<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_array_builder_1a2dbe80584eac62147112c4d0a43ceea2" kindref="member">UnsafeAppendToBitmap</ref>(valid_bytes<sp/>+<sp/>valid_bytes_offset,<sp/>length<sp/>-<sp/>valid_bytes_offset);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(have_null_value)<sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;uint8_t&gt;<sp/>valid_vector(length,<sp/>0);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classarrow_1_1_array_builder_1a296ac75b9b3d877192e37681c66513ba" kindref="member">length</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_base_binary_builder_1aecf1f34175ad51584699bd28465259ff" kindref="member">UnsafeAppendNextOffset</ref>();</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(values[i])<sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_base_binary_builder_1a8f20bc7bf837919c52e00fcf847554c2" kindref="member">value_data_builder_</ref>.UnsafeAppend(reinterpret_cast&lt;const<sp/>uint8_t*&gt;(values[i]),</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_lengths[i]);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valid_vector[i]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_array_builder_1a2dbe80584eac62147112c4d0a43ceea2" kindref="member">UnsafeAppendToBitmap</ref>(valid_vector.data(),<sp/><ref refid="classarrow_1_1_array_builder_1a296ac75b9b3d877192e37681c66513ba" kindref="member">length</ref>);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/><ref refid="classarrow_1_1_array_builder_1a296ac75b9b3d877192e37681c66513ba" kindref="member">length</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_base_binary_builder_1aecf1f34175ad51584699bd28465259ff" kindref="member">UnsafeAppendNextOffset</ref>();</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_base_binary_builder_1a8f20bc7bf837919c52e00fcf847554c2" kindref="member">value_data_builder_</ref>.UnsafeAppend(reinterpret_cast&lt;const<sp/>uint8_t*&gt;(values[i]),</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_lengths[i]);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_array_builder_1a2dbe80584eac62147112c4d0a43ceea2" kindref="member">UnsafeAppendToBitmap</ref>(<ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>,<sp/>length);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1a5c0b0031db6eeec3dcc70485d24cfe03" kindref="member">Status::OK</ref>();</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight></codeline>
<codeline lineno="225" refid="classarrow_1_1_base_binary_builder_1a8b28644573282a55a360478ba160fa8f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_base_binary_builder_1a8b28644573282a55a360478ba160fa8f" kindref="member">Reset</ref>()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_array_builder_1a71a25653bdf242da1b3a317f4fd49a98" kindref="member">ArrayBuilder::Reset</ref>();</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_base_binary_builder_1a927a9ee2d418252feb63a075f232aadc" kindref="member">offsets_builder_</ref>.Reset();</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_base_binary_builder_1a8f20bc7bf837919c52e00fcf847554c2" kindref="member">value_data_builder_</ref>.Reset();</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231" refid="classarrow_1_1_base_binary_builder_1a39a192382af4e821b8c7686bb0b0f3f7" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_base_binary_builder_1a39a192382af4e821b8c7686bb0b0f3f7" kindref="member">Resize</ref>(int64_t<sp/><ref refid="classarrow_1_1_array_builder_1a0236e815af8f62c98bd612eea219cd73" kindref="member">capacity</ref>)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>XXX<sp/>Why<sp/>is<sp/>this<sp/>check<sp/>necessary?<sp/><sp/>There<sp/>is<sp/>no<sp/>reason<sp/>to<sp/>disallow,<sp/>say,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>binary<sp/>arrays<sp/>with<sp/>more<sp/>than<sp/>2**31<sp/>empty<sp/>or<sp/>null<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(capacity<sp/>&gt;<sp/><ref refid="classarrow_1_1_base_binary_builder_1ad236580ddb444dd7266e9258b0d815fc" kindref="member">memory_limit</ref>())<sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1a116186da015799d2efc8446ec709d4af" kindref="member">Status::CapacityError</ref>(</highlight><highlight class="stringliteral">&quot;BinaryBuilder<sp/>cannot<sp/>reserve<sp/>space<sp/>for<sp/>more<sp/>than<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_base_binary_builder_1ad236580ddb444dd7266e9258b0d815fc" kindref="member">memory_limit</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;<sp/>child<sp/>elements,<sp/>got<sp/>&quot;</highlight><highlight class="normal">,<sp/>capacity);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(<ref refid="classarrow_1_1_array_builder_1a0d77ad3f24791679196dda8b3ac84437" kindref="member">CheckCapacity</ref>(capacity));</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>One<sp/>more<sp/>than<sp/>requested<sp/>for<sp/>offsets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(<ref refid="classarrow_1_1_base_binary_builder_1a927a9ee2d418252feb63a075f232aadc" kindref="member">offsets_builder_</ref>.Resize(capacity<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_array_builder_1a994d873bec453c33fbaeb995442d520b" kindref="member">ArrayBuilder::Resize</ref>(capacity);</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="247" refid="classarrow_1_1_base_binary_builder_1a5b7e9f0b08c07fc417c47c9f601156ee" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_base_binary_builder_1a5b7e9f0b08c07fc417c47c9f601156ee" kindref="member">ReserveData</ref>(int64_t<sp/>elements)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>size<sp/>=<sp/><ref refid="classarrow_1_1_base_binary_builder_1a67c35b69662e4193c9e67b2ea7facc1c" kindref="member">value_data_length</ref>()<sp/>+<sp/>elements;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_8h_1a8e9d01ad92df18e33211f97e1ddebf62" kindref="member">ARROW_RETURN_IF</ref>(size<sp/>&gt;<sp/><ref refid="classarrow_1_1_base_binary_builder_1ad236580ddb444dd7266e9258b0d815fc" kindref="member">memory_limit</ref>(),</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_status_1a116186da015799d2efc8446ec709d4af" kindref="member">Status::CapacityError</ref>(</highlight><highlight class="stringliteral">&quot;Cannot<sp/>reserve<sp/>capacity<sp/>larger<sp/>than<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_base_binary_builder_1ad236580ddb444dd7266e9258b0d815fc" kindref="member">memory_limit</ref>(),<sp/></highlight><highlight class="stringliteral">&quot;<sp/>bytes&quot;</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(size<sp/>&gt;<sp/><ref refid="classarrow_1_1_base_binary_builder_1ab1ab8ec0b4d22c1d371c8115cb69c8fe" kindref="member">value_data_capacity</ref>())<sp/>?<sp/><ref refid="classarrow_1_1_base_binary_builder_1a8f20bc7bf837919c52e00fcf847554c2" kindref="member">value_data_builder_</ref>.Reserve(elements)</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classarrow_1_1_status_1a5c0b0031db6eeec3dcc70485d24cfe03" kindref="member">Status::OK</ref>();</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256" refid="classarrow_1_1_base_binary_builder_1a083a647ec622d5da23981aaa7ad77fe6" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_base_binary_builder_1a083a647ec622d5da23981aaa7ad77fe6" kindref="member">FinishInternal</ref>(std::shared_ptr&lt;ArrayData&gt;*<sp/>out)</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>final<sp/>offset<sp/>(values<sp/>length)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(<ref refid="classarrow_1_1_base_binary_builder_1ab070121e13bb40b89541c4f386e5f7b1" kindref="member">AppendNextOffset</ref>());</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>buffers&apos;<sp/>padding<sp/>zeroed<sp/>by<sp/>BufferBuilder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Buffer&gt;<sp/>offsets,<sp/><ref refid="classarrow_1_1_base_binary_builder_1a37ce09233654b14608e0dc9b8aa9ff07" kindref="member">value_data</ref>,<sp/>null_bitmap;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(<ref refid="classarrow_1_1_base_binary_builder_1a927a9ee2d418252feb63a075f232aadc" kindref="member">offsets_builder_</ref>.Finish(&amp;offsets));</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(<ref refid="classarrow_1_1_base_binary_builder_1a8f20bc7bf837919c52e00fcf847554c2" kindref="member">value_data_builder_</ref>.Finish(&amp;value_data));</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(<ref refid="classarrow_1_1_array_builder_1a0f32beedba413982480c5df287946922" kindref="member">null_bitmap_builder_</ref>.<ref refid="classarrow_1_1_typed_buffer_builder_3_01bool_01_4_1ae368db0fc1c0ae4a88c82d57b8ec16d8" kindref="member">Finish</ref>(&amp;null_bitmap));</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>*out<sp/>=<sp/><ref refid="structarrow_1_1_array_data_1a8ae8d2e9fb0220b87410df967e645641" kindref="member">ArrayData::Make</ref>(<ref refid="classarrow_1_1_array_builder_1a39b4b420be1fcf4fe7219fe953eb65c7" kindref="member">type</ref>(),<sp/><ref refid="classarrow_1_1_array_builder_1ae8b7ebc042e6684440bd9e1c77f0f5c1" kindref="member">length_</ref>,<sp/>{null_bitmap,<sp/>offsets,<sp/>value_data},</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_array_builder_1a9ea96ba4121857ab23241b6b408051b9" kindref="member">null_count_</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_base_binary_builder_1a8b28644573282a55a360478ba160fa8f" kindref="member">Reset</ref>();</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1a5c0b0031db6eeec3dcc70485d24cfe03" kindref="member">Status::OK</ref>();</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="273" refid="classarrow_1_1_base_binary_builder_1a37ce09233654b14608e0dc9b8aa9ff07" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/><ref refid="classarrow_1_1_base_binary_builder_1a37ce09233654b14608e0dc9b8aa9ff07" kindref="member">value_data</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_base_binary_builder_1a8f20bc7bf837919c52e00fcf847554c2" kindref="member">value_data_builder_</ref>.data();<sp/>}</highlight></codeline>
<codeline lineno="275" refid="classarrow_1_1_base_binary_builder_1a67c35b69662e4193c9e67b2ea7facc1c" refkind="member"><highlight class="normal"><sp/><sp/>int64_t<sp/><ref refid="classarrow_1_1_base_binary_builder_1a67c35b69662e4193c9e67b2ea7facc1c" kindref="member">value_data_length</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_base_binary_builder_1a8f20bc7bf837919c52e00fcf847554c2" kindref="member">value_data_builder_</ref>.length();<sp/>}</highlight></codeline>
<codeline lineno="277" refid="classarrow_1_1_base_binary_builder_1ab1ab8ec0b4d22c1d371c8115cb69c8fe" refkind="member"><highlight class="normal"><sp/><sp/>int64_t<sp/><ref refid="classarrow_1_1_base_binary_builder_1ab1ab8ec0b4d22c1d371c8115cb69c8fe" kindref="member">value_data_capacity</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_base_binary_builder_1a8f20bc7bf837919c52e00fcf847554c2" kindref="member">value_data_builder_</ref>.capacity();<sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="280" refid="classarrow_1_1_base_binary_builder_1abb30d4a728b15429d40a486409ffc570" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_base_binary_builder_1a68599cf6ce54173a24df568d42447bb5" kindref="member">offset_type</ref>*<sp/><ref refid="classarrow_1_1_base_binary_builder_1abb30d4a728b15429d40a486409ffc570" kindref="member">offsets_data</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_base_binary_builder_1a927a9ee2d418252feb63a075f232aadc" kindref="member">offsets_builder_</ref>.data();<sp/>}</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="285" refid="classarrow_1_1_base_binary_builder_1a58fb7bdf885da9f2ffaeb50776852a9c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/><ref refid="classarrow_1_1_base_binary_builder_1a58fb7bdf885da9f2ffaeb50776852a9c" kindref="member">GetValue</ref>(int64_t<sp/>i,<sp/><ref refid="classarrow_1_1_base_binary_builder_1a68599cf6ce54173a24df568d42447bb5" kindref="member">offset_type</ref>*<sp/>out_length)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_base_binary_builder_1a68599cf6ce54173a24df568d42447bb5" kindref="member">offset_type</ref>*<sp/>offsets<sp/>=<sp/><ref refid="classarrow_1_1_base_binary_builder_1a927a9ee2d418252feb63a075f232aadc" kindref="member">offsets_builder_</ref>.data();</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_base_binary_builder_1a7da6a648a661e83a8a63e14ded5c53aa" kindref="member">offset</ref><sp/>=<sp/>offsets[i];</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>(<ref refid="classarrow_1_1_array_builder_1ae8b7ebc042e6684440bd9e1c77f0f5c1" kindref="member">length_</ref><sp/>-<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*out_length<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classarrow_1_1_base_binary_builder_1a68599cf6ce54173a24df568d42447bb5" kindref="member">offset_type</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classarrow_1_1_base_binary_builder_1a8f20bc7bf837919c52e00fcf847554c2" kindref="member">value_data_builder_</ref>.length())<sp/>-<sp/><ref refid="classarrow_1_1_base_binary_builder_1a7da6a648a661e83a8a63e14ded5c53aa" kindref="member">offset</ref>;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*out_length<sp/>=<sp/>offsets[i<sp/>+<sp/>1]<sp/>-<sp/><ref refid="classarrow_1_1_base_binary_builder_1a7da6a648a661e83a8a63e14ded5c53aa" kindref="member">offset</ref>;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_base_binary_builder_1a8f20bc7bf837919c52e00fcf847554c2" kindref="member">value_data_builder_</ref>.data()<sp/>+<sp/><ref refid="classarrow_1_1_base_binary_builder_1a7da6a648a661e83a8a63e14ded5c53aa" kindref="member">offset</ref>;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="296" refid="classarrow_1_1_base_binary_builder_1a7da6a648a661e83a8a63e14ded5c53aa" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_base_binary_builder_1a68599cf6ce54173a24df568d42447bb5" kindref="member">offset_type</ref><sp/><ref refid="classarrow_1_1_base_binary_builder_1a7da6a648a661e83a8a63e14ded5c53aa" kindref="member">offset</ref>(int64_t<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_base_binary_builder_1abb30d4a728b15429d40a486409ffc570" kindref="member">offsets_data</ref>()[i];<sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="301" refid="classarrow_1_1_base_binary_builder_1ab131a922dbb14ede1223714ff46b8d32" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespaceparquet_1af53c3c244055490d5dd385dd8a874540" kindref="member">util::string_view</ref><sp/><ref refid="classarrow_1_1_base_binary_builder_1ab131a922dbb14ede1223714ff46b8d32" kindref="member">GetView</ref>(int64_t<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_base_binary_builder_1a68599cf6ce54173a24df568d42447bb5" kindref="member">offset_type</ref><sp/>value_length;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/><ref refid="classarrow_1_1_base_binary_builder_1a37ce09233654b14608e0dc9b8aa9ff07" kindref="member">value_data</ref><sp/>=<sp/><ref refid="classarrow_1_1_base_binary_builder_1a58fb7bdf885da9f2ffaeb50776852a9c" kindref="member">GetValue</ref>(i,<sp/>&amp;value_length);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespaceparquet_1af53c3c244055490d5dd385dd8a874540" kindref="member">util::string_view</ref>(reinterpret_cast&lt;const<sp/>char*&gt;(value_data),<sp/>value_length);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Cannot<sp/>make<sp/>this<sp/>a<sp/>static<sp/>attribute<sp/>because<sp/>of<sp/>linking<sp/>issues</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308" refid="classarrow_1_1_base_binary_builder_1ad236580ddb444dd7266e9258b0d815fc" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>int64_t<sp/><ref refid="classarrow_1_1_base_binary_builder_1ad236580ddb444dd7266e9258b0d815fc" kindref="member">memory_limit</ref>()<sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::numeric_limits&lt;offset_type&gt;::max()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="313" refid="classarrow_1_1_base_binary_builder_1a927a9ee2d418252feb63a075f232aadc" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_typed_buffer_builder" kindref="compound">TypedBufferBuilder&lt;offset_type&gt;</ref><sp/><ref refid="classarrow_1_1_base_binary_builder_1a927a9ee2d418252feb63a075f232aadc" kindref="member">offsets_builder_</ref>;</highlight></codeline>
<codeline lineno="314" refid="classarrow_1_1_base_binary_builder_1a8f20bc7bf837919c52e00fcf847554c2" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_typed_buffer_builder" kindref="compound">TypedBufferBuilder&lt;uint8_t&gt;</ref><sp/><ref refid="classarrow_1_1_base_binary_builder_1a8f20bc7bf837919c52e00fcf847554c2" kindref="member">value_data_builder_</ref>;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316" refid="classarrow_1_1_base_binary_builder_1a1ffe33a0d231398ed5745a4138d31a40" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_base_binary_builder_1a1ffe33a0d231398ed5745a4138d31a40" kindref="member">AppendOverflow</ref>(int64_t<sp/>num_bytes)<sp/>{</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1a116186da015799d2efc8446ec709d4af" kindref="member">Status::CapacityError</ref>(</highlight><highlight class="stringliteral">&quot;array<sp/>cannot<sp/>contain<sp/>more<sp/>than<sp/>&quot;</highlight><highlight class="normal">,<sp/><ref refid="classarrow_1_1_base_binary_builder_1ad236580ddb444dd7266e9258b0d815fc" kindref="member">memory_limit</ref>(),</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>bytes,<sp/>have<sp/>&quot;</highlight><highlight class="normal">,<sp/>num_bytes);</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"></highlight></codeline>
<codeline lineno="321" refid="classarrow_1_1_base_binary_builder_1ab070121e13bb40b89541c4f386e5f7b1" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_base_binary_builder_1ab070121e13bb40b89541c4f386e5f7b1" kindref="member">AppendNextOffset</ref>()<sp/>{</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>num_bytes<sp/>=<sp/>value_data_builder_.length();</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="macros_8h_1a6f2ee7ad52872edb915cf48e163ac99c" kindref="member">ARROW_PREDICT_FALSE</ref>(num_bytes<sp/>&gt;<sp/><ref refid="classarrow_1_1_base_binary_builder_1ad236580ddb444dd7266e9258b0d815fc" kindref="member">memory_limit</ref>()))<sp/>{</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_base_binary_builder_1a1ffe33a0d231398ed5745a4138d31a40" kindref="member">AppendOverflow</ref>(num_bytes);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>offsets_builder_.Append(static_cast&lt;offset_type&gt;(num_bytes));</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329" refid="classarrow_1_1_base_binary_builder_1aecf1f34175ad51584699bd28465259ff" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_base_binary_builder_1aecf1f34175ad51584699bd28465259ff" kindref="member">UnsafeAppendNextOffset</ref>()<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>num_bytes<sp/>=<sp/>value_data_builder_.length();</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>offsets_builder_.UnsafeAppend(static_cast&lt;offset_type&gt;(num_bytes));</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal">};</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="337" refid="classarrow_1_1_binary_builder" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_binary_builder" kindref="compound">BinaryBuilder</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_base_binary_builder" kindref="compound">BaseBinaryBuilder</ref>&lt;BinaryType&gt;<sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_base_binary_builder_1ab240ad50308440395d5226a3c6503811" kindref="member">BaseBinaryBuilder::BaseBinaryBuilder</ref>;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_array_builder_1a67b2227edb4b51bc44425f1c8a439819" kindref="member">ArrayBuilder::Finish</ref>;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345" refid="classarrow_1_1_binary_builder_1aad30ec4ad3c1da04b7cfd17fb2108486" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_binary_builder_1aad30ec4ad3c1da04b7cfd17fb2108486" kindref="member">Finish</ref>(std::shared_ptr&lt;BinaryArray&gt;*<sp/>out)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_array_builder_1a9f90da9e81d9db4bc9277458ba70d46a" kindref="member">FinishTyped</ref>(out);<sp/>}</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="347" refid="classarrow_1_1_binary_builder_1a6d1c09cbc3b70c842335d449383140f0" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;DataType&gt;<sp/><ref refid="classarrow_1_1_binary_builder_1a6d1c09cbc3b70c842335d449383140f0" kindref="member">type</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__type-factories_1ga66c3979f26a439e78d048bbac84a9232" kindref="member">binary</ref>();<sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal">};</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="352" refid="classarrow_1_1_string_builder" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_string_builder" kindref="compound">StringBuilder</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_binary_builder" kindref="compound">BinaryBuilder</ref><sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>BinaryBuilder::BinaryBuilder;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_array_builder_1a67b2227edb4b51bc44425f1c8a439819" kindref="member">ArrayBuilder::Finish</ref>;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360" refid="classarrow_1_1_string_builder_1ac3e0d84b6e9a87d3696db82eee77f505" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_string_builder_1ac3e0d84b6e9a87d3696db82eee77f505" kindref="member">Finish</ref>(std::shared_ptr&lt;StringArray&gt;*<sp/>out)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_array_builder_1a9f90da9e81d9db4bc9277458ba70d46a" kindref="member">FinishTyped</ref>(out);<sp/>}</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362" refid="classarrow_1_1_string_builder_1a57f3e39d2beab058c7f5726a033cc619" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;DataType&gt;<sp/><ref refid="classarrow_1_1_string_builder_1a57f3e39d2beab058c7f5726a033cc619" kindref="member">type</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__type-factories_1ga63178820a26f6ecb894ad35963ca981a" kindref="member">utf8</ref>();<sp/>}</highlight></codeline>
<codeline lineno="363"><highlight class="normal">};</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="367" refid="classarrow_1_1_large_binary_builder" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_large_binary_builder" kindref="compound">LargeBinaryBuilder</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_base_binary_builder" kindref="compound">BaseBinaryBuilder</ref>&lt;LargeBinaryType&gt;<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_base_binary_builder_1ab240ad50308440395d5226a3c6503811" kindref="member">BaseBinaryBuilder::BaseBinaryBuilder</ref>;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_array_builder_1a67b2227edb4b51bc44425f1c8a439819" kindref="member">ArrayBuilder::Finish</ref>;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375" refid="classarrow_1_1_large_binary_builder_1abf33b62396eb483a5d7f347707adeb5b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_large_binary_builder_1abf33b62396eb483a5d7f347707adeb5b" kindref="member">Finish</ref>(std::shared_ptr&lt;LargeBinaryArray&gt;*<sp/>out)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_array_builder_1a9f90da9e81d9db4bc9277458ba70d46a" kindref="member">FinishTyped</ref>(out);<sp/>}</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="377" refid="classarrow_1_1_large_binary_builder_1a6d7dcefdbdd95cba0fd4e775e450a159" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;DataType&gt;<sp/><ref refid="classarrow_1_1_large_binary_builder_1a6d7dcefdbdd95cba0fd4e775e450a159" kindref="member">type</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__type-factories_1gad41a46c979c848fee62212f2e49a8d8c" kindref="member">large_binary</ref>();<sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal">};</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="382" refid="classarrow_1_1_large_string_builder" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_large_string_builder" kindref="compound">LargeStringBuilder</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_large_binary_builder" kindref="compound">LargeBinaryBuilder</ref><sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>LargeBinaryBuilder::LargeBinaryBuilder;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_array_builder_1a67b2227edb4b51bc44425f1c8a439819" kindref="member">ArrayBuilder::Finish</ref>;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390" refid="classarrow_1_1_large_string_builder_1aa5a14b3fdae387ab413a3349aa57c701" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_large_string_builder_1aa5a14b3fdae387ab413a3349aa57c701" kindref="member">Finish</ref>(std::shared_ptr&lt;LargeStringArray&gt;*<sp/>out)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_array_builder_1a9f90da9e81d9db4bc9277458ba70d46a" kindref="member">FinishTyped</ref>(out);<sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392" refid="classarrow_1_1_large_string_builder_1ab5f86d865a9d466544760bffe0dd73b8" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;DataType&gt;<sp/><ref refid="classarrow_1_1_large_string_builder_1ab5f86d865a9d466544760bffe0dd73b8" kindref="member">type</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__type-factories_1gacc42ef32dc897b3bee1dea124cefab86" kindref="member">large_utf8</ref>();<sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal">};</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FixedSizeBinaryBuilder</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight></codeline>
<codeline lineno="398" refid="classarrow_1_1_fixed_size_binary_builder" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_fixed_size_binary_builder" kindref="compound">FixedSizeBinaryBuilder</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_array_builder" kindref="compound">ArrayBuilder</ref><sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="400" refid="classarrow_1_1_fixed_size_binary_builder_1a796f56a09a4ee136a5165f2e1aa2a264" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_fixed_size_binary_type" kindref="compound">TypeClass</ref><sp/>=<sp/><ref refid="classarrow_1_1_fixed_size_binary_type" kindref="compound">FixedSizeBinaryType</ref>;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_fixed_size_binary_builder" kindref="compound">FixedSizeBinaryBuilder</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/><ref refid="classarrow_1_1_array_builder_1a39b4b420be1fcf4fe7219fe953eb65c7" kindref="member">type</ref>,</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/>pool<sp/>=<sp/><ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">default_memory_pool</ref>());</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405" refid="classarrow_1_1_fixed_size_binary_builder_1a82c313b8b1f21e1b7db9bd4232791acd" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_fixed_size_binary_builder_1a82c313b8b1f21e1b7db9bd4232791acd" kindref="member">Append</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(<ref refid="classarrow_1_1_array_builder_1afe8448fda39a8529a119bde5ba7ba119" kindref="member">Reserve</ref>(1));</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_base_binary_builder_1adde0685931a1474bc8bb316a2983e63d" kindref="member">UnsafeAppend</ref>(value);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1a5c0b0031db6eeec3dcc70485d24cfe03" kindref="member">Status::OK</ref>();</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411" refid="classarrow_1_1_fixed_size_binary_builder_1ac5f6b94fa7197465e2130c4fc05637bb" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_fixed_size_binary_builder_1ac5f6b94fa7197465e2130c4fc05637bb" kindref="member">Append</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_base_binary_builder_1a2879a4313c6e3076581c42c3cd3e0f32" kindref="member">Append</ref>(reinterpret_cast&lt;const<sp/>uint8_t*&gt;(value));</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415" refid="classarrow_1_1_fixed_size_binary_builder_1ab5111c4be864c91ec25290a1219c8608" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_fixed_size_binary_builder_1ab5111c4be864c91ec25290a1219c8608" kindref="member">Append</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceparquet_1af53c3c244055490d5dd385dd8a874540" kindref="member">util::string_view</ref>&amp;<sp/>view)<sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(<ref refid="classarrow_1_1_array_builder_1afe8448fda39a8529a119bde5ba7ba119" kindref="member">Reserve</ref>(1));</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_base_binary_builder_1adde0685931a1474bc8bb316a2983e63d" kindref="member">UnsafeAppend</ref>(view);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1a5c0b0031db6eeec3dcc70485d24cfe03" kindref="member">Status::OK</ref>();</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421" refid="classarrow_1_1_fixed_size_binary_builder_1af385532e333b14d8f13551d60d9ec1db" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_fixed_size_binary_builder_1af385532e333b14d8f13551d60d9ec1db" kindref="member">Append</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(<ref refid="classarrow_1_1_array_builder_1afe8448fda39a8529a119bde5ba7ba119" kindref="member">Reserve</ref>(1));</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_base_binary_builder_1adde0685931a1474bc8bb316a2983e63d" kindref="member">UnsafeAppend</ref>(s);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1a5c0b0031db6eeec3dcc70485d24cfe03" kindref="member">Status::OK</ref>();</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>NBYTES&gt;</highlight></codeline>
<codeline lineno="428" refid="classarrow_1_1_fixed_size_binary_builder_1a6bc284a561d8ec3ec6980ca7929edca9" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_fixed_size_binary_builder_1a6bc284a561d8ec3ec6980ca7929edca9" kindref="member">Append</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::array&lt;uint8_t,<sp/>NBYTES&gt;&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(<ref refid="classarrow_1_1_array_builder_1afe8448fda39a8529a119bde5ba7ba119" kindref="member">Reserve</ref>(1));</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_base_binary_builder_1adde0685931a1474bc8bb316a2983e63d" kindref="member">UnsafeAppend</ref>(</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceparquet_1af53c3c244055490d5dd385dd8a874540" kindref="member">util::string_view</ref>(reinterpret_cast&lt;const<sp/>char*&gt;(value.data()),<sp/>value.size()));</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1a5c0b0031db6eeec3dcc70485d24cfe03" kindref="member">Status::OK</ref>();</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_base_binary_builder_1afdc7c1c5d0e2e0ce2cf4db0c6f67238e" kindref="member">AppendValues</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>,<sp/>int64_t<sp/><ref refid="classarrow_1_1_array_builder_1a296ac75b9b3d877192e37681c66513ba" kindref="member">length</ref>,</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>valid_bytes<sp/>=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_base_binary_builder_1adc7a7beaf773747268a8b51d163ad801" kindref="member">AppendNull</ref>()<sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_base_binary_builder_1ad3d58ebc0b0233d4d99c69f4d8509c28" kindref="member">AppendNulls</ref>(int64_t<sp/>length)<sp/></highlight><highlight class="keyword">final</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442" refid="classarrow_1_1_fixed_size_binary_builder_1ad116f564ead985e5302b231e7b53335b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_fixed_size_binary_builder_1ad116f564ead985e5302b231e7b53335b" kindref="member">UnsafeAppend</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_array_builder_1a2dbe80584eac62147112c4d0a43ceea2" kindref="member">UnsafeAppendToBitmap</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="macros_8h_1a1f418a9edc46d53e62732e7ccd06f329" kindref="member">ARROW_PREDICT_TRUE</ref>(byte_width_<sp/>&gt;<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>byte_builder_.UnsafeAppend(value,<sp/>byte_width_);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449" refid="classarrow_1_1_fixed_size_binary_builder_1aa113a3c7d86165b888cc3476d9a96461" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_fixed_size_binary_builder_1aa113a3c7d86165b888cc3476d9a96461" kindref="member">UnsafeAppend</ref>(<ref refid="namespaceparquet_1af53c3c244055490d5dd385dd8a874540" kindref="member">util::string_view</ref><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>NDEBUG</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>CheckValueSize(static_cast&lt;size_t&gt;(value.size()));</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_base_binary_builder_1adde0685931a1474bc8bb316a2983e63d" kindref="member">UnsafeAppend</ref>(reinterpret_cast&lt;const<sp/>uint8_t*&gt;(value.data()));</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"></highlight></codeline>
<codeline lineno="456" refid="classarrow_1_1_fixed_size_binary_builder_1ad4f1c5f69a4b859e8cba350ecdc15ee2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_fixed_size_binary_builder_1ad4f1c5f69a4b859e8cba350ecdc15ee2" kindref="member">UnsafeAppendNull</ref>()<sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_array_builder_1a2dbe80584eac62147112c4d0a43ceea2" kindref="member">UnsafeAppendToBitmap</ref>(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/>byte_builder_.UnsafeAppend(</highlight><highlight class="comment">/*num_copies=*/</highlight><highlight class="normal">byte_width_,<sp/>0);</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_base_binary_builder_1a8b28644573282a55a360478ba160fa8f" kindref="member">Reset</ref>()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_base_binary_builder_1a39a192382af4e821b8c7686bb0b0f3f7" kindref="member">Resize</ref>(int64_t<sp/><ref refid="classarrow_1_1_array_builder_1a0236e815af8f62c98bd612eea219cd73" kindref="member">capacity</ref>)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_base_binary_builder_1a083a647ec622d5da23981aaa7ad77fe6" kindref="member">FinishInternal</ref>(std::shared_ptr&lt;ArrayData&gt;*<sp/>out)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_array_builder_1a67b2227edb4b51bc44425f1c8a439819" kindref="member">ArrayBuilder::Finish</ref>;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469" refid="classarrow_1_1_fixed_size_binary_builder_1a2f6ef013df137b7077e270539104466f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_fixed_size_binary_builder_1a2f6ef013df137b7077e270539104466f" kindref="member">Finish</ref>(std::shared_ptr&lt;FixedSizeBinaryArray&gt;*<sp/>out)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_array_builder_1a9f90da9e81d9db4bc9277458ba70d46a" kindref="member">FinishTyped</ref>(out);<sp/>}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="472" refid="classarrow_1_1_fixed_size_binary_builder_1a9d4ee907329c71703a139b803a4ba4fe" refkind="member"><highlight class="normal"><sp/><sp/>int64_t<sp/><ref refid="classarrow_1_1_fixed_size_binary_builder_1a9d4ee907329c71703a139b803a4ba4fe" kindref="member">value_data_length</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>byte_builder_.length();<sp/>}</highlight></codeline>
<codeline lineno="473"><highlight class="normal"></highlight></codeline>
<codeline lineno="474" refid="classarrow_1_1_fixed_size_binary_builder_1ae91da8cbfd27487ea829928c2d46bd62" refkind="member"><highlight class="normal"><sp/><sp/>int32_t<sp/><ref refid="classarrow_1_1_fixed_size_binary_builder_1ae91da8cbfd27487ea829928c2d46bd62" kindref="member">byte_width</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>byte_width_;<sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/><ref refid="classarrow_1_1_base_binary_builder_1a58fb7bdf885da9f2ffaeb50776852a9c" kindref="member">GetValue</ref>(int64_t<sp/>i)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><ref refid="namespaceparquet_1af53c3c244055490d5dd385dd8a874540" kindref="member">util::string_view</ref><sp/><ref refid="classarrow_1_1_base_binary_builder_1ab131a922dbb14ede1223714ff46b8d32" kindref="member">GetView</ref>(int64_t<sp/>i)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="485"><highlight class="normal"></highlight></codeline>
<codeline lineno="486" refid="classarrow_1_1_fixed_size_binary_builder_1ae1398d12baa14b6ed3b3b95b7e12cfb2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>int64_t<sp/><ref refid="classarrow_1_1_fixed_size_binary_builder_1ae1398d12baa14b6ed3b3b95b7e12cfb2" kindref="member">memory_limit</ref>()<sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::numeric_limits&lt;int64_t&gt;::max()<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490" refid="classarrow_1_1_fixed_size_binary_builder_1a76883cc379d8422428762e902bed364c" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;DataType&gt;<sp/><ref refid="classarrow_1_1_fixed_size_binary_builder_1a76883cc379d8422428762e902bed364c" kindref="member">type</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="group__type-factories_1gacaf5c20d8caef81e01621a3cad7cc9c2" kindref="member">fixed_size_binary</ref>(byte_width_);</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="495" refid="classarrow_1_1_fixed_size_binary_builder_1a2ca6f2ee6431aa975c45e39e3fc96de8" refkind="member"><highlight class="normal"><sp/><sp/>int32_t<sp/><ref refid="classarrow_1_1_fixed_size_binary_builder_1a2ca6f2ee6431aa975c45e39e3fc96de8" kindref="member">byte_width_</ref>;</highlight></codeline>
<codeline lineno="496" refid="classarrow_1_1_fixed_size_binary_builder_1a6654f531fb3815787771d127094a5006" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_buffer_builder" kindref="compound">BufferBuilder</ref><sp/><ref refid="classarrow_1_1_fixed_size_binary_builder_1a6654f531fb3815787771d127094a5006" kindref="member">byte_builder_</ref>;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="501" refid="classarrow_1_1_fixed_size_binary_builder_1a812c5fc0fcf199b8261d57f197799d14" refkind="member"><highlight class="normal"><sp/><sp/>uint8_t*<sp/><ref refid="classarrow_1_1_fixed_size_binary_builder_1a812c5fc0fcf199b8261d57f197799d14" kindref="member">GetMutableValue</ref>(int64_t<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t*<sp/>data_ptr<sp/>=<sp/>byte_builder_.<ref refid="classarrow_1_1_buffer_builder_1a32d1ed9e7d7b859475410aeb49384ed8" kindref="member">mutable_data</ref>();</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_ptr<sp/>+<sp/>i<sp/>*<sp/>byte_width_;</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CheckValueSize(int64_t<sp/>size);</highlight></codeline>
<codeline lineno="507"><highlight class="normal">};</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Chunked<sp/>builders:<sp/>build<sp/>a<sp/>sequence<sp/>of<sp/>BinaryArray<sp/>or<sp/>StringArray<sp/>that<sp/>are</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight><highlight class="comment">//<sp/>limited<sp/>to<sp/>a<sp/>particular<sp/>size<sp/>(to<sp/>the<sp/>upper<sp/>limit<sp/>of<sp/>2GB)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/>ChunkedBinaryBuilder<sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ChunkedBinaryBuilder(int32_t<sp/>max_chunk_value_length,</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/>pool<sp/>=<sp/><ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">default_memory_pool</ref>());</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>ChunkedBinaryBuilder(int32_t<sp/>max_chunk_value_length,<sp/>int32_t<sp/>max_chunk_length,</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/>pool<sp/>=<sp/><ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">default_memory_pool</ref>());</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~ChunkedBinaryBuilder()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_base_binary_builder_1a2879a4313c6e3076581c42c3cd3e0f32" kindref="member">Append</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>value,<sp/>int32_t<sp/><ref refid="classarrow_1_1_array_builder_1a296ac75b9b3d877192e37681c66513ba" kindref="member">length</ref>)<sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="macros_8h_1a6f2ee7ad52872edb915cf48e163ac99c" kindref="member">ARROW_PREDICT_FALSE</ref>(length<sp/>+<sp/>builder_-&gt;value_data_length()<sp/>&gt;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>max_chunk_value_length_))<sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(builder_-&gt;value_data_length()<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>current<sp/>item<sp/>is<sp/>larger<sp/>than<sp/>max_chunk_size_;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>chunk<sp/>will<sp/>be<sp/>oversize<sp/>and<sp/>hold<sp/>*only*<sp/>this<sp/>item</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(builder_-&gt;Append(value,<sp/>length));</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NextChunk();</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>current<sp/>item<sp/>would<sp/>cause<sp/>builder_-&gt;value_data_length()<sp/>to<sp/>exceed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>max_chunk_size_,<sp/>so<sp/>finish<sp/>this<sp/>chunk<sp/>and<sp/>append<sp/>the<sp/>current<sp/>item<sp/>to<sp/>the<sp/>next</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>chunk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(NextChunk());</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_base_binary_builder_1a2879a4313c6e3076581c42c3cd3e0f32" kindref="member">Append</ref>(value,<sp/>length);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="macros_8h_1a6f2ee7ad52872edb915cf48e163ac99c" kindref="member">ARROW_PREDICT_FALSE</ref>(builder_-&gt;length()<sp/>==<sp/>max_chunk_length_))<sp/>{</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>current<sp/>item<sp/>would<sp/>cause<sp/>builder_-&gt;length()<sp/>to<sp/>exceed<sp/>max_chunk_length_,<sp/>so</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>finish<sp/>this<sp/>chunk<sp/>and<sp/>append<sp/>the<sp/>current<sp/>item<sp/>to<sp/>the<sp/>next<sp/>chunk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(NextChunk());</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>builder_-&gt;Append(value,<sp/>length);</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_base_binary_builder_1a2879a4313c6e3076581c42c3cd3e0f32" kindref="member">Append</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespaceparquet_1af53c3c244055490d5dd385dd8a874540" kindref="member">util::string_view</ref>&amp;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_base_binary_builder_1a2879a4313c6e3076581c42c3cd3e0f32" kindref="member">Append</ref>(reinterpret_cast&lt;const<sp/>uint8_t*&gt;(value.data()),</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;int32_t&gt;(value.size()));</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_base_binary_builder_1adc7a7beaf773747268a8b51d163ad801" kindref="member">AppendNull</ref>()<sp/>{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="macros_8h_1a6f2ee7ad52872edb915cf48e163ac99c" kindref="member">ARROW_PREDICT_FALSE</ref>(builder_-&gt;length()<sp/>==<sp/>max_chunk_length_))<sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(NextChunk());</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>builder_-&gt;AppendNull();</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_array_builder_1afe8448fda39a8529a119bde5ba7ba119" kindref="member">Reserve</ref>(int64_t<sp/>values);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_array_builder_1a67b2227edb4b51bc44425f1c8a439819" kindref="member">Finish</ref>(<ref refid="namespacearrow_1ad77c54b51dac02d857f3a26d11ed58b3" kindref="member">ArrayVector</ref>*<sp/>out);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>NextChunk();</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>maximum<sp/>total<sp/>character<sp/>data<sp/>size<sp/>per<sp/>chunk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/>int64_t<sp/>max_chunk_value_length_;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>maximum<sp/>elements<sp/>allowed<sp/>per<sp/>chunk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>int64_t<sp/>max_chunk_length_<sp/>=<sp/><ref refid="namespacearrow_1ab64d5a2a0d35fbe0ae87fc18d2a5c0ee" kindref="member">kListMaximumElements</ref>;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>when<sp/>Reserve()<sp/>would<sp/>cause<sp/>builder_<sp/>to<sp/>exceed<sp/>its<sp/>max_chunk_length_,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>to<sp/>extra_capacity_<sp/>instead<sp/>and<sp/>wait<sp/>to<sp/>reserve<sp/>until<sp/>the<sp/>next<sp/>chunk</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/>int64_t<sp/>extra_capacity_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;BinaryBuilder&gt;<sp/>builder_;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Array&gt;&gt;<sp/>chunks_;</highlight></codeline>
<codeline lineno="581"><highlight class="normal">};</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/>ChunkedStringBuilder<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>ChunkedBinaryBuilder<sp/>{</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>ChunkedBinaryBuilder::ChunkedBinaryBuilder;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_array_builder_1a67b2227edb4b51bc44425f1c8a439819" kindref="member">Finish</ref>(<ref refid="namespacearrow_1ad77c54b51dac02d857f3a26d11ed58b3" kindref="member">ArrayVector</ref>*<sp/>out)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="588"><highlight class="normal">};</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight></codeline>
<codeline lineno="592"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>arrow</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/arrow/cpp/src/arrow/array/builder_binary.h"/>
  </compounddef>
</doxygen>
