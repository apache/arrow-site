<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structarrow_1_1stl_1_1_schema_from_tuple_3_01_tuple_00_010_01_4" kind="struct" language="C++" prot="public">
    <compoundname>arrow::stl::SchemaFromTuple&lt; Tuple, 0 &gt;</compoundname>
    <includes refid="stl_8h" local="no">arrow/stl.h</includes>
    <templateparamlist>
      <param>
        <type>typename Tuple</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structarrow_1_1stl_1_1_schema_from_tuple_3_01_tuple_00_010_01_4_1a0ac887d24bb38be781208ef6432acf72" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt; &gt;</type>
        <definition>static std::vector&lt;std::shared_ptr&lt;Field&gt; &gt; arrow::stl::SchemaFromTuple&lt; Tuple, 0 &gt;::MakeSchemaRecursion</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;names)</argsstring>
        <name>MakeSchemaRecursion</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>names</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/stl.h" line="277" column="1" bodyfile="/arrow/cpp/src/arrow/stl.h" bodystart="277" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1stl_1_1_schema_from_tuple_3_01_tuple_00_010_01_4_1a5e674272f343bd97fe3be84570171670" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename NamesTuple</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt; &gt;</type>
        <definition>static std::vector&lt;std::shared_ptr&lt;Field&gt; &gt; arrow::stl::SchemaFromTuple&lt; Tuple, 0 &gt;::MakeSchemaRecursionT</definition>
        <argsstring>(const NamesTuple &amp;names)</argsstring>
        <name>MakeSchemaRecursionT</name>
        <param>
          <type>const NamesTuple &amp;</type>
          <declname>names</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/stl.h" line="285" column="1" bodyfile="/arrow/cpp/src/arrow/stl.h" bodystart="285" bodyend="290"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/arrow/stl.h" line="276" column="1" bodyfile="/arrow/cpp/src/arrow/stl.h" bodystart="276" bodyend="291"/>
    <listofallmembers>
      <member refid="structarrow_1_1stl_1_1_schema_from_tuple_3_01_tuple_00_010_01_4_1a0ac887d24bb38be781208ef6432acf72" prot="public" virt="non-virtual"><scope>arrow::stl::SchemaFromTuple&lt; Tuple, 0 &gt;</scope><name>MakeSchemaRecursion</name></member>
      <member refid="structarrow_1_1stl_1_1_schema_from_tuple_3_01_tuple_00_010_01_4_1a5e674272f343bd97fe3be84570171670" prot="public" virt="non-virtual"><scope>arrow::stl::SchemaFromTuple&lt; Tuple, 0 &gt;</scope><name>MakeSchemaRecursionT</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
