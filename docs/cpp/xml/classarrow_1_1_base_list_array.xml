<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_base_list_array" kind="class" language="C++" prot="public">
    <compoundname>arrow::BaseListArray</compoundname>
    <basecompoundref refid="classarrow_1_1_array" prot="public" virt="non-virtual">arrow::Array</basecompoundref>
    <includes refid="array_8h" local="no">arrow/array.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>TYPE</declname>
        <defname>TYPE</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classarrow_1_1_base_list_array_1a696a01784c7bad9658a4f4580842f09a" prot="public" static="no">
        <type>TYPE</type>
        <definition>using arrow::BaseListArray&lt; TYPE &gt;::TypeClass =  TYPE</definition>
        <argsstring></argsstring>
        <name>TypeClass</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="579" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="579" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classarrow_1_1_base_list_array_1a2edc91b360b5147b82d5a42daffd954c" prot="public" static="no">
        <type>typename TypeClass::offset_type</type>
        <definition>using arrow::BaseListArray&lt; TYPE &gt;::offset_type =  typename TypeClass::offset_type</definition>
        <argsstring></argsstring>
        <name>offset_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="580" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="580" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classarrow_1_1_base_list_array_1a1a4b076880f003e0e091834b057935a5" prot="protected" static="no" mutable="no">
        <type>const <ref refid="classarrow_1_1_base_list_array_1a696a01784c7bad9658a4f4580842f09a" kindref="member">TypeClass</ref> *</type>
        <definition>const TypeClass* arrow::BaseListArray&lt; TYPE &gt;::list_type_</definition>
        <argsstring></argsstring>
        <name>list_type_</name>
        <initializer>= <ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="610" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="610" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_base_list_array_1a0a23bd7a40ce3eb96a7ea61508d42ec8" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Array&gt; arrow::BaseListArray&lt; TYPE &gt;::values_</definition>
        <argsstring></argsstring>
        <name>values_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="611" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="611" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_base_list_array_1a71410a0160aa5c3e6e8e68e207f7eeec" prot="protected" static="no" mutable="no">
        <type>const <ref refid="classarrow_1_1_base_list_array_1a2edc91b360b5147b82d5a42daffd954c" kindref="member">offset_type</ref> *</type>
        <definition>const offset_type* arrow::BaseListArray&lt; TYPE &gt;::raw_value_offsets_</definition>
        <argsstring></argsstring>
        <name>raw_value_offsets_</name>
        <initializer>= <ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="612" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="612" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1_base_list_array_1a1679d66c5b9c09efe11ccc442c264214" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classarrow_1_1_base_list_array_1a696a01784c7bad9658a4f4580842f09a" kindref="member">TypeClass</ref> *</type>
        <definition>const TypeClass* arrow::BaseListArray&lt; TYPE &gt;::list_type</definition>
        <argsstring>() const</argsstring>
        <name>list_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="582" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="582" bodyend="582"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_list_array_1a9a1ed59bfbcc91df5fa44892b2597609" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Array&gt; arrow::BaseListArray&lt; TYPE &gt;::values</definition>
        <argsstring>() const</argsstring>
        <name>values</name>
        <briefdescription>
<para>Return array object containing the list&apos;s values. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="585" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="585" bodyend="585"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_list_array_1aa5f74bf28ec1a493ce54525ca7055c1f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Buffer&gt; arrow::BaseListArray&lt; TYPE &gt;::value_offsets</definition>
        <argsstring>() const</argsstring>
        <name>value_offsets</name>
        <briefdescription>
<para>Note that this buffer does not account for any slice offset. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="588" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="588" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_list_array_1ad4fe8a53d1a06ce4942210223ce50564" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::BaseListArray&lt; TYPE &gt;::value_type</definition>
        <argsstring>() const</argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="590" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="590" bodyend="590"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_list_array_1ab29ce049771d7ceb0756fe1f835f51d1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classarrow_1_1_base_list_array_1a2edc91b360b5147b82d5a42daffd954c" kindref="member">offset_type</ref> *</type>
        <definition>const offset_type* arrow::BaseListArray&lt; TYPE &gt;::raw_value_offsets</definition>
        <argsstring>() const</argsstring>
        <name>raw_value_offsets</name>
        <briefdescription>
<para>Return pointer to raw value offsets accounting for any slice offset. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="593" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="593" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_list_array_1a38821c957c8feaee60734c7aff8763d7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_base_list_array_1a2edc91b360b5147b82d5a42daffd954c" kindref="member">offset_type</ref></type>
        <definition>offset_type arrow::BaseListArray&lt; TYPE &gt;::value_offset</definition>
        <argsstring>(int64_t i) const</argsstring>
        <name>value_offset</name>
        <param>
          <type>int64_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="598" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="598" bodyend="600"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_list_array_1ae5acff45549424221ae00865bc674ff2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_base_list_array_1a2edc91b360b5147b82d5a42daffd954c" kindref="member">offset_type</ref></type>
        <definition>offset_type arrow::BaseListArray&lt; TYPE &gt;::value_length</definition>
        <argsstring>(int64_t i) const</argsstring>
        <name>value_length</name>
        <param>
          <type>int64_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="601" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="601" bodyend="604"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_base_list_array_1a37af8ed233357849d9c76495106943c6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Array&gt; arrow::BaseListArray&lt; TYPE &gt;::value_slice</definition>
        <argsstring>(int64_t i) const</argsstring>
        <name>value_slice</name>
        <param>
          <type>int64_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="605" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="605" bodyend="607"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base class for variable-sized list arrays, regardless of offset size. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="227">
        <label>arrow::BaseListArray&lt; TYPE &gt;</label>
        <link refid="classarrow_1_1_base_list_array"/>
        <childnode refid="228" relation="public-inheritance">
        </childnode>
      </node>
      <node id="228">
        <label>arrow::Array</label>
        <link refid="classarrow_1_1_array"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="229">
        <label>arrow::BaseListArray&lt; TYPE &gt;</label>
        <link refid="classarrow_1_1_base_list_array"/>
        <childnode refid="230" relation="public-inheritance">
        </childnode>
      </node>
      <node id="230">
        <label>arrow::Array</label>
        <link refid="classarrow_1_1_array"/>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/array.h" line="577" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="577" bodyend="613"/>
    <listofallmembers>
      <member refid="classarrow_1_1_array_1a168f3ec5c96688dadeaf015692e4bef8" prot="public" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>Accept</name></member>
      <member refid="classarrow_1_1_array_1a381e6469686eccd2545cf1dc171f6cb7" prot="public" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>ApproxEquals</name></member>
      <member refid="classarrow_1_1_array_1a2ed35161e2e2200bf4dcadb6ff11d7fb" prot="public" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>ApproxEquals</name></member>
      <member refid="classarrow_1_1_array_1ae44d3c2fae3a8578fe829da20c6732f8" prot="protected" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>Array</name></member>
      <member refid="classarrow_1_1_array_1aeca84e9b3a1f1e6e3f83a61c90e376a9" prot="public" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>data</name></member>
      <member refid="classarrow_1_1_array_1a2631dce1d5868216cba0a140e81ef14e" prot="protected" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>data_</name></member>
      <member refid="classarrow_1_1_array_1a95ff1c7489e9d2fd5ff52fde1b8b5c46" prot="public" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>Diff</name></member>
      <member refid="classarrow_1_1_array_1a686cf58bab513d8ecfe3a285f4562eab" prot="public" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_array_1a99913841c11eb73c61a25c018f57ca40" prot="public" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_array_1a18c61cd4c8c158a30f30023eabc83acb" prot="public" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>IsNull</name></member>
      <member refid="classarrow_1_1_array_1ae554bfb313cd6b161f63fb2966dbd662" prot="public" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>IsValid</name></member>
      <member refid="classarrow_1_1_array_1a49c7fb3f73d2d43e7338591c5a8bd8bf" prot="public" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>length</name></member>
      <member refid="classarrow_1_1_base_list_array_1a1679d66c5b9c09efe11ccc442c264214" prot="public" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>list_type</name></member>
      <member refid="classarrow_1_1_base_list_array_1a1a4b076880f003e0e091834b057935a5" prot="protected" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>list_type_</name></member>
      <member refid="classarrow_1_1_array_1a76c4756ac85b29f9135064d68d2ef908" prot="public" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>null_bitmap</name></member>
      <member refid="classarrow_1_1_array_1a7a8838fbc97b9b3b8ca15cb163b2027c" prot="public" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>null_bitmap_data</name></member>
      <member refid="classarrow_1_1_array_1aed59d9e8608229ff3808983cdc908ccd" prot="protected" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>null_bitmap_data_</name></member>
      <member refid="classarrow_1_1_array_1a0537d3b69a889b951e88be2fe9f3d96a" prot="public" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>null_count</name></member>
      <member refid="classarrow_1_1_array_1a183e69c91c531609f42a29b593119d58" prot="public" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>num_fields</name></member>
      <member refid="classarrow_1_1_array_1a1a0c6c1aa06cffd1dcb3813f0d24b2fd" prot="public" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>offset</name></member>
      <member refid="classarrow_1_1_base_list_array_1a2edc91b360b5147b82d5a42daffd954c" prot="public" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>offset_type</name></member>
      <member refid="classarrow_1_1_array_1ace5ac1affa59422d70a8b3f6929b70bc" prot="public" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>RangeEquals</name></member>
      <member refid="classarrow_1_1_array_1a537467bcecb4471b18d3271f14ca9ad2" prot="public" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>RangeEquals</name></member>
      <member refid="classarrow_1_1_array_1acf138d427e7f8a8c56cac7f9d9e64db3" prot="public" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>RangeEquals</name></member>
      <member refid="classarrow_1_1_array_1a28f8f8d92439489bbd1727392123b0f7" prot="public" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>RangeEquals</name></member>
      <member refid="classarrow_1_1_base_list_array_1ab29ce049771d7ceb0756fe1f835f51d1" prot="public" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>raw_value_offsets</name></member>
      <member refid="classarrow_1_1_base_list_array_1a71410a0160aa5c3e6e8e68e207f7eeec" prot="protected" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>raw_value_offsets_</name></member>
      <member refid="classarrow_1_1_array_1a7053d3600bccd9cd34fcb6f5470a75c1" prot="protected" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>SetData</name></member>
      <member refid="classarrow_1_1_array_1ae32f72c78fe10ce17f0a817e302e17d1" prot="public" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>Slice</name></member>
      <member refid="classarrow_1_1_array_1a5cf4c3330e850670aa52dab3b21869ea" prot="public" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>Slice</name></member>
      <member refid="classarrow_1_1_array_1a41c7af0e40ac55f2ce11785fea3e051e" prot="public" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>ToString</name></member>
      <member refid="classarrow_1_1_array_1a635a694fbadb0bfa731beb97df2ef7ea" prot="public" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>type</name></member>
      <member refid="classarrow_1_1_array_1a155d9d827415438f976e3cb31e0a55f6" prot="public" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>type_id</name></member>
      <member refid="classarrow_1_1_base_list_array_1a696a01784c7bad9658a4f4580842f09a" prot="public" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>TypeClass</name></member>
      <member refid="classarrow_1_1_array_1ad62bad8fde2bb8fbd5a52df3fa4bd56c" prot="public" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>Validate</name></member>
      <member refid="classarrow_1_1_array_1a793321da66d2d1839e6c89a956e4cb07" prot="public" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>ValidateFull</name></member>
      <member refid="classarrow_1_1_base_list_array_1ae5acff45549424221ae00865bc674ff2" prot="public" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>value_length</name></member>
      <member refid="classarrow_1_1_base_list_array_1a38821c957c8feaee60734c7aff8763d7" prot="public" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>value_offset</name></member>
      <member refid="classarrow_1_1_base_list_array_1aa5f74bf28ec1a493ce54525ca7055c1f" prot="public" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>value_offsets</name></member>
      <member refid="classarrow_1_1_base_list_array_1a37af8ed233357849d9c76495106943c6" prot="public" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>value_slice</name></member>
      <member refid="classarrow_1_1_base_list_array_1ad4fe8a53d1a06ce4942210223ce50564" prot="public" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>value_type</name></member>
      <member refid="classarrow_1_1_base_list_array_1a9a1ed59bfbcc91df5fa44892b2597609" prot="public" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>values</name></member>
      <member refid="classarrow_1_1_base_list_array_1a0a23bd7a40ce3eb96a7ea61508d42ec8" prot="protected" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>values_</name></member>
      <member refid="classarrow_1_1_array_1aa2b5f248c09a41c089e1fbc911beecb0" prot="public" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>View</name></member>
      <member refid="classarrow_1_1_array_1ad015904c8c6e5e2513c791fb577f2679" prot="public" virt="non-virtual"><scope>arrow::BaseListArray</scope><name>View</name></member>
      <member refid="classarrow_1_1_array_1addd582eec9488bca2b3379b71fef6ce5" prot="public" virt="virtual"><scope>arrow::BaseListArray</scope><name>~Array</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
