<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1fs_1_1_s3_file_system" kind="class" language="C++" prot="public">
    <compoundname>arrow::fs::S3FileSystem</compoundname>
    <basecompoundref refid="classarrow_1_1fs_1_1_file_system" prot="public" virt="non-virtual">arrow::fs::FileSystem</basecompoundref>
    <includes refid="s3fs_8h" local="no">arrow/filesystem/s3fs.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classarrow_1_1fs_1_1_s3_file_system_1a616777549ae51f29fb1dc83e10a1773a" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; Impl &gt;</type>
        <definition>std::unique_ptr&lt;Impl&gt; arrow::fs::S3FileSystem::impl_</definition>
        <argsstring></argsstring>
        <name>impl_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/s3fs.h" line="148" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/s3fs.h" bodystart="147" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1fs_1_1_s3_file_system_1ab26f35123814613ea691541d8ed0ba18" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::fs::S3FileSystem::~S3FileSystem</definition>
        <argsstring>() override</argsstring>
        <name>~S3FileSystem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/s3fs.h" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_s3_file_system_1a7e22fc95a6907be018a442aa6128ae7d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string arrow::fs::S3FileSystem::type_name</definition>
        <argsstring>() const override</argsstring>
        <name>type_name</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1a14c1160fbffc2dcb72f2e16c32329bc7">type_name</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/s3fs.h" line="93" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/s3fs.h" bodystart="93" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_s3_file_system_1aceb06e56c6b321d334505eb49b101ccb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structarrow_1_1fs_1_1_s3_options" kindref="compound">S3Options</ref></type>
        <definition>S3Options arrow::fs::S3FileSystem::options</definition>
        <argsstring>() const</argsstring>
        <name>options</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/s3fs.h" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_s3_file_system_1af1c1056ddafd87f4674bd2574e0cf63b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool arrow::fs::S3FileSystem::Equals</definition>
        <argsstring>(const FileSystem &amp;other) const override</argsstring>
        <name>Equals</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1ac0a0a670a467fa073bb02b8581731262">Equals</reimplements>
        <param>
          <type>const <ref refid="classarrow_1_1fs_1_1_file_system" kindref="compound">FileSystem</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/s3fs.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_s3_file_system_1accc79bb6781e8ec8b8b4a4c01d7dfb0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; <ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref> &gt;</type>
        <definition>Result&lt;FileInfo&gt; arrow::fs::S3FileSystem::GetFileInfo</definition>
        <argsstring>(const std::string &amp;path) override</argsstring>
        <name>GetFileInfo</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1ae883cb9d3a7b0523ebb346e5851f6aa9">GetFileInfo</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Get info for the given target. </para>        </briefdescription>
        <detaileddescription>
<para>Any symlink is automatically dereferenced, recursively. A nonexistent or unreachable file returns an Ok status and has a FileType of value NotFound. An error status indicates a truly exceptional condition (low-level I/O error, etc.). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/s3fs.h" line="101" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_s3_file_system_1a8290eb500c8e74db7d16a0623875ef01" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::vector&lt; <ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref> &gt; &gt;</type>
        <definition>Result&lt;std::vector&lt;FileInfo&gt; &gt; arrow::fs::S3FileSystem::GetFileInfo</definition>
        <argsstring>(const FileSelector &amp;select) override</argsstring>
        <name>GetFileInfo</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1ad472382e0a5e63010e58eb511afb9430">GetFileInfo</reimplements>
        <param>
          <type>const <ref refid="structarrow_1_1fs_1_1_file_selector" kindref="compound">FileSelector</ref> &amp;</type>
          <declname>select</declname>
        </param>
        <briefdescription>
<para>Same, according to a selector. </para>        </briefdescription>
        <detaileddescription>
<para>The selector&apos;s base directory will not be part of the results, even if it exists. If it doesn&apos;t exist, see <computeroutput><ref refid="structarrow_1_1fs_1_1_file_selector_1aead1e24f5aa8bb7a3e893436cde83ea7" kindref="member">FileSelector::allow_not_found</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/s3fs.h" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_s3_file_system_1abd68e1af44414cf073e95a55feb8a962" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::fs::S3FileSystem::CreateDir</definition>
        <argsstring>(const std::string &amp;path, bool recursive=true) override</argsstring>
        <name>CreateDir</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1aff4191ded194fc0d473608264b05ee86">CreateDir</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>recursive</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Create a directory and subdirectories. </para>        </briefdescription>
        <detaileddescription>
<para>This function succeeds if the directory already exists. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/s3fs.h" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_s3_file_system_1a2b2469fdcb68f5d04c0121605dc485d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::fs::S3FileSystem::DeleteDir</definition>
        <argsstring>(const std::string &amp;path) override</argsstring>
        <name>DeleteDir</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1aa6d2d675596ee51935cc4baa9d30ea72">DeleteDir</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Delete a directory and its contents, recursively. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/s3fs.h" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_s3_file_system_1af5e09fcf57e92e6f3b9b9facba51a9ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::fs::S3FileSystem::DeleteDirContents</definition>
        <argsstring>(const std::string &amp;path) override</argsstring>
        <name>DeleteDirContents</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1a908dd35485e74e91d420adf4b3eb80b2">DeleteDirContents</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Delete a directory&apos;s contents, recursively. </para>        </briefdescription>
        <detaileddescription>
<para>Like DeleteDir, but doesn&apos;t delete the directory itself. Passing an empty path (&quot;&quot;) will wipe the entire filesystem tree. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/s3fs.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_s3_file_system_1ae9ca4e0ba31387e8a806e627d1eef32b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::fs::S3FileSystem::DeleteFile</definition>
        <argsstring>(const std::string &amp;path) override</argsstring>
        <name>DeleteFile</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1ac9698e825f1abbe2497850c7d25efa1c">DeleteFile</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Delete a file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/s3fs.h" line="109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_s3_file_system_1a356897ccaf9112c20539f37dea0fe8a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::fs::S3FileSystem::Move</definition>
        <argsstring>(const std::string &amp;src, const std::string &amp;dest) override</argsstring>
        <name>Move</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1a3ab3b162b3ea640076bbd46702735419">Move</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
<para>Move / rename a file or directory. </para>        </briefdescription>
        <detaileddescription>
<para>If the destination exists:<itemizedlist>
<listitem><para>if it is a non-empty directory, an error is returned</para></listitem><listitem><para>otherwise, if it has the same type as the source, it is replaced</para></listitem><listitem><para>otherwise, behavior is unspecified (implementation-dependent). </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/s3fs.h" line="111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_s3_file_system_1a3cafd61714b93cbb1a32ae29be2b5f3f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::fs::S3FileSystem::CopyFile</definition>
        <argsstring>(const std::string &amp;src, const std::string &amp;dest) override</argsstring>
        <name>CopyFile</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1a7222bd63bfcb1ac2a48367ce9e5c9667">CopyFile</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
<para>Copy a file. </para>        </briefdescription>
        <detaileddescription>
<para>If the destination exists and is a directory, an error is returned. Otherwise, it is replaced. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/s3fs.h" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_s3_file_system_1a741106f97cea2c11ea908da345482990" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_input_stream" kindref="compound">io::InputStream</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;io::InputStream&gt; &gt; arrow::fs::S3FileSystem::OpenInputStream</definition>
        <argsstring>(const std::string &amp;path) override</argsstring>
        <name>OpenInputStream</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1a4baf948a7ebca79d1b085942f32ba65f">OpenInputStream</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Create a sequential input stream for reading from a S3 object. </para>        </briefdescription>
        <detaileddescription>
<para>NOTE: Reads from the stream will be synchronous and unbuffered. You way want to wrap the stream in a BufferedInputStream or use a custom readahead strategy to avoid idle waits. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/s3fs.h" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_s3_file_system_1a37b3809525d4529f62d629dc4d24e12b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_random_access_file" kindref="compound">io::RandomAccessFile</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;io::RandomAccessFile&gt; &gt; arrow::fs::S3FileSystem::OpenInputFile</definition>
        <argsstring>(const std::string &amp;path) override</argsstring>
        <name>OpenInputFile</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1a6e401fc8e1b55d66ab5045845dc3fdae">OpenInputFile</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Create a random access file for reading from a S3 object. </para>        </briefdescription>
        <detaileddescription>
<para>See OpenInputStream for performance notes. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/s3fs.h" line="126" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_s3_file_system_1a807850bfeb056933f043f4cf0b9bd546" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_output_stream" kindref="compound">io::OutputStream</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;io::OutputStream&gt; &gt; arrow::fs::S3FileSystem::OpenOutputStream</definition>
        <argsstring>(const std::string &amp;path) override</argsstring>
        <name>OpenOutputStream</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1ae4ebffb159bef1199092d79c05703415">OpenOutputStream</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Create a sequential output stream for writing to a S3 object. </para>        </briefdescription>
        <detaileddescription>
<para>NOTE: Writes to the stream will be buffered. Depending on <ref refid="structarrow_1_1fs_1_1_s3_options_1a6ea875c0f46c26e82b68211042d2b7b8" kindref="member">S3Options.background_writes</ref>, they can be synchronous or not. It is recommended to enable background_writes unless you prefer implementing your own background execution strategy. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/s3fs.h" line="135" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_s3_file_system_1a5c496264ed0d2c7469af8c3d3ed04544" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_output_stream" kindref="compound">io::OutputStream</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;io::OutputStream&gt; &gt; arrow::fs::S3FileSystem::OpenAppendStream</definition>
        <argsstring>(const std::string &amp;path) override</argsstring>
        <name>OpenAppendStream</name>
        <reimplements refid="classarrow_1_1fs_1_1_file_system_1ada6e16933e3f62a36cb8ebbcb9c94c46">OpenAppendStream</reimplements>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Open an output stream for appending. </para>        </briefdescription>
        <detaileddescription>
<para>If the target doesn&apos;t exist, a new empty file is created. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/s3fs.h" line="138" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1fs_1_1_s3_file_system_1a1ebca67b5b548d60d1a1472eebe5d18f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1fs_1_1_s3_file_system" kindref="compound">S3FileSystem</ref> &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;S3FileSystem&gt; &gt; arrow::fs::S3FileSystem::Make</definition>
        <argsstring>(const S3Options &amp;options)</argsstring>
        <name>Make</name>
        <param>
          <type>const <ref refid="structarrow_1_1fs_1_1_s3_options" kindref="compound">S3Options</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="classarrow_1_1fs_1_1_s3_file_system" kindref="compound">S3FileSystem</ref> instance from the given options. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/s3fs.h" line="142" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classarrow_1_1fs_1_1_s3_file_system_1a69e48125af31dd127dcc769046ed167c" prot="protected" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::fs::S3FileSystem::S3FileSystem</definition>
        <argsstring>(const S3Options &amp;options)</argsstring>
        <name>S3FileSystem</name>
        <param>
          <type>const <ref refid="structarrow_1_1fs_1_1_s3_options" kindref="compound">S3Options</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/s3fs.h" line="145" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>S3-backed <ref refid="classarrow_1_1fs_1_1_file_system" kindref="compound">FileSystem</ref> implementation. </para>    </briefdescription>
    <detaileddescription>
<para>Some implementation notes:<itemizedlist>
<listitem><para>buckets are special and the operations available on them may be limited or more expensive than desired. </para></listitem></itemizedlist>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="3940">
        <label>std::enable_shared_from_this&lt; FileSystem &gt;</label>
      </node>
      <node id="3939">
        <label>arrow::fs::FileSystem</label>
        <link refid="classarrow_1_1fs_1_1_file_system"/>
        <childnode refid="3940" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3938">
        <label>arrow::fs::S3FileSystem</label>
        <link refid="classarrow_1_1fs_1_1_s3_file_system"/>
        <childnode refid="3939" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3943">
        <label>std::enable_shared_from_this&lt; FileSystem &gt;</label>
      </node>
      <node id="3942">
        <label>arrow::fs::FileSystem</label>
        <link refid="classarrow_1_1fs_1_1_file_system"/>
        <childnode refid="3943" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3941">
        <label>arrow::fs::S3FileSystem</label>
        <link refid="classarrow_1_1fs_1_1_s3_file_system"/>
        <childnode refid="3942" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/filesystem/s3fs.h" line="89" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/s3fs.h" bodystart="89" bodyend="149"/>
    <listofallmembers>
      <member refid="classarrow_1_1fs_1_1_s3_file_system_1a3cafd61714b93cbb1a32ae29be2b5f3f" prot="public" virt="virtual"><scope>arrow::fs::S3FileSystem</scope><name>CopyFile</name></member>
      <member refid="classarrow_1_1fs_1_1_s3_file_system_1abd68e1af44414cf073e95a55feb8a962" prot="public" virt="virtual"><scope>arrow::fs::S3FileSystem</scope><name>CreateDir</name></member>
      <member refid="classarrow_1_1fs_1_1_s3_file_system_1a2b2469fdcb68f5d04c0121605dc485d9" prot="public" virt="virtual"><scope>arrow::fs::S3FileSystem</scope><name>DeleteDir</name></member>
      <member refid="classarrow_1_1fs_1_1_s3_file_system_1af5e09fcf57e92e6f3b9b9facba51a9ab" prot="public" virt="virtual"><scope>arrow::fs::S3FileSystem</scope><name>DeleteDirContents</name></member>
      <member refid="classarrow_1_1fs_1_1_s3_file_system_1ae9ca4e0ba31387e8a806e627d1eef32b" prot="public" virt="virtual"><scope>arrow::fs::S3FileSystem</scope><name>DeleteFile</name></member>
      <member refid="classarrow_1_1fs_1_1_file_system_1aabbcfc55e53a8bcf3d88ece0b64fb400" prot="public" virt="virtual"><scope>arrow::fs::S3FileSystem</scope><name>DeleteFiles</name></member>
      <member refid="classarrow_1_1fs_1_1_s3_file_system_1af1c1056ddafd87f4674bd2574e0cf63b" prot="public" virt="virtual"><scope>arrow::fs::S3FileSystem</scope><name>Equals</name></member>
      <member refid="classarrow_1_1fs_1_1_file_system_1aa0bfcdc572b747ce2b650147d8ddb888" prot="public" virt="virtual" ambiguityscope="arrow::fs::FileSystem::"><scope>arrow::fs::S3FileSystem</scope><name>Equals</name></member>
      <member refid="classarrow_1_1fs_1_1_s3_file_system_1accc79bb6781e8ec8b8b4a4c01d7dfb0c" prot="public" virt="virtual"><scope>arrow::fs::S3FileSystem</scope><name>GetFileInfo</name></member>
      <member refid="classarrow_1_1fs_1_1_s3_file_system_1a8290eb500c8e74db7d16a0623875ef01" prot="public" virt="virtual"><scope>arrow::fs::S3FileSystem</scope><name>GetFileInfo</name></member>
      <member refid="classarrow_1_1fs_1_1_file_system_1a4e7ff03e540cfba191d9c42aa6bba060" prot="public" virt="virtual" ambiguityscope="arrow::fs::FileSystem::"><scope>arrow::fs::S3FileSystem</scope><name>GetFileInfo</name></member>
      <member refid="classarrow_1_1fs_1_1_s3_file_system_1a616777549ae51f29fb1dc83e10a1773a" prot="protected" virt="non-virtual"><scope>arrow::fs::S3FileSystem</scope><name>impl_</name></member>
      <member refid="classarrow_1_1fs_1_1_s3_file_system_1a1ebca67b5b548d60d1a1472eebe5d18f" prot="public" virt="non-virtual"><scope>arrow::fs::S3FileSystem</scope><name>Make</name></member>
      <member refid="classarrow_1_1fs_1_1_s3_file_system_1a356897ccaf9112c20539f37dea0fe8a5" prot="public" virt="virtual"><scope>arrow::fs::S3FileSystem</scope><name>Move</name></member>
      <member refid="classarrow_1_1fs_1_1_file_system_1a73d5af5c51cc4cf569fabcea48781721" prot="public" virt="virtual"><scope>arrow::fs::S3FileSystem</scope><name>NormalizePath</name></member>
      <member refid="classarrow_1_1fs_1_1_s3_file_system_1a5c496264ed0d2c7469af8c3d3ed04544" prot="public" virt="virtual"><scope>arrow::fs::S3FileSystem</scope><name>OpenAppendStream</name></member>
      <member refid="classarrow_1_1fs_1_1_s3_file_system_1a37b3809525d4529f62d629dc4d24e12b" prot="public" virt="virtual"><scope>arrow::fs::S3FileSystem</scope><name>OpenInputFile</name></member>
      <member refid="classarrow_1_1fs_1_1_s3_file_system_1a741106f97cea2c11ea908da345482990" prot="public" virt="virtual"><scope>arrow::fs::S3FileSystem</scope><name>OpenInputStream</name></member>
      <member refid="classarrow_1_1fs_1_1_s3_file_system_1a807850bfeb056933f043f4cf0b9bd546" prot="public" virt="virtual"><scope>arrow::fs::S3FileSystem</scope><name>OpenOutputStream</name></member>
      <member refid="classarrow_1_1fs_1_1_s3_file_system_1aceb06e56c6b321d334505eb49b101ccb" prot="public" virt="non-virtual"><scope>arrow::fs::S3FileSystem</scope><name>options</name></member>
      <member refid="classarrow_1_1fs_1_1_s3_file_system_1a69e48125af31dd127dcc769046ed167c" prot="protected" virt="non-virtual"><scope>arrow::fs::S3FileSystem</scope><name>S3FileSystem</name></member>
      <member refid="classarrow_1_1fs_1_1_s3_file_system_1a7e22fc95a6907be018a442aa6128ae7d" prot="public" virt="virtual"><scope>arrow::fs::S3FileSystem</scope><name>type_name</name></member>
      <member refid="classarrow_1_1fs_1_1_file_system_1a364917767b1d2e11b3b8967a4ee08c30" prot="public" virt="virtual"><scope>arrow::fs::S3FileSystem</scope><name>~FileSystem</name></member>
      <member refid="classarrow_1_1fs_1_1_s3_file_system_1ab26f35123814613ea691541d8ed0ba18" prot="public" virt="non-virtual"><scope>arrow::fs::S3FileSystem</scope><name>~S3FileSystem</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
