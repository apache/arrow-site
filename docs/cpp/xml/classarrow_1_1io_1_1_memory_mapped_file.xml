<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1io_1_1_memory_mapped_file" kind="class" language="C++" prot="public">
    <compoundname>arrow::io::MemoryMappedFile</compoundname>
    <basecompoundref refid="classarrow_1_1io_1_1_read_write_file_interface" prot="public" virt="non-virtual">arrow::io::ReadWriteFileInterface</basecompoundref>
    <includes refid="file_8h" local="no">arrow/io/file.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classarrow_1_1io_1_1_memory_mapped_file_1abb23fb5a48e1497900a40f4ca04d0b14" prot="private" static="no" mutable="no">
        <type>class <ref refid="arrow_2util_2visibility_8h_1a843cb8dccea68a22a2b9995605cb5a74" kindref="member">ARROW_NO_EXPORT</ref></type>
        <definition>class ARROW_NO_EXPORT arrow::io::MemoryMappedFile::MemoryMap</definition>
        <argsstring></argsstring>
        <name>MemoryMap</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/file.h" line="208" column="1" bodyfile="/arrow/cpp/src/arrow/io/file.h" bodystart="210" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1io_1_1_memory_mapped_file_1a2e0c6c9ba65378f905dd4561ce49795a" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; MemoryMap &gt;</type>
        <definition>std::shared_ptr&lt;MemoryMap&gt; arrow::io::MemoryMappedFile::memory_map_</definition>
        <argsstring></argsstring>
        <name>memory_map_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/file.h" line="211" column="1" bodyfile="/arrow/cpp/src/arrow/io/file.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1io_1_1_memory_mapped_file_1a591763468f610e64fddf1c99d8cd05bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::io::MemoryMappedFile::~MemoryMappedFile</definition>
        <argsstring>() override</argsstring>
        <name>~MemoryMappedFile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/file.h" line="145" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_memory_mapped_file_1a344ef060df35e0aad557946193119a05" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::MemoryMappedFile::Close</definition>
        <argsstring>() override</argsstring>
        <name>Close</name>
        <reimplements refid="classarrow_1_1io_1_1_file_interface_1ae0f46d227a430af180576715e7aa0b78">Close</reimplements>
        <briefdescription>
<para>Close the stream cleanly. </para>        </briefdescription>
        <detaileddescription>
<para>For writable streams, this will attempt to flush any pending data before releasing the underlying resource.</para><para>After <ref refid="classarrow_1_1io_1_1_memory_mapped_file_1a344ef060df35e0aad557946193119a05" kindref="member">Close()</ref> is called, <ref refid="classarrow_1_1io_1_1_memory_mapped_file_1ad1ed6c7dc1f2acc2b60bb6126cf144f5" kindref="member">closed()</ref> returns true and the stream is not available for further operations. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/file.h" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_memory_mapped_file_1ad1ed6c7dc1f2acc2b60bb6126cf144f5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool arrow::io::MemoryMappedFile::closed</definition>
        <argsstring>() const override</argsstring>
        <name>closed</name>
        <reimplements refid="classarrow_1_1io_1_1_file_interface_1a5ba1d2c3cec2e05e7b0018624f19c10b">closed</reimplements>
        <briefdescription>
<para>Return whether the stream is closed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/file.h" line="163" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_memory_mapped_file_1a588a0a68a01f581ba9bfcaa7140b942e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; int64_t &gt;</type>
        <definition>Result&lt;int64_t&gt; arrow::io::MemoryMappedFile::Tell</definition>
        <argsstring>() const override</argsstring>
        <name>Tell</name>
        <reimplements refid="classarrow_1_1io_1_1_file_interface_1ac6c6709147a46cd7f45d0779c1819ce6">Tell</reimplements>
        <briefdescription>
<para>Return the position in this stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/file.h" line="165" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_memory_mapped_file_1a87da63388a34fd22c82cc41c437e200e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::MemoryMappedFile::Seek</definition>
        <argsstring>(int64_t position) override</argsstring>
        <name>Seek</name>
        <reimplements refid="classarrow_1_1io_1_1_seekable_1a410ba0e0932dbcb939b570ee3c8c6d25">Seek</reimplements>
        <param>
          <type>int64_t</type>
          <declname>position</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/file.h" line="167" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_memory_mapped_file_1a83be46ee28680723283ba22c11fc7c41" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; int64_t &gt;</type>
        <definition>Result&lt;int64_t&gt; arrow::io::MemoryMappedFile::Read</definition>
        <argsstring>(int64_t nbytes, void *out) override</argsstring>
        <name>Read</name>
        <reimplements refid="classarrow_1_1io_1_1_readable_1ab94d6d47006df39f6cf77c078a61b8d8">Read</reimplements>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Read data from current file position. </para>        </briefdescription>
        <detaileddescription>
<para>Read at most <computeroutput>nbytes</computeroutput> from the current file position into <computeroutput>out</computeroutput>. The number of bytes read is returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/file.h" line="170" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_memory_mapped_file_1a2e9d0c63e19ef1148d5f5dfb976e6fbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;Buffer&gt; &gt; arrow::io::MemoryMappedFile::Read</definition>
        <argsstring>(int64_t nbytes) override</argsstring>
        <name>Read</name>
        <reimplements refid="classarrow_1_1io_1_1_readable_1aca2d005299c3af1092bedff34b5b015b">Read</reimplements>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
<para>Read data from current file position. </para>        </briefdescription>
        <detaileddescription>
<para>Read at most <computeroutput>nbytes</computeroutput> from the current file position. Less bytes may be read if EOF is reached. This method updates the current file position.</para><para>In some cases (e.g. a memory-mapped file), this method may avoid a memory copy. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/file.h" line="173" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_memory_mapped_file_1a511e515662f65b931ed181d6865f7629" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;Buffer&gt; &gt; arrow::io::MemoryMappedFile::ReadAt</definition>
        <argsstring>(int64_t position, int64_t nbytes) override</argsstring>
        <name>ReadAt</name>
        <reimplements refid="classarrow_1_1io_1_1_random_access_file_1a562433f2be06021acb9abd20bd5a8219">ReadAt</reimplements>
        <param>
          <type>int64_t</type>
          <declname>position</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
<para>Read data from given file position. </para>        </briefdescription>
        <detaileddescription>
<para>At most <computeroutput>nbytes</computeroutput> bytes are read, but it can be less if EOF is reached.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">position</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to read bytes from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to read </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A buffer containing the bytes read, or an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/file.h" line="177" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_memory_mapped_file_1a862f6eb20f0da6bf429c708de3d035ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; int64_t &gt;</type>
        <definition>Result&lt;int64_t&gt; arrow::io::MemoryMappedFile::ReadAt</definition>
        <argsstring>(int64_t position, int64_t nbytes, void *out) override</argsstring>
        <name>ReadAt</name>
        <reimplements refid="classarrow_1_1io_1_1_random_access_file_1adb9d40656e516d6b77ee2bdfc00126f3">ReadAt</reimplements>
        <param>
          <type>int64_t</type>
          <declname>position</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Read data from given file position. </para>        </briefdescription>
        <detaileddescription>
<para>At most <computeroutput>nbytes</computeroutput> bytes are read. The number of bytes read is returned (it can be less than <computeroutput>nbytes</computeroutput> if EOF is reached).</para><para>This method can be safely called from multiple threads concurrently. It is unspecified whether this method updates the file position or not.</para><para>The default RandomAccessFile-provided implementation uses <ref refid="classarrow_1_1io_1_1_memory_mapped_file_1a87da63388a34fd22c82cc41c437e200e" kindref="member">Seek()</ref> and <ref refid="classarrow_1_1io_1_1_memory_mapped_file_1a83be46ee28680723283ba22c11fc7c41" kindref="member">Read()</ref>, but subclasses may override it with a more efficient implementation that doesn&apos;t depend on implicit file positioning.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">position</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to read bytes from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to read bytes into </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes read, or an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/file.h" line="182" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_memory_mapped_file_1af13a36adf0043ca23b35821b78865531" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_future" kindref="compound">Future</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &gt;</type>
        <definition>Future&lt;std::shared_ptr&lt;Buffer&gt; &gt; arrow::io::MemoryMappedFile::ReadAsync</definition>
        <argsstring>(int64_t position, int64_t nbytes) override</argsstring>
        <name>ReadAsync</name>
        <reimplements refid="classarrow_1_1io_1_1_random_access_file_1ae37e086e71206380188a28fa5b125ac4">ReadAsync</reimplements>
        <param>
          <type>int64_t</type>
          <declname>position</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/file.h" line="185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_memory_mapped_file_1a6b0d674e00a742b563c092a3175d79eb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool arrow::io::MemoryMappedFile::supports_zero_copy</definition>
        <argsstring>() const override</argsstring>
        <name>supports_zero_copy</name>
        <reimplements refid="classarrow_1_1io_1_1_input_stream_1a2b9978739db7fa75ba81e794bfba2a64">supports_zero_copy</reimplements>
        <briefdescription>
<para>Return true if <ref refid="classarrow_1_1io_1_1_input_stream" kindref="compound">InputStream</ref> is capable of zero copy <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> reads. </para>        </briefdescription>
        <detaileddescription>
<para>Zero copy reads imply the use of Buffer-returning <ref refid="classarrow_1_1io_1_1_memory_mapped_file_1a83be46ee28680723283ba22c11fc7c41" kindref="member">Read()</ref> overloads. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/file.h" line="187" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_memory_mapped_file_1a8010d2df9fe39e6bd977f62cc9fab57b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::MemoryMappedFile::Write</definition>
        <argsstring>(const void *data, int64_t nbytes) override</argsstring>
        <name>Write</name>
        <reimplements refid="classarrow_1_1io_1_1_writable_1a51d9feed73c33f095ca4b9f35dede84d">Write</reimplements>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
<para>Write data at the current position in the file. Thread-safe. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/file.h" line="190" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_memory_mapped_file_1a9858f77facb1cad90de5cf083b003b09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::MemoryMappedFile::Resize</definition>
        <argsstring>(int64_t new_size)</argsstring>
        <name>Resize</name>
        <param>
          <type>int64_t</type>
          <declname>new_size</declname>
        </param>
        <briefdescription>
<para>Set the size of the map to new_size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/file.h" line="196" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_memory_mapped_file_1afae233e4bc2f99f985a0b44f07f92f2f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::MemoryMappedFile::WriteAt</definition>
        <argsstring>(int64_t position, const void *data, int64_t nbytes) override</argsstring>
        <name>WriteAt</name>
        <reimplements refid="classarrow_1_1io_1_1_writable_file_1ac537915c4132d1e8bd9005f539c47615">WriteAt</reimplements>
        <param>
          <type>int64_t</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
<para>Write data at a particular position in the file. Thread-safe. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/file.h" line="199" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_memory_mapped_file_1afa7949f86824b7f48064d172949248f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; int64_t &gt;</type>
        <definition>Result&lt;int64_t&gt; arrow::io::MemoryMappedFile::GetSize</definition>
        <argsstring>() override</argsstring>
        <name>GetSize</name>
        <reimplements refid="classarrow_1_1io_1_1_random_access_file_1a2a476c2a6ad474e123d1aab20be289c4">GetSize</reimplements>
        <briefdescription>
<para>Return the total file size in bytes. </para>        </briefdescription>
        <detaileddescription>
<para>This method does not read or move the current file position, so is safe to call concurrently with e.g. <ref refid="classarrow_1_1io_1_1_memory_mapped_file_1a511e515662f65b931ed181d6865f7629" kindref="member">ReadAt()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/file.h" line="201" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_memory_mapped_file_1a1303b6e8528d8f4053c1c2ae3a94ce42" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int arrow::io::MemoryMappedFile::file_descriptor</definition>
        <argsstring>() const</argsstring>
        <name>file_descriptor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/file.h" line="203" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1io_1_1_memory_mapped_file_1a8a8e0c3030ade61b1fd013b999796afe" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_memory_mapped_file" kindref="compound">MemoryMappedFile</ref> &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;MemoryMappedFile&gt; &gt; arrow::io::MemoryMappedFile::Create</definition>
        <argsstring>(const std::string &amp;path, int64_t size)</argsstring>
        <name>Create</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Create new file with indicated size, return in read/write mode. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/file.h" line="148" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_memory_mapped_file_1a0d55b21d221306054ea5c5fca619b660" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_memory_mapped_file" kindref="compound">MemoryMappedFile</ref> &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;MemoryMappedFile&gt; &gt; arrow::io::MemoryMappedFile::Open</definition>
        <argsstring>(const std::string &amp;path, FileMode::type mode)</argsstring>
        <name>Open</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="structarrow_1_1io_1_1_file_mode_1a41b6fb9caec96f1e634fb8052c9a9310" kindref="member">FileMode::type</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/file.h" line="152" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_memory_mapped_file_1a343085b2241cc87a4dc37352437dfde9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_memory_mapped_file" kindref="compound">MemoryMappedFile</ref> &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;MemoryMappedFile&gt; &gt; arrow::io::MemoryMappedFile::Open</definition>
        <argsstring>(const std::string &amp;path, FileMode::type mode, const int64_t offset, const int64_t length)</argsstring>
        <name>Open</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="structarrow_1_1io_1_1_file_mode_1a41b6fb9caec96f1e634fb8052c9a9310" kindref="member">FileMode::type</ref></type>
          <declname>mode</declname>
        </param>
        <param>
          <type>const int64_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>const int64_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/file.h" line="156" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classarrow_1_1io_1_1_memory_mapped_file_1a7cd6d31241a878decd93cbbdb350cad6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::io::MemoryMappedFile::MemoryMappedFile</definition>
        <argsstring>()</argsstring>
        <name>MemoryMappedFile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/file.h" line="206" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_memory_mapped_file_1ad29f2a1fdc158ef51dfb828b64f1581a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::MemoryMappedFile::WriteInternal</definition>
        <argsstring>(const void *data, int64_t nbytes)</argsstring>
        <name>WriteInternal</name>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/file.h" line="208" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A file interface that uses memory-mapped files for memory interactions. </para>    </briefdescription>
    <detaileddescription>
<para>This implementation supports zero-copy reads. The same class is used for both reading and writing.</para><para>If opening a file in a writable mode, it is not truncated first as with <ref refid="classarrow_1_1io_1_1_file_output_stream" kindref="compound">FileOutputStream</ref>. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="3022">
        <label>arrow::io::Readable</label>
        <link refid="classarrow_1_1io_1_1_readable"/>
      </node>
      <node id="3025">
        <label>arrow::io::OutputStream</label>
        <link refid="classarrow_1_1io_1_1_output_stream"/>
        <childnode refid="3021" relation="public-inheritance">
        </childnode>
        <childnode refid="3026" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3016">
        <label>arrow::io::MemoryMappedFile</label>
        <link refid="classarrow_1_1io_1_1_memory_mapped_file"/>
        <childnode refid="3017" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3024">
        <label>arrow::io::WritableFile</label>
        <link refid="classarrow_1_1io_1_1_writable_file"/>
        <childnode refid="3025" relation="public-inheritance">
        </childnode>
        <childnode refid="3023" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3026">
        <label>arrow::io::Writable</label>
        <link refid="classarrow_1_1io_1_1_writable"/>
      </node>
      <node id="3021">
        <label>arrow::io::FileInterface</label>
        <link refid="classarrow_1_1io_1_1_file_interface"/>
      </node>
      <node id="3023">
        <label>arrow::io::Seekable</label>
        <link refid="classarrow_1_1io_1_1_seekable"/>
      </node>
      <node id="3019">
        <label>std::enable_shared_from_this&lt; RandomAccessFile &gt;</label>
      </node>
      <node id="3020">
        <label>arrow::io::InputStream</label>
        <link refid="classarrow_1_1io_1_1_input_stream"/>
        <childnode refid="3021" relation="public-inheritance">
        </childnode>
        <childnode refid="3022" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3018">
        <label>arrow::io::RandomAccessFile</label>
        <link refid="classarrow_1_1io_1_1_random_access_file"/>
        <childnode refid="3019" relation="public-inheritance">
        </childnode>
        <childnode refid="3020" relation="public-inheritance">
        </childnode>
        <childnode refid="3023" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3017">
        <label>arrow::io::ReadWriteFileInterface</label>
        <link refid="classarrow_1_1io_1_1_read_write_file_interface"/>
        <childnode refid="3018" relation="public-inheritance">
        </childnode>
        <childnode refid="3024" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3033">
        <label>arrow::io::Readable</label>
        <link refid="classarrow_1_1io_1_1_readable"/>
      </node>
      <node id="3036">
        <label>arrow::io::OutputStream</label>
        <link refid="classarrow_1_1io_1_1_output_stream"/>
        <childnode refid="3032" relation="public-inheritance">
        </childnode>
        <childnode refid="3037" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3027">
        <label>arrow::io::MemoryMappedFile</label>
        <link refid="classarrow_1_1io_1_1_memory_mapped_file"/>
        <childnode refid="3028" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3035">
        <label>arrow::io::WritableFile</label>
        <link refid="classarrow_1_1io_1_1_writable_file"/>
        <childnode refid="3036" relation="public-inheritance">
        </childnode>
        <childnode refid="3034" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3037">
        <label>arrow::io::Writable</label>
        <link refid="classarrow_1_1io_1_1_writable"/>
      </node>
      <node id="3032">
        <label>arrow::io::FileInterface</label>
        <link refid="classarrow_1_1io_1_1_file_interface"/>
      </node>
      <node id="3034">
        <label>arrow::io::Seekable</label>
        <link refid="classarrow_1_1io_1_1_seekable"/>
      </node>
      <node id="3030">
        <label>std::enable_shared_from_this&lt; RandomAccessFile &gt;</label>
      </node>
      <node id="3031">
        <label>arrow::io::InputStream</label>
        <link refid="classarrow_1_1io_1_1_input_stream"/>
        <childnode refid="3032" relation="public-inheritance">
        </childnode>
        <childnode refid="3033" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3029">
        <label>arrow::io::RandomAccessFile</label>
        <link refid="classarrow_1_1io_1_1_random_access_file"/>
        <childnode refid="3030" relation="public-inheritance">
        </childnode>
        <childnode refid="3031" relation="public-inheritance">
        </childnode>
        <childnode refid="3034" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3028">
        <label>arrow::io::ReadWriteFileInterface</label>
        <link refid="classarrow_1_1io_1_1_read_write_file_interface"/>
        <childnode refid="3029" relation="public-inheritance">
        </childnode>
        <childnode refid="3035" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/io/file.h" line="143" column="1" bodyfile="/arrow/cpp/src/arrow/io/file.h" bodystart="143" bodyend="212"/>
    <listofallmembers>
      <member refid="classarrow_1_1io_1_1_file_interface_1a0fa59fe92d3c99c9d9701210626aac60" prot="public" virt="virtual"><scope>arrow::io::MemoryMappedFile</scope><name>Abort</name></member>
      <member refid="classarrow_1_1io_1_1_input_stream_1ab5e2e1bdb05f7847363461bc3b90d386" prot="public" virt="non-virtual"><scope>arrow::io::MemoryMappedFile</scope><name>Advance</name></member>
      <member refid="classarrow_1_1io_1_1_memory_mapped_file_1a344ef060df35e0aad557946193119a05" prot="public" virt="virtual"><scope>arrow::io::MemoryMappedFile</scope><name>Close</name></member>
      <member refid="classarrow_1_1io_1_1_memory_mapped_file_1ad1ed6c7dc1f2acc2b60bb6126cf144f5" prot="public" virt="virtual"><scope>arrow::io::MemoryMappedFile</scope><name>closed</name></member>
      <member refid="classarrow_1_1io_1_1_memory_mapped_file_1a8a8e0c3030ade61b1fd013b999796afe" prot="public" virt="non-virtual"><scope>arrow::io::MemoryMappedFile</scope><name>Create</name></member>
      <member refid="classarrow_1_1io_1_1_memory_mapped_file_1a1303b6e8528d8f4053c1c2ae3a94ce42" prot="public" virt="non-virtual"><scope>arrow::io::MemoryMappedFile</scope><name>file_descriptor</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1afea9126bb21e3720212a826aa78b5534" prot="protected" virt="non-virtual"><scope>arrow::io::MemoryMappedFile</scope><name>FileInterface</name></member>
      <member refid="classarrow_1_1io_1_1_writable_1a06e513a551f68603013c1586ba8b939f" prot="public" virt="virtual"><scope>arrow::io::MemoryMappedFile</scope><name>Flush</name></member>
      <member refid="classarrow_1_1io_1_1_memory_mapped_file_1afa7949f86824b7f48064d172949248f2" prot="public" virt="virtual"><scope>arrow::io::MemoryMappedFile</scope><name>GetSize</name></member>
      <member refid="classarrow_1_1io_1_1_random_access_file_1a077348c5eb5ad0147582a3e5aa073847" prot="public" virt="non-virtual"><scope>arrow::io::MemoryMappedFile</scope><name>GetStream</name></member>
      <member refid="classarrow_1_1io_1_1_input_stream_1aeb778572d0e9bf4902dbfbbc5353d7fd" prot="protected" virt="non-virtual"><scope>arrow::io::MemoryMappedFile</scope><name>InputStream</name></member>
      <member refid="classarrow_1_1io_1_1_memory_mapped_file_1a2e0c6c9ba65378f905dd4561ce49795a" prot="private" virt="non-virtual"><scope>arrow::io::MemoryMappedFile</scope><name>memory_map_</name></member>
      <member refid="classarrow_1_1io_1_1_memory_mapped_file_1abb23fb5a48e1497900a40f4ca04d0b14" prot="private" virt="non-virtual"><scope>arrow::io::MemoryMappedFile</scope><name>MemoryMap</name></member>
      <member refid="classarrow_1_1io_1_1_memory_mapped_file_1a7cd6d31241a878decd93cbbdb350cad6" prot="private" virt="non-virtual"><scope>arrow::io::MemoryMappedFile</scope><name>MemoryMappedFile</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1a75a3739361570bb121b9adb04d5d8686" prot="public" virt="non-virtual"><scope>arrow::io::MemoryMappedFile</scope><name>mode</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1a504d0410eb6066316365a4549d000ee0" prot="protected" virt="non-virtual"><scope>arrow::io::MemoryMappedFile</scope><name>mode_</name></member>
      <member refid="classarrow_1_1io_1_1_memory_mapped_file_1a0d55b21d221306054ea5c5fca619b660" prot="public" virt="non-virtual"><scope>arrow::io::MemoryMappedFile</scope><name>Open</name></member>
      <member refid="classarrow_1_1io_1_1_memory_mapped_file_1a343085b2241cc87a4dc37352437dfde9" prot="public" virt="non-virtual"><scope>arrow::io::MemoryMappedFile</scope><name>Open</name></member>
      <member refid="classarrow_1_1io_1_1_output_stream_1a5b1e0adea7ef92368ddc07027995aca1" prot="protected" virt="non-virtual"><scope>arrow::io::MemoryMappedFile</scope><name>OutputStream</name></member>
      <member refid="classarrow_1_1io_1_1_input_stream_1aba80e2518abc166625077bd065ae3721" prot="public" virt="virtual"><scope>arrow::io::MemoryMappedFile</scope><name>Peek</name></member>
      <member refid="classarrow_1_1io_1_1_random_access_file_1a32c1cb28aa86db601b68a96615a3161c" prot="protected" virt="non-virtual"><scope>arrow::io::MemoryMappedFile</scope><name>RandomAccessFile</name></member>
      <member refid="classarrow_1_1io_1_1_memory_mapped_file_1a83be46ee28680723283ba22c11fc7c41" prot="public" virt="virtual"><scope>arrow::io::MemoryMappedFile</scope><name>Read</name></member>
      <member refid="classarrow_1_1io_1_1_memory_mapped_file_1a2e9d0c63e19ef1148d5f5dfb976e6fbf" prot="public" virt="virtual"><scope>arrow::io::MemoryMappedFile</scope><name>Read</name></member>
      <member refid="classarrow_1_1io_1_1_memory_mapped_file_1af13a36adf0043ca23b35821b78865531" prot="public" virt="virtual"><scope>arrow::io::MemoryMappedFile</scope><name>ReadAsync</name></member>
      <member refid="classarrow_1_1io_1_1_memory_mapped_file_1a511e515662f65b931ed181d6865f7629" prot="public" virt="virtual"><scope>arrow::io::MemoryMappedFile</scope><name>ReadAt</name></member>
      <member refid="classarrow_1_1io_1_1_memory_mapped_file_1a862f6eb20f0da6bf429c708de3d035ba" prot="public" virt="virtual"><scope>arrow::io::MemoryMappedFile</scope><name>ReadAt</name></member>
      <member refid="classarrow_1_1io_1_1_read_write_file_interface_1a8dc7a2f90a0799d7322eb247d1827ee9" prot="protected" virt="non-virtual"><scope>arrow::io::MemoryMappedFile</scope><name>ReadWriteFileInterface</name></member>
      <member refid="classarrow_1_1io_1_1_memory_mapped_file_1a9858f77facb1cad90de5cf083b003b09" prot="public" virt="non-virtual"><scope>arrow::io::MemoryMappedFile</scope><name>Resize</name></member>
      <member refid="classarrow_1_1io_1_1_memory_mapped_file_1a87da63388a34fd22c82cc41c437e200e" prot="public" virt="virtual"><scope>arrow::io::MemoryMappedFile</scope><name>Seek</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1af3dd01a780076e39a34770beb513f71f" prot="protected" virt="non-virtual"><scope>arrow::io::MemoryMappedFile</scope><name>set_mode</name></member>
      <member refid="classarrow_1_1io_1_1_memory_mapped_file_1a6b0d674e00a742b563c092a3175d79eb" prot="public" virt="virtual"><scope>arrow::io::MemoryMappedFile</scope><name>supports_zero_copy</name></member>
      <member refid="classarrow_1_1io_1_1_memory_mapped_file_1a588a0a68a01f581ba9bfcaa7140b942e" prot="public" virt="virtual"><scope>arrow::io::MemoryMappedFile</scope><name>Tell</name></member>
      <member refid="classarrow_1_1io_1_1_writable_file_1a1834e50389ef694613b1998392f47efa" prot="protected" virt="non-virtual"><scope>arrow::io::MemoryMappedFile</scope><name>WritableFile</name></member>
      <member refid="classarrow_1_1io_1_1_memory_mapped_file_1a8010d2df9fe39e6bd977f62cc9fab57b" prot="public" virt="virtual"><scope>arrow::io::MemoryMappedFile</scope><name>Write</name></member>
      <member refid="classarrow_1_1io_1_1_writable_1a048bbc5e85b1d739bc49c57553e85069" prot="public" virt="virtual" ambiguityscope="arrow::io::ReadWriteFileInterface::"><scope>arrow::io::MemoryMappedFile</scope><name>Write</name></member>
      <member refid="classarrow_1_1io_1_1_writable_1a00ee30dff05bda7526c91e594a9607e7" prot="public" virt="non-virtual" ambiguityscope="arrow::io::ReadWriteFileInterface::"><scope>arrow::io::MemoryMappedFile</scope><name>Write</name></member>
      <member refid="classarrow_1_1io_1_1_memory_mapped_file_1afae233e4bc2f99f985a0b44f07f92f2f" prot="public" virt="virtual"><scope>arrow::io::MemoryMappedFile</scope><name>WriteAt</name></member>
      <member refid="classarrow_1_1io_1_1_memory_mapped_file_1ad29f2a1fdc158ef51dfb828b64f1581a" prot="private" virt="non-virtual"><scope>arrow::io::MemoryMappedFile</scope><name>WriteInternal</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1aa42dcdfad00634f01192b39f1d9b4929" prot="public" virt="pure-virtual"><scope>arrow::io::MemoryMappedFile</scope><name>~FileInterface</name></member>
      <member refid="classarrow_1_1io_1_1_memory_mapped_file_1a591763468f610e64fddf1c99d8cd05bc" prot="public" virt="non-virtual"><scope>arrow::io::MemoryMappedFile</scope><name>~MemoryMappedFile</name></member>
      <member refid="classarrow_1_1io_1_1_random_access_file_1a30c6917dfe0b6e508dac2ecc81917187" prot="public" virt="non-virtual"><scope>arrow::io::MemoryMappedFile</scope><name>~RandomAccessFile</name></member>
      <member refid="classarrow_1_1io_1_1_readable_1a96a411d4494a9872d7eef4f8bb6396b4" prot="public" virt="virtual"><scope>arrow::io::MemoryMappedFile</scope><name>~Readable</name></member>
      <member refid="classarrow_1_1io_1_1_seekable_1a7642c30d2f852e0f79fec036a94ca093" prot="public" virt="virtual"><scope>arrow::io::MemoryMappedFile</scope><name>~Seekable</name></member>
      <member refid="classarrow_1_1io_1_1_writable_1acc17343118544c62f14d62f538fa8592" prot="public" virt="virtual"><scope>arrow::io::MemoryMappedFile</scope><name>~Writable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
