<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_sparse_tensor_impl" kind="class" language="C++" prot="public">
    <compoundname>arrow::SparseTensorImpl</compoundname>
    <basecompoundref refid="classarrow_1_1_sparse_tensor" prot="public" virt="non-virtual">arrow::SparseTensor</basecompoundref>
    <includes refid="sparse__tensor_8h" local="no">arrow/sparse_tensor.h</includes>
    <templateparamlist>
      <param>
        <type>typename SparseIndexType</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1_sparse_tensor_impl_1ad215e2719d8939210d789cb7f7e19857" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual arrow::SparseTensorImpl&lt; SparseIndexType &gt;::~SparseTensorImpl</definition>
        <argsstring>()=default</argsstring>
        <name>~SparseTensorImpl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="507" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_sparse_tensor_impl_1a9b410d9e21452f9de4a299f68d57d891" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::SparseTensorImpl&lt; SparseIndexType &gt;::SparseTensorImpl</definition>
        <argsstring>(const std::shared_ptr&lt; SparseIndexType &gt; &amp;sparse_index, const std::shared_ptr&lt; DataType &gt; &amp;type, const std::shared_ptr&lt; Buffer &gt; &amp;data, const std::vector&lt; int64_t &gt; &amp;shape, const std::vector&lt; std::string &gt; &amp;dim_names)</argsstring>
        <name>SparseTensorImpl</name>
        <param>
          <type>const std::shared_ptr&lt; SparseIndexType &gt; &amp;</type>
          <declname>sparse_index</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dim_names</declname>
        </param>
        <briefdescription>
<para>Construct a sparse tensor from physical data buffer and logical index. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="510" column="1" bodyfile="/arrow/cpp/src/arrow/sparse_tensor.h" bodystart="510" bodyend="514"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_sparse_tensor_impl_1a5e3846abcec2da92bc62149232b82bd7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::SparseTensorImpl&lt; SparseIndexType &gt;::SparseTensorImpl</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;type, const std::vector&lt; int64_t &gt; &amp;shape, const std::vector&lt; std::string &gt; &amp;dim_names={})</argsstring>
        <name>SparseTensorImpl</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dim_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Construct an empty sparse tensor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="517" column="1" bodyfile="/arrow/cpp/src/arrow/sparse_tensor.h" bodystart="517" bodyend="520"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1_sparse_tensor_impl_1aa3cfc7b57bc57464d59b67b37a99f2dd" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_sparse_tensor_impl" kindref="compound">SparseTensorImpl</ref>&lt; SparseIndexType &gt; &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;SparseTensorImpl&lt;SparseIndexType&gt; &gt; &gt; arrow::SparseTensorImpl&lt; SparseIndexType &gt;::Make</definition>
        <argsstring>(const std::shared_ptr&lt; SparseIndexType &gt; &amp;sparse_index, const std::shared_ptr&lt; DataType &gt; &amp;type, const std::shared_ptr&lt; Buffer &gt; &amp;data, const std::vector&lt; int64_t &gt; &amp;shape, const std::vector&lt; std::string &gt; &amp;dim_names)</argsstring>
        <name>Make</name>
        <param>
          <type>const std::shared_ptr&lt; SparseIndexType &gt; &amp;</type>
          <declname>sparse_index</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dim_names</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="classarrow_1_1_sparse_tensor" kindref="compound">SparseTensor</ref> with full parameters. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="523" column="1" bodyfile="/arrow/cpp/src/arrow/sparse_tensor.h" bodystart="523" bodyend="537"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_sparse_tensor_impl_1a1193d18e653218239a3c178038b84bc7" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_sparse_tensor_impl" kindref="compound">SparseTensorImpl</ref>&lt; SparseIndexType &gt; &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;SparseTensorImpl&lt;SparseIndexType&gt; &gt; &gt; arrow::SparseTensorImpl&lt; SparseIndexType &gt;::Make</definition>
        <argsstring>(const Tensor &amp;tensor, const std::shared_ptr&lt; DataType &gt; &amp;index_value_type, MemoryPool *pool=default_memory_pool())</argsstring>
        <name>Make</name>
        <param>
          <type>const <ref refid="classarrow_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>tensor</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>index_value_type</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
          <defval><ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">default_memory_pool</ref>()</defval>
        </param>
        <briefdescription>
<para>Create a sparse tensor from a dense tensor. </para>        </briefdescription>
        <detaileddescription>
<para>The dense tensor is re-encoded as a sparse index and a physical data buffer for the non-zero value. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="543" column="1" bodyfile="/arrow/cpp/src/arrow/sparse_tensor.h" bodystart="543" bodyend="554"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_sparse_tensor_impl_1a9a631048d4dd627a8d934f99d3b5c9c4" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_sparse_tensor_impl" kindref="compound">SparseTensorImpl</ref>&lt; SparseIndexType &gt; &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;SparseTensorImpl&lt;SparseIndexType&gt; &gt; &gt; arrow::SparseTensorImpl&lt; SparseIndexType &gt;::Make</definition>
        <argsstring>(const Tensor &amp;tensor, MemoryPool *pool=default_memory_pool())</argsstring>
        <name>Make</name>
        <param>
          <type>const <ref refid="classarrow_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>tensor</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
          <defval><ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">default_memory_pool</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="556" column="1" bodyfile="/arrow/cpp/src/arrow/sparse_tensor.h" bodystart="556" bodyend="559"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classarrow_1_1_sparse_tensor_impl_1a7dc19cb44851cd74c9538fee5f7ca745" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::SparseTensorImpl&lt; SparseIndexType &gt;::ARROW_DISALLOW_COPY_AND_ASSIGN</definition>
        <argsstring>(SparseTensorImpl)</argsstring>
        <name>ARROW_DISALLOW_COPY_AND_ASSIGN</name>
        <param>
          <type><ref refid="classarrow_1_1_sparse_tensor_impl" kindref="compound">SparseTensorImpl</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="562" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>EXPERIMENTAL: Concrete sparse tensor implementation classes with sparse index type. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4267">
        <label>arrow::SparseTensorImpl&lt; SparseIndexType &gt;</label>
        <link refid="classarrow_1_1_sparse_tensor_impl"/>
        <childnode refid="4268" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4268">
        <label>arrow::SparseTensor</label>
        <link refid="classarrow_1_1_sparse_tensor"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4269">
        <label>arrow::SparseTensorImpl&lt; SparseIndexType &gt;</label>
        <link refid="classarrow_1_1_sparse_tensor_impl"/>
        <childnode refid="4270" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4270">
        <label>arrow::SparseTensor</label>
        <link refid="classarrow_1_1_sparse_tensor"/>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="505" column="1" bodyfile="/arrow/cpp/src/arrow/sparse_tensor.h" bodystart="505" bodyend="563"/>
    <listofallmembers>
      <member refid="classarrow_1_1_sparse_tensor_impl_1a7dc19cb44851cd74c9538fee5f7ca745" prot="private" virt="non-virtual"><scope>arrow::SparseTensorImpl</scope><name>ARROW_DISALLOW_COPY_AND_ASSIGN</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1a09c5fe678e12a8f9ac60a672e0cc686b" prot="public" virt="non-virtual"><scope>arrow::SparseTensorImpl</scope><name>data</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1a1597140ec1d7da1601956c16f2591e77" prot="protected" virt="non-virtual"><scope>arrow::SparseTensorImpl</scope><name>data_</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1a3643b42e620b15e048ad50c339f95ee6" prot="public" virt="non-virtual"><scope>arrow::SparseTensorImpl</scope><name>dim_name</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1ace353930e273b6df117757d77cf00bd9" prot="public" virt="non-virtual"><scope>arrow::SparseTensorImpl</scope><name>dim_names</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1a357ba9a894f60f742a18fb70ab78de7c" prot="protected" virt="non-virtual"><scope>arrow::SparseTensorImpl</scope><name>dim_names_</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1adaf0d6dc9e20bb1024e736c7155df725" prot="public" virt="non-virtual"><scope>arrow::SparseTensorImpl</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1aab6562f2df4f3432091fe3ed57ce07fb" prot="public" virt="non-virtual"><scope>arrow::SparseTensorImpl</scope><name>format_id</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1ad36e1e26afb5c6c091ef0a877f1b70b4" prot="public" virt="non-virtual"><scope>arrow::SparseTensorImpl</scope><name>is_mutable</name></member>
      <member refid="classarrow_1_1_sparse_tensor_impl_1aa3cfc7b57bc57464d59b67b37a99f2dd" prot="public" virt="non-virtual"><scope>arrow::SparseTensorImpl</scope><name>Make</name></member>
      <member refid="classarrow_1_1_sparse_tensor_impl_1a1193d18e653218239a3c178038b84bc7" prot="public" virt="non-virtual"><scope>arrow::SparseTensorImpl</scope><name>Make</name></member>
      <member refid="classarrow_1_1_sparse_tensor_impl_1a9a631048d4dd627a8d934f99d3b5c9c4" prot="public" virt="non-virtual"><scope>arrow::SparseTensorImpl</scope><name>Make</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1a517daac896ab6b6565016d3a74124d22" prot="public" virt="non-virtual"><scope>arrow::SparseTensorImpl</scope><name>ndim</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1a3728b0fe87415b007515b5747d57cdd1" prot="public" virt="non-virtual"><scope>arrow::SparseTensorImpl</scope><name>non_zero_length</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1a1a1fce4423a761cb71e76cdf4c22fe4b" prot="public" virt="non-virtual"><scope>arrow::SparseTensorImpl</scope><name>raw_data</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1a3bfaf3952ca78265b1b65f3adf9bad92" prot="public" virt="non-virtual"><scope>arrow::SparseTensorImpl</scope><name>raw_mutable_data</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1a326ccf3414aac22d0fd6a0b0b7aeb999" prot="public" virt="non-virtual"><scope>arrow::SparseTensorImpl</scope><name>shape</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1ac0e2a6c0d406a5880b547c479bd859e6" prot="protected" virt="non-virtual"><scope>arrow::SparseTensorImpl</scope><name>shape_</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1a94ae1eb4239eddb4100c2358affa8440" prot="public" virt="non-virtual"><scope>arrow::SparseTensorImpl</scope><name>size</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1a06ea9b9c3ec29a62880433a6f52bf19b" prot="public" virt="non-virtual"><scope>arrow::SparseTensorImpl</scope><name>sparse_index</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1acefbca7144aed7047e0b2c15f8eef73a" prot="protected" virt="non-virtual"><scope>arrow::SparseTensorImpl</scope><name>sparse_index_</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1a461dcef0ec4d68eebf92741b2879febb" prot="protected" virt="non-virtual"><scope>arrow::SparseTensorImpl</scope><name>SparseTensor</name></member>
      <member refid="classarrow_1_1_sparse_tensor_impl_1a9b410d9e21452f9de4a299f68d57d891" prot="public" virt="non-virtual"><scope>arrow::SparseTensorImpl</scope><name>SparseTensorImpl</name></member>
      <member refid="classarrow_1_1_sparse_tensor_impl_1a5e3846abcec2da92bc62149232b82bd7" prot="public" virt="non-virtual"><scope>arrow::SparseTensorImpl</scope><name>SparseTensorImpl</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1a65d724ff1245e12e220069feb3dd5928" prot="public" virt="non-virtual"><scope>arrow::SparseTensorImpl</scope><name>ToTensor</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1a8bac558f64a79b4c58f3d0d82de2c917" prot="public" virt="non-virtual"><scope>arrow::SparseTensorImpl</scope><name>ToTensor</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1a09025b42adfa15ff33aad026ae8f7dfb" prot="public" virt="non-virtual"><scope>arrow::SparseTensorImpl</scope><name>type</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1a58e196efc866e19a8247f43788bcb230" prot="protected" virt="non-virtual"><scope>arrow::SparseTensorImpl</scope><name>type_</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1a6fdd4bdda41c888420c1eaedf9fb5d1d" prot="public" virt="virtual"><scope>arrow::SparseTensorImpl</scope><name>~SparseTensor</name></member>
      <member refid="classarrow_1_1_sparse_tensor_impl_1ad215e2719d8939210d789cb7f7e19857" prot="public" virt="virtual"><scope>arrow::SparseTensorImpl</scope><name>~SparseTensorImpl</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
