<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1compute_1_1_add_kernel" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>arrow::compute::AddKernel</compoundname>
    <basecompoundref refid="classarrow_1_1compute_1_1_binary_kernel" prot="public" virt="non-virtual">arrow::compute::BinaryKernel</basecompoundref>
    <includes refid="add_8h" local="no">arrow/compute/kernels/add.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1compute_1_1_add_kernel_1ac5c585b3203af4d00324b025f573ff78" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::compute::AddKernel::Call</definition>
        <argsstring>(FunctionContext *ctx, const Datum &amp;lhs, const Datum &amp;rhs, Datum *out) override=0</argsstring>
        <name>Call</name>
        <reimplements refid="classarrow_1_1compute_1_1_binary_kernel_1a14dc9caa940f7992faa0bac221ac95dd">Call</reimplements>
        <param>
          <type><ref refid="classarrow_1_1compute_1_1_function_context" kindref="compound">FunctionContext</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1compute_1_1_datum" kindref="compound">Datum</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1compute_1_1_datum" kindref="compound">Datum</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structarrow_1_1compute_1_1_datum" kindref="compound">Datum</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para><ref refid="classarrow_1_1compute_1_1_binary_kernel" kindref="compound">BinaryKernel</ref> interface. </para>        </briefdescription>
        <detaileddescription>
<para>delegates to subclasses via <ref refid="classarrow_1_1compute_1_1_add_kernel_1a53ee00195d9140cf779e920b517ddf85" kindref="member">Add()</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernels/add.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1compute_1_1_add_kernel_1a3e1c5443031d245ac45728d79d6475fa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::compute::AddKernel::out_type</definition>
        <argsstring>() const override=0</argsstring>
        <name>out_type</name>
        <reimplements refid="classarrow_1_1compute_1_1_op_kernel_1a7c5f16b7acdba73640c9131e2cd04270">out_type</reimplements>
        <briefdescription>
<para>output type of this kernel </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernels/add.h" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1compute_1_1_add_kernel_1a53ee00195d9140cf779e920b517ddf85" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>virtual Status arrow::compute::AddKernel::Add</definition>
        <argsstring>(FunctionContext *ctx, const std::shared_ptr&lt; Array &gt; &amp;lhs, const std::shared_ptr&lt; Array &gt; &amp;rhs, std::shared_ptr&lt; Array &gt; *result)=0</argsstring>
        <name>Add</name>
        <param>
          <type><ref refid="classarrow_1_1compute_1_1_function_context" kindref="compound">FunctionContext</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>single-array implementation </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernels/add.h" line="65" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1compute_1_1_add_kernel_1a8b3360a0080764d3ba653ca5d98685cc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::compute::AddKernel::Make</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;value_type, std::unique_ptr&lt; AddKernel &gt; *out)</argsstring>
        <name>Make</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>value_type</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classarrow_1_1compute_1_1_add_kernel" kindref="compound">AddKernel</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>factory for Add </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value_type</parametername>
</parameternamelist>
<parameterdescription>
<para>constructed <ref refid="classarrow_1_1compute_1_1_add_kernel" kindref="compound">AddKernel</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>created kernel </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernels/add.h" line="73" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classarrow_1_1compute_1_1_binary_kernel" kindref="compound">BinaryKernel</ref> implementing Add operation. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="32">
        <label>arrow::compute::OpKernel</label>
        <link refid="classarrow_1_1compute_1_1_op_kernel"/>
      </node>
      <node id="31">
        <label>arrow::compute::BinaryKernel</label>
        <link refid="classarrow_1_1compute_1_1_binary_kernel"/>
        <childnode refid="32" relation="public-inheritance">
        </childnode>
      </node>
      <node id="30">
        <label>arrow::compute::AddKernel</label>
        <link refid="classarrow_1_1compute_1_1_add_kernel"/>
        <childnode refid="31" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="35">
        <label>arrow::compute::OpKernel</label>
        <link refid="classarrow_1_1compute_1_1_op_kernel"/>
      </node>
      <node id="34">
        <label>arrow::compute::BinaryKernel</label>
        <link refid="classarrow_1_1compute_1_1_binary_kernel"/>
        <childnode refid="35" relation="public-inheritance">
        </childnode>
      </node>
      <node id="33">
        <label>arrow::compute::AddKernel</label>
        <link refid="classarrow_1_1compute_1_1_add_kernel"/>
        <childnode refid="34" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/compute/kernels/add.h" line="53" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernels/add.h" bodystart="53" bodyend="75"/>
    <listofallmembers>
      <member refid="classarrow_1_1compute_1_1_add_kernel_1a53ee00195d9140cf779e920b517ddf85" prot="public" virt="pure-virtual"><scope>arrow::compute::AddKernel</scope><name>Add</name></member>
      <member refid="classarrow_1_1compute_1_1_add_kernel_1ac5c585b3203af4d00324b025f573ff78" prot="public" virt="pure-virtual"><scope>arrow::compute::AddKernel</scope><name>Call</name></member>
      <member refid="classarrow_1_1compute_1_1_add_kernel_1a8b3360a0080764d3ba653ca5d98685cc" prot="public" virt="non-virtual"><scope>arrow::compute::AddKernel</scope><name>Make</name></member>
      <member refid="classarrow_1_1compute_1_1_add_kernel_1a3e1c5443031d245ac45728d79d6475fa" prot="public" virt="pure-virtual"><scope>arrow::compute::AddKernel</scope><name>out_type</name></member>
      <member refid="classarrow_1_1compute_1_1_op_kernel_1a640d7e2c51722436ed428013dabb63d3" prot="public" virt="virtual"><scope>arrow::compute::AddKernel</scope><name>~OpKernel</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
