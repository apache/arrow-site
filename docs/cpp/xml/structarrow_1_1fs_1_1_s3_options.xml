<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structarrow_1_1fs_1_1_s3_options" kind="struct" language="C++" prot="public">
    <compoundname>arrow::fs::S3Options</compoundname>
    <includes refid="s3fs_8h" local="no">arrow/filesystem/s3fs.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structarrow_1_1fs_1_1_s3_options_1a49de2206208b9cecdeae88419ca48272" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string arrow::fs::S3Options::region</definition>
        <argsstring></argsstring>
        <name>region</name>
        <initializer>= <ref refid="namespacearrow_1_1fs_1a04fbb36c3cabd64fdfb444b42b67a98e" kindref="member">kS3DefaultRegion</ref></initializer>
        <briefdescription>
<para>AWS region to connect to (default &quot;us-east-1&quot;) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/s3fs.h" line="44" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/s3fs.h" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structarrow_1_1fs_1_1_s3_options_1af09fdf28a8c94f1f160256743b9b8e78" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string arrow::fs::S3Options::endpoint_override</definition>
        <argsstring></argsstring>
        <name>endpoint_override</name>
        <briefdescription>
<para>If non-empty, override region with a connect string such as &quot;localhost:9000&quot;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/s3fs.h" line="48" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/s3fs.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structarrow_1_1fs_1_1_s3_options_1a9e70452c5f524e3f55710a5e5b839c58" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string arrow::fs::S3Options::scheme</definition>
        <argsstring></argsstring>
        <name>scheme</name>
        <initializer>= &quot;https&quot;</initializer>
        <briefdescription>
<para>S3 connection transport, default &quot;https&quot;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/s3fs.h" line="50" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/s3fs.h" bodystart="50" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structarrow_1_1fs_1_1_s3_options_1aa271fb7d2d253ed48ad88cf601a9f1cb" prot="public" static="no" mutable="no">
        <type>std::shared_ptr&lt; Aws::Auth::AWSCredentialsProvider &gt;</type>
        <definition>std::shared_ptr&lt;Aws::Auth::AWSCredentialsProvider&gt; arrow::fs::S3Options::credentials_provider</definition>
        <argsstring></argsstring>
        <name>credentials_provider</name>
        <briefdescription>
<para>AWS credentials provider. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/s3fs.h" line="53" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/s3fs.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structarrow_1_1fs_1_1_s3_options_1a6ea875c0f46c26e82b68211042d2b7b8" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool arrow::fs::S3Options::background_writes</definition>
        <argsstring></argsstring>
        <name>background_writes</name>
        <initializer>= true</initializer>
        <briefdescription>
<para>Whether OutputStream writes will be issued in the background, without blocking. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/s3fs.h" line="56" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/s3fs.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structarrow_1_1fs_1_1_s3_options_1abe2b5fcb1b150280dea1706c84433e24" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void arrow::fs::S3Options::ConfigureDefaultCredentials</definition>
        <argsstring>()</argsstring>
        <name>ConfigureDefaultCredentials</name>
        <briefdescription>
<para>Configure with the default AWS credentials provider chain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/s3fs.h" line="59" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1fs_1_1_s3_options_1a6559eed9bb61e952ce22b732bfa9f5ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void arrow::fs::S3Options::ConfigureAccessKey</definition>
        <argsstring>(const std::string &amp;access_key, const std::string &amp;secret_key)</argsstring>
        <name>ConfigureAccessKey</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>access_key</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>secret_key</declname>
        </param>
        <briefdescription>
<para>Configure with explicit access and secret key. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/s3fs.h" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1fs_1_1_s3_options_1a596ea08c626ba6ad61aa00eee4978b7a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arrow::fs::S3Options::GetAccessKey</definition>
        <argsstring>() const</argsstring>
        <name>GetAccessKey</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/s3fs.h" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1fs_1_1_s3_options_1af682a7152e855fbe44f8fe6b74c2c241" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arrow::fs::S3Options::GetSecretKey</definition>
        <argsstring>() const</argsstring>
        <name>GetSecretKey</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/s3fs.h" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1fs_1_1_s3_options_1a1e67f43468ca249c3934f629564bc185" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::fs::S3Options::Equals</definition>
        <argsstring>(const S3Options &amp;other) const</argsstring>
        <name>Equals</name>
        <param>
          <type>const <ref refid="structarrow_1_1fs_1_1_s3_options" kindref="compound">S3Options</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/s3fs.h" line="67" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structarrow_1_1fs_1_1_s3_options_1a8682834dd9717a0ce97b27a836c6f287" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structarrow_1_1fs_1_1_s3_options" kindref="compound">S3Options</ref></type>
        <definition>static S3Options arrow::fs::S3Options::Defaults</definition>
        <argsstring>()</argsstring>
        <name>Defaults</name>
        <briefdescription>
<para>Initialize with default credentials provider chain. </para>        </briefdescription>
        <detaileddescription>
<para>This is recommended if you use the standard AWS environment variables and/or configuration file. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/s3fs.h" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1fs_1_1_s3_options_1a310726075455be5db59ef68bd4e2ecc5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structarrow_1_1fs_1_1_s3_options" kindref="compound">S3Options</ref></type>
        <definition>static S3Options arrow::fs::S3Options::FromAccessKey</definition>
        <argsstring>(const std::string &amp;access_key, const std::string &amp;secret_key)</argsstring>
        <name>FromAccessKey</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>access_key</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>secret_key</declname>
        </param>
        <briefdescription>
<para>Initialize with explicit access and secret key. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/s3fs.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1fs_1_1_s3_options_1a28cc4c33771c24bf9be806c6faa6f40c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; <ref refid="structarrow_1_1fs_1_1_s3_options" kindref="compound">S3Options</ref> &gt;</type>
        <definition>static Result&lt;S3Options&gt; arrow::fs::S3Options::FromUri</definition>
        <argsstring>(const ::arrow::internal::Uri &amp;uri, std::string *out_path=NULLPTR)</argsstring>
        <name>FromUri</name>
        <param>
          <type>const ::arrow::internal::Uri &amp;</type>
          <declname>uri</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>out_path</declname>
          <defval><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/s3fs.h" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1fs_1_1_s3_options_1a61e6e4f21918b74d5c44c9aca8e0607e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; <ref refid="structarrow_1_1fs_1_1_s3_options" kindref="compound">S3Options</ref> &gt;</type>
        <definition>static Result&lt;S3Options&gt; arrow::fs::S3Options::FromUri</definition>
        <argsstring>(const std::string &amp;uri, std::string *out_path=NULLPTR)</argsstring>
        <name>FromUri</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>uri</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>out_path</declname>
          <defval><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/s3fs.h" line="80" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Options for the <ref refid="classarrow_1_1fs_1_1_s3_file_system" kindref="compound">S3FileSystem</ref> implementation. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/arrow/filesystem/s3fs.h" line="42" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/s3fs.h" bodystart="42" bodyend="82"/>
    <listofallmembers>
      <member refid="structarrow_1_1fs_1_1_s3_options_1a6ea875c0f46c26e82b68211042d2b7b8" prot="public" virt="non-virtual"><scope>arrow::fs::S3Options</scope><name>background_writes</name></member>
      <member refid="structarrow_1_1fs_1_1_s3_options_1a6559eed9bb61e952ce22b732bfa9f5ff" prot="public" virt="non-virtual"><scope>arrow::fs::S3Options</scope><name>ConfigureAccessKey</name></member>
      <member refid="structarrow_1_1fs_1_1_s3_options_1abe2b5fcb1b150280dea1706c84433e24" prot="public" virt="non-virtual"><scope>arrow::fs::S3Options</scope><name>ConfigureDefaultCredentials</name></member>
      <member refid="structarrow_1_1fs_1_1_s3_options_1aa271fb7d2d253ed48ad88cf601a9f1cb" prot="public" virt="non-virtual"><scope>arrow::fs::S3Options</scope><name>credentials_provider</name></member>
      <member refid="structarrow_1_1fs_1_1_s3_options_1a8682834dd9717a0ce97b27a836c6f287" prot="public" virt="non-virtual"><scope>arrow::fs::S3Options</scope><name>Defaults</name></member>
      <member refid="structarrow_1_1fs_1_1_s3_options_1af09fdf28a8c94f1f160256743b9b8e78" prot="public" virt="non-virtual"><scope>arrow::fs::S3Options</scope><name>endpoint_override</name></member>
      <member refid="structarrow_1_1fs_1_1_s3_options_1a1e67f43468ca249c3934f629564bc185" prot="public" virt="non-virtual"><scope>arrow::fs::S3Options</scope><name>Equals</name></member>
      <member refid="structarrow_1_1fs_1_1_s3_options_1a310726075455be5db59ef68bd4e2ecc5" prot="public" virt="non-virtual"><scope>arrow::fs::S3Options</scope><name>FromAccessKey</name></member>
      <member refid="structarrow_1_1fs_1_1_s3_options_1a28cc4c33771c24bf9be806c6faa6f40c" prot="public" virt="non-virtual"><scope>arrow::fs::S3Options</scope><name>FromUri</name></member>
      <member refid="structarrow_1_1fs_1_1_s3_options_1a61e6e4f21918b74d5c44c9aca8e0607e" prot="public" virt="non-virtual"><scope>arrow::fs::S3Options</scope><name>FromUri</name></member>
      <member refid="structarrow_1_1fs_1_1_s3_options_1a596ea08c626ba6ad61aa00eee4978b7a" prot="public" virt="non-virtual"><scope>arrow::fs::S3Options</scope><name>GetAccessKey</name></member>
      <member refid="structarrow_1_1fs_1_1_s3_options_1af682a7152e855fbe44f8fe6b74c2c241" prot="public" virt="non-virtual"><scope>arrow::fs::S3Options</scope><name>GetSecretKey</name></member>
      <member refid="structarrow_1_1fs_1_1_s3_options_1a49de2206208b9cecdeae88419ca48272" prot="public" virt="non-virtual"><scope>arrow::fs::S3Options</scope><name>region</name></member>
      <member refid="structarrow_1_1fs_1_1_s3_options_1a9e70452c5f524e3f55710a5e5b839c58" prot="public" virt="non-virtual"><scope>arrow::fs::S3Options</scope><name>scheme</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
