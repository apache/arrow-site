<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1io_1_1_slow_random_access_file" kind="class" language="C++" prot="public">
    <compoundname>arrow::io::SlowRandomAccessFile</compoundname>
    <basecompoundref refid="classarrow_1_1io_1_1_slow_input_stream_base" prot="public" virt="non-virtual">arrow::io::SlowInputStreamBase&lt; RandomAccessFile &gt;</basecompoundref>
    <includes refid="slow_8h" local="no">arrow/io/slow.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1io_1_1_slow_random_access_file_1abfdd750d262b221b3f679914240320c2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::io::SlowRandomAccessFile::~SlowRandomAccessFile</definition>
        <argsstring>() override</argsstring>
        <name>~SlowRandomAccessFile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/slow.h" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_slow_random_access_file_1a283b9f03ffe28f68799f4538eebe8801" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::SlowRandomAccessFile::Close</definition>
        <argsstring>() override</argsstring>
        <name>Close</name>
        <reimplements refid="classarrow_1_1io_1_1_file_interface_1ae0f46d227a430af180576715e7aa0b78">Close</reimplements>
        <briefdescription>
<para>Close the stream cleanly. </para>        </briefdescription>
        <detaileddescription>
<para>For writable streams, this will attempt to flush any pending data before releasing the underlying resource.</para><para>After <ref refid="classarrow_1_1io_1_1_slow_random_access_file_1a283b9f03ffe28f68799f4538eebe8801" kindref="member">Close()</ref> is called, <ref refid="classarrow_1_1io_1_1_slow_random_access_file_1a6d383408e55c8bb51de246ac114164e7" kindref="member">closed()</ref> returns true and the stream is not available for further operations. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/slow.h" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_slow_random_access_file_1a834f187d64aedbe1ffed1e5ea1879b83" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::SlowRandomAccessFile::Abort</definition>
        <argsstring>() override</argsstring>
        <name>Abort</name>
        <reimplements refid="classarrow_1_1io_1_1_file_interface_1a0fa59fe92d3c99c9d9701210626aac60">Abort</reimplements>
        <briefdescription>
<para>Close the stream abruptly. </para>        </briefdescription>
        <detaileddescription>
<para>This method does not guarantee that any pending data is flushed. It merely releases any underlying resource used by the stream for its operation.</para><para>After <ref refid="classarrow_1_1io_1_1_slow_random_access_file_1a834f187d64aedbe1ffed1e5ea1879b83" kindref="member">Abort()</ref> is called, <ref refid="classarrow_1_1io_1_1_slow_random_access_file_1a6d383408e55c8bb51de246ac114164e7" kindref="member">closed()</ref> returns true and the stream is not available for further operations. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/slow.h" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_slow_random_access_file_1a6d383408e55c8bb51de246ac114164e7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool arrow::io::SlowRandomAccessFile::closed</definition>
        <argsstring>() const override</argsstring>
        <name>closed</name>
        <reimplements refid="classarrow_1_1io_1_1_file_interface_1a5ba1d2c3cec2e05e7b0018624f19c10b">closed</reimplements>
        <briefdescription>
<para>Return whether the stream is closed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/slow.h" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_slow_random_access_file_1a6c93bb35fe59c65235e1a16c7e242514" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; int64_t &gt;</type>
        <definition>Result&lt;int64_t&gt; arrow::io::SlowRandomAccessFile::Read</definition>
        <argsstring>(int64_t nbytes, void *out) override</argsstring>
        <name>Read</name>
        <reimplements refid="classarrow_1_1io_1_1_readable_1ab94d6d47006df39f6cf77c078a61b8d8">Read</reimplements>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Read data from current file position. </para>        </briefdescription>
        <detaileddescription>
<para>Read at most <computeroutput>nbytes</computeroutput> from the current file position into <computeroutput>out</computeroutput>. The number of bytes read is returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/slow.h" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_slow_random_access_file_1a5b37b8080eebb97e828d3b64aeead68a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;Buffer&gt; &gt; arrow::io::SlowRandomAccessFile::Read</definition>
        <argsstring>(int64_t nbytes) override</argsstring>
        <name>Read</name>
        <reimplements refid="classarrow_1_1io_1_1_readable_1aca2d005299c3af1092bedff34b5b015b">Read</reimplements>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
<para>Read data from current file position. </para>        </briefdescription>
        <detaileddescription>
<para>Read at most <computeroutput>nbytes</computeroutput> from the current file position. Less bytes may be read if EOF is reached. This method updates the current file position.</para><para>In some cases (e.g. a memory-mapped file), this method may avoid a memory copy. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/slow.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_slow_random_access_file_1a86ae96dc45f3c9cf982afc1b36f1241a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; int64_t &gt;</type>
        <definition>Result&lt;int64_t&gt; arrow::io::SlowRandomAccessFile::ReadAt</definition>
        <argsstring>(int64_t position, int64_t nbytes, void *out) override</argsstring>
        <name>ReadAt</name>
        <reimplements refid="classarrow_1_1io_1_1_random_access_file_1adb9d40656e516d6b77ee2bdfc00126f3">ReadAt</reimplements>
        <param>
          <type>int64_t</type>
          <declname>position</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Read data from given file position. </para>        </briefdescription>
        <detaileddescription>
<para>At most <computeroutput>nbytes</computeroutput> bytes are read. The number of bytes read is returned (it can be less than <computeroutput>nbytes</computeroutput> if EOF is reached).</para><para>This method can be safely called from multiple threads concurrently. It is unspecified whether this method updates the file position or not.</para><para>The default RandomAccessFile-provided implementation uses <ref refid="classarrow_1_1io_1_1_slow_random_access_file_1a704502a8a8d60eb1f0e4a4c86fab9657" kindref="member">Seek()</ref> and <ref refid="classarrow_1_1io_1_1_slow_random_access_file_1a6c93bb35fe59c65235e1a16c7e242514" kindref="member">Read()</ref>, but subclasses may override it with a more efficient implementation that doesn&apos;t depend on implicit file positioning.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">position</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to read bytes from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to read bytes into </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes read, or an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/slow.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_slow_random_access_file_1a048d2c56de024066b0a95313306da147" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;Buffer&gt; &gt; arrow::io::SlowRandomAccessFile::ReadAt</definition>
        <argsstring>(int64_t position, int64_t nbytes) override</argsstring>
        <name>ReadAt</name>
        <reimplements refid="classarrow_1_1io_1_1_random_access_file_1a562433f2be06021acb9abd20bd5a8219">ReadAt</reimplements>
        <param>
          <type>int64_t</type>
          <declname>position</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
<para>Read data from given file position. </para>        </briefdescription>
        <detaileddescription>
<para>At most <computeroutput>nbytes</computeroutput> bytes are read, but it can be less if EOF is reached.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">position</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to read bytes from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to read </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A buffer containing the bytes read, or an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/slow.h" line="109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_slow_random_access_file_1aa8409e0267bd83a1a6bb1753eaa64939" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; util::string_view &gt;</type>
        <definition>Result&lt;util::string_view&gt; arrow::io::SlowRandomAccessFile::Peek</definition>
        <argsstring>(int64_t nbytes) override</argsstring>
        <name>Peek</name>
        <reimplements refid="classarrow_1_1io_1_1_input_stream_1aba80e2518abc166625077bd065ae3721">Peek</reimplements>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
<para>Return zero-copy string_view to upcoming bytes. </para>        </briefdescription>
        <detaileddescription>
<para>Do not modify the stream position. The view becomes invalid after any operation on the stream. May trigger buffering if the requested size is larger than the number of buffered bytes.</para><para>May return NotImplemented on streams that don&apos;t support it.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>the maximum number of bytes to see </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/slow.h" line="110" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_slow_random_access_file_1a5409c5054e56993eba44defc97e5f664" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; int64_t &gt;</type>
        <definition>Result&lt;int64_t&gt; arrow::io::SlowRandomAccessFile::GetSize</definition>
        <argsstring>() override</argsstring>
        <name>GetSize</name>
        <reimplements refid="classarrow_1_1io_1_1_random_access_file_1a2a476c2a6ad474e123d1aab20be289c4">GetSize</reimplements>
        <briefdescription>
<para>Return the total file size in bytes. </para>        </briefdescription>
        <detaileddescription>
<para>This method does not read or move the current file position, so is safe to call concurrently with e.g. <ref refid="classarrow_1_1io_1_1_slow_random_access_file_1a86ae96dc45f3c9cf982afc1b36f1241a" kindref="member">ReadAt()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/slow.h" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_slow_random_access_file_1a704502a8a8d60eb1f0e4a4c86fab9657" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::SlowRandomAccessFile::Seek</definition>
        <argsstring>(int64_t position) override</argsstring>
        <name>Seek</name>
        <reimplements refid="classarrow_1_1io_1_1_seekable_1a410ba0e0932dbcb939b570ee3c8c6d25">Seek</reimplements>
        <param>
          <type>int64_t</type>
          <declname>position</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/slow.h" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_slow_random_access_file_1a184453b3e588f4f085cb68d6b8bf7e20" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; int64_t &gt;</type>
        <definition>Result&lt;int64_t&gt; arrow::io::SlowRandomAccessFile::Tell</definition>
        <argsstring>() const override</argsstring>
        <name>Tell</name>
        <reimplements refid="classarrow_1_1io_1_1_file_interface_1ac6c6709147a46cd7f45d0779c1819ce6">Tell</reimplements>
        <briefdescription>
<para>Return the position in this stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/slow.h" line="114" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A <ref refid="classarrow_1_1io_1_1_random_access_file" kindref="compound">RandomAccessFile</ref> wrapper that makes reads slower. </para>    </briefdescription>
    <detaileddescription>
<para>Similar to <ref refid="classarrow_1_1io_1_1_slow_input_stream" kindref="compound">SlowInputStream</ref>, but allows random access and seeking. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="4206">
        <label>arrow::io::Readable</label>
        <link refid="classarrow_1_1io_1_1_readable"/>
      </node>
      <node id="4201">
        <label>arrow::io::SlowInputStreamBase&lt; RandomAccessFile &gt;</label>
        <link refid="classarrow_1_1io_1_1_slow_input_stream_base"/>
        <childnode refid="4202" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4200">
        <label>arrow::io::SlowRandomAccessFile</label>
        <link refid="classarrow_1_1io_1_1_slow_random_access_file"/>
        <childnode refid="4201" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4205">
        <label>arrow::io::FileInterface</label>
        <link refid="classarrow_1_1io_1_1_file_interface"/>
      </node>
      <node id="4207">
        <label>arrow::io::Seekable</label>
        <link refid="classarrow_1_1io_1_1_seekable"/>
      </node>
      <node id="4203">
        <label>std::enable_shared_from_this&lt; RandomAccessFile &gt;</label>
      </node>
      <node id="4204">
        <label>arrow::io::InputStream</label>
        <link refid="classarrow_1_1io_1_1_input_stream"/>
        <childnode refid="4205" relation="public-inheritance">
        </childnode>
        <childnode refid="4206" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4202">
        <label>arrow::io::RandomAccessFile</label>
        <link refid="classarrow_1_1io_1_1_random_access_file"/>
        <childnode refid="4203" relation="public-inheritance">
        </childnode>
        <childnode refid="4204" relation="public-inheritance">
        </childnode>
        <childnode refid="4207" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4214">
        <label>arrow::io::Readable</label>
        <link refid="classarrow_1_1io_1_1_readable"/>
      </node>
      <node id="4209">
        <label>arrow::io::SlowInputStreamBase&lt; RandomAccessFile &gt;</label>
        <link refid="classarrow_1_1io_1_1_slow_input_stream_base"/>
        <childnode refid="4210" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4208">
        <label>arrow::io::SlowRandomAccessFile</label>
        <link refid="classarrow_1_1io_1_1_slow_random_access_file"/>
        <childnode refid="4209" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4213">
        <label>arrow::io::FileInterface</label>
        <link refid="classarrow_1_1io_1_1_file_interface"/>
      </node>
      <node id="4215">
        <label>arrow::io::Seekable</label>
        <link refid="classarrow_1_1io_1_1_seekable"/>
      </node>
      <node id="4211">
        <label>std::enable_shared_from_this&lt; RandomAccessFile &gt;</label>
      </node>
      <node id="4212">
        <label>arrow::io::InputStream</label>
        <link refid="classarrow_1_1io_1_1_input_stream"/>
        <childnode refid="4213" relation="public-inheritance">
        </childnode>
        <childnode refid="4214" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4210">
        <label>arrow::io::RandomAccessFile</label>
        <link refid="classarrow_1_1io_1_1_random_access_file"/>
        <childnode refid="4211" relation="public-inheritance">
        </childnode>
        <childnode refid="4212" relation="public-inheritance">
        </childnode>
        <childnode refid="4215" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/io/slow.h" line="96" column="1" bodyfile="/arrow/cpp/src/arrow/io/slow.h" bodystart="96" bodyend="115"/>
    <listofallmembers>
      <member refid="classarrow_1_1io_1_1_slow_random_access_file_1a834f187d64aedbe1ffed1e5ea1879b83" prot="public" virt="virtual"><scope>arrow::io::SlowRandomAccessFile</scope><name>Abort</name></member>
      <member refid="classarrow_1_1io_1_1_input_stream_1ab5e2e1bdb05f7847363461bc3b90d386" prot="public" virt="non-virtual"><scope>arrow::io::SlowRandomAccessFile</scope><name>Advance</name></member>
      <member refid="classarrow_1_1io_1_1_slow_random_access_file_1a283b9f03ffe28f68799f4538eebe8801" prot="public" virt="virtual"><scope>arrow::io::SlowRandomAccessFile</scope><name>Close</name></member>
      <member refid="classarrow_1_1io_1_1_slow_random_access_file_1a6d383408e55c8bb51de246ac114164e7" prot="public" virt="virtual"><scope>arrow::io::SlowRandomAccessFile</scope><name>closed</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1afea9126bb21e3720212a826aa78b5534" prot="protected" virt="non-virtual"><scope>arrow::io::SlowRandomAccessFile</scope><name>FileInterface</name></member>
      <member refid="classarrow_1_1io_1_1_slow_random_access_file_1a5409c5054e56993eba44defc97e5f664" prot="public" virt="virtual"><scope>arrow::io::SlowRandomAccessFile</scope><name>GetSize</name></member>
      <member refid="classarrow_1_1io_1_1_random_access_file_1a077348c5eb5ad0147582a3e5aa073847" prot="public" virt="non-virtual"><scope>arrow::io::SlowRandomAccessFile</scope><name>GetStream</name></member>
      <member refid="classarrow_1_1io_1_1_input_stream_1aeb778572d0e9bf4902dbfbbc5353d7fd" prot="protected" virt="non-virtual"><scope>arrow::io::SlowRandomAccessFile</scope><name>InputStream</name></member>
      <member refid="classarrow_1_1io_1_1_slow_input_stream_base_1a14811e4447e25e0ec8a4fc5ecd1e2663" prot="protected" virt="non-virtual"><scope>arrow::io::SlowRandomAccessFile</scope><name>latencies_</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1a75a3739361570bb121b9adb04d5d8686" prot="public" virt="non-virtual"><scope>arrow::io::SlowRandomAccessFile</scope><name>mode</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1a504d0410eb6066316365a4549d000ee0" prot="protected" virt="non-virtual"><scope>arrow::io::SlowRandomAccessFile</scope><name>mode_</name></member>
      <member refid="classarrow_1_1io_1_1_slow_random_access_file_1aa8409e0267bd83a1a6bb1753eaa64939" prot="public" virt="virtual"><scope>arrow::io::SlowRandomAccessFile</scope><name>Peek</name></member>
      <member refid="classarrow_1_1io_1_1_random_access_file_1a32c1cb28aa86db601b68a96615a3161c" prot="protected" virt="non-virtual"><scope>arrow::io::SlowRandomAccessFile</scope><name>RandomAccessFile</name></member>
      <member refid="classarrow_1_1io_1_1_slow_random_access_file_1a6c93bb35fe59c65235e1a16c7e242514" prot="public" virt="virtual"><scope>arrow::io::SlowRandomAccessFile</scope><name>Read</name></member>
      <member refid="classarrow_1_1io_1_1_slow_random_access_file_1a5b37b8080eebb97e828d3b64aeead68a" prot="public" virt="virtual"><scope>arrow::io::SlowRandomAccessFile</scope><name>Read</name></member>
      <member refid="classarrow_1_1io_1_1_random_access_file_1ae37e086e71206380188a28fa5b125ac4" prot="public" virt="virtual"><scope>arrow::io::SlowRandomAccessFile</scope><name>ReadAsync</name></member>
      <member refid="classarrow_1_1io_1_1_slow_random_access_file_1a86ae96dc45f3c9cf982afc1b36f1241a" prot="public" virt="virtual"><scope>arrow::io::SlowRandomAccessFile</scope><name>ReadAt</name></member>
      <member refid="classarrow_1_1io_1_1_slow_random_access_file_1a048d2c56de024066b0a95313306da147" prot="public" virt="virtual"><scope>arrow::io::SlowRandomAccessFile</scope><name>ReadAt</name></member>
      <member refid="classarrow_1_1io_1_1_slow_random_access_file_1a704502a8a8d60eb1f0e4a4c86fab9657" prot="public" virt="virtual"><scope>arrow::io::SlowRandomAccessFile</scope><name>Seek</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1af3dd01a780076e39a34770beb513f71f" prot="protected" virt="non-virtual"><scope>arrow::io::SlowRandomAccessFile</scope><name>set_mode</name></member>
      <member refid="classarrow_1_1io_1_1_slow_input_stream_base_1add43b0dde031f2bd85bc9ab12d27db43" prot="public" virt="non-virtual"><scope>arrow::io::SlowRandomAccessFile</scope><name>SlowInputStreamBase</name></member>
      <member refid="classarrow_1_1io_1_1_slow_input_stream_base_1abb012c8422693357f9c158ddb0e348f6" prot="public" virt="non-virtual"><scope>arrow::io::SlowRandomAccessFile</scope><name>SlowInputStreamBase</name></member>
      <member refid="classarrow_1_1io_1_1_slow_input_stream_base_1ae8aff3850c6d6e5f597be8d4c0ba580b" prot="public" virt="non-virtual"><scope>arrow::io::SlowRandomAccessFile</scope><name>SlowInputStreamBase</name></member>
      <member refid="classarrow_1_1io_1_1_slow_input_stream_base_1a371552d18efa9ead7c46c4f602292b08" prot="protected" virt="non-virtual"><scope>arrow::io::SlowRandomAccessFile</scope><name>stream_</name></member>
      <member refid="classarrow_1_1io_1_1_input_stream_1a2b9978739db7fa75ba81e794bfba2a64" prot="public" virt="virtual"><scope>arrow::io::SlowRandomAccessFile</scope><name>supports_zero_copy</name></member>
      <member refid="classarrow_1_1io_1_1_slow_random_access_file_1a184453b3e588f4f085cb68d6b8bf7e20" prot="public" virt="virtual"><scope>arrow::io::SlowRandomAccessFile</scope><name>Tell</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1aa42dcdfad00634f01192b39f1d9b4929" prot="public" virt="pure-virtual"><scope>arrow::io::SlowRandomAccessFile</scope><name>~FileInterface</name></member>
      <member refid="classarrow_1_1io_1_1_random_access_file_1a30c6917dfe0b6e508dac2ecc81917187" prot="public" virt="non-virtual"><scope>arrow::io::SlowRandomAccessFile</scope><name>~RandomAccessFile</name></member>
      <member refid="classarrow_1_1io_1_1_readable_1a96a411d4494a9872d7eef4f8bb6396b4" prot="public" virt="virtual"><scope>arrow::io::SlowRandomAccessFile</scope><name>~Readable</name></member>
      <member refid="classarrow_1_1io_1_1_seekable_1a7642c30d2f852e0f79fec036a94ca093" prot="public" virt="virtual"><scope>arrow::io::SlowRandomAccessFile</scope><name>~Seekable</name></member>
      <member refid="classarrow_1_1io_1_1_slow_random_access_file_1abfdd750d262b221b3f679914240320c2" prot="public" virt="non-virtual"><scope>arrow::io::SlowRandomAccessFile</scope><name>~SlowRandomAccessFile</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
