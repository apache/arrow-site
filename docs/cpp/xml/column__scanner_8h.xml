<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="column__scanner_8h" kind="file" language="C++">
    <compoundname>column_scanner.h</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">cstdint</includes>
    <includes local="no">memory</includes>
    <includes local="no">ostream</includes>
    <includes local="no">string</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes refid="column__reader_8h" local="yes">parquet/column_reader.h</includes>
    <includes refid="exception_8h" local="yes">parquet/exception.h</includes>
    <includes refid="parquet_2platform_8h" local="yes">parquet/platform.h</includes>
    <includes refid="schema_8h" local="yes">parquet/schema.h</includes>
    <includes refid="parquet_2types_8h" local="yes">parquet/types.h</includes>
    <includedby refid="parquet_2api_2reader_8h" local="yes">/arrow/cpp/src/parquet/api/reader.h</includedby>
    <incdepgraph>
      <node id="18923">
        <label>atomic</label>
      </node>
      <node id="18910">
        <label>arrow/util/compare.h</label>
        <link refid="util_2compare_8h"/>
        <childnode refid="18892" relation="include">
        </childnode>
        <childnode refid="18907" relation="include">
        </childnode>
        <childnode refid="18895" relation="include">
        </childnode>
        <childnode refid="18902" relation="include">
        </childnode>
      </node>
      <node id="18931">
        <label>limits</label>
      </node>
      <node id="18891">
        <label>cstdint</label>
      </node>
      <node id="18905">
        <label>arrow/buffer.h</label>
        <link refid="buffer_8h"/>
        <childnode refid="18891" relation="include">
        </childnode>
        <childnode refid="18906" relation="include">
        </childnode>
        <childnode refid="18892" relation="include">
        </childnode>
        <childnode refid="18894" relation="include">
        </childnode>
        <childnode refid="18907" relation="include">
        </childnode>
        <childnode refid="18895" relation="include">
        </childnode>
        <childnode refid="18896" relation="include">
        </childnode>
        <childnode refid="18908" relation="include">
        </childnode>
        <childnode refid="18909" relation="include">
        </childnode>
        <childnode refid="18911" relation="include">
        </childnode>
        <childnode refid="18901" relation="include">
        </childnode>
        <childnode refid="18902" relation="include">
        </childnode>
        <childnode refid="18914" relation="include">
        </childnode>
        <childnode refid="18903" relation="include">
        </childnode>
      </node>
      <node id="18925">
        <label>endian.h</label>
      </node>
      <node id="18911">
        <label>arrow/status.h</label>
        <link refid="status_8h"/>
        <childnode refid="18906" relation="include">
        </childnode>
        <childnode refid="18912" relation="include">
        </childnode>
        <childnode refid="18892" relation="include">
        </childnode>
        <childnode refid="18894" relation="include">
        </childnode>
        <childnode refid="18895" relation="include">
        </childnode>
        <childnode refid="18910" relation="include">
        </childnode>
        <childnode refid="18902" relation="include">
        </childnode>
        <childnode refid="18913" relation="include">
        </childnode>
        <childnode refid="18903" relation="include">
        </childnode>
      </node>
      <node id="18932">
        <label>arrow/util/functional.h</label>
        <link refid="functional_8h"/>
        <childnode refid="18933" relation="include">
        </childnode>
        <childnode refid="18907" relation="include">
        </childnode>
        <childnode refid="18902" relation="include">
        </childnode>
      </node>
      <node id="18904">
        <label>parquet/platform.h</label>
        <link refid="parquet_2platform_8h"/>
        <childnode refid="18891" relation="include">
        </childnode>
        <childnode refid="18892" relation="include">
        </childnode>
        <childnode refid="18905" relation="include">
        </childnode>
        <childnode refid="18916" relation="include">
        </childnode>
        <childnode refid="18917" relation="include">
        </childnode>
        <childnode refid="18922" relation="include">
        </childnode>
        <childnode refid="18911" relation="include">
        </childnode>
        <childnode refid="18924" relation="include">
        </childnode>
        <childnode refid="18935" relation="include">
        </childnode>
        <childnode refid="18902" relation="include">
        </childnode>
        <childnode refid="18914" relation="include">
        </childnode>
      </node>
      <node id="18901">
        <label>arrow/type_fwd.h</label>
        <link refid="type__fwd_8h"/>
        <childnode refid="18892" relation="include">
        </childnode>
        <childnode refid="18894" relation="include">
        </childnode>
        <childnode refid="18896" relation="include">
        </childnode>
        <childnode refid="18902" relation="include">
        </childnode>
        <childnode refid="18903" relation="include">
        </childnode>
      </node>
      <node id="18916">
        <label>arrow/io/interfaces.h</label>
        <link refid="interfaces_8h"/>
        <childnode refid="18891" relation="include">
        </childnode>
        <childnode refid="18892" relation="include">
        </childnode>
        <childnode refid="18894" relation="include">
        </childnode>
        <childnode refid="18896" relation="include">
        </childnode>
        <childnode refid="18909" relation="include">
        </childnode>
        <childnode refid="18901" relation="include">
        </childnode>
        <childnode refid="18902" relation="include">
        </childnode>
        <childnode refid="18914" relation="include">
        </childnode>
        <childnode refid="18903" relation="include">
        </childnode>
      </node>
      <node id="18930">
        <label>cmath</label>
      </node>
      <node id="18929">
        <label>cassert</label>
      </node>
      <node id="18921">
        <label>arrow/util/checked_cast.h</label>
        <link refid="checked__cast_8h"/>
        <childnode refid="18892" relation="include">
        </childnode>
        <childnode refid="18907" relation="include">
        </childnode>
      </node>
      <node id="18894">
        <label>string</label>
      </node>
      <node id="18915">
        <label>arrow/vendored/string_view.hpp</label>
      </node>
      <node id="18898">
        <label>parquet/exception.h</label>
        <link refid="exception_8h"/>
        <childnode refid="18899" relation="include">
        </childnode>
        <childnode refid="18900" relation="include">
        </childnode>
        <childnode refid="18894" relation="include">
        </childnode>
        <childnode refid="18895" relation="include">
        </childnode>
        <childnode refid="18901" relation="include">
        </childnode>
        <childnode refid="18904" relation="include">
        </childnode>
      </node>
      <node id="18899">
        <label>exception</label>
      </node>
      <node id="18893">
        <label>ostream</label>
      </node>
      <node id="18889">
        <label>/arrow/cpp/src/parquet/column_scanner.h</label>
        <link refid="column__scanner_8h"/>
        <childnode refid="18890" relation="include">
        </childnode>
        <childnode refid="18891" relation="include">
        </childnode>
        <childnode refid="18892" relation="include">
        </childnode>
        <childnode refid="18893" relation="include">
        </childnode>
        <childnode refid="18894" relation="include">
        </childnode>
        <childnode refid="18895" relation="include">
        </childnode>
        <childnode refid="18896" relation="include">
        </childnode>
        <childnode refid="18897" relation="include">
        </childnode>
        <childnode refid="18898" relation="include">
        </childnode>
        <childnode refid="18904" relation="include">
        </childnode>
        <childnode refid="18936" relation="include">
        </childnode>
        <childnode refid="18938" relation="include">
        </childnode>
      </node>
      <node id="18903">
        <label>arrow/util/visibility.h</label>
        <link refid="arrow_2util_2visibility_8h"/>
      </node>
      <node id="18908">
        <label>arrow/device.h</label>
        <link refid="device_8h"/>
        <childnode refid="18891" relation="include">
        </childnode>
        <childnode refid="18892" relation="include">
        </childnode>
        <childnode refid="18894" relation="include">
        </childnode>
        <childnode refid="18909" relation="include">
        </childnode>
        <childnode refid="18901" relation="include">
        </childnode>
        <childnode refid="18910" relation="include">
        </childnode>
        <childnode refid="18902" relation="include">
        </childnode>
        <childnode refid="18903" relation="include">
        </childnode>
      </node>
      <node id="18922">
        <label>arrow/memory_pool.h</label>
        <link refid="memory__pool_8h"/>
        <childnode refid="18923" relation="include">
        </childnode>
        <childnode refid="18891" relation="include">
        </childnode>
        <childnode refid="18892" relation="include">
        </childnode>
        <childnode refid="18894" relation="include">
        </childnode>
        <childnode refid="18911" relation="include">
        </childnode>
        <childnode refid="18901" relation="include">
        </childnode>
        <childnode refid="18903" relation="include">
        </childnode>
      </node>
      <node id="18924">
        <label>arrow/util/bit_util.h</label>
        <link refid="bit__util_8h"/>
        <childnode refid="18925" relation="include">
        </childnode>
        <childnode refid="18926" relation="include">
        </childnode>
        <childnode refid="18927" relation="include">
        </childnode>
        <childnode refid="18928" relation="include">
        </childnode>
        <childnode refid="18929" relation="include">
        </childnode>
        <childnode refid="18930" relation="include">
        </childnode>
        <childnode refid="18891" relation="include">
        </childnode>
        <childnode refid="18906" relation="include">
        </childnode>
        <childnode refid="18931" relation="include">
        </childnode>
        <childnode refid="18892" relation="include">
        </childnode>
        <childnode refid="18894" relation="include">
        </childnode>
        <childnode refid="18907" relation="include">
        </childnode>
        <childnode refid="18895" relation="include">
        </childnode>
        <childnode refid="18896" relation="include">
        </childnode>
        <childnode refid="18905" relation="include">
        </childnode>
        <childnode refid="18919" relation="include">
        </childnode>
        <childnode refid="18910" relation="include">
        </childnode>
        <childnode refid="18932" relation="include">
        </childnode>
        <childnode refid="18902" relation="include">
        </childnode>
        <childnode refid="18913" relation="include">
        </childnode>
        <childnode refid="18914" relation="include">
        </childnode>
        <childnode refid="18934" relation="include">
        </childnode>
        <childnode refid="18903" relation="include">
        </childnode>
      </node>
      <node id="18928">
        <label>bitset</label>
      </node>
      <node id="18933">
        <label>tuple</label>
      </node>
      <node id="18897">
        <label>parquet/column_reader.h</label>
        <link refid="column__reader_8h"/>
        <childnode refid="18891" relation="include">
        </childnode>
        <childnode refid="18892" relation="include">
        </childnode>
        <childnode refid="18895" relation="include">
        </childnode>
        <childnode refid="18896" relation="include">
        </childnode>
        <childnode refid="18898" relation="include">
        </childnode>
        <childnode refid="18904" relation="include">
        </childnode>
        <childnode refid="18936" relation="include">
        </childnode>
        <childnode refid="18938" relation="include">
        </childnode>
      </node>
      <node id="18896">
        <label>vector</label>
      </node>
      <node id="18920">
        <label>new</label>
      </node>
      <node id="18895">
        <label>utility</label>
      </node>
      <node id="18914">
        <label>arrow/util/string_view.h</label>
        <link refid="string__view_8h"/>
        <childnode refid="18891" relation="include">
        </childnode>
        <childnode refid="18894" relation="include">
        </childnode>
        <childnode refid="18915" relation="include">
        </childnode>
      </node>
      <node id="18927">
        <label>array</label>
      </node>
      <node id="18900">
        <label>sstream</label>
      </node>
      <node id="18917">
        <label>arrow/io/memory.h</label>
        <link refid="io_2memory_8h"/>
        <childnode refid="18891" relation="include">
        </childnode>
        <childnode refid="18892" relation="include">
        </childnode>
        <childnode refid="18918" relation="include">
        </childnode>
        <childnode refid="18916" relation="include">
        </childnode>
        <childnode refid="18901" relation="include">
        </childnode>
        <childnode refid="18914" relation="include">
        </childnode>
        <childnode refid="18903" relation="include">
        </childnode>
      </node>
      <node id="18936">
        <label>parquet/schema.h</label>
        <link refid="schema_8h"/>
        <childnode refid="18891" relation="include">
        </childnode>
        <childnode refid="18892" relation="include">
        </childnode>
        <childnode refid="18893" relation="include">
        </childnode>
        <childnode refid="18894" relation="include">
        </childnode>
        <childnode refid="18937" relation="include">
        </childnode>
        <childnode refid="18895" relation="include">
        </childnode>
        <childnode refid="18896" relation="include">
        </childnode>
        <childnode refid="18904" relation="include">
        </childnode>
        <childnode refid="18938" relation="include">
        </childnode>
      </node>
      <node id="18909">
        <label>arrow/io/type_fwd.h</label>
        <link refid="io_2type__fwd_8h"/>
      </node>
      <node id="18912">
        <label>iosfwd</label>
      </node>
      <node id="18918">
        <label>arrow/io/concurrency.h</label>
        <link refid="concurrency_8h"/>
        <childnode refid="18892" relation="include">
        </childnode>
        <childnode refid="18916" relation="include">
        </childnode>
        <childnode refid="18919" relation="include">
        </childnode>
        <childnode refid="18911" relation="include">
        </childnode>
        <childnode refid="18921" relation="include">
        </childnode>
        <childnode refid="18902" relation="include">
        </childnode>
        <childnode refid="18903" relation="include">
        </childnode>
      </node>
      <node id="18937">
        <label>unordered_map</label>
      </node>
      <node id="18919">
        <label>arrow/result.h</label>
        <link refid="result_8h"/>
        <childnode refid="18920" relation="include">
        </childnode>
        <childnode refid="18894" relation="include">
        </childnode>
        <childnode refid="18907" relation="include">
        </childnode>
        <childnode refid="18895" relation="include">
        </childnode>
        <childnode refid="18911" relation="include">
        </childnode>
        <childnode refid="18910" relation="include">
        </childnode>
      </node>
      <node id="18907">
        <label>type_traits</label>
      </node>
      <node id="18935">
        <label>arrow/util/compression.h</label>
        <link refid="compression_8h"/>
        <childnode refid="18891" relation="include">
        </childnode>
        <childnode refid="18931" relation="include">
        </childnode>
        <childnode refid="18892" relation="include">
        </childnode>
        <childnode refid="18894" relation="include">
        </childnode>
        <childnode refid="18919" relation="include">
        </childnode>
        <childnode refid="18911" relation="include">
        </childnode>
        <childnode refid="18903" relation="include">
        </childnode>
      </node>
      <node id="18926">
        <label>algorithm</label>
      </node>
      <node id="18890">
        <label>stdio.h</label>
      </node>
      <node id="18939">
        <label>arrow/util/int_util.h</label>
        <link refid="int__util_8h"/>
        <childnode refid="18891" relation="include">
        </childnode>
        <childnode refid="18931" relation="include">
        </childnode>
        <childnode refid="18907" relation="include">
        </childnode>
        <childnode refid="18903" relation="include">
        </childnode>
      </node>
      <node id="18906">
        <label>cstring</label>
      </node>
      <node id="18938">
        <label>parquet/types.h</label>
        <link refid="parquet_2types_8h"/>
        <childnode refid="18926" relation="include">
        </childnode>
        <childnode refid="18891" relation="include">
        </childnode>
        <childnode refid="18906" relation="include">
        </childnode>
        <childnode refid="18892" relation="include">
        </childnode>
        <childnode refid="18900" relation="include">
        </childnode>
        <childnode refid="18894" relation="include">
        </childnode>
        <childnode refid="18939" relation="include">
        </childnode>
        <childnode refid="18914" relation="include">
        </childnode>
        <childnode refid="18904" relation="include">
        </childnode>
      </node>
      <node id="18913">
        <label>arrow/util/string_builder.h</label>
        <link refid="string__builder_8h"/>
        <childnode refid="18892" relation="include">
        </childnode>
        <childnode refid="18893" relation="include">
        </childnode>
        <childnode refid="18894" relation="include">
        </childnode>
        <childnode refid="18895" relation="include">
        </childnode>
        <childnode refid="18903" relation="include">
        </childnode>
      </node>
      <node id="18892">
        <label>memory</label>
      </node>
      <node id="18902">
        <label>arrow/util/macros.h</label>
        <link refid="macros_8h"/>
        <childnode refid="18891" relation="include">
        </childnode>
      </node>
      <node id="18934">
        <label>arrow/util/type_traits.h</label>
        <link refid="util_2type__traits_8h"/>
        <childnode refid="18907" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="18940">
        <label>/arrow/cpp/src/parquet/column_scanner.h</label>
        <link refid="column__scanner_8h"/>
        <childnode refid="18941" relation="include">
        </childnode>
      </node>
      <node id="18941">
        <label>/arrow/cpp/src/parquet/api/reader.h</label>
        <link refid="parquet_2api_2reader_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classparquet_1_1_scanner" prot="public">parquet::Scanner</innerclass>
    <innerclass refid="classparquet_1_1_typed_scanner" prot="public">parquet::TypedScanner</innerclass>
    <innernamespace refid="namespaceparquet">parquet</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="column__reader_8h" kindref="compound">parquet/column_reader.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="exception_8h" kindref="compound">parquet/exception.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="parquet_2platform_8h" kindref="compound">parquet/platform.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="schema_8h" kindref="compound">parquet/schema.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="parquet_2types_8h" kindref="compound">parquet/types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceparquet" kindref="compound">parquet</ref><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>int64_t<sp/>DEFAULT_SCANNER_BATCH_SIZE<sp/>=<sp/>128;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39" refid="classparquet_1_1_scanner" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">PARQUET_EXPORT<sp/><ref refid="classparquet_1_1_scanner" kindref="compound">Scanner</ref><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="41" refid="classparquet_1_1_scanner_1ab8c41bcaacf2a85c91fec5ce112cd28c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_scanner_1ab8c41bcaacf2a85c91fec5ce112cd28c" kindref="member">Scanner</ref>(std::shared_ptr&lt;ColumnReader&gt;<sp/>reader,</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>batch_size<sp/>=<sp/>DEFAULT_SCANNER_BATCH_SIZE,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::<ref refid="classarrow_1_1_memory_pool" kindref="compound">arrow::MemoryPool</ref>*<sp/>pool<sp/>=<sp/>::<ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">arrow::default_memory_pool</ref>())</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>batch_size_(batch_size),</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>level_offset_(0),</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>levels_buffered_(0),</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_buffer_(<ref refid="namespaceparquet_1a03bd342ae4d50b0b52f0c3ad6fd2d007" kindref="member">AllocateBuffer</ref>(pool)),</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_offset_(0),</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values_buffered_(0),</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reader_(<ref refid="namespacestd" kindref="compound">std</ref>::move(reader))<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>def_levels_.resize(descr()-&gt;max_definition_level()<sp/>&gt;<sp/>0<sp/>?<sp/>batch_size_<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>rep_levels_.resize(descr()-&gt;max_repetition_level()<sp/>&gt;<sp/>0<sp/>?<sp/>batch_size_<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55" refid="classparquet_1_1_scanner_1ab5d1a0e88092ac828e90ce0678b127b2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_scanner_1ab5d1a0e88092ac828e90ce0678b127b2" kindref="member">~Scanner</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Scanner&gt;<sp/>Make(</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;ColumnReader&gt;<sp/>col_reader,</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>batch_size<sp/>=<sp/>DEFAULT_SCANNER_BATCH_SIZE,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::<ref refid="classarrow_1_1_memory_pool" kindref="compound">arrow::MemoryPool</ref>*<sp/>pool<sp/>=<sp/>::<ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">arrow::default_memory_pool</ref>());</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>PrintNext(std::ostream&amp;<sp/>out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>with_levels<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64" refid="classparquet_1_1_scanner_1afe85dc1bc7859a8e0b5c8cfd79e52083" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_scanner_1afe85dc1bc7859a8e0b5c8cfd79e52083" kindref="member">HasNext</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>level_offset_<sp/>&lt;<sp/>levels_buffered_<sp/>||<sp/>reader_-&gt;HasNext();<sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66" refid="classparquet_1_1_scanner_1a78e33590d14008fb407acfad430ce013" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_column_descriptor" kindref="compound">ColumnDescriptor</ref>*<sp/><ref refid="classparquet_1_1_scanner_1a78e33590d14008fb407acfad430ce013" kindref="member">descr</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>reader_-&gt;descr();<sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68" refid="classparquet_1_1_scanner_1a7592811a80284998bdc23c043f2995db" refkind="member"><highlight class="normal"><sp/><sp/>int64_t<sp/><ref refid="classparquet_1_1_scanner_1a7592811a80284998bdc23c043f2995db" kindref="member">batch_size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>batch_size_;<sp/>}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70" refid="classparquet_1_1_scanner_1ac499d6423adc56c56b268044800cb3ad" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_scanner_1ac499d6423adc56c56b268044800cb3ad" kindref="member">SetBatchSize</ref>(int64_t<sp/>batch_size)<sp/>{<sp/>batch_size_<sp/>=<sp/>batch_size;<sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="73" refid="classparquet_1_1_scanner_1a21648d45b89d30755fd87ced6091c86e" refkind="member"><highlight class="normal"><sp/><sp/>int64_t<sp/><ref refid="classparquet_1_1_scanner_1a21648d45b89d30755fd87ced6091c86e" kindref="member">batch_size_</ref>;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="classparquet_1_1_scanner_1a99d531a9f73c66f0f3f4441c9a80fc35" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;int16_t&gt;<sp/><ref refid="classparquet_1_1_scanner_1a99d531a9f73c66f0f3f4441c9a80fc35" kindref="member">def_levels_</ref>;</highlight></codeline>
<codeline lineno="76" refid="classparquet_1_1_scanner_1aa37a305b04092e670c921520a82a00b5" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;int16_t&gt;<sp/><ref refid="classparquet_1_1_scanner_1aa37a305b04092e670c921520a82a00b5" kindref="member">rep_levels_</ref>;</highlight></codeline>
<codeline lineno="77" refid="classparquet_1_1_scanner_1a62d61605383341c6b97ad2e6dfab6f39" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_scanner_1a62d61605383341c6b97ad2e6dfab6f39" kindref="member">level_offset_</ref>;</highlight></codeline>
<codeline lineno="78" refid="classparquet_1_1_scanner_1ac30a31477cff1b595b2c89a387895ceb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_scanner_1ac30a31477cff1b595b2c89a387895ceb" kindref="member">levels_buffered_</ref>;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="classparquet_1_1_scanner_1addbc3b8b0e56d4fb48fb457e9a09def6" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;ResizableBuffer&gt;<sp/><ref refid="classparquet_1_1_scanner_1addbc3b8b0e56d4fb48fb457e9a09def6" kindref="member">value_buffer_</ref>;</highlight></codeline>
<codeline lineno="81" refid="classparquet_1_1_scanner_1ae82b669fa5d36806b638f500174e8ba4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_scanner_1ae82b669fa5d36806b638f500174e8ba4" kindref="member">value_offset_</ref>;</highlight></codeline>
<codeline lineno="82" refid="classparquet_1_1_scanner_1ac573288280768558be10a3230550f9a3" refkind="member"><highlight class="normal"><sp/><sp/>int64_t<sp/><ref refid="classparquet_1_1_scanner_1ac573288280768558be10a3230550f9a3" kindref="member">values_buffered_</ref>;</highlight></codeline>
<codeline lineno="83" refid="classparquet_1_1_scanner_1ad5dff576a1eafc1c6bf5f419871d520b" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;ColumnReader&gt;<sp/><ref refid="classparquet_1_1_scanner_1ad5dff576a1eafc1c6bf5f419871d520b" kindref="member">reader_</ref>;</highlight></codeline>
<codeline lineno="84"><highlight class="normal">};</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DType&gt;</highlight></codeline>
<codeline lineno="87" refid="classparquet_1_1_typed_scanner" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="parquet_2platform_8h_1a2751227b2d342d714fd111f959785586" kindref="member">PARQUET_TEMPLATE_CLASS_EXPORT</ref><sp/><ref refid="classparquet_1_1_typed_scanner" kindref="compound">TypedScanner</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_scanner" kindref="compound">Scanner</ref><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="89" refid="classparquet_1_1_typed_scanner_1a57fc58f122bb895c74376396dd250829" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DType::c_type<sp/><ref refid="classparquet_1_1_typed_scanner_1a57fc58f122bb895c74376396dd250829" kindref="member">T</ref>;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="91" refid="classparquet_1_1_typed_scanner_1a7f315f081825801e36f4f99f5d680534" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_typed_scanner_1a7f315f081825801e36f4f99f5d680534" kindref="member">TypedScanner</ref>(std::shared_ptr&lt;ColumnReader&gt;<sp/>reader,</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>batch_size<sp/>=<sp/>DEFAULT_SCANNER_BATCH_SIZE,</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::<ref refid="classarrow_1_1_memory_pool" kindref="compound">arrow::MemoryPool</ref>*<sp/>pool<sp/>=<sp/>::<ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">arrow::default_memory_pool</ref>())</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classparquet_1_1_scanner" kindref="compound">Scanner</ref>(<ref refid="namespacestd" kindref="compound">std</ref>::move(reader),<sp/>batch_size,<sp/>pool)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>typed_reader_<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="classparquet_1_1_typed_column_reader" kindref="compound">TypedColumnReader&lt;DType&gt;</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(reader_.get());</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>value_byte_size<sp/>=<sp/><ref refid="structparquet_1_1type__traits" kindref="compound">type_traits&lt;DType::type_num&gt;::value_byte_size</ref>;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="exception_8h_1af08ee16340a6005cdba9a694f4e14af7" kindref="member">PARQUET_THROW_NOT_OK</ref>(value_buffer_-&gt;Resize(batch_size_<sp/>*<sp/>value_byte_size));</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>values_<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(value_buffer_-&gt;mutable_data());</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="classparquet_1_1_typed_scanner_1aa5ffb19cca0e721d27c51cfb96b8b530" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_typed_scanner_1aa5ffb19cca0e721d27c51cfb96b8b530" kindref="member">~TypedScanner</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="classparquet_1_1_typed_scanner_1af7c50cf79812f8d3435041f2515f4cba" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_typed_scanner_1af7c50cf79812f8d3435041f2515f4cba" kindref="member">NextLevels</ref>(int16_t*<sp/>def_level,<sp/>int16_t*<sp/>rep_level)<sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level_offset_<sp/>==<sp/>levels_buffered_)<sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>levels_buffered_<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>typed_reader_-&gt;ReadBatch(static_cast&lt;int&gt;(batch_size_),<sp/>def_levels_.data(),</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rep_levels_.data(),<sp/>values_,<sp/>&amp;values_buffered_));</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>value_offset_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>level_offset_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!levels_buffered_)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>*def_level<sp/>=<sp/>descr()-&gt;max_definition_level()<sp/>&gt;<sp/>0<sp/>?<sp/>def_levels_[level_offset_]<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>*rep_level<sp/>=<sp/>descr()-&gt;max_repetition_level()<sp/>&gt;<sp/>0<sp/>?<sp/>rep_levels_[level_offset_]<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>level_offset_++;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121" refid="classparquet_1_1_typed_scanner_1a41af94dd8bdbe6484cabbf9cdaecda9b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_typed_scanner_1a41af94dd8bdbe6484cabbf9cdaecda9b" kindref="member">Next</ref>(T*<sp/>val,<sp/>int16_t*<sp/>def_level,<sp/>int16_t*<sp/>rep_level,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>is_null)<sp/>{</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level_offset_<sp/>==<sp/>levels_buffered_)<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!HasNext())<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Out<sp/>of<sp/>data<sp/>pages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>NextLevels(def_level,<sp/>rep_level);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>*is_null<sp/>=<sp/>*def_level<sp/>&lt;<sp/>descr()-&gt;max_definition_level();</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*is_null)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value_offset_<sp/>==<sp/>values_buffered_)<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_parquet_exception" kindref="compound">ParquetException</ref>(</highlight><highlight class="stringliteral">&quot;Value<sp/>was<sp/>non-null,<sp/>but<sp/>has<sp/>not<sp/>been<sp/>buffered&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>*val<sp/>=<sp/>values_[value_offset_++];</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>there<sp/>is<sp/>a<sp/>next<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144" refid="classparquet_1_1_typed_scanner_1a01db20f55d558e339aa694d0d1bc7644" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_typed_scanner_1a01db20f55d558e339aa694d0d1bc7644" kindref="member">NextValue</ref>(T*<sp/>val,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal">*<sp/>is_null)<sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(level_offset_<sp/>==<sp/>levels_buffered_)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!HasNext())<sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Out<sp/>of<sp/>data<sp/>pages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Out<sp/>of<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>int16_t<sp/>def_level<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>int16_t<sp/>rep_level<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>NextLevels(&amp;def_level,<sp/>&amp;rep_level);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>*is_null<sp/>=<sp/>def_level<sp/>&lt;<sp/>descr()-&gt;max_definition_level();</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*is_null)<sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value_offset_<sp/>==<sp/>values_buffered_)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_parquet_exception" kindref="compound">ParquetException</ref>(</highlight><highlight class="stringliteral">&quot;Value<sp/>was<sp/>non-null,<sp/>but<sp/>has<sp/>not<sp/>been<sp/>buffered&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/>*val<sp/>=<sp/>values_[value_offset_++];</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169" refid="classparquet_1_1_typed_scanner_1a3a375e9e675a0183bc8dd4c743466eee" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_typed_scanner_1a3a375e9e675a0183bc8dd4c743466eee" kindref="member">PrintNext</ref>(std::ostream&amp;<sp/>out,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>with_levels<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/>T<sp/>val;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>int16_t<sp/>def_level<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>int16_t<sp/>rep_level<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_null<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>buffer[80];</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!Next(&amp;val,<sp/>&amp;def_level,<sp/>&amp;rep_level,<sp/>&amp;is_null))<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_parquet_exception" kindref="compound">ParquetException</ref>(</highlight><highlight class="stringliteral">&quot;No<sp/>more<sp/>values<sp/>buffered&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(with_levels)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/><sp/>D:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>def_level<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>R:&quot;</highlight><highlight class="normal"><sp/>&lt;&lt;<sp/>rep_level<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;<sp/>&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_null)<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;V:&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_null)<sp/>{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>null_fmt<sp/>=<sp/>format_fwf&lt;ByteArrayType&gt;(width);</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>snprintf(buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer),<sp/>null_fmt.c_str(),<sp/></highlight><highlight class="stringliteral">&quot;NULL&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FormatValue(&amp;val,<sp/>buffer,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(buffer),<sp/>width);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>out<sp/>&lt;&lt;<sp/>buffer;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>ownership<sp/>of<sp/>this<sp/>object<sp/>is<sp/>expressed<sp/>through<sp/>the<sp/>reader_<sp/>variable<sp/>in<sp/>the<sp/>base</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><ref refid="classparquet_1_1_typed_column_reader" kindref="compound">TypedColumnReader&lt;DType&gt;</ref>*<sp/>typed_reader_;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FormatValue(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>val,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bufsize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>T*<sp/>values_;</highlight></codeline>
<codeline lineno="203"><highlight class="normal">};</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DType&gt;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_typed_scanner" kindref="compound">TypedScanner&lt;DType&gt;::FormatValue</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>val,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bufsize,</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width)<sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/>std::string<sp/>fmt<sp/>=<sp/>format_fwf&lt;DType&gt;(width);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/>snprintf(buffer,<sp/>bufsize,<sp/>fmt.c_str(),<sp/>*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">T*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(val));</highlight></codeline>
<codeline lineno="210"><highlight class="normal">}</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_typed_scanner" kindref="compound">TypedScanner&lt;Int96Type&gt;::FormatValue</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>val,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bufsize,</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width)<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/>std::string<sp/>fmt<sp/>=<sp/>format_fwf&lt;Int96Type&gt;(width);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>std::string<sp/>result<sp/>=<sp/>Int96ToString(*reinterpret_cast&lt;Int96*&gt;(val));</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/>snprintf(buffer,<sp/>bufsize,<sp/>fmt.c_str(),<sp/>result.c_str());</highlight></codeline>
<codeline lineno="218"><highlight class="normal">}</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_typed_scanner" kindref="compound">TypedScanner&lt;ByteArrayType&gt;::FormatValue</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>val,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bufsize,</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width)<sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>std::string<sp/>fmt<sp/>=<sp/>format_fwf&lt;ByteArrayType&gt;(width);</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>std::string<sp/>result<sp/>=<sp/>ByteArrayToString(*reinterpret_cast&lt;ByteArray*&gt;(val));</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/>snprintf(buffer,<sp/>bufsize,<sp/>fmt.c_str(),<sp/>result.c_str());</highlight></codeline>
<codeline lineno="226"><highlight class="normal">}</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_typed_scanner" kindref="compound">TypedScanner&lt;FLBAType&gt;::FormatValue</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>val,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bufsize,</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>width)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/>std::string<sp/>fmt<sp/>=<sp/>format_fwf&lt;FLBAType&gt;(width);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/>std::string<sp/>result<sp/>=<sp/>FixedLenByteArrayToString(</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*reinterpret_cast&lt;FixedLenByteArray*&gt;(val),<sp/>descr()-&gt;type_length());</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>snprintf(buffer,<sp/>bufsize,<sp/>fmt.c_str(),<sp/>result.c_str());</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="237" refid="namespaceparquet_1ab548eea6e1d2f2b090f9ca3addbdfce0" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_typed_scanner" kindref="compound">TypedScanner&lt;BooleanType&gt;</ref><sp/><ref refid="namespaceparquet_1ab548eea6e1d2f2b090f9ca3addbdfce0" kindref="member">BoolScanner</ref>;</highlight></codeline>
<codeline lineno="238" refid="namespaceparquet_1a11e204a547f1c9cb55d935e994bc7e35" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_typed_scanner" kindref="compound">TypedScanner&lt;Int32Type&gt;</ref><sp/><ref refid="namespaceparquet_1a11e204a547f1c9cb55d935e994bc7e35" kindref="member">Int32Scanner</ref>;</highlight></codeline>
<codeline lineno="239" refid="namespaceparquet_1a5fc4c4cc69d88323b8152f8a53cb6480" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_typed_scanner" kindref="compound">TypedScanner&lt;Int64Type&gt;</ref><sp/><ref refid="namespaceparquet_1a5fc4c4cc69d88323b8152f8a53cb6480" kindref="member">Int64Scanner</ref>;</highlight></codeline>
<codeline lineno="240" refid="namespaceparquet_1ab2ff9c0b250346e973f18ebc6319c089" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_typed_scanner" kindref="compound">TypedScanner&lt;Int96Type&gt;</ref><sp/><ref refid="namespaceparquet_1ab2ff9c0b250346e973f18ebc6319c089" kindref="member">Int96Scanner</ref>;</highlight></codeline>
<codeline lineno="241" refid="namespaceparquet_1a17aac9d71a0f88daf4f766e9c4ba37e3" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_typed_scanner" kindref="compound">TypedScanner&lt;FloatType&gt;</ref><sp/><ref refid="namespaceparquet_1a17aac9d71a0f88daf4f766e9c4ba37e3" kindref="member">FloatScanner</ref>;</highlight></codeline>
<codeline lineno="242" refid="namespaceparquet_1a351acff5b7380ed45c3880114175ab0e" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_typed_scanner" kindref="compound">TypedScanner&lt;DoubleType&gt;</ref><sp/><ref refid="namespaceparquet_1a351acff5b7380ed45c3880114175ab0e" kindref="member">DoubleScanner</ref>;</highlight></codeline>
<codeline lineno="243" refid="namespaceparquet_1a7f9b55326350880114adc480fdc301ff" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_typed_scanner" kindref="compound">TypedScanner&lt;ByteArrayType&gt;</ref><sp/><ref refid="namespaceparquet_1a7f9b55326350880114adc480fdc301ff" kindref="member">ByteArrayScanner</ref>;</highlight></codeline>
<codeline lineno="244" refid="namespaceparquet_1adf61f6459ead04d3b985b5fef1020747" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_typed_scanner" kindref="compound">TypedScanner&lt;FLBAType&gt;</ref><sp/><ref refid="namespaceparquet_1adf61f6459ead04d3b985b5fef1020747" kindref="member">FixedLenByteArrayScanner</ref>;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RType&gt;</highlight></codeline>
<codeline lineno="247" refid="namespaceparquet_1aa6d11b4fbf0b1d22067c026fd55985f9" refkind="member"><highlight class="normal">int64_t<sp/><ref refid="namespaceparquet_1aa6d11b4fbf0b1d22067c026fd55985f9" kindref="member">ScanAll</ref>(int32_t<sp/>batch_size,<sp/>int16_t*<sp/>def_levels,<sp/>int16_t*<sp/>rep_levels,</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t*<sp/>values,<sp/>int64_t*<sp/>values_buffered,</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classparquet_1_1_column_reader" kindref="compound">parquet::ColumnReader</ref>*<sp/>reader)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>RType::T<sp/><ref refid="structparquet_1_1_type" kindref="compound">Type</ref>;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>typed_reader<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">RType*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(reader);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>vals<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">Type*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;values[0]);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>typed_reader-&gt;ReadBatch(batch_size,<sp/>def_levels,<sp/>rep_levels,<sp/>vals,</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values_buffered);</highlight></codeline>
<codeline lineno="255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal">int64_t<sp/>PARQUET_EXPORT<sp/><ref refid="namespaceparquet_1a765eefa142de9fdfba82f0e61acb3fe0" kindref="member">ScanAllValues</ref>(int32_t<sp/>batch_size,<sp/>int16_t*<sp/>def_levels,</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int16_t*<sp/>rep_levels,<sp/>uint8_t*<sp/>values,</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t*<sp/>values_buffered,</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classparquet_1_1_column_reader" kindref="compound">parquet::ColumnReader</ref>*<sp/>reader);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>parquet</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/arrow/cpp/src/parquet/column_scanner.h"/>
  </compounddef>
</doxygen>
