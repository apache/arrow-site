<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_schema_builder" kind="class" language="C++" prot="public">
    <compoundname>arrow::SchemaBuilder</compoundname>
    <includes refid="type_8h" local="no">arrow/type.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classarrow_1_1_schema_builder_1a6857f64910ab8b3f550a99c5bed91903" prot="public" static="no">
        <name>ConflictPolicy</name>
        <enumvalue id="classarrow_1_1_schema_builder_1a6857f64910ab8b3f550a99c5bed91903a424d0d713d59bc95f2590e6ef0e2a5c7" prot="public">
          <name>CONFLICT_APPEND</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classarrow_1_1_schema_builder_1a6857f64910ab8b3f550a99c5bed91903a941b35990a200fee00b81a8dff84f064" prot="public">
          <name>CONFLICT_IGNORE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classarrow_1_1_schema_builder_1a6857f64910ab8b3f550a99c5bed91903af2db8becf715530b227b2a974ca18bf6" prot="public">
          <name>CONFLICT_REPLACE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classarrow_1_1_schema_builder_1a6857f64910ab8b3f550a99c5bed91903ad3fd6f8b59d4a878d69feff658f3d8a4" prot="public">
          <name>CONFLICT_MERGE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classarrow_1_1_schema_builder_1a6857f64910ab8b3f550a99c5bed91903ab61b85ae69bbe2db271dfa8005e66a6b" prot="public">
          <name>CONFLICT_ERROR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1741" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="1741" bodyend="1754"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classarrow_1_1_schema_builder_1a7f5fd02b6616db851dfae68b595a129e" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; Impl &gt;</type>
        <definition>std::unique_ptr&lt;Impl&gt; arrow::SchemaBuilder::impl_</definition>
        <argsstring></argsstring>
        <name>impl_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1830" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="1829" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1_schema_builder_1acc647fd8eee8722104a09ff84008be73" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::SchemaBuilder::SchemaBuilder</definition>
        <argsstring>(ConflictPolicy conflict_policy=CONFLICT_APPEND, Field::MergeOptions field_merge_options=Field::MergeOptions::Defaults())</argsstring>
        <name>SchemaBuilder</name>
        <param>
          <type><ref refid="classarrow_1_1_schema_builder_1a6857f64910ab8b3f550a99c5bed91903" kindref="member">ConflictPolicy</ref></type>
          <declname>conflict_policy</declname>
          <defval><ref refid="classarrow_1_1_schema_builder_1a6857f64910ab8b3f550a99c5bed91903a424d0d713d59bc95f2590e6ef0e2a5c7" kindref="member">CONFLICT_APPEND</ref></defval>
        </param>
        <param>
          <type><ref refid="structarrow_1_1_field_1_1_merge_options" kindref="compound">Field::MergeOptions</ref></type>
          <declname>field_merge_options</declname>
          <defval><ref refid="structarrow_1_1_field_1_1_merge_options_1aad6ec10fe86793101bf688bbf9c9ad96" kindref="member">Field::MergeOptions::Defaults</ref>()</defval>
        </param>
        <briefdescription>
<para>Construct an empty <ref refid="classarrow_1_1_schema_builder" kindref="compound">SchemaBuilder</ref> <computeroutput>field_merge_options</computeroutput> is only effecitive when <computeroutput>conflict_policy</computeroutput> == <computeroutput>CONFLICT_MERGE</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1758" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_schema_builder_1ab6131a7be92054d107c36346960dff4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::SchemaBuilder::SchemaBuilder</definition>
        <argsstring>(std::vector&lt; std::shared_ptr&lt; Field &gt;&gt; fields, ConflictPolicy conflict_policy=CONFLICT_APPEND, Field::MergeOptions field_merge_options=Field::MergeOptions::Defaults())</argsstring>
        <name>SchemaBuilder</name>
        <param>
          <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt;&gt;</type>
          <declname>fields</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1_schema_builder_1a6857f64910ab8b3f550a99c5bed91903" kindref="member">ConflictPolicy</ref></type>
          <declname>conflict_policy</declname>
          <defval><ref refid="classarrow_1_1_schema_builder_1a6857f64910ab8b3f550a99c5bed91903a424d0d713d59bc95f2590e6ef0e2a5c7" kindref="member">CONFLICT_APPEND</ref></defval>
        </param>
        <param>
          <type><ref refid="structarrow_1_1_field_1_1_merge_options" kindref="compound">Field::MergeOptions</ref></type>
          <declname>field_merge_options</declname>
          <defval><ref refid="structarrow_1_1_field_1_1_merge_options_1aad6ec10fe86793101bf688bbf9c9ad96" kindref="member">Field::MergeOptions::Defaults</ref>()</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classarrow_1_1_schema_builder" kindref="compound">SchemaBuilder</ref> from a list of fields <computeroutput>field_merge_options</computeroutput> is only effecitive when <computeroutput>conflict_policy</computeroutput> == <computeroutput>CONFLICT_MERGE</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1763" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_schema_builder_1aab36ca2edb98460c00b1cd7dba06f7cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::SchemaBuilder::SchemaBuilder</definition>
        <argsstring>(const std::shared_ptr&lt; Schema &gt; &amp;schema, ConflictPolicy conflict_policy=CONFLICT_APPEND, Field::MergeOptions field_merge_options=Field::MergeOptions::Defaults())</argsstring>
        <name>SchemaBuilder</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt; &amp;</type>
          <declname>schema</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1_schema_builder_1a6857f64910ab8b3f550a99c5bed91903" kindref="member">ConflictPolicy</ref></type>
          <declname>conflict_policy</declname>
          <defval><ref refid="classarrow_1_1_schema_builder_1a6857f64910ab8b3f550a99c5bed91903a424d0d713d59bc95f2590e6ef0e2a5c7" kindref="member">CONFLICT_APPEND</ref></defval>
        </param>
        <param>
          <type><ref refid="structarrow_1_1_field_1_1_merge_options" kindref="compound">Field::MergeOptions</ref></type>
          <declname>field_merge_options</declname>
          <defval><ref refid="structarrow_1_1_field_1_1_merge_options_1aad6ec10fe86793101bf688bbf9c9ad96" kindref="member">Field::MergeOptions::Defaults</ref>()</defval>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classarrow_1_1_schema_builder" kindref="compound">SchemaBuilder</ref> from a schema, preserving the metadata <computeroutput>field_merge_options</computeroutput> is only effecitive when <computeroutput>conflict_policy</computeroutput> == <computeroutput>CONFLICT_MERGE</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1769" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_schema_builder_1a6667240f5f61143dd689849927ca85e0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_schema_builder_1a6857f64910ab8b3f550a99c5bed91903" kindref="member">ConflictPolicy</ref></type>
        <definition>ConflictPolicy arrow::SchemaBuilder::policy</definition>
        <argsstring>() const</argsstring>
        <name>policy</name>
        <briefdescription>
<para>Return the conflict resolution method. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1775" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_schema_builder_1a0ed5deffed2363ae6ee4908675b1175f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void arrow::SchemaBuilder::SetPolicy</definition>
        <argsstring>(ConflictPolicy resolution)</argsstring>
        <name>SetPolicy</name>
        <param>
          <type><ref refid="classarrow_1_1_schema_builder_1a6857f64910ab8b3f550a99c5bed91903" kindref="member">ConflictPolicy</ref></type>
          <declname>resolution</declname>
        </param>
        <briefdescription>
<para>Set the conflict resolution method. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1778" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_schema_builder_1ac465bf939c49b55e50e0789e5fd9071c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::SchemaBuilder::AddField</definition>
        <argsstring>(const std::shared_ptr&lt; Field &gt; &amp;field)</argsstring>
        <name>AddField</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <briefdescription>
<para>Add a field to the constructed schema. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">field</parametername>
</parameternamelist>
<parameterdescription>
<para>to add to the constructed <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A failure if encountered. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1784" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_schema_builder_1a685de338b44e8311671704f5b1157fc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::SchemaBuilder::AddFields</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; Field &gt;&gt; &amp;fields)</argsstring>
        <name>AddFields</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt;&gt; &amp;</type>
          <declname>fields</declname>
        </param>
        <briefdescription>
<para>Add multiple fields to the constructed schema. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">fields</parametername>
</parameternamelist>
<parameterdescription>
<para>to add to the constructed <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The first failure encountered, if any. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1790" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_schema_builder_1aaf841ce51ec6cc0622000067eb30c649" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::SchemaBuilder::AddSchema</definition>
        <argsstring>(const std::shared_ptr&lt; Schema &gt; &amp;schema)</argsstring>
        <name>AddSchema</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt; &amp;</type>
          <declname>schema</declname>
        </param>
        <briefdescription>
<para>Add fields of a <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> to the constructed <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">schema</parametername>
</parameternamelist>
<parameterdescription>
<para>to take fields to add to the constructed <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The first failure encountered, if any. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1796" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_schema_builder_1aefeeb3a90ea500bf93190de6fb57a1a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::SchemaBuilder::AddSchemas</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; Schema &gt;&gt; &amp;schemas)</argsstring>
        <name>AddSchemas</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt;&gt; &amp;</type>
          <declname>schemas</declname>
        </param>
        <briefdescription>
<para>Add fields of multiple Schemas to the constructed <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">schemas</parametername>
</parameternamelist>
<parameterdescription>
<para>to take fields to add to the constructed <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref>. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The first failure encountered, if any. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1802" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_schema_builder_1a96a83906ddf882f6f954fe941ef2121a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::SchemaBuilder::AddMetadata</definition>
        <argsstring>(const KeyValueMetadata &amp;metadata)</argsstring>
        <name>AddMetadata</name>
        <param>
          <type>const <ref refid="classarrow_1_1_key_value_metadata" kindref="compound">KeyValueMetadata</ref> &amp;</type>
          <declname>metadata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1804" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_schema_builder_1a9f103f5e504a11b256cb3817364ef4a8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;Schema&gt; &gt; arrow::SchemaBuilder::Finish</definition>
        <argsstring>() const</argsstring>
        <name>Finish</name>
        <briefdescription>
<para>Return the constructed <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>The builder internal state is not affected by invoking this method, i.e. a single builder can yield multiple incrementally constructed schemas.</para><para><simplesect kind="return"><para>the constructed schema. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1812" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_schema_builder_1a8f3b4d5588adcf5445f02335570d80f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void arrow::SchemaBuilder::Reset</definition>
        <argsstring>()</argsstring>
        <name>Reset</name>
        <briefdescription>
<para>Reset internal state with an empty schema (and metadata). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1824" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_schema_builder_1ae69c8297725d3f8311a40b89f81699ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::SchemaBuilder::~SchemaBuilder</definition>
        <argsstring>()</argsstring>
        <name>~SchemaBuilder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1826" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1_schema_builder_1a3f51847bc5c90024cb406c38e8fbb443" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;Schema&gt; &gt; arrow::SchemaBuilder::Merge</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; Schema &gt;&gt; &amp;schemas, ConflictPolicy policy=CONFLICT_MERGE)</argsstring>
        <name>Merge</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt;&gt; &amp;</type>
          <declname>schemas</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1_schema_builder_1a6857f64910ab8b3f550a99c5bed91903" kindref="member">ConflictPolicy</ref></type>
          <declname>policy</declname>
          <defval><ref refid="classarrow_1_1_schema_builder_1a6857f64910ab8b3f550a99c5bed91903ad3fd6f8b59d4a878d69feff658f3d8a4" kindref="member">CONFLICT_MERGE</ref></defval>
        </param>
        <briefdescription>
<para>Merge schemas in a unified schema according to policy. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1815" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_schema_builder_1ad382df9c23fd3b2088b61e74e218be66" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::SchemaBuilder::AreCompatible</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; Schema &gt;&gt; &amp;schemas, ConflictPolicy policy=CONFLICT_MERGE)</argsstring>
        <name>AreCompatible</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt;&gt; &amp;</type>
          <declname>schemas</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1_schema_builder_1a6857f64910ab8b3f550a99c5bed91903" kindref="member">ConflictPolicy</ref></type>
          <declname>policy</declname>
          <defval><ref refid="classarrow_1_1_schema_builder_1a6857f64910ab8b3f550a99c5bed91903ad3fd6f8b59d4a878d69feff658f3d8a4" kindref="member">CONFLICT_MERGE</ref></defval>
        </param>
        <briefdescription>
<para>Indicate if schemas are compatible to merge according to policy. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1820" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classarrow_1_1_schema_builder_1ace74f784c8eda78f5b7e1d41412bb6e0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::SchemaBuilder::AppendField</definition>
        <argsstring>(const std::shared_ptr&lt; Field &gt; &amp;field)</argsstring>
        <name>AppendField</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1832" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Convenience class to incrementally construct/merge schemas. </para>    </briefdescription>
    <detaileddescription>
<para>This class amortizes the cost of validating field name conflicts by maintaining the mapping. The caller also controls the conflict resolution scheme. </para>    </detaileddescription>
    <location file="/arrow/cpp/src/arrow/type.h" line="1736" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="1736" bodyend="1833"/>
    <listofallmembers>
      <member refid="classarrow_1_1_schema_builder_1ac465bf939c49b55e50e0789e5fd9071c" prot="public" virt="non-virtual"><scope>arrow::SchemaBuilder</scope><name>AddField</name></member>
      <member refid="classarrow_1_1_schema_builder_1a685de338b44e8311671704f5b1157fc6" prot="public" virt="non-virtual"><scope>arrow::SchemaBuilder</scope><name>AddFields</name></member>
      <member refid="classarrow_1_1_schema_builder_1a96a83906ddf882f6f954fe941ef2121a" prot="public" virt="non-virtual"><scope>arrow::SchemaBuilder</scope><name>AddMetadata</name></member>
      <member refid="classarrow_1_1_schema_builder_1aaf841ce51ec6cc0622000067eb30c649" prot="public" virt="non-virtual"><scope>arrow::SchemaBuilder</scope><name>AddSchema</name></member>
      <member refid="classarrow_1_1_schema_builder_1aefeeb3a90ea500bf93190de6fb57a1a0" prot="public" virt="non-virtual"><scope>arrow::SchemaBuilder</scope><name>AddSchemas</name></member>
      <member refid="classarrow_1_1_schema_builder_1ace74f784c8eda78f5b7e1d41412bb6e0" prot="private" virt="non-virtual"><scope>arrow::SchemaBuilder</scope><name>AppendField</name></member>
      <member refid="classarrow_1_1_schema_builder_1ad382df9c23fd3b2088b61e74e218be66" prot="public" virt="non-virtual"><scope>arrow::SchemaBuilder</scope><name>AreCompatible</name></member>
      <member refid="classarrow_1_1_schema_builder_1a6857f64910ab8b3f550a99c5bed91903a424d0d713d59bc95f2590e6ef0e2a5c7" prot="public" virt="non-virtual"><scope>arrow::SchemaBuilder</scope><name>CONFLICT_APPEND</name></member>
      <member refid="classarrow_1_1_schema_builder_1a6857f64910ab8b3f550a99c5bed91903ab61b85ae69bbe2db271dfa8005e66a6b" prot="public" virt="non-virtual"><scope>arrow::SchemaBuilder</scope><name>CONFLICT_ERROR</name></member>
      <member refid="classarrow_1_1_schema_builder_1a6857f64910ab8b3f550a99c5bed91903a941b35990a200fee00b81a8dff84f064" prot="public" virt="non-virtual"><scope>arrow::SchemaBuilder</scope><name>CONFLICT_IGNORE</name></member>
      <member refid="classarrow_1_1_schema_builder_1a6857f64910ab8b3f550a99c5bed91903ad3fd6f8b59d4a878d69feff658f3d8a4" prot="public" virt="non-virtual"><scope>arrow::SchemaBuilder</scope><name>CONFLICT_MERGE</name></member>
      <member refid="classarrow_1_1_schema_builder_1a6857f64910ab8b3f550a99c5bed91903af2db8becf715530b227b2a974ca18bf6" prot="public" virt="non-virtual"><scope>arrow::SchemaBuilder</scope><name>CONFLICT_REPLACE</name></member>
      <member refid="classarrow_1_1_schema_builder_1a6857f64910ab8b3f550a99c5bed91903" prot="public" virt="non-virtual"><scope>arrow::SchemaBuilder</scope><name>ConflictPolicy</name></member>
      <member refid="classarrow_1_1_schema_builder_1a9f103f5e504a11b256cb3817364ef4a8" prot="public" virt="non-virtual"><scope>arrow::SchemaBuilder</scope><name>Finish</name></member>
      <member refid="classarrow_1_1_schema_builder_1a7f5fd02b6616db851dfae68b595a129e" prot="private" virt="non-virtual"><scope>arrow::SchemaBuilder</scope><name>impl_</name></member>
      <member refid="classarrow_1_1_schema_builder_1a3f51847bc5c90024cb406c38e8fbb443" prot="public" virt="non-virtual"><scope>arrow::SchemaBuilder</scope><name>Merge</name></member>
      <member refid="classarrow_1_1_schema_builder_1a6667240f5f61143dd689849927ca85e0" prot="public" virt="non-virtual"><scope>arrow::SchemaBuilder</scope><name>policy</name></member>
      <member refid="classarrow_1_1_schema_builder_1a8f3b4d5588adcf5445f02335570d80f4" prot="public" virt="non-virtual"><scope>arrow::SchemaBuilder</scope><name>Reset</name></member>
      <member refid="classarrow_1_1_schema_builder_1acc647fd8eee8722104a09ff84008be73" prot="public" virt="non-virtual"><scope>arrow::SchemaBuilder</scope><name>SchemaBuilder</name></member>
      <member refid="classarrow_1_1_schema_builder_1ab6131a7be92054d107c36346960dff4a" prot="public" virt="non-virtual"><scope>arrow::SchemaBuilder</scope><name>SchemaBuilder</name></member>
      <member refid="classarrow_1_1_schema_builder_1aab36ca2edb98460c00b1cd7dba06f7cb" prot="public" virt="non-virtual"><scope>arrow::SchemaBuilder</scope><name>SchemaBuilder</name></member>
      <member refid="classarrow_1_1_schema_builder_1a0ed5deffed2363ae6ee4908675b1175f" prot="public" virt="non-virtual"><scope>arrow::SchemaBuilder</scope><name>SetPolicy</name></member>
      <member refid="classarrow_1_1_schema_builder_1ae69c8297725d3f8311a40b89f81699ca" prot="public" virt="non-virtual"><scope>arrow::SchemaBuilder</scope><name>~SchemaBuilder</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
