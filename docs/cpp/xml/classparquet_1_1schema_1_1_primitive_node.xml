<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classparquet_1_1schema_1_1_primitive_node" kind="class" language="C++" prot="public">
    <compoundname>parquet::schema::PrimitiveNode</compoundname>
    <basecompoundref refid="classparquet_1_1schema_1_1_node" prot="public" virt="non-virtual">parquet::schema::Node</basecompoundref>
    <includes refid="schema_8h" local="no">parquet/schema.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classparquet_1_1schema_1_1_primitive_node_1a72dd886072072e13284ed525bc92792d" prot="private" static="no" mutable="no">
        <type><ref refid="structparquet_1_1_type_1a2a4b0ad3da98a8a407a0dc3ecbf737ca" kindref="member">Type::type</ref></type>
        <definition>Type::type parquet::schema::PrimitiveNode::physical_type_</definition>
        <argsstring></argsstring>
        <name>physical_type_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="251" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="251" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classparquet_1_1schema_1_1_primitive_node_1a3a187898882267ab828bf4ca85d0a2a2" prot="private" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t parquet::schema::PrimitiveNode::type_length_</definition>
        <argsstring></argsstring>
        <name>type_length_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="252" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="252" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classparquet_1_1schema_1_1_primitive_node_1a6c3a45bfba371ff2fdd38768f80b5b77" prot="private" static="no" mutable="no">
        <type><ref refid="structparquet_1_1schema_1_1_decimal_metadata" kindref="compound">DecimalMetadata</ref></type>
        <definition>DecimalMetadata parquet::schema::PrimitiveNode::decimal_metadata_</definition>
        <argsstring></argsstring>
        <name>decimal_metadata_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="253" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="253" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classparquet_1_1schema_1_1_primitive_node_1afd81176e603028a725a2f73124ac27d7" prot="private" static="no" mutable="no">
        <type><ref refid="classparquet_1_1_column_order" kindref="compound">ColumnOrder</ref></type>
        <definition>ColumnOrder parquet::schema::PrimitiveNode::column_order_</definition>
        <argsstring></argsstring>
        <name>column_order_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="254" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="254" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classparquet_1_1schema_1_1_primitive_node_1a1b655db7a2ff835a6f09026d0ced3dbb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classparquet_1_1schema_1_1_node" kindref="compound">Node</ref> &gt;</type>
        <definition>static std::unique_ptr&lt;Node&gt; parquet::schema::PrimitiveNode::FromParquet</definition>
        <argsstring>(const void *opaque_element, int field_id=-1)</argsstring>
        <name>FromParquet</name>
        <param>
          <type>const void *</type>
          <declname>opaque_element</declname>
        </param>
        <param>
          <type>int</type>
          <declname>field_id</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="204" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_primitive_node_1a7da41c9523924bcbd762ddb26b445548" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceparquet_1_1schema_1a7fe5ee27b1dd5f12098ce3f3e6200b9e" kindref="member">NodePtr</ref></type>
        <definition>static NodePtr parquet::schema::PrimitiveNode::Make</definition>
        <argsstring>(const std::string &amp;name, Repetition::type repetition, Type::type type, ConvertedType::type converted_type=ConvertedType::NONE, int length=-1, int precision=-1, int scale=-1, int field_id=-1)</argsstring>
        <name>Make</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structparquet_1_1_repetition_1a7e942dfcd49240c465cdf3e1dc011af4" kindref="member">Repetition::type</ref></type>
          <declname>repetition</declname>
        </param>
        <param>
          <type><ref refid="structparquet_1_1_type_1a2a4b0ad3da98a8a407a0dc3ecbf737ca" kindref="member">Type::type</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="structparquet_1_1_converted_type_1a4c93674b47bffc29042acda48281e198" kindref="member">ConvertedType::type</ref></type>
          <declname>converted_type</declname>
          <defval><ref refid="structparquet_1_1_converted_type_1a4c93674b47bffc29042acda48281e198adeb8756102a33f6619ada0dafcdf4167" kindref="member">ConvertedType::NONE</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>precision</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>scale</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>field_id</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="207" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="207" bodyend="214"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_primitive_node_1a32dfc2809c6954aafc5bc76afebaf2b6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceparquet_1_1schema_1a7fe5ee27b1dd5f12098ce3f3e6200b9e" kindref="member">NodePtr</ref></type>
        <definition>static NodePtr parquet::schema::PrimitiveNode::Make</definition>
        <argsstring>(const std::string &amp;name, Repetition::type repetition, std::shared_ptr&lt; const LogicalType &gt; logical_type, Type::type primitive_type, int primitive_length=-1, int field_id=-1)</argsstring>
        <name>Make</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structparquet_1_1_repetition_1a7e942dfcd49240c465cdf3e1dc011af4" kindref="member">Repetition::type</ref></type>
          <declname>repetition</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; const <ref refid="classparquet_1_1_logical_type" kindref="compound">LogicalType</ref> &gt;</type>
          <declname>logical_type</declname>
        </param>
        <param>
          <type><ref refid="structparquet_1_1_type_1a2a4b0ad3da98a8a407a0dc3ecbf737ca" kindref="member">Type::type</ref></type>
          <declname>primitive_type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>primitive_length</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>field_id</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="218" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="218" bodyend="224"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classparquet_1_1schema_1_1_primitive_node_1a031007998bec9d792b4327e74c66d79b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool parquet::schema::PrimitiveNode::Equals</definition>
        <argsstring>(const Node *other) const override</argsstring>
        <name>Equals</name>
        <reimplements refid="classparquet_1_1schema_1_1_node_1a1b045de58dcd6db5a9ccebfa3f182832">Equals</reimplements>
        <param>
          <type>const <ref refid="classparquet_1_1schema_1_1_node" kindref="compound">Node</ref> *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="226" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_primitive_node_1a2b36dedb251d5352725de4ad93b88395" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structparquet_1_1_type_1a2a4b0ad3da98a8a407a0dc3ecbf737ca" kindref="member">Type::type</ref></type>
        <definition>Type::type parquet::schema::PrimitiveNode::physical_type</definition>
        <argsstring>() const</argsstring>
        <name>physical_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="228" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="228" bodyend="228"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_primitive_node_1aa2f3152d3503bcd62ff776cfff7a8d9c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classparquet_1_1_column_order" kindref="compound">ColumnOrder</ref></type>
        <definition>ColumnOrder parquet::schema::PrimitiveNode::column_order</definition>
        <argsstring>() const</argsstring>
        <name>column_order</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="230" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="230" bodyend="230"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_primitive_node_1a899e76b9ab964a71db5bf2638c8537c2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void parquet::schema::PrimitiveNode::SetColumnOrder</definition>
        <argsstring>(ColumnOrder column_order)</argsstring>
        <name>SetColumnOrder</name>
        <param>
          <type><ref refid="classparquet_1_1_column_order" kindref="compound">ColumnOrder</ref></type>
          <declname>column_order</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="232" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="232" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_primitive_node_1acd6e4360f35187b6de334e0c8e902c0e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t parquet::schema::PrimitiveNode::type_length</definition>
        <argsstring>() const</argsstring>
        <name>type_length</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="234" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="234" bodyend="234"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_primitive_node_1ad6ac2bd61ad22db3c5ee102e9f1d0c02" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structparquet_1_1schema_1_1_decimal_metadata" kindref="compound">DecimalMetadata</ref> &amp;</type>
        <definition>const DecimalMetadata&amp; parquet::schema::PrimitiveNode::decimal_metadata</definition>
        <argsstring>() const</argsstring>
        <name>decimal_metadata</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="236" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="236" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_primitive_node_1a2b54f49531cb7ec02c396dcc505bc626" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void parquet::schema::PrimitiveNode::ToParquet</definition>
        <argsstring>(void *element) const override</argsstring>
        <name>ToParquet</name>
        <reimplements refid="classparquet_1_1schema_1_1_node_1a7876879459998b3d197d1f3d9208b573">ToParquet</reimplements>
        <param>
          <type>void *</type>
          <declname>element</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="238" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_primitive_node_1aa1f00c5fafabf4b458a13067fbfedf54" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void parquet::schema::PrimitiveNode::Visit</definition>
        <argsstring>(Visitor *visitor) override</argsstring>
        <name>Visit</name>
        <reimplements refid="classparquet_1_1schema_1_1_node_1aa5737bec0a433a471277d242e82ee4e4">Visit</reimplements>
        <param>
          <type><ref refid="classparquet_1_1schema_1_1_node_1_1_visitor" kindref="compound">Visitor</ref> *</type>
          <declname>visitor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="239" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_primitive_node_1ae5faa5690b30d5e88982008b056b5f1e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void parquet::schema::PrimitiveNode::VisitConst</definition>
        <argsstring>(ConstVisitor *visitor) const override</argsstring>
        <name>VisitConst</name>
        <reimplements refid="classparquet_1_1schema_1_1_node_1a3a83130adcdb8f7976a9ddc061c4e117">VisitConst</reimplements>
        <param>
          <type><ref refid="classparquet_1_1schema_1_1_node_1_1_const_visitor" kindref="compound">ConstVisitor</ref> *</type>
          <declname>visitor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="240" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classparquet_1_1schema_1_1_primitive_node_1a0f5ef9230e5d1acb1bb1425950622e4a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>parquet::schema::PrimitiveNode::PrimitiveNode</definition>
        <argsstring>(const std::string &amp;name, Repetition::type repetition, Type::type type, ConvertedType::type converted_type=ConvertedType::NONE, int length=-1, int precision=-1, int scale=-1, int field_id=-1)</argsstring>
        <name>PrimitiveNode</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structparquet_1_1_repetition_1a7e942dfcd49240c465cdf3e1dc011af4" kindref="member">Repetition::type</ref></type>
          <declname>repetition</declname>
        </param>
        <param>
          <type><ref refid="structparquet_1_1_type_1a2a4b0ad3da98a8a407a0dc3ecbf737ca" kindref="member">Type::type</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="structparquet_1_1_converted_type_1a4c93674b47bffc29042acda48281e198" kindref="member">ConvertedType::type</ref></type>
          <declname>converted_type</declname>
          <defval><ref refid="structparquet_1_1_converted_type_1a4c93674b47bffc29042acda48281e198adeb8756102a33f6619ada0dafcdf4167" kindref="member">ConvertedType::NONE</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>length</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>precision</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>scale</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>field_id</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="243" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_primitive_node_1a55d3de18e6f0119a6ff7ea398f18b681" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>parquet::schema::PrimitiveNode::PrimitiveNode</definition>
        <argsstring>(const std::string &amp;name, Repetition::type repetition, std::shared_ptr&lt; const LogicalType &gt; logical_type, Type::type primitive_type, int primitive_length=-1, int field_id=-1)</argsstring>
        <name>PrimitiveNode</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structparquet_1_1_repetition_1a7e942dfcd49240c465cdf3e1dc011af4" kindref="member">Repetition::type</ref></type>
          <declname>repetition</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; const <ref refid="classparquet_1_1_logical_type" kindref="compound">LogicalType</ref> &gt;</type>
          <declname>logical_type</declname>
        </param>
        <param>
          <type><ref refid="structparquet_1_1_type_1a2a4b0ad3da98a8a407a0dc3ecbf737ca" kindref="member">Type::type</ref></type>
          <declname>primitive_type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>primitive_length</declname>
          <defval>-1</defval>
        </param>
        <param>
          <type>int</type>
          <declname>field_id</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="247" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_primitive_node_1a6df146028f8a25339948476eeb958361" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void parquet::schema::PrimitiveNode::SetTypeLength</definition>
        <argsstring>(int32_t length)</argsstring>
        <name>SetTypeLength</name>
        <param>
          <type>int32_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="257" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="257" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_primitive_node_1a4940f9576c5965504d5f4478ba6d760c" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool parquet::schema::PrimitiveNode::EqualsInternal</definition>
        <argsstring>(const PrimitiveNode *other) const</argsstring>
        <name>EqualsInternal</name>
        <param>
          <type>const <ref refid="classparquet_1_1schema_1_1_primitive_node" kindref="compound">PrimitiveNode</ref> *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="259" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_primitive_node_1a509cb19657e58567c77acc93d1b30aad" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>parquet::schema::PrimitiveNode::FRIEND_TEST</definition>
        <argsstring>(TestPrimitiveNode, Attrs)</argsstring>
        <name>FRIEND_TEST</name>
        <param>
          <type>TestPrimitiveNode</type>
        </param>
        <param>
          <type>Attrs</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="261" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_primitive_node_1a81641a5a5d7a1f2458312e6d326412c3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>parquet::schema::PrimitiveNode::FRIEND_TEST</definition>
        <argsstring>(TestPrimitiveNode, Equals)</argsstring>
        <name>FRIEND_TEST</name>
        <param>
          <type>TestPrimitiveNode</type>
        </param>
        <param>
          <type><ref refid="classparquet_1_1schema_1_1_primitive_node_1a031007998bec9d792b4327e74c66d79b" kindref="member">Equals</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="262" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_primitive_node_1a83c9e663e3cf6e3d6686e5c135b35ebe" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>parquet::schema::PrimitiveNode::FRIEND_TEST</definition>
        <argsstring>(TestPrimitiveNode, PhysicalLogicalMapping)</argsstring>
        <name>FRIEND_TEST</name>
        <param>
          <type>TestPrimitiveNode</type>
        </param>
        <param>
          <type>PhysicalLogicalMapping</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="263" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_primitive_node_1a8ce8c4d45df005d91f83212af81bee9d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>parquet::schema::PrimitiveNode::FRIEND_TEST</definition>
        <argsstring>(TestPrimitiveNode, FromParquet)</argsstring>
        <name>FRIEND_TEST</name>
        <param>
          <type>TestPrimitiveNode</type>
        </param>
        <param>
          <type><ref refid="classparquet_1_1schema_1_1_primitive_node_1a1b655db7a2ff835a6f09026d0ced3dbb" kindref="member">FromParquet</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="264" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3610">
        <label>parquet::schema::Node</label>
        <link refid="classparquet_1_1schema_1_1_node"/>
      </node>
      <node id="3609">
        <label>parquet::schema::PrimitiveNode</label>
        <link refid="classparquet_1_1schema_1_1_primitive_node"/>
        <childnode refid="3610" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3612">
        <label>parquet::schema::Node</label>
        <link refid="classparquet_1_1schema_1_1_node"/>
        <childnode refid="3612" relation="usage">
          <edgelabel>parent_</edgelabel>
        </childnode>
      </node>
      <node id="3611">
        <label>parquet::schema::PrimitiveNode</label>
        <link refid="classparquet_1_1schema_1_1_primitive_node"/>
        <childnode refid="3612" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/parquet/schema.h" line="201" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="201" bodyend="265"/>
    <listofallmembers>
      <member refid="classparquet_1_1schema_1_1_primitive_node_1aa2f3152d3503bcd62ff776cfff7a8d9c" prot="public" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>column_order</name></member>
      <member refid="classparquet_1_1schema_1_1_primitive_node_1afd81176e603028a725a2f73124ac27d7" prot="private" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>column_order_</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1aa2175d7164787a0f1bd8d93233bc5934" prot="public" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>converted_type</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1aea0bd0c888704ff9c0fa832124f8e5ad" prot="protected" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>converted_type_</name></member>
      <member refid="classparquet_1_1schema_1_1_primitive_node_1ad6ac2bd61ad22db3c5ee102e9f1d0c02" prot="public" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>decimal_metadata</name></member>
      <member refid="classparquet_1_1schema_1_1_primitive_node_1a6c3a45bfba371ff2fdd38768f80b5b77" prot="private" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>decimal_metadata_</name></member>
      <member refid="classparquet_1_1schema_1_1_primitive_node_1a031007998bec9d792b4327e74c66d79b" prot="public" virt="virtual"><scope>parquet::schema::PrimitiveNode</scope><name>Equals</name></member>
      <member refid="classparquet_1_1schema_1_1_primitive_node_1a4940f9576c5965504d5f4478ba6d760c" prot="private" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>EqualsInternal</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a8fe067fc9c2ded42ddfb589f4d40cf08" prot="protected" virt="non-virtual" ambiguityscope="parquet::schema::Node::"><scope>parquet::schema::PrimitiveNode</scope><name>EqualsInternal</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1aa6442e18cc800110e673e13819c85b53" prot="public" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>field_id</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a97de05e7887acfe99dd2891e904e61f6" prot="protected" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>field_id_</name></member>
      <member refid="classparquet_1_1schema_1_1_primitive_node_1a509cb19657e58567c77acc93d1b30aad" prot="private" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>FRIEND_TEST</name></member>
      <member refid="classparquet_1_1schema_1_1_primitive_node_1a81641a5a5d7a1f2458312e6d326412c3" prot="private" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>FRIEND_TEST</name></member>
      <member refid="classparquet_1_1schema_1_1_primitive_node_1a83c9e663e3cf6e3d6686e5c135b35ebe" prot="private" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>FRIEND_TEST</name></member>
      <member refid="classparquet_1_1schema_1_1_primitive_node_1a8ce8c4d45df005d91f83212af81bee9d" prot="private" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>FRIEND_TEST</name></member>
      <member refid="classparquet_1_1schema_1_1_primitive_node_1a1b655db7a2ff835a6f09026d0ced3dbb" prot="public" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>FromParquet</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1aab450ce50c75c565dde2d550311c5020af049b3443056c6e12e06dd41630bc0db" prot="public" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>GROUP</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a4876454789f5bb9c7d9b5d2cf0619850" prot="public" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>is_group</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a0b3015fc760df30425b643541f34051d" prot="public" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>is_optional</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a16e05d4314f205ddde0f06a8c98c30a5" prot="public" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>is_primitive</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1afa2f550a4fe582d22eb5850082722d92" prot="public" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>is_repeated</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1ac43e59ae65df7e224e2ba5308e6620c2" prot="public" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>is_required</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a7906213a612cdd2ba7ec9695467534ec" prot="public" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>logical_type</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1ad26ec60df1d8805b768d6fb742c8c122" prot="protected" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>logical_type_</name></member>
      <member refid="classparquet_1_1schema_1_1_primitive_node_1a7da41c9523924bcbd762ddb26b445548" prot="public" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>Make</name></member>
      <member refid="classparquet_1_1schema_1_1_primitive_node_1a32dfc2809c6954aafc5bc76afebaf2b6" prot="public" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>Make</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1ac84aeaa2ec13ffc81f5756f2f39911bd" prot="public" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>name</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a7e2ce16cdf24f982f7d87f45ed8be209" prot="protected" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>name_</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a38014237d7d0ac0ccfa170568a1e7bd6" prot="protected" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>Node</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1af53a3215e176399423ea5c2ce010ade0" prot="protected" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>Node</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a094fa7e3ff9b5a8ecd07e2d9fd4d2f22" prot="public" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>node_type</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a6a6a7d17ebacfd44a495dd6e6dcf388f" prot="public" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>parent</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a04e7addaf1850c92e6bc49e05b08d1ab" prot="protected" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>parent_</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1ab255f7cc073220cf4718eee621b6f992" prot="public" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>PARQUET_DEPRECATED</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a0bb5393f695b41088adfd84cda835e78" prot="public" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>path</name></member>
      <member refid="classparquet_1_1schema_1_1_primitive_node_1a2b36dedb251d5352725de4ad93b88395" prot="public" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>physical_type</name></member>
      <member refid="classparquet_1_1schema_1_1_primitive_node_1a72dd886072072e13284ed525bc92792d" prot="private" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>physical_type_</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1aab450ce50c75c565dde2d550311c5020a937da11d2024ff231f447c3053e74d88" prot="public" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>PRIMITIVE</name></member>
      <member refid="classparquet_1_1schema_1_1_primitive_node_1a0f5ef9230e5d1acb1bb1425950622e4a" prot="private" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>PrimitiveNode</name></member>
      <member refid="classparquet_1_1schema_1_1_primitive_node_1a55d3de18e6f0119a6ff7ea398f18b681" prot="private" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>PrimitiveNode</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1ac1541fa1f8d0a6db7bc12ba3855e0373" prot="public" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>repetition</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a759b242d4a25fd8f4198c5f27a2f7733" prot="protected" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>repetition_</name></member>
      <member refid="classparquet_1_1schema_1_1_primitive_node_1a899e76b9ab964a71db5bf2638c8537c2" prot="public" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>SetColumnOrder</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a73bd2add8d170bcfefd8c667b47780c4" prot="protected" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>SetParent</name></member>
      <member refid="classparquet_1_1schema_1_1_primitive_node_1a6df146028f8a25339948476eeb958361" prot="private" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>SetTypeLength</name></member>
      <member refid="classparquet_1_1schema_1_1_primitive_node_1a2b54f49531cb7ec02c396dcc505bc626" prot="public" virt="virtual"><scope>parquet::schema::PrimitiveNode</scope><name>ToParquet</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1aab450ce50c75c565dde2d550311c5020" prot="public" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>type</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a77bbfa65c2f78dfa5fe9410376da9ec6" prot="protected" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>type_</name></member>
      <member refid="classparquet_1_1schema_1_1_primitive_node_1acd6e4360f35187b6de334e0c8e902c0e" prot="public" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>type_length</name></member>
      <member refid="classparquet_1_1schema_1_1_primitive_node_1a3a187898882267ab828bf4ca85d0a2a2" prot="private" virt="non-virtual"><scope>parquet::schema::PrimitiveNode</scope><name>type_length_</name></member>
      <member refid="classparquet_1_1schema_1_1_primitive_node_1aa1f00c5fafabf4b458a13067fbfedf54" prot="public" virt="virtual"><scope>parquet::schema::PrimitiveNode</scope><name>Visit</name></member>
      <member refid="classparquet_1_1schema_1_1_primitive_node_1ae5faa5690b30d5e88982008b056b5f1e" prot="public" virt="virtual"><scope>parquet::schema::PrimitiveNode</scope><name>VisitConst</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a5aa34e85de9d924de494185b4c954e00" prot="public" virt="virtual"><scope>parquet::schema::PrimitiveNode</scope><name>~Node</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
