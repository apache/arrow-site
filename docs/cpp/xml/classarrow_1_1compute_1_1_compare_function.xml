<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1compute_1_1_compare_function" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>arrow::compute::CompareFunction</compoundname>
    <includes refid="compute_2kernels_2compare_8h" local="no">arrow/compute/kernels/compare.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1compute_1_1_compare_function_1ae8a2aac4f42657e89c8c76d1ee20b2a8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>virtual Status arrow::compute::CompareFunction::Compare</definition>
        <argsstring>(const ArrayData &amp;array, const Scalar &amp;scalar, ArrayData *output) const =0</argsstring>
        <name>Compare</name>
        <param>
          <type>const <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1_scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>scalar</declname>
        </param>
        <param>
          <type><ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Compare an array with a scalar argument. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernels/compare.h" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1compute_1_1_compare_function_1a30d8c0c3390e7fea7a7be7fea906398c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::compute::CompareFunction::Compare</definition>
        <argsstring>(const ArrayData &amp;array, const Scalar &amp;scalar, std::shared_ptr&lt; ArrayData &gt; *output)</argsstring>
        <name>Compare</name>
        <param>
          <type>const <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1_scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>scalar</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &gt; *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernels/compare.h" line="47" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernels/compare.h" bodystart="47" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1compute_1_1_compare_function_1a6acb4d158963c7bb6c83827b6a22ac01" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>virtual Status arrow::compute::CompareFunction::Compare</definition>
        <argsstring>(const Scalar &amp;scalar, const ArrayData &amp;array, ArrayData *output) const =0</argsstring>
        <name>Compare</name>
        <param>
          <type>const <ref refid="structarrow_1_1_scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>scalar</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type><ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernels/compare.h" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1compute_1_1_compare_function_1af577ca829aba113827d22b5e0eed7373" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::compute::CompareFunction::Compare</definition>
        <argsstring>(const Scalar &amp;scalar, const ArrayData &amp;array, std::shared_ptr&lt; ArrayData &gt; *output)</argsstring>
        <name>Compare</name>
        <param>
          <type>const <ref refid="structarrow_1_1_scalar" kindref="compound">Scalar</ref> &amp;</type>
          <declname>scalar</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &gt; *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernels/compare.h" line="55" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernels/compare.h" bodystart="55" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1compute_1_1_compare_function_1aeb521d40ef6f9c16a529abcc4e7729e3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>virtual Status arrow::compute::CompareFunction::Compare</definition>
        <argsstring>(const ArrayData &amp;lhs, const ArrayData &amp;rhs, ArrayData *output) const =0</argsstring>
        <name>Compare</name>
        <param>
          <type>const <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type><ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
<para>Compare an array with an array argument. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernels/compare.h" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1compute_1_1_compare_function_1a6361a3f5d765822a17fa2b0a0434d5a5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::compute::CompareFunction::Compare</definition>
        <argsstring>(const ArrayData &amp;lhs, const ArrayData &amp;rhs, std::shared_ptr&lt; ArrayData &gt; *output)</argsstring>
        <name>Compare</name>
        <param>
          <type>const <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &gt; *</type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernels/compare.h" line="64" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernels/compare.h" bodystart="64" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1compute_1_1_compare_function_1abbd65ca0c52941c58c6b82bb6127fc9d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt;</type>
        <definition>virtual std::shared_ptr&lt;DataType&gt; arrow::compute::CompareFunction::out_type</definition>
        <argsstring>() const</argsstring>
        <name>out_type</name>
        <briefdescription>
<para>By default, <ref refid="classarrow_1_1compute_1_1_compare_function" kindref="compound">CompareFunction</ref> emits a result bitmap. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernels/compare.h" line="70" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernels/compare.h" bodystart="70" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1compute_1_1_compare_function_1a844177178b199466ab2939cf47b5a100" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual arrow::compute::CompareFunction::~CompareFunction</definition>
        <argsstring>()</argsstring>
        <name>~CompareFunction</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernels/compare.h" line="72" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernels/compare.h" bodystart="72" bodyend="72"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classarrow_1_1compute_1_1_compare_function" kindref="compound">CompareFunction</ref> is an interface for Comparisons. </para>    </briefdescription>
    <detaileddescription>
<para>Comparisons take an array and emits a selection vector. The selection vector is given in the form of a bitmask as a <ref refid="classarrow_1_1_boolean_array" kindref="compound">BooleanArray</ref> result. </para>    </detaileddescription>
    <location file="/arrow/cpp/src/arrow/compute/kernels/compare.h" line="41" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernels/compare.h" bodystart="41" bodyend="73"/>
    <listofallmembers>
      <member refid="classarrow_1_1compute_1_1_compare_function_1ae8a2aac4f42657e89c8c76d1ee20b2a8" prot="public" virt="pure-virtual"><scope>arrow::compute::CompareFunction</scope><name>Compare</name></member>
      <member refid="classarrow_1_1compute_1_1_compare_function_1a30d8c0c3390e7fea7a7be7fea906398c" prot="public" virt="non-virtual"><scope>arrow::compute::CompareFunction</scope><name>Compare</name></member>
      <member refid="classarrow_1_1compute_1_1_compare_function_1a6acb4d158963c7bb6c83827b6a22ac01" prot="public" virt="pure-virtual"><scope>arrow::compute::CompareFunction</scope><name>Compare</name></member>
      <member refid="classarrow_1_1compute_1_1_compare_function_1af577ca829aba113827d22b5e0eed7373" prot="public" virt="non-virtual"><scope>arrow::compute::CompareFunction</scope><name>Compare</name></member>
      <member refid="classarrow_1_1compute_1_1_compare_function_1aeb521d40ef6f9c16a529abcc4e7729e3" prot="public" virt="pure-virtual"><scope>arrow::compute::CompareFunction</scope><name>Compare</name></member>
      <member refid="classarrow_1_1compute_1_1_compare_function_1a6361a3f5d765822a17fa2b0a0434d5a5" prot="public" virt="non-virtual"><scope>arrow::compute::CompareFunction</scope><name>Compare</name></member>
      <member refid="classarrow_1_1compute_1_1_compare_function_1abbd65ca0c52941c58c6b82bb6127fc9d" prot="public" virt="virtual"><scope>arrow::compute::CompareFunction</scope><name>out_type</name></member>
      <member refid="classarrow_1_1compute_1_1_compare_function_1a844177178b199466ab2939cf47b5a100" prot="public" virt="virtual"><scope>arrow::compute::CompareFunction</scope><name>~CompareFunction</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
