<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacearrow_1_1py" kind="namespace" language="C++">
    <compoundname>arrow::py</compoundname>
    <innerclass refid="classarrow_1_1py_1_1_ndarray1_d_indexer" prot="public">arrow::py::Ndarray1DIndexer</innerclass>
    <innerclass refid="classarrow_1_1py_1_1_num_py_buffer" prot="public">arrow::py::NumPyBuffer</innerclass>
    <innerclass refid="classarrow_1_1py_1_1_owned_ref" prot="public">arrow::py::OwnedRef</innerclass>
    <innerclass refid="classarrow_1_1py_1_1_owned_ref_no_g_i_l" prot="public">arrow::py::OwnedRefNoGIL</innerclass>
    <innerclass refid="structarrow_1_1py_1_1_pandas_options" prot="public">arrow::py::PandasOptions</innerclass>
    <innerclass refid="classarrow_1_1py_1_1_py_acquire_g_i_l" prot="public">arrow::py::PyAcquireGIL</innerclass>
    <innerclass refid="classarrow_1_1py_1_1_py_buffer" prot="public">arrow::py::PyBuffer</innerclass>
    <innerclass refid="structarrow_1_1py_1_1_py_bytes_view" prot="public">arrow::py::PyBytesView</innerclass>
    <innerclass refid="structarrow_1_1py_1_1_py_conversion_options" prot="public">arrow::py::PyConversionOptions</innerclass>
    <innerclass refid="classarrow_1_1py_1_1_py_extension_type" prot="public">arrow::py::PyExtensionType</innerclass>
    <innerclass refid="classarrow_1_1py_1_1_py_foreign_buffer" prot="public">arrow::py::PyForeignBuffer</innerclass>
    <innerclass refid="classarrow_1_1py_1_1_py_output_stream" prot="public">arrow::py::PyOutputStream</innerclass>
    <innerclass refid="classarrow_1_1py_1_1_py_readable_file" prot="public">arrow::py::PyReadableFile</innerclass>
    <innerclass refid="classarrow_1_1py_1_1_py_release_g_i_l" prot="public">arrow::py::PyReleaseGIL</innerclass>
    <innerclass refid="structarrow_1_1py_1_1_python_type" prot="public">arrow::py::PythonType</innerclass>
    <innerclass refid="structarrow_1_1py_1_1_serialized_py_object" prot="public">arrow::py::SerializedPyObject</innerclass>
    <innerclass refid="structarrow_1_1py_1_1_sparse_tensor_counts" prot="public">arrow::py::SparseTensorCounts</innerclass>
    <innernamespace refid="namespacearrow_1_1py_1_1benchmark">arrow::py::benchmark</innernamespace>
    <innernamespace refid="namespacearrow_1_1py_1_1flight">arrow::py::flight</innernamespace>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacearrow_1_1py_1ad1d811a080da5958d76025483e677fde" prot="public" static="no" mutable="no">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> <ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
        <definition>ARROW_PYTHON_EXPORT PyObject* arrow::py::numpy_nan</definition>
        <argsstring></argsstring>
        <name>numpy_nan</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/config.h" line="29" column="1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacearrow_1_1py_1ae397fd327253f5ed91ba845863abb948" prot="public" static="no" mutable="no">
        <type>class <ref refid="arrow_2util_2visibility_8h_1a843cb8dccea68a22a2b9995605cb5a74" kindref="member">ARROW_NO_EXPORT</ref></type>
        <definition>class ARROW_NO_EXPORT arrow::py::PythonFile</definition>
        <argsstring></argsstring>
        <name>PythonFile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/io.h" line="25" column="1" bodyfile="/arrow/cpp/src/arrow/python/io.h" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacearrow_1_1py_1a6644b52797d063cfd5b83297319532f5" prot="public" static="yes" mutable="no">
        <type>constexpr int64_t</type>
        <definition>constexpr int64_t arrow::py::kPandasTimestampNull</definition>
        <argsstring></argsstring>
        <name>kPandasTimestampNull</name>
        <initializer>= std::numeric_limits&lt;int64_t&gt;::min()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/type_traits.h" line="38" column="1" bodyfile="/arrow/cpp/src/arrow/python/type_traits.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="namespacearrow_1_1py_1ac2a3f9e83e9460e926e9610b1e82cca5" prot="public" static="no" mutable="no">
        <type>constexpr int64_t</type>
        <definition>constexpr int64_t arrow::py::kNanosecondsInDay</definition>
        <argsstring></argsstring>
        <name>kNanosecondsInDay</name>
        <initializer>= 86400000000000LL</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/type_traits.h" line="39" column="1" bodyfile="/arrow/cpp/src/arrow/python/type_traits.h" bodystart="39" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacearrow_1_1py_1a0e5a456377543a9f60c44865f5c47e96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> <ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>ARROW_PYTHON_EXPORT Status arrow::py::ConvertArrayToPandas</definition>
        <argsstring>(const PandasOptions &amp;options, std::shared_ptr&lt; Array &gt; arr, PyObject *py_ref, PyObject **out)</argsstring>
        <name>ConvertArrayToPandas</name>
        <param>
          <type>const <ref refid="structarrow_1_1py_1_1_pandas_options" kindref="compound">PandasOptions</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt;</type>
          <declname>arr</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>py_ref</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> **</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/arrow_to_pandas.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1addab5ee7051c41f0a34e9ae52eb1271a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> <ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>ARROW_PYTHON_EXPORT Status arrow::py::ConvertChunkedArrayToPandas</definition>
        <argsstring>(const PandasOptions &amp;options, std::shared_ptr&lt; ChunkedArray &gt; col, PyObject *py_ref, PyObject **out)</argsstring>
        <name>ConvertChunkedArrayToPandas</name>
        <param>
          <type>const <ref refid="structarrow_1_1py_1_1_pandas_options" kindref="compound">PandasOptions</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_chunked_array" kindref="compound">ChunkedArray</ref> &gt;</type>
          <declname>col</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>py_ref</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> **</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/arrow_to_pandas.h" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1a5cfa0cf15195fbae31f58ae6f01da51a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> <ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>ARROW_PYTHON_EXPORT Status arrow::py::ConvertTableToPandas</definition>
        <argsstring>(const PandasOptions &amp;options, std::shared_ptr&lt; Table &gt; table, PyObject **out)</argsstring>
        <name>ConvertTableToPandas</name>
        <param>
          <type>const <ref refid="structarrow_1_1py_1_1_pandas_options" kindref="compound">PandasOptions</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> &gt;</type>
          <declname>table</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> **</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/arrow_to_pandas.h" line="115" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1a1113a76ab7c4a76286d0321cf5be6b32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> <ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>ARROW_PYTHON_EXPORT Status arrow::py::ConvertPyError</definition>
        <argsstring>(StatusCode code=StatusCode::UnknownError)</argsstring>
        <name>ConvertPyError</name>
        <param>
          <type><ref refid="namespacearrow_1a331ad1dbd1c157c8be168cb6548d188f" kindref="member">StatusCode</ref></type>
          <declname>code</declname>
          <defval><ref refid="namespacearrow_1a331ad1dbd1c157c8be168cb6548d188fabfaef30f1c8011c5cefa38ae470fb7aa" kindref="member">StatusCode::UnknownError</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/common.h" line="40" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1a57f23af2985054854984640fa50e0ef6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> <ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>ARROW_PYTHON_EXPORT Status arrow::py::PassPyError</definition>
        <argsstring>()</argsstring>
        <name>PassPyError</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/common.h" line="42" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1aed5431730b7cc34a7d97ee6ef9c0f558" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> bool</type>
        <definition>ARROW_PYTHON_EXPORT bool arrow::py::IsPyError</definition>
        <argsstring>(const Status &amp;status)</argsstring>
        <name>IsPyError</name>
        <param>
          <type>const <ref refid="classarrow_1_1_status" kindref="compound">Status</ref> &amp;</type>
          <declname>status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/common.h" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1a911c6ec152b9aff88dcba363d89b9fc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> void</type>
        <definition>ARROW_PYTHON_EXPORT void arrow::py::RestorePyError</definition>
        <argsstring>(const Status &amp;status)</argsstring>
        <name>RestorePyError</name>
        <param>
          <type>const <ref refid="classarrow_1_1_status" kindref="compound">Status</ref> &amp;</type>
          <declname>status</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/common.h" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1a37da12f47177606bf2725384804bef19" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::py::CheckPyError</definition>
        <argsstring>(StatusCode code=StatusCode::UnknownError)</argsstring>
        <name>CheckPyError</name>
        <param>
          <type><ref refid="namespacearrow_1a331ad1dbd1c157c8be168cb6548d188f" kindref="member">StatusCode</ref></type>
          <declname>code</declname>
          <defval><ref refid="namespacearrow_1a331ad1dbd1c157c8be168cb6548d188fabfaef30f1c8011c5cefa38ae470fb7aa" kindref="member">StatusCode::UnknownError</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/common.h" line="50" column="1" bodyfile="/arrow/cpp/src/arrow/python/common.h" bodystart="50" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1af31afdff1ed8ce0e3e08315b609757c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T arrow::py::GetResultValue</definition>
        <argsstring>(Result&lt; T &gt; result)</argsstring>
        <name>GetResultValue</name>
        <param>
          <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; T &gt;</type>
          <declname>result</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/common.h" line="66" column="1" bodyfile="/arrow/cpp/src/arrow/python/common.h" bodystart="66" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1a1851ff007ff03e0ac1655fa63515085b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Function</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto arrow::py::SafeCallIntoPython</definition>
        <argsstring>(Function &amp;&amp;func) -&gt; decltype(func())</argsstring>
        <name>SafeCallIntoPython</name>
        <param>
          <type>Function &amp;&amp;</type>
          <declname>func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/common.h" line="120" column="1" bodyfile="/arrow/cpp/src/arrow/python/common.h" bodystart="120" bodyend="134"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1ac2dd609c3eaaf1b9de1a370783cb3ea3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> void</type>
        <definition>ARROW_PYTHON_EXPORT void arrow::py::set_default_memory_pool</definition>
        <argsstring>(MemoryPool *pool)</argsstring>
        <name>set_default_memory_pool</name>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/common.h" line="292" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1ac88d01c02de1799ff375317de45a0378" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> <ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
        <definition>ARROW_PYTHON_EXPORT MemoryPool* arrow::py::get_memory_pool</definition>
        <argsstring>()</argsstring>
        <name>get_memory_pool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/common.h" line="293" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1a8ca9bcb6f8a6f41518a88650c672db45" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>ArgTypes</declname>
            <defname>ArgTypes</defname>
          </param>
        </templateparamlist>
        <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
        <definition>static PyObject* arrow::py::cpp_PyObject_CallMethod</definition>
        <argsstring>(PyObject *obj, const char *method_name, const char *argspec, ArgTypes... args)</argsstring>
        <name>cpp_PyObject_CallMethod</name>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>method_name</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>argspec</declname>
        </param>
        <param>
          <type>ArgTypes...</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/common.h" line="300" column="1" bodyfile="/arrow/cpp/src/arrow/python/common.h" bodystart="300" bodyend="304"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1a6c692866d4377f994449117f9860390f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> void</type>
        <definition>ARROW_PYTHON_EXPORT void arrow::py::set_numpy_nan</definition>
        <argsstring>(PyObject *obj)</argsstring>
        <name>set_numpy_nan</name>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/config.h" line="32" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1aa0929aaf4b201b05acfb06f94109b53f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> <ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>ARROW_PYTHON_EXPORT Status arrow::py::ReadSerializedObject</definition>
        <argsstring>(io::RandomAccessFile *src, SerializedPyObject *out)</argsstring>
        <name>ReadSerializedObject</name>
        <param>
          <type><ref refid="classarrow_1_1io_1_1_random_access_file" kindref="compound">io::RandomAccessFile</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="structarrow_1_1py_1_1_serialized_py_object" kindref="compound">SerializedPyObject</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Read serialized Python sequence from file interface using Arrow IPC. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>a RandomAccessFile </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the reconstructed data </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/deserialize.h" line="55" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1aa5d981d6285d399bfc0e463cda62a439" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> <ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>ARROW_PYTHON_EXPORT Status arrow::py::GetSerializedFromComponents</definition>
        <argsstring>(int num_tensors, const SparseTensorCounts &amp;num_sparse_tensors, int num_ndarrays, int num_buffers, PyObject *data, SerializedPyObject *out)</argsstring>
        <name>GetSerializedFromComponents</name>
        <param>
          <type>int</type>
          <declname>num_tensors</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1py_1_1_sparse_tensor_counts" kindref="compound">SparseTensorCounts</ref> &amp;</type>
          <declname>num_sparse_tensors</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_ndarrays</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_buffers</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="structarrow_1_1py_1_1_serialized_py_object" kindref="compound">SerializedPyObject</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Reconstruct <ref refid="structarrow_1_1py_1_1_serialized_py_object" kindref="compound">SerializedPyObject</ref> from representation produced by <ref refid="structarrow_1_1py_1_1_serialized_py_object_1a66feec2466708fafceb6f84c994405b7" kindref="member">SerializedPyObject::GetComponents</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">num_tensors</parametername>
</parameternamelist>
<parameterdescription>
<para>number of tensors in the object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">num_sparse_tensors</parametername>
</parameternamelist>
<parameterdescription>
<para>number of sparse tensors in the object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">num_ndarrays</parametername>
</parameternamelist>
<parameterdescription>
<para>number of numpy Ndarrays in the object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">num_buffers</parametername>
</parameternamelist>
<parameterdescription>
<para>number of buffers in the object </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>a list containing pyarrow.Buffer instances. It must be 1 + num_tensors * 2 + num_coo_tensors * 3 + num_csr_tensors * 4 + num_csc_tensors * 4 + num_buffers in length </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the reconstructed object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/deserialize.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1a820ee2776081b44577e8501c671e8dfd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> <ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>ARROW_PYTHON_EXPORT Status arrow::py::DeserializeObject</definition>
        <argsstring>(PyObject *context, const SerializedPyObject &amp;object, PyObject *base, PyObject **out)</argsstring>
        <name>DeserializeObject</name>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>context</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1py_1_1_serialized_py_object" kindref="compound">SerializedPyObject</ref> &amp;</type>
          <declname>object</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> **</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Reconstruct Python object from Arrow-serialized representation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">context</parametername>
</parameternamelist>
<parameterdescription>
<para>Serialization context which contains custom serialization and deserialization callbacks. Can be any Python object with a _serialize_callback method for serialization and a _deserialize_callback method for deserialization. If context is None, no custom serialization will be attempted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">object</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to deserialize </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">base</parametername>
</parameternamelist>
<parameterdescription>
<para>a Python object holding the underlying data that any NumPy arrays will reference, to avoid premature deallocation </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>The returned object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> This acquires the GIL </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/deserialize.h" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1a2a5953cda97b9dca79b9df8d49c34321" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> <ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>ARROW_PYTHON_EXPORT Status arrow::py::DeserializeNdarray</definition>
        <argsstring>(const SerializedPyObject &amp;object, std::shared_ptr&lt; Tensor &gt; *out)</argsstring>
        <name>DeserializeNdarray</name>
        <param>
          <type>const <ref refid="structarrow_1_1py_1_1_serialized_py_object" kindref="compound">SerializedPyObject</ref> &amp;</type>
          <declname>object</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_tensor" kindref="compound">Tensor</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Reconstruct Ndarray from Arrow-serialized representation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">object</parametername>
</parameternamelist>
<parameterdescription>
<para>Object to deserialize </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>The deserialized tensor </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/deserialize.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1ad1041ad462b988eecc7830708e1e72d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> <ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>ARROW_PYTHON_EXPORT Status arrow::py::NdarrayFromBuffer</definition>
        <argsstring>(std::shared_ptr&lt; Buffer &gt; src, std::shared_ptr&lt; Tensor &gt; *out)</argsstring>
        <name>NdarrayFromBuffer</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_tensor" kindref="compound">Tensor</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/deserialize.h" line="99" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1a8ee10c025c8a91b1c4a5e6a7b720b741" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> std::string</type>
        <definition>ARROW_PYTHON_EXPORT std::string arrow::py::PyExtensionName</definition>
        <argsstring>()</argsstring>
        <name>PyExtensionName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/extension_type.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1a3c71c99cd7069e9bbcdaae09d4877d4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> <ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>ARROW_PYTHON_EXPORT Status arrow::py::RegisterPyExtensionType</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;)</argsstring>
        <name>RegisterPyExtensionType</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/extension_type.h" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1a8544816a7e5ce62bbbd0543008664c70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> <ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>ARROW_PYTHON_EXPORT Status arrow::py::UnregisterPyExtensionType</definition>
        <argsstring>(const std::string &amp;type_name)</argsstring>
        <name>UnregisterPyExtensionType</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>type_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/extension_type.h" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1a98461ef66269f30df32aa4603a73ea2e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt;</type>
        <definition>ARROW_PYTHON_EXPORT std::shared_ptr&lt;DataType&gt; arrow::py::GetPrimitiveType</definition>
        <argsstring>(Type::type type)</argsstring>
        <name>GetPrimitiveType</name>
        <param>
          <type><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref></type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/helpers.h" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1a1fdd55363c5ee47f547f19ad14256e1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> <ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
        <definition>ARROW_PYTHON_EXPORT PyObject* arrow::py::PyHalf_FromHalf</definition>
        <argsstring>(npy_half value)</argsstring>
        <name>PyHalf_FromHalf</name>
        <param>
          <type>npy_half</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/helpers.h" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1af73ce2e544accf27cae3d37d682e1408" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> <ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>ARROW_PYTHON_EXPORT Status arrow::py::PyFloat_AsHalf</definition>
        <argsstring>(PyObject *obj, npy_half *out)</argsstring>
        <name>PyFloat_AsHalf</name>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>npy_half *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/helpers.h" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1ab60e46e5c81478aa20d16c1d9dfc760a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> <ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>ARROW_PYTHON_EXPORT arrow::Status arrow::py::InferArrowType</definition>
        <argsstring>(PyObject *obj, PyObject *mask, bool pandas_null_sentinels, std::shared_ptr&lt; arrow::DataType &gt; *out_type)</argsstring>
        <name>InferArrowType</name>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>pandas_null_sentinels</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">arrow::DataType</ref> &gt; *</type>
          <declname>out_type</declname>
        </param>
        <briefdescription>
<para>Infer Arrow type from a Python sequence. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">obj</parametername>
</parameternamelist>
<parameterdescription>
<para>the sequence of values </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional mask where True values are null. May be nullptr </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pandas_null_sentinels</parametername>
</parameternamelist>
<parameterdescription>
<para>use pandas&apos;s null value markers </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out_type</parametername>
</parameternamelist>
<parameterdescription>
<para>the inferred type </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/inference.h" line="49" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1acedd2ebe2337ff033ab28471711bec16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> <ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>ARROW_PYTHON_EXPORT arrow::Status arrow::py::InferArrowTypeAndSize</definition>
        <argsstring>(PyObject *obj, PyObject *mask, bool pandas_null_sentinels, int64_t *size, std::shared_ptr&lt; arrow::DataType &gt; *out_type)</argsstring>
        <name>InferArrowTypeAndSize</name>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>pandas_null_sentinels</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">arrow::DataType</ref> &gt; *</type>
          <declname>out_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/inference.h" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1abcbd2b4e5fcf07fd6c08e1cc77cfb951" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> bool</type>
        <definition>ARROW_PYTHON_EXPORT bool arrow::py::IsPyBool</definition>
        <argsstring>(PyObject *obj)</argsstring>
        <name>IsPyBool</name>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Checks whether the passed Python object is a boolean scalar. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/inference.h" line="59" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1a6f7bee75eea5a4cd0eada05253deae22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> bool</type>
        <definition>ARROW_PYTHON_EXPORT bool arrow::py::IsPyInt</definition>
        <argsstring>(PyObject *obj)</argsstring>
        <name>IsPyInt</name>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Checks whether the passed Python object is an integer scalar. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/inference.h" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1afcf64648eec5d9bd063e62c07fada4e0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> bool</type>
        <definition>ARROW_PYTHON_EXPORT bool arrow::py::IsPyFloat</definition>
        <argsstring>(PyObject *obj)</argsstring>
        <name>IsPyFloat</name>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Checks whether the passed Python object is a float scalar. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/inference.h" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1a88db883b5b7ea155cefdc719eba5f45a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> <ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>ARROW_PYTHON_EXPORT Status arrow::py::NumPyDtypeToArrow</definition>
        <argsstring>(PyObject *dtype, std::shared_ptr&lt; DataType &gt; *out)</argsstring>
        <name>NumPyDtypeToArrow</name>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/numpy_convert.h" line="52" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1ad1802e9878bad6a44a7cb4a75344b472" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> <ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>ARROW_PYTHON_EXPORT Status arrow::py::NumPyDtypeToArrow</definition>
        <argsstring>(PyArray_Descr *descr, std::shared_ptr&lt; DataType &gt; *out)</argsstring>
        <name>NumPyDtypeToArrow</name>
        <param>
          <type>PyArray_Descr *</type>
          <declname>descr</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/numpy_convert.h" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1a4d3d1993fe9d4eaeafcbfa92acff8a9a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> <ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>ARROW_PYTHON_EXPORT Status arrow::py::NdarrayToTensor</definition>
        <argsstring>(MemoryPool *pool, PyObject *ao, const std::vector&lt; std::string &gt; &amp;dim_names, std::shared_ptr&lt; Tensor &gt; *out)</argsstring>
        <name>NdarrayToTensor</name>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>ao</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dim_names</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_tensor" kindref="compound">Tensor</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/numpy_convert.h" line="56" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1a3c8d7fa5abd78605f3a40c90ff71b7c6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> <ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>ARROW_PYTHON_EXPORT Status arrow::py::TensorToNdarray</definition>
        <argsstring>(const std::shared_ptr&lt; Tensor &gt; &amp;tensor, PyObject *base, PyObject **out)</argsstring>
        <name>TensorToNdarray</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_tensor" kindref="compound">Tensor</ref> &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> **</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/numpy_convert.h" line="60" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1a25e579d635eb08dca4ca027d364d9b41" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> <ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>ARROW_PYTHON_EXPORT Status arrow::py::SparseCOOTensorToNdarray</definition>
        <argsstring>(const std::shared_ptr&lt; SparseCOOTensor &gt; &amp;sparse_tensor, PyObject *base, PyObject **out_data, PyObject **out_coords)</argsstring>
        <name>SparseCOOTensorToNdarray</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="namespacearrow_1ac9b05a1d2db4d6cce70e2adc6ae983f9" kindref="member">SparseCOOTensor</ref> &gt; &amp;</type>
          <declname>sparse_tensor</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> **</type>
          <declname>out_data</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> **</type>
          <declname>out_coords</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/numpy_convert.h" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1ae81af18542e102b1d6d0434c7a5c796e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::py::SparseCSXMatrixToNdarray</definition>
        <argsstring>(const std::shared_ptr&lt; SparseTensor &gt; &amp;sparse_tensor, PyObject *base, PyObject **out_data, PyObject **out_indptr, PyObject **out_indices)</argsstring>
        <name>SparseCSXMatrixToNdarray</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_sparse_tensor" kindref="compound">SparseTensor</ref> &gt; &amp;</type>
          <declname>sparse_tensor</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> **</type>
          <declname>out_data</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> **</type>
          <declname>out_indptr</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> **</type>
          <declname>out_indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/numpy_convert.h" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1ad02d4120574aaea57f44322518baab5a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> <ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>ARROW_PYTHON_EXPORT Status arrow::py::SparseCSRMatrixToNdarray</definition>
        <argsstring>(const std::shared_ptr&lt; SparseCSRMatrix &gt; &amp;sparse_tensor, PyObject *base, PyObject **out_data, PyObject **out_indptr, PyObject **out_indices)</argsstring>
        <name>SparseCSRMatrixToNdarray</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="namespacearrow_1a30853e74abee092db4aa50440dab9ce8" kindref="member">SparseCSRMatrix</ref> &gt; &amp;</type>
          <declname>sparse_tensor</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> **</type>
          <declname>out_data</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> **</type>
          <declname>out_indptr</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> **</type>
          <declname>out_indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/numpy_convert.h" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1ab9a35ad2aa3265e039ecf71e334f78ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> <ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>ARROW_PYTHON_EXPORT Status arrow::py::SparseCSCMatrixToNdarray</definition>
        <argsstring>(const std::shared_ptr&lt; SparseCSCMatrix &gt; &amp;sparse_tensor, PyObject *base, PyObject **out_data, PyObject **out_indptr, PyObject **out_indices)</argsstring>
        <name>SparseCSCMatrixToNdarray</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="namespacearrow_1a365a8eacbf769f8ce28bac334b84690c" kindref="member">SparseCSCMatrix</ref> &gt; &amp;</type>
          <declname>sparse_tensor</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> **</type>
          <declname>out_data</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> **</type>
          <declname>out_indptr</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> **</type>
          <declname>out_indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/numpy_convert.h" line="75" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1acf15a1c465dd67393e0b25f26d2ef249" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> <ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>ARROW_PYTHON_EXPORT Status arrow::py::SparseCSFTensorToNdarray</definition>
        <argsstring>(const std::shared_ptr&lt; SparseCSFTensor &gt; &amp;sparse_tensor, PyObject *base, PyObject **out_data, PyObject **out_indptr, PyObject **out_indices)</argsstring>
        <name>SparseCSFTensorToNdarray</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="namespacearrow_1a425323660be318b4ad32315190d83371" kindref="member">SparseCSFTensor</ref> &gt; &amp;</type>
          <declname>sparse_tensor</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>base</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> **</type>
          <declname>out_data</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> **</type>
          <declname>out_indptr</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> **</type>
          <declname>out_indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/numpy_convert.h" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1a5e14fee8bb41aa6641fce7650b35bb75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> <ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>ARROW_PYTHON_EXPORT Status arrow::py::NdarraysToSparseCOOTensor</definition>
        <argsstring>(MemoryPool *pool, PyObject *data_ao, PyObject *coords_ao, const std::vector&lt; int64_t &gt; &amp;shape, const std::vector&lt; std::string &gt; &amp;dim_names, std::shared_ptr&lt; SparseCOOTensor &gt; *out)</argsstring>
        <name>NdarraysToSparseCOOTensor</name>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>data_ao</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>coords_ao</declname>
        </param>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dim_names</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="namespacearrow_1ac9b05a1d2db4d6cce70e2adc6ae983f9" kindref="member">SparseCOOTensor</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/numpy_convert.h" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1aa1466a6052ef3cf4c170b63ac865ea5d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> <ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>ARROW_PYTHON_EXPORT Status arrow::py::NdarraysToSparseCSRMatrix</definition>
        <argsstring>(MemoryPool *pool, PyObject *data_ao, PyObject *indptr_ao, PyObject *indices_ao, const std::vector&lt; int64_t &gt; &amp;shape, const std::vector&lt; std::string &gt; &amp;dim_names, std::shared_ptr&lt; SparseCSRMatrix &gt; *out)</argsstring>
        <name>NdarraysToSparseCSRMatrix</name>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>data_ao</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>indptr_ao</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>indices_ao</declname>
        </param>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dim_names</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="namespacearrow_1a30853e74abee092db4aa50440dab9ce8" kindref="member">SparseCSRMatrix</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/numpy_convert.h" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1a032cc67b34a0d5dadb163777e53f9656" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> <ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>ARROW_PYTHON_EXPORT Status arrow::py::NdarraysToSparseCSCMatrix</definition>
        <argsstring>(MemoryPool *pool, PyObject *data_ao, PyObject *indptr_ao, PyObject *indices_ao, const std::vector&lt; int64_t &gt; &amp;shape, const std::vector&lt; std::string &gt; &amp;dim_names, std::shared_ptr&lt; SparseCSCMatrix &gt; *out)</argsstring>
        <name>NdarraysToSparseCSCMatrix</name>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>data_ao</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>indptr_ao</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>indices_ao</declname>
        </param>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dim_names</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="namespacearrow_1a365a8eacbf769f8ce28bac334b84690c" kindref="member">SparseCSCMatrix</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/numpy_convert.h" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1a71307f368cad3b32bc69d810df533c91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> <ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>ARROW_PYTHON_EXPORT Status arrow::py::NdarraysToSparseCSFTensor</definition>
        <argsstring>(MemoryPool *pool, PyObject *data_ao, PyObject *indptr_ao, PyObject *indices_ao, const std::vector&lt; int64_t &gt; &amp;shape, const std::vector&lt; int64_t &gt; &amp;axis_order, const std::vector&lt; std::string &gt; &amp;dim_names, std::shared_ptr&lt; SparseCSFTensor &gt; *out)</argsstring>
        <name>NdarraysToSparseCSFTensor</name>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>data_ao</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>indptr_ao</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>indices_ao</declname>
        </param>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>axis_order</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dim_names</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="namespacearrow_1a425323660be318b4ad32315190d83371" kindref="member">SparseCSFTensor</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/numpy_convert.h" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1a3bb6e0a66a20b96f5774e25c0f1e5dbf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> <ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>ARROW_PYTHON_EXPORT Status arrow::py::TensorToSparseCOOTensor</definition>
        <argsstring>(const std::shared_ptr&lt; Tensor &gt; &amp;tensor, std::shared_ptr&lt; SparseCOOTensor &gt; *csparse_tensor)</argsstring>
        <name>TensorToSparseCOOTensor</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_tensor" kindref="compound">Tensor</ref> &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="namespacearrow_1ac9b05a1d2db4d6cce70e2adc6ae983f9" kindref="member">SparseCOOTensor</ref> &gt; *</type>
          <declname>csparse_tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/numpy_convert.h" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1afefbfef8636e9cca277cb09f2d4b0170" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> <ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>ARROW_PYTHON_EXPORT Status arrow::py::TensorToSparseCSRMatrix</definition>
        <argsstring>(const std::shared_ptr&lt; Tensor &gt; &amp;tensor, std::shared_ptr&lt; SparseCSRMatrix &gt; *csparse_tensor)</argsstring>
        <name>TensorToSparseCSRMatrix</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_tensor" kindref="compound">Tensor</ref> &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="namespacearrow_1a30853e74abee092db4aa50440dab9ce8" kindref="member">SparseCSRMatrix</ref> &gt; *</type>
          <declname>csparse_tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/numpy_convert.h" line="108" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1ae96addc07a51b80e6183e200b82aa95a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> <ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>ARROW_PYTHON_EXPORT Status arrow::py::TensorToSparseCSCMatrix</definition>
        <argsstring>(const std::shared_ptr&lt; Tensor &gt; &amp;tensor, std::shared_ptr&lt; SparseCSCMatrix &gt; *csparse_tensor)</argsstring>
        <name>TensorToSparseCSCMatrix</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_tensor" kindref="compound">Tensor</ref> &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="namespacearrow_1a365a8eacbf769f8ce28bac334b84690c" kindref="member">SparseCSCMatrix</ref> &gt; *</type>
          <declname>csparse_tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/numpy_convert.h" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1a7cd0e1defb34ca4edfc12e805e207ffa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> <ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>ARROW_PYTHON_EXPORT Status arrow::py::TensorToSparseCSFTensor</definition>
        <argsstring>(const std::shared_ptr&lt; Tensor &gt; &amp;tensor, std::shared_ptr&lt; SparseCSFTensor &gt; *csparse_tensor)</argsstring>
        <name>TensorToSparseCSFTensor</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_tensor" kindref="compound">Tensor</ref> &gt; &amp;</type>
          <declname>tensor</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="namespacearrow_1a425323660be318b4ad32315190d83371" kindref="member">SparseCSFTensor</ref> &gt; *</type>
          <declname>csparse_tensor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/numpy_convert.h" line="116" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1a7027c10f227e02e4396de7ee2259467c" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string arrow::py::GetNumPyTypeName</definition>
        <argsstring>(int npy_type)</argsstring>
        <name>GetNumPyTypeName</name>
        <param>
          <type>int</type>
          <declname>npy_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/numpy_internal.h" line="75" column="1" bodyfile="/arrow/cpp/src/arrow/python/numpy_internal.h" bodystart="75" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1a52c0b9dd7f438cb97fb897f1e6bf04b1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename VISITOR</type>
          </param>
        </templateparamlist>
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::py::VisitNumpyArrayInline</definition>
        <argsstring>(PyArrayObject *arr, VISITOR *visitor)</argsstring>
        <name>VisitNumpyArrayInline</name>
        <param>
          <type>PyArrayObject *</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>VISITOR *</type>
          <declname>visitor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/numpy_internal.h" line="124" column="1" bodyfile="/arrow/cpp/src/arrow/python/numpy_internal.h" bodystart="124" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1aed44255c90822cd2a6a0b2e6764dc2ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int arrow::py::import_numpy</definition>
        <argsstring>()</argsstring>
        <name>import_numpy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/numpy_interop.h" line="73" column="1" bodyfile="/arrow/cpp/src/arrow/python/numpy_interop.h" bodystart="73" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1a04b27faa75e48a0e8e019c55f1fc7554" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int arrow::py::fix_numpy_type_num</definition>
        <argsstring>(int type_num)</argsstring>
        <name>fix_numpy_type_num</name>
        <param>
          <type>int</type>
          <declname>type_num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/numpy_interop.h" line="83" column="1" bodyfile="/arrow/cpp/src/arrow/python/numpy_interop.h" bodystart="83" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1af269a13f57c60741fdd6c8adf38d1018" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> <ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>ARROW_PYTHON_EXPORT Status arrow::py::NdarrayToArrow</definition>
        <argsstring>(MemoryPool *pool, PyObject *ao, PyObject *mo, bool from_pandas, const std::shared_ptr&lt; DataType &gt; &amp;type, const compute::CastOptions &amp;cast_options, std::shared_ptr&lt; ChunkedArray &gt; *out)</argsstring>
        <name>NdarrayToArrow</name>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>ao</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>mo</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>from_pandas</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1compute_1_1_cast_options" kindref="compound">compute::CastOptions</ref> &amp;</type>
          <declname>cast_options</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_chunked_array" kindref="compound">ChunkedArray</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Convert NumPy arrays to Arrow. </para>        </briefdescription>
        <detaileddescription>
<para>If target data type is not known, pass a type with null</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pool</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory pool for any memory allocations </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ao</parametername>
</parameternamelist>
<parameterdescription>
<para>an ndarray with the array data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mo</parametername>
</parameternamelist>
<parameterdescription>
<para>an ndarray with a null mask (True is null), optional </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">from_pandas</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, use pandas&apos;s null sentinels to determine whether values are null </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">type</parametername>
</parameternamelist>
<parameterdescription>
<para>a specific type to cast to, may be null </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">cast_options</parametername>
</parameternamelist>
<parameterdescription>
<para>casting options </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classarrow_1_1_chunked_array" kindref="compound">ChunkedArray</ref>, to accommodate chunked output </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/numpy_to_arrow.h" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1ae521118d03dc560f11b97195fe60e844" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> <ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>ARROW_PYTHON_EXPORT Status arrow::py::NdarrayToArrow</definition>
        <argsstring>(MemoryPool *pool, PyObject *ao, PyObject *mo, bool from_pandas, const std::shared_ptr&lt; DataType &gt; &amp;type, std::shared_ptr&lt; ChunkedArray &gt; *out)</argsstring>
        <name>NdarrayToArrow</name>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>ao</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>mo</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>from_pandas</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_chunked_array" kindref="compound">ChunkedArray</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Safely convert NumPy arrays to Arrow. </para>        </briefdescription>
        <detaileddescription>
<para>If target data type is not known, pass a type with null.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pool</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory pool for any memory allocations </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">ao</parametername>
</parameternamelist>
<parameterdescription>
<para>an ndarray with the array data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mo</parametername>
</parameternamelist>
<parameterdescription>
<para>an ndarray with a null mask (True is null), optional </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">from_pandas</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, use pandas&apos;s null sentinels to determine whether values are null </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">type</parametername>
</parameternamelist>
<parameterdescription>
<para>a specific type to cast to, may be null </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classarrow_1_1_chunked_array" kindref="compound">ChunkedArray</ref>, to accommodate chunked output </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/numpy_to_arrow.h" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1afec4e805e6b8bca5a479fa012635d3f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> int</type>
        <definition>ARROW_PYTHON_EXPORT int arrow::py::import_pyarrow</definition>
        <argsstring>()</argsstring>
        <name>import_pyarrow</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/pyarrow.h" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1ac053cb528b08493152e3cfe87da2141a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> <ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>ARROW_PYTHON_EXPORT Status arrow::py::ConvertPySequence</definition>
        <argsstring>(PyObject *obj, PyObject *mask, const PyConversionOptions &amp;options, std::shared_ptr&lt; ChunkedArray &gt; *out)</argsstring>
        <name>ConvertPySequence</name>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>mask</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1py_1_1_py_conversion_options" kindref="compound">PyConversionOptions</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_chunked_array" kindref="compound">ChunkedArray</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Convert sequence (list, generator, NumPy array with dtype object) of Python objects. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">obj</parametername>
</parameternamelist>
<parameterdescription>
<para>the sequence to convert </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">mask</parametername>
</parameternamelist>
<parameterdescription>
<para>a NumPy array of true/false values to indicate whether values in the sequence are null (true) or not null (false). This parameter may be null </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">options</parametername>
</parameternamelist>
<parameterdescription>
<para>various conversion options </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classarrow_1_1_chunked_array" kindref="compound">ChunkedArray</ref> containing one or more chunks </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/python_to_arrow.h" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1adafababcc379fa3f31e9d0a76879fbef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> <ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>ARROW_PYTHON_EXPORT Status arrow::py::ConvertPySequence</definition>
        <argsstring>(PyObject *obj, const PyConversionOptions &amp;options, std::shared_ptr&lt; ChunkedArray &gt; *out)</argsstring>
        <name>ConvertPySequence</name>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>obj</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1py_1_1_py_conversion_options" kindref="compound">PyConversionOptions</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_chunked_array" kindref="compound">ChunkedArray</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/python_to_arrow.h" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1a54b16e387987d78f04dd5add13904560" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> <ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>ARROW_PYTHON_EXPORT Status arrow::py::SerializeObject</definition>
        <argsstring>(PyObject *context, PyObject *sequence, SerializedPyObject *out)</argsstring>
        <name>SerializeObject</name>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>context</declname>
        </param>
        <param>
          <type><ref refid="serialize_8h_1ae19630c1f4ca6d5236b30719d9140013" kindref="member">PyObject</ref> *</type>
          <declname>sequence</declname>
        </param>
        <param>
          <type><ref refid="structarrow_1_1py_1_1_serialized_py_object" kindref="compound">SerializedPyObject</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Serialize Python sequence as a <ref refid="structarrow_1_1py_1_1_serialized_py_object" kindref="compound">SerializedPyObject</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">context</parametername>
</parameternamelist>
<parameterdescription>
<para>Serialization context which contains custom serialization and deserialization callbacks. Can be any Python object with a _serialize_callback method for serialization and a _deserialize_callback method for deserialization. If context is None, no custom serialization will be attempted. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">sequence</parametername>
</parameternamelist>
<parameterdescription>
<para>A Python sequence object to serialize to Arrow data structures </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>The serialized representation </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></para></simplesect>
Release GIL before calling </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/serialize.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1ad6c0daf380296499de5cdb62707df831" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> <ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>ARROW_PYTHON_EXPORT Status arrow::py::SerializeTensor</definition>
        <argsstring>(std::shared_ptr&lt; Tensor &gt; tensor, py::SerializedPyObject *out)</argsstring>
        <name>SerializeTensor</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_tensor" kindref="compound">Tensor</ref> &gt;</type>
          <declname>tensor</declname>
        </param>
        <param>
          <type><ref refid="structarrow_1_1py_1_1_serialized_py_object" kindref="compound">py::SerializedPyObject</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Serialize an Arrow <ref refid="classarrow_1_1_tensor" kindref="compound">Tensor</ref> as a <ref refid="structarrow_1_1py_1_1_serialized_py_object" kindref="compound">SerializedPyObject</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">tensor</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classarrow_1_1_tensor" kindref="compound">Tensor</ref> to be serialized </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>The serialized representation </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/serialize.h" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1py_1ae038141a1e8cbe2a693f5bbfda86cac2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2python_2visibility_8h_1a86dc99bcc6e4347fd32c29d18f412d18" kindref="member">ARROW_PYTHON_EXPORT</ref> <ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>ARROW_PYTHON_EXPORT Status arrow::py::WriteNdarrayHeader</definition>
        <argsstring>(std::shared_ptr&lt; DataType &gt; dtype, const std::vector&lt; int64_t &gt; &amp;shape, int64_t tensor_num_bytes, io::OutputStream *dst)</argsstring>
        <name>WriteNdarrayHeader</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt;</type>
          <declname>dtype</declname>
        </param>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>tensor_num_bytes</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1io_1_1_output_stream" kindref="compound">io::OutputStream</ref> *</type>
          <declname>dst</declname>
        </param>
        <briefdescription>
<para>Write the <ref refid="classarrow_1_1_tensor" kindref="compound">Tensor</ref> metadata header to an OutputStream. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">dtype</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> of the <ref refid="classarrow_1_1_tensor" kindref="compound">Tensor</ref> </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The shape of the tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tensor_num_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The length of the <ref refid="classarrow_1_1_tensor" kindref="compound">Tensor</ref> data in bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>The OutputStream to write the <ref refid="classarrow_1_1_tensor" kindref="compound">Tensor</ref> header to </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/python/serialize.h" line="112" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/arrow/python/arrow_to_pandas.h" line="42" column="1"/>
  </compounddef>
</doxygen>
