<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="column__reader_8h" kind="file" language="C++">
    <compoundname>column_reader.h</compoundname>
    <includes local="no">cstdint</includes>
    <includes local="no">memory</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes refid="exception_8h" local="yes">parquet/exception.h</includes>
    <includes refid="parquet_2platform_8h" local="yes">parquet/platform.h</includes>
    <includes refid="schema_8h" local="yes">parquet/schema.h</includes>
    <includes refid="parquet_2types_8h" local="yes">parquet/types.h</includes>
    <includedby refid="parquet_2api_2reader_8h" local="yes">/arrow/cpp/src/parquet/api/reader.h</includedby>
    <includedby refid="reader__internal_8h" local="yes">/arrow/cpp/src/parquet/arrow/reader_internal.h</includedby>
    <includedby refid="column__scanner_8h" local="yes">/arrow/cpp/src/parquet/column_scanner.h</includedby>
    <includedby refid="stream__reader_8h" local="yes">/arrow/cpp/src/parquet/stream_reader.h</includedby>
    <incdepgraph>
      <node id="18867">
        <label>atomic</label>
      </node>
      <node id="18853">
        <label>arrow/util/compare.h</label>
        <link refid="util_2compare_8h"/>
        <childnode refid="18837" relation="include">
        </childnode>
        <childnode refid="18850" relation="include">
        </childnode>
        <childnode refid="18838" relation="include">
        </childnode>
        <childnode refid="18845" relation="include">
        </childnode>
      </node>
      <node id="18875">
        <label>limits</label>
      </node>
      <node id="18836">
        <label>cstdint</label>
      </node>
      <node id="18848">
        <label>arrow/buffer.h</label>
        <link refid="buffer_8h"/>
        <childnode refid="18836" relation="include">
        </childnode>
        <childnode refid="18849" relation="include">
        </childnode>
        <childnode refid="18837" relation="include">
        </childnode>
        <childnode refid="18843" relation="include">
        </childnode>
        <childnode refid="18850" relation="include">
        </childnode>
        <childnode refid="18838" relation="include">
        </childnode>
        <childnode refid="18839" relation="include">
        </childnode>
        <childnode refid="18851" relation="include">
        </childnode>
        <childnode refid="18852" relation="include">
        </childnode>
        <childnode refid="18854" relation="include">
        </childnode>
        <childnode refid="18844" relation="include">
        </childnode>
        <childnode refid="18845" relation="include">
        </childnode>
        <childnode refid="18858" relation="include">
        </childnode>
        <childnode refid="18846" relation="include">
        </childnode>
      </node>
      <node id="18869">
        <label>endian.h</label>
      </node>
      <node id="18854">
        <label>arrow/status.h</label>
        <link refid="status_8h"/>
        <childnode refid="18849" relation="include">
        </childnode>
        <childnode refid="18855" relation="include">
        </childnode>
        <childnode refid="18837" relation="include">
        </childnode>
        <childnode refid="18843" relation="include">
        </childnode>
        <childnode refid="18838" relation="include">
        </childnode>
        <childnode refid="18853" relation="include">
        </childnode>
        <childnode refid="18845" relation="include">
        </childnode>
        <childnode refid="18856" relation="include">
        </childnode>
        <childnode refid="18846" relation="include">
        </childnode>
      </node>
      <node id="18876">
        <label>arrow/util/functional.h</label>
        <link refid="functional_8h"/>
        <childnode refid="18877" relation="include">
        </childnode>
        <childnode refid="18850" relation="include">
        </childnode>
        <childnode refid="18845" relation="include">
        </childnode>
      </node>
      <node id="18847">
        <label>parquet/platform.h</label>
        <link refid="parquet_2platform_8h"/>
        <childnode refid="18836" relation="include">
        </childnode>
        <childnode refid="18837" relation="include">
        </childnode>
        <childnode refid="18848" relation="include">
        </childnode>
        <childnode refid="18860" relation="include">
        </childnode>
        <childnode refid="18861" relation="include">
        </childnode>
        <childnode refid="18866" relation="include">
        </childnode>
        <childnode refid="18854" relation="include">
        </childnode>
        <childnode refid="18868" relation="include">
        </childnode>
        <childnode refid="18879" relation="include">
        </childnode>
        <childnode refid="18845" relation="include">
        </childnode>
        <childnode refid="18858" relation="include">
        </childnode>
      </node>
      <node id="18844">
        <label>arrow/type_fwd.h</label>
        <link refid="type__fwd_8h"/>
        <childnode refid="18837" relation="include">
        </childnode>
        <childnode refid="18843" relation="include">
        </childnode>
        <childnode refid="18839" relation="include">
        </childnode>
        <childnode refid="18845" relation="include">
        </childnode>
        <childnode refid="18846" relation="include">
        </childnode>
      </node>
      <node id="18860">
        <label>arrow/io/interfaces.h</label>
        <link refid="interfaces_8h"/>
        <childnode refid="18836" relation="include">
        </childnode>
        <childnode refid="18837" relation="include">
        </childnode>
        <childnode refid="18843" relation="include">
        </childnode>
        <childnode refid="18839" relation="include">
        </childnode>
        <childnode refid="18852" relation="include">
        </childnode>
        <childnode refid="18844" relation="include">
        </childnode>
        <childnode refid="18845" relation="include">
        </childnode>
        <childnode refid="18858" relation="include">
        </childnode>
        <childnode refid="18846" relation="include">
        </childnode>
      </node>
      <node id="18874">
        <label>cmath</label>
      </node>
      <node id="18873">
        <label>cassert</label>
      </node>
      <node id="18865">
        <label>arrow/util/checked_cast.h</label>
        <link refid="checked__cast_8h"/>
        <childnode refid="18837" relation="include">
        </childnode>
        <childnode refid="18850" relation="include">
        </childnode>
      </node>
      <node id="18843">
        <label>string</label>
      </node>
      <node id="18859">
        <label>arrow/vendored/string_view.hpp</label>
      </node>
      <node id="18840">
        <label>parquet/exception.h</label>
        <link refid="exception_8h"/>
        <childnode refid="18841" relation="include">
        </childnode>
        <childnode refid="18842" relation="include">
        </childnode>
        <childnode refid="18843" relation="include">
        </childnode>
        <childnode refid="18838" relation="include">
        </childnode>
        <childnode refid="18844" relation="include">
        </childnode>
        <childnode refid="18847" relation="include">
        </childnode>
      </node>
      <node id="18841">
        <label>exception</label>
      </node>
      <node id="18857">
        <label>ostream</label>
      </node>
      <node id="18846">
        <label>arrow/util/visibility.h</label>
        <link refid="arrow_2util_2visibility_8h"/>
      </node>
      <node id="18851">
        <label>arrow/device.h</label>
        <link refid="device_8h"/>
        <childnode refid="18836" relation="include">
        </childnode>
        <childnode refid="18837" relation="include">
        </childnode>
        <childnode refid="18843" relation="include">
        </childnode>
        <childnode refid="18852" relation="include">
        </childnode>
        <childnode refid="18844" relation="include">
        </childnode>
        <childnode refid="18853" relation="include">
        </childnode>
        <childnode refid="18845" relation="include">
        </childnode>
        <childnode refid="18846" relation="include">
        </childnode>
      </node>
      <node id="18866">
        <label>arrow/memory_pool.h</label>
        <link refid="memory__pool_8h"/>
        <childnode refid="18867" relation="include">
        </childnode>
        <childnode refid="18836" relation="include">
        </childnode>
        <childnode refid="18837" relation="include">
        </childnode>
        <childnode refid="18843" relation="include">
        </childnode>
        <childnode refid="18854" relation="include">
        </childnode>
        <childnode refid="18844" relation="include">
        </childnode>
        <childnode refid="18846" relation="include">
        </childnode>
      </node>
      <node id="18868">
        <label>arrow/util/bit_util.h</label>
        <link refid="bit__util_8h"/>
        <childnode refid="18869" relation="include">
        </childnode>
        <childnode refid="18870" relation="include">
        </childnode>
        <childnode refid="18871" relation="include">
        </childnode>
        <childnode refid="18872" relation="include">
        </childnode>
        <childnode refid="18873" relation="include">
        </childnode>
        <childnode refid="18874" relation="include">
        </childnode>
        <childnode refid="18836" relation="include">
        </childnode>
        <childnode refid="18849" relation="include">
        </childnode>
        <childnode refid="18875" relation="include">
        </childnode>
        <childnode refid="18837" relation="include">
        </childnode>
        <childnode refid="18843" relation="include">
        </childnode>
        <childnode refid="18850" relation="include">
        </childnode>
        <childnode refid="18838" relation="include">
        </childnode>
        <childnode refid="18839" relation="include">
        </childnode>
        <childnode refid="18848" relation="include">
        </childnode>
        <childnode refid="18863" relation="include">
        </childnode>
        <childnode refid="18853" relation="include">
        </childnode>
        <childnode refid="18876" relation="include">
        </childnode>
        <childnode refid="18845" relation="include">
        </childnode>
        <childnode refid="18856" relation="include">
        </childnode>
        <childnode refid="18858" relation="include">
        </childnode>
        <childnode refid="18878" relation="include">
        </childnode>
        <childnode refid="18846" relation="include">
        </childnode>
      </node>
      <node id="18872">
        <label>bitset</label>
      </node>
      <node id="18877">
        <label>tuple</label>
      </node>
      <node id="18835">
        <label>/arrow/cpp/src/parquet/column_reader.h</label>
        <link refid="column__reader_8h"/>
        <childnode refid="18836" relation="include">
        </childnode>
        <childnode refid="18837" relation="include">
        </childnode>
        <childnode refid="18838" relation="include">
        </childnode>
        <childnode refid="18839" relation="include">
        </childnode>
        <childnode refid="18840" relation="include">
        </childnode>
        <childnode refid="18847" relation="include">
        </childnode>
        <childnode refid="18880" relation="include">
        </childnode>
        <childnode refid="18882" relation="include">
        </childnode>
      </node>
      <node id="18839">
        <label>vector</label>
      </node>
      <node id="18864">
        <label>new</label>
      </node>
      <node id="18838">
        <label>utility</label>
      </node>
      <node id="18858">
        <label>arrow/util/string_view.h</label>
        <link refid="string__view_8h"/>
        <childnode refid="18836" relation="include">
        </childnode>
        <childnode refid="18843" relation="include">
        </childnode>
        <childnode refid="18859" relation="include">
        </childnode>
      </node>
      <node id="18871">
        <label>array</label>
      </node>
      <node id="18842">
        <label>sstream</label>
      </node>
      <node id="18861">
        <label>arrow/io/memory.h</label>
        <link refid="io_2memory_8h"/>
        <childnode refid="18836" relation="include">
        </childnode>
        <childnode refid="18837" relation="include">
        </childnode>
        <childnode refid="18862" relation="include">
        </childnode>
        <childnode refid="18860" relation="include">
        </childnode>
        <childnode refid="18844" relation="include">
        </childnode>
        <childnode refid="18858" relation="include">
        </childnode>
        <childnode refid="18846" relation="include">
        </childnode>
      </node>
      <node id="18880">
        <label>parquet/schema.h</label>
        <link refid="schema_8h"/>
        <childnode refid="18836" relation="include">
        </childnode>
        <childnode refid="18837" relation="include">
        </childnode>
        <childnode refid="18857" relation="include">
        </childnode>
        <childnode refid="18843" relation="include">
        </childnode>
        <childnode refid="18881" relation="include">
        </childnode>
        <childnode refid="18838" relation="include">
        </childnode>
        <childnode refid="18839" relation="include">
        </childnode>
        <childnode refid="18847" relation="include">
        </childnode>
        <childnode refid="18882" relation="include">
        </childnode>
      </node>
      <node id="18852">
        <label>arrow/io/type_fwd.h</label>
        <link refid="io_2type__fwd_8h"/>
      </node>
      <node id="18855">
        <label>iosfwd</label>
      </node>
      <node id="18862">
        <label>arrow/io/concurrency.h</label>
        <link refid="concurrency_8h"/>
        <childnode refid="18837" relation="include">
        </childnode>
        <childnode refid="18860" relation="include">
        </childnode>
        <childnode refid="18863" relation="include">
        </childnode>
        <childnode refid="18854" relation="include">
        </childnode>
        <childnode refid="18865" relation="include">
        </childnode>
        <childnode refid="18845" relation="include">
        </childnode>
        <childnode refid="18846" relation="include">
        </childnode>
      </node>
      <node id="18881">
        <label>unordered_map</label>
      </node>
      <node id="18863">
        <label>arrow/result.h</label>
        <link refid="result_8h"/>
        <childnode refid="18864" relation="include">
        </childnode>
        <childnode refid="18843" relation="include">
        </childnode>
        <childnode refid="18850" relation="include">
        </childnode>
        <childnode refid="18838" relation="include">
        </childnode>
        <childnode refid="18854" relation="include">
        </childnode>
        <childnode refid="18853" relation="include">
        </childnode>
      </node>
      <node id="18850">
        <label>type_traits</label>
      </node>
      <node id="18879">
        <label>arrow/util/compression.h</label>
        <link refid="compression_8h"/>
        <childnode refid="18836" relation="include">
        </childnode>
        <childnode refid="18875" relation="include">
        </childnode>
        <childnode refid="18837" relation="include">
        </childnode>
        <childnode refid="18843" relation="include">
        </childnode>
        <childnode refid="18863" relation="include">
        </childnode>
        <childnode refid="18854" relation="include">
        </childnode>
        <childnode refid="18846" relation="include">
        </childnode>
      </node>
      <node id="18870">
        <label>algorithm</label>
      </node>
      <node id="18883">
        <label>arrow/util/int_util.h</label>
        <link refid="int__util_8h"/>
        <childnode refid="18836" relation="include">
        </childnode>
        <childnode refid="18875" relation="include">
        </childnode>
        <childnode refid="18850" relation="include">
        </childnode>
        <childnode refid="18846" relation="include">
        </childnode>
      </node>
      <node id="18849">
        <label>cstring</label>
      </node>
      <node id="18882">
        <label>parquet/types.h</label>
        <link refid="parquet_2types_8h"/>
        <childnode refid="18870" relation="include">
        </childnode>
        <childnode refid="18836" relation="include">
        </childnode>
        <childnode refid="18849" relation="include">
        </childnode>
        <childnode refid="18837" relation="include">
        </childnode>
        <childnode refid="18842" relation="include">
        </childnode>
        <childnode refid="18843" relation="include">
        </childnode>
        <childnode refid="18883" relation="include">
        </childnode>
        <childnode refid="18858" relation="include">
        </childnode>
        <childnode refid="18847" relation="include">
        </childnode>
      </node>
      <node id="18856">
        <label>arrow/util/string_builder.h</label>
        <link refid="string__builder_8h"/>
        <childnode refid="18837" relation="include">
        </childnode>
        <childnode refid="18857" relation="include">
        </childnode>
        <childnode refid="18843" relation="include">
        </childnode>
        <childnode refid="18838" relation="include">
        </childnode>
        <childnode refid="18846" relation="include">
        </childnode>
      </node>
      <node id="18837">
        <label>memory</label>
      </node>
      <node id="18845">
        <label>arrow/util/macros.h</label>
        <link refid="macros_8h"/>
        <childnode refid="18836" relation="include">
        </childnode>
      </node>
      <node id="18878">
        <label>arrow/util/type_traits.h</label>
        <link refid="util_2type__traits_8h"/>
        <childnode refid="18850" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="18888">
        <label>/arrow/cpp/src/parquet/stream_reader.h</label>
        <link refid="stream__reader_8h"/>
      </node>
      <node id="18887">
        <label>/arrow/cpp/src/parquet/column_scanner.h</label>
        <link refid="column__scanner_8h"/>
        <childnode refid="18885" relation="include">
        </childnode>
      </node>
      <node id="18885">
        <label>/arrow/cpp/src/parquet/api/reader.h</label>
        <link refid="parquet_2api_2reader_8h"/>
      </node>
      <node id="18884">
        <label>/arrow/cpp/src/parquet/column_reader.h</label>
        <link refid="column__reader_8h"/>
        <childnode refid="18885" relation="include">
        </childnode>
        <childnode refid="18886" relation="include">
        </childnode>
        <childnode refid="18887" relation="include">
        </childnode>
        <childnode refid="18888" relation="include">
        </childnode>
      </node>
      <node id="18886">
        <label>/arrow/cpp/src/parquet/arrow/reader_internal.h</label>
        <link refid="reader__internal_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classparquet_1_1_level_decoder" prot="public">parquet::LevelDecoder</innerclass>
    <innerclass refid="structparquet_1_1_crypto_context" prot="public">parquet::CryptoContext</innerclass>
    <innerclass refid="classparquet_1_1_page_reader" prot="public">parquet::PageReader</innerclass>
    <innerclass refid="classparquet_1_1_column_reader" prot="public">parquet::ColumnReader</innerclass>
    <innerclass refid="classparquet_1_1_typed_column_reader" prot="public">parquet::TypedColumnReader</innerclass>
    <innernamespace refid="namespacearrow">arrow</innernamespace>
    <innernamespace refid="namespacearrow_1_1util">arrow::util</innernamespace>
    <innernamespace refid="namespaceparquet">parquet</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="exception_8h" kindref="compound">parquet/exception.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="parquet_2platform_8h" kindref="compound">parquet/platform.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="schema_8h" kindref="compound">parquet/schema.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="parquet_2types_8h" kindref="compound">parquet/types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacearrow" kindref="compound">arrow</ref><sp/>{</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Array;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ChunkedArray;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacearrow_1_1_bit_util" kindref="compound">BitUtil</ref><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">BitReader;</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>BitUtil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">util<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">RleDecoder;</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>util</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>arrow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceparquet" kindref="compound">parquet</ref><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Decryptor;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Page;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/>16<sp/>MB<sp/>is<sp/>the<sp/>default<sp/>maximum<sp/>page<sp/>header<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>uint32_t<sp/>kDefaultMaxPageHeaderSize<sp/>=<sp/>16<sp/>*<sp/>1024<sp/>*<sp/>1024;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="comment">//<sp/>16<sp/>KB<sp/>is<sp/>the<sp/>default<sp/>expected<sp/>page<sp/>header<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>uint32_t<sp/>kDefaultPageHeaderSize<sp/>=<sp/>16<sp/>*<sp/>1024;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="classparquet_1_1_level_decoder" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">PARQUET_EXPORT<sp/><ref refid="classparquet_1_1_level_decoder" kindref="compound">LevelDecoder</ref><sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><ref refid="classparquet_1_1_level_decoder" kindref="compound">LevelDecoder</ref>();</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/>~<ref refid="classparquet_1_1_level_decoder" kindref="compound">LevelDecoder</ref>();</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>the<sp/>LevelDecoder<sp/>state<sp/>with<sp/>new<sp/>data</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>return<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>consumed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>SetData(<ref refid="structparquet_1_1_encoding_1acd287bb69df941fa0e27dd594462f27e" kindref="member">Encoding::type</ref><sp/>encoding,<sp/>int16_t<sp/>max_level,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_buffered_values,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>,<sp/>int32_t<sp/>data_size);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetDataV2(int32_t<sp/>num_bytes,<sp/>int16_t<sp/>max_level,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_buffered_values,</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>data);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Decodes<sp/>a<sp/>batch<sp/>of<sp/>levels<sp/>into<sp/>an<sp/>array<sp/>and<sp/>returns<sp/>the<sp/>number<sp/>of<sp/>levels<sp/>decoded</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Decode(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>batch_size,<sp/>int16_t*<sp/>levels);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit_width_;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_values_remaining_;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><ref refid="structparquet_1_1_encoding_1acd287bb69df941fa0e27dd594462f27e" kindref="member">Encoding::type</ref><sp/>encoding_;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;::arrow::util::RleDecoder&gt;<sp/>rle_decoder_;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;::arrow::BitUtil::BitReader&gt;<sp/>bit_packed_decoder_;</highlight></codeline>
<codeline lineno="78"><highlight class="normal">};</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="structparquet_1_1_crypto_context" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structparquet_1_1_crypto_context" kindref="compound">CryptoContext</ref><sp/>{</highlight></codeline>
<codeline lineno="81" refid="structparquet_1_1_crypto_context_1ae2456eb3d18549a4913612d1bc8402a3" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structparquet_1_1_crypto_context_1ae2456eb3d18549a4913612d1bc8402a3" kindref="member">CryptoContext</ref>(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>start_with_dictionary_page,<sp/>int16_t<sp/>rg_ordinal,<sp/>int16_t<sp/>col_ordinal,</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Decryptor&gt;<sp/>meta,<sp/>std::shared_ptr&lt;Decryptor&gt;<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>)</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>start_decrypt_with_dictionary_page(start_with_dictionary_page),</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>row_group_ordinal(rg_ordinal),</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>column_ordinal(col_ordinal),</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>meta_decryptor(<ref refid="namespacestd" kindref="compound">std</ref>::move(meta)),</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data_decryptor(<ref refid="namespacestd" kindref="compound">std</ref>::move(data))<sp/>{}</highlight></codeline>
<codeline lineno="88" refid="structparquet_1_1_crypto_context_1a53847e61c0da4196a996f17bfcf8d4ce" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structparquet_1_1_crypto_context_1a53847e61c0da4196a996f17bfcf8d4ce" kindref="member">CryptoContext</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90" refid="structparquet_1_1_crypto_context_1a8f4412746705ceed125941d916d433fe" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>start_decrypt_with_dictionary_page<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="91" refid="structparquet_1_1_crypto_context_1af417eefe43b88edb695225ab212d870f" refkind="member"><highlight class="normal"><sp/><sp/>int16_t<sp/>row_group_ordinal<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="92" refid="structparquet_1_1_crypto_context_1a237b719c2492e4c58beb5c9aa76dff6d" refkind="member"><highlight class="normal"><sp/><sp/>int16_t<sp/>column_ordinal<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="93" refid="structparquet_1_1_crypto_context_1a84ad4f1e479851951ca25fbfbea38f7a" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Decryptor&gt;<sp/><ref refid="structparquet_1_1_crypto_context_1a84ad4f1e479851951ca25fbfbea38f7a" kindref="member">meta_decryptor</ref>;</highlight></codeline>
<codeline lineno="94" refid="structparquet_1_1_crypto_context_1a4d92395aed393a75aca834331229c9ff" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Decryptor&gt;<sp/><ref refid="structparquet_1_1_crypto_context_1a4d92395aed393a75aca834331229c9ff" kindref="member">data_decryptor</ref>;</highlight></codeline>
<codeline lineno="95"><highlight class="normal">};</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Abstract<sp/>page<sp/>iterator<sp/>interface.<sp/>This<sp/>way,<sp/>we<sp/>can<sp/>feed<sp/>column<sp/>pages<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//<sp/>ColumnReader<sp/>through<sp/>whatever<sp/>mechanism<sp/>we<sp/>choose</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="classparquet_1_1_page_reader" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">PARQUET_EXPORT<sp/><ref refid="classparquet_1_1_page_reader" kindref="compound">PageReader</ref><sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classparquet_1_1_page_reader" kindref="compound">PageReader</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;PageReader&gt;<sp/>Open(</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;ArrowInputStream&gt;<sp/>stream,<sp/>int64_t<sp/>total_num_rows,</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_compression_1a8abcec0357242c077a2905d645f2163f" kindref="member">Compression::type</ref><sp/>codec,<sp/>::<ref refid="classarrow_1_1_memory_pool" kindref="compound">arrow::MemoryPool</ref>*<sp/>pool<sp/>=<sp/>::<ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">arrow::default_memory_pool</ref>(),</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structparquet_1_1_crypto_context" kindref="compound">CryptoContext</ref>*<sp/>ctx<sp/>=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@returns:<sp/>shared_ptr&lt;Page&gt;(nullptr)<sp/>on<sp/>EOS,<sp/>std::shared_ptr&lt;Page&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>containing<sp/>new<sp/>Page<sp/>otherwise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Page&gt;<sp/>NextPage()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_max_page_header_size(uint32_t<sp/>size)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="113"><highlight class="normal">};</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="classparquet_1_1_column_reader" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">PARQUET_EXPORT<sp/><ref refid="classparquet_1_1_column_reader" kindref="compound">ColumnReader</ref><sp/>{</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classparquet_1_1_column_reader" kindref="compound">ColumnReader</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ColumnReader&gt;<sp/>Make(</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_column_descriptor" kindref="compound">ColumnDescriptor</ref>*<sp/>descr,<sp/>std::unique_ptr&lt;PageReader&gt;<sp/>pager,</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::<ref refid="classarrow_1_1_memory_pool" kindref="compound">arrow::MemoryPool</ref>*<sp/>pool<sp/>=<sp/>::<ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">arrow::default_memory_pool</ref>());</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>true<sp/>if<sp/>there<sp/>are<sp/>still<sp/>values<sp/>in<sp/>this<sp/>column.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HasNext()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="structparquet_1_1_type_1a2a4b0ad3da98a8a407a0dc3ecbf737ca" kindref="member">Type::type</ref><sp/>type()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_column_descriptor" kindref="compound">ColumnDescriptor</ref>*<sp/>descr()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="129"><highlight class="normal">};</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//<sp/>API<sp/>to<sp/>read<sp/>values<sp/>from<sp/>a<sp/>single<sp/>column.<sp/>This<sp/>is<sp/>a<sp/>main<sp/>client<sp/>facing<sp/>API.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DType&gt;</highlight></codeline>
<codeline lineno="133" refid="classparquet_1_1_typed_column_reader" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classparquet_1_1_typed_column_reader" kindref="compound">TypedColumnReader</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_column_reader" kindref="compound">ColumnReader</ref><sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="135" refid="classparquet_1_1_typed_column_reader_1a21c95b1d5918815dfef28b31063d1f5a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>DType::c_type<sp/><ref refid="classparquet_1_1_typed_column_reader_1a21c95b1d5918815dfef28b31063d1f5a" kindref="member">T</ref>;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>a<sp/>batch<sp/>of<sp/>repetition<sp/>levels,<sp/>definition<sp/>levels,<sp/>and<sp/>values<sp/>from<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>column.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>null<sp/>values<sp/>are<sp/>not<sp/>stored<sp/>in<sp/>the<sp/>values,<sp/>the<sp/>number<sp/>of<sp/>values<sp/>read</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>may<sp/>be<sp/>less<sp/>than<sp/>the<sp/>number<sp/>of<sp/>repetition<sp/>and<sp/>definition<sp/>levels.<sp/>With</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>nested<sp/>data<sp/>this<sp/>is<sp/>almost<sp/>certainly<sp/>true.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>def_levels<sp/>or<sp/>rep_levels<sp/>to<sp/>nullptr<sp/>if<sp/>you<sp/>want<sp/>to<sp/>skip<sp/>reading<sp/>them.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>only<sp/>safe<sp/>if<sp/>you<sp/>know<sp/>through<sp/>some<sp/>other<sp/>source<sp/>that<sp/>there<sp/>are<sp/>no</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>undefined<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>fully<sp/>exhaust<sp/>a<sp/>row<sp/>group,<sp/>you<sp/>must<sp/>read<sp/>batches<sp/>until<sp/>the<sp/>number<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>values<sp/>read<sp/>reaches<sp/>the<sp/>number<sp/>of<sp/>stored<sp/>values<sp/>according<sp/>to<sp/>the<sp/>metadata.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>API<sp/>is<sp/>the<sp/>same<sp/>for<sp/>both<sp/>V1<sp/>and<sp/>V2<sp/>of<sp/>the<sp/>DataPage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>@returns:<sp/>actual<sp/>number<sp/>of<sp/>levels<sp/>read<sp/>(see<sp/>values_read<sp/>for<sp/>number<sp/>of<sp/>values<sp/>read)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>int64_t<sp/>ReadBatch(int64_t<sp/>batch_size,<sp/>int16_t*<sp/>def_levels,<sp/>int16_t*<sp/>rep_levels,</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T*<sp/>values,<sp/>int64_t*<sp/>values_read)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>int64_t<sp/>ReadBatchSpaced(int64_t<sp/>batch_size,<sp/>int16_t*<sp/>def_levels,</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int16_t*<sp/>rep_levels,<sp/>T*<sp/>values,<sp/>uint8_t*<sp/>valid_bits,</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>valid_bits_offset,<sp/>int64_t*<sp/>levels_read,</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t*<sp/>values_read,<sp/>int64_t*<sp/>null_count)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Skip<sp/>reading<sp/>levels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>levels<sp/>skipped</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>int64_t<sp/>Skip(int64_t<sp/>num_rows_to_skip)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="199"><highlight class="normal">};</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="keyword">class<sp/></highlight><highlight class="normal">RecordReader<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;RecordReader&gt;<sp/>Make(</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_column_descriptor" kindref="compound">ColumnDescriptor</ref>*<sp/>descr,</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>::<ref refid="classarrow_1_1_memory_pool" kindref="compound">arrow::MemoryPool</ref>*<sp/>pool<sp/>=<sp/>::<ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">arrow::default_memory_pool</ref>(),</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>read_dictionary<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~RecordReader()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>int64_t<sp/>ReadRecords(int64_t<sp/>num_records)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Reserve(int64_t<sp/>num_values)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Reset()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ResizableBuffer&gt;<sp/>ReleaseValues()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ResizableBuffer&gt;<sp/>ReleaseIsValid()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HasMoreData()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetPageReader(std::unique_ptr&lt;PageReader&gt;<sp/>reader)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DebugPrintState()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/>int16_t*<sp/>def_levels()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">int16_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(def_levels_-&gt;mutable_data());</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/>int16_t*<sp/>rep_levels()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">int16_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(rep_levels_-&gt;mutable_data());</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/>uint8_t*<sp/>values()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>values_-&gt;mutable_data();<sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/>int64_t<sp/>values_written()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>values_written_;<sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>int64_t<sp/>levels_position()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>levels_position_;<sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>int64_t<sp/>levels_written()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>levels_written_;<sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>int64_t<sp/>null_count()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>null_count_;<sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nullable_values()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>nullable_values_;<sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>read_dictionary()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>read_dictionary_;<sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>nullable_values_;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>at_record_start_;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/>int64_t<sp/>records_read_;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>int64_t<sp/>values_written_;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>int64_t<sp/>values_capacity_;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/>int64_t<sp/>null_count_;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>int64_t<sp/>levels_written_;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/>int64_t<sp/>levels_position_;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>int64_t<sp/>levels_capacity_;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;::arrow::ResizableBuffer&gt;<sp/>values_;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>the<sp/>case<sp/>of<sp/>false,<sp/>don&apos;t<sp/>allocate<sp/>the<sp/>values<sp/>buffer<sp/>(when<sp/>we<sp/>directly<sp/>read<sp/>into</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>builder<sp/>classes).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>uses_values_;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;::arrow::ResizableBuffer&gt;<sp/>valid_bits_;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;::arrow::ResizableBuffer&gt;<sp/>def_levels_;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;::arrow::ResizableBuffer&gt;<sp/>rep_levels_;</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>read_dictionary_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="303"><highlight class="normal">};</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">BinaryRecordReader<sp/>:<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>RecordReader<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;::arrow::Array&gt;&gt;<sp/>GetBuilderChunks()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="308"><highlight class="normal">};</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="keyword">class<sp/></highlight><highlight class="normal">DictionaryRecordReader<sp/>:<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>RecordReader<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;::arrow::ChunkedArray&gt;<sp/>GetResult()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="315"><highlight class="normal">};</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>DefinitionLevelsToBitmap(</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int16_t*<sp/>def_levels,<sp/>int64_t<sp/>num_def_levels,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int16_t<sp/>max_definition_level,</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int16_t<sp/>max_repetition_level,<sp/>int64_t*<sp/>values_read,<sp/>int64_t*<sp/>null_count,</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>uint8_t*<sp/>valid_bits,<sp/>int64_t<sp/>valid_bits_offset)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>assume<sp/>here<sp/>that<sp/>valid_bits<sp/>is<sp/>large<sp/>enough<sp/>to<sp/>accommodate<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>additional<sp/>definition<sp/>levels<sp/>and<sp/>the<sp/>ones<sp/>that<sp/>have<sp/>already<sp/>been<sp/>written</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>::arrow::internal::BitmapWriter<sp/>valid_bits_writer(valid_bits,<sp/>valid_bits_offset,</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_def_levels);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(itaiin):<sp/>As<sp/>an<sp/>interim<sp/>solution<sp/>we<sp/>are<sp/>splitting<sp/>the<sp/>code<sp/>path<sp/>here</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>between<sp/>repeated+flat<sp/>column<sp/>reads,<sp/>and<sp/>non-repeated+nested<sp/>reads.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Those<sp/>paths<sp/>need<sp/>to<sp/>be<sp/>merged<sp/>in<sp/>the<sp/>future</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_def_levels;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(def_levels[i]<sp/>==<sp/>max_definition_level)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>valid_bits_writer.Set();</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max_repetition_level<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>repetition+flat<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(def_levels[i]<sp/>==<sp/>(max_definition_level<sp/>-<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valid_bits_writer.Clear();</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*null_count<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>non-repeated+nested<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(def_levels[i]<sp/>&lt;<sp/>max_definition_level)<sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valid_bits_writer.Clear();</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*null_count<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">throw</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_parquet_exception" kindref="compound">ParquetException</ref>(</highlight><highlight class="stringliteral">&quot;definition<sp/>level<sp/>exceeds<sp/>maximum&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>valid_bits_writer.Next();</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/>valid_bits_writer.Finish();</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/>*values_read<sp/>=<sp/>valid_bits_writer.position();</highlight></codeline>
<codeline lineno="354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="comment">//<sp/>TODO(itaiin):<sp/>another<sp/>code<sp/>path<sp/>split<sp/>to<sp/>merge<sp/>when<sp/>the<sp/>general<sp/>case<sp/>is<sp/>done</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>HasSpacedValues(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_column_descriptor" kindref="compound">ColumnDescriptor</ref>*<sp/>descr)<sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(descr-&gt;<ref refid="classparquet_1_1_column_descriptor_1af79cba7faa8b0dd1ca9cca098dad1b8c" kindref="member">max_repetition_level</ref>()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>repeated+flat<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!descr-&gt;<ref refid="classparquet_1_1_column_descriptor_1a4819404f05de143569013f993e831c93" kindref="member">schema_node</ref>()-&gt;is_required();</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>non-repeated+nested<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Find<sp/>if<sp/>a<sp/>node<sp/>forces<sp/>nulls<sp/>in<sp/>the<sp/>lowest<sp/>level<sp/>along<sp/>the<sp/>hierarchy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1schema_1_1_node" kindref="compound">schema::Node</ref>*<sp/>node<sp/>=<sp/>descr-&gt;<ref refid="classparquet_1_1_column_descriptor_1a4819404f05de143569013f993e831c93" kindref="member">schema_node</ref>().get();</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(node)<sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(node-&gt;<ref refid="classparquet_1_1schema_1_1_node_1a0b3015fc760df30425b643541f34051d" kindref="member">is_optional</ref>())<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>node<sp/>=<sp/>node-&gt;<ref refid="classparquet_1_1schema_1_1_node_1a6a6a7d17ebacfd44a495dd6e6dcf388f" kindref="member">parent</ref>();</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381" refid="namespaceparquet_1ac0b370ba756abc95a11721e44be15f3c" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_typed_column_reader" kindref="compound">BoolReader</ref><sp/>=<sp/><ref refid="classparquet_1_1_typed_column_reader" kindref="compound">TypedColumnReader&lt;BooleanType&gt;</ref>;</highlight></codeline>
<codeline lineno="382" refid="namespaceparquet_1a50ee42e1810fb9d3e631c880a85ad94b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_typed_column_reader" kindref="compound">Int32Reader</ref><sp/>=<sp/><ref refid="classparquet_1_1_typed_column_reader" kindref="compound">TypedColumnReader&lt;Int32Type&gt;</ref>;</highlight></codeline>
<codeline lineno="383" refid="namespaceparquet_1a4c7fe9fcbd9bdaa3069e3351a9a2ada1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_typed_column_reader" kindref="compound">Int64Reader</ref><sp/>=<sp/><ref refid="classparquet_1_1_typed_column_reader" kindref="compound">TypedColumnReader&lt;Int64Type&gt;</ref>;</highlight></codeline>
<codeline lineno="384" refid="namespaceparquet_1a9fc47cbfe5e12f3d884d22be1f59ebea" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_typed_column_reader" kindref="compound">Int96Reader</ref><sp/>=<sp/><ref refid="classparquet_1_1_typed_column_reader" kindref="compound">TypedColumnReader&lt;Int96Type&gt;</ref>;</highlight></codeline>
<codeline lineno="385" refid="namespaceparquet_1ae003076bca68d0a3e2709158bf0fe9e6" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_typed_column_reader" kindref="compound">FloatReader</ref><sp/>=<sp/><ref refid="classparquet_1_1_typed_column_reader" kindref="compound">TypedColumnReader&lt;FloatType&gt;</ref>;</highlight></codeline>
<codeline lineno="386" refid="namespaceparquet_1a95af4cf25dcf21ada01d8f5a26ff962a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_typed_column_reader" kindref="compound">DoubleReader</ref><sp/>=<sp/><ref refid="classparquet_1_1_typed_column_reader" kindref="compound">TypedColumnReader&lt;DoubleType&gt;</ref>;</highlight></codeline>
<codeline lineno="387" refid="namespaceparquet_1aa04db46d4cb1934aff2f9cf6ce3f6f5b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_typed_column_reader" kindref="compound">ByteArrayReader</ref><sp/>=<sp/><ref refid="classparquet_1_1_typed_column_reader" kindref="compound">TypedColumnReader&lt;ByteArrayType&gt;</ref>;</highlight></codeline>
<codeline lineno="388" refid="namespaceparquet_1ad1f404aeab6db141915da489d7c89653" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classparquet_1_1_typed_column_reader" kindref="compound">FixedLenByteArrayReader</ref><sp/>=<sp/><ref refid="classparquet_1_1_typed_column_reader" kindref="compound">TypedColumnReader&lt;FLBAType&gt;</ref>;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>parquet</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/arrow/cpp/src/parquet/column_reader.h"/>
  </compounddef>
</doxygen>
