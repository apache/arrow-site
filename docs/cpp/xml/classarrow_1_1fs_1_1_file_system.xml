<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1fs_1_1_file_system" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>arrow::fs::FileSystem</compoundname>
    <basecompoundref prot="public" virt="non-virtual">std::enable_shared_from_this&lt; FileSystem &gt;</basecompoundref>
    <derivedcompoundref refid="classarrow_1_1fs_1_1_hadoop_file_system" prot="public" virt="non-virtual">arrow::fs::HadoopFileSystem</derivedcompoundref>
    <derivedcompoundref refid="classarrow_1_1fs_1_1internal_1_1_mock_file_system" prot="public" virt="non-virtual">arrow::fs::internal::MockFileSystem</derivedcompoundref>
    <derivedcompoundref refid="classarrow_1_1fs_1_1_local_file_system" prot="public" virt="non-virtual">arrow::fs::LocalFileSystem</derivedcompoundref>
    <derivedcompoundref refid="classarrow_1_1fs_1_1_s3_file_system" prot="public" virt="non-virtual">arrow::fs::S3FileSystem</derivedcompoundref>
    <derivedcompoundref refid="classarrow_1_1fs_1_1_slow_file_system" prot="public" virt="non-virtual">arrow::fs::SlowFileSystem</derivedcompoundref>
    <derivedcompoundref refid="classarrow_1_1fs_1_1_sub_tree_file_system" prot="public" virt="non-virtual">arrow::fs::SubTreeFileSystem</derivedcompoundref>
    <includes refid="filesystem_8h" local="no">arrow/filesystem/filesystem.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1fs_1_1_file_system_1a364917767b1d2e11b3b8967a4ee08c30" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual arrow::fs::FileSystem::~FileSystem</definition>
        <argsstring>()</argsstring>
        <name>~FileSystem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_file_system_1a14c1160fbffc2dcb72f2e16c32329bc7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::string</type>
        <definition>virtual std::string arrow::fs::FileSystem::type_name</definition>
        <argsstring>() const =0</argsstring>
        <name>type_name</name>
        <reimplementedby refid="classarrow_1_1fs_1_1_local_file_system_1ac69df6e7c6c24408ffd169442691f9ca">type_name</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_hadoop_file_system_1af91c96db65100dd2384586a9ad3daf1b">type_name</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_s3_file_system_1a7e22fc95a6907be018a442aa6128ae7d">type_name</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a6a5343686f2afa903a4a0ce2882ee162">type_name</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_slow_file_system_1ab1fa6ad1dfcf76cc818176d0820a2997">type_name</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="163" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_file_system_1a73d5af5c51cc4cf569fabcea48781721" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::string &gt;</type>
        <definition>virtual Result&lt;std::string&gt; arrow::fs::FileSystem::NormalizePath</definition>
        <argsstring>(std::string path)</argsstring>
        <name>NormalizePath</name>
        <reimplementedby refid="classarrow_1_1fs_1_1_local_file_system_1ac7091eeb585485c8ab48874ecd6637a2">NormalizePath</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_sub_tree_file_system_1acf057b420cd5819efb756be8f0f7b841">NormalizePath</reimplementedby>
        <param>
          <type>std::string</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Normalize path for the given filesystem. </para>        </briefdescription>
        <detaileddescription>
<para>The default implementation of this method is a no-op, but subclasses may allow normalizing irregular path forms (such as Windows local paths). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="169" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_file_system_1ac0a0a670a467fa073bb02b8581731262" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool arrow::fs::FileSystem::Equals</definition>
        <argsstring>(const FileSystem &amp;other) const =0</argsstring>
        <name>Equals</name>
        <reimplementedby refid="classarrow_1_1fs_1_1_local_file_system_1a832919fd35500e5ebc43d9936902a7eb">Equals</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_hadoop_file_system_1a0b261bd5afda8c4fdb4565507ab7aa83">Equals</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_s3_file_system_1af1c1056ddafd87f4674bd2574e0cf63b">Equals</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a28fb9c50504f369ad34ab6e6a33fd38e">Equals</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_slow_file_system_1a5465716a30cfe12f575abb0a94db772b">Equals</reimplementedby>
        <param>
          <type>const <ref refid="classarrow_1_1fs_1_1_file_system" kindref="compound">FileSystem</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="171" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_file_system_1aa0bfcdc572b747ce2b650147d8ddb888" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool arrow::fs::FileSystem::Equals</definition>
        <argsstring>(const std::shared_ptr&lt; FileSystem &gt; &amp;other) const</argsstring>
        <name>Equals</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1fs_1_1_file_system" kindref="compound">FileSystem</ref> &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="173" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/filesystem.h" bodystart="173" bodyend="175"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_file_system_1ae883cb9d3a7b0523ebb346e5851f6aa9" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; <ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref> &gt;</type>
        <definition>virtual Result&lt;FileInfo&gt; arrow::fs::FileSystem::GetFileInfo</definition>
        <argsstring>(const std::string &amp;path)=0</argsstring>
        <name>GetFileInfo</name>
        <reimplementedby refid="classarrow_1_1fs_1_1_hadoop_file_system_1a751760df9a2f2d62e7e4b5052c879c78">GetFileInfo</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_local_file_system_1a8ca80ceeed540c4c6773febf09324bbb">GetFileInfo</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_s3_file_system_1accc79bb6781e8ec8b8b4a4c01d7dfb0c">GetFileInfo</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a230ca4c8bea4a1ec0261532cc2ba243a">GetFileInfo</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_slow_file_system_1a5c084487de2daf3fcb07d736739740a3">GetFileInfo</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Get info for the given target. </para>        </briefdescription>
        <detaileddescription>
<para>Any symlink is automatically dereferenced, recursively. A nonexistent or unreachable file returns an Ok status and has a FileType of value NotFound. An error status indicates a truly exceptional condition (low-level I/O error, etc.). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="183" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_file_system_1a4e7ff03e540cfba191d9c42aa6bba060" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::vector&lt; <ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref> &gt; &gt;</type>
        <definition>virtual Result&lt;std::vector&lt;FileInfo&gt; &gt; arrow::fs::FileSystem::GetFileInfo</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;paths)</argsstring>
        <name>GetFileInfo</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>paths</declname>
        </param>
        <briefdescription>
<para>Same, for many targets at once. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_file_system_1ad472382e0a5e63010e58eb511afb9430" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::vector&lt; <ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref> &gt; &gt;</type>
        <definition>virtual Result&lt;std::vector&lt;FileInfo&gt; &gt; arrow::fs::FileSystem::GetFileInfo</definition>
        <argsstring>(const FileSelector &amp;select)=0</argsstring>
        <name>GetFileInfo</name>
        <reimplementedby refid="classarrow_1_1fs_1_1_hadoop_file_system_1a546e34a045eaa5cf111e2be742726f03">GetFileInfo</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_local_file_system_1a839deb4ee9b760cc519fa13a880b303d">GetFileInfo</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_s3_file_system_1a8290eb500c8e74db7d16a0623875ef01">GetFileInfo</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a3a8713270dae8940a2695e15225b8b37">GetFileInfo</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_slow_file_system_1ae8b691f6506dec71479d67ce690fbe10">GetFileInfo</reimplementedby>
        <param>
          <type>const <ref refid="structarrow_1_1fs_1_1_file_selector" kindref="compound">FileSelector</ref> &amp;</type>
          <declname>select</declname>
        </param>
        <briefdescription>
<para>Same, according to a selector. </para>        </briefdescription>
        <detaileddescription>
<para>The selector&apos;s base directory will not be part of the results, even if it exists. If it doesn&apos;t exist, see <computeroutput><ref refid="structarrow_1_1fs_1_1_file_selector_1aead1e24f5aa8bb7a3e893436cde83ea7" kindref="member">FileSelector::allow_not_found</ref></computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="192" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_file_system_1aff4191ded194fc0d473608264b05ee86" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>virtual Status arrow::fs::FileSystem::CreateDir</definition>
        <argsstring>(const std::string &amp;path, bool recursive=true)=0</argsstring>
        <name>CreateDir</name>
        <reimplementedby refid="classarrow_1_1fs_1_1_hadoop_file_system_1a8ae0bb1cf990a77d2c4706133fe463d2">CreateDir</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_local_file_system_1a6d258ca35afd318fc4621e918f67e1c0">CreateDir</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_s3_file_system_1abd68e1af44414cf073e95a55feb8a962">CreateDir</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a9734fc6ad251954d0554bb498a384793">CreateDir</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_slow_file_system_1a20ac931a08945b4a84de2b9d1cefbecf">CreateDir</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>recursive</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
<para>Create a directory and subdirectories. </para>        </briefdescription>
        <detaileddescription>
<para>This function succeeds if the directory already exists. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="197" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_file_system_1aa6d2d675596ee51935cc4baa9d30ea72" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>virtual Status arrow::fs::FileSystem::DeleteDir</definition>
        <argsstring>(const std::string &amp;path)=0</argsstring>
        <name>DeleteDir</name>
        <reimplementedby refid="classarrow_1_1fs_1_1_hadoop_file_system_1a0e31c1cd8826eb7c6ba7fb2ae094104b">DeleteDir</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_local_file_system_1af0e422b359805e15aedf30063f433833">DeleteDir</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_s3_file_system_1a2b2469fdcb68f5d04c0121605dc485d9">DeleteDir</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a27ea0fcb3ed3da837369b8306e73dd89">DeleteDir</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_slow_file_system_1ae6a69f487809c7191ec0184dd3925e35">DeleteDir</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Delete a directory and its contents, recursively. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="200" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_file_system_1a908dd35485e74e91d420adf4b3eb80b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>virtual Status arrow::fs::FileSystem::DeleteDirContents</definition>
        <argsstring>(const std::string &amp;path)=0</argsstring>
        <name>DeleteDirContents</name>
        <reimplementedby refid="classarrow_1_1fs_1_1_local_file_system_1abddc4590710261d5b0bcd706c919ae4c">DeleteDirContents</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_hadoop_file_system_1ad7ea0931d029f7392ea8a5479d9f7801">DeleteDirContents</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_s3_file_system_1af5e09fcf57e92e6f3b9b9facba51a9ab">DeleteDirContents</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_sub_tree_file_system_1ac39c759b3ac117821c0e2e8041ccaaa8">DeleteDirContents</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_slow_file_system_1a11eb79f7eca841c115ff3916c388a2cb">DeleteDirContents</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Delete a directory&apos;s contents, recursively. </para>        </briefdescription>
        <detaileddescription>
<para>Like DeleteDir, but doesn&apos;t delete the directory itself. Passing an empty path (&quot;&quot;) will wipe the entire filesystem tree. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="206" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_file_system_1ac9698e825f1abbe2497850c7d25efa1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>virtual Status arrow::fs::FileSystem::DeleteFile</definition>
        <argsstring>(const std::string &amp;path)=0</argsstring>
        <name>DeleteFile</name>
        <reimplementedby refid="classarrow_1_1fs_1_1_local_file_system_1a5699f4cd29913f3fd4a4f68e87c9185f">DeleteFile</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_hadoop_file_system_1a7b41afc1c5d4f6d01b753ddd5eec3dfc">DeleteFile</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_s3_file_system_1ae9ca4e0ba31387e8a806e627d1eef32b">DeleteFile</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_sub_tree_file_system_1afca69141480bf1990d3cfb90b6c07cc5">DeleteFile</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_slow_file_system_1ac46eff9e71b5035f96c10be8e18f4b77">DeleteFile</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Delete a file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="209" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_file_system_1aabbcfc55e53a8bcf3d88ece0b64fb400" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>virtual Status arrow::fs::FileSystem::DeleteFiles</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;paths)</argsstring>
        <name>DeleteFiles</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>paths</declname>
        </param>
        <briefdescription>
<para>Delete many files. </para>        </briefdescription>
        <detaileddescription>
<para>The default implementation issues individual delete operations in sequence. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="213" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_file_system_1a3ab3b162b3ea640076bbd46702735419" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>virtual Status arrow::fs::FileSystem::Move</definition>
        <argsstring>(const std::string &amp;src, const std::string &amp;dest)=0</argsstring>
        <name>Move</name>
        <reimplementedby refid="classarrow_1_1fs_1_1_local_file_system_1a2a6d70b440e851cc87b54daa40e4c9ef">Move</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_hadoop_file_system_1a8da6de9a71ea147f43d2e7176f9db7c6">Move</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_s3_file_system_1a356897ccaf9112c20539f37dea0fe8a5">Move</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a408f22a2665b45596a8b10d76861f383">Move</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_slow_file_system_1aca43e949a072da6a6dcdbaf67939ab40">Move</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
<para>Move / rename a file or directory. </para>        </briefdescription>
        <detaileddescription>
<para>If the destination exists:<itemizedlist>
<listitem><para>if it is a non-empty directory, an error is returned</para></listitem><listitem><para>otherwise, if it has the same type as the source, it is replaced</para></listitem><listitem><para>otherwise, behavior is unspecified (implementation-dependent). </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="221" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_file_system_1a7222bd63bfcb1ac2a48367ce9e5c9667" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>virtual Status arrow::fs::FileSystem::CopyFile</definition>
        <argsstring>(const std::string &amp;src, const std::string &amp;dest)=0</argsstring>
        <name>CopyFile</name>
        <reimplementedby refid="classarrow_1_1fs_1_1_local_file_system_1a56afdbe5cbbea17d49a74cbccddf09be">CopyFile</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_hadoop_file_system_1aabebe495dcbadd32eab6505e7ef271ff">CopyFile</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_s3_file_system_1a3cafd61714b93cbb1a32ae29be2b5f3f">CopyFile</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a8c6f0585e7844aaa3e44a5a17197ea09">CopyFile</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_slow_file_system_1a902e7c652521118fa165d890e6c31b38">CopyFile</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
<para>Copy a file. </para>        </briefdescription>
        <detaileddescription>
<para>If the destination exists and is a directory, an error is returned. Otherwise, it is replaced. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="227" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_file_system_1a4baf948a7ebca79d1b085942f32ba65f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_input_stream" kindref="compound">io::InputStream</ref> &gt; &gt;</type>
        <definition>virtual Result&lt;std::shared_ptr&lt;io::InputStream&gt; &gt; arrow::fs::FileSystem::OpenInputStream</definition>
        <argsstring>(const std::string &amp;path)=0</argsstring>
        <name>OpenInputStream</name>
        <reimplementedby refid="classarrow_1_1fs_1_1_local_file_system_1a0410e65a1f9b6260d86aa0719e20a0cf">OpenInputStream</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_hadoop_file_system_1aa10340ef6270b0cca4c8ec0f0cfbb928">OpenInputStream</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_s3_file_system_1a741106f97cea2c11ea908da345482990">OpenInputStream</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a52ff71a2eed88eba363761bc214917e6">OpenInputStream</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_slow_file_system_1a1414356bb58957f5414aaedd9c328fd8">OpenInputStream</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Open an input stream for sequential reading. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="230" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_file_system_1a6e401fc8e1b55d66ab5045845dc3fdae" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_random_access_file" kindref="compound">io::RandomAccessFile</ref> &gt; &gt;</type>
        <definition>virtual Result&lt;std::shared_ptr&lt;io::RandomAccessFile&gt; &gt; arrow::fs::FileSystem::OpenInputFile</definition>
        <argsstring>(const std::string &amp;path)=0</argsstring>
        <name>OpenInputFile</name>
        <reimplementedby refid="classarrow_1_1fs_1_1_local_file_system_1a4e5e221818030bb56aba0c191eda5b0c">OpenInputFile</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_hadoop_file_system_1aaca8f88888705150aeee8c7b8eb14c41">OpenInputFile</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_s3_file_system_1a37b3809525d4529f62d629dc4d24e12b">OpenInputFile</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a3870d3e69059dfa8a2c215174a540d2a">OpenInputFile</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_slow_file_system_1ac7a7bab289a997b950de9afd3ba67fad">OpenInputFile</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Open an input file for random access reading. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="234" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_file_system_1ae4ebffb159bef1199092d79c05703415" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_output_stream" kindref="compound">io::OutputStream</ref> &gt; &gt;</type>
        <definition>virtual Result&lt;std::shared_ptr&lt;io::OutputStream&gt; &gt; arrow::fs::FileSystem::OpenOutputStream</definition>
        <argsstring>(const std::string &amp;path)=0</argsstring>
        <name>OpenOutputStream</name>
        <reimplementedby refid="classarrow_1_1fs_1_1_local_file_system_1a33cfec691b6453beb11b8c1f6393a782">OpenOutputStream</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_hadoop_file_system_1a9ee04654a0d3a7054d2b6f38b446163f">OpenOutputStream</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_s3_file_system_1a807850bfeb056933f043f4cf0b9bd546">OpenOutputStream</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a871ae8663a78f21d9e15eeea2d7b8f3e">OpenOutputStream</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_slow_file_system_1a46f0b61fa57beb95e151588d324796f1">OpenOutputStream</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Open an output stream for sequential writing. </para>        </briefdescription>
        <detaileddescription>
<para>If the target already exists, existing data is truncated. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="240" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_file_system_1ada6e16933e3f62a36cb8ebbcb9c94c46" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_output_stream" kindref="compound">io::OutputStream</ref> &gt; &gt;</type>
        <definition>virtual Result&lt;std::shared_ptr&lt;io::OutputStream&gt; &gt; arrow::fs::FileSystem::OpenAppendStream</definition>
        <argsstring>(const std::string &amp;path)=0</argsstring>
        <name>OpenAppendStream</name>
        <reimplementedby refid="classarrow_1_1fs_1_1_local_file_system_1afa0d6dfb121b3f9b1e19565033ce3ebd">OpenAppendStream</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_hadoop_file_system_1a042b64a4bdf7da9e1af785f39cd0602e">OpenAppendStream</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_s3_file_system_1a5c496264ed0d2c7469af8c3d3ed04544">OpenAppendStream</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_sub_tree_file_system_1abcfb128367d3d5a93f27d05dc719d439">OpenAppendStream</reimplementedby>
        <reimplementedby refid="classarrow_1_1fs_1_1_slow_file_system_1ae3418520b2d003be7ec1df463e0d504d">OpenAppendStream</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Open an output stream for appending. </para>        </briefdescription>
        <detaileddescription>
<para>If the target doesn&apos;t exist, a new empty file is created. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="246" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Abstract file system API. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1644">
        <label>std::enable_shared_from_this&lt; FileSystem &gt;</label>
      </node>
      <node id="1647">
        <label>arrow::fs::LocalFileSystem</label>
        <link refid="classarrow_1_1fs_1_1_local_file_system"/>
        <childnode refid="1643" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1643">
        <label>arrow::fs::FileSystem</label>
        <link refid="classarrow_1_1fs_1_1_file_system"/>
        <childnode refid="1644" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1645">
        <label>arrow::fs::HadoopFileSystem</label>
        <link refid="classarrow_1_1fs_1_1_hadoop_file_system"/>
        <childnode refid="1643" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1649">
        <label>arrow::fs::SlowFileSystem</label>
        <link refid="classarrow_1_1fs_1_1_slow_file_system"/>
        <childnode refid="1643" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1646">
        <label>arrow::fs::internal::MockFileSystem</label>
        <childnode refid="1643" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1650">
        <label>arrow::fs::SubTreeFileSystem</label>
        <link refid="classarrow_1_1fs_1_1_sub_tree_file_system"/>
        <childnode refid="1643" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1648">
        <label>arrow::fs::S3FileSystem</label>
        <link refid="classarrow_1_1fs_1_1_s3_file_system"/>
        <childnode refid="1643" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1652">
        <label>std::enable_shared_from_this&lt; FileSystem &gt;</label>
      </node>
      <node id="1651">
        <label>arrow::fs::FileSystem</label>
        <link refid="classarrow_1_1fs_1_1_file_system"/>
        <childnode refid="1652" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h" line="159" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/filesystem.h" bodystart="159" bodyend="248"/>
    <listofallmembers>
      <member refid="classarrow_1_1fs_1_1_file_system_1a7222bd63bfcb1ac2a48367ce9e5c9667" prot="public" virt="pure-virtual"><scope>arrow::fs::FileSystem</scope><name>CopyFile</name></member>
      <member refid="classarrow_1_1fs_1_1_file_system_1aff4191ded194fc0d473608264b05ee86" prot="public" virt="pure-virtual"><scope>arrow::fs::FileSystem</scope><name>CreateDir</name></member>
      <member refid="classarrow_1_1fs_1_1_file_system_1aa6d2d675596ee51935cc4baa9d30ea72" prot="public" virt="pure-virtual"><scope>arrow::fs::FileSystem</scope><name>DeleteDir</name></member>
      <member refid="classarrow_1_1fs_1_1_file_system_1a908dd35485e74e91d420adf4b3eb80b2" prot="public" virt="pure-virtual"><scope>arrow::fs::FileSystem</scope><name>DeleteDirContents</name></member>
      <member refid="classarrow_1_1fs_1_1_file_system_1ac9698e825f1abbe2497850c7d25efa1c" prot="public" virt="pure-virtual"><scope>arrow::fs::FileSystem</scope><name>DeleteFile</name></member>
      <member refid="classarrow_1_1fs_1_1_file_system_1aabbcfc55e53a8bcf3d88ece0b64fb400" prot="public" virt="virtual"><scope>arrow::fs::FileSystem</scope><name>DeleteFiles</name></member>
      <member refid="classarrow_1_1fs_1_1_file_system_1ac0a0a670a467fa073bb02b8581731262" prot="public" virt="pure-virtual"><scope>arrow::fs::FileSystem</scope><name>Equals</name></member>
      <member refid="classarrow_1_1fs_1_1_file_system_1aa0bfcdc572b747ce2b650147d8ddb888" prot="public" virt="virtual"><scope>arrow::fs::FileSystem</scope><name>Equals</name></member>
      <member refid="classarrow_1_1fs_1_1_file_system_1ae883cb9d3a7b0523ebb346e5851f6aa9" prot="public" virt="pure-virtual"><scope>arrow::fs::FileSystem</scope><name>GetFileInfo</name></member>
      <member refid="classarrow_1_1fs_1_1_file_system_1a4e7ff03e540cfba191d9c42aa6bba060" prot="public" virt="virtual"><scope>arrow::fs::FileSystem</scope><name>GetFileInfo</name></member>
      <member refid="classarrow_1_1fs_1_1_file_system_1ad472382e0a5e63010e58eb511afb9430" prot="public" virt="pure-virtual"><scope>arrow::fs::FileSystem</scope><name>GetFileInfo</name></member>
      <member refid="classarrow_1_1fs_1_1_file_system_1a3ab3b162b3ea640076bbd46702735419" prot="public" virt="pure-virtual"><scope>arrow::fs::FileSystem</scope><name>Move</name></member>
      <member refid="classarrow_1_1fs_1_1_file_system_1a73d5af5c51cc4cf569fabcea48781721" prot="public" virt="virtual"><scope>arrow::fs::FileSystem</scope><name>NormalizePath</name></member>
      <member refid="classarrow_1_1fs_1_1_file_system_1ada6e16933e3f62a36cb8ebbcb9c94c46" prot="public" virt="pure-virtual"><scope>arrow::fs::FileSystem</scope><name>OpenAppendStream</name></member>
      <member refid="classarrow_1_1fs_1_1_file_system_1a6e401fc8e1b55d66ab5045845dc3fdae" prot="public" virt="pure-virtual"><scope>arrow::fs::FileSystem</scope><name>OpenInputFile</name></member>
      <member refid="classarrow_1_1fs_1_1_file_system_1a4baf948a7ebca79d1b085942f32ba65f" prot="public" virt="pure-virtual"><scope>arrow::fs::FileSystem</scope><name>OpenInputStream</name></member>
      <member refid="classarrow_1_1fs_1_1_file_system_1ae4ebffb159bef1199092d79c05703415" prot="public" virt="pure-virtual"><scope>arrow::fs::FileSystem</scope><name>OpenOutputStream</name></member>
      <member refid="classarrow_1_1fs_1_1_file_system_1a14c1160fbffc2dcb72f2e16c32329bc7" prot="public" virt="pure-virtual"><scope>arrow::fs::FileSystem</scope><name>type_name</name></member>
      <member refid="classarrow_1_1fs_1_1_file_system_1a364917767b1d2e11b3b8967a4ee08c30" prot="public" virt="virtual"><scope>arrow::fs::FileSystem</scope><name>~FileSystem</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
