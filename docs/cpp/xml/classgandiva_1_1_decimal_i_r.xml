<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classgandiva_1_1_decimal_i_r" kind="class" language="C++" prot="public">
    <compoundname>gandiva::DecimalIR</compoundname>
    <basecompoundref refid="classgandiva_1_1_function_i_r_builder" prot="public" virt="non-virtual">gandiva::FunctionIRBuilder</basecompoundref>
    <includes refid="decimal__ir_8h" local="no">gandiva/decimal_ir.h</includes>
    <innerclass refid="classgandiva_1_1_decimal_i_r_1_1_value_full" prot="private">gandiva::DecimalIR::ValueFull</innerclass>
    <innerclass refid="classgandiva_1_1_decimal_i_r_1_1_value_split" prot="private">gandiva::DecimalIR::ValueSplit</innerclass>
    <innerclass refid="classgandiva_1_1_decimal_i_r_1_1_value_with_overflow" prot="private">gandiva::DecimalIR::ValueWithOverflow</innerclass>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classgandiva_1_1_decimal_i_r_1a7ec3e49107cd95f785a147495ad7721a" prot="private" static="yes" mutable="no">
        <type>const bool</type>
        <definition>const bool gandiva::DecimalIR::kUseOverflowIntrinsics</definition>
        <argsstring></argsstring>
        <name>kUseOverflowIntrinsics</name>
        <initializer>= false</initializer>
        <briefdescription>
<para>The intrinsic fn for divide with small divisors is about 10x slower, so not using these. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/decimal_ir.h" line="46" column="1" bodyfile="/arrow/cpp/src/gandiva/decimal_ir.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgandiva_1_1_decimal_i_r_1a6b125579a05a11edad1e7e67b344dc01" prot="private" static="yes" mutable="no">
        <type>const char *</type>
        <definition>const char* gandiva::DecimalIR::kScaleMultipliersName</definition>
        <argsstring></argsstring>
        <name>kScaleMultipliersName</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/decimal_ir.h" line="175" column="1" bodyfile="/arrow/cpp/src/gandiva/decimal_ir.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classgandiva_1_1_decimal_i_r_1ac595231f3af16d69f5b01799f06986ba" prot="private" static="no" mutable="no">
        <type>llvm::Function *</type>
        <definition>llvm::Function* gandiva::DecimalIR::sadd_with_overflow_fn_</definition>
        <argsstring></argsstring>
        <name>sadd_with_overflow_fn_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/decimal_ir.h" line="178" column="1" bodyfile="/arrow/cpp/src/gandiva/decimal_ir.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgandiva_1_1_decimal_i_r_1a3efd272cbee148f4f8ee246dcf098186" prot="private" static="no" mutable="no">
        <type>llvm::Function *</type>
        <definition>llvm::Function* gandiva::DecimalIR::smul_with_overflow_fn_</definition>
        <argsstring></argsstring>
        <name>smul_with_overflow_fn_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/decimal_ir.h" line="179" column="1" bodyfile="/arrow/cpp/src/gandiva/decimal_ir.h" bodystart="179" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgandiva_1_1_decimal_i_r_1a6fd039c577413427fb62aa471a444fe5" prot="private" static="no" mutable="no">
        <type>llvm::Type *</type>
        <definition>llvm::Type* gandiva::DecimalIR::i128_with_overflow_struct_type_</definition>
        <argsstring></argsstring>
        <name>i128_with_overflow_struct_type_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/decimal_ir.h" line="182" column="1" bodyfile="/arrow/cpp/src/gandiva/decimal_ir.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgandiva_1_1_decimal_i_r_1a86972af39e992eb4cb36629622dd57ba" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool gandiva::DecimalIR::enable_ir_traces_</definition>
        <argsstring></argsstring>
        <name>enable_ir_traces_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/decimal_ir.h" line="185" column="1" bodyfile="/arrow/cpp/src/gandiva/decimal_ir.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgandiva_1_1_decimal_i_r_1a0fdb6acce34a3a5165ee940f3efef35b" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>gandiva::DecimalIR::DecimalIR</definition>
        <argsstring>(Engine *engine)</argsstring>
        <name>DecimalIR</name>
        <param>
          <type><ref refid="classgandiva_1_1_engine" kindref="compound">Engine</ref> *</type>
          <declname>engine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/decimal_ir.h" line="31" column="1" bodyfile="/arrow/cpp/src/gandiva/decimal_ir.h" bodystart="31" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_decimal_i_r_1ae2eab72c23528235c03064733a7c44c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void gandiva::DecimalIR::EnableTraces</definition>
        <argsstring>()</argsstring>
        <name>EnableTraces</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/decimal_ir.h" line="37" column="1" bodyfile="/arrow/cpp/src/gandiva/decimal_ir.h" bodystart="37" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_decimal_i_r_1ad08160fdc89828a2a034becb6f382f50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::Value *</type>
        <definition>llvm::Value* gandiva::DecimalIR::CallDecimalFunction</definition>
        <argsstring>(const std::string &amp;function_name, llvm::Type *return_type, const std::vector&lt; llvm::Value *&gt; &amp;args)</argsstring>
        <name>CallDecimalFunction</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>function_name</declname>
        </param>
        <param>
          <type>llvm::Type *</type>
          <declname>return_type</declname>
        </param>
        <param>
          <type>const std::vector&lt; llvm::Value *&gt; &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/decimal_ir.h" line="39" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classgandiva_1_1_decimal_i_r_1a6e7cf6816e4ebd9f9870277cd3f994f6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>static Status gandiva::DecimalIR::AddFunctions</definition>
        <argsstring>(Engine *engine)</argsstring>
        <name>AddFunctions</name>
        <param>
          <type><ref refid="classgandiva_1_1_engine" kindref="compound">Engine</ref> *</type>
          <declname>engine</declname>
        </param>
        <briefdescription>
<para>Build decimal IR functions and add them to the engine. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/decimal_ir.h" line="35" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classgandiva_1_1_decimal_i_r_1a068acf74f4d1988cb51c2ea4750fcb04" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void gandiva::DecimalIR::AddGlobals</definition>
        <argsstring>(Engine *engine)</argsstring>
        <name>AddGlobals</name>
        <param>
          <type><ref refid="classgandiva_1_1_engine" kindref="compound">Engine</ref> *</type>
          <declname>engine</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/decimal_ir.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_decimal_i_r_1a81dd01cba7e096954918a89e9315c2a3" prot="private" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>static Status gandiva::DecimalIR::MakeAdd</definition>
        <argsstring>(Engine *engine, std::shared_ptr&lt; FunctionIRBuilder &gt; *out)</argsstring>
        <name>MakeAdd</name>
        <param>
          <type><ref refid="classgandiva_1_1_engine" kindref="compound">Engine</ref> *</type>
          <declname>engine</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classgandiva_1_1_function_i_r_builder" kindref="compound">FunctionIRBuilder</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/decimal_ir.h" line="113" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classgandiva_1_1_decimal_i_r_1a0ef15747fade509762940bf8bff614cd" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gandiva::DecimalIR::InitializeIntrinsics</definition>
        <argsstring>()</argsstring>
        <name>InitializeIntrinsics</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/decimal_ir.h" line="110" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_decimal_i_r_1a3471377731ee06a1e99edca4d6b6d7b7" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::Value *</type>
        <definition>llvm::Value* gandiva::DecimalIR::GetScaleMultiplier</definition>
        <argsstring>(llvm::Value *scale)</argsstring>
        <name>GetScaleMultiplier</name>
        <param>
          <type>llvm::Value *</type>
          <declname>scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/decimal_ir.h" line="116" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_decimal_i_r_1aec700e6461fc01ef5b0f74e22d9eb60b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::Value *</type>
        <definition>llvm::Value* gandiva::DecimalIR::GetHigherScale</definition>
        <argsstring>(llvm::Value *x_scale, llvm::Value *y_scale)</argsstring>
        <name>GetHigherScale</name>
        <param>
          <type>llvm::Value *</type>
          <declname>x_scale</declname>
        </param>
        <param>
          <type>llvm::Value *</type>
          <declname>y_scale</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/decimal_ir.h" line="119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_decimal_i_r_1a1e5fbcf135045fb9014c677fcb1978e0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::Value *</type>
        <definition>llvm::Value* gandiva::DecimalIR::IncreaseScale</definition>
        <argsstring>(llvm::Value *in_value, llvm::Value *increase_scale_by)</argsstring>
        <name>IncreaseScale</name>
        <param>
          <type>llvm::Value *</type>
          <declname>in_value</declname>
        </param>
        <param>
          <type>llvm::Value *</type>
          <declname>increase_scale_by</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/decimal_ir.h" line="123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_decimal_i_r_1a3e2af0cd655261d721a62c0da119b5c6" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ValueWithOverflow</type>
        <definition>ValueWithOverflow gandiva::DecimalIR::IncreaseScaleWithOverflowCheck</definition>
        <argsstring>(llvm::Value *in_value, llvm::Value *increase_scale_by)</argsstring>
        <name>IncreaseScaleWithOverflowCheck</name>
        <param>
          <type>llvm::Value *</type>
          <declname>in_value</declname>
        </param>
        <param>
          <type>llvm::Value *</type>
          <declname>increase_scale_by</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/decimal_ir.h" line="126" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_decimal_i_r_1a00dd20b2d3501e80bbcc86efbacc0991" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::Value *</type>
        <definition>llvm::Value* gandiva::DecimalIR::ReduceScale</definition>
        <argsstring>(llvm::Value *in_value, llvm::Value *reduce_scale_by)</argsstring>
        <name>ReduceScale</name>
        <param>
          <type>llvm::Value *</type>
          <declname>in_value</declname>
        </param>
        <param>
          <type>llvm::Value *</type>
          <declname>reduce_scale_by</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/decimal_ir.h" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_decimal_i_r_1a6041c66e4f9183ca419661f81cd58fc2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::Value *</type>
        <definition>llvm::Value* gandiva::DecimalIR::AddFastPath</definition>
        <argsstring>(const ValueFull &amp;x, const ValueFull &amp;y)</argsstring>
        <name>AddFastPath</name>
        <param>
          <type>const ValueFull &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const ValueFull &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/decimal_ir.h" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_decimal_i_r_1aab318f5d2eb3656ac7fd3bb110fc0a76" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ValueWithOverflow</type>
        <definition>ValueWithOverflow gandiva::DecimalIR::AddWithOverflowCheck</definition>
        <argsstring>(const ValueFull &amp;x, const ValueFull &amp;y, const ValueFull &amp;out)</argsstring>
        <name>AddWithOverflowCheck</name>
        <param>
          <type>const ValueFull &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const ValueFull &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const ValueFull &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/decimal_ir.h" line="137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_decimal_i_r_1a7d9415b8bb1f43490e4b1315e641ebfd" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::Value *</type>
        <definition>llvm::Value* gandiva::DecimalIR::AddLarge</definition>
        <argsstring>(const ValueFull &amp;x, const ValueFull &amp;y, const ValueFull &amp;out)</argsstring>
        <name>AddLarge</name>
        <param>
          <type>const ValueFull &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const ValueFull &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>const ValueFull &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/decimal_ir.h" line="141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_decimal_i_r_1a02bd6d2617377f0ce1c12af88511f026" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::Value *</type>
        <definition>llvm::Value* gandiva::DecimalIR::GetCombinedOverflow</definition>
        <argsstring>(std::vector&lt; ValueWithOverflow &gt; values)</argsstring>
        <name>GetCombinedOverflow</name>
        <param>
          <type>std::vector&lt; ValueWithOverflow &gt;</type>
          <declname>values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/decimal_ir.h" line="144" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_decimal_i_r_1ad8c27c6384155f003dd91168fe6dbb13" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>Status gandiva::DecimalIR::BuildAdd</definition>
        <argsstring>()</argsstring>
        <name>BuildAdd</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/decimal_ir.h" line="147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_decimal_i_r_1a84a1ed82ab3499151467d319174b4719" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>Status gandiva::DecimalIR::BuildSubtract</definition>
        <argsstring>()</argsstring>
        <name>BuildSubtract</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/decimal_ir.h" line="150" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_decimal_i_r_1a48a1e4b8567d1d93aae0c62fd4d075c0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>Status gandiva::DecimalIR::BuildMultiply</definition>
        <argsstring>()</argsstring>
        <name>BuildMultiply</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/decimal_ir.h" line="153" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_decimal_i_r_1a8f5609780b98924a317d565957e57aa9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>Status gandiva::DecimalIR::BuildDivideOrMod</definition>
        <argsstring>(const std::string &amp;function_name, const std::string &amp;internal_name)</argsstring>
        <name>BuildDivideOrMod</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>function_name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>internal_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/decimal_ir.h" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_decimal_i_r_1ab52f1e9ee5c86a2559b3ef6bdb90555e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>Status gandiva::DecimalIR::BuildCompare</definition>
        <argsstring>(const std::string &amp;function_name, llvm::ICmpInst::Predicate cmp_instruction)</argsstring>
        <name>BuildCompare</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>function_name</declname>
        </param>
        <param>
          <type>llvm::ICmpInst::Predicate</type>
          <declname>cmp_instruction</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/decimal_ir.h" line="159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_decimal_i_r_1a5d52c10f024da71aaf23afce25e8edab" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>Status gandiva::DecimalIR::BuildDecimalFunction</definition>
        <argsstring>(const std::string &amp;function_name, llvm::Type *return_type, std::vector&lt; NamedArg &gt; in_types)</argsstring>
        <name>BuildDecimalFunction</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>function_name</declname>
        </param>
        <param>
          <type>llvm::Type *</type>
          <declname>return_type</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structgandiva_1_1_function_i_r_builder_1_1_named_arg" kindref="compound">NamedArg</ref> &gt;</type>
          <declname>in_types</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/decimal_ir.h" line="162" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_decimal_i_r_1aa5893e4dda186714283058fb6839c6f8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gandiva::DecimalIR::AddTrace</definition>
        <argsstring>(const std::string &amp;fmt, std::vector&lt; llvm::Value *&gt; args)</argsstring>
        <name>AddTrace</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>std::vector&lt; llvm::Value *&gt;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/decimal_ir.h" line="166" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_decimal_i_r_1a92650baee5f591c1eb144a0a495d7907" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gandiva::DecimalIR::AddTrace32</definition>
        <argsstring>(const std::string &amp;msg, llvm::Value *value)</argsstring>
        <name>AddTrace32</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>llvm::Value *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/decimal_ir.h" line="169" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_decimal_i_r_1a64d27b045678a116a2e25f18190c5ed0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gandiva::DecimalIR::AddTrace128</definition>
        <argsstring>(const std::string &amp;msg, llvm::Value *value)</argsstring>
        <name>AddTrace128</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>llvm::Value *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/decimal_ir.h" line="172" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Decimal IR functions. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1129">
        <label>gandiva::FunctionIRBuilder</label>
        <link refid="classgandiva_1_1_function_i_r_builder"/>
      </node>
      <node id="1128">
        <label>gandiva::DecimalIR</label>
        <link refid="classgandiva_1_1_decimal_i_r"/>
        <childnode refid="1129" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1131">
        <label>gandiva::FunctionIRBuilder</label>
        <link refid="classgandiva_1_1_function_i_r_builder"/>
      </node>
      <node id="1130">
        <label>gandiva::DecimalIR</label>
        <link refid="classgandiva_1_1_decimal_i_r"/>
        <childnode refid="1131" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/gandiva/decimal_ir.h" line="29" column="1" bodyfile="/arrow/cpp/src/gandiva/decimal_ir.h" bodystart="29" bodyend="186"/>
    <listofallmembers>
      <member refid="classgandiva_1_1_decimal_i_r_1a6041c66e4f9183ca419661f81cd58fc2" prot="private" virt="non-virtual"><scope>gandiva::DecimalIR</scope><name>AddFastPath</name></member>
      <member refid="classgandiva_1_1_decimal_i_r_1a6e7cf6816e4ebd9f9870277cd3f994f6" prot="public" virt="non-virtual"><scope>gandiva::DecimalIR</scope><name>AddFunctions</name></member>
      <member refid="classgandiva_1_1_decimal_i_r_1a068acf74f4d1988cb51c2ea4750fcb04" prot="private" virt="non-virtual"><scope>gandiva::DecimalIR</scope><name>AddGlobals</name></member>
      <member refid="classgandiva_1_1_decimal_i_r_1a7d9415b8bb1f43490e4b1315e641ebfd" prot="private" virt="non-virtual"><scope>gandiva::DecimalIR</scope><name>AddLarge</name></member>
      <member refid="classgandiva_1_1_decimal_i_r_1aa5893e4dda186714283058fb6839c6f8" prot="private" virt="non-virtual"><scope>gandiva::DecimalIR</scope><name>AddTrace</name></member>
      <member refid="classgandiva_1_1_decimal_i_r_1a64d27b045678a116a2e25f18190c5ed0" prot="private" virt="non-virtual"><scope>gandiva::DecimalIR</scope><name>AddTrace128</name></member>
      <member refid="classgandiva_1_1_decimal_i_r_1a92650baee5f591c1eb144a0a495d7907" prot="private" virt="non-virtual"><scope>gandiva::DecimalIR</scope><name>AddTrace32</name></member>
      <member refid="classgandiva_1_1_decimal_i_r_1aab318f5d2eb3656ac7fd3bb110fc0a76" prot="private" virt="non-virtual"><scope>gandiva::DecimalIR</scope><name>AddWithOverflowCheck</name></member>
      <member refid="classgandiva_1_1_decimal_i_r_1ad8c27c6384155f003dd91168fe6dbb13" prot="private" virt="non-virtual"><scope>gandiva::DecimalIR</scope><name>BuildAdd</name></member>
      <member refid="classgandiva_1_1_decimal_i_r_1ab52f1e9ee5c86a2559b3ef6bdb90555e" prot="private" virt="non-virtual"><scope>gandiva::DecimalIR</scope><name>BuildCompare</name></member>
      <member refid="classgandiva_1_1_decimal_i_r_1a5d52c10f024da71aaf23afce25e8edab" prot="private" virt="non-virtual"><scope>gandiva::DecimalIR</scope><name>BuildDecimalFunction</name></member>
      <member refid="classgandiva_1_1_decimal_i_r_1a8f5609780b98924a317d565957e57aa9" prot="private" virt="non-virtual"><scope>gandiva::DecimalIR</scope><name>BuildDivideOrMod</name></member>
      <member refid="classgandiva_1_1_function_i_r_builder_1ac6ee52926fa9a227f8e70531e9c0a30a" prot="protected" virt="non-virtual"><scope>gandiva::DecimalIR</scope><name>BuildFunction</name></member>
      <member refid="classgandiva_1_1_function_i_r_builder_1a6d0f6000624c1b2d5002fcde0d4a2180" prot="protected" virt="non-virtual"><scope>gandiva::DecimalIR</scope><name>BuildIfElse</name></member>
      <member refid="classgandiva_1_1_decimal_i_r_1a48a1e4b8567d1d93aae0c62fd4d075c0" prot="private" virt="non-virtual"><scope>gandiva::DecimalIR</scope><name>BuildMultiply</name></member>
      <member refid="classgandiva_1_1_decimal_i_r_1a84a1ed82ab3499151467d319174b4719" prot="private" virt="non-virtual"><scope>gandiva::DecimalIR</scope><name>BuildSubtract</name></member>
      <member refid="classgandiva_1_1_decimal_i_r_1ad08160fdc89828a2a034becb6f382f50" prot="public" virt="non-virtual"><scope>gandiva::DecimalIR</scope><name>CallDecimalFunction</name></member>
      <member refid="classgandiva_1_1_function_i_r_builder_1a22769903b94d5b311342ea141534788d" prot="protected" virt="non-virtual"><scope>gandiva::DecimalIR</scope><name>context</name></member>
      <member refid="classgandiva_1_1_decimal_i_r_1a0fdb6acce34a3a5165ee940f3efef35b" prot="public" virt="non-virtual"><scope>gandiva::DecimalIR</scope><name>DecimalIR</name></member>
      <member refid="classgandiva_1_1_decimal_i_r_1a86972af39e992eb4cb36629622dd57ba" prot="private" virt="non-virtual"><scope>gandiva::DecimalIR</scope><name>enable_ir_traces_</name></member>
      <member refid="classgandiva_1_1_decimal_i_r_1ae2eab72c23528235c03064733a7c44c7" prot="public" virt="non-virtual"><scope>gandiva::DecimalIR</scope><name>EnableTraces</name></member>
      <member refid="classgandiva_1_1_function_i_r_builder_1aad32caa96ede2bfe517c77183275e082" prot="public" virt="non-virtual"><scope>gandiva::DecimalIR</scope><name>FunctionIRBuilder</name></member>
      <member refid="classgandiva_1_1_decimal_i_r_1a02bd6d2617377f0ce1c12af88511f026" prot="private" virt="non-virtual"><scope>gandiva::DecimalIR</scope><name>GetCombinedOverflow</name></member>
      <member refid="classgandiva_1_1_decimal_i_r_1aec700e6461fc01ef5b0f74e22d9eb60b" prot="private" virt="non-virtual"><scope>gandiva::DecimalIR</scope><name>GetHigherScale</name></member>
      <member refid="classgandiva_1_1_decimal_i_r_1a3471377731ee06a1e99edca4d6b6d7b7" prot="private" virt="non-virtual"><scope>gandiva::DecimalIR</scope><name>GetScaleMultiplier</name></member>
      <member refid="classgandiva_1_1_decimal_i_r_1a6fd039c577413427fb62aa471a444fe5" prot="private" virt="non-virtual"><scope>gandiva::DecimalIR</scope><name>i128_with_overflow_struct_type_</name></member>
      <member refid="classgandiva_1_1_decimal_i_r_1a1e5fbcf135045fb9014c677fcb1978e0" prot="private" virt="non-virtual"><scope>gandiva::DecimalIR</scope><name>IncreaseScale</name></member>
      <member refid="classgandiva_1_1_decimal_i_r_1a3e2af0cd655261d721a62c0da119b5c6" prot="private" virt="non-virtual"><scope>gandiva::DecimalIR</scope><name>IncreaseScaleWithOverflowCheck</name></member>
      <member refid="classgandiva_1_1_decimal_i_r_1a0ef15747fade509762940bf8bff614cd" prot="private" virt="non-virtual"><scope>gandiva::DecimalIR</scope><name>InitializeIntrinsics</name></member>
      <member refid="classgandiva_1_1_function_i_r_builder_1a40367808aa1cf11aca03641207a79e2b" prot="protected" virt="non-virtual"><scope>gandiva::DecimalIR</scope><name>ir_builder</name></member>
      <member refid="classgandiva_1_1_decimal_i_r_1a6b125579a05a11edad1e7e67b344dc01" prot="private" virt="non-virtual"><scope>gandiva::DecimalIR</scope><name>kScaleMultipliersName</name></member>
      <member refid="classgandiva_1_1_decimal_i_r_1a7ec3e49107cd95f785a147495ad7721a" prot="private" virt="non-virtual"><scope>gandiva::DecimalIR</scope><name>kUseOverflowIntrinsics</name></member>
      <member refid="classgandiva_1_1_decimal_i_r_1a81dd01cba7e096954918a89e9315c2a3" prot="private" virt="non-virtual"><scope>gandiva::DecimalIR</scope><name>MakeAdd</name></member>
      <member refid="classgandiva_1_1_function_i_r_builder_1ae872c03feefd1bace5ae5ad978dc0ef8" prot="protected" virt="non-virtual"><scope>gandiva::DecimalIR</scope><name>module</name></member>
      <member refid="classgandiva_1_1_decimal_i_r_1a00dd20b2d3501e80bbcc86efbacc0991" prot="private" virt="non-virtual"><scope>gandiva::DecimalIR</scope><name>ReduceScale</name></member>
      <member refid="classgandiva_1_1_decimal_i_r_1ac595231f3af16d69f5b01799f06986ba" prot="private" virt="non-virtual"><scope>gandiva::DecimalIR</scope><name>sadd_with_overflow_fn_</name></member>
      <member refid="classgandiva_1_1_decimal_i_r_1a3efd272cbee148f4f8ee246dcf098186" prot="private" virt="non-virtual"><scope>gandiva::DecimalIR</scope><name>smul_with_overflow_fn_</name></member>
      <member refid="classgandiva_1_1_function_i_r_builder_1a64655aeecec548b0d29ef5deda4341c4" prot="protected" virt="non-virtual"><scope>gandiva::DecimalIR</scope><name>types</name></member>
      <member refid="classgandiva_1_1_function_i_r_builder_1aa8fab60785684ac1e6dada2d2aa90cb1" prot="public" virt="virtual"><scope>gandiva::DecimalIR</scope><name>~FunctionIRBuilder</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
