<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_fixed_size_binary_type" kind="class" language="C++" prot="public">
    <compoundname>arrow::FixedSizeBinaryType</compoundname>
    <basecompoundref refid="classarrow_1_1_fixed_width_type" prot="public" virt="non-virtual">arrow::FixedWidthType</basecompoundref>
    <basecompoundref refid="classarrow_1_1_parametric_type" prot="public" virt="non-virtual">arrow::ParametricType</basecompoundref>
    <derivedcompoundref refid="classarrow_1_1_decimal_type" prot="public" virt="non-virtual">arrow::DecimalType</derivedcompoundref>
    <includes refid="type_8h" local="no">arrow/type.h</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classarrow_1_1_fixed_size_binary_type_1a81bf6bef1117f7ecad1c529ccab4984e" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref></type>
        <definition>constexpr Type::type arrow::FixedSizeBinaryType::type_id</definition>
        <argsstring></argsstring>
        <name>type_id</name>
        <initializer>= <ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a1b3f48148c5ff94c039d09ff689da179" kindref="member">Type::FIXED_SIZE_BINARY</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="883" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="883" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_fixed_size_binary_type_1a809705b1401eb473cb45de6c3ad97507" prot="public" static="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool arrow::FixedSizeBinaryType::is_utf8</definition>
        <argsstring></argsstring>
        <name>is_utf8</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="884" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="884" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classarrow_1_1_fixed_size_binary_type_1a2dfa5ac6ba9a94d355533f5b23a7b1bc" prot="protected" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t arrow::FixedSizeBinaryType::byte_width_</definition>
        <argsstring></argsstring>
        <name>byte_width_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="907" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="907" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1_fixed_size_binary_type_1afde5bea8e2a5344b4f17c33e71003271" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const char *</type>
        <definition>static constexpr const char* arrow::FixedSizeBinaryType::type_name</definition>
        <argsstring>()</argsstring>
        <name>type_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="886" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="886" bodyend="886"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1_fixed_size_binary_type_1a0a6a0f0fed4fbaafaff6d6c74569d5ac" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::FixedSizeBinaryType::FixedSizeBinaryType</definition>
        <argsstring>(int32_t byte_width)</argsstring>
        <name>FixedSizeBinaryType</name>
        <param>
          <type>int32_t</type>
          <declname>byte_width</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="888" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="888" bodyend="889"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_fixed_size_binary_type_1a3f57f5b4f09bf5d93df7a33600427500" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::FixedSizeBinaryType::FixedSizeBinaryType</definition>
        <argsstring>(int32_t byte_width, Type::type override_type_id)</argsstring>
        <name>FixedSizeBinaryType</name>
        <param>
          <type>int32_t</type>
          <declname>byte_width</declname>
        </param>
        <param>
          <type><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref></type>
          <declname>override_type_id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="890" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="890" bodyend="891"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_fixed_size_binary_type_1a470c5c8c75c6480ff99c8abd16e375a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string arrow::FixedSizeBinaryType::ToString</definition>
        <argsstring>() const override</argsstring>
        <name>ToString</name>
        <reimplements refid="classarrow_1_1_data_type_1a944727354fb11138ebd46368319598f2">ToString</reimplements>
        <reimplementedby refid="classarrow_1_1_decimal128_type_1aa18803bc8d4540498e2bc697353daa96">ToString</reimplementedby>
        <briefdescription>
<para>A string representation of the type, including any children. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="893" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_fixed_size_binary_type_1af533276c83d45b5cefa826a169bef6c7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string arrow::FixedSizeBinaryType::name</definition>
        <argsstring>() const override</argsstring>
        <name>name</name>
        <reimplements refid="classarrow_1_1_data_type_1a94985d12273f5dd353d6142921299d4d">name</reimplements>
        <reimplementedby refid="classarrow_1_1_decimal128_type_1a369b5ae40c271133e15571f9c6198170">name</reimplementedby>
        <briefdescription>
<para>A string name of the type, omitting any child fields. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Experimental API </para></simplesect>
<simplesect kind="since"><para>0.7.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="894" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="894" bodyend="894"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_fixed_size_binary_type_1a272445981e412ccca95784e133f0a6cc" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="structarrow_1_1_data_type_layout" kindref="compound">DataTypeLayout</ref></type>
        <definition>DataTypeLayout arrow::FixedSizeBinaryType::layout</definition>
        <argsstring>() const override</argsstring>
        <name>layout</name>
        <reimplements refid="classarrow_1_1_data_type_1a4fe70f6a45eda029ea118c8470ff925e">layout</reimplements>
        <briefdescription>
<para>Return the data type layout. </para>        </briefdescription>
        <detaileddescription>
<para>Children are not included.</para><para><simplesect kind="note"><para>Experimental API </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="896" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="896" bodyend="899"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_fixed_size_binary_type_1a684663b4cfeedd523eece039c6c0955a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t arrow::FixedSizeBinaryType::byte_width</definition>
        <argsstring>() const</argsstring>
        <name>byte_width</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="901" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="901" bodyend="901"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_fixed_size_binary_type_1afc7baa826c87aec4d35172d75974b0e0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int</type>
        <definition>int arrow::FixedSizeBinaryType::bit_width</definition>
        <argsstring>() const override</argsstring>
        <name>bit_width</name>
        <reimplements refid="classarrow_1_1_fixed_width_type_1ab802f3862719e7a8ff081a7dc679d215">bit_width</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="902" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classarrow_1_1_fixed_size_binary_type_1a3fe2f3b69142a528acc76185b052031e" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arrow::FixedSizeBinaryType::ComputeFingerprint</definition>
        <argsstring>() const override</argsstring>
        <name>ComputeFingerprint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="905" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Concrete type class for fixed-size binary data. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1742">
        <label>arrow::ParametricType</label>
        <link refid="classarrow_1_1_parametric_type"/>
      </node>
      <node id="1743">
        <label>arrow::DecimalType</label>
        <link refid="classarrow_1_1_decimal_type"/>
        <childnode refid="1738" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1738">
        <label>arrow::FixedSizeBinaryType</label>
        <link refid="classarrow_1_1_fixed_size_binary_type"/>
        <childnode refid="1739" relation="public-inheritance">
        </childnode>
        <childnode refid="1742" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1740">
        <label>arrow::DataType</label>
        <link refid="classarrow_1_1_data_type"/>
        <childnode refid="1741" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1741">
        <label>arrow::detail::Fingerprintable</label>
      </node>
      <node id="1739">
        <label>arrow::FixedWidthType</label>
        <link refid="classarrow_1_1_fixed_width_type"/>
        <childnode refid="1740" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1744">
        <label>arrow::Decimal128Type</label>
        <link refid="classarrow_1_1_decimal128_type"/>
        <childnode refid="1743" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1749">
        <label>arrow::ParametricType</label>
        <link refid="classarrow_1_1_parametric_type"/>
      </node>
      <node id="1745">
        <label>arrow::FixedSizeBinaryType</label>
        <link refid="classarrow_1_1_fixed_size_binary_type"/>
        <childnode refid="1746" relation="public-inheritance">
        </childnode>
        <childnode refid="1749" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1747">
        <label>arrow::DataType</label>
        <link refid="classarrow_1_1_data_type"/>
        <childnode refid="1748" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1748">
        <label>arrow::detail::Fingerprintable</label>
      </node>
      <node id="1746">
        <label>arrow::FixedWidthType</label>
        <link refid="classarrow_1_1_fixed_width_type"/>
        <childnode refid="1747" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/type.h" line="881" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="881" bodyend="908"/>
    <listofallmembers>
      <member refid="classarrow_1_1_data_type_1a97571c4039e363f7ebcb09f7c789064a" prot="public" virt="non-virtual"><scope>arrow::FixedSizeBinaryType</scope><name>Accept</name></member>
      <member refid="classarrow_1_1_fixed_size_binary_type_1afc7baa826c87aec4d35172d75974b0e0" prot="public" virt="virtual"><scope>arrow::FixedSizeBinaryType</scope><name>bit_width</name></member>
      <member refid="classarrow_1_1_fixed_size_binary_type_1a684663b4cfeedd523eece039c6c0955a" prot="public" virt="non-virtual"><scope>arrow::FixedSizeBinaryType</scope><name>byte_width</name></member>
      <member refid="classarrow_1_1_fixed_size_binary_type_1a2dfa5ac6ba9a94d355533f5b23a7b1bc" prot="protected" virt="non-virtual"><scope>arrow::FixedSizeBinaryType</scope><name>byte_width_</name></member>
      <member refid="classarrow_1_1_data_type_1a3c9f77b8d895abd8618566386cbeb7c0" prot="public" virt="non-virtual"><scope>arrow::FixedSizeBinaryType</scope><name>child</name></member>
      <member refid="classarrow_1_1_data_type_1a36061c037a2e6e974cc3b22dfb6a5bac" prot="public" virt="non-virtual"><scope>arrow::FixedSizeBinaryType</scope><name>children</name></member>
      <member refid="classarrow_1_1_data_type_1a8dd2f042289733133c386463afcea902" prot="protected" virt="non-virtual"><scope>arrow::FixedSizeBinaryType</scope><name>children_</name></member>
      <member refid="classarrow_1_1_fixed_size_binary_type_1a3fe2f3b69142a528acc76185b052031e" prot="protected" virt="non-virtual"><scope>arrow::FixedSizeBinaryType</scope><name>ComputeFingerprint</name></member>
      <member refid="classarrow_1_1_data_type_1a1e0bf7cc98ce39872b8044f375d7de6b" prot="protected" virt="non-virtual"><scope>arrow::FixedSizeBinaryType</scope><name>ComputeMetadataFingerprint</name></member>
      <member refid="classarrow_1_1_data_type_1a1b8a7ece05983649f67396177f40e844" prot="public" virt="non-virtual"><scope>arrow::FixedSizeBinaryType</scope><name>DataType</name></member>
      <member refid="classarrow_1_1_data_type_1aaf003113bb8f4c51a03a16f4b27a52bb" prot="public" virt="non-virtual"><scope>arrow::FixedSizeBinaryType</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_data_type_1ae974f4c707ef998d25368d278818af6b" prot="public" virt="non-virtual"><scope>arrow::FixedSizeBinaryType</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_fixed_size_binary_type_1a0a6a0f0fed4fbaafaff6d6c74569d5ac" prot="public" virt="non-virtual"><scope>arrow::FixedSizeBinaryType</scope><name>FixedSizeBinaryType</name></member>
      <member refid="classarrow_1_1_fixed_size_binary_type_1a3f57f5b4f09bf5d93df7a33600427500" prot="public" virt="non-virtual"><scope>arrow::FixedSizeBinaryType</scope><name>FixedSizeBinaryType</name></member>
      <member refid="classarrow_1_1_data_type_1a5ec6a1c93420c68e9c8065d4a56ad645" prot="public" virt="non-virtual"><scope>arrow::FixedSizeBinaryType</scope><name>id</name></member>
      <member refid="classarrow_1_1_data_type_1aa2704f1cfc50018d02e109b32f67e422" prot="protected" virt="non-virtual"><scope>arrow::FixedSizeBinaryType</scope><name>id_</name></member>
      <member refid="classarrow_1_1_fixed_size_binary_type_1a809705b1401eb473cb45de6c3ad97507" prot="public" virt="non-virtual"><scope>arrow::FixedSizeBinaryType</scope><name>is_utf8</name></member>
      <member refid="classarrow_1_1_fixed_size_binary_type_1a272445981e412ccca95784e133f0a6cc" prot="public" virt="virtual"><scope>arrow::FixedSizeBinaryType</scope><name>layout</name></member>
      <member refid="classarrow_1_1_fixed_size_binary_type_1af533276c83d45b5cefa826a169bef6c7" prot="public" virt="virtual"><scope>arrow::FixedSizeBinaryType</scope><name>name</name></member>
      <member refid="classarrow_1_1_data_type_1ac8920179a6c1e7f434c495d5ec4662f1" prot="public" virt="non-virtual"><scope>arrow::FixedSizeBinaryType</scope><name>num_children</name></member>
      <member refid="classarrow_1_1_fixed_size_binary_type_1a470c5c8c75c6480ff99c8abd16e375a2" prot="public" virt="virtual"><scope>arrow::FixedSizeBinaryType</scope><name>ToString</name></member>
      <member refid="classarrow_1_1_fixed_size_binary_type_1a81bf6bef1117f7ecad1c529ccab4984e" prot="public" virt="non-virtual"><scope>arrow::FixedSizeBinaryType</scope><name>type_id</name></member>
      <member refid="classarrow_1_1_fixed_size_binary_type_1afde5bea8e2a5344b4f17c33e71003271" prot="public" virt="non-virtual"><scope>arrow::FixedSizeBinaryType</scope><name>type_name</name></member>
      <member refid="classarrow_1_1_data_type_1a268b7e57ebec17a48930c73d8c0605d2" prot="public" virt="non-virtual"><scope>arrow::FixedSizeBinaryType</scope><name>~DataType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
