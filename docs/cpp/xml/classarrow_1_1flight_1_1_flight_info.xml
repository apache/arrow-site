<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1flight_1_1_flight_info" kind="class" language="C++" prot="public">
    <compoundname>arrow::flight::FlightInfo</compoundname>
    <includes refid="arrow_2flight_2types_8h" local="no">arrow/flight/types.h</includes>
    <innerclass refid="structarrow_1_1flight_1_1_flight_info_1_1_data" prot="public">arrow::flight::FlightInfo::Data</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classarrow_1_1flight_1_1_flight_info_1a2a4edc558f04ce1cb3aa1e5e7aa2e7fc" prot="private" static="no" mutable="no">
        <type><ref refid="structarrow_1_1flight_1_1_flight_info_1_1_data" kindref="compound">Data</ref></type>
        <definition>Data arrow::flight::FlightInfo::data_</definition>
        <argsstring></argsstring>
        <name>data_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="424" column="1" bodyfile="/arrow/cpp/src/arrow/flight/types.h" bodystart="424" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1flight_1_1_flight_info_1afdbf3de8d153ed4554471b60d3185479" prot="private" static="no" mutable="yes">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Schema&gt; arrow::flight::FlightInfo::schema_</definition>
        <argsstring></argsstring>
        <name>schema_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="425" column="1" bodyfile="/arrow/cpp/src/arrow/flight/types.h" bodystart="425" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1flight_1_1_flight_info_1a7e876013097661775519900a7ff95468" prot="private" static="no" mutable="yes">
        <type>bool</type>
        <definition>bool arrow::flight::FlightInfo::reconstructed_schema_</definition>
        <argsstring></argsstring>
        <name>reconstructed_schema_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="426" column="1" bodyfile="/arrow/cpp/src/arrow/flight/types.h" bodystart="426" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_info_1a0289feabdbb38fbc82f313cef0c5e9ef" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::flight::FlightInfo::FlightInfo</definition>
        <argsstring>(const Data &amp;data)</argsstring>
        <name>FlightInfo</name>
        <param>
          <type>const <ref refid="structarrow_1_1flight_1_1_flight_info_1_1_data" kindref="compound">Data</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="382" column="1" bodyfile="/arrow/cpp/src/arrow/flight/types.h" bodystart="382" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_info_1ab4b4f56f8a4e4cb4a0d9e5757c156efb" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::flight::FlightInfo::FlightInfo</definition>
        <argsstring>(Data &amp;&amp;data)</argsstring>
        <name>FlightInfo</name>
        <param>
          <type><ref refid="structarrow_1_1flight_1_1_flight_info_1_1_data" kindref="compound">Data</ref> &amp;&amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="383" column="1" bodyfile="/arrow/cpp/src/arrow/flight/types.h" bodystart="383" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_info_1aa5807342b5de710ef93499977fa19c6b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::flight::FlightInfo::GetSchema</definition>
        <argsstring>(ipc::DictionaryMemo *dictionary_memo, std::shared_ptr&lt; Schema &gt; *out) const</argsstring>
        <name>GetSchema</name>
        <param>
          <type><ref refid="classarrow_1_1ipc_1_1_dictionary_memo" kindref="compound">ipc::DictionaryMemo</ref> *</type>
          <declname>dictionary_memo</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Deserialize the Arrow schema of the dataset, to be passed to each call to DoGet. </para>        </briefdescription>
        <detaileddescription>
<para>Populate any dictionary encoded fields into a DictionaryMemo for bookkeeping <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="inout">dictionary_memo</parametername>
</parameternamelist>
<parameterdescription>
<para>for dictionary bookkeeping, will be modified </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the reconstructed <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="392" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_info_1a38e272da0b5de4dcc60931a3f5b76bd1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; arrow::flight::FlightInfo::serialized_schema</definition>
        <argsstring>() const</argsstring>
        <name>serialized_schema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="395" column="1" bodyfile="/arrow/cpp/src/arrow/flight/types.h" bodystart="395" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_info_1af948fa2fc9f46987656dff565aeb62bb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="structarrow_1_1flight_1_1_flight_descriptor" kindref="compound">FlightDescriptor</ref> &amp;</type>
        <definition>const FlightDescriptor&amp; arrow::flight::FlightInfo::descriptor</definition>
        <argsstring>() const</argsstring>
        <name>descriptor</name>
        <briefdescription>
<para>The descriptor associated with this flight, may not be set. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="398" column="1" bodyfile="/arrow/cpp/src/arrow/flight/types.h" bodystart="398" bodyend="398"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_info_1a101f2c75e81b0eec16a59baf05514d22" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="structarrow_1_1flight_1_1_flight_endpoint" kindref="compound">FlightEndpoint</ref> &gt; &amp;</type>
        <definition>const std::vector&lt;FlightEndpoint&gt;&amp; arrow::flight::FlightInfo::endpoints</definition>
        <argsstring>() const</argsstring>
        <name>endpoints</name>
        <briefdescription>
<para>A list of endpoints associated with the flight (dataset). </para>        </briefdescription>
        <detaileddescription>
<para>To consume the whole flight, all endpoints must be consumed </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="402" column="1" bodyfile="/arrow/cpp/src/arrow/flight/types.h" bodystart="402" bodyend="402"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_info_1a9e19c96b3ae8be6c624b56240f4356b8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t arrow::flight::FlightInfo::total_records</definition>
        <argsstring>() const</argsstring>
        <name>total_records</name>
        <briefdescription>
<para>The total number of records (rows) in the dataset. If unknown, set to -1. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="405" column="1" bodyfile="/arrow/cpp/src/arrow/flight/types.h" bodystart="405" bodyend="405"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_info_1a558520833731ca6a747ad6ef5257ecf2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t arrow::flight::FlightInfo::total_bytes</definition>
        <argsstring>() const</argsstring>
        <name>total_bytes</name>
        <briefdescription>
<para>The total number of bytes in the dataset. If unknown, set to -1. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="408" column="1" bodyfile="/arrow/cpp/src/arrow/flight/types.h" bodystart="408" bodyend="408"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_info_1aa14803d54f009e993fe39f20113274f5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::flight::FlightInfo::SerializeToString</definition>
        <argsstring>(std::string *out) const</argsstring>
        <name>SerializeToString</name>
        <param>
          <type>std::string *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Get the wire-format representation of this type. </para>        </briefdescription>
        <detaileddescription>
<para>Useful when interoperating with non-Flight systems (e.g. REST services) that may want to return Flight types. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="414" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_info_1a44d8bfa5c21f30d7478dde5068502b6e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::flight::FlightInfo::Deserialize</definition>
        <argsstring>(const std::string &amp;serialized, std::unique_ptr&lt; FlightInfo &gt; *out)</argsstring>
        <name>Deserialize</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>serialized</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classarrow_1_1flight_1_1_flight_info" kindref="compound">FlightInfo</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Parse the wire-format representation of this type. </para>        </briefdescription>
        <detaileddescription>
<para>Useful when interoperating with non-Flight systems (e.g. REST services) that may want to return Flight types. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="420" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The access coordinates for retireval of a dataset, returned by GetFlightInfo. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/arrow/flight/types.h" line="372" column="1" bodyfile="/arrow/cpp/src/arrow/flight/types.h" bodystart="372" bodyend="427"/>
    <listofallmembers>
      <member refid="classarrow_1_1flight_1_1_flight_info_1a2a4edc558f04ce1cb3aa1e5e7aa2e7fc" prot="private" virt="non-virtual"><scope>arrow::flight::FlightInfo</scope><name>data_</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_info_1af948fa2fc9f46987656dff565aeb62bb" prot="public" virt="non-virtual"><scope>arrow::flight::FlightInfo</scope><name>descriptor</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_info_1a44d8bfa5c21f30d7478dde5068502b6e" prot="public" virt="non-virtual"><scope>arrow::flight::FlightInfo</scope><name>Deserialize</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_info_1a101f2c75e81b0eec16a59baf05514d22" prot="public" virt="non-virtual"><scope>arrow::flight::FlightInfo</scope><name>endpoints</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_info_1a0289feabdbb38fbc82f313cef0c5e9ef" prot="public" virt="non-virtual"><scope>arrow::flight::FlightInfo</scope><name>FlightInfo</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_info_1ab4b4f56f8a4e4cb4a0d9e5757c156efb" prot="public" virt="non-virtual"><scope>arrow::flight::FlightInfo</scope><name>FlightInfo</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_info_1aa5807342b5de710ef93499977fa19c6b" prot="public" virt="non-virtual"><scope>arrow::flight::FlightInfo</scope><name>GetSchema</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_info_1a7e876013097661775519900a7ff95468" prot="private" virt="non-virtual"><scope>arrow::flight::FlightInfo</scope><name>reconstructed_schema_</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_info_1afdbf3de8d153ed4554471b60d3185479" prot="private" virt="non-virtual"><scope>arrow::flight::FlightInfo</scope><name>schema_</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_info_1a38e272da0b5de4dcc60931a3f5b76bd1" prot="public" virt="non-virtual"><scope>arrow::flight::FlightInfo</scope><name>serialized_schema</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_info_1aa14803d54f009e993fe39f20113274f5" prot="public" virt="non-virtual"><scope>arrow::flight::FlightInfo</scope><name>SerializeToString</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_info_1a558520833731ca6a747ad6ef5257ecf2" prot="public" virt="non-virtual"><scope>arrow::flight::FlightInfo</scope><name>total_bytes</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_info_1a9e19c96b3ae8be6c624b56240f4356b8" prot="public" virt="non-virtual"><scope>arrow::flight::FlightInfo</scope><name>total_records</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
