<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1util_1_1_equality_comparable" kind="class" language="C++" prot="public">
    <compoundname>arrow::util::EqualityComparable</compoundname>
    <derivedcompoundref refid="classarrow_1_1_result" prot="public" virt="non-virtual">arrow::Result&lt; arrow::Iterator&lt; T &gt; &gt;</derivedcompoundref>
    <derivedcompoundref refid="classarrow_1_1_result" prot="public" virt="non-virtual">arrow::Result&lt; From &gt;</derivedcompoundref>
    <derivedcompoundref refid="classarrow_1_1_result" prot="public" virt="non-virtual">arrow::Result&lt; I &gt;</derivedcompoundref>
    <includes refid="util_2compare_8h" local="no">arrow/util/compare.h</includes>
    <innerclass refid="structarrow_1_1util_1_1_equality_comparable_1_1_ptrs_equal" prot="public">arrow::util::EqualityComparable::PtrsEqual</innerclass>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1util_1_1_equality_comparable_1a14c5ed61e030855eef29edebc6355806" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::util::EqualityComparable&lt; T &gt;::~EqualityComparable</definition>
        <argsstring>()</argsstring>
        <name>~EqualityComparable</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/compare.h" line="33" column="1" bodyfile="/arrow/cpp/src/arrow/util/compare.h" bodystart="33" bodyend="38"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1util_1_1_equality_comparable_1a140cfdea92ae17331d8db8f69aad082f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Extra</declname>
            <defname>Extra</defname>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool arrow::util::EqualityComparable&lt; T &gt;::Equals</definition>
        <argsstring>(const std::shared_ptr&lt; T &gt; &amp;other, Extra &amp;&amp;... extra) const</argsstring>
        <name>Equals</name>
        <param>
          <type>const std::shared_ptr&lt; T &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>Extra &amp;&amp;...</type>
          <declname>extra</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/compare.h" line="41" column="1" bodyfile="/arrow/cpp/src/arrow/util/compare.h" bodystart="41" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1util_1_1_equality_comparable_1ac0e8ec25e77ece923689ee31c389200e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::util::EqualityComparable&lt; T &gt;::operator==</definition>
        <argsstring>(const T &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const T &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/compare.h" line="54" column="1" bodyfile="/arrow/cpp/src/arrow/util/compare.h" bodystart="54" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1util_1_1_equality_comparable_1a1a7ff2c6f720209bc960524c47ad0535" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::util::EqualityComparable&lt; T &gt;::operator!=</definition>
        <argsstring>(const T &amp;other) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const T &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/compare.h" line="55" column="1" bodyfile="/arrow/cpp/src/arrow/util/compare.h" bodystart="55" bodyend="55"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classarrow_1_1util_1_1_equality_comparable_1a760c3956ca57e67f23ae07d22b942a7d" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const T &amp;</type>
        <definition>const T&amp; arrow::util::EqualityComparable&lt; T &gt;::cast</definition>
        <argsstring>() const</argsstring>
        <name>cast</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/compare.h" line="58" column="1" bodyfile="/arrow/cpp/src/arrow/util/compare.h" bodystart="58" bodyend="58"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>CRTP helper for declaring equality comparison. Defines operator== and operator!=. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1409">
        <label>arrow::util::EqualityComparable&lt; T &gt;</label>
        <link refid="classarrow_1_1util_1_1_equality_comparable"/>
      </node>
      <node id="1411">
        <label>Result&lt; From &gt;</label>
        <link refid="classarrow_1_1_result"/>
        <childnode refid="1409" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1410">
        <label>Result&lt; arrow::Iterator&lt; T &gt; &gt;</label>
        <link refid="classarrow_1_1_result"/>
        <childnode refid="1409" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1412">
        <label>Result&lt; I &gt;</label>
        <link refid="classarrow_1_1_result"/>
        <childnode refid="1409" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/arrow/cpp/src/arrow/util/compare.h" line="31" column="1" bodyfile="/arrow/cpp/src/arrow/util/compare.h" bodystart="31" bodyend="59"/>
    <listofallmembers>
      <member refid="classarrow_1_1util_1_1_equality_comparable_1a760c3956ca57e67f23ae07d22b942a7d" prot="private" virt="non-virtual"><scope>arrow::util::EqualityComparable</scope><name>cast</name></member>
      <member refid="classarrow_1_1util_1_1_equality_comparable_1a140cfdea92ae17331d8db8f69aad082f" prot="public" virt="non-virtual"><scope>arrow::util::EqualityComparable</scope><name>Equals</name></member>
      <member refid="classarrow_1_1util_1_1_equality_comparable_1a1a7ff2c6f720209bc960524c47ad0535" prot="public" virt="non-virtual"><scope>arrow::util::EqualityComparable</scope><name>operator!=</name></member>
      <member refid="classarrow_1_1util_1_1_equality_comparable_1ac0e8ec25e77ece923689ee31c389200e" prot="public" virt="non-virtual"><scope>arrow::util::EqualityComparable</scope><name>operator==</name></member>
      <member refid="classarrow_1_1util_1_1_equality_comparable_1a14c5ed61e030855eef29edebc6355806" prot="public" virt="non-virtual"><scope>arrow::util::EqualityComparable</scope><name>~EqualityComparable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
