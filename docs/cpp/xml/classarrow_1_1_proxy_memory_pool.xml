<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_proxy_memory_pool" kind="class" language="C++" prot="public">
    <compoundname>arrow::ProxyMemoryPool</compoundname>
    <basecompoundref refid="classarrow_1_1_memory_pool" prot="public" virt="non-virtual">arrow::MemoryPool</basecompoundref>
    <includes refid="memory__pool_8h" local="no">arrow/memory_pool.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classarrow_1_1_proxy_memory_pool_1a88aee7b2fe055f752cd98d20f4b51371" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; ProxyMemoryPoolImpl &gt;</type>
        <definition>std::unique_ptr&lt;ProxyMemoryPoolImpl&gt; arrow::ProxyMemoryPool::impl_</definition>
        <argsstring></argsstring>
        <name>impl_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/memory_pool.h" line="149" column="1" bodyfile="/arrow/cpp/src/arrow/memory_pool.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1_proxy_memory_pool_1ad684ce3c78a4d2b4944fa247ec532ebd" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::ProxyMemoryPool::ProxyMemoryPool</definition>
        <argsstring>(MemoryPool *pool)</argsstring>
        <name>ProxyMemoryPool</name>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/memory_pool.h" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_proxy_memory_pool_1a9c60f32eeb5a4cdd773b3b6acad219b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::ProxyMemoryPool::~ProxyMemoryPool</definition>
        <argsstring>() override</argsstring>
        <name>~ProxyMemoryPool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/memory_pool.h" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_proxy_memory_pool_1a335a8650da63a1ebf8ecbdf692e512b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::ProxyMemoryPool::Allocate</definition>
        <argsstring>(int64_t size, uint8_t **out) override</argsstring>
        <name>Allocate</name>
        <reimplements refid="classarrow_1_1_memory_pool_1afa452b21a4d401403cc509cc50a384f9">Allocate</reimplements>
        <param>
          <type>int64_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>uint8_t **</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Allocate a new memory region of at least size bytes. </para>        </briefdescription>
        <detaileddescription>
<para>The allocated region shall be 64-byte aligned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/memory_pool.h" line="136" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_proxy_memory_pool_1a6e21a87edb6fac307950ba03900ea5cc" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::ProxyMemoryPool::Reallocate</definition>
        <argsstring>(int64_t old_size, int64_t new_size, uint8_t **ptr) override</argsstring>
        <name>Reallocate</name>
        <reimplements refid="classarrow_1_1_memory_pool_1af64bda5eccc8fa42ce9ae0aba1ad9077">Reallocate</reimplements>
        <param>
          <type>int64_t</type>
          <declname>old_size</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>new_size</declname>
        </param>
        <param>
          <type>uint8_t **</type>
          <declname>ptr</declname>
        </param>
        <briefdescription>
<para>Resize an already allocated memory section. </para>        </briefdescription>
        <detaileddescription>
<para>As by default most default allocators on a platform don&apos;t support aligned reallocation, this function can involve a copy of the underlying data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/memory_pool.h" line="137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_proxy_memory_pool_1ac93a0a8e3f1c5274ecee4d59499a6888" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void arrow::ProxyMemoryPool::Free</definition>
        <argsstring>(uint8_t *buffer, int64_t size) override</argsstring>
        <name>Free</name>
        <reimplements refid="classarrow_1_1_memory_pool_1a5a45c822a4ca7b3d8387501acfa69911">Free</reimplements>
        <param>
          <type>uint8_t *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Free an allocated region. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the start of the allocated memory region </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>Allocated size located at buffer. An allocator implementation may use this for tracking the amount of allocated bytes as well as for faster deallocation if supported by its backend. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/memory_pool.h" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_proxy_memory_pool_1ae067aaf2cbe1dd6ea54ec01d835131cc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int64_t</type>
        <definition>int64_t arrow::ProxyMemoryPool::bytes_allocated</definition>
        <argsstring>() const override</argsstring>
        <name>bytes_allocated</name>
        <reimplements refid="classarrow_1_1_memory_pool_1abd12cd4bfb8ce8afcfc7a25d0293cd85">bytes_allocated</reimplements>
        <briefdescription>
<para>The number of bytes that were allocated and not yet free&apos;d through this allocator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/memory_pool.h" line="141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_proxy_memory_pool_1a0369b487efeb564ff40ed1101d86e8ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>int64_t</type>
        <definition>int64_t arrow::ProxyMemoryPool::max_memory</definition>
        <argsstring>() const override</argsstring>
        <name>max_memory</name>
        <reimplements refid="classarrow_1_1_memory_pool_1a4d1fe541389b4afd4d49d727dc3088f0">max_memory</reimplements>
        <briefdescription>
<para>Return peak memory allocation in this memory pool. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Maximum bytes allocated. If not known (or not implemented), returns -1 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/memory_pool.h" line="143" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_proxy_memory_pool_1ac2eefc2b95c22f393fb6212954737c3f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string arrow::ProxyMemoryPool::backend_name</definition>
        <argsstring>() const override</argsstring>
        <name>backend_name</name>
        <reimplements refid="classarrow_1_1_memory_pool_1a60f07985878503603da92c64ab4ba03c">backend_name</reimplements>
        <briefdescription>
<para>The name of the backend used by this <ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> (e.g. &quot;system&quot; or &quot;jemalloc&quot;);. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/memory_pool.h" line="145" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Derived class for memory allocation. </para>    </briefdescription>
    <detaileddescription>
<para>Tracks the number of bytes and maximum memory allocated through its direct calls. Actual allocation is delegated to <ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> class. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="3628">
        <label>arrow::MemoryPool</label>
        <link refid="classarrow_1_1_memory_pool"/>
      </node>
      <node id="3627">
        <label>arrow::ProxyMemoryPool</label>
        <link refid="classarrow_1_1_proxy_memory_pool"/>
        <childnode refid="3628" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3630">
        <label>arrow::MemoryPool</label>
        <link refid="classarrow_1_1_memory_pool"/>
      </node>
      <node id="3629">
        <label>arrow::ProxyMemoryPool</label>
        <link refid="classarrow_1_1_proxy_memory_pool"/>
        <childnode refid="3630" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/memory_pool.h" line="131" column="1" bodyfile="/arrow/cpp/src/arrow/memory_pool.h" bodystart="131" bodyend="150"/>
    <listofallmembers>
      <member refid="classarrow_1_1_proxy_memory_pool_1a335a8650da63a1ebf8ecbdf692e512b5" prot="public" virt="virtual"><scope>arrow::ProxyMemoryPool</scope><name>Allocate</name></member>
      <member refid="classarrow_1_1_proxy_memory_pool_1ac2eefc2b95c22f393fb6212954737c3f" prot="public" virt="virtual"><scope>arrow::ProxyMemoryPool</scope><name>backend_name</name></member>
      <member refid="classarrow_1_1_proxy_memory_pool_1ae067aaf2cbe1dd6ea54ec01d835131cc" prot="public" virt="virtual"><scope>arrow::ProxyMemoryPool</scope><name>bytes_allocated</name></member>
      <member refid="classarrow_1_1_memory_pool_1a844c3276d2f14daf186ceb9585fe3581" prot="public" virt="non-virtual"><scope>arrow::ProxyMemoryPool</scope><name>CreateDefault</name></member>
      <member refid="classarrow_1_1_proxy_memory_pool_1ac93a0a8e3f1c5274ecee4d59499a6888" prot="public" virt="virtual"><scope>arrow::ProxyMemoryPool</scope><name>Free</name></member>
      <member refid="classarrow_1_1_proxy_memory_pool_1a88aee7b2fe055f752cd98d20f4b51371" prot="private" virt="non-virtual"><scope>arrow::ProxyMemoryPool</scope><name>impl_</name></member>
      <member refid="classarrow_1_1_proxy_memory_pool_1a0369b487efeb564ff40ed1101d86e8ad" prot="public" virt="virtual"><scope>arrow::ProxyMemoryPool</scope><name>max_memory</name></member>
      <member refid="classarrow_1_1_memory_pool_1aa4b251669cc9858c40cffda6caedde75" prot="protected" virt="non-virtual"><scope>arrow::ProxyMemoryPool</scope><name>MemoryPool</name></member>
      <member refid="classarrow_1_1_proxy_memory_pool_1ad684ce3c78a4d2b4944fa247ec532ebd" prot="public" virt="non-virtual"><scope>arrow::ProxyMemoryPool</scope><name>ProxyMemoryPool</name></member>
      <member refid="classarrow_1_1_proxy_memory_pool_1a6e21a87edb6fac307950ba03900ea5cc" prot="public" virt="virtual"><scope>arrow::ProxyMemoryPool</scope><name>Reallocate</name></member>
      <member refid="classarrow_1_1_memory_pool_1a3176bcc9789be165f1af2217d144b02a" prot="public" virt="virtual"><scope>arrow::ProxyMemoryPool</scope><name>~MemoryPool</name></member>
      <member refid="classarrow_1_1_proxy_memory_pool_1a9c60f32eeb5a4cdd773b3b6acad219b7" prot="public" virt="non-virtual"><scope>arrow::ProxyMemoryPool</scope><name>~ProxyMemoryPool</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
