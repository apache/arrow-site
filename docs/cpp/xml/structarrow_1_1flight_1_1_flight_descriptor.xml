<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structarrow_1_1flight_1_1_flight_descriptor" kind="struct" language="C++" prot="public">
    <compoundname>arrow::flight::FlightDescriptor</compoundname>
    <includes refid="arrow_2flight_2types_8h" local="no">arrow/flight/types.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="structarrow_1_1flight_1_1_flight_descriptor_1a86465cf81f2b46fd5e80b7082dec3962" prot="public" static="no">
        <name>DescriptorType</name>
        <enumvalue id="structarrow_1_1flight_1_1_flight_descriptor_1a86465cf81f2b46fd5e80b7082dec3962a9688233f333a17067402bace51ea3ad3" prot="public">
          <name>UNKNOWN</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structarrow_1_1flight_1_1_flight_descriptor_1a86465cf81f2b46fd5e80b7082dec3962a0df0c0ebb47fafcad1af1cca9ee87e58" prot="public">
          <name>PATH</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Unused. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="structarrow_1_1flight_1_1_flight_descriptor_1a86465cf81f2b46fd5e80b7082dec3962a0614d8795bf553f8063af0331125f97e" prot="public">
          <name>CMD</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>Named path identifying a dataset. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="181" column="1" bodyfile="/arrow/cpp/src/arrow/flight/types.h" bodystart="181" bodyend="185"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structarrow_1_1flight_1_1_flight_descriptor_1aabfcaa722ae6b362ee3be72273ea79ab" prot="public" static="no" mutable="no">
        <type><ref refid="structarrow_1_1flight_1_1_flight_descriptor_1a86465cf81f2b46fd5e80b7082dec3962" kindref="member">DescriptorType</ref></type>
        <definition>DescriptorType arrow::flight::FlightDescriptor::type</definition>
        <argsstring></argsstring>
        <name>type</name>
        <briefdescription>
<para>The descriptor type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="188" column="1" bodyfile="/arrow/cpp/src/arrow/flight/types.h" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structarrow_1_1flight_1_1_flight_descriptor_1a5cc5791676902261e4985350fa9c92ed" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string arrow::flight::FlightDescriptor::cmd</definition>
        <argsstring></argsstring>
        <name>cmd</name>
        <briefdescription>
<para>Opaque value used to express a command. </para>        </briefdescription>
        <detaileddescription>
<para>Should only be defined when type is CMD </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="192" column="1" bodyfile="/arrow/cpp/src/arrow/flight/types.h" bodystart="192" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structarrow_1_1flight_1_1_flight_descriptor_1a5451422dd19bfec89dce2b62866c1e53" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; arrow::flight::FlightDescriptor::path</definition>
        <argsstring></argsstring>
        <name>path</name>
        <briefdescription>
<para>List of strings identifying a particular dataset. </para>        </briefdescription>
        <detaileddescription>
<para>Should only be defined when type is PATH </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="196" column="1" bodyfile="/arrow/cpp/src/arrow/flight/types.h" bodystart="196" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structarrow_1_1flight_1_1_flight_descriptor_1a3c7187a26270baba281c9c05678081c6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::flight::FlightDescriptor::Equals</definition>
        <argsstring>(const FlightDescriptor &amp;other) const</argsstring>
        <name>Equals</name>
        <param>
          <type>const <ref refid="structarrow_1_1flight_1_1_flight_descriptor" kindref="compound">FlightDescriptor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="198" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1flight_1_1_flight_descriptor_1af36068fccc9781e62ab31c6886458a61" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arrow::flight::FlightDescriptor::ToString</definition>
        <argsstring>() const</argsstring>
        <name>ToString</name>
        <briefdescription>
<para>Get a human-readable form of this descriptor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="201" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1flight_1_1_flight_descriptor_1acfcb275c37f99881485dc02fc1d6bd48" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::flight::FlightDescriptor::SerializeToString</definition>
        <argsstring>(std::string *out) const</argsstring>
        <name>SerializeToString</name>
        <param>
          <type>std::string *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Get the wire-format representation of this type. </para>        </briefdescription>
        <detaileddescription>
<para>Useful when interoperating with non-Flight systems (e.g. REST services) that may want to return Flight types. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="207" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structarrow_1_1flight_1_1_flight_descriptor_1add9e6636618f8147891a4105bde50158" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::flight::FlightDescriptor::Deserialize</definition>
        <argsstring>(const std::string &amp;serialized, FlightDescriptor *out)</argsstring>
        <name>Deserialize</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>serialized</declname>
        </param>
        <param>
          <type><ref refid="structarrow_1_1flight_1_1_flight_descriptor" kindref="compound">FlightDescriptor</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Parse the wire-format representation of this type. </para>        </briefdescription>
        <detaileddescription>
<para>Useful when interoperating with non-Flight systems (e.g. REST services) that may want to return Flight types. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="213" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1flight_1_1_flight_descriptor_1a50c992a6e82ca12c696be3c4a0d221c6" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structarrow_1_1flight_1_1_flight_descriptor" kindref="compound">FlightDescriptor</ref></type>
        <definition>static FlightDescriptor arrow::flight::FlightDescriptor::Command</definition>
        <argsstring>(const std::string &amp;c)</argsstring>
        <name>Command</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="217" column="1" bodyfile="/arrow/cpp/src/arrow/flight/types.h" bodystart="217" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1flight_1_1_flight_descriptor_1aa8f8cc4c71c14a184bec9cad73ca5ed3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structarrow_1_1flight_1_1_flight_descriptor" kindref="compound">FlightDescriptor</ref></type>
        <definition>static FlightDescriptor arrow::flight::FlightDescriptor::Path</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;p)</argsstring>
        <name>Path</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="221" column="1" bodyfile="/arrow/cpp/src/arrow/flight/types.h" bodystart="221" bodyend="223"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structarrow_1_1flight_1_1_flight_descriptor_1a30fff3a8a1af621f04540d5a1a9e83a9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const FlightDescriptor &amp;left, const FlightDescriptor &amp;right)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structarrow_1_1flight_1_1_flight_descriptor" kindref="compound">FlightDescriptor</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1flight_1_1_flight_descriptor" kindref="compound">FlightDescriptor</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="225" column="1" bodyfile="/arrow/cpp/src/arrow/flight/types.h" bodystart="225" bodyend="227"/>
      </memberdef>
      <memberdef kind="friend" id="structarrow_1_1flight_1_1_flight_descriptor_1a1634868f6bb5ec7639e0f1ffda82b2aa" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const FlightDescriptor &amp;left, const FlightDescriptor &amp;right)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structarrow_1_1flight_1_1_flight_descriptor" kindref="compound">FlightDescriptor</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1flight_1_1_flight_descriptor" kindref="compound">FlightDescriptor</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="228" column="1" bodyfile="/arrow/cpp/src/arrow/flight/types.h" bodystart="228" bodyend="230"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A request to retrieve or generate a dataset. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/arrow/flight/types.h" line="180" column="1" bodyfile="/arrow/cpp/src/arrow/flight/types.h" bodystart="180" bodyend="231"/>
    <listofallmembers>
      <member refid="structarrow_1_1flight_1_1_flight_descriptor_1a5cc5791676902261e4985350fa9c92ed" prot="public" virt="non-virtual"><scope>arrow::flight::FlightDescriptor</scope><name>cmd</name></member>
      <member refid="structarrow_1_1flight_1_1_flight_descriptor_1a86465cf81f2b46fd5e80b7082dec3962a0614d8795bf553f8063af0331125f97e" prot="public" virt="non-virtual"><scope>arrow::flight::FlightDescriptor</scope><name>CMD</name></member>
      <member refid="structarrow_1_1flight_1_1_flight_descriptor_1a50c992a6e82ca12c696be3c4a0d221c6" prot="public" virt="non-virtual"><scope>arrow::flight::FlightDescriptor</scope><name>Command</name></member>
      <member refid="structarrow_1_1flight_1_1_flight_descriptor_1a86465cf81f2b46fd5e80b7082dec3962" prot="public" virt="non-virtual"><scope>arrow::flight::FlightDescriptor</scope><name>DescriptorType</name></member>
      <member refid="structarrow_1_1flight_1_1_flight_descriptor_1add9e6636618f8147891a4105bde50158" prot="public" virt="non-virtual"><scope>arrow::flight::FlightDescriptor</scope><name>Deserialize</name></member>
      <member refid="structarrow_1_1flight_1_1_flight_descriptor_1a3c7187a26270baba281c9c05678081c6" prot="public" virt="non-virtual"><scope>arrow::flight::FlightDescriptor</scope><name>Equals</name></member>
      <member refid="structarrow_1_1flight_1_1_flight_descriptor_1a1634868f6bb5ec7639e0f1ffda82b2aa" prot="public" virt="non-virtual"><scope>arrow::flight::FlightDescriptor</scope><name>operator!=</name></member>
      <member refid="structarrow_1_1flight_1_1_flight_descriptor_1a30fff3a8a1af621f04540d5a1a9e83a9" prot="public" virt="non-virtual"><scope>arrow::flight::FlightDescriptor</scope><name>operator==</name></member>
      <member refid="structarrow_1_1flight_1_1_flight_descriptor_1a5451422dd19bfec89dce2b62866c1e53" prot="public" virt="non-virtual"><scope>arrow::flight::FlightDescriptor</scope><name>path</name></member>
      <member refid="structarrow_1_1flight_1_1_flight_descriptor_1a86465cf81f2b46fd5e80b7082dec3962a0df0c0ebb47fafcad1af1cca9ee87e58" prot="public" virt="non-virtual"><scope>arrow::flight::FlightDescriptor</scope><name>PATH</name></member>
      <member refid="structarrow_1_1flight_1_1_flight_descriptor_1aa8f8cc4c71c14a184bec9cad73ca5ed3" prot="public" virt="non-virtual"><scope>arrow::flight::FlightDescriptor</scope><name>Path</name></member>
      <member refid="structarrow_1_1flight_1_1_flight_descriptor_1acfcb275c37f99881485dc02fc1d6bd48" prot="public" virt="non-virtual"><scope>arrow::flight::FlightDescriptor</scope><name>SerializeToString</name></member>
      <member refid="structarrow_1_1flight_1_1_flight_descriptor_1af36068fccc9781e62ab31c6886458a61" prot="public" virt="non-virtual"><scope>arrow::flight::FlightDescriptor</scope><name>ToString</name></member>
      <member refid="structarrow_1_1flight_1_1_flight_descriptor_1aabfcaa722ae6b362ee3be72273ea79ab" prot="public" virt="non-virtual"><scope>arrow::flight::FlightDescriptor</scope><name>type</name></member>
      <member refid="structarrow_1_1flight_1_1_flight_descriptor_1a86465cf81f2b46fd5e80b7082dec3962a9688233f333a17067402bace51ea3ad3" prot="public" virt="non-virtual"><scope>arrow::flight::FlightDescriptor</scope><name>UNKNOWN</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
