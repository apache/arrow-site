<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="benchmark__util_8h" kind="file" language="C++">
    <compoundname>benchmark_util.h</compoundname>
    <includes local="no">vector</includes>
    <includes local="yes">arrow/testing/gtest_util.h</includes>
    <includes refid="cpu__info_8h" local="yes">arrow/util/cpu_info.h</includes>
    <incdepgraph>
      <node id="2958">
        <label>cstdint</label>
      </node>
      <node id="2954">
        <label>/arrow/cpp/src/arrow/compute/benchmark_util.h</label>
        <link refid="benchmark__util_8h"/>
        <childnode refid="2955" relation="include">
        </childnode>
        <childnode refid="2956" relation="include">
        </childnode>
        <childnode refid="2957" relation="include">
        </childnode>
      </node>
      <node id="2959">
        <label>string</label>
      </node>
      <node id="2960">
        <label>arrow/util/visibility.h</label>
        <link refid="arrow_2util_2visibility_8h"/>
      </node>
      <node id="2955">
        <label>vector</label>
      </node>
      <node id="2956">
        <label>arrow/testing/gtest_util.h</label>
      </node>
      <node id="2957">
        <label>arrow/util/cpu_info.h</label>
        <link refid="cpu__info_8h"/>
        <childnode refid="2958" relation="include">
        </childnode>
        <childnode refid="2959" relation="include">
        </childnode>
        <childnode refid="2960" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="structarrow_1_1compute_1_1_benchmark_args_type" prot="public">arrow::compute::BenchmarkArgsType</innerclass>
    <innerclass refid="structarrow_1_1compute_1_1_regression_args" prot="public">arrow::compute::RegressionArgs</innerclass>
    <innernamespace refid="namespacearrow">arrow</innernamespace>
    <innernamespace refid="namespacearrow_1_1compute">arrow::compute</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;arrow/testing/gtest_util.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="cpu__info_8h" kindref="compound">arrow/util/cpu_info.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacearrow" kindref="compound">arrow</ref><sp/>{</highlight></codeline>
<codeline lineno="26" refid="namespacearrow_1_1compute" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">compute<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>internal::CpuInfo;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>CpuInfo*<sp/>cpu_info<sp/>=<sp/>CpuInfo::GetInstance();</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>kL1Size<sp/>=<sp/>cpu_info-&gt;CacheSize(CpuInfo::L1_CACHE);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>kL2Size<sp/>=<sp/>cpu_info-&gt;CacheSize(CpuInfo::L2_CACHE);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>kL3Size<sp/>=<sp/>cpu_info-&gt;CacheSize(CpuInfo::L3_CACHE);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>kCantFitInL3Size<sp/>=<sp/>kL3Size<sp/>*<sp/>4;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int64_t&gt;<sp/>kMemorySizes<sp/>=<sp/>{kL1Size,<sp/>kL2Size,<sp/>kL3Size,</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kCantFitInL3Size};</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Func&gt;</highlight></codeline>
<codeline lineno="39" refid="structarrow_1_1compute_1_1_benchmark_args_type" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structarrow_1_1compute_1_1_benchmark_args_type" kindref="compound">BenchmarkArgsType</ref>;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Pattern<sp/>matching<sp/>that<sp/>extracts<sp/>the<sp/>vector<sp/>element<sp/>type<sp/>of<sp/>Benchmark::Args()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Values&gt;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structarrow_1_1compute_1_1_benchmark_args_type" kindref="compound">BenchmarkArgsType</ref>&lt;benchmark::internal::Benchmark*<sp/>(</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>benchmark::internal::Benchmark::*)(const<sp/>std::vector&lt;Values&gt;&amp;)&gt;<sp/>{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>type<sp/>=<sp/>Values;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">};</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Benchmark<sp/>changed<sp/>its<sp/>parameter<sp/>type<sp/>between<sp/>releases<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="comment">//<sp/>int<sp/>to<sp/>int64_t.<sp/>As<sp/>it<sp/>doesn&apos;t<sp/>have<sp/>version<sp/>macros,<sp/>we<sp/>need</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>apply<sp/>C++<sp/>template<sp/>magic.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacearrow_1_1compute_1abcdcabf38ba21c6ca54c9c2630045926" kindref="member">ArgsType</ref><sp/>=</highlight></codeline>
<codeline lineno="52" refid="namespacearrow_1_1compute_1abcdcabf38ba21c6ca54c9c2630045926" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1compute_1_1_benchmark_args_type" kindref="compound">BenchmarkArgsType&lt;decltype(&amp;benchmark::internal::Benchmark::Args)&gt;::type</ref>;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54" refid="namespacearrow_1_1compute_1a471b198ae0c536b6f694f9ca76800cc9" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacearrow_1_1compute_1a471b198ae0c536b6f694f9ca76800cc9" kindref="member">BenchmarkSetArgsWithSizes</ref>(benchmark::internal::Benchmark*<sp/>bench,</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int64_t&gt;&amp;<sp/>sizes<sp/>=<sp/>kMemorySizes)<sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/>bench-&gt;Unit(benchmark::kMicrosecond);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>size<sp/>:<sp/>sizes)</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>nulls<sp/>:<sp/>std::vector&lt;ArgsType&gt;({0,<sp/>1,<sp/>10,<sp/>50}))</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bench-&gt;Args({</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="namespacearrow_1_1compute_1abcdcabf38ba21c6ca54c9c2630045926" kindref="member">ArgsType</ref></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(size),<sp/>nulls});</highlight></codeline>
<codeline lineno="61"><highlight class="normal">}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="namespacearrow_1_1compute_1a3e989a6765f48fe18e0febfa4c4e2006" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacearrow_1_1compute_1a3e989a6765f48fe18e0febfa4c4e2006" kindref="member">BenchmarkSetArgs</ref>(benchmark::internal::Benchmark*<sp/>bench)<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><ref refid="namespacearrow_1_1compute_1a471b198ae0c536b6f694f9ca76800cc9" kindref="member">BenchmarkSetArgsWithSizes</ref>(bench,<sp/>kMemorySizes);</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="namespacearrow_1_1compute_1a5200d700dfe799b541a272c3c05892c4" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="namespacearrow_1_1compute_1a5200d700dfe799b541a272c3c05892c4" kindref="member">RegressionSetArgs</ref>(benchmark::internal::Benchmark*<sp/>bench)<sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Regression<sp/>do<sp/>not<sp/>need<sp/>to<sp/>account<sp/>for<sp/>cache<sp/>hierarchy,<sp/>thus<sp/>optimize<sp/>for</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>best<sp/>case.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><ref refid="namespacearrow_1_1compute_1a471b198ae0c536b6f694f9ca76800cc9" kindref="member">BenchmarkSetArgsWithSizes</ref>(bench,<sp/>{kL1Size});</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">//<sp/>RAII<sp/>struct<sp/>to<sp/>handle<sp/>some<sp/>of<sp/>the<sp/>boilerplate<sp/>in<sp/>regression<sp/>benchmarks</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="structarrow_1_1compute_1_1_regression_args" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structarrow_1_1compute_1_1_regression_args" kindref="compound">RegressionArgs</ref><sp/>{</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>size<sp/>of<sp/>memory<sp/>tested<sp/>(per<sp/>iteration)<sp/>in<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="structarrow_1_1compute_1_1_regression_args_1a9468e01e61a9cc75801b40bc44c2bef6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/><ref refid="structarrow_1_1compute_1_1_regression_args_1a9468e01e61a9cc75801b40bc44c2bef6" kindref="member">size</ref>;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>proportion<sp/>of<sp/>nulls<sp/>in<sp/>generated<sp/>arrays</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79" refid="structarrow_1_1compute_1_1_regression_args_1aee6959d173f9e6d60e175e6a96783f5d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1compute_1_1_regression_args_1aee6959d173f9e6d60e175e6a96783f5d" kindref="member">null_proportion</ref>;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81" refid="structarrow_1_1compute_1_1_regression_args_1a85b7af9ec7cffc6980a9bb847caf74b3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1compute_1_1_regression_args_1a85b7af9ec7cffc6980a9bb847caf74b3" kindref="member">RegressionArgs</ref>(benchmark::State&amp;<sp/>state)</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>size(state.range(0)),</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>null_proportion(static_cast&lt;double&gt;(state.range(1))<sp/>/<sp/>100.0),</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>state_(state)<sp/>{}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86" refid="structarrow_1_1compute_1_1_regression_args_1aaac344d021757574c7a6f7be3d67821a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1compute_1_1_regression_args_1aaac344d021757574c7a6f7be3d67821a" kindref="member">~RegressionArgs</ref>()<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>state_.counters[</highlight><highlight class="stringliteral">&quot;size&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(size);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>state_.counters[</highlight><highlight class="stringliteral">&quot;null_percent&quot;</highlight><highlight class="normal">]<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">double</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(state_.range(1));</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>state_.SetBytesProcessed(state_.iterations()<sp/>*<sp/>size);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/>benchmark::State&amp;<sp/>state_;</highlight></codeline>
<codeline lineno="94"><highlight class="normal">};</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>compute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>arrow</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/arrow/cpp/src/arrow/compute/benchmark_util.h"/>
  </compounddef>
</doxygen>
