<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1ipc_1_1_record_batch_file_reader" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>arrow::ipc::RecordBatchFileReader</compoundname>
    <includes refid="arrow_2ipc_2reader_8h" local="no">arrow/ipc/reader.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_record_batch_file_reader_1a1ec8b7ef808ecf459109eec4578d3eda" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual arrow::ipc::RecordBatchFileReader::~RecordBatchFileReader</definition>
        <argsstring>()=default</argsstring>
        <name>~RecordBatchFileReader</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/reader.h" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_record_batch_file_reader_1a4ea846f0c45c7ae86dd81da1c21ed02f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt;</type>
        <definition>virtual std::shared_ptr&lt;Schema&gt; arrow::ipc::RecordBatchFileReader::schema</definition>
        <argsstring>() const =0</argsstring>
        <name>schema</name>
        <briefdescription>
<para>The schema read from the file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/reader.h" line="174" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_record_batch_file_reader_1a74ea326fbee08f5906dfb218900706ab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>int</type>
        <definition>virtual int arrow::ipc::RecordBatchFileReader::num_record_batches</definition>
        <argsstring>() const =0</argsstring>
        <name>num_record_batches</name>
        <briefdescription>
<para>Returns the number of record batches in the file. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/reader.h" line="177" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_record_batch_file_reader_1a8a0e42bdaf417dbffb5f36ca37178823" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespacearrow_1_1ipc_1aa5d7ec68a8c707271bab98af9bc0ac77" kindref="member">MetadataVersion</ref></type>
        <definition>virtual MetadataVersion arrow::ipc::RecordBatchFileReader::version</definition>
        <argsstring>() const =0</argsstring>
        <name>version</name>
        <briefdescription>
<para>Return the metadata version from the file metadata. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/reader.h" line="180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_record_batch_file_reader_1a8f203829465396657a0ebecdcbaea68e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::shared_ptr&lt; const <ref refid="classarrow_1_1_key_value_metadata" kindref="compound">KeyValueMetadata</ref> &gt;</type>
        <definition>virtual std::shared_ptr&lt;const KeyValueMetadata&gt; arrow::ipc::RecordBatchFileReader::metadata</definition>
        <argsstring>() const =0</argsstring>
        <name>metadata</name>
        <briefdescription>
<para>Return the contents of the custom_metadata field from the file&apos;s Footer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/reader.h" line="184" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_record_batch_file_reader_1abfd1fad49dc2fc795befd03b2024359b" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref> &gt; &gt;</type>
        <definition>virtual Result&lt;std::shared_ptr&lt;RecordBatch&gt; &gt; arrow::ipc::RecordBatchFileReader::ReadRecordBatch</definition>
        <argsstring>(int i)=0</argsstring>
        <name>ReadRecordBatch</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Read a particular record batch from the file. </para>        </briefdescription>
        <detaileddescription>
<para>Does not copy memory if the input source supports zero-copy.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i</parametername>
</parameternamelist>
<parameterdescription>
<para>the index of the record batch to return </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the read batch </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/reader.h" line="191" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_record_batch_file_reader_1a1965dcb875eaded071abe97db20feb4e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::ipc::RecordBatchFileReader::ReadRecordBatch</definition>
        <argsstring>(int i, std::shared_ptr&lt; RecordBatch &gt; *batch)</argsstring>
        <name>ReadRecordBatch</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref> &gt; *</type>
          <declname>batch</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/reader.h" line="194" column="1" bodyfile="/arrow/cpp/src/arrow/ipc/reader.h" bodystart="194" bodyend="196"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_record_batch_file_reader_1a0aea6c88ca401308475e96e72f3433f5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1ipc_1_1_record_batch_file_reader" kindref="compound">RecordBatchFileReader</ref> &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;RecordBatchFileReader&gt; &gt; arrow::ipc::RecordBatchFileReader::Open</definition>
        <argsstring>(io::RandomAccessFile *file, const IpcReadOptions &amp;options=IpcReadOptions::Defaults())</argsstring>
        <name>Open</name>
        <param>
          <type><ref refid="classarrow_1_1io_1_1_random_access_file" kindref="compound">io::RandomAccessFile</ref> *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1ipc_1_1_ipc_read_options" kindref="compound">IpcReadOptions</ref> &amp;</type>
          <declname>options</declname>
          <defval><ref refid="structarrow_1_1ipc_1_1_ipc_read_options_1a462535c293a55154c71c6a5666d71e17" kindref="member">IpcReadOptions::Defaults</ref>()</defval>
        </param>
        <briefdescription>
<para>Open a <ref refid="classarrow_1_1ipc_1_1_record_batch_file_reader" kindref="compound">RecordBatchFileReader</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>Open a file-like object that is assumed to be self-contained; i.e., the end of the file interface is the end of the Arrow file. Note that there can be any amount of data preceding the Arrow-formatted data, because we need only locate the end of the Arrow file stream to discover the metadata and then proceed to read the data into memory. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/reader.h" line="123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_record_batch_file_reader_1a01a15be3b2898c6c8c1e6c1466f39dd4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1ipc_1_1_record_batch_file_reader" kindref="compound">RecordBatchFileReader</ref> &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;RecordBatchFileReader&gt; &gt; arrow::ipc::RecordBatchFileReader::Open</definition>
        <argsstring>(io::RandomAccessFile *file, int64_t footer_offset, const IpcReadOptions &amp;options=IpcReadOptions::Defaults())</argsstring>
        <name>Open</name>
        <param>
          <type><ref refid="classarrow_1_1io_1_1_random_access_file" kindref="compound">io::RandomAccessFile</ref> *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>footer_offset</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1ipc_1_1_ipc_read_options" kindref="compound">IpcReadOptions</ref> &amp;</type>
          <declname>options</declname>
          <defval><ref refid="structarrow_1_1ipc_1_1_ipc_read_options_1a462535c293a55154c71c6a5666d71e17" kindref="member">IpcReadOptions::Defaults</ref>()</defval>
        </param>
        <briefdescription>
<para>Open a <ref refid="classarrow_1_1ipc_1_1_record_batch_file_reader" kindref="compound">RecordBatchFileReader</ref> If the file is embedded within some larger file or memory region, you can pass the absolute memory offset to the end of the file (which contains the metadata footer). </para>        </briefdescription>
        <detaileddescription>
<para>The metadata must have been written with memory offsets relative to the start of the containing file</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">file</parametername>
</parameternamelist>
<parameterdescription>
<para>the data source </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">footer_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>the position of the end of the Arrow file </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">options</parametername>
</parameternamelist>
<parameterdescription>
<para>options for IPC reading </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the returned reader </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/reader.h" line="137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_record_batch_file_reader_1a8588ab178da86959fd9e8759baf78005" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1ipc_1_1_record_batch_file_reader" kindref="compound">RecordBatchFileReader</ref> &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;RecordBatchFileReader&gt; &gt; arrow::ipc::RecordBatchFileReader::Open</definition>
        <argsstring>(const std::shared_ptr&lt; io::RandomAccessFile &gt; &amp;file, const IpcReadOptions &amp;options=IpcReadOptions::Defaults())</argsstring>
        <name>Open</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_random_access_file" kindref="compound">io::RandomAccessFile</ref> &gt; &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1ipc_1_1_ipc_read_options" kindref="compound">IpcReadOptions</ref> &amp;</type>
          <declname>options</declname>
          <defval><ref refid="structarrow_1_1ipc_1_1_ipc_read_options_1a462535c293a55154c71c6a5666d71e17" kindref="member">IpcReadOptions::Defaults</ref>()</defval>
        </param>
        <briefdescription>
<para>Version of Open that retains ownership of file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">file</parametername>
</parameternamelist>
<parameterdescription>
<para>the data source </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">options</parametername>
</parameternamelist>
<parameterdescription>
<para>options for IPC reading </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the returned reader </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/reader.h" line="146" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_record_batch_file_reader_1a2c4fd24d1b172be479d16a50ea16d2fb" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1ipc_1_1_record_batch_file_reader" kindref="compound">RecordBatchFileReader</ref> &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;RecordBatchFileReader&gt; &gt; arrow::ipc::RecordBatchFileReader::Open</definition>
        <argsstring>(const std::shared_ptr&lt; io::RandomAccessFile &gt; &amp;file, int64_t footer_offset, const IpcReadOptions &amp;options=IpcReadOptions::Defaults())</argsstring>
        <name>Open</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_random_access_file" kindref="compound">io::RandomAccessFile</ref> &gt; &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>footer_offset</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1ipc_1_1_ipc_read_options" kindref="compound">IpcReadOptions</ref> &amp;</type>
          <declname>options</declname>
          <defval><ref refid="structarrow_1_1ipc_1_1_ipc_read_options_1a462535c293a55154c71c6a5666d71e17" kindref="member">IpcReadOptions::Defaults</ref>()</defval>
        </param>
        <briefdescription>
<para>Version of Open that retains ownership of file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">file</parametername>
</parameternamelist>
<parameterdescription>
<para>the data source </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">footer_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>the position of the end of the Arrow file </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">options</parametername>
</parameternamelist>
<parameterdescription>
<para>options for IPC reading </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the returned reader </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/reader.h" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_record_batch_file_reader_1a4701900f6da57355e11aae761e715e66" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::ipc::RecordBatchFileReader::Open</definition>
        <argsstring>(const std::shared_ptr&lt; io::RandomAccessFile &gt; &amp;file, int64_t footer_offset, std::shared_ptr&lt; RecordBatchFileReader &gt; *out)</argsstring>
        <name>Open</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_random_access_file" kindref="compound">io::RandomAccessFile</ref> &gt; &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>footer_offset</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1ipc_1_1_record_batch_file_reader" kindref="compound">RecordBatchFileReader</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/reader.h" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_record_batch_file_reader_1ad3c50b410cf05f9d113d7b900a080298" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::ipc::RecordBatchFileReader::Open</definition>
        <argsstring>(const std::shared_ptr&lt; io::RandomAccessFile &gt; &amp;file, std::shared_ptr&lt; RecordBatchFileReader &gt; *out)</argsstring>
        <name>Open</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_random_access_file" kindref="compound">io::RandomAccessFile</ref> &gt; &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1ipc_1_1_record_batch_file_reader" kindref="compound">RecordBatchFileReader</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/reader.h" line="164" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_record_batch_file_reader_1a648bc4a85145c2b3c0c940c6f8e0f038" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::ipc::RecordBatchFileReader::Open</definition>
        <argsstring>(io::RandomAccessFile *file, int64_t footer_offset, std::shared_ptr&lt; RecordBatchFileReader &gt; *out)</argsstring>
        <name>Open</name>
        <param>
          <type><ref refid="classarrow_1_1io_1_1_random_access_file" kindref="compound">io::RandomAccessFile</ref> *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>footer_offset</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1ipc_1_1_record_batch_file_reader" kindref="compound">RecordBatchFileReader</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/reader.h" line="167" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_record_batch_file_reader_1aeb60714abda02d5f654986ec98752a07" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::ipc::RecordBatchFileReader::Open</definition>
        <argsstring>(io::RandomAccessFile *file, std::shared_ptr&lt; RecordBatchFileReader &gt; *out)</argsstring>
        <name>Open</name>
        <param>
          <type><ref refid="classarrow_1_1io_1_1_random_access_file" kindref="compound">io::RandomAccessFile</ref> *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1ipc_1_1_record_batch_file_reader" kindref="compound">RecordBatchFileReader</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/reader.h" line="170" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Reads the record batch file format. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/arrow/ipc/reader.h" line="112" column="1" bodyfile="/arrow/cpp/src/arrow/ipc/reader.h" bodystart="112" bodyend="197"/>
    <listofallmembers>
      <member refid="classarrow_1_1ipc_1_1_record_batch_file_reader_1a8f203829465396657a0ebecdcbaea68e" prot="public" virt="pure-virtual"><scope>arrow::ipc::RecordBatchFileReader</scope><name>metadata</name></member>
      <member refid="classarrow_1_1ipc_1_1_record_batch_file_reader_1a74ea326fbee08f5906dfb218900706ab" prot="public" virt="pure-virtual"><scope>arrow::ipc::RecordBatchFileReader</scope><name>num_record_batches</name></member>
      <member refid="classarrow_1_1ipc_1_1_record_batch_file_reader_1a0aea6c88ca401308475e96e72f3433f5" prot="public" virt="non-virtual"><scope>arrow::ipc::RecordBatchFileReader</scope><name>Open</name></member>
      <member refid="classarrow_1_1ipc_1_1_record_batch_file_reader_1a01a15be3b2898c6c8c1e6c1466f39dd4" prot="public" virt="non-virtual"><scope>arrow::ipc::RecordBatchFileReader</scope><name>Open</name></member>
      <member refid="classarrow_1_1ipc_1_1_record_batch_file_reader_1a8588ab178da86959fd9e8759baf78005" prot="public" virt="non-virtual"><scope>arrow::ipc::RecordBatchFileReader</scope><name>Open</name></member>
      <member refid="classarrow_1_1ipc_1_1_record_batch_file_reader_1a2c4fd24d1b172be479d16a50ea16d2fb" prot="public" virt="non-virtual"><scope>arrow::ipc::RecordBatchFileReader</scope><name>Open</name></member>
      <member refid="classarrow_1_1ipc_1_1_record_batch_file_reader_1a4701900f6da57355e11aae761e715e66" prot="public" virt="non-virtual"><scope>arrow::ipc::RecordBatchFileReader</scope><name>Open</name></member>
      <member refid="classarrow_1_1ipc_1_1_record_batch_file_reader_1ad3c50b410cf05f9d113d7b900a080298" prot="public" virt="non-virtual"><scope>arrow::ipc::RecordBatchFileReader</scope><name>Open</name></member>
      <member refid="classarrow_1_1ipc_1_1_record_batch_file_reader_1a648bc4a85145c2b3c0c940c6f8e0f038" prot="public" virt="non-virtual"><scope>arrow::ipc::RecordBatchFileReader</scope><name>Open</name></member>
      <member refid="classarrow_1_1ipc_1_1_record_batch_file_reader_1aeb60714abda02d5f654986ec98752a07" prot="public" virt="non-virtual"><scope>arrow::ipc::RecordBatchFileReader</scope><name>Open</name></member>
      <member refid="classarrow_1_1ipc_1_1_record_batch_file_reader_1abfd1fad49dc2fc795befd03b2024359b" prot="public" virt="pure-virtual"><scope>arrow::ipc::RecordBatchFileReader</scope><name>ReadRecordBatch</name></member>
      <member refid="classarrow_1_1ipc_1_1_record_batch_file_reader_1a1965dcb875eaded071abe97db20feb4e" prot="public" virt="non-virtual"><scope>arrow::ipc::RecordBatchFileReader</scope><name>ReadRecordBatch</name></member>
      <member refid="classarrow_1_1ipc_1_1_record_batch_file_reader_1a4ea846f0c45c7ae86dd81da1c21ed02f" prot="public" virt="pure-virtual"><scope>arrow::ipc::RecordBatchFileReader</scope><name>schema</name></member>
      <member refid="classarrow_1_1ipc_1_1_record_batch_file_reader_1a8a0e42bdaf417dbffb5f36ca37178823" prot="public" virt="pure-virtual"><scope>arrow::ipc::RecordBatchFileReader</scope><name>version</name></member>
      <member refid="classarrow_1_1ipc_1_1_record_batch_file_reader_1a1ec8b7ef808ecf459109eec4578d3eda" prot="public" virt="virtual"><scope>arrow::ipc::RecordBatchFileReader</scope><name>~RecordBatchFileReader</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
