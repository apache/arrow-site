<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="bit__util_8h" kind="file" language="C++">
    <compoundname>bit_util.h</compoundname>
    <includes local="no">endian.h</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">array</includes>
    <includes local="no">bitset</includes>
    <includes local="no">cassert</includes>
    <includes local="no">cmath</includes>
    <includes local="no">cstdint</includes>
    <includes local="no">cstring</includes>
    <includes local="no">limits</includes>
    <includes local="no">memory</includes>
    <includes local="no">string</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes refid="buffer_8h" local="yes">arrow/buffer.h</includes>
    <includes refid="result_8h" local="yes">arrow/result.h</includes>
    <includes refid="util_2compare_8h" local="yes">arrow/util/compare.h</includes>
    <includes refid="functional_8h" local="yes">arrow/util/functional.h</includes>
    <includes refid="macros_8h" local="yes">arrow/util/macros.h</includes>
    <includes refid="string__builder_8h" local="yes">arrow/util/string_builder.h</includes>
    <includes refid="string__view_8h" local="yes">arrow/util/string_view.h</includes>
    <includes refid="util_2type__traits_8h" local="yes">arrow/util/type_traits.h</includes>
    <includes refid="arrow_2util_2visibility_8h" local="yes">arrow/util/visibility.h</includes>
    <includedby refid="array_8h" local="yes">/arrow/cpp/src/arrow/array.h</includedby>
    <includedby refid="buffer__builder_8h" local="yes">/arrow/cpp/src/arrow/buffer_builder.h</includedby>
    <includedby refid="sum__internal_8h" local="yes">/arrow/cpp/src/arrow/compute/kernels/sum_internal.h</includedby>
    <includedby refid="take__internal_8h" local="yes">/arrow/cpp/src/arrow/compute/kernels/take_internal.h</includedby>
    <includedby refid="type__traits_8h" local="yes">/arrow/cpp/src/arrow/type_traits.h</includedby>
    <includedby refid="align__util_8h" local="yes">/arrow/cpp/src/arrow/util/align_util.h</includedby>
    <includedby refid="bit__stream__utils_8h" local="yes">/arrow/cpp/src/arrow/util/bit_stream_utils.h</includedby>
    <includedby refid="hashing_8h" local="yes">/arrow/cpp/src/arrow/util/hashing.h</includedby>
    <includedby refid="rle__encoding_8h" local="yes">/arrow/cpp/src/arrow/util/rle_encoding.h</includedby>
    <includedby refid="visitor__inline_8h" local="yes">/arrow/cpp/src/arrow/visitor_inline.h</includedby>
    <includedby refid="parquet_2platform_8h" local="yes">/arrow/cpp/src/parquet/platform.h</includedby>
    <incdepgraph>
      <node id="11833">
        <label>arrow/util/compare.h</label>
        <link refid="util_2compare_8h"/>
        <childnode refid="11822" relation="include">
        </childnode>
        <childnode refid="11824" relation="include">
        </childnode>
        <childnode refid="11825" relation="include">
        </childnode>
        <childnode refid="11831" relation="include">
        </childnode>
      </node>
      <node id="11821">
        <label>limits</label>
      </node>
      <node id="11819">
        <label>cstdint</label>
      </node>
      <node id="11827">
        <label>arrow/buffer.h</label>
        <link refid="buffer_8h"/>
        <childnode refid="11819" relation="include">
        </childnode>
        <childnode refid="11820" relation="include">
        </childnode>
        <childnode refid="11822" relation="include">
        </childnode>
        <childnode refid="11823" relation="include">
        </childnode>
        <childnode refid="11824" relation="include">
        </childnode>
        <childnode refid="11825" relation="include">
        </childnode>
        <childnode refid="11826" relation="include">
        </childnode>
        <childnode refid="11828" relation="include">
        </childnode>
        <childnode refid="11829" relation="include">
        </childnode>
        <childnode refid="11834" relation="include">
        </childnode>
        <childnode refid="11830" relation="include">
        </childnode>
        <childnode refid="11831" relation="include">
        </childnode>
        <childnode refid="11838" relation="include">
        </childnode>
        <childnode refid="11832" relation="include">
        </childnode>
      </node>
      <node id="11813">
        <label>endian.h</label>
      </node>
      <node id="11834">
        <label>arrow/status.h</label>
        <link refid="status_8h"/>
        <childnode refid="11820" relation="include">
        </childnode>
        <childnode refid="11835" relation="include">
        </childnode>
        <childnode refid="11822" relation="include">
        </childnode>
        <childnode refid="11823" relation="include">
        </childnode>
        <childnode refid="11825" relation="include">
        </childnode>
        <childnode refid="11833" relation="include">
        </childnode>
        <childnode refid="11831" relation="include">
        </childnode>
        <childnode refid="11836" relation="include">
        </childnode>
        <childnode refid="11832" relation="include">
        </childnode>
      </node>
      <node id="11842">
        <label>arrow/util/functional.h</label>
        <link refid="functional_8h"/>
        <childnode refid="11843" relation="include">
        </childnode>
        <childnode refid="11824" relation="include">
        </childnode>
        <childnode refid="11831" relation="include">
        </childnode>
      </node>
      <node id="11830">
        <label>arrow/type_fwd.h</label>
        <link refid="type__fwd_8h"/>
        <childnode refid="11822" relation="include">
        </childnode>
        <childnode refid="11823" relation="include">
        </childnode>
        <childnode refid="11826" relation="include">
        </childnode>
        <childnode refid="11831" relation="include">
        </childnode>
        <childnode refid="11832" relation="include">
        </childnode>
      </node>
      <node id="11818">
        <label>cmath</label>
      </node>
      <node id="11817">
        <label>cassert</label>
      </node>
      <node id="11823">
        <label>string</label>
      </node>
      <node id="11839">
        <label>arrow/vendored/string_view.hpp</label>
      </node>
      <node id="11837">
        <label>ostream</label>
      </node>
      <node id="11832">
        <label>arrow/util/visibility.h</label>
        <link refid="arrow_2util_2visibility_8h"/>
      </node>
      <node id="11828">
        <label>arrow/device.h</label>
        <link refid="device_8h"/>
        <childnode refid="11819" relation="include">
        </childnode>
        <childnode refid="11822" relation="include">
        </childnode>
        <childnode refid="11823" relation="include">
        </childnode>
        <childnode refid="11829" relation="include">
        </childnode>
        <childnode refid="11830" relation="include">
        </childnode>
        <childnode refid="11833" relation="include">
        </childnode>
        <childnode refid="11831" relation="include">
        </childnode>
        <childnode refid="11832" relation="include">
        </childnode>
      </node>
      <node id="11812">
        <label>/arrow/cpp/src/arrow/util/bit_util.h</label>
        <link refid="bit__util_8h"/>
        <childnode refid="11813" relation="include">
        </childnode>
        <childnode refid="11814" relation="include">
        </childnode>
        <childnode refid="11815" relation="include">
        </childnode>
        <childnode refid="11816" relation="include">
        </childnode>
        <childnode refid="11817" relation="include">
        </childnode>
        <childnode refid="11818" relation="include">
        </childnode>
        <childnode refid="11819" relation="include">
        </childnode>
        <childnode refid="11820" relation="include">
        </childnode>
        <childnode refid="11821" relation="include">
        </childnode>
        <childnode refid="11822" relation="include">
        </childnode>
        <childnode refid="11823" relation="include">
        </childnode>
        <childnode refid="11824" relation="include">
        </childnode>
        <childnode refid="11825" relation="include">
        </childnode>
        <childnode refid="11826" relation="include">
        </childnode>
        <childnode refid="11827" relation="include">
        </childnode>
        <childnode refid="11840" relation="include">
        </childnode>
        <childnode refid="11833" relation="include">
        </childnode>
        <childnode refid="11842" relation="include">
        </childnode>
        <childnode refid="11831" relation="include">
        </childnode>
        <childnode refid="11836" relation="include">
        </childnode>
        <childnode refid="11838" relation="include">
        </childnode>
        <childnode refid="11844" relation="include">
        </childnode>
        <childnode refid="11832" relation="include">
        </childnode>
      </node>
      <node id="11816">
        <label>bitset</label>
      </node>
      <node id="11843">
        <label>tuple</label>
      </node>
      <node id="11826">
        <label>vector</label>
      </node>
      <node id="11841">
        <label>new</label>
      </node>
      <node id="11825">
        <label>utility</label>
      </node>
      <node id="11838">
        <label>arrow/util/string_view.h</label>
        <link refid="string__view_8h"/>
        <childnode refid="11819" relation="include">
        </childnode>
        <childnode refid="11823" relation="include">
        </childnode>
        <childnode refid="11839" relation="include">
        </childnode>
      </node>
      <node id="11815">
        <label>array</label>
      </node>
      <node id="11829">
        <label>arrow/io/type_fwd.h</label>
        <link refid="io_2type__fwd_8h"/>
      </node>
      <node id="11835">
        <label>iosfwd</label>
      </node>
      <node id="11840">
        <label>arrow/result.h</label>
        <link refid="result_8h"/>
        <childnode refid="11841" relation="include">
        </childnode>
        <childnode refid="11823" relation="include">
        </childnode>
        <childnode refid="11824" relation="include">
        </childnode>
        <childnode refid="11825" relation="include">
        </childnode>
        <childnode refid="11834" relation="include">
        </childnode>
        <childnode refid="11833" relation="include">
        </childnode>
      </node>
      <node id="11824">
        <label>type_traits</label>
      </node>
      <node id="11814">
        <label>algorithm</label>
      </node>
      <node id="11820">
        <label>cstring</label>
      </node>
      <node id="11836">
        <label>arrow/util/string_builder.h</label>
        <link refid="string__builder_8h"/>
        <childnode refid="11822" relation="include">
        </childnode>
        <childnode refid="11837" relation="include">
        </childnode>
        <childnode refid="11823" relation="include">
        </childnode>
        <childnode refid="11825" relation="include">
        </childnode>
        <childnode refid="11832" relation="include">
        </childnode>
      </node>
      <node id="11822">
        <label>memory</label>
      </node>
      <node id="11831">
        <label>arrow/util/macros.h</label>
        <link refid="macros_8h"/>
        <childnode refid="11819" relation="include">
        </childnode>
      </node>
      <node id="11844">
        <label>arrow/util/type_traits.h</label>
        <link refid="util_2type__traits_8h"/>
        <childnode refid="11824" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="11980">
        <label>/arrow/cpp/src/parquet/bloom_filter.h</label>
        <link refid="bloom__filter_8h"/>
      </node>
      <node id="11856">
        <label>/arrow/cpp/src/arrow/array/dict_internal.h</label>
        <link refid="dict__internal_8h"/>
      </node>
      <node id="11985">
        <label>/arrow/cpp/src/parquet/api/writer.h</label>
        <link refid="parquet_2api_2writer_8h"/>
      </node>
      <node id="11896">
        <label>/arrow/cpp/src/gandiva/exported_funcs_registry.h</label>
        <link refid="exported__funcs__registry_8h"/>
        <childnode refid="11897" relation="include">
        </childnode>
      </node>
      <node id="11928">
        <label>/arrow/cpp/src/arrow/compute/kernels/filter.h</label>
        <link refid="arrow_2compute_2kernels_2filter_8h"/>
        <childnode refid="11915" relation="include">
        </childnode>
      </node>
      <node id="11895">
        <label>/arrow/cpp/src/gandiva/engine.h</label>
        <link refid="engine_8h"/>
        <childnode refid="11896" relation="include">
        </childnode>
        <childnode refid="11898" relation="include">
        </childnode>
        <childnode refid="11859" relation="include">
        </childnode>
      </node>
      <node id="11933">
        <label>/arrow/cpp/src/arrow/compute/kernels/sort_to_indices.h</label>
        <link refid="sort__to__indices_8h"/>
        <childnode refid="11915" relation="include">
        </childnode>
      </node>
      <node id="11984">
        <label>/arrow/cpp/src/parquet/column_writer.h</label>
        <link refid="column__writer_8h"/>
        <childnode refid="11985" relation="include">
        </childnode>
        <childnode refid="11986" relation="include">
        </childnode>
      </node>
      <node id="11944">
        <label>/arrow/cpp/src/arrow/buffer_builder.h</label>
        <link refid="buffer__builder_8h"/>
        <childnode refid="11945" relation="include">
        </childnode>
        <childnode refid="11848" relation="include">
        </childnode>
        <childnode refid="11909" relation="include">
        </childnode>
        <childnode refid="11912" relation="include">
        </childnode>
      </node>
      <node id="11917">
        <label>/arrow/cpp/src/arrow/compute/kernels/aggregate.h</label>
        <link refid="aggregate_8h"/>
        <childnode refid="11918" relation="include">
        </childnode>
      </node>
      <node id="12004">
        <label>/arrow/cpp/src/parquet/internal_file_decryptor.h</label>
        <link refid="internal__file__decryptor_8h"/>
        <childnode refid="11994" relation="include">
        </childnode>
      </node>
      <node id="11900">
        <label>/arrow/cpp/src/gandiva/pch.h</label>
        <link refid="gandiva_2pch_8h"/>
      </node>
      <node id="12000">
        <label>/arrow/cpp/src/parquet/murmur3.h</label>
        <link refid="murmur3_8h"/>
      </node>
      <node id="11878">
        <label>/arrow/cpp/src/gandiva/function_holder_registry.h</label>
        <link refid="function__holder__registry_8h"/>
      </node>
      <node id="11954">
        <label>/arrow/cpp/src/arrow/sparse_tensor.h</label>
        <link refid="sparse__tensor_8h"/>
        <childnode refid="11955" relation="include">
        </childnode>
        <childnode refid="11956" relation="include">
        </childnode>
        <childnode refid="11958" relation="include">
        </childnode>
        <childnode refid="11965" relation="include">
        </childnode>
        <childnode refid="11967" relation="include">
        </childnode>
      </node>
      <node id="11848">
        <label>/arrow/cpp/src/arrow/array/builder_binary.h</label>
        <link refid="builder__binary_8h"/>
        <childnode refid="11849" relation="include">
        </childnode>
        <childnode refid="11850" relation="include">
        </childnode>
      </node>
      <node id="11960">
        <label>/arrow/cpp/src/arrow/python/flight.h</label>
        <link refid="flight_8h"/>
      </node>
      <node id="11955">
        <label>/arrow/cpp/src/arrow/ipc/metadata_internal.h</label>
        <link refid="metadata__internal_8h"/>
      </node>
      <node id="11918">
        <label>/arrow/cpp/src/arrow/compute/kernels/sum_internal.h</label>
        <link refid="sum__internal_8h"/>
      </node>
      <node id="11910">
        <label>/arrow/cpp/src/arrow/array/builder_primitive.h</label>
        <link refid="builder__primitive_8h"/>
        <childnode refid="11908" relation="include">
        </childnode>
        <childnode refid="11911" relation="include">
        </childnode>
        <childnode refid="11850" relation="include">
        </childnode>
      </node>
      <node id="11996">
        <label>/arrow/cpp/src/parquet/encryption_internal.h</label>
        <link refid="encryption__internal_8h"/>
      </node>
      <node id="11983">
        <label>/arrow/cpp/src/parquet/stream_reader.h</label>
        <link refid="stream__reader_8h"/>
      </node>
      <node id="11859">
        <label>/arrow/cpp/src/gandiva/llvm_generator.h</label>
        <link refid="llvm__generator_8h"/>
      </node>
      <node id="11979">
        <label>/arrow/cpp/src/parquet/arrow/writer.h</label>
        <link refid="parquet_2arrow_2writer_8h"/>
      </node>
      <node id="11934">
        <label>/arrow/cpp/src/arrow/compute/kernels/take.h</label>
        <link refid="take_8h"/>
        <childnode refid="11915" relation="include">
        </childnode>
      </node>
      <node id="11898">
        <label>/arrow/cpp/src/gandiva/function_ir_builder.h</label>
        <link refid="function__ir__builder_8h"/>
        <childnode refid="11899" relation="include">
        </childnode>
      </node>
      <node id="11886">
        <label>/arrow/cpp/src/gandiva/function_registry_arithmetic.h</label>
        <link refid="function__registry__arithmetic_8h"/>
      </node>
      <node id="11858">
        <label>/arrow/cpp/src/gandiva/annotator.h</label>
        <link refid="annotator_8h"/>
        <childnode refid="11859" relation="include">
        </childnode>
      </node>
      <node id="11922">
        <label>/arrow/cpp/src/arrow/dataset/partition.h</label>
        <link refid="partition_8h"/>
        <childnode refid="11923" relation="include">
        </childnode>
        <childnode refid="11924" relation="include">
        </childnode>
      </node>
      <node id="11907">
        <label>/arrow/cpp/src/gandiva/execution_context.h</label>
        <link refid="execution__context_8h"/>
        <childnode refid="11866" relation="include">
        </childnode>
        <childnode refid="11859" relation="include">
        </childnode>
        <childnode refid="11881" relation="include">
        </childnode>
      </node>
      <node id="12007">
        <label>/arrow/cpp/src/parquet/column_page.h</label>
        <link refid="column__page_8h"/>
      </node>
      <node id="11963">
        <label>/arrow/cpp/src/arrow/python/iterators.h</label>
        <link refid="iterators_8h"/>
      </node>
      <node id="11973">
        <label>/arrow/cpp/src/parquet/platform.h</label>
        <link refid="parquet_2platform_8h"/>
        <childnode refid="11974" relation="include">
        </childnode>
        <childnode refid="11975" relation="include">
        </childnode>
        <childnode refid="11976" relation="include">
        </childnode>
        <childnode refid="11977" relation="include">
        </childnode>
        <childnode refid="11978" relation="include">
        </childnode>
        <childnode refid="11979" relation="include">
        </childnode>
        <childnode refid="11980" relation="include">
        </childnode>
        <childnode refid="11981" relation="include">
        </childnode>
        <childnode refid="11982" relation="include">
        </childnode>
        <childnode refid="11984" relation="include">
        </childnode>
        <childnode refid="11987" relation="include">
        </childnode>
        <childnode refid="11989" relation="include">
        </childnode>
        <childnode refid="11991" relation="include">
        </childnode>
        <childnode refid="11997" relation="include">
        </childnode>
        <childnode refid="11998" relation="include">
        </childnode>
        <childnode refid="11999" relation="include">
        </childnode>
        <childnode refid="12000" relation="include">
        </childnode>
        <childnode refid="12001" relation="include">
        </childnode>
        <childnode refid="11995" relation="include">
        </childnode>
        <childnode refid="12002" relation="include">
        </childnode>
        <childnode refid="12005" relation="include">
        </childnode>
        <childnode refid="12006" relation="include">
        </childnode>
        <childnode refid="11994" relation="include">
        </childnode>
        <childnode refid="12008" relation="include">
        </childnode>
      </node>
      <node id="11942">
        <label>/arrow/cpp/src/arrow/flight/pch.h</label>
        <link refid="arrow_2flight_2pch_8h"/>
      </node>
      <node id="11997">
        <label>/arrow/cpp/src/parquet/file_reader.h</label>
        <link refid="file__reader_8h"/>
        <childnode refid="11974" relation="include">
        </childnode>
        <childnode refid="11976" relation="include">
        </childnode>
        <childnode refid="11977" relation="include">
        </childnode>
        <childnode refid="11983" relation="include">
        </childnode>
      </node>
      <node id="11847">
        <label>/arrow/cpp/src/arrow/api.h</label>
        <link refid="api_8h"/>
      </node>
      <node id="11911">
        <label>/arrow/cpp/src/arrow/array/builder_time.h</label>
        <link refid="builder__time_8h"/>
        <childnode refid="11850" relation="include">
        </childnode>
      </node>
      <node id="11968">
        <label>/arrow/cpp/src/arrow/util/formatting.h</label>
        <link refid="formatting_8h"/>
      </node>
      <node id="11865">
        <label>/arrow/cpp/src/gandiva/decimal_type_util.h</label>
        <link refid="decimal__type__util_8h"/>
      </node>
      <node id="11937">
        <label>/arrow/cpp/src/arrow/python/extension_type.h</label>
        <link refid="python_2extension__type_8h"/>
      </node>
      <node id="11882">
        <label>/arrow/cpp/src/gandiva/function_registry_common.h</label>
        <link refid="function__registry__common_8h"/>
        <childnode refid="11883" relation="include">
        </childnode>
      </node>
      <node id="11876">
        <label>/arrow/cpp/src/gandiva/func_descriptor.h</label>
        <link refid="func__descriptor_8h"/>
        <childnode refid="11875" relation="include">
        </childnode>
        <childnode refid="11877" relation="include">
        </childnode>
      </node>
      <node id="11862">
        <label>/arrow/cpp/src/gandiva/filter_cache_key.h</label>
        <link refid="filter__cache__key_8h"/>
      </node>
      <node id="11971">
        <label>/arrow/cpp/src/arrow/util/bit_stream_utils.h</label>
        <link refid="bit__stream__utils_8h"/>
        <childnode refid="11972" relation="include">
        </childnode>
      </node>
      <node id="11926">
        <label>/arrow/cpp/src/arrow/dataset/file_parquet.h</label>
        <link refid="file__parquet_8h"/>
        <childnode refid="11921" relation="include">
        </childnode>
      </node>
      <node id="11961">
        <label>/arrow/cpp/src/arrow/python/inference.h</label>
        <link refid="inference_8h"/>
        <childnode refid="11957" relation="include">
        </childnode>
      </node>
      <node id="11890">
        <label>/arrow/cpp/src/gandiva/function_registry_string.h</label>
        <link refid="function__registry__string_8h"/>
      </node>
      <node id="11938">
        <label>/arrow/cpp/src/arrow/visitor_inline.h</label>
        <link refid="visitor__inline_8h"/>
        <childnode refid="11856" relation="include">
        </childnode>
        <childnode refid="11851" relation="include">
        </childnode>
      </node>
      <node id="11872">
        <label>/arrow/cpp/src/gandiva/projector_cache_key.h</label>
        <link refid="projector__cache__key_8h"/>
      </node>
      <node id="11999">
        <label>/arrow/cpp/src/parquet/metadata.h</label>
        <link refid="metadata_8h"/>
        <childnode refid="11974" relation="include">
        </childnode>
        <childnode refid="11977" relation="include">
        </childnode>
        <childnode refid="11997" relation="include">
        </childnode>
        <childnode refid="11998" relation="include">
        </childnode>
        <childnode refid="11990" relation="include">
        </childnode>
      </node>
      <node id="11950">
        <label>/arrow/cpp/src/arrow/compute/kernels/mean.h</label>
        <link refid="mean_8h"/>
        <childnode refid="11915" relation="include">
        </childnode>
      </node>
      <node id="11904">
        <label>/arrow/cpp/src/gandiva/compiled_expr.h</label>
        <link refid="compiled__expr_8h"/>
        <childnode refid="11859" relation="include">
        </childnode>
      </node>
      <node id="12005">
        <label>/arrow/cpp/src/parquet/schema_internal.h</label>
        <link refid="schema__internal_8h"/>
      </node>
      <node id="11916">
        <label>/arrow/cpp/src/arrow/compute/kernels/add.h</label>
        <link refid="add_8h"/>
      </node>
      <node id="11881">
        <label>/arrow/cpp/src/gandiva/to_date_holder.h</label>
        <link refid="to__date__holder_8h"/>
        <childnode refid="11878" relation="include">
        </childnode>
      </node>
      <node id="11956">
        <label>/arrow/cpp/src/arrow/python/numpy_convert.h</label>
        <link refid="numpy__convert_8h"/>
        <childnode refid="11957" relation="include">
        </childnode>
      </node>
      <node id="11940">
        <label>/arrow/cpp/src/arrow/pch.h</label>
        <link refid="arrow_2pch_8h"/>
        <childnode refid="11941" relation="include">
        </childnode>
        <childnode refid="11942" relation="include">
        </childnode>
        <childnode refid="11943" relation="include">
        </childnode>
        <childnode refid="11900" relation="include">
        </childnode>
      </node>
      <node id="11991">
        <label>/arrow/cpp/src/parquet/exception.h</label>
        <link refid="exception_8h"/>
        <childnode refid="11988" relation="include">
        </childnode>
        <childnode refid="11974" relation="include">
        </childnode>
        <childnode refid="11985" relation="include">
        </childnode>
        <childnode refid="11981" relation="include">
        </childnode>
        <childnode refid="11982" relation="include">
        </childnode>
        <childnode refid="11984" relation="include">
        </childnode>
        <childnode refid="11989" relation="include">
        </childnode>
        <childnode refid="11992" relation="include">
        </childnode>
        <childnode refid="11990" relation="include">
        </childnode>
        <childnode refid="11995" relation="include">
        </childnode>
        <childnode refid="11994" relation="include">
        </childnode>
      </node>
      <node id="11909">
        <label>/arrow/cpp/src/arrow/array/builder_nested.h</label>
        <link refid="builder__nested_8h"/>
        <childnode refid="11850" relation="include">
        </childnode>
      </node>
      <node id="11993">
        <label>/arrow/cpp/src/parquet/internal_file_encryptor.h</label>
        <link refid="internal__file__encryptor_8h"/>
        <childnode refid="11994" relation="include">
        </childnode>
      </node>
      <node id="11982">
        <label>/arrow/cpp/src/parquet/column_scanner.h</label>
        <link refid="column__scanner_8h"/>
        <childnode refid="11974" relation="include">
        </childnode>
      </node>
      <node id="11936">
        <label>/arrow/cpp/src/arrow/extension_type.h</label>
        <link refid="extension__type_8h"/>
        <childnode refid="11847" relation="include">
        </childnode>
        <childnode refid="11937" relation="include">
        </childnode>
        <childnode refid="11938" relation="include">
        </childnode>
      </node>
      <node id="11965">
        <label>/arrow/cpp/src/arrow/python/serialize.h</label>
        <link refid="serialize_8h"/>
        <childnode refid="11957" relation="include">
        </childnode>
        <childnode refid="11966" relation="include">
        </childnode>
      </node>
      <node id="11871">
        <label>/arrow/cpp/src/gandiva/projector.h</label>
        <link refid="gandiva_2projector_8h"/>
        <childnode refid="11872" relation="include">
        </childnode>
      </node>
      <node id="11931">
        <label>/arrow/cpp/src/arrow/compute/kernels/match.h</label>
        <link refid="match_8h"/>
      </node>
      <node id="11958">
        <label>/arrow/cpp/src/arrow/python/pyarrow.h</label>
        <link refid="pyarrow_8h"/>
        <childnode refid="11959" relation="include">
        </childnode>
      </node>
      <node id="11855">
        <label>/arrow/cpp/src/arrow/util/hashing.h</label>
        <link refid="hashing_8h"/>
        <childnode refid="11856" relation="include">
        </childnode>
      </node>
      <node id="11943">
        <label>/arrow/cpp/src/arrow/python/pch.h</label>
        <link refid="arrow_2python_2pch_8h"/>
      </node>
      <node id="11995">
        <label>/arrow/cpp/src/parquet/properties.h</label>
        <link refid="properties_8h"/>
        <childnode refid="11974" relation="include">
        </childnode>
        <childnode refid="11976" relation="include">
        </childnode>
        <childnode refid="11979" relation="include">
        </childnode>
        <childnode refid="11996" relation="include">
        </childnode>
        <childnode refid="11997" relation="include">
        </childnode>
        <childnode refid="11998" relation="include">
        </childnode>
        <childnode refid="11999" relation="include">
        </childnode>
        <childnode refid="11990" relation="include">
        </childnode>
      </node>
      <node id="11850">
        <label>/arrow/cpp/src/arrow/builder.h</label>
        <link refid="builder_8h"/>
        <childnode refid="11847" relation="include">
        </childnode>
        <childnode refid="11851" relation="include">
        </childnode>
        <childnode refid="11852" relation="include">
        </childnode>
        <childnode refid="11853" relation="include">
        </childnode>
        <childnode refid="11854" relation="include">
        </childnode>
        <childnode refid="11855" relation="include">
        </childnode>
        <childnode refid="11857" relation="include">
        </childnode>
      </node>
      <node id="11970">
        <label>/arrow/cpp/src/arrow/util/align_util.h</label>
        <link refid="align__util_8h"/>
      </node>
      <node id="11969">
        <label>/arrow/cpp/src/arrow/util/parsing.h</label>
        <link refid="parsing_8h"/>
      </node>
      <node id="11957">
        <label>/arrow/cpp/src/arrow/python/api.h</label>
        <link refid="python_2api_8h"/>
      </node>
      <node id="11894">
        <label>/arrow/cpp/src/gandiva/llvm_types.h</label>
        <link refid="llvm__types_8h"/>
        <childnode refid="11895" relation="include">
        </childnode>
        <childnode refid="11869" relation="include">
        </childnode>
        <childnode refid="11898" relation="include">
        </childnode>
        <childnode refid="11859" relation="include">
        </childnode>
        <childnode refid="11900" relation="include">
        </childnode>
      </node>
      <node id="11880">
        <label>/arrow/cpp/src/gandiva/random_generator_holder.h</label>
        <link refid="random__generator__holder_8h"/>
        <childnode refid="11878" relation="include">
        </childnode>
      </node>
      <node id="11974">
        <label>/arrow/cpp/src/parquet/api/reader.h</label>
        <link refid="parquet_2api_2reader_8h"/>
      </node>
      <node id="11932">
        <label>/arrow/cpp/src/arrow/compute/kernels/nth_to_indices.h</label>
        <link refid="nth__to__indices_8h"/>
        <childnode refid="11915" relation="include">
        </childnode>
      </node>
      <node id="11924">
        <label>/arrow/cpp/src/arrow/dataset/file_base.h</label>
        <link refid="file__base_8h"/>
        <childnode refid="11921" relation="include">
        </childnode>
        <childnode refid="11925" relation="include">
        </childnode>
        <childnode refid="11926" relation="include">
        </childnode>
      </node>
      <node id="11885">
        <label>/arrow/cpp/src/gandiva/native_function.h</label>
        <link refid="native__function_8h"/>
        <childnode refid="11875" relation="include">
        </childnode>
        <childnode refid="11883" relation="include">
        </childnode>
        <childnode refid="11886" relation="include">
        </childnode>
        <childnode refid="11882" relation="include">
        </childnode>
        <childnode refid="11887" relation="include">
        </childnode>
        <childnode refid="11888" relation="include">
        </childnode>
        <childnode refid="11889" relation="include">
        </childnode>
        <childnode refid="11890" relation="include">
        </childnode>
        <childnode refid="11891" relation="include">
        </childnode>
      </node>
      <node id="11905">
        <label>/arrow/cpp/src/gandiva/selection_vector_impl.h</label>
        <link refid="selection__vector__impl_8h"/>
      </node>
      <node id="11987">
        <label>/arrow/cpp/src/parquet/deprecated_io.h</label>
        <link refid="deprecated__io_8h"/>
        <childnode refid="11988" relation="include">
        </childnode>
      </node>
      <node id="11893">
        <label>/arrow/cpp/src/gandiva/jni/module_holder.h</label>
        <link refid="module__holder_8h"/>
      </node>
      <node id="11923">
        <label>/arrow/cpp/src/arrow/dataset/discovery.h</label>
        <link refid="discovery_8h"/>
        <childnode refid="11921" relation="include">
        </childnode>
      </node>
      <node id="11845">
        <label>/arrow/cpp/src/arrow/util/bit_util.h</label>
        <link refid="bit__util_8h"/>
        <childnode refid="11846" relation="include">
        </childnode>
        <childnode refid="11944" relation="include">
        </childnode>
        <childnode refid="11918" relation="include">
        </childnode>
        <childnode refid="11851" relation="include">
        </childnode>
        <childnode refid="11948" relation="include">
        </childnode>
        <childnode refid="11970" relation="include">
        </childnode>
        <childnode refid="11971" relation="include">
        </childnode>
        <childnode refid="11855" relation="include">
        </childnode>
        <childnode refid="11972" relation="include">
        </childnode>
        <childnode refid="11938" relation="include">
        </childnode>
        <childnode refid="11973" relation="include">
        </childnode>
      </node>
      <node id="11908">
        <label>/arrow/cpp/src/arrow/array/builder_dict.h</label>
        <link refid="builder__dict_8h"/>
        <childnode refid="11856" relation="include">
        </childnode>
        <childnode refid="11850" relation="include">
        </childnode>
      </node>
      <node id="11906">
        <label>/arrow/cpp/src/gandiva/simple_arena.h</label>
        <link refid="simple__arena_8h"/>
        <childnode refid="11907" relation="include">
        </childnode>
      </node>
      <node id="11873">
        <label>/arrow/cpp/src/gandiva/expression_registry.h</label>
        <link refid="expression__registry_8h"/>
      </node>
      <node id="11883">
        <label>/arrow/cpp/src/gandiva/function_registry.h</label>
        <link refid="function__registry_8h"/>
        <childnode refid="11869" relation="include">
        </childnode>
        <childnode refid="11859" relation="include">
        </childnode>
      </node>
      <node id="11930">
        <label>/arrow/cpp/src/arrow/compute/kernels/isin.h</label>
        <link refid="isin_8h"/>
        <childnode refid="11915" relation="include">
        </childnode>
      </node>
      <node id="11857">
        <label>/arrow/cpp/src/gandiva/arrow.h</label>
        <link refid="arrow_8h"/>
        <childnode refid="11858" relation="include">
        </childnode>
        <childnode refid="11860" relation="include">
        </childnode>
        <childnode refid="11864" relation="include">
        </childnode>
        <childnode refid="11865" relation="include">
        </childnode>
        <childnode refid="11866" relation="include">
        </childnode>
        <childnode refid="11868" relation="include">
        </childnode>
        <childnode refid="11869" relation="include">
        </childnode>
        <childnode refid="11870" relation="include">
        </childnode>
        <childnode refid="11873" relation="include">
        </childnode>
        <childnode refid="11874" relation="include">
        </childnode>
        <childnode refid="11861" relation="include">
        </childnode>
        <childnode refid="11862" relation="include">
        </childnode>
        <childnode refid="11876" relation="include">
        </childnode>
        <childnode refid="11882" relation="include">
        </childnode>
        <childnode refid="11884" relation="include">
        </childnode>
        <childnode refid="11892" relation="include">
        </childnode>
        <childnode refid="11893" relation="include">
        </childnode>
        <childnode refid="11894" relation="include">
        </childnode>
        <childnode refid="11901" relation="include">
        </childnode>
        <childnode refid="11877" relation="include">
        </childnode>
        <childnode refid="11871" relation="include">
        </childnode>
        <childnode refid="11872" relation="include">
        </childnode>
        <childnode refid="11902" relation="include">
        </childnode>
        <childnode refid="11903" relation="include">
        </childnode>
        <childnode refid="11905" relation="include">
        </childnode>
        <childnode refid="11906" relation="include">
        </childnode>
      </node>
      <node id="11864">
        <label>/arrow/cpp/src/gandiva/date_utils.h</label>
        <link refid="date__utils_8h"/>
      </node>
      <node id="11947">
        <label>/arrow/cpp/src/arrow/array/builder_adaptive.h</label>
        <link refid="builder__adaptive_8h"/>
        <childnode refid="11908" relation="include">
        </childnode>
        <childnode refid="11850" relation="include">
        </childnode>
      </node>
      <node id="11875">
        <label>/arrow/cpp/src/gandiva/dex.h</label>
        <link refid="dex_8h"/>
        <childnode refid="11867" relation="include">
        </childnode>
      </node>
      <node id="11863">
        <label>/arrow/cpp/src/gandiva/tree_expr_builder.h</label>
        <link refid="tree__expr__builder_8h"/>
      </node>
      <node id="11994">
        <label>/arrow/cpp/src/parquet/thrift_internal.h</label>
        <link refid="parquet_2thrift__internal_8h"/>
      </node>
      <node id="11915">
        <label>/arrow/cpp/src/arrow/compute/api.h</label>
        <link refid="compute_2api_8h"/>
        <childnode refid="11853" relation="include">
        </childnode>
      </node>
      <node id="11899">
        <label>/arrow/cpp/src/gandiva/decimal_ir.h</label>
        <link refid="decimal__ir_8h"/>
      </node>
      <node id="11981">
        <label>/arrow/cpp/src/parquet/column_reader.h</label>
        <link refid="column__reader_8h"/>
        <childnode refid="11974" relation="include">
        </childnode>
        <childnode refid="11977" relation="include">
        </childnode>
        <childnode refid="11982" relation="include">
        </childnode>
        <childnode refid="11983" relation="include">
        </childnode>
      </node>
      <node id="11877">
        <label>/arrow/cpp/src/gandiva/node.h</label>
        <link refid="node_8h"/>
        <childnode refid="11868" relation="include">
        </childnode>
        <childnode refid="11869" relation="include">
        </childnode>
        <childnode refid="11878" relation="include">
        </childnode>
        <childnode refid="11879" relation="include">
        </childnode>
        <childnode refid="11880" relation="include">
        </childnode>
        <childnode refid="11881" relation="include">
        </childnode>
      </node>
      <node id="11953">
        <label>/arrow/cpp/src/arrow/tensor.h</label>
        <link refid="tensor_8h"/>
        <childnode refid="11847" relation="include">
        </childnode>
        <childnode refid="11954" relation="include">
        </childnode>
      </node>
      <node id="11874">
        <label>/arrow/cpp/src/gandiva/field_descriptor.h</label>
        <link refid="field__descriptor_8h"/>
        <childnode refid="11875" relation="include">
        </childnode>
      </node>
      <node id="11945">
        <label>/arrow/cpp/src/arrow/array/builder_base.h</label>
        <link refid="builder__base_8h"/>
        <childnode refid="11946" relation="include">
        </childnode>
        <childnode refid="11947" relation="include">
        </childnode>
        <childnode refid="11848" relation="include">
        </childnode>
        <childnode refid="11849" relation="include">
        </childnode>
        <childnode refid="11908" relation="include">
        </childnode>
        <childnode refid="11909" relation="include">
        </childnode>
        <childnode refid="11910" relation="include">
        </childnode>
        <childnode refid="11911" relation="include">
        </childnode>
        <childnode refid="11912" relation="include">
        </childnode>
        <childnode refid="11850" relation="include">
        </childnode>
      </node>
      <node id="11946">
        <label>/arrow/cpp/src/arrow/adapters/orc/adapter_util.h</label>
        <link refid="adapter__util_8h"/>
      </node>
      <node id="11913">
        <label>/arrow/cpp/src/arrow/array/concatenate.h</label>
        <link refid="concatenate_8h"/>
        <childnode refid="11847" relation="include">
        </childnode>
      </node>
      <node id="11849">
        <label>/arrow/cpp/src/arrow/array/builder_decimal.h</label>
        <link refid="builder__decimal_8h"/>
        <childnode refid="11850" relation="include">
        </childnode>
      </node>
      <node id="12001">
        <label>/arrow/cpp/src/parquet/printer.h</label>
        <link refid="printer_8h"/>
        <childnode refid="11974" relation="include">
        </childnode>
      </node>
      <node id="11962">
        <label>/arrow/cpp/src/arrow/python/io.h</label>
        <link refid="arrow_2python_2io_8h"/>
        <childnode refid="11957" relation="include">
        </childnode>
      </node>
      <node id="11977">
        <label>/arrow/cpp/src/parquet/arrow/reader_internal.h</label>
        <link refid="reader__internal_8h"/>
      </node>
      <node id="11854">
        <label>/arrow/cpp/src/arrow/table_builder.h</label>
        <link refid="table__builder_8h"/>
        <childnode refid="11847" relation="include">
        </childnode>
      </node>
      <node id="11888">
        <label>/arrow/cpp/src/gandiva/function_registry_hash.h</label>
        <link refid="function__registry__hash_8h"/>
      </node>
      <node id="11889">
        <label>/arrow/cpp/src/gandiva/function_registry_math_ops.h</label>
        <link refid="function__registry__math__ops_8h"/>
      </node>
      <node id="11867">
        <label>/arrow/cpp/src/gandiva/bitmap_accumulator.h</label>
        <link refid="bitmap__accumulator_8h"/>
      </node>
      <node id="11952">
        <label>/arrow/cpp/src/arrow/dataset/dataset_internal.h</label>
        <link refid="dataset__internal_8h"/>
        <childnode refid="11927" relation="include">
        </childnode>
      </node>
      <node id="11966">
        <label>/arrow/cpp/src/arrow/python/deserialize.h</label>
        <link refid="deserialize_8h"/>
        <childnode refid="11957" relation="include">
        </childnode>
      </node>
      <node id="11948">
        <label>/arrow/cpp/src/arrow/type_traits.h</label>
        <link refid="type__traits_8h"/>
        <childnode refid="11945" relation="include">
        </childnode>
        <childnode refid="11848" relation="include">
        </childnode>
        <childnode refid="11856" relation="include">
        </childnode>
        <childnode refid="11846" relation="include">
        </childnode>
        <childnode refid="11949" relation="include">
        </childnode>
        <childnode refid="11950" relation="include">
        </childnode>
        <childnode refid="11918" relation="include">
        </childnode>
        <childnode refid="11851" relation="include">
        </childnode>
        <childnode refid="11940" relation="include">
        </childnode>
        <childnode refid="11951" relation="include">
        </childnode>
        <childnode refid="11853" relation="include">
        </childnode>
        <childnode refid="11953" relation="include">
        </childnode>
        <childnode refid="11968" relation="include">
        </childnode>
        <childnode refid="11855" relation="include">
        </childnode>
        <childnode refid="11969" relation="include">
        </childnode>
      </node>
      <node id="11927">
        <label>/arrow/cpp/src/arrow/dataset/scanner_internal.h</label>
        <link refid="scanner__internal_8h"/>
      </node>
      <node id="11914">
        <label>/arrow/cpp/src/arrow/compute/kernel.h</label>
        <link refid="kernel_8h"/>
        <childnode refid="11915" relation="include">
        </childnode>
        <childnode refid="11916" relation="include">
        </childnode>
        <childnode refid="11917" relation="include">
        </childnode>
        <childnode refid="11919" relation="include">
        </childnode>
        <childnode refid="11928" relation="include">
        </childnode>
        <childnode refid="11929" relation="include">
        </childnode>
        <childnode refid="11930" relation="include">
        </childnode>
        <childnode refid="11931" relation="include">
        </childnode>
        <childnode refid="11932" relation="include">
        </childnode>
        <childnode refid="11933" relation="include">
        </childnode>
        <childnode refid="11918" relation="include">
        </childnode>
        <childnode refid="11934" relation="include">
        </childnode>
        <childnode refid="11935" relation="include">
        </childnode>
        <childnode refid="11920" relation="include">
        </childnode>
      </node>
      <node id="11870">
        <label>/arrow/cpp/src/gandiva/expression.h</label>
        <link refid="gandiva_2expression_8h"/>
        <childnode refid="11860" relation="include">
        </childnode>
        <childnode refid="11868" relation="include">
        </childnode>
        <childnode refid="11869" relation="include">
        </childnode>
        <childnode refid="11871" relation="include">
        </childnode>
        <childnode refid="11863" relation="include">
        </childnode>
      </node>
      <node id="11925">
        <label>/arrow/cpp/src/arrow/dataset/file_ipc.h</label>
        <link refid="file__ipc_8h"/>
        <childnode refid="11921" relation="include">
        </childnode>
      </node>
      <node id="11935">
        <label>/arrow/cpp/src/arrow/compute/kernels/util_internal.h</label>
        <link refid="compute_2kernels_2util__internal_8h"/>
      </node>
      <node id="12002">
        <label>/arrow/cpp/src/parquet/schema.h</label>
        <link refid="schema_8h"/>
        <childnode refid="12003" relation="include">
        </childnode>
        <childnode refid="11977" relation="include">
        </childnode>
        <childnode refid="11978" relation="include">
        </childnode>
        <childnode refid="11981" relation="include">
        </childnode>
        <childnode refid="11982" relation="include">
        </childnode>
        <childnode refid="11992" relation="include">
        </childnode>
        <childnode refid="11998" relation="include">
        </childnode>
        <childnode refid="12004" relation="include">
        </childnode>
        <childnode refid="11993" relation="include">
        </childnode>
        <childnode refid="11999" relation="include">
        </childnode>
        <childnode refid="11990" relation="include">
        </childnode>
        <childnode refid="11995" relation="include">
        </childnode>
        <childnode refid="12005" relation="include">
        </childnode>
      </node>
      <node id="11919">
        <label>/arrow/cpp/src/arrow/compute/kernels/compare.h</label>
        <link refid="compute_2kernels_2compare_8h"/>
        <childnode refid="11915" relation="include">
        </childnode>
        <childnode refid="11920" relation="include">
        </childnode>
      </node>
      <node id="11851">
        <label>/arrow/cpp/src/arrow/compute/kernels/take_internal.h</label>
        <link refid="take__internal_8h"/>
      </node>
      <node id="11887">
        <label>/arrow/cpp/src/gandiva/function_registry_datetime.h</label>
        <link refid="function__registry__datetime_8h"/>
      </node>
      <node id="11920">
        <label>/arrow/cpp/src/arrow/dataset/filter.h</label>
        <link refid="arrow_2dataset_2filter_8h"/>
        <childnode refid="11921" relation="include">
        </childnode>
        <childnode refid="11922" relation="include">
        </childnode>
        <childnode refid="11927" relation="include">
        </childnode>
      </node>
      <node id="11860">
        <label>/arrow/cpp/src/gandiva/condition.h</label>
        <link refid="condition_8h"/>
        <childnode refid="11861" relation="include">
        </childnode>
        <childnode refid="11863" relation="include">
        </childnode>
      </node>
      <node id="11891">
        <label>/arrow/cpp/src/gandiva/function_registry_timestamp_arithmetic.h</label>
        <link refid="function__registry__timestamp__arithmetic_8h"/>
      </node>
      <node id="11901">
        <label>/arrow/cpp/src/gandiva/local_bitmaps_holder.h</label>
        <link refid="local__bitmaps__holder_8h"/>
        <childnode refid="11866" relation="include">
        </childnode>
      </node>
      <node id="11929">
        <label>/arrow/cpp/src/arrow/compute/kernels/hash.h</label>
        <link refid="hash_8h"/>
        <childnode refid="11915" relation="include">
        </childnode>
      </node>
      <node id="11998">
        <label>/arrow/cpp/src/parquet/file_writer.h</label>
        <link refid="file__writer_8h"/>
        <childnode refid="11985" relation="include">
        </childnode>
        <childnode refid="11986" relation="include">
        </childnode>
      </node>
      <node id="11846">
        <label>/arrow/cpp/src/arrow/array.h</label>
        <link refid="array_8h"/>
        <childnode refid="11847" relation="include">
        </childnode>
        <childnode refid="11848" relation="include">
        </childnode>
        <childnode refid="11908" relation="include">
        </childnode>
        <childnode refid="11909" relation="include">
        </childnode>
        <childnode refid="11910" relation="include">
        </childnode>
        <childnode refid="11912" relation="include">
        </childnode>
        <childnode refid="11913" relation="include">
        </childnode>
        <childnode refid="11856" relation="include">
        </childnode>
        <childnode refid="11914" relation="include">
        </childnode>
        <childnode refid="11930" relation="include">
        </childnode>
        <childnode refid="11931" relation="include">
        </childnode>
        <childnode refid="11935" relation="include">
        </childnode>
        <childnode refid="11936" relation="include">
        </childnode>
        <childnode refid="11939" relation="include">
        </childnode>
        <childnode refid="11940" relation="include">
        </childnode>
        <childnode refid="11855" relation="include">
        </childnode>
        <childnode refid="11938" relation="include">
        </childnode>
        <childnode refid="11857" relation="include">
        </childnode>
      </node>
      <node id="11989">
        <label>/arrow/cpp/src/parquet/encoding.h</label>
        <link refid="encoding_8h"/>
        <childnode refid="11990" relation="include">
        </childnode>
      </node>
      <node id="11903">
        <label>/arrow/cpp/src/gandiva/selection_vector.h</label>
        <link refid="selection__vector_8h"/>
        <childnode refid="11904" relation="include">
        </childnode>
        <childnode refid="11861" relation="include">
        </childnode>
        <childnode refid="11859" relation="include">
        </childnode>
        <childnode refid="11871" relation="include">
        </childnode>
        <childnode refid="11905" relation="include">
        </childnode>
      </node>
      <node id="11959">
        <label>/arrow/cpp/src/arrow/python/common.h</label>
        <link refid="arrow_2python_2common_8h"/>
        <childnode refid="11957" relation="include">
        </childnode>
        <childnode refid="11937" relation="include">
        </childnode>
        <childnode refid="11960" relation="include">
        </childnode>
        <childnode refid="11961" relation="include">
        </childnode>
        <childnode refid="11962" relation="include">
        </childnode>
        <childnode refid="11963" relation="include">
        </childnode>
        <childnode refid="11964" relation="include">
        </childnode>
      </node>
      <node id="11892">
        <label>/arrow/cpp/src/gandiva/in_holder.h</label>
        <link refid="in__holder_8h"/>
        <childnode refid="11875" relation="include">
        </childnode>
      </node>
      <node id="12006">
        <label>/arrow/cpp/src/parquet/statistics.h</label>
        <link refid="statistics_8h"/>
        <childnode refid="11974" relation="include">
        </childnode>
        <childnode refid="11985" relation="include">
        </childnode>
        <childnode refid="12007" relation="include">
        </childnode>
        <childnode refid="11994" relation="include">
        </childnode>
      </node>
      <node id="11978">
        <label>/arrow/cpp/src/parquet/arrow/schema.h</label>
        <link refid="arrow_2schema_8h"/>
        <childnode refid="11977" relation="include">
        </childnode>
      </node>
      <node id="11951">
        <label>/arrow/cpp/src/arrow/scalar.h</label>
        <link refid="scalar_8h"/>
        <childnode refid="11914" relation="include">
        </childnode>
        <childnode refid="11952" relation="include">
        </childnode>
        <childnode refid="11920" relation="include">
        </childnode>
        <childnode refid="11938" relation="include">
        </childnode>
      </node>
      <node id="12003">
        <label>/arrow/cpp/src/parquet/api/schema.h</label>
        <link refid="api_2schema_8h"/>
        <childnode refid="11974" relation="include">
        </childnode>
        <childnode refid="11985" relation="include">
        </childnode>
      </node>
      <node id="11897">
        <label>/arrow/cpp/src/gandiva/exported_funcs.h</label>
        <link refid="exported__funcs_8h"/>
      </node>
      <node id="11861">
        <label>/arrow/cpp/src/gandiva/filter.h</label>
        <link refid="gandiva_2filter_8h"/>
        <childnode refid="11862" relation="include">
        </childnode>
      </node>
      <node id="11964">
        <label>/arrow/cpp/src/arrow/python/python_to_arrow.h</label>
        <link refid="python__to__arrow_8h"/>
        <childnode refid="11957" relation="include">
        </childnode>
      </node>
      <node id="11879">
        <label>/arrow/cpp/src/gandiva/like_holder.h</label>
        <link refid="like__holder_8h"/>
        <childnode refid="11878" relation="include">
        </childnode>
      </node>
      <node id="11941">
        <label>/arrow/cpp/src/arrow/dataset/pch.h</label>
        <link refid="arrow_2dataset_2pch_8h"/>
      </node>
      <node id="11884">
        <label>/arrow/cpp/src/gandiva/function_signature.h</label>
        <link refid="function__signature_8h"/>
        <childnode refid="11873" relation="include">
        </childnode>
        <childnode refid="11882" relation="include">
        </childnode>
        <childnode refid="11885" relation="include">
        </childnode>
      </node>
      <node id="11949">
        <label>/arrow/cpp/src/arrow/compute/kernels/count.h</label>
        <link refid="count_8h"/>
        <childnode refid="11915" relation="include">
        </childnode>
      </node>
      <node id="11939">
        <label>/arrow/cpp/src/arrow/ipc/util.h</label>
        <link refid="ipc_2util_8h"/>
      </node>
      <node id="11990">
        <label>/arrow/cpp/src/parquet/pch.h</label>
        <link refid="parquet_2pch_8h"/>
      </node>
      <node id="11986">
        <label>/arrow/cpp/src/parquet/stream_writer.h</label>
        <link refid="stream__writer_8h"/>
        <childnode refid="11983" relation="include">
        </childnode>
      </node>
      <node id="11988">
        <label>/arrow/cpp/src/parquet/api/io.h</label>
        <link refid="parquet_2api_2io_8h"/>
        <childnode refid="11974" relation="include">
        </childnode>
        <childnode refid="11985" relation="include">
        </childnode>
      </node>
      <node id="12009">
        <label>/arrow/cpp/src/parquet/hasher.h</label>
        <link refid="hasher_8h"/>
        <childnode refid="11980" relation="include">
        </childnode>
        <childnode refid="12000" relation="include">
        </childnode>
      </node>
      <node id="11866">
        <label>/arrow/cpp/src/gandiva/eval_batch.h</label>
        <link refid="eval__batch_8h"/>
        <childnode refid="11858" relation="include">
        </childnode>
        <childnode refid="11867" relation="include">
        </childnode>
      </node>
      <node id="11852">
        <label>/arrow/cpp/src/arrow/python/type_traits.h</label>
        <link refid="python_2type__traits_8h"/>
      </node>
      <node id="11868">
        <label>/arrow/cpp/src/gandiva/expr_decomposer.h</label>
        <link refid="expr__decomposer_8h"/>
      </node>
      <node id="11992">
        <label>/arrow/cpp/src/parquet/encryption.h</label>
        <link refid="encryption_8h"/>
        <childnode refid="11993" relation="include">
        </childnode>
        <childnode refid="11995" relation="include">
        </childnode>
      </node>
      <node id="12008">
        <label>/arrow/cpp/src/parquet/types.h</label>
        <link refid="parquet_2types_8h"/>
        <childnode refid="11980" relation="include">
        </childnode>
        <childnode refid="12007" relation="include">
        </childnode>
        <childnode refid="11981" relation="include">
        </childnode>
        <childnode refid="11982" relation="include">
        </childnode>
        <childnode refid="11984" relation="include">
        </childnode>
        <childnode refid="11989" relation="include">
        </childnode>
        <childnode refid="11992" relation="include">
        </childnode>
        <childnode refid="11996" relation="include">
        </childnode>
        <childnode refid="12009" relation="include">
        </childnode>
        <childnode refid="11999" relation="include">
        </childnode>
        <childnode refid="12000" relation="include">
        </childnode>
        <childnode refid="11990" relation="include">
        </childnode>
        <childnode refid="11995" relation="include">
        </childnode>
        <childnode refid="12002" relation="include">
        </childnode>
        <childnode refid="12005" relation="include">
        </childnode>
        <childnode refid="12006" relation="include">
        </childnode>
        <childnode refid="11994" relation="include">
        </childnode>
      </node>
      <node id="11967">
        <label>/arrow/cpp/src/arrow/tensor/converter.h</label>
        <link refid="tensor_2converter_8h"/>
      </node>
      <node id="11869">
        <label>/arrow/cpp/src/gandiva/expr_validator.h</label>
        <link refid="expr__validator_8h"/>
      </node>
      <node id="11902">
        <label>/arrow/cpp/src/gandiva/regex_util.h</label>
        <link refid="regex__util_8h"/>
      </node>
      <node id="11853">
        <label>/arrow/cpp/src/arrow/stl.h</label>
        <link refid="stl_8h"/>
      </node>
      <node id="11921">
        <label>/arrow/cpp/src/arrow/dataset/api.h</label>
        <link refid="dataset_2api_8h"/>
      </node>
      <node id="11912">
        <label>/arrow/cpp/src/arrow/array/builder_union.h</label>
        <link refid="builder__union_8h"/>
        <childnode refid="11850" relation="include">
        </childnode>
      </node>
      <node id="11975">
        <label>/arrow/cpp/src/parquet/arrow/path_internal.h</label>
        <link refid="path__internal_8h"/>
      </node>
      <node id="11972">
        <label>/arrow/cpp/src/arrow/util/rle_encoding.h</label>
        <link refid="rle__encoding_8h"/>
      </node>
      <node id="11976">
        <label>/arrow/cpp/src/parquet/arrow/reader.h</label>
        <link refid="parquet_2arrow_2reader_8h"/>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacearrow">arrow</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="bit__util_8h_1a71d55e8a4b05576ac5c3ad1bd97e77b7" prot="public" static="no">
        <name>ARROW_LITTLE_ENDIAN</name>
        <initializer>1</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/bit_util.h" line="38" column="9" bodyfile="/arrow/cpp/src/arrow/util/bit_util.h" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bit__util_8h_1a582fbf29e9f0fbf6dd39031af11a8894" prot="public" static="no">
        <name>ARROW_BYTE_SWAP64</name>
        <initializer>__builtin_bswap64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/bit_util.h" line="51" column="10" bodyfile="/arrow/cpp/src/arrow/util/bit_util.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="bit__util_8h_1a4fabecc746b1f8c287ca27cebdfb3eee" prot="public" static="no">
        <name>ARROW_BYTE_SWAP32</name>
        <initializer>__builtin_bswap32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/bit_util.h" line="52" column="9" bodyfile="/arrow/cpp/src/arrow/util/bit_util.h" bodystart="52" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>_WIN32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ARROW_LITTLE_ENDIAN<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__APPLE__)<sp/>||<sp/>defined(__FreeBSD__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;machine/endian.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;endian.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__BYTE_ORDER__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;__BYTE_ORDER__<sp/>not<sp/>defined&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>__ORDER_LITTLE_ENDIAN__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>&quot;__ORDER_LITTLE_ENDIAN__<sp/>not<sp/>defined&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>__BYTE_ORDER__<sp/>==<sp/>__ORDER_LITTLE_ENDIAN__</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="bit__util_8h_1a71d55e8a4b05576ac5c3ad1bd97e77b7" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ARROW_LITTLE_ENDIAN<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ARROW_LITTLE_ENDIAN<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;intrin.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>intrinsic(_BitScanReverse)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>intrinsic(_BitScanForward)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ARROW_BYTE_SWAP64<sp/>_byteswap_uint64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ARROW_BYTE_SWAP32<sp/>_byteswap_ulong</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="bit__util_8h_1a582fbf29e9f0fbf6dd39031af11a8894" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ARROW_BYTE_SWAP64<sp/>__builtin_bswap64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="bit__util_8h_1a4fabecc746b1f8c287ca27cebdfb3eee" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ARROW_BYTE_SWAP32<sp/>__builtin_bswap32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;array&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;bitset&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;limits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="buffer_8h" kindref="compound">arrow/buffer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="result_8h" kindref="compound">arrow/result.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="util_2compare_8h" kindref="compound">arrow/util/compare.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="functional_8h" kindref="compound">arrow/util/functional.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="macros_8h" kindref="compound">arrow/util/macros.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="string__builder_8h" kindref="compound">arrow/util/string_builder.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="string__view_8h" kindref="compound">arrow/util/string_view.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="util_2type__traits_8h" kindref="compound">arrow/util/type_traits.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="arrow_2util_2visibility_8h" kindref="compound">arrow/util/visibility.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacearrow" kindref="compound">arrow</ref><sp/>{</highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="namespaceparquet_1a0d70b006a1f6feca958a1505b38a8cb7" kindref="member">MemoryPool</ref>;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref>;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">BooleanArray;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Integer&gt;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::make_unsigned&lt;Integer&gt;::type<sp/>as_unsigned(Integer<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">typename<sp/>std::make_unsigned&lt;Integer&gt;::type</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(x);</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacearrow_1_1_bit_util" kindref="compound">BitUtil</ref><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>number<sp/>of<sp/>set<sp/>bits<sp/>in<sp/>a<sp/>given<sp/>unsigned<sp/>byte<sp/>value,<sp/>pre-computed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Generated<sp/>with<sp/>the<sp/>following<sp/>Python<sp/>code</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//<sp/>output<sp/>=<sp/>&apos;static<sp/>constexpr<sp/>uint8_t<sp/>kBytePopcount[]<sp/>=<sp/>{{{0}}};&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="comment">//<sp/>popcounts<sp/>=<sp/>[str(bin(i).count(&apos;1&apos;))<sp/>for<sp/>i<sp/>in<sp/>range(0,<sp/>256)]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="comment">//<sp/>print(output.format(&apos;,<sp/>&apos;.join(popcounts)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>uint8_t<sp/>kBytePopcount[]<sp/>=<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>0,<sp/>1,<sp/>1,<sp/>2,<sp/>1,<sp/>2,<sp/>2,<sp/>3,<sp/>1,<sp/>2,<sp/>2,<sp/>3,<sp/>2,<sp/>3,<sp/>3,<sp/>4,<sp/>1,<sp/>2,<sp/>2,<sp/>3,<sp/>2,<sp/>3,<sp/>3,<sp/>4,<sp/>2,<sp/>3,<sp/>3,<sp/>4,<sp/>3,</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>4,<sp/>4,<sp/>5,<sp/>1,<sp/>2,<sp/>2,<sp/>3,<sp/>2,<sp/>3,<sp/>3,<sp/>4,<sp/>2,<sp/>3,<sp/>3,<sp/>4,<sp/>3,<sp/>4,<sp/>4,<sp/>5,<sp/>2,<sp/>3,<sp/>3,<sp/>4,<sp/>3,<sp/>4,<sp/>4,<sp/>5,<sp/>3,<sp/>4,</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>4,<sp/>5,<sp/>4,<sp/>5,<sp/>5,<sp/>6,<sp/>1,<sp/>2,<sp/>2,<sp/>3,<sp/>2,<sp/>3,<sp/>3,<sp/>4,<sp/>2,<sp/>3,<sp/>3,<sp/>4,<sp/>3,<sp/>4,<sp/>4,<sp/>5,<sp/>2,<sp/>3,<sp/>3,<sp/>4,<sp/>3,<sp/>4,<sp/>4,</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>5,<sp/>3,<sp/>4,<sp/>4,<sp/>5,<sp/>4,<sp/>5,<sp/>5,<sp/>6,<sp/>2,<sp/>3,<sp/>3,<sp/>4,<sp/>3,<sp/>4,<sp/>4,<sp/>5,<sp/>3,<sp/>4,<sp/>4,<sp/>5,<sp/>4,<sp/>5,<sp/>5,<sp/>6,<sp/>3,<sp/>4,<sp/>4,<sp/>5,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>4,<sp/>5,<sp/>5,<sp/>6,<sp/>4,<sp/>5,<sp/>5,<sp/>6,<sp/>5,<sp/>6,<sp/>6,<sp/>7,<sp/>1,<sp/>2,<sp/>2,<sp/>3,<sp/>2,<sp/>3,<sp/>3,<sp/>4,<sp/>2,<sp/>3,<sp/>3,<sp/>4,<sp/>3,<sp/>4,<sp/>4,<sp/>5,<sp/>2,</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>3,<sp/>3,<sp/>4,<sp/>3,<sp/>4,<sp/>4,<sp/>5,<sp/>3,<sp/>4,<sp/>4,<sp/>5,<sp/>4,<sp/>5,<sp/>5,<sp/>6,<sp/>2,<sp/>3,<sp/>3,<sp/>4,<sp/>3,<sp/>4,<sp/>4,<sp/>5,<sp/>3,<sp/>4,<sp/>4,<sp/>5,<sp/>4,<sp/>5,</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>5,<sp/>6,<sp/>3,<sp/>4,<sp/>4,<sp/>5,<sp/>4,<sp/>5,<sp/>5,<sp/>6,<sp/>4,<sp/>5,<sp/>5,<sp/>6,<sp/>5,<sp/>6,<sp/>6,<sp/>7,<sp/>2,<sp/>3,<sp/>3,<sp/>4,<sp/>3,<sp/>4,<sp/>4,<sp/>5,<sp/>3,<sp/>4,<sp/>4,</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>5,<sp/>4,<sp/>5,<sp/>5,<sp/>6,<sp/>3,<sp/>4,<sp/>4,<sp/>5,<sp/>4,<sp/>5,<sp/>5,<sp/>6,<sp/>4,<sp/>5,<sp/>5,<sp/>6,<sp/>5,<sp/>6,<sp/>6,<sp/>7,<sp/>3,<sp/>4,<sp/>4,<sp/>5,<sp/>4,<sp/>5,<sp/>5,<sp/>6,</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>4,<sp/>5,<sp/>5,<sp/>6,<sp/>5,<sp/>6,<sp/>6,<sp/>7,<sp/>4,<sp/>5,<sp/>5,<sp/>6,<sp/>5,<sp/>6,<sp/>6,<sp/>7,<sp/>5,<sp/>6,<sp/>6,<sp/>7,<sp/>6,<sp/>7,<sp/>7,<sp/>8};</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Bit-related<sp/>computations<sp/>on<sp/>integer<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>ceil<sp/>of<sp/>value/divisor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal">constexpr<sp/>int64_t<sp/>CeilDiv(int64_t<sp/>value,<sp/>int64_t<sp/>divisor)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(value<sp/>==<sp/>0)<sp/>?<sp/>0<sp/>:<sp/>1<sp/>+<sp/>(value<sp/>-<sp/>1)<sp/>/<sp/>divisor;</highlight></codeline>
<codeline lineno="120"><highlight class="normal">}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Return<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>needed<sp/>to<sp/>fit<sp/>the<sp/>given<sp/>number<sp/>of<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal">constexpr<sp/>int64_t<sp/>BytesForBits(int64_t<sp/>bits)<sp/>{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>formula<sp/>avoids<sp/>integer<sp/>overflow<sp/>on<sp/>very<sp/>large<sp/>`bits`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(bits<sp/>&gt;&gt;<sp/>3)<sp/>+<sp/>((bits<sp/>&amp;<sp/>7)<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="126"><highlight class="normal">}</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsPowerOf2(int64_t<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>(value<sp/>&amp;<sp/>(value<sp/>-<sp/>1))<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="130"><highlight class="normal">}</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsPowerOf2(uint64_t<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>(value<sp/>&amp;<sp/>(value<sp/>-<sp/>1))<sp/>==<sp/>0;</highlight></codeline>
<codeline lineno="134"><highlight class="normal">}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>smallest<sp/>power<sp/>of<sp/>two<sp/>that<sp/>contains<sp/>v.<sp/><sp/>If<sp/>v<sp/>is<sp/>already<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="comment">//<sp/>power<sp/>of<sp/>two,<sp/>it<sp/>is<sp/>returned<sp/>as<sp/>is.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>int64_t<sp/>NextPower2(int64_t<sp/>n)<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Taken<sp/>from</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>http://graphics.stanford.edu/~seander/bithacks.html#RoundUpPowerOf2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/>n--;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/>n<sp/>|=<sp/>n<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/>n<sp/>|=<sp/>n<sp/>&gt;&gt;<sp/>2;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>n<sp/>|=<sp/>n<sp/>&gt;&gt;<sp/>4;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>n<sp/>|=<sp/>n<sp/>&gt;&gt;<sp/>8;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>n<sp/>|=<sp/>n<sp/>&gt;&gt;<sp/>16;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/>n<sp/>|=<sp/>n<sp/>&gt;&gt;<sp/>32;</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/>n++;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>n;</highlight></codeline>
<codeline lineno="150"><highlight class="normal">}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsMultipleOf64(int64_t<sp/>n)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(n<sp/>&amp;<sp/>63)<sp/>==<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsMultipleOf8(int64_t<sp/>n)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(n<sp/>&amp;<sp/>7)<sp/>==<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>&apos;value&apos;<sp/>rounded<sp/>up<sp/>to<sp/>the<sp/>nearest<sp/>multiple<sp/>of<sp/>&apos;factor&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal">constexpr<sp/>int64_t<sp/>RoundUp(int64_t<sp/>value,<sp/>int64_t<sp/>factor)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>CeilDiv(value,<sp/>factor)<sp/>*<sp/>factor;</highlight></codeline>
<codeline lineno="159"><highlight class="normal">}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>&apos;value&apos;<sp/>rounded<sp/>down<sp/>to<sp/>the<sp/>nearest<sp/>multiple<sp/>of<sp/>&apos;factor&apos;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal">constexpr<sp/>int64_t<sp/>RoundDown(int64_t<sp/>value,<sp/>int64_t<sp/>factor)<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(value<sp/>/<sp/>factor)<sp/>*<sp/>factor;</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>&apos;value&apos;<sp/>rounded<sp/>up<sp/>to<sp/>the<sp/>nearest<sp/>multiple<sp/>of<sp/>&apos;factor&apos;<sp/>when<sp/>factor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">//<sp/>is<sp/>a<sp/>power<sp/>of<sp/>two.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>result<sp/>is<sp/>undefined<sp/>on<sp/>overflow,<sp/>i.e.<sp/>if<sp/>`value<sp/>&gt;<sp/>2**64<sp/>-<sp/>factor`,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"></highlight><highlight class="comment">//<sp/>since<sp/>we<sp/>cannot<sp/>return<sp/>the<sp/>correct<sp/>result<sp/>which<sp/>would<sp/>be<sp/>2**64.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal">constexpr<sp/>int64_t<sp/>RoundUpToPowerOf2(int64_t<sp/>value,<sp/>int64_t<sp/>factor)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DCHECK(value<sp/>&gt;=<sp/>0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DCHECK(IsPowerOf2(factor));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(value<sp/>+<sp/>(factor<sp/>-<sp/>1))<sp/>&amp;<sp/>~(factor<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal">constexpr<sp/>uint64_t<sp/>RoundUpToPowerOf2(uint64_t<sp/>value,<sp/>uint64_t<sp/>factor)<sp/>{</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DCHECK(IsPowerOf2(factor));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(value<sp/>+<sp/>(factor<sp/>-<sp/>1))<sp/>&amp;<sp/>~(factor<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="179"><highlight class="normal">}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal">constexpr<sp/>int64_t<sp/>RoundUpToMultipleOf8(int64_t<sp/>num)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RoundUpToPowerOf2(num,<sp/>8);<sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal">constexpr<sp/>int64_t<sp/>RoundUpToMultipleOf64(int64_t<sp/>num)<sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RoundUpToPowerOf2(num,<sp/>64);</highlight></codeline>
<codeline lineno="185"><highlight class="normal">}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>number<sp/>of<sp/>bytes<sp/>covering<sp/>a<sp/>sliced<sp/>bitmap.<sp/>Find<sp/>the<sp/>length</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">//<sp/>rounded<sp/>to<sp/>cover<sp/>full<sp/>bytes<sp/>on<sp/>both<sp/>extremities.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>example<sp/>represents<sp/>a<sp/>slice<sp/>(offset=10,<sp/>length=9)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight><highlight class="comment">//<sp/>0<sp/><sp/><sp/><sp/><sp/><sp/><sp/>8<sp/><sp/><sp/><sp/><sp/><sp/><sp/>16<sp/><sp/><sp/><sp/><sp/>24</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="comment">//<sp/>|-------|-------|------|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[<sp/><sp/><sp/><sp/><sp/><sp/><sp/>]<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(slice)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>]<sp/><sp/><sp/><sp/><sp/><sp/>(same<sp/>slice<sp/>aligned<sp/>to<sp/>bytes<sp/>bounds,<sp/>length=16)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>covering<sp/>bytes<sp/>is<sp/>the<sp/>length<sp/>(in<sp/>bytes)<sp/>of<sp/>this<sp/>new<sp/>aligned<sp/>slice.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal">constexpr<sp/>int64_t<sp/>CoveringBytes(int64_t<sp/>offset,<sp/>int64_t<sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(BitUtil::RoundUp(length<sp/>+<sp/>offset,<sp/>8)<sp/>-<sp/>BitUtil::RoundDown(offset,<sp/>8))<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="200"><highlight class="normal">}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>&apos;num_bits&apos;<sp/>least-significant<sp/>bits<sp/>of<sp/>&apos;v&apos;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/>TrailingBits(uint64_t<sp/>v,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_bits)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="macros_8h_1a6f2ee7ad52872edb915cf48e163ac99c" kindref="member">ARROW_PREDICT_FALSE</ref>(num_bits<sp/>==<sp/>0))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="macros_8h_1a6f2ee7ad52872edb915cf48e163ac99c" kindref="member">ARROW_PREDICT_FALSE</ref>(num_bits<sp/>&gt;=<sp/>64))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>n<sp/>=<sp/>64<sp/>-<sp/>num_bits;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(v<sp/>&lt;&lt;<sp/>n)<sp/>&gt;&gt;<sp/>n;</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CountLeadingZeros(uint32_t<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)<sp/>||<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>32;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(__builtin_clz(value));</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>index;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_BitScanReverse(&amp;index,<sp/>static_cast&lt;unsigned<sp/>long&gt;(value)))<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>31<sp/>-<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(index);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>32;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bitpos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(value<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>++bitpos;</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>32<sp/>-<sp/>bitpos;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CountLeadingZeros(uint64_t<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)<sp/>||<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>64;</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(__builtin_clzll(value));</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>index;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_BitScanReverse64(&amp;index,<sp/>value))<sp/>{<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>63<sp/>-<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(index);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>64;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bitpos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(value<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>value<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>++bitpos;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>64<sp/>-<sp/>bitpos;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal">}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CountTrailingZeros(uint32_t<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)<sp/>||<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>32;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(__builtin_ctzl(value));</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>index;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_BitScanForward(&amp;index,<sp/>value))<sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(index);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>32;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bitpos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value)<sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(value<sp/>&amp;<sp/>1<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++bitpos;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>bitpos<sp/>=<sp/>32;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bitpos;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal">}</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>CountTrailingZeros(uint64_t<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)<sp/>||<sp/>defined(__GNUC__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>64;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(__builtin_ctzll(value));</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(_MSC_VER)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>index;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(_BitScanForward64(&amp;index,<sp/>value))<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(index);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>64;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bitpos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value)<sp/>{</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(value<sp/>&amp;<sp/>1<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>value<sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++bitpos;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>bitpos<sp/>=<sp/>64;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bitpos;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal">}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>the<sp/>minimum<sp/>number<sp/>of<sp/>bits<sp/>needed<sp/>to<sp/>represent<sp/>an<sp/>unsigned<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>NumRequiredBits(uint64_t<sp/>x)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>64<sp/>-<sp/>CountLeadingZeros(x);<sp/>}</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Returns<sp/>ceil(log2(x)).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Log2(uint64_t<sp/>x)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>DCHECK_GT(x,<sp/>0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>NumRequiredBits(x<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="310"><highlight class="normal">}</highlight></codeline>
<codeline lineno="311"><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Byte-swap<sp/>16-bit,<sp/>32-bit<sp/>and<sp/>64-bit<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Swap<sp/>the<sp/>byte<sp/>order<sp/>(i.e.<sp/>endianness)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>int64_t<sp/>ByteSwap(int64_t<sp/>value)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="bit__util_8h_1a582fbf29e9f0fbf6dd39031af11a8894" kindref="member">ARROW_BYTE_SWAP64</ref>(value);<sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint64_t<sp/>ByteSwap(uint64_t<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="bit__util_8h_1a582fbf29e9f0fbf6dd39031af11a8894" kindref="member">ARROW_BYTE_SWAP64</ref>(value));</highlight></codeline>
<codeline lineno="320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>int32_t<sp/>ByteSwap(int32_t<sp/>value)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="bit__util_8h_1a4fabecc746b1f8c287ca27cebdfb3eee" kindref="member">ARROW_BYTE_SWAP32</ref>(value);<sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint32_t<sp/>ByteSwap(uint32_t<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="bit__util_8h_1a4fabecc746b1f8c287ca27cebdfb3eee" kindref="member">ARROW_BYTE_SWAP32</ref>(value));</highlight></codeline>
<codeline lineno="324"><highlight class="normal">}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>int16_t<sp/>ByteSwap(int16_t<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/>constexpr<sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>m<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(0xff);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(((value<sp/>&gt;&gt;<sp/>8)<sp/>&amp;<sp/>m)<sp/>|<sp/>((value<sp/>&amp;<sp/>m)<sp/>&lt;&lt;<sp/>8));</highlight></codeline>
<codeline lineno="328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>uint16_t<sp/>ByteSwap(uint16_t<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint16_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ByteSwap(static_cast&lt;int16_t&gt;(value)));</highlight></codeline>
<codeline lineno="331"><highlight class="normal">}</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Write<sp/>the<sp/>swapped<sp/>bytes<sp/>into<sp/>dst.<sp/>Src<sp/>and<sp/>dst<sp/>cannot<sp/>overlap.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ByteSwap(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>src,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>len)<sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(len)<sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>1:</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">int8_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(dst)<sp/>=<sp/>*reinterpret_cast&lt;const<sp/>int8_t*&gt;(src);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>2:</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">int16_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(dst)<sp/>=<sp/>ByteSwap(*reinterpret_cast&lt;const<sp/>int16_t*&gt;(src));</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>4:</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">int32_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(dst)<sp/>=<sp/>ByteSwap(*reinterpret_cast&lt;const<sp/>int32_t*&gt;(src));</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>8:</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">int64_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(dst)<sp/>=<sp/>ByteSwap(*reinterpret_cast&lt;const<sp/>int64_t*&gt;(src));</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>d<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">uint8_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(dst);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>s<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">uint8_t*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(src);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>len;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>d[i]<sp/>=<sp/>s[len<sp/>-<sp/>i<sp/>-<sp/>1];</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal">}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Convert<sp/>to<sp/>little/big<sp/>endian<sp/>format<sp/>from<sp/>the<sp/>machine&apos;s<sp/>native<sp/>endian<sp/>format.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>ARROW_LITTLE_ENDIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/>internal::EnableIfIsOneOf&lt;T,<sp/>int64_t,<sp/>uint64_t,<sp/>int32_t,</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t,<sp/>int16_t,<sp/>uint16_t&gt;&gt;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/>ToBigEndian(T<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ByteSwap(value);</highlight></codeline>
<codeline lineno="365"><highlight class="normal">}</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/>internal::EnableIfIsOneOf&lt;T,<sp/>int64_t,<sp/>uint64_t,<sp/>int32_t,</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t,<sp/>int16_t,<sp/>uint16_t&gt;&gt;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/>ToLittleEndian(T<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/>internal::EnableIfIsOneOf&lt;T,<sp/>int64_t,<sp/>uint64_t,<sp/>int32_t,</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t,<sp/>int16_t,<sp/>uint16_t&gt;&gt;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/>ToBigEndian(T<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="377"><highlight class="normal">}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/>internal::EnableIfIsOneOf&lt;T,<sp/>int64_t,<sp/>uint64_t,<sp/>int32_t,</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t,<sp/>int16_t,<sp/>uint16_t&gt;&gt;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/>ToLittleEndian(T<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ByteSwap(value);</highlight></codeline>
<codeline lineno="383"><highlight class="normal">}</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Convert<sp/>from<sp/>big/little<sp/>endian<sp/>format<sp/>to<sp/>the<sp/>machine&apos;s<sp/>native<sp/>endian<sp/>format.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>ARROW_LITTLE_ENDIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/>internal::EnableIfIsOneOf&lt;T,<sp/>int64_t,<sp/>uint64_t,<sp/>int32_t,</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t,<sp/>int16_t,<sp/>uint16_t&gt;&gt;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/>FromBigEndian(T<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ByteSwap(value);</highlight></codeline>
<codeline lineno="392"><highlight class="normal">}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/>internal::EnableIfIsOneOf&lt;T,<sp/>int64_t,<sp/>uint64_t,<sp/>int32_t,</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t,<sp/>int16_t,<sp/>uint16_t&gt;&gt;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/>FromLittleEndian(T<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="398"><highlight class="normal">}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/>internal::EnableIfIsOneOf&lt;T,<sp/>int64_t,<sp/>uint64_t,<sp/>int32_t,</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t,<sp/>int16_t,<sp/>uint16_t&gt;&gt;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/>FromBigEndian(T<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="404"><highlight class="normal">}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>=<sp/>internal::EnableIfIsOneOf&lt;T,<sp/>int64_t,<sp/>uint64_t,<sp/>int32_t,</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t,<sp/>int16_t,<sp/>uint16_t&gt;&gt;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>T<sp/>FromLittleEndian(T<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ByteSwap(value);</highlight></codeline>
<codeline lineno="410"><highlight class="normal">}</highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Utilities<sp/>for<sp/>reading<sp/>and<sp/>writing<sp/>individual<sp/>bits<sp/>by<sp/>their<sp/>index</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>a<sp/>memory<sp/>area.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Bitmask<sp/>selecting<sp/>the<sp/>k-th<sp/>bit<sp/>in<sp/>a<sp/>byte</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>uint8_t<sp/>kBitmask[]<sp/>=<sp/>{1,<sp/>2,<sp/>4,<sp/>8,<sp/>16,<sp/>32,<sp/>64,<sp/>128};</highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>bitwise<sp/>complement<sp/>version<sp/>of<sp/>kBitmask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>uint8_t<sp/>kFlippedBitmask[]<sp/>=<sp/>{254,<sp/>253,<sp/>251,<sp/>247,<sp/>239,<sp/>223,<sp/>191,<sp/>127};</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Bitmask<sp/>selecting<sp/>the<sp/>(k<sp/>-<sp/>1)<sp/>preceding<sp/>bits<sp/>in<sp/>a<sp/>byte</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>uint8_t<sp/>kPrecedingBitmask[]<sp/>=<sp/>{0,<sp/>1,<sp/>3,<sp/>7,<sp/>15,<sp/>31,<sp/>63,<sp/>127};</highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>uint8_t<sp/>kPrecedingWrappingBitmask[]<sp/>=<sp/>{255,<sp/>1,<sp/>3,<sp/>7,<sp/>15,<sp/>31,<sp/>63,<sp/>127};</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="comment">//<sp/>the<sp/>bitwise<sp/>complement<sp/>version<sp/>of<sp/>kPrecedingBitmask</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>uint8_t<sp/>kTrailingBitmask[]<sp/>=<sp/>{255,<sp/>254,<sp/>252,<sp/>248,<sp/>240,<sp/>224,<sp/>192,<sp/>128};</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>GetBit(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>bits,<sp/>uint64_t<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(bits[i<sp/>&gt;&gt;<sp/>3]<sp/>&gt;&gt;<sp/>(i<sp/>&amp;<sp/>0x07))<sp/>&amp;<sp/>1;</highlight></codeline>
<codeline lineno="433"><highlight class="normal">}</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Gets<sp/>the<sp/>i-th<sp/>bit<sp/>from<sp/>a<sp/>byte.<sp/>Should<sp/>only<sp/>be<sp/>used<sp/>with<sp/>i<sp/>&lt;=<sp/>7.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>GetBitFromByte(uint8_t<sp/>byte,<sp/>uint8_t<sp/>i)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>byte<sp/>&amp;<sp/>kBitmask[i];<sp/>}</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>ClearBit(uint8_t*<sp/>bits,<sp/>int64_t<sp/>i)<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/>bits[i<sp/>/<sp/>8]<sp/>&amp;=<sp/>kFlippedBitmask[i<sp/>%<sp/>8];</highlight></codeline>
<codeline lineno="440"><highlight class="normal">}</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetBit(uint8_t*<sp/>bits,<sp/>int64_t<sp/>i)<sp/>{<sp/>bits[i<sp/>/<sp/>8]<sp/>|=<sp/>kBitmask[i<sp/>%<sp/>8];<sp/>}</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetBitTo(uint8_t*<sp/>bits,<sp/>int64_t<sp/>i,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bit_is_set)<sp/>{</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>https://graphics.stanford.edu/~seander/bithacks.html</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;Conditionally<sp/>set<sp/>or<sp/>clear<sp/>bits<sp/>without<sp/>branching&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>NOTE:<sp/>this<sp/>seems<sp/>to<sp/>confuse<sp/>Valgrind<sp/>as<sp/>it<sp/>reads<sp/>from<sp/>potentially</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>uninitialized<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/>bits[i<sp/>/<sp/>8]<sp/>^=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(-</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(bit_is_set)<sp/>^<sp/>bits[i<sp/>/<sp/>8])<sp/>&amp;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kBitmask[i<sp/>%<sp/>8];</highlight></codeline>
<codeline lineno="451"><highlight class="normal">}</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="454"><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetBitsTo(uint8_t*<sp/>bits,<sp/>int64_t<sp/>start_offset,<sp/>int64_t<sp/>length,</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bits_are_set)<sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i_begin<sp/>=<sp/>start_offset;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>i_end<sp/>=<sp/>start_offset<sp/>+<sp/>length;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>fill_byte<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(-</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(bits_are_set));</highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bytes_begin<sp/>=<sp/>i_begin<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bytes_end<sp/>=<sp/>i_end<sp/>/<sp/>8<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>first_byte_mask<sp/>=<sp/>kPrecedingBitmask[i_begin<sp/>%<sp/>8];</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>last_byte_mask<sp/>=<sp/>kTrailingBitmask[i_end<sp/>%<sp/>8];</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes_end<sp/>==<sp/>bytes_begin<sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set<sp/>bits<sp/>within<sp/>a<sp/>single<sp/>byte</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>only_byte_mask<sp/>=</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i_end<sp/>%<sp/>8<sp/>==<sp/>0<sp/>?<sp/>first_byte_mask</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(first_byte_mask<sp/>|<sp/>last_byte_mask);</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>bits[bytes_begin]<sp/>&amp;=<sp/>only_byte_mask;</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>bits[bytes_begin]<sp/>|=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(fill_byte<sp/>&amp;<sp/>~only_byte_mask);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set/clear<sp/>trailing<sp/>bits<sp/>of<sp/>first<sp/>byte</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/>bits[bytes_begin]<sp/>&amp;=<sp/>first_byte_mask;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>bits[bytes_begin]<sp/>|=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(fill_byte<sp/>&amp;<sp/>~first_byte_mask);</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes_end<sp/>-<sp/>bytes_begin<sp/>&gt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>set/clear<sp/>whole<sp/>bytes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>std::memset(bits<sp/>+<sp/>bytes_begin<sp/>+<sp/>1,<sp/>fill_byte,</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;size_t&gt;(bytes_end<sp/>-<sp/>bytes_begin<sp/>-<sp/>2));</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i_end<sp/>%<sp/>8<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>set/clear<sp/>leading<sp/>bits<sp/>of<sp/>last<sp/>byte</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/>bits[bytes_end<sp/>-<sp/>1]<sp/>&amp;=<sp/>last_byte_mask;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/>bits[bytes_end<sp/>-<sp/>1]<sp/>|=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(fill_byte<sp/>&amp;<sp/>~last_byte_mask);</highlight></codeline>
<codeline lineno="493"><highlight class="normal">}</highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="497"><highlight class="normal">Result&lt;std::shared_ptr&lt;Buffer&gt;&gt;<sp/>BytesToBits(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;uint8_t&gt;&amp;,</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespaceparquet_1a0d70b006a1f6feca958a1505b38a8cb7" kindref="member">MemoryPool</ref>*<sp/>pool<sp/>=<sp/><ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">default_memory_pool</ref>());</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>BitUtil</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">BitmapReader<sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/>BitmapReader(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>bitmap,<sp/>int64_t<sp/>start_offset,<sp/>int64_t<sp/>length)</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>bitmap_(bitmap),<sp/>position_(0),<sp/>length_(length)<sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>current_byte_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>byte_offset_<sp/>=<sp/>start_offset<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>bit_offset_<sp/>=<sp/>start_offset<sp/>%<sp/>8;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_byte_<sp/>=<sp/>bitmap[byte_offset_];</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsSet()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(current_byte_<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>bit_offset_))<sp/>!=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsNotSet()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(current_byte_<sp/>&amp;<sp/>(1<sp/>&lt;&lt;<sp/>bit_offset_))<sp/>==<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Next()<sp/>{</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>++bit_offset_;</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>++position_;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="macros_8h_1a6f2ee7ad52872edb915cf48e163ac99c" kindref="member">ARROW_PREDICT_FALSE</ref>(bit_offset_<sp/>==<sp/>8))<sp/>{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bit_offset_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++byte_offset_;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="macros_8h_1a1f418a9edc46d53e62732e7ccd06f329" kindref="member">ARROW_PREDICT_TRUE</ref>(position_<sp/>&lt;<sp/>length_))<sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_byte_<sp/>=<sp/>bitmap_[byte_offset_];</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/>int64_t<sp/>position()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>position_;<sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>bitmap_;</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/>int64_t<sp/>position_;</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>int64_t<sp/>length_;</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/>uint8_t<sp/>current_byte_;</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/>int64_t<sp/>byte_offset_;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/>int64_t<sp/>bit_offset_;</highlight></codeline>
<codeline lineno="542"><highlight class="normal">};</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">BitmapWriter<sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>A<sp/>sequential<sp/>bitwise<sp/>writer<sp/>that<sp/>preserves<sp/>surrounding<sp/>bit<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"></highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/>BitmapWriter(uint8_t*<sp/>bitmap,<sp/>int64_t<sp/>start_offset,<sp/>int64_t<sp/>length)</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>bitmap_(bitmap),<sp/>position_(0),<sp/>length_(length)<sp/>{</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>byte_offset_<sp/>=<sp/>start_offset<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/>bit_mask_<sp/>=<sp/>BitUtil::kBitmask[start_offset<sp/>%<sp/>8];</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_byte_<sp/>=<sp/>bitmap[byte_offset_];</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_byte_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Set()<sp/>{<sp/>current_byte_<sp/>|=<sp/>bit_mask_;<sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Clear()<sp/>{<sp/>current_byte_<sp/>&amp;=<sp/>bit_mask_<sp/>^<sp/>0xFF;<sp/>}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Next()<sp/>{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>bit_mask_<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(bit_mask_<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/>++position_;</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bit_mask_<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Finished<sp/>this<sp/>byte,<sp/>need<sp/>advancing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bit_mask_<sp/>=<sp/>0x01;</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bitmap_[byte_offset_++]<sp/>=<sp/>current_byte_;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="macros_8h_1a1f418a9edc46d53e62732e7ccd06f329" kindref="member">ARROW_PREDICT_TRUE</ref>(position_<sp/>&lt;<sp/>length_))<sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>current_byte_<sp/>=<sp/>bitmap_[byte_offset_];</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Finish()<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>current<sp/>byte<sp/>if<sp/>we<sp/>didn&apos;t<sp/>went<sp/>past<sp/>bitmap<sp/>storage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length_<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>(bit_mask_<sp/>!=<sp/>0x01<sp/>||<sp/>position_<sp/>&lt;<sp/>length_))<sp/>{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bitmap_[byte_offset_]<sp/>=<sp/>current_byte_;</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/>int64_t<sp/>position()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>position_;<sp/>}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/>uint8_t*<sp/>bitmap_;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/>int64_t<sp/>position_;</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/>int64_t<sp/>length_;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/>uint8_t<sp/>current_byte_;</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/>uint8_t<sp/>bit_mask_;</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/>int64_t<sp/>byte_offset_;</highlight></codeline>
<codeline lineno="593"><highlight class="normal">};</highlight></codeline>
<codeline lineno="594"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">FirstTimeBitmapWriter<sp/>{</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Like<sp/>BitmapWriter,<sp/>but<sp/>any<sp/>bit<sp/>values<sp/>*following*<sp/>the<sp/>bits<sp/>written</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>might<sp/>be<sp/>clobbered.<sp/><sp/>It<sp/>is<sp/>hence<sp/>faster<sp/>than<sp/>BitmapWriter,<sp/>and<sp/>can</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>also<sp/>avoid<sp/>false<sp/>positives<sp/>with<sp/>Valgrind.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="normal"></highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/>FirstTimeBitmapWriter(uint8_t*<sp/>bitmap,<sp/>int64_t<sp/>start_offset,<sp/>int64_t<sp/>length)</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>bitmap_(bitmap),<sp/>position_(0),<sp/>length_(length)<sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/>current_byte_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/>byte_offset_<sp/>=<sp/>start_offset<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/>bit_mask_<sp/>=<sp/>BitUtil::kBitmask[start_offset<sp/>%<sp/>8];</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_byte_<sp/>=<sp/>bitmap[byte_offset_]<sp/>&amp;<sp/>BitUtil::kPrecedingBitmask[start_offset<sp/>%<sp/>8];</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_byte_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Set()<sp/>{<sp/>current_byte_<sp/>|=<sp/>bit_mask_;<sp/>}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Clear()<sp/>{}</highlight></codeline>
<codeline lineno="616"><highlight class="normal"></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Next()<sp/>{</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>bit_mask_<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(bit_mask_<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/>++position_;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bit_mask_<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Finished<sp/>this<sp/>byte,<sp/>need<sp/>advancing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bit_mask_<sp/>=<sp/>0x01;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bitmap_[byte_offset_++]<sp/>=<sp/>current_byte_;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_byte_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Finish()<sp/>{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Store<sp/>current<sp/>byte<sp/>if<sp/>we<sp/>didn&apos;t<sp/>went<sp/>past<sp/>bitmap<sp/>storage</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length_<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>(bit_mask_<sp/>!=<sp/>0x01<sp/>||<sp/>position_<sp/>&lt;<sp/>length_))<sp/>{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bitmap_[byte_offset_]<sp/>=<sp/>current_byte_;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/>int64_t<sp/>position()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>position_;<sp/>}</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/>uint8_t*<sp/>bitmap_;</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/>int64_t<sp/>position_;</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/>int64_t<sp/>length_;</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>uint8_t<sp/>current_byte_;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/>uint8_t<sp/>bit_mask_;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/>int64_t<sp/>byte_offset_;</highlight></codeline>
<codeline lineno="645"><highlight class="normal">};</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>std::generate()<sp/>like<sp/>function<sp/>to<sp/>write<sp/>sequential<sp/>bits<sp/>into<sp/>a<sp/>bitmap<sp/>area.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Bits<sp/>preceding<sp/>the<sp/>bitmap<sp/>area<sp/>are<sp/>preserved,<sp/>bits<sp/>following<sp/>the<sp/>bitmap</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="comment">//<sp/>area<sp/>may<sp/>be<sp/>clobbered.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"></highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Generator&gt;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GenerateBits(uint8_t*<sp/>bitmap,<sp/>int64_t<sp/>start_offset,<sp/>int64_t<sp/>length,<sp/>Generator&amp;&amp;<sp/>g)<sp/>{</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/>uint8_t*<sp/>cur<sp/>=<sp/>bitmap<sp/>+<sp/>start_offset<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/>uint8_t<sp/>bit_mask<sp/>=<sp/>BitUtil::kBitmask[start_offset<sp/>%<sp/>8];</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>uint8_t<sp/>current_byte<sp/>=<sp/>*cur<sp/>&amp;<sp/>BitUtil::kPrecedingBitmask[start_offset<sp/>%<sp/>8];</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>length;<sp/>++index)<sp/>{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bit<sp/>=<sp/>g();</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/>current_byte<sp/>=<sp/>bit<sp/>?<sp/>(current_byte<sp/>|<sp/>bit_mask)<sp/>:<sp/>current_byte;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>bit_mask<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(bit_mask<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bit_mask<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bit_mask<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*cur++<sp/>=<sp/>current_byte;</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_byte<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bit_mask<sp/>!=<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>*cur++<sp/>=<sp/>current_byte;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="673"><highlight class="normal">}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="675"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Like<sp/>GenerateBits(),<sp/>but<sp/>unrolls<sp/>its<sp/>main<sp/>loop<sp/>for<sp/>higher<sp/>performance.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Generator&gt;</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GenerateBitsUnrolled(uint8_t*<sp/>bitmap,<sp/>int64_t<sp/>start_offset,<sp/>int64_t<sp/>length,</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Generator&amp;&amp;<sp/>g)<sp/>{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/>uint8_t<sp/>current_byte;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/>uint8_t*<sp/>cur<sp/>=<sp/>bitmap<sp/>+<sp/>start_offset<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint64_t<sp/>start_bit_offset<sp/>=<sp/>start_offset<sp/>%<sp/>8;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/>uint8_t<sp/>bit_mask<sp/>=<sp/>BitUtil::kBitmask[start_bit_offset];</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/>int64_t<sp/>remaining<sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="688"><highlight class="normal"></highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bit_mask<sp/>!=<sp/>0x01)<sp/>{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>current_byte<sp/>=<sp/>*cur<sp/>&amp;<sp/>BitUtil::kPrecedingBitmask[start_bit_offset];</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(bit_mask<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>remaining<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_byte<sp/>=<sp/>g()<sp/>?<sp/>(current_byte<sp/>|<sp/>bit_mask)<sp/>:<sp/>current_byte;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bit_mask<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(bit_mask<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>--remaining;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>*cur++<sp/>=<sp/>current_byte;</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="698"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/>int64_t<sp/>remaining_bytes<sp/>=<sp/>remaining<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(remaining_bytes--<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>current_byte<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>current_byte<sp/>=<sp/>g()<sp/>?<sp/>current_byte<sp/>|<sp/>0x01<sp/>:<sp/>current_byte;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>current_byte<sp/>=<sp/>g()<sp/>?<sp/>current_byte<sp/>|<sp/>0x02<sp/>:<sp/>current_byte;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/>current_byte<sp/>=<sp/>g()<sp/>?<sp/>current_byte<sp/>|<sp/>0x04<sp/>:<sp/>current_byte;</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/>current_byte<sp/>=<sp/>g()<sp/>?<sp/>current_byte<sp/>|<sp/>0x08<sp/>:<sp/>current_byte;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>current_byte<sp/>=<sp/>g()<sp/>?<sp/>current_byte<sp/>|<sp/>0x10<sp/>:<sp/>current_byte;</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/>current_byte<sp/>=<sp/>g()<sp/>?<sp/>current_byte<sp/>|<sp/>0x20<sp/>:<sp/>current_byte;</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>current_byte<sp/>=<sp/>g()<sp/>?<sp/>current_byte<sp/>|<sp/>0x40<sp/>:<sp/>current_byte;</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>current_byte<sp/>=<sp/>g()<sp/>?<sp/>current_byte<sp/>|<sp/>0x80<sp/>:<sp/>current_byte;</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/>*cur++<sp/>=<sp/>current_byte;</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/>int64_t<sp/>remaining_bits<sp/>=<sp/>remaining<sp/>%<sp/>8;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(remaining_bits)<sp/>{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>current_byte<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>bit_mask<sp/>=<sp/>0x01;</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(remaining_bits--<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>current_byte<sp/>=<sp/>g()<sp/>?<sp/>(current_byte<sp/>|<sp/>bit_mask)<sp/>:<sp/>current_byte;</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bit_mask<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(bit_mask<sp/>&lt;&lt;<sp/>1);</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>*cur++<sp/>=<sp/>current_byte;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="723"><highlight class="normal">}</highlight></codeline>
<codeline lineno="724"><highlight class="normal"></highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>function<sp/>that<sp/>visits<sp/>each<sp/>bit<sp/>in<sp/>a<sp/>bitmap<sp/>and<sp/>calls<sp/>a<sp/>visitor<sp/>function<sp/>with<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="726"><highlight class="normal"></highlight><highlight class="comment">//<sp/>boolean<sp/>representation<sp/>of<sp/>that<sp/>bit.<sp/>This<sp/>is<sp/>intended<sp/>to<sp/>be<sp/>analogous<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="normal"></highlight><highlight class="comment">//<sp/>GenerateBits.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Visitor&gt;</highlight></codeline>
<codeline lineno="729"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VisitBits(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>bitmap,<sp/>int64_t<sp/>start_offset,<sp/>int64_t<sp/>length,</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Visitor&amp;&amp;<sp/>visit)<sp/>{</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/>BitmapReader<sp/>reader(bitmap,<sp/>start_offset,<sp/>length);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>index<sp/>=<sp/>0;<sp/>index<sp/>&lt;<sp/>length;<sp/>++index)<sp/>{</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/>visit(reader.IsSet());</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>reader.Next();</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="736"><highlight class="normal">}</highlight></codeline>
<codeline lineno="737"><highlight class="normal"></highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Like<sp/>VisitBits(),<sp/>but<sp/>unrolls<sp/>its<sp/>main<sp/>loop<sp/>for<sp/>better<sp/>performance.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="739"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>Visitor&gt;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VisitBitsUnrolled(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>bitmap,<sp/>int64_t<sp/>start_offset,<sp/>int64_t<sp/>length,</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Visitor&amp;&amp;<sp/>visit)<sp/>{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(length<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="745"><highlight class="normal"></highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Start<sp/>by<sp/>visiting<sp/>any<sp/>bits<sp/>preceding<sp/>the<sp/>first<sp/>full<sp/>byte.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/>int64_t<sp/>num_bits_before_full_bytes<sp/>=</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>BitUtil::RoundUpToMultipleOf8(start_offset)<sp/>-<sp/>start_offset;</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Truncate<sp/>num_bits_before_full_bytes<sp/>if<sp/>it<sp/>is<sp/>greater<sp/>than<sp/>length.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_bits_before_full_bytes<sp/>&gt;<sp/>length)<sp/>{</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>num_bits_before_full_bytes<sp/>=<sp/>length;</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Use<sp/>the<sp/>non<sp/>loop-unrolled<sp/>VisitBits<sp/>since<sp/>we<sp/>don&apos;t<sp/>want<sp/>to<sp/>add<sp/>branches</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/>VisitBits&lt;Visitor&gt;(bitmap,<sp/>start_offset,<sp/>num_bits_before_full_bytes,<sp/>visit);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"></highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Shift<sp/>the<sp/>start<sp/>pointer<sp/>to<sp/>the<sp/>first<sp/>full<sp/>byte<sp/>and<sp/>compute<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>number<sp/>of<sp/>full<sp/>bytes<sp/>to<sp/>be<sp/>read.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>first_full_byte<sp/>=<sp/>bitmap<sp/>+<sp/>BitUtil::CeilDiv(start_offset,<sp/>8);</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>num_full_bytes<sp/>=<sp/>(length<sp/>-<sp/>num_bits_before_full_bytes)<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterate<sp/>over<sp/>each<sp/>full<sp/>byte<sp/>of<sp/>the<sp/>input<sp/>bitmap<sp/>and<sp/>call<sp/>the<sp/>visitor<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>loop-unrolled<sp/>manner.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>byte_index<sp/>=<sp/>0;<sp/>byte_index<sp/>&lt;<sp/>num_full_bytes;<sp/>++byte_index)<sp/>{</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>the<sp/>current<sp/>bit-packed<sp/>byte<sp/>value<sp/>from<sp/>the<sp/>bitmap.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t<sp/>byte<sp/>=<sp/>*(first_full_byte<sp/>+<sp/>byte_index);</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Execute<sp/>the<sp/>visitor<sp/>function<sp/>on<sp/>each<sp/>bit<sp/>of<sp/>the<sp/>current<sp/>byte.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>visit(BitUtil::GetBitFromByte(byte,<sp/>0));</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/>visit(BitUtil::GetBitFromByte(byte,<sp/>1));</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>visit(BitUtil::GetBitFromByte(byte,<sp/>2));</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>visit(BitUtil::GetBitFromByte(byte,<sp/>3));</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>visit(BitUtil::GetBitFromByte(byte,<sp/>4));</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>visit(BitUtil::GetBitFromByte(byte,<sp/>5));</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>visit(BitUtil::GetBitFromByte(byte,<sp/>6));</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/>visit(BitUtil::GetBitFromByte(byte,<sp/>7));</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>any<sp/>leftover<sp/>bits<sp/>in<sp/>the<sp/>last<sp/>byte.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>num_bits_after_full_bytes<sp/>=<sp/>(length<sp/>-<sp/>num_bits_before_full_bytes)<sp/>%<sp/>8;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/>VisitBits&lt;Visitor&gt;(first_full_byte<sp/>+<sp/>num_full_bytes,<sp/>0,<sp/>num_bits_after_full_bytes,</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visit);</highlight></codeline>
<codeline lineno="782"><highlight class="normal">}</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="784"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Bitmap<sp/>utilities</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="795"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="796"><highlight class="normal">Result&lt;std::shared_ptr&lt;Buffer&gt;&gt;<sp/>CopyBitmap(<ref refid="namespaceparquet_1a0d70b006a1f6feca958a1505b38a8cb7" kindref="member">MemoryPool</ref>*<sp/>pool,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>bitmap,</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>offset,<sp/>int64_t<sp/>length);</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CopyBitmap(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>bitmap,<sp/>int64_t<sp/>offset,<sp/>int64_t<sp/>length,<sp/>uint8_t*<sp/>dest,</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>dest_offset,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>restore_trailing_bits<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>InvertBitmap(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>bitmap,<sp/>int64_t<sp/>offset,<sp/>int64_t<sp/>length,<sp/>uint8_t*<sp/>dest,</highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>dest_offset);</highlight></codeline>
<codeline lineno="823"><highlight class="normal"></highlight></codeline>
<codeline lineno="832"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="833"><highlight class="normal">Result&lt;std::shared_ptr&lt;Buffer&gt;&gt;<sp/>InvertBitmap(<ref refid="namespaceparquet_1a0d70b006a1f6feca958a1505b38a8cb7" kindref="member">MemoryPool</ref>*<sp/>pool,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>bitmap,</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>offset,<sp/>int64_t<sp/>length);</highlight></codeline>
<codeline lineno="835"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="845"><highlight class="normal">int64_t<sp/>CountSetBits(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>,<sp/>int64_t<sp/>bit_offset,<sp/>int64_t<sp/>length);</highlight></codeline>
<codeline lineno="846"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/>Bitmap<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>util::ToStringOstreamable&lt;Bitmap&gt;,</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>util::EqualityComparable&lt;Bitmap&gt;<sp/>{</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="850"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Word&gt;</highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>View<sp/>=<sp/>util::basic_string_view&lt;Word&gt;;</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/>Bitmap()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="854"><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/>Bitmap(std::shared_ptr&lt;Buffer&gt;<sp/>buffer,<sp/>int64_t<sp/>offset,<sp/>int64_t<sp/>length)</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>buffer_(std::move(buffer)),<sp/>offset_(offset),<sp/>length_(length)<sp/>{}</highlight></codeline>
<codeline lineno="857"><highlight class="normal"></highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/>Bitmap(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data,<sp/>int64_t<sp/>offset,<sp/>int64_t<sp/>length)</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>buffer_(std::make_shared&lt;Buffer&gt;(static_cast&lt;const<sp/>uint8_t*&gt;(data),</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BitUtil::BytesForBits(offset<sp/>+<sp/>length))),</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset_(offset),</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length_(length)<sp/>{}</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/>Bitmap(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data,<sp/>int64_t<sp/>offset,<sp/>int64_t<sp/>length)</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>buffer_(std::make_shared&lt;MutableBuffer&gt;(static_cast&lt;uint8_t*&gt;(data),</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BitUtil::BytesForBits(offset<sp/>+<sp/>length))),</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offset_(offset),</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>length_(length)<sp/>{}</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/>Bitmap<sp/>Slice(int64_t<sp/>offset)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Bitmap(buffer_,<sp/>offset_<sp/>+<sp/>offset,<sp/>length_<sp/>-<sp/>offset);</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/>Bitmap<sp/>Slice(int64_t<sp/>offset,<sp/>int64_t<sp/>length)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Bitmap(buffer_,<sp/>offset_<sp/>+<sp/>offset,<sp/>length);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="877"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="879"><highlight class="normal"></highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Equals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Bitmap&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="881"><highlight class="normal"></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1a0d16f62627582ce40fcb90f88471c67e" kindref="member">Diff</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Bitmap&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="883"><highlight class="normal"></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>GetBit(int64_t<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>BitUtil::GetBit(buffer_-&gt;data(),<sp/>i<sp/>+<sp/>offset_);<sp/>}</highlight></codeline>
<codeline lineno="885"><highlight class="normal"></highlight></codeline>
<codeline lineno="886"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator[](int64_t<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>GetBit(i);<sp/>}</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="888"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SetBitTo(int64_t<sp/>i,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>v)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="889"><highlight class="normal"><sp/><sp/><sp/><sp/>BitUtil::SetBitTo(buffer_-&gt;mutable_data(),<sp/>i<sp/>+<sp/>offset_,<sp/>v);</highlight></codeline>
<codeline lineno="890"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="891"><highlight class="normal"></highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Visitor&gt;</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VisitBits(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Bitmap<sp/>(&amp;bitmaps)[N],<sp/>Visitor&amp;&amp;<sp/>visitor)<sp/>{</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>bit_length<sp/>=<sp/>BitLength(bitmaps,<sp/>N);</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>std::bitset&lt;N&gt;<sp/>bits;</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>bit_i<sp/>=<sp/>0;<sp/>bit_i<sp/>&lt;<sp/>bit_length;<sp/>++bit_i)<sp/>{</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>N;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits[i]<sp/>=<sp/>bitmaps[i].GetBit(bit_i);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>visitor(bits);</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="906"><highlight class="normal"></highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Visitor,</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Word<sp/>=</highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>internal::call_traits::argument_type&lt;0,<sp/>Visitor&amp;&amp;&gt;::value_type&gt;</highlight></codeline>
<codeline lineno="918"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int64_t<sp/>VisitWords(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Bitmap<sp/>(&amp;bitmaps_arg)[N],<sp/>Visitor&amp;&amp;<sp/>visitor)<sp/>{</highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>int64_t<sp/>kBitWidth<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Word)<sp/>*<sp/>8;</highlight></codeline>
<codeline lineno="920"><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>local,<sp/>mutable<sp/>variables<sp/>which<sp/>will<sp/>be<sp/>sliced/decremented<sp/>to<sp/>represent<sp/>consumption:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/>Bitmap<sp/>bitmaps[N];</highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>offsets[N];</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>bit_length<sp/>=<sp/>BitLength(bitmaps_arg,<sp/>N);</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>View&lt;Word&gt;<sp/>words[N];</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>N;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bitmaps[i]<sp/>=<sp/>bitmaps_arg[i];</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>offsets[i]<sp/>=<sp/>bitmaps[i].template<sp/>word_offset&lt;Word&gt;();</highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(offsets[i]<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>offsets[i]<sp/>&lt;<sp/>kBitWidth);</highlight></codeline>
<codeline lineno="930"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>words[i]<sp/>=<sp/>bitmaps[i].template<sp/>words&lt;Word&gt;();</highlight></codeline>
<codeline lineno="931"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="932"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>consume<sp/>=<sp/>[&amp;](int64_t<sp/>consumed_bits)<sp/>{</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>N;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bitmaps[i]<sp/>=<sp/>bitmaps[i].Slice(consumed_bits,<sp/>bit_length<sp/>-<sp/>consumed_bits);</highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offsets[i]<sp/>=<sp/>bitmaps[i].template<sp/>word_offset&lt;Word&gt;();</highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>assert(offsets[i]<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>offsets[i]<sp/>&lt;<sp/>kBitWidth);</highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>words[i]<sp/>=<sp/>bitmaps[i].template<sp/>words&lt;Word&gt;();</highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="940"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bit_length<sp/>-=<sp/>consumed_bits;</highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/>std::array&lt;Word,<sp/>N&gt;<sp/>visited_words;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/>visited_words.fill(0);</highlight></codeline>
<codeline lineno="945"><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bit_length<sp/>&lt;=<sp/>kBitWidth<sp/>*<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bitmaps<sp/>fit<sp/>into<sp/>one<sp/>or<sp/>two<sp/>words<sp/>so<sp/>don&apos;t<sp/>bother<sp/>with<sp/>optimization</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(bit_length<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="949"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>leading_bits<sp/>=<sp/>std::min(bit_length,<sp/>kBitWidth);</highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SafeLoadWords(bitmaps,<sp/>0,<sp/>leading_bits,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>&amp;visited_words);</highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visitor(visited_words);</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>consume(leading_bits);</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="954"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="956"><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>max_offset<sp/>=<sp/>*std::max_element(offsets,<sp/>offsets<sp/>+<sp/>N);</highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>min_offset<sp/>=<sp/>*std::min_element(offsets,<sp/>offsets<sp/>+<sp/>N);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(max_offset<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="960"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>consume<sp/>leading<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>leading_bits<sp/>=<sp/>kBitWidth<sp/>-<sp/>min_offset;</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SafeLoadWords(bitmaps,<sp/>0,<sp/>leading_bits,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,<sp/>&amp;visited_words);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>visitor(visited_words);</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>consume(leading_bits);</highlight></codeline>
<codeline lineno="965"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(*std::min_element(offsets,<sp/>offsets<sp/>+<sp/>N)<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="967"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>whole_word_count<sp/>=<sp/>bit_length<sp/>/<sp/>kBitWidth;</highlight></codeline>
<codeline lineno="969"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(whole_word_count<sp/>&gt;=<sp/>1);</highlight></codeline>
<codeline lineno="970"><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(min_offset<sp/>==<sp/>max_offset)<sp/>{</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>all<sp/>offsets<sp/>were<sp/>identical,<sp/>all<sp/>leading<sp/>bits<sp/>have<sp/>been<sp/>consumed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>assert(</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::all_of(offsets,<sp/>offsets<sp/>+<sp/>N,<sp/>[](int64_t<sp/>offset)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>offset<sp/>==<sp/>0;<sp/>}));</highlight></codeline>
<codeline lineno="975"><highlight class="normal"></highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>word_i<sp/>=<sp/>0;<sp/>word_i<sp/>&lt;<sp/>whole_word_count;<sp/>++word_i)<sp/>{</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>N;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="978"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visited_words[i]<sp/>=<sp/>words[i][word_i];</highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visitor(visited_words);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>consume(whole_word_count<sp/>*<sp/>kBitWidth);</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="984"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>leading<sp/>bits<sp/>from<sp/>potentially<sp/>incomplete<sp/>words<sp/>have<sp/>been<sp/>consumed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"></highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>word_i<sp/>such<sp/>that<sp/>words[i][word_i]<sp/>and<sp/>words[i][word_i<sp/>+<sp/>1]<sp/>are<sp/>lie<sp/>entirely</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>within<sp/>the<sp/>bitmap<sp/>for<sp/>all<sp/>i</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>word_i<sp/>=<sp/>0;<sp/>word_i<sp/>&lt;<sp/>whole_word_count<sp/>-<sp/>1;<sp/>++word_i)<sp/>{</highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>N;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(offsets[i]<sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="991"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visited_words[i]<sp/>=<sp/>words[i][word_i];</highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visited_words[i]<sp/>=<sp/>words[i][word_i]<sp/>&gt;&gt;<sp/>offsets[i];</highlight></codeline>
<codeline lineno="994"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visited_words[i]<sp/>|=<sp/>words[i][word_i<sp/>+<sp/>1]<sp/>&lt;&lt;<sp/>(kBitWidth<sp/>-<sp/>offsets[i]);</highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="997"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>visitor(visited_words);</highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>consume((whole_word_count<sp/>-<sp/>1)<sp/>*<sp/>kBitWidth);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SafeLoadWords(bitmaps,<sp/>0,<sp/>kBitWidth,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>&amp;visited_words);</highlight></codeline>
<codeline lineno="1002"><highlight class="normal"></highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>visitor(visited_words);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>consume(kBitWidth);</highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>load<sp/>remaining<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bit_length<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>SafeLoadWords(bitmaps,<sp/>0,<sp/>bit_length,<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/>&amp;visited_words);</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>visitor(visited_words);</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1012"><highlight class="normal"></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>min_offset;</highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Buffer&gt;&amp;<sp/>buffer()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buffer_;<sp/>}</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/>int64_t<sp/>offset()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>offset_;<sp/>}</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"></highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/>int64_t<sp/>length()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>length_;<sp/>}</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><ref refid="namespacearrow_1_1util_1a550cadd9d8d2f10f4b3c968065b9287b" kindref="member">util::bytes_view</ref><sp/>bytes()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>byte_offset<sp/>=<sp/>offset_<sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>byte_count<sp/>=<sp/>BitUtil::CeilDiv(offset_<sp/>+<sp/>length_,<sp/>8)<sp/>-<sp/>byte_offset;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacearrow_1_1util_1a550cadd9d8d2f10f4b3c968065b9287b" kindref="member">util::bytes_view</ref>(buffer_-&gt;data()<sp/>+<sp/>byte_offset,<sp/>byte_count);</highlight></codeline>
<codeline lineno="1029"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1030"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Word&gt;</highlight></codeline>
<codeline lineno="1045"><highlight class="normal"><sp/><sp/>View&lt;Word&gt;<sp/>words()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>bytes_addr<sp/>=<sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">intptr_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(bytes().data());</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>words_addr<sp/>=<sp/>bytes_addr<sp/>-<sp/>bytes_addr<sp/>%<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Word);</highlight></codeline>
<codeline lineno="1048"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>word_byte_count<sp/>=</highlight></codeline>
<codeline lineno="1049"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BitUtil::RoundUpToPowerOf2(static_cast&lt;int64_t&gt;(bytes_addr<sp/>+<sp/>bytes().size()),</highlight></codeline>
<codeline lineno="1050"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;int64_t&gt;(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Word)))<sp/>-</highlight></codeline>
<codeline lineno="1051"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>words_addr;</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>View&lt;Word&gt;(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">Word*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(words_addr),</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>word_byte_count<sp/>/<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Word));</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1055"><highlight class="normal"></highlight></codeline>
<codeline lineno="1057"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Word&gt;</highlight></codeline>
<codeline lineno="1058"><highlight class="normal"><sp/><sp/>int64_t<sp/>word_offset()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>offset_<sp/>+<sp/>8<sp/>*<sp/>(</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">intptr_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(buffer_-&gt;data())<sp/>-</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reinterpret_cast&lt;intptr_t&gt;(words&lt;Word&gt;().data()));</highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Word&gt;</highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SafeLoadWords(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Bitmap<sp/>(&amp;bitmaps)[N],<sp/>int64_t<sp/>offset,</highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>out_length,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>set_trailing_bits,</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::array&lt;Word,<sp/>N&gt;*<sp/>out)<sp/>{</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/>out-&gt;fill(0);</highlight></codeline>
<codeline lineno="1069"><highlight class="normal"></highlight></codeline>
<codeline lineno="1070"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>out_offset<sp/>=<sp/>set_trailing_bits<sp/>?<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(Word)<sp/>*<sp/>8<sp/>-<sp/>out_length<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="1071"><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="normal"><sp/><sp/><sp/><sp/>Bitmap<sp/>slices[N],<sp/>out_bitmaps[N];</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>N;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1074"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>slices[i]<sp/>=<sp/>bitmaps[i].Slice(offset,<sp/>out_length);</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out_bitmaps[i]<sp/>=<sp/>Bitmap(&amp;out-&gt;at(i),<sp/>out_offset,<sp/>out_length);</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1078"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>bit_i<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"><sp/><sp/><sp/><sp/>Bitmap::VisitBits(slices,<sp/>[&amp;](std::bitset&lt;N&gt;<sp/>bits)<sp/>{</highlight></codeline>
<codeline lineno="1080"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>N;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="1081"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out_bitmaps[i].SetBitTo(bit_i,<sp/>bits[i]);</highlight></codeline>
<codeline lineno="1082"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="1083"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++bit_i;</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1086"><highlight class="normal"></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;BooleanArray&gt;<sp/>ToArray()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1088"><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>int64_t<sp/>BitLength(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Bitmap*<sp/>bitmaps,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>N);</highlight></codeline>
<codeline lineno="1091"><highlight class="normal"></highlight></codeline>
<codeline lineno="1092"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Buffer&gt;<sp/>buffer_;</highlight></codeline>
<codeline lineno="1093"><highlight class="normal"><sp/><sp/>int64_t<sp/>offset_<sp/>=<sp/>0,<sp/>length_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1094"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"></highlight></codeline>
<codeline lineno="1096"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="1097"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>BitmapEquals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>left,<sp/>int64_t<sp/>left_offset,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>right,</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>right_offset,<sp/>int64_t<sp/>bit_length);</highlight></codeline>
<codeline lineno="1099"><highlight class="normal"></highlight></codeline>
<codeline lineno="1106"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="1107"><highlight class="normal">Result&lt;std::shared_ptr&lt;Buffer&gt;&gt;<sp/>BitmapAnd(<ref refid="namespaceparquet_1a0d70b006a1f6feca958a1505b38a8cb7" kindref="member">MemoryPool</ref>*<sp/>pool,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>left,</highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>left_offset,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>right,</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>right_offset,<sp/>int64_t<sp/>length,</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>out_offset);</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"></highlight></codeline>
<codeline lineno="1115"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="1116"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BitmapAnd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>left,<sp/>int64_t<sp/>left_offset,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>right,</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>right_offset,<sp/>int64_t<sp/>length,<sp/>int64_t<sp/>out_offset,<sp/>uint8_t*<sp/>out);</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"></highlight></codeline>
<codeline lineno="1125"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="1126"><highlight class="normal">Result&lt;std::shared_ptr&lt;Buffer&gt;&gt;<sp/>BitmapOr(<ref refid="namespaceparquet_1a0d70b006a1f6feca958a1505b38a8cb7" kindref="member">MemoryPool</ref>*<sp/>pool,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>left,</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>left_offset,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>right,</highlight></codeline>
<codeline lineno="1128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>right_offset,<sp/>int64_t<sp/>length,</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>out_offset);</highlight></codeline>
<codeline lineno="1130"><highlight class="normal"></highlight></codeline>
<codeline lineno="1134"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BitmapOr(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>left,<sp/>int64_t<sp/>left_offset,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>right,</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>right_offset,<sp/>int64_t<sp/>length,<sp/>int64_t<sp/>out_offset,<sp/>uint8_t*<sp/>out);</highlight></codeline>
<codeline lineno="1137"><highlight class="normal"></highlight></codeline>
<codeline lineno="1144"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="1145"><highlight class="normal">Result&lt;std::shared_ptr&lt;Buffer&gt;&gt;<sp/>BitmapXor(<ref refid="namespaceparquet_1a0d70b006a1f6feca958a1505b38a8cb7" kindref="member">MemoryPool</ref>*<sp/>pool,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>left,</highlight></codeline>
<codeline lineno="1146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>left_offset,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>right,</highlight></codeline>
<codeline lineno="1147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>right_offset,<sp/>int64_t<sp/>length,</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>out_offset);</highlight></codeline>
<codeline lineno="1149"><highlight class="normal"></highlight></codeline>
<codeline lineno="1153"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="1154"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>BitmapXor(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>left,<sp/>int64_t<sp/>left_offset,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>right,</highlight></codeline>
<codeline lineno="1155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>right_offset,<sp/>int64_t<sp/>length,<sp/>int64_t<sp/>out_offset,<sp/>uint8_t*<sp/>out);</highlight></codeline>
<codeline lineno="1156"><highlight class="normal"></highlight></codeline>
<codeline lineno="1159"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="1160"><highlight class="normal">Result&lt;std::shared_ptr&lt;Buffer&gt;&gt;<sp/>BitmapAllButOne(<ref refid="namespaceparquet_1a0d70b006a1f6feca958a1505b38a8cb7" kindref="member">MemoryPool</ref>*<sp/>pool,<sp/>int64_t<sp/>length,</highlight></codeline>
<codeline lineno="1161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>straggler_pos,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="keyword">class<sp/></highlight><highlight class="normal">BitsetStack<sp/>{</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>reference<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::vector&lt;bool&gt;::reference;</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Push(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"><sp/><sp/><sp/><sp/>offsets_.push_back(bit_count());</highlight></codeline>
<codeline lineno="1174"><highlight class="normal"><sp/><sp/><sp/><sp/>bits_.resize(bit_count()<sp/>+<sp/>size,<sp/>value);</highlight></codeline>
<codeline lineno="1175"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TopSize()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(offsets_.size()<sp/>==<sp/>0)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bit_count()<sp/>-<sp/>offsets_.back();</highlight></codeline>
<codeline lineno="1181"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1182"><highlight class="normal"></highlight></codeline>
<codeline lineno="1184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Pop()<sp/>{</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/>bits_.resize(offsets_.back());</highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/>offsets_.pop_back();</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator[](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bits_[offsets_.back()<sp/>+<sp/>i];<sp/>}</highlight></codeline>
<codeline lineno="1192"><highlight class="normal"></highlight></codeline>
<codeline lineno="1195"><highlight class="normal"><sp/><sp/>reference<sp/>operator[](</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bits_[offsets_.back()<sp/>+<sp/>i];<sp/>}</highlight></codeline>
<codeline lineno="1196"><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit_count()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(bits_.size());<sp/>}</highlight></codeline>
<codeline lineno="1199"><highlight class="normal"><sp/><sp/>std::vector&lt;bool&gt;<sp/>bits_;</highlight></codeline>
<codeline lineno="1200"><highlight class="normal"><sp/><sp/>std::vector&lt;int&gt;<sp/>offsets_;</highlight></codeline>
<codeline lineno="1201"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1202"><highlight class="normal"></highlight></codeline>
<codeline lineno="1203"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1204"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>arrow</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/arrow/cpp/src/arrow/util/bit_util.h"/>
  </compounddef>
</doxygen>
