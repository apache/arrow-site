<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classparquet_1_1_schema_descriptor" kind="class" language="C++" prot="public">
    <compoundname>parquet::SchemaDescriptor</compoundname>
    <includes refid="schema_8h" local="no">parquet/schema.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classparquet_1_1_schema_descriptor_1a8161aca614cf5a396f74ef9cf7d6fb1d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class ColumnDescriptor</definition>
        <argsstring></argsstring>
        <name>ColumnDescriptor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="466" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="466" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classparquet_1_1_schema_descriptor_1a8af4326d35e1358abc380734c50cb299" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceparquet_1_1schema_1a7fe5ee27b1dd5f12098ce3f3e6200b9e" kindref="member">schema::NodePtr</ref></type>
        <definition>schema::NodePtr parquet::SchemaDescriptor::schema_</definition>
        <argsstring></argsstring>
        <name>schema_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="469" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="469" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classparquet_1_1_schema_descriptor_1a83b3603f3d58ef274070560999e862bb" prot="private" static="no" mutable="no">
        <type>const <ref refid="classparquet_1_1schema_1_1_group_node" kindref="compound">schema::GroupNode</ref> *</type>
        <definition>const schema::GroupNode* parquet::SchemaDescriptor::group_node_</definition>
        <argsstring></argsstring>
        <name>group_node_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="471" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="471" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classparquet_1_1_schema_descriptor_1a7d9b89cf6c3242b33dd1cc6d628712be" prot="private" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="classparquet_1_1_column_descriptor" kindref="compound">ColumnDescriptor</ref> &gt;</type>
        <definition>std::vector&lt;ColumnDescriptor&gt; parquet::SchemaDescriptor::leaves_</definition>
        <argsstring></argsstring>
        <name>leaves_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="477" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="477" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classparquet_1_1_schema_descriptor_1a13a5799bf84ce532fd31f1ce7145bfe8" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; const <ref refid="classparquet_1_1schema_1_1_primitive_node" kindref="compound">schema::PrimitiveNode</ref> *, int &gt;</type>
        <definition>std::unordered_map&lt;const schema::PrimitiveNode*, int&gt; parquet::SchemaDescriptor::node_to_leaf_index_</definition>
        <argsstring></argsstring>
        <name>node_to_leaf_index_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="479" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="479" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classparquet_1_1_schema_descriptor_1a7f1628156e755013bd1aa7c4b6b2db48" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; int, <ref refid="namespaceparquet_1_1schema_1a7fe5ee27b1dd5f12098ce3f3e6200b9e" kindref="member">schema::NodePtr</ref> &gt;</type>
        <definition>std::unordered_map&lt;int, schema::NodePtr&gt; parquet::SchemaDescriptor::leaf_to_base_</definition>
        <argsstring></argsstring>
        <name>leaf_to_base_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="490" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="490" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classparquet_1_1_schema_descriptor_1aaf062c6dd50800e6aa1dca29b5f6ee9a" prot="private" static="no" mutable="no">
        <type>std::unordered_multimap&lt; std::string, int &gt;</type>
        <definition>std::unordered_multimap&lt;std::string, int&gt; parquet::SchemaDescriptor::leaf_to_idx_</definition>
        <argsstring></argsstring>
        <name>leaf_to_idx_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="493" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="493" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classparquet_1_1_schema_descriptor_1a5b5b5d29525cf4b5a7087abf83d4bb2a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>parquet::SchemaDescriptor::SchemaDescriptor</definition>
        <argsstring>()</argsstring>
        <name>SchemaDescriptor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="423" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="423" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_schema_descriptor_1aaf2ebb6a1a75db1411e41172b9cfb8e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>parquet::SchemaDescriptor::~SchemaDescriptor</definition>
        <argsstring>()</argsstring>
        <name>~SchemaDescriptor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="424" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="424" bodyend="424"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_schema_descriptor_1a4ef18c7950170060972819a5666883f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parquet::SchemaDescriptor::Init</definition>
        <argsstring>(std::unique_ptr&lt; schema::Node &gt; schema)</argsstring>
        <name>Init</name>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classparquet_1_1schema_1_1_node" kindref="compound">schema::Node</ref> &gt;</type>
          <declname>schema</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="427" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_schema_descriptor_1a1952bbb7646d155acb517ecf8dbbedad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parquet::SchemaDescriptor::Init</definition>
        <argsstring>(schema::NodePtr schema)</argsstring>
        <name>Init</name>
        <param>
          <type><ref refid="namespaceparquet_1_1schema_1a7fe5ee27b1dd5f12098ce3f3e6200b9e" kindref="member">schema::NodePtr</ref></type>
          <declname>schema</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="428" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_schema_descriptor_1a385c6f987c94201ba7754bf88ed87fda" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classparquet_1_1_column_descriptor" kindref="compound">ColumnDescriptor</ref> *</type>
        <definition>const ColumnDescriptor* parquet::SchemaDescriptor::Column</definition>
        <argsstring>(int i) const</argsstring>
        <name>Column</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="430" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_schema_descriptor_1a81d0269eb9106d1d815edf74033a1721" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int parquet::SchemaDescriptor::ColumnIndex</definition>
        <argsstring>(const std::string &amp;node_path) const</argsstring>
        <name>ColumnIndex</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>node_path</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="435" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_schema_descriptor_1a3b51b5c07a8c3638a7231c0a38e8c34b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int parquet::SchemaDescriptor::ColumnIndex</definition>
        <argsstring>(const schema::Node &amp;node) const</argsstring>
        <name>ColumnIndex</name>
        <param>
          <type>const <ref refid="classparquet_1_1schema_1_1_node" kindref="compound">schema::Node</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="437" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_schema_descriptor_1ab094a31c09d9187889576bfc8ee5dbc4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool parquet::SchemaDescriptor::Equals</definition>
        <argsstring>(const SchemaDescriptor &amp;other) const</argsstring>
        <name>Equals</name>
        <param>
          <type>const <ref refid="classparquet_1_1_schema_descriptor" kindref="compound">SchemaDescriptor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="439" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_schema_descriptor_1aea2e0d2c44d6773eaba4ef03cd01ee84" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int parquet::SchemaDescriptor::num_columns</definition>
        <argsstring>() const</argsstring>
        <name>num_columns</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="442" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="442" bodyend="442"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_schema_descriptor_1ab8a626e2aa87d99758c5dc65be561193" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespaceparquet_1_1schema_1a7fe5ee27b1dd5f12098ce3f3e6200b9e" kindref="member">schema::NodePtr</ref> &amp;</type>
        <definition>const schema::NodePtr&amp; parquet::SchemaDescriptor::schema_root</definition>
        <argsstring>() const</argsstring>
        <name>schema_root</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="444" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="444" bodyend="444"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_schema_descriptor_1a2847d78a5031d07706b6513c2b795364" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="classparquet_1_1schema_1_1_group_node" kindref="compound">schema::GroupNode</ref> *</type>
        <definition>const schema::GroupNode* parquet::SchemaDescriptor::group_node</definition>
        <argsstring>() const</argsstring>
        <name>group_node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="446" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="446" bodyend="446"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_schema_descriptor_1ad27c710f71205a1afad0c94fceb62710" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classparquet_1_1schema_1_1_node" kindref="compound">schema::Node</ref> *</type>
        <definition>const schema::Node* parquet::SchemaDescriptor::GetColumnRoot</definition>
        <argsstring>(int i) const</argsstring>
        <name>GetColumnRoot</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="449" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_schema_descriptor_1a71a8b8431afc0351e9aeb86076c359b5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; parquet::SchemaDescriptor::name</definition>
        <argsstring>() const</argsstring>
        <name>name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="451" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="451" bodyend="451"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_schema_descriptor_1a2cd4b724c2975824e5934c34bfbd4e2a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string parquet::SchemaDescriptor::ToString</definition>
        <argsstring>() const</argsstring>
        <name>ToString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="453" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_schema_descriptor_1a949fa956ef8e347bf49f7cd5dd61d6cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parquet::SchemaDescriptor::updateColumnOrders</definition>
        <argsstring>(const std::vector&lt; ColumnOrder &gt; &amp;column_orders)</argsstring>
        <name>updateColumnOrders</name>
        <param>
          <type>const std::vector&lt; <ref refid="classparquet_1_1_column_order" kindref="compound">ColumnOrder</ref> &gt; &amp;</type>
          <declname>column_orders</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="455" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_schema_descriptor_1aeac430ab5b791b870b6e736d031f5007" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int parquet::SchemaDescriptor::GetColumnIndex</definition>
        <argsstring>(const schema::PrimitiveNode &amp;node) const</argsstring>
        <name>GetColumnIndex</name>
        <param>
          <type>const <ref refid="classparquet_1_1schema_1_1_primitive_node" kindref="compound">schema::PrimitiveNode</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
<para>Return column index corresponding to a particular PrimitiveNode. </para>        </briefdescription>
        <detaileddescription>
<para>Returns -1 if not found </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="459" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_schema_descriptor_1a8f4b4f21423d1c02888656613eca23b9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool parquet::SchemaDescriptor::HasRepeatedFields</definition>
        <argsstring>() const</argsstring>
        <name>HasRepeatedFields</name>
        <briefdescription>
<para>Return true if any field or their children have REPEATED repetition type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="463" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classparquet_1_1_schema_descriptor_1a0d9e3ab59d0a63b4a14976164cf64402" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void parquet::SchemaDescriptor::BuildTree</definition>
        <argsstring>(const schema::NodePtr &amp;node, int16_t max_def_level, int16_t max_rep_level, const schema::NodePtr &amp;base)</argsstring>
        <name>BuildTree</name>
        <param>
          <type>const <ref refid="namespaceparquet_1_1schema_1a7fe5ee27b1dd5f12098ce3f3e6200b9e" kindref="member">schema::NodePtr</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>max_def_level</declname>
        </param>
        <param>
          <type>int16_t</type>
          <declname>max_rep_level</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceparquet_1_1schema_1a7fe5ee27b1dd5f12098ce3f3e6200b9e" kindref="member">schema::NodePtr</ref> &amp;</type>
          <declname>base</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="473" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/parquet/schema.h" line="421" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="421" bodyend="494"/>
    <listofallmembers>
      <member refid="classparquet_1_1_schema_descriptor_1a0d9e3ab59d0a63b4a14976164cf64402" prot="private" virt="non-virtual"><scope>parquet::SchemaDescriptor</scope><name>BuildTree</name></member>
      <member refid="classparquet_1_1_schema_descriptor_1a385c6f987c94201ba7754bf88ed87fda" prot="public" virt="non-virtual"><scope>parquet::SchemaDescriptor</scope><name>Column</name></member>
      <member refid="classparquet_1_1_schema_descriptor_1a81d0269eb9106d1d815edf74033a1721" prot="public" virt="non-virtual"><scope>parquet::SchemaDescriptor</scope><name>ColumnIndex</name></member>
      <member refid="classparquet_1_1_schema_descriptor_1a3b51b5c07a8c3638a7231c0a38e8c34b" prot="public" virt="non-virtual"><scope>parquet::SchemaDescriptor</scope><name>ColumnIndex</name></member>
      <member refid="classparquet_1_1_schema_descriptor_1ab094a31c09d9187889576bfc8ee5dbc4" prot="public" virt="non-virtual"><scope>parquet::SchemaDescriptor</scope><name>Equals</name></member>
      <member refid="classparquet_1_1_schema_descriptor_1aeac430ab5b791b870b6e736d031f5007" prot="public" virt="non-virtual"><scope>parquet::SchemaDescriptor</scope><name>GetColumnIndex</name></member>
      <member refid="classparquet_1_1_schema_descriptor_1ad27c710f71205a1afad0c94fceb62710" prot="public" virt="non-virtual"><scope>parquet::SchemaDescriptor</scope><name>GetColumnRoot</name></member>
      <member refid="classparquet_1_1_schema_descriptor_1a2847d78a5031d07706b6513c2b795364" prot="public" virt="non-virtual"><scope>parquet::SchemaDescriptor</scope><name>group_node</name></member>
      <member refid="classparquet_1_1_schema_descriptor_1a83b3603f3d58ef274070560999e862bb" prot="private" virt="non-virtual"><scope>parquet::SchemaDescriptor</scope><name>group_node_</name></member>
      <member refid="classparquet_1_1_schema_descriptor_1a8f4b4f21423d1c02888656613eca23b9" prot="public" virt="non-virtual"><scope>parquet::SchemaDescriptor</scope><name>HasRepeatedFields</name></member>
      <member refid="classparquet_1_1_schema_descriptor_1a4ef18c7950170060972819a5666883f7" prot="public" virt="non-virtual"><scope>parquet::SchemaDescriptor</scope><name>Init</name></member>
      <member refid="classparquet_1_1_schema_descriptor_1a1952bbb7646d155acb517ecf8dbbedad" prot="public" virt="non-virtual"><scope>parquet::SchemaDescriptor</scope><name>Init</name></member>
      <member refid="classparquet_1_1_schema_descriptor_1a7f1628156e755013bd1aa7c4b6b2db48" prot="private" virt="non-virtual"><scope>parquet::SchemaDescriptor</scope><name>leaf_to_base_</name></member>
      <member refid="classparquet_1_1_schema_descriptor_1aaf062c6dd50800e6aa1dca29b5f6ee9a" prot="private" virt="non-virtual"><scope>parquet::SchemaDescriptor</scope><name>leaf_to_idx_</name></member>
      <member refid="classparquet_1_1_schema_descriptor_1a7d9b89cf6c3242b33dd1cc6d628712be" prot="private" virt="non-virtual"><scope>parquet::SchemaDescriptor</scope><name>leaves_</name></member>
      <member refid="classparquet_1_1_schema_descriptor_1a71a8b8431afc0351e9aeb86076c359b5" prot="public" virt="non-virtual"><scope>parquet::SchemaDescriptor</scope><name>name</name></member>
      <member refid="classparquet_1_1_schema_descriptor_1a13a5799bf84ce532fd31f1ce7145bfe8" prot="private" virt="non-virtual"><scope>parquet::SchemaDescriptor</scope><name>node_to_leaf_index_</name></member>
      <member refid="classparquet_1_1_schema_descriptor_1aea2e0d2c44d6773eaba4ef03cd01ee84" prot="public" virt="non-virtual"><scope>parquet::SchemaDescriptor</scope><name>num_columns</name></member>
      <member refid="classparquet_1_1_schema_descriptor_1a8af4326d35e1358abc380734c50cb299" prot="private" virt="non-virtual"><scope>parquet::SchemaDescriptor</scope><name>schema_</name></member>
      <member refid="classparquet_1_1_schema_descriptor_1ab8a626e2aa87d99758c5dc65be561193" prot="public" virt="non-virtual"><scope>parquet::SchemaDescriptor</scope><name>schema_root</name></member>
      <member refid="classparquet_1_1_schema_descriptor_1a5b5b5d29525cf4b5a7087abf83d4bb2a" prot="public" virt="non-virtual"><scope>parquet::SchemaDescriptor</scope><name>SchemaDescriptor</name></member>
      <member refid="classparquet_1_1_schema_descriptor_1a2cd4b724c2975824e5934c34bfbd4e2a" prot="public" virt="non-virtual"><scope>parquet::SchemaDescriptor</scope><name>ToString</name></member>
      <member refid="classparquet_1_1_schema_descriptor_1a949fa956ef8e347bf49f7cd5dd61d6cb" prot="public" virt="non-virtual"><scope>parquet::SchemaDescriptor</scope><name>updateColumnOrders</name></member>
      <member refid="classparquet_1_1_schema_descriptor_1aaf2ebb6a1a75db1411e41172b9cfb8e2" prot="public" virt="non-virtual"><scope>parquet::SchemaDescriptor</scope><name>~SchemaDescriptor</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
