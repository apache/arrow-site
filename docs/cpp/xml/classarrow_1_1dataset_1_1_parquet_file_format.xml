<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1dataset_1_1_parquet_file_format" kind="class" language="C++" prot="public">
    <compoundname>arrow::dataset::ParquetFileFormat</compoundname>
    <basecompoundref refid="classarrow_1_1dataset_1_1_file_format" prot="public" virt="non-virtual">arrow::dataset::FileFormat</basecompoundref>
    <includes refid="file__parquet_8h" local="no">arrow/dataset/file_parquet.h</includes>
    <innerclass refid="structarrow_1_1dataset_1_1_parquet_file_format_1_1_reader_options" prot="public">arrow::dataset::ParquetFileFormat::ReaderOptions</innerclass>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classarrow_1_1dataset_1_1_parquet_file_format_1a8b7eb57089e822daf8a6aeff84f5f22d" prot="public" static="no" mutable="no">
        <type>struct <ref refid="structarrow_1_1dataset_1_1_parquet_file_format_1_1_reader_options" kindref="compound">arrow::dataset::ParquetFileFormat::ReaderOptions</ref></type>
        <definition>struct arrow::dataset::ParquetFileFormat::ReaderOptions  arrow::dataset::ParquetFileFormat::reader_options</definition>
        <argsstring></argsstring>
        <name>reader_options</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/file_parquet.h" line="82" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1dataset_1_1_parquet_file_format_1ad54357a11adc1972967749102934aecb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::dataset::ParquetFileFormat::ParquetFileFormat</definition>
        <argsstring>()=default</argsstring>
        <name>ParquetFileFormat</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/file_parquet.h" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1dataset_1_1_parquet_file_format_1ad901dddc3300c6fa70139915e6ad546d" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::dataset::ParquetFileFormat::ParquetFileFormat</definition>
        <argsstring>(const parquet::ReaderProperties &amp;reader_properties)</argsstring>
        <name>ParquetFileFormat</name>
        <param>
          <type>const <ref refid="classparquet_1_1_reader_properties" kindref="compound">parquet::ReaderProperties</ref> &amp;</type>
          <declname>reader_properties</declname>
        </param>
        <briefdescription>
<para>Convenience constructor which copies properties from a <ref refid="classparquet_1_1_reader_properties" kindref="compound">parquet::ReaderProperties</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>memory_pool will be ignored. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/file_parquet.h" line="49" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1dataset_1_1_parquet_file_format_1aaae04966393cc5cd4df9258c899d619c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string arrow::dataset::ParquetFileFormat::type_name</definition>
        <argsstring>() const override</argsstring>
        <name>type_name</name>
        <reimplements refid="classarrow_1_1dataset_1_1_file_format_1ab089438dfec369581face93a00fdeb08">type_name</reimplements>
        <briefdescription>
<para>The name identifying the kind of file format. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/file_parquet.h" line="51" column="1" bodyfile="/arrow/cpp/src/arrow/dataset/file_parquet.h" bodystart="51" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1dataset_1_1_parquet_file_format_1a93ef2febee8485cf77fd29b9b72ae61e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>bool arrow::dataset::ParquetFileFormat::splittable</definition>
        <argsstring>() const override</argsstring>
        <name>splittable</name>
        <reimplements refid="classarrow_1_1dataset_1_1_file_format_1ae48aca8d7f632fec22a4fe622e74d3a2">splittable</reimplements>
        <briefdescription>
<para>Return true if fragments of this format can benefit from parallel scanning. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/file_parquet.h" line="53" column="1" bodyfile="/arrow/cpp/src/arrow/dataset/file_parquet.h" bodystart="53" bodyend="53"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1dataset_1_1_parquet_file_format_1a841f1cc6362ebc7b769998485e698229" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; bool &gt;</type>
        <definition>Result&lt;bool&gt; arrow::dataset::ParquetFileFormat::IsSupported</definition>
        <argsstring>(const FileSource &amp;source) const override</argsstring>
        <name>IsSupported</name>
        <reimplements refid="classarrow_1_1dataset_1_1_file_format_1ae934a7b69d0402f36aecfa6037fa1343">IsSupported</reimplements>
        <param>
          <type>const <ref refid="classarrow_1_1dataset_1_1_file_source" kindref="compound">FileSource</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Indicate if the <ref refid="classarrow_1_1dataset_1_1_file_source" kindref="compound">FileSource</ref> is supported/readable by this format. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/file_parquet.h" line="84" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1dataset_1_1_parquet_file_format_1a1b86068edfb07a50b1f69a40ae6c46c7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;Schema&gt; &gt; arrow::dataset::ParquetFileFormat::Inspect</definition>
        <argsstring>(const FileSource &amp;source) const override</argsstring>
        <name>Inspect</name>
        <reimplements refid="classarrow_1_1dataset_1_1_file_format_1a9c4a4144a9dd512a9bb1a165bb3961c9">Inspect</reimplements>
        <param>
          <type>const <ref refid="classarrow_1_1dataset_1_1_file_source" kindref="compound">FileSource</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <briefdescription>
<para>Return the schema of the file if possible. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/file_parquet.h" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1dataset_1_1_parquet_file_format_1ae1922d40f00402a711c74767b2a9744a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; <ref refid="namespacearrow_1_1dataset_1a43ffb5f1e9c4b4e7a7b95e434e32a169" kindref="member">ScanTaskIterator</ref> &gt;</type>
        <definition>Result&lt;ScanTaskIterator&gt; arrow::dataset::ParquetFileFormat::ScanFile</definition>
        <argsstring>(const FileSource &amp;source, std::shared_ptr&lt; ScanOptions &gt; options, std::shared_ptr&lt; ScanContext &gt; context) const override</argsstring>
        <name>ScanFile</name>
        <reimplements refid="classarrow_1_1dataset_1_1_file_format_1a69e49cf6e143608d5dcf1d7cd7e3fbcf">ScanFile</reimplements>
        <param>
          <type>const <ref refid="classarrow_1_1dataset_1_1_file_source" kindref="compound">FileSource</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1dataset_1_1_scan_options" kindref="compound">ScanOptions</ref> &gt;</type>
          <declname>options</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="structarrow_1_1dataset_1_1_scan_context" kindref="compound">ScanContext</ref> &gt;</type>
          <declname>context</declname>
        </param>
        <briefdescription>
<para>Open a file for scanning. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/file_parquet.h" line="90" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1dataset_1_1_parquet_file_format_1afa1992a4dfd509b532950368955dbb2a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; <ref refid="namespacearrow_1_1dataset_1a43ffb5f1e9c4b4e7a7b95e434e32a169" kindref="member">ScanTaskIterator</ref> &gt;</type>
        <definition>Result&lt;ScanTaskIterator&gt; arrow::dataset::ParquetFileFormat::ScanFile</definition>
        <argsstring>(const FileSource &amp;source, std::shared_ptr&lt; ScanOptions &gt; options, std::shared_ptr&lt; ScanContext &gt; context, const std::vector&lt; int &gt; &amp;row_groups) const</argsstring>
        <name>ScanFile</name>
        <param>
          <type>const <ref refid="classarrow_1_1dataset_1_1_file_source" kindref="compound">FileSource</ref> &amp;</type>
          <declname>source</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1dataset_1_1_scan_options" kindref="compound">ScanOptions</ref> &gt;</type>
          <declname>options</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="structarrow_1_1dataset_1_1_scan_context" kindref="compound">ScanContext</ref> &gt;</type>
          <declname>context</declname>
        </param>
        <param>
          <type>const std::vector&lt; int &gt; &amp;</type>
          <declname>row_groups</declname>
        </param>
        <briefdescription>
<para>Open a file for scanning, restricted to the specified row groups. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/file_parquet.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1dataset_1_1_parquet_file_format_1a16fee7726aab2adac52b57248bf0f555" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1dataset_1_1_file_fragment" kindref="compound">FileFragment</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;FileFragment&gt; &gt; arrow::dataset::ParquetFileFormat::MakeFragment</definition>
        <argsstring>(FileSource source, std::shared_ptr&lt; ScanOptions &gt; options, std::shared_ptr&lt; Expression &gt; partition_expression) override</argsstring>
        <name>MakeFragment</name>
        <reimplements refid="classarrow_1_1dataset_1_1_file_format_1a7e9f25cdee62ce636f66077f88a0e34e">MakeFragment</reimplements>
        <param>
          <type><ref refid="classarrow_1_1dataset_1_1_file_source" kindref="compound">FileSource</ref></type>
          <declname>source</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1dataset_1_1_scan_options" kindref="compound">ScanOptions</ref> &gt;</type>
          <declname>options</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref> &gt;</type>
          <declname>partition_expression</declname>
        </param>
        <briefdescription>
<para>Open a fragment. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/file_parquet.h" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1dataset_1_1_parquet_file_format_1a3c5d2ab0b56fb39c8b1aef40dd5d3ad2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1dataset_1_1_file_fragment" kindref="compound">FileFragment</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;FileFragment&gt; &gt; arrow::dataset::ParquetFileFormat::MakeFragment</definition>
        <argsstring>(FileSource source, std::shared_ptr&lt; ScanOptions &gt; options, std::shared_ptr&lt; Expression &gt; partition_expression, std::vector&lt; int &gt; row_groups)</argsstring>
        <name>MakeFragment</name>
        <param>
          <type><ref refid="classarrow_1_1dataset_1_1_file_source" kindref="compound">FileSource</ref></type>
          <declname>source</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1dataset_1_1_scan_options" kindref="compound">ScanOptions</ref> &gt;</type>
          <declname>options</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref> &gt;</type>
          <declname>partition_expression</declname>
        </param>
        <param>
          <type>std::vector&lt; int &gt;</type>
          <declname>row_groups</declname>
        </param>
        <briefdescription>
<para>Create a <ref refid="classarrow_1_1dataset_1_1_fragment" kindref="compound">Fragment</ref>, restricted to the specified row groups. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/file_parquet.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1dataset_1_1_parquet_file_format_1a9dad5b1b3419fe164a7b444fe67f19fc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; <ref refid="namespacearrow_1_1dataset_1a6270dc3eca80575744d55456da9447c2" kindref="member">FragmentIterator</ref> &gt;</type>
        <definition>Result&lt;FragmentIterator&gt; arrow::dataset::ParquetFileFormat::GetRowGroupFragments</definition>
        <argsstring>(const ParquetFileFragment &amp;fragment, std::shared_ptr&lt; Expression &gt; extra_filter=scalar(true))</argsstring>
        <name>GetRowGroupFragments</name>
        <param>
          <type>const <ref refid="classarrow_1_1dataset_1_1_parquet_file_fragment" kindref="compound">ParquetFileFragment</ref> &amp;</type>
          <declname>fragment</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref> &gt;</type>
          <declname>extra_filter</declname>
          <defval><ref refid="namespacearrow_1_1dataset_1abbc0528fcaf8fe939da7b3784bb120d4" kindref="member">scalar</ref>(true)</defval>
        </param>
        <briefdescription>
<para>Split a <ref refid="classarrow_1_1dataset_1_1_parquet_file_fragment" kindref="compound">ParquetFileFragment</ref> into a <ref refid="classarrow_1_1dataset_1_1_fragment" kindref="compound">Fragment</ref> for each row group. </para>        </briefdescription>
        <detaileddescription>
<para>Row groups whose metadata contradicts the fragment&apos;s filter or the extra_filter will be excluded. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/file_parquet.h" line="114" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A <ref refid="classarrow_1_1dataset_1_1_file_format" kindref="compound">FileFormat</ref> implementation that reads from Parquet files. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="3455">
        <label>arrow::dataset::ParquetFileFormat</label>
        <link refid="classarrow_1_1dataset_1_1_parquet_file_format"/>
        <childnode refid="3456" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3456">
        <label>arrow::dataset::FileFormat</label>
        <link refid="classarrow_1_1dataset_1_1_file_format"/>
        <childnode refid="3457" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3457">
        <label>std::enable_shared_from_this&lt; FileFormat &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3458">
        <label>arrow::dataset::ParquetFileFormat</label>
        <link refid="classarrow_1_1dataset_1_1_parquet_file_format"/>
        <childnode refid="3459" relation="public-inheritance">
        </childnode>
        <childnode refid="3461" relation="usage">
          <edgelabel>reader_options</edgelabel>
        </childnode>
      </node>
      <node id="3459">
        <label>arrow::dataset::FileFormat</label>
        <link refid="classarrow_1_1dataset_1_1_file_format"/>
        <childnode refid="3460" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3461">
        <label>arrow::dataset::ParquetFileFormat::ReaderOptions</label>
        <link refid="structarrow_1_1dataset_1_1_parquet_file_format_1_1_reader_options"/>
      </node>
      <node id="3460">
        <label>std::enable_shared_from_this&lt; FileFormat &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/dataset/file_parquet.h" line="43" column="1" bodyfile="/arrow/cpp/src/arrow/dataset/file_parquet.h" bodystart="43" bodyend="117"/>
    <listofallmembers>
      <member refid="classarrow_1_1dataset_1_1_parquet_file_format_1a9dad5b1b3419fe164a7b444fe67f19fc" prot="public" virt="non-virtual"><scope>arrow::dataset::ParquetFileFormat</scope><name>GetRowGroupFragments</name></member>
      <member refid="classarrow_1_1dataset_1_1_parquet_file_format_1a1b86068edfb07a50b1f69a40ae6c46c7" prot="public" virt="virtual"><scope>arrow::dataset::ParquetFileFormat</scope><name>Inspect</name></member>
      <member refid="classarrow_1_1dataset_1_1_parquet_file_format_1a841f1cc6362ebc7b769998485e698229" prot="public" virt="virtual"><scope>arrow::dataset::ParquetFileFormat</scope><name>IsSupported</name></member>
      <member refid="classarrow_1_1dataset_1_1_parquet_file_format_1a16fee7726aab2adac52b57248bf0f555" prot="public" virt="virtual"><scope>arrow::dataset::ParquetFileFormat</scope><name>MakeFragment</name></member>
      <member refid="classarrow_1_1dataset_1_1_parquet_file_format_1a3c5d2ab0b56fb39c8b1aef40dd5d3ad2" prot="public" virt="non-virtual"><scope>arrow::dataset::ParquetFileFormat</scope><name>MakeFragment</name></member>
      <member refid="classarrow_1_1dataset_1_1_file_format_1a67076dc3548ce3d4777f6de9883bd076" prot="public" virt="non-virtual" ambiguityscope="arrow::dataset::FileFormat::"><scope>arrow::dataset::ParquetFileFormat</scope><name>MakeFragment</name></member>
      <member refid="classarrow_1_1dataset_1_1_parquet_file_format_1ad54357a11adc1972967749102934aecb" prot="public" virt="non-virtual"><scope>arrow::dataset::ParquetFileFormat</scope><name>ParquetFileFormat</name></member>
      <member refid="classarrow_1_1dataset_1_1_parquet_file_format_1ad901dddc3300c6fa70139915e6ad546d" prot="public" virt="non-virtual"><scope>arrow::dataset::ParquetFileFormat</scope><name>ParquetFileFormat</name></member>
      <member refid="classarrow_1_1dataset_1_1_parquet_file_format_1a8b7eb57089e822daf8a6aeff84f5f22d" prot="public" virt="non-virtual"><scope>arrow::dataset::ParquetFileFormat</scope><name>reader_options</name></member>
      <member refid="classarrow_1_1dataset_1_1_parquet_file_format_1ae1922d40f00402a711c74767b2a9744a" prot="public" virt="virtual"><scope>arrow::dataset::ParquetFileFormat</scope><name>ScanFile</name></member>
      <member refid="classarrow_1_1dataset_1_1_parquet_file_format_1afa1992a4dfd509b532950368955dbb2a" prot="public" virt="non-virtual"><scope>arrow::dataset::ParquetFileFormat</scope><name>ScanFile</name></member>
      <member refid="classarrow_1_1dataset_1_1_parquet_file_format_1a93ef2febee8485cf77fd29b9b72ae61e" prot="public" virt="virtual"><scope>arrow::dataset::ParquetFileFormat</scope><name>splittable</name></member>
      <member refid="classarrow_1_1dataset_1_1_parquet_file_format_1aaae04966393cc5cd4df9258c899d619c" prot="public" virt="virtual"><scope>arrow::dataset::ParquetFileFormat</scope><name>type_name</name></member>
      <member refid="classarrow_1_1dataset_1_1_file_format_1ab0f9a714310dca7e354135697b3b5bb6" prot="public" virt="virtual"><scope>arrow::dataset::ParquetFileFormat</scope><name>WriteFragment</name></member>
      <member refid="classarrow_1_1dataset_1_1_file_format_1a80398ed921f651882dd0069423929b93" prot="public" virt="virtual"><scope>arrow::dataset::ParquetFileFormat</scope><name>~FileFormat</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
