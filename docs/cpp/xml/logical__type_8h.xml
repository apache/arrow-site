<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="logical__type_8h" kind="file" language="C++">
    <compoundname>logical_type.h</compoundname>
    <includes local="no">memory</includes>
    <includes local="no">string</includes>
    <includes refid="compute_2type__fwd_8h" local="yes">arrow/compute/type_fwd.h</includes>
    <includes refid="arrow_2util_2visibility_8h" local="yes">arrow/util/visibility.h</includes>
    <incdepgraph>
      <node id="4080">
        <label>cstdint</label>
      </node>
      <node id="4077">
        <label>arrow/type_fwd.h</label>
        <link refid="type__fwd_8h"/>
        <childnode refid="4074" relation="include">
        </childnode>
        <childnode refid="4075" relation="include">
        </childnode>
        <childnode refid="4078" relation="include">
        </childnode>
        <childnode refid="4079" relation="include">
        </childnode>
        <childnode refid="4081" relation="include">
        </childnode>
      </node>
      <node id="4075">
        <label>string</label>
      </node>
      <node id="4081">
        <label>arrow/util/visibility.h</label>
        <link refid="arrow_2util_2visibility_8h"/>
      </node>
      <node id="4076">
        <label>arrow/compute/type_fwd.h</label>
        <link refid="compute_2type__fwd_8h"/>
        <childnode refid="4074" relation="include">
        </childnode>
        <childnode refid="4077" relation="include">
        </childnode>
      </node>
      <node id="4078">
        <label>vector</label>
      </node>
      <node id="4073">
        <label>/arrow/cpp/src/arrow/compute/logical_type.h</label>
        <link refid="logical__type_8h"/>
        <childnode refid="4074" relation="include">
        </childnode>
        <childnode refid="4075" relation="include">
        </childnode>
        <childnode refid="4076" relation="include">
        </childnode>
        <childnode refid="4081" relation="include">
        </childnode>
      </node>
      <node id="4074">
        <label>memory</label>
      </node>
      <node id="4079">
        <label>arrow/util/macros.h</label>
        <link refid="macros_8h"/>
        <childnode refid="4080" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="classarrow_1_1compute_1_1_logical_type" prot="public">arrow::compute::LogicalType</innerclass>
    <innerclass refid="classarrow_1_1compute_1_1type_1_1_any" prot="public">arrow::compute::type::Any</innerclass>
    <innerclass refid="classarrow_1_1compute_1_1type_1_1_null" prot="public">arrow::compute::type::Null</innerclass>
    <innerclass refid="classarrow_1_1compute_1_1type_1_1_bool" prot="public">arrow::compute::type::Bool</innerclass>
    <innerclass refid="classarrow_1_1compute_1_1type_1_1_number" prot="public">arrow::compute::type::Number</innerclass>
    <innerclass refid="classarrow_1_1compute_1_1type_1_1_integer" prot="public">arrow::compute::type::Integer</innerclass>
    <innerclass refid="classarrow_1_1compute_1_1type_1_1_floating" prot="public">arrow::compute::type::Floating</innerclass>
    <innerclass refid="classarrow_1_1compute_1_1type_1_1_signed_integer" prot="public">arrow::compute::type::SignedInteger</innerclass>
    <innerclass refid="classarrow_1_1compute_1_1type_1_1_unsigned_integer" prot="public">arrow::compute::type::UnsignedInteger</innerclass>
    <innerclass refid="classarrow_1_1compute_1_1type_1_1_int8" prot="public">arrow::compute::type::Int8</innerclass>
    <innerclass refid="classarrow_1_1compute_1_1type_1_1_int16" prot="public">arrow::compute::type::Int16</innerclass>
    <innerclass refid="classarrow_1_1compute_1_1type_1_1_int32" prot="public">arrow::compute::type::Int32</innerclass>
    <innerclass refid="classarrow_1_1compute_1_1type_1_1_int64" prot="public">arrow::compute::type::Int64</innerclass>
    <innerclass refid="classarrow_1_1compute_1_1type_1_1_u_int8" prot="public">arrow::compute::type::UInt8</innerclass>
    <innerclass refid="classarrow_1_1compute_1_1type_1_1_u_int16" prot="public">arrow::compute::type::UInt16</innerclass>
    <innerclass refid="classarrow_1_1compute_1_1type_1_1_u_int32" prot="public">arrow::compute::type::UInt32</innerclass>
    <innerclass refid="classarrow_1_1compute_1_1type_1_1_u_int64" prot="public">arrow::compute::type::UInt64</innerclass>
    <innerclass refid="classarrow_1_1compute_1_1type_1_1_float16" prot="public">arrow::compute::type::Float16</innerclass>
    <innerclass refid="classarrow_1_1compute_1_1type_1_1_float32" prot="public">arrow::compute::type::Float32</innerclass>
    <innerclass refid="classarrow_1_1compute_1_1type_1_1_float64" prot="public">arrow::compute::type::Float64</innerclass>
    <innerclass refid="classarrow_1_1compute_1_1type_1_1_binary" prot="public">arrow::compute::type::Binary</innerclass>
    <innerclass refid="classarrow_1_1compute_1_1type_1_1_utf8" prot="public">arrow::compute::type::Utf8</innerclass>
    <innernamespace refid="namespacearrow">arrow</innernamespace>
    <innernamespace refid="namespacearrow_1_1compute">arrow::compute</innernamespace>
    <innernamespace refid="namespacearrow_1_1compute_1_1type">arrow::compute::type</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="logical__type_8h_1a051535b7667c1e2be11e027174d17d9d" prot="public" static="no">
        <name>SIMPLE_TYPE_FACTORY</name>
        <param><defname>NAME</defname></param>
        <initializer>ARROW_EXPORT LogicalTypePtr NAME();</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/logical_type.h" line="280" column="9" bodyfile="/arrow/cpp/src/arrow/compute/logical_type.h" bodystart="280" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Metadata<sp/>objects<sp/>for<sp/>creating<sp/>well-typed<sp/>expressions.<sp/>These<sp/>are<sp/>distinct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>from<sp/>(and<sp/>higher<sp/>level<sp/>than)<sp/>arrow::DataType<sp/>as<sp/>some<sp/>type<sp/>parameters<sp/>(like</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="comment">//<sp/>decimal<sp/>scale<sp/>and<sp/>precision)<sp/>may<sp/>not<sp/>be<sp/>known<sp/>at<sp/>expression<sp/>build<sp/>time,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="comment">//<sp/>these<sp/>are<sp/>resolved<sp/>later<sp/>on<sp/>evaluation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="compute_2type__fwd_8h" kindref="compound">arrow/compute/type_fwd.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="arrow_2util_2visibility_8h" kindref="compound">arrow/util/visibility.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacearrow" kindref="compound">arrow</ref><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref>;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">compute<sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Expr;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="42" refid="classarrow_1_1compute_1_1_logical_type" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1compute_1_1_logical_type" kindref="compound">LogicalType</ref><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="44" refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5b" kindref="member">Id</ref><sp/>{</highlight></codeline>
<codeline lineno="45" refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5babca4b86c9ed7b6f43fbc1cf13c676793" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5babca4b86c9ed7b6f43fbc1cf13c676793" kindref="member">ANY</ref>,</highlight></codeline>
<codeline lineno="46" refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5ba7495f08937cd5e7c27e996d793c594b9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5ba7495f08937cd5e7c27e996d793c594b9" kindref="member">NUMBER</ref>,</highlight></codeline>
<codeline lineno="47" refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5ba46579a4ab56c97114bd305af4df5f2c7" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5ba46579a4ab56c97114bd305af4df5f2c7" kindref="member">INTEGER</ref>,</highlight></codeline>
<codeline lineno="48" refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5bac4051027b212b18f3f84316719f81425" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5bac4051027b212b18f3f84316719f81425" kindref="member">SIGNED_INTEGER</ref>,</highlight></codeline>
<codeline lineno="49" refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5baa524b608afe91e40331637733786767e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5baa524b608afe91e40331637733786767e" kindref="member">UNSIGNED_INTEGER</ref>,</highlight></codeline>
<codeline lineno="50" refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5babb1f81391ec84ff2ce463e83e919ebbd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5babb1f81391ec84ff2ce463e83e919ebbd" kindref="member">FLOATING</ref>,</highlight></codeline>
<codeline lineno="51" refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5baa9b1f5a8eb5fbadfa2fb196778b0decc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5baa9b1f5a8eb5fbadfa2fb196778b0decc" kindref="member">NULL_</ref>,</highlight></codeline>
<codeline lineno="52" refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5ba9a78b9a3524aa5d4fd5b8c13f4e2e275" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5ba9a78b9a3524aa5d4fd5b8c13f4e2e275" kindref="member">BOOL</ref>,</highlight></codeline>
<codeline lineno="53" refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5ba3370cdae0344701df3bfedf425826799" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5ba3370cdae0344701df3bfedf425826799" kindref="member">UINT8</ref>,</highlight></codeline>
<codeline lineno="54" refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5ba4a8be975884c1fcfb232e22c335bdc1e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5ba4a8be975884c1fcfb232e22c335bdc1e" kindref="member">INT8</ref>,</highlight></codeline>
<codeline lineno="55" refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5baac673c823a61e8c1ee2101de554bddee" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5baac673c823a61e8c1ee2101de554bddee" kindref="member">UINT16</ref>,</highlight></codeline>
<codeline lineno="56" refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5ba22c791474b7b8d71440d57905c0e8698" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5ba22c791474b7b8d71440d57905c0e8698" kindref="member">INT16</ref>,</highlight></codeline>
<codeline lineno="57" refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5ba1e4b84e5a3ef68031c07e97ffbbe1e58" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5ba1e4b84e5a3ef68031c07e97ffbbe1e58" kindref="member">UINT32</ref>,</highlight></codeline>
<codeline lineno="58" refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5ba4a656e64912e4a04f8b23f66bfa2613d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5ba4a656e64912e4a04f8b23f66bfa2613d" kindref="member">INT32</ref>,</highlight></codeline>
<codeline lineno="59" refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5ba07ec2053045cdba50266d750b6ef3bfe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5ba07ec2053045cdba50266d750b6ef3bfe" kindref="member">UINT64</ref>,</highlight></codeline>
<codeline lineno="60" refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5ba6ec1921142e6ffe72fec962098c6e0ed" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5ba6ec1921142e6ffe72fec962098c6e0ed" kindref="member">INT64</ref>,</highlight></codeline>
<codeline lineno="61" refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5ba4f7e81d9276604761797b72e15271712" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5ba4f7e81d9276604761797b72e15271712" kindref="member">FLOAT16</ref>,</highlight></codeline>
<codeline lineno="62" refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5ba658bea8fa1ce1ec1284f5ecb769894bb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5ba658bea8fa1ce1ec1284f5ecb769894bb" kindref="member">FLOAT32</ref>,</highlight></codeline>
<codeline lineno="63" refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5ba13fa8d6586bdbe8b5745ec8c292e38d3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5ba13fa8d6586bdbe8b5745ec8c292e38d3" kindref="member">FLOAT64</ref>,</highlight></codeline>
<codeline lineno="64" refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5ba95abf86bc24083681808114e292eec56" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5ba95abf86bc24083681808114e292eec56" kindref="member">BINARY</ref>,</highlight></codeline>
<codeline lineno="65" refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5ba4dd61b2a7b198ea1b43d8feb5f9e3f88" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5ba4dd61b2a7b198ea1b43d8feb5f9e3f88" kindref="member">UTF8</ref>,</highlight></codeline>
<codeline lineno="66" refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5baff9d7c846f2b0df04e171dc9fa0eff8c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5baff9d7c846f2b0df04e171dc9fa0eff8c" kindref="member">DATE</ref>,</highlight></codeline>
<codeline lineno="67" refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5bac0c0e87bbfc88251b2b1c8913aade90e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5bac0c0e87bbfc88251b2b1c8913aade90e" kindref="member">TIME</ref>,</highlight></codeline>
<codeline lineno="68" refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5ba7de203e0d151374c525e779554b0d079" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5ba7de203e0d151374c525e779554b0d079" kindref="member">TIMESTAMP</ref>,</highlight></codeline>
<codeline lineno="69" refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5ba2594cee118f6142b4cd8e0fab23a7907" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5ba2594cee118f6142b4cd8e0fab23a7907" kindref="member">DECIMAL</ref>,</highlight></codeline>
<codeline lineno="70" refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5ba1122b0974d98f469069dda91483f2c11" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5ba1122b0974d98f469069dda91483f2c11" kindref="member">LIST</ref>,</highlight></codeline>
<codeline lineno="71" refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5ba2cc0f959970d25290b39234e254d470b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>STRUCT</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74" refid="classarrow_1_1compute_1_1_logical_type_1ae7dbbaad4f493149604b23417567d1b3" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5b" kindref="member">Id</ref><sp/><ref refid="classarrow_1_1compute_1_1_logical_type_1ae7dbbaad4f493149604b23417567d1b3" kindref="member">id</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>id_;<sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classarrow_1_1compute_1_1_logical_type" kindref="compound">LogicalType</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsInstance(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1_expr" kindref="compound">Expr</ref>&amp;<sp/>expr)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>FromArrow(const<sp/>::arrow::DataType&amp;<sp/>type,<sp/><ref refid="namespacearrow_1_1compute_1a21de3825cdde68e67cd591917584b21b" kindref="member">LogicalTypePtr</ref>*<sp/>out);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="88" refid="classarrow_1_1compute_1_1_logical_type_1a68a809fd54c7312b6458231d36558ce6" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1_logical_type_1a68a809fd54c7312b6458231d36558ce6" kindref="member">LogicalType</ref>(<ref refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5b" kindref="member">Id</ref><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">)<sp/>:<sp/>id_(id)<sp/>{}</highlight></codeline>
<codeline lineno="89" refid="classarrow_1_1compute_1_1_logical_type_1aae8b4d36d01c637177317596e8895fa4" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5b" kindref="member">Id</ref><sp/><ref refid="classarrow_1_1compute_1_1_logical_type_1aae8b4d36d01c637177317596e8895fa4" kindref="member">id_</ref>;</highlight></codeline>
<codeline lineno="90"><highlight class="normal">};</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92" refid="namespacearrow_1_1compute_1_1type" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">type<sp/>{</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="classarrow_1_1compute_1_1type_1_1_any" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_any" kindref="compound">Any</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1_logical_type" kindref="compound">LogicalType</ref><sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="97" refid="classarrow_1_1compute_1_1type_1_1_any_1a46ea019482e73754a84b311cdc46848e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_any_1a46ea019482e73754a84b311cdc46848e" kindref="member">Any</ref>()<sp/>:<sp/><ref refid="classarrow_1_1compute_1_1_logical_type" kindref="compound">LogicalType</ref>(<ref refid="classarrow_1_1compute_1_1_logical_type" kindref="compound">LogicalType</ref>::ANY)<sp/>{}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsInstance(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1_expr" kindref="compound">Expr</ref>&amp;<sp/>expr)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="100"><highlight class="normal">};</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="103" refid="classarrow_1_1compute_1_1type_1_1_null" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_null" kindref="compound">Null</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1_logical_type" kindref="compound">LogicalType</ref><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="105" refid="classarrow_1_1compute_1_1type_1_1_null_1afece357090e954e4bda9039422068ec9" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_null_1afece357090e954e4bda9039422068ec9" kindref="member">Null</ref>()<sp/>:<sp/><ref refid="classarrow_1_1compute_1_1_logical_type" kindref="compound">LogicalType</ref>(<ref refid="classarrow_1_1compute_1_1_logical_type" kindref="compound">LogicalType</ref>::NULL_)<sp/>{}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsInstance(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1_expr" kindref="compound">Expr</ref>&amp;<sp/>expr)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal">};</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="classarrow_1_1compute_1_1type_1_1_bool" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_bool" kindref="compound">Bool</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1_logical_type" kindref="compound">LogicalType</ref><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="113" refid="classarrow_1_1compute_1_1type_1_1_bool_1a9b0e1fdc5b090b2c625eb1ed8127bf04" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_bool_1a9b0e1fdc5b090b2c625eb1ed8127bf04" kindref="member">Bool</ref>()<sp/>:<sp/><ref refid="classarrow_1_1compute_1_1_logical_type" kindref="compound">LogicalType</ref>(<ref refid="classarrow_1_1compute_1_1_logical_type" kindref="compound">LogicalType</ref>::BOOL)<sp/>{}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsInstance(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1_expr" kindref="compound">Expr</ref>&amp;<sp/>expr)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="116"><highlight class="normal">};</highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="classarrow_1_1compute_1_1type_1_1_number" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_number" kindref="compound">Number</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1_logical_type" kindref="compound">LogicalType</ref><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="121" refid="classarrow_1_1compute_1_1type_1_1_number_1a43ddf92ddf6311edebc7815039b1a5ba" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_number_1a43ddf92ddf6311edebc7815039b1a5ba" kindref="member">Number</ref>()<sp/>:<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_number" kindref="compound">Number</ref>(<ref refid="classarrow_1_1compute_1_1_logical_type" kindref="compound">LogicalType</ref>::NUMBER)<sp/>{}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsInstance(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1_expr" kindref="compound">Expr</ref>&amp;<sp/>expr)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="126" refid="classarrow_1_1compute_1_1type_1_1_number_1ae56ec82b775424d3d4b930fad9bd0ed3" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_number_1ae56ec82b775424d3d4b930fad9bd0ed3" kindref="member">Number</ref>(<ref refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5b" kindref="member">Id</ref><sp/>type_id)<sp/>:<sp/><ref refid="classarrow_1_1compute_1_1_logical_type" kindref="compound">LogicalType</ref>(type_id)<sp/>{}</highlight></codeline>
<codeline lineno="127"><highlight class="normal">};</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="130" refid="classarrow_1_1compute_1_1type_1_1_integer" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_integer" kindref="compound">Integer</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_number" kindref="compound">Number</ref><sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="132" refid="classarrow_1_1compute_1_1type_1_1_integer_1a53d0dce4c127114299280e00dd54e34c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_integer_1a53d0dce4c127114299280e00dd54e34c" kindref="member">Integer</ref>()<sp/>:<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_integer" kindref="compound">Integer</ref>(<ref refid="classarrow_1_1compute_1_1_logical_type" kindref="compound">LogicalType</ref>::INTEGER)<sp/>{}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsInstance(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1_expr" kindref="compound">Expr</ref>&amp;<sp/>expr)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="137" refid="classarrow_1_1compute_1_1type_1_1_integer_1ade4bfa22eb3e7cd5ebae71148e9ed081" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_integer_1ade4bfa22eb3e7cd5ebae71148e9ed081" kindref="member">Integer</ref>(<ref refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5b" kindref="member">Id</ref><sp/>type_id)<sp/>:<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_number" kindref="compound">Number</ref>(type_id)<sp/>{}</highlight></codeline>
<codeline lineno="138"><highlight class="normal">};</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="141" refid="classarrow_1_1compute_1_1type_1_1_floating" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_floating" kindref="compound">Floating</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_number" kindref="compound">Number</ref><sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="143" refid="classarrow_1_1compute_1_1type_1_1_floating_1a69041009156946d57f955bf5a021e5cb" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_floating_1a69041009156946d57f955bf5a021e5cb" kindref="member">Floating</ref>()<sp/>:<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_floating" kindref="compound">Floating</ref>(<ref refid="classarrow_1_1compute_1_1_logical_type" kindref="compound">LogicalType</ref>::FLOATING)<sp/>{}</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsInstance(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1_expr" kindref="compound">Expr</ref>&amp;<sp/>expr)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="148" refid="classarrow_1_1compute_1_1type_1_1_floating_1a7d9803febc957063cd091f0f80dddcf4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_floating_1a7d9803febc957063cd091f0f80dddcf4" kindref="member">Floating</ref>(<ref refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5b" kindref="member">Id</ref><sp/>type_id)<sp/>:<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_number" kindref="compound">Number</ref>(type_id)<sp/>{}</highlight></codeline>
<codeline lineno="149"><highlight class="normal">};</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="152" refid="classarrow_1_1compute_1_1type_1_1_signed_integer" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_signed_integer" kindref="compound">SignedInteger</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_integer" kindref="compound">Integer</ref><sp/>{</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="154" refid="classarrow_1_1compute_1_1type_1_1_signed_integer_1a4010afcc779611936fe15a976cb64832" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_signed_integer_1a4010afcc779611936fe15a976cb64832" kindref="member">SignedInteger</ref>()<sp/>:<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_signed_integer" kindref="compound">SignedInteger</ref>(<ref refid="classarrow_1_1compute_1_1_logical_type" kindref="compound">LogicalType</ref>::SIGNED_INTEGER)<sp/>{}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsInstance(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1_expr" kindref="compound">Expr</ref>&amp;<sp/>expr)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="159" refid="classarrow_1_1compute_1_1type_1_1_signed_integer_1a7b951ff2d823ff0066fa1a73c8604756" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_signed_integer_1a7b951ff2d823ff0066fa1a73c8604756" kindref="member">SignedInteger</ref>(<ref refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5b" kindref="member">Id</ref><sp/>type_id)<sp/>:<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_integer" kindref="compound">Integer</ref>(type_id)<sp/>{}</highlight></codeline>
<codeline lineno="160"><highlight class="normal">};</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="163" refid="classarrow_1_1compute_1_1type_1_1_unsigned_integer" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_unsigned_integer" kindref="compound">UnsignedInteger</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_integer" kindref="compound">Integer</ref><sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="165" refid="classarrow_1_1compute_1_1type_1_1_unsigned_integer_1ab99dd35363b127334dc110acee52e804" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_unsigned_integer_1ab99dd35363b127334dc110acee52e804" kindref="member">UnsignedInteger</ref>()<sp/>:<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_unsigned_integer" kindref="compound">UnsignedInteger</ref>(<ref refid="classarrow_1_1compute_1_1_logical_type" kindref="compound">LogicalType</ref>::UNSIGNED_INTEGER)<sp/>{}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsInstance(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1_expr" kindref="compound">Expr</ref>&amp;<sp/>expr)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="170" refid="classarrow_1_1compute_1_1type_1_1_unsigned_integer_1a1aa821eecbe2a8fe08e4b8fc0e9db3e0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_unsigned_integer_1a1aa821eecbe2a8fe08e4b8fc0e9db3e0" kindref="member">UnsignedInteger</ref>(<ref refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5b" kindref="member">Id</ref><sp/>type_id)<sp/>:<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_integer" kindref="compound">Integer</ref>(type_id)<sp/>{}</highlight></codeline>
<codeline lineno="171"><highlight class="normal">};</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="174" refid="classarrow_1_1compute_1_1type_1_1_int8" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_int8" kindref="compound">Int8</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_signed_integer" kindref="compound">SignedInteger</ref><sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="176" refid="classarrow_1_1compute_1_1type_1_1_int8_1a3fae3633515b4c43827561284188cc90" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_int8_1a3fae3633515b4c43827561284188cc90" kindref="member">Int8</ref>()<sp/>:<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_signed_integer" kindref="compound">SignedInteger</ref>(<ref refid="classarrow_1_1compute_1_1_logical_type" kindref="compound">LogicalType</ref>::INT8)<sp/>{}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsInstance(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1_expr" kindref="compound">Expr</ref>&amp;<sp/>expr)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="179"><highlight class="normal">};</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="182" refid="classarrow_1_1compute_1_1type_1_1_int16" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_int16" kindref="compound">Int16</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_signed_integer" kindref="compound">SignedInteger</ref><sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="184" refid="classarrow_1_1compute_1_1type_1_1_int16_1a04e455af54957f9a1ffa529a9b3b82d1" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_int16_1a04e455af54957f9a1ffa529a9b3b82d1" kindref="member">Int16</ref>()<sp/>:<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_signed_integer" kindref="compound">SignedInteger</ref>(<ref refid="classarrow_1_1compute_1_1_logical_type" kindref="compound">LogicalType</ref>::INT16)<sp/>{}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsInstance(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1_expr" kindref="compound">Expr</ref>&amp;<sp/>expr)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="187"><highlight class="normal">};</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="190" refid="classarrow_1_1compute_1_1type_1_1_int32" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_int32" kindref="compound">Int32</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_signed_integer" kindref="compound">SignedInteger</ref><sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="192" refid="classarrow_1_1compute_1_1type_1_1_int32_1a06ba71f190f588817fade5bd45f09348" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_int32_1a06ba71f190f588817fade5bd45f09348" kindref="member">Int32</ref>()<sp/>:<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_signed_integer" kindref="compound">SignedInteger</ref>(<ref refid="classarrow_1_1compute_1_1_logical_type" kindref="compound">LogicalType</ref>::INT32)<sp/>{}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsInstance(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1_expr" kindref="compound">Expr</ref>&amp;<sp/>expr)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="195"><highlight class="normal">};</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="198" refid="classarrow_1_1compute_1_1type_1_1_int64" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_int64" kindref="compound">Int64</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_signed_integer" kindref="compound">SignedInteger</ref><sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="200" refid="classarrow_1_1compute_1_1type_1_1_int64_1a39e4f8b0108e84747eb0bf106b2bd011" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_int64_1a39e4f8b0108e84747eb0bf106b2bd011" kindref="member">Int64</ref>()<sp/>:<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_signed_integer" kindref="compound">SignedInteger</ref>(<ref refid="classarrow_1_1compute_1_1_logical_type" kindref="compound">LogicalType</ref>::INT64)<sp/>{}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsInstance(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1_expr" kindref="compound">Expr</ref>&amp;<sp/>expr)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="203"><highlight class="normal">};</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="206" refid="classarrow_1_1compute_1_1type_1_1_u_int8" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_u_int8" kindref="compound">UInt8</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_unsigned_integer" kindref="compound">UnsignedInteger</ref><sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="208" refid="classarrow_1_1compute_1_1type_1_1_u_int8_1aca8d2df6bccf2f58dd02ff1f1dedeab3" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_u_int8_1aca8d2df6bccf2f58dd02ff1f1dedeab3" kindref="member">UInt8</ref>()<sp/>:<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_unsigned_integer" kindref="compound">UnsignedInteger</ref>(<ref refid="classarrow_1_1compute_1_1_logical_type" kindref="compound">LogicalType</ref>::UINT8)<sp/>{}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsInstance(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1_expr" kindref="compound">Expr</ref>&amp;<sp/>expr)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="211"><highlight class="normal">};</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="214" refid="classarrow_1_1compute_1_1type_1_1_u_int16" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_u_int16" kindref="compound">UInt16</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_unsigned_integer" kindref="compound">UnsignedInteger</ref><sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="216" refid="classarrow_1_1compute_1_1type_1_1_u_int16_1a8185f7762e2d9ef42cc417cc7fdd60b2" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_u_int16_1a8185f7762e2d9ef42cc417cc7fdd60b2" kindref="member">UInt16</ref>()<sp/>:<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_unsigned_integer" kindref="compound">UnsignedInteger</ref>(<ref refid="classarrow_1_1compute_1_1_logical_type" kindref="compound">LogicalType</ref>::UINT16)<sp/>{}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsInstance(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1_expr" kindref="compound">Expr</ref>&amp;<sp/>expr)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="219"><highlight class="normal">};</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="222" refid="classarrow_1_1compute_1_1type_1_1_u_int32" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_u_int32" kindref="compound">UInt32</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_unsigned_integer" kindref="compound">UnsignedInteger</ref><sp/>{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="224" refid="classarrow_1_1compute_1_1type_1_1_u_int32_1a4254e5d9b86b3181c305256ea22da26f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_u_int32_1a4254e5d9b86b3181c305256ea22da26f" kindref="member">UInt32</ref>()<sp/>:<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_unsigned_integer" kindref="compound">UnsignedInteger</ref>(<ref refid="classarrow_1_1compute_1_1_logical_type" kindref="compound">LogicalType</ref>::UINT32)<sp/>{}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsInstance(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1_expr" kindref="compound">Expr</ref>&amp;<sp/>expr)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="227"><highlight class="normal">};</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="230" refid="classarrow_1_1compute_1_1type_1_1_u_int64" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_u_int64" kindref="compound">UInt64</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_unsigned_integer" kindref="compound">UnsignedInteger</ref><sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="232" refid="classarrow_1_1compute_1_1type_1_1_u_int64_1acdd933c4229536a64e3fca3529b0100b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_u_int64_1acdd933c4229536a64e3fca3529b0100b" kindref="member">UInt64</ref>()<sp/>:<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_unsigned_integer" kindref="compound">UnsignedInteger</ref>(<ref refid="classarrow_1_1compute_1_1_logical_type" kindref="compound">LogicalType</ref>::UINT64)<sp/>{}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsInstance(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1_expr" kindref="compound">Expr</ref>&amp;<sp/>expr)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="235"><highlight class="normal">};</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="238" refid="classarrow_1_1compute_1_1type_1_1_float16" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_float16" kindref="compound">Float16</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_floating" kindref="compound">Floating</ref><sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="240" refid="classarrow_1_1compute_1_1type_1_1_float16_1aef0c3bcf59b792058e70723f71205d01" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_float16_1aef0c3bcf59b792058e70723f71205d01" kindref="member">Float16</ref>()<sp/>:<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_floating" kindref="compound">Floating</ref>(<ref refid="classarrow_1_1compute_1_1_logical_type" kindref="compound">LogicalType</ref>::FLOAT16)<sp/>{}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsInstance(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1_expr" kindref="compound">Expr</ref>&amp;<sp/>expr)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="243"><highlight class="normal">};</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="246" refid="classarrow_1_1compute_1_1type_1_1_float32" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_float32" kindref="compound">Float32</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_floating" kindref="compound">Floating</ref><sp/>{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="248" refid="classarrow_1_1compute_1_1type_1_1_float32_1a79ae92484144b81a08ee1111e736b639" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_float32_1a79ae92484144b81a08ee1111e736b639" kindref="member">Float32</ref>()<sp/>:<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_floating" kindref="compound">Floating</ref>(<ref refid="classarrow_1_1compute_1_1_logical_type" kindref="compound">LogicalType</ref>::FLOAT32)<sp/>{}</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsInstance(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1_expr" kindref="compound">Expr</ref>&amp;<sp/>expr)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="251"><highlight class="normal">};</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="254" refid="classarrow_1_1compute_1_1type_1_1_float64" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_float64" kindref="compound">Float64</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_floating" kindref="compound">Floating</ref><sp/>{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="256" refid="classarrow_1_1compute_1_1type_1_1_float64_1a1823389b973a2cc661f280da82259ae8" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_float64_1a1823389b973a2cc661f280da82259ae8" kindref="member">Float64</ref>()<sp/>:<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_floating" kindref="compound">Floating</ref>(<ref refid="classarrow_1_1compute_1_1_logical_type" kindref="compound">LogicalType</ref>::FLOAT64)<sp/>{}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsInstance(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1_expr" kindref="compound">Expr</ref>&amp;<sp/>expr)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="259"><highlight class="normal">};</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="262" refid="classarrow_1_1compute_1_1type_1_1_binary" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_binary" kindref="compound">Binary</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1_logical_type" kindref="compound">LogicalType</ref><sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="264" refid="classarrow_1_1compute_1_1type_1_1_binary_1a4158410ec73b3ea804280e81a6eeda48" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_binary_1a4158410ec73b3ea804280e81a6eeda48" kindref="member">Binary</ref>()<sp/>:<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_binary" kindref="compound">Binary</ref>(<ref refid="classarrow_1_1compute_1_1_logical_type" kindref="compound">LogicalType</ref>::BINARY)<sp/>{}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsInstance(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1_expr" kindref="compound">Expr</ref>&amp;<sp/>expr)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="269" refid="classarrow_1_1compute_1_1type_1_1_binary_1a44676626684115b2e487d892e063a28e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_binary_1a44676626684115b2e487d892e063a28e" kindref="member">Binary</ref>(<ref refid="classarrow_1_1compute_1_1_logical_type_1a5d871b32b9c75a2f5b52e9904f707b5b" kindref="member">Id</ref><sp/>type_id)<sp/>:<sp/><ref refid="classarrow_1_1compute_1_1_logical_type" kindref="compound">LogicalType</ref>(type_id)<sp/>{}</highlight></codeline>
<codeline lineno="270"><highlight class="normal">};</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="273" refid="classarrow_1_1compute_1_1type_1_1_utf8" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_utf8" kindref="compound">Utf8</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_binary" kindref="compound">Binary</ref><sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="275" refid="classarrow_1_1compute_1_1type_1_1_utf8_1a6eb50b020b334f3a4122b89c2c8407b6" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1compute_1_1type_1_1_utf8_1a6eb50b020b334f3a4122b89c2c8407b6" kindref="member">Utf8</ref>()<sp/>:<sp/><ref refid="classarrow_1_1compute_1_1type_1_1_binary" kindref="compound">Binary</ref>(<ref refid="classarrow_1_1compute_1_1_logical_type" kindref="compound">LogicalType</ref>::UTF8)<sp/>{}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsInstance(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1compute_1_1_expr" kindref="compound">Expr</ref>&amp;<sp/>expr)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="278"><highlight class="normal">};</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280" refid="logical__type_8h_1a051535b7667c1e2be11e027174d17d9d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SIMPLE_TYPE_FACTORY(NAME)<sp/>ARROW_EXPORT<sp/>LogicalTypePtr<sp/>NAME();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><ref refid="logical__type_8h_1a051535b7667c1e2be11e027174d17d9d" kindref="member">SIMPLE_TYPE_FACTORY</ref>(any);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><ref refid="logical__type_8h_1a051535b7667c1e2be11e027174d17d9d" kindref="member">SIMPLE_TYPE_FACTORY</ref>(<ref refid="group__type-factories_1gaf642d53dac1a6b6b686fb5984d33bc9a" kindref="member">null</ref>);</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><ref refid="logical__type_8h_1a051535b7667c1e2be11e027174d17d9d" kindref="member">SIMPLE_TYPE_FACTORY</ref>(</highlight><highlight class="keywordtype">boolean</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><ref refid="logical__type_8h_1a051535b7667c1e2be11e027174d17d9d" kindref="member">SIMPLE_TYPE_FACTORY</ref>(number);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><ref refid="logical__type_8h_1a051535b7667c1e2be11e027174d17d9d" kindref="member">SIMPLE_TYPE_FACTORY</ref>(integer);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><ref refid="logical__type_8h_1a051535b7667c1e2be11e027174d17d9d" kindref="member">SIMPLE_TYPE_FACTORY</ref>(signed_integer);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><ref refid="logical__type_8h_1a051535b7667c1e2be11e027174d17d9d" kindref="member">SIMPLE_TYPE_FACTORY</ref>(unsigned_integer);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><ref refid="logical__type_8h_1a051535b7667c1e2be11e027174d17d9d" kindref="member">SIMPLE_TYPE_FACTORY</ref>(floating);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><ref refid="logical__type_8h_1a051535b7667c1e2be11e027174d17d9d" kindref="member">SIMPLE_TYPE_FACTORY</ref>(<ref refid="group__type-factories_1ga9c09bf26bc03f0fb0c84a0277215dd67" kindref="member">int8</ref>);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><ref refid="logical__type_8h_1a051535b7667c1e2be11e027174d17d9d" kindref="member">SIMPLE_TYPE_FACTORY</ref>(<ref refid="group__type-factories_1ga034c5c703e15039fe76af412d349734d" kindref="member">int16</ref>);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><ref refid="logical__type_8h_1a051535b7667c1e2be11e027174d17d9d" kindref="member">SIMPLE_TYPE_FACTORY</ref>(<ref refid="group__type-factories_1ga86f6bfe394347f77befa2143297ad541" kindref="member">int32</ref>);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><ref refid="logical__type_8h_1a051535b7667c1e2be11e027174d17d9d" kindref="member">SIMPLE_TYPE_FACTORY</ref>(<ref refid="group__type-factories_1ga733b16be653069b8d926529662e34e79" kindref="member">int64</ref>);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><ref refid="logical__type_8h_1a051535b7667c1e2be11e027174d17d9d" kindref="member">SIMPLE_TYPE_FACTORY</ref>(<ref refid="group__type-factories_1ga4891a423be213550cc24e8ebe830673f" kindref="member">uint8</ref>);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><ref refid="logical__type_8h_1a051535b7667c1e2be11e027174d17d9d" kindref="member">SIMPLE_TYPE_FACTORY</ref>(<ref refid="group__type-factories_1ga9f1e44bc2ab9b465b6e7b601eb48f0a0" kindref="member">uint16</ref>);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><ref refid="logical__type_8h_1a051535b7667c1e2be11e027174d17d9d" kindref="member">SIMPLE_TYPE_FACTORY</ref>(<ref refid="group__type-factories_1gae80e510cfb2931ac18c73cba0be6d894" kindref="member">uint32</ref>);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><ref refid="logical__type_8h_1a051535b7667c1e2be11e027174d17d9d" kindref="member">SIMPLE_TYPE_FACTORY</ref>(<ref refid="group__type-factories_1gae548d03275f4afaa97a269774ce6930c" kindref="member">uint64</ref>);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><ref refid="logical__type_8h_1a051535b7667c1e2be11e027174d17d9d" kindref="member">SIMPLE_TYPE_FACTORY</ref>(<ref refid="group__type-factories_1ga4fac9b6739876df09be8b82d70b26734" kindref="member">float16</ref>);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><ref refid="logical__type_8h_1a051535b7667c1e2be11e027174d17d9d" kindref="member">SIMPLE_TYPE_FACTORY</ref>(<ref refid="group__type-factories_1ga48fca9d26feda61c8255ec3c44a2078c" kindref="member">float32</ref>);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><ref refid="logical__type_8h_1a051535b7667c1e2be11e027174d17d9d" kindref="member">SIMPLE_TYPE_FACTORY</ref>(<ref refid="group__type-factories_1gab6f514320a9b037ab161fa97db73b970" kindref="member">float64</ref>);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><ref refid="logical__type_8h_1a051535b7667c1e2be11e027174d17d9d" kindref="member">SIMPLE_TYPE_FACTORY</ref>(<ref refid="group__type-factories_1ga66c3979f26a439e78d048bbac84a9232" kindref="member">binary</ref>);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><ref refid="logical__type_8h_1a051535b7667c1e2be11e027174d17d9d" kindref="member">SIMPLE_TYPE_FACTORY</ref>(<ref refid="group__type-factories_1ga63178820a26f6ecb894ad35963ca981a" kindref="member">utf8</ref>);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>SIMPLE_TYPE_FACTORY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>type</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>compute</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>arrow</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/arrow/cpp/src/arrow/compute/logical_type.h"/>
  </compounddef>
</doxygen>
