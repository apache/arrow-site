<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classgandiva_1_1_boolean_node" kind="class" language="C++" prot="public">
    <compoundname>gandiva::BooleanNode</compoundname>
    <basecompoundref refid="classgandiva_1_1_node" prot="public" virt="non-virtual">gandiva::Node</basecompoundref>
    <includes refid="node_8h" local="no">gandiva/node.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classgandiva_1_1_boolean_node_1a3464a51cbb7ae4a660ee6de4d9a9787b" prot="public" static="no">
        <name>ExprType</name>
        <enumvalue id="classgandiva_1_1_boolean_node_1a3464a51cbb7ae4a660ee6de4d9a9787ba3af99bccb16b74baee7b380be2ea9723" prot="public">
          <name>AND</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classgandiva_1_1_boolean_node_1a3464a51cbb7ae4a660ee6de4d9a9787baa7d73e9aab0627a1e884ead0f2c91982" prot="public">
          <name>OR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/node.h" line="188" column="1" bodyfile="/arrow/cpp/src/gandiva/node.h" bodystart="188" bodyend="188"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classgandiva_1_1_boolean_node_1aa1c731b8f70be565ac01e84fc794b34d" prot="private" static="no" mutable="no">
        <type><ref refid="classgandiva_1_1_boolean_node_1a3464a51cbb7ae4a660ee6de4d9a9787b" kindref="member">ExprType</ref></type>
        <definition>ExprType gandiva::BooleanNode::expr_type_</definition>
        <argsstring></argsstring>
        <name>expr_type_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/node.h" line="217" column="1" bodyfile="/arrow/cpp/src/gandiva/node.h" bodystart="217" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgandiva_1_1_boolean_node_1a0aae5b7f8fa293e094dfd59e1c61cb5a" prot="private" static="no" mutable="no">
        <type><ref refid="namespacegandiva_1ab396cd9ee14fd2c9a0ac0bffc034bd62" kindref="member">NodeVector</ref></type>
        <definition>NodeVector gandiva::BooleanNode::children_</definition>
        <argsstring></argsstring>
        <name>children_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/node.h" line="218" column="1" bodyfile="/arrow/cpp/src/gandiva/node.h" bodystart="218" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgandiva_1_1_boolean_node_1aa0d0896755d075610d0589a9ffcf381a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>gandiva::BooleanNode::BooleanNode</definition>
        <argsstring>(ExprType expr_type, const NodeVector &amp;children)</argsstring>
        <name>BooleanNode</name>
        <param>
          <type><ref refid="classgandiva_1_1_boolean_node_1a3464a51cbb7ae4a660ee6de4d9a9787b" kindref="member">ExprType</ref></type>
          <declname>expr_type</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegandiva_1ab396cd9ee14fd2c9a0ac0bffc034bd62" kindref="member">NodeVector</ref> &amp;</type>
          <declname>children</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/node.h" line="190" column="1" bodyfile="/arrow/cpp/src/gandiva/node.h" bodystart="190" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_boolean_node_1a84cce12a7ba0090a950c36f052d5d033" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>Status gandiva::BooleanNode::Accept</definition>
        <argsstring>(NodeVisitor &amp;visitor) const override</argsstring>
        <name>Accept</name>
        <reimplements refid="classgandiva_1_1_node_1a07a1ab1f2c7f363bdd27cbba8387ffa3">Accept</reimplements>
        <param>
          <type><ref refid="classgandiva_1_1_node_visitor" kindref="compound">NodeVisitor</ref> &amp;</type>
          <declname>visitor</declname>
        </param>
        <briefdescription>
<para>Derived classes should simply invoke the Visit api of the visitor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/node.h" line="193" column="1" bodyfile="/arrow/cpp/src/gandiva/node.h" bodystart="193" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_boolean_node_1a9f4cdcd4d03a9d7a7b13c2cd73ae22b5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classgandiva_1_1_boolean_node_1a3464a51cbb7ae4a660ee6de4d9a9787b" kindref="member">ExprType</ref></type>
        <definition>ExprType gandiva::BooleanNode::expr_type</definition>
        <argsstring>() const</argsstring>
        <name>expr_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/node.h" line="195" column="1" bodyfile="/arrow/cpp/src/gandiva/node.h" bodystart="195" bodyend="195"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_boolean_node_1a3adbe6bef1372013879de9a6afc8c4d9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespacegandiva_1ab396cd9ee14fd2c9a0ac0bffc034bd62" kindref="member">NodeVector</ref> &amp;</type>
        <definition>const NodeVector&amp; gandiva::BooleanNode::children</definition>
        <argsstring>() const</argsstring>
        <name>children</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/node.h" line="197" column="1" bodyfile="/arrow/cpp/src/gandiva/node.h" bodystart="197" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_boolean_node_1aa4077189da14b40fb36fbe4babc3e570" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string gandiva::BooleanNode::ToString</definition>
        <argsstring>() const override</argsstring>
        <name>ToString</name>
        <reimplements refid="classgandiva_1_1_node_1a7e458c306e2162546c96a9c8eea0eef6">ToString</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/node.h" line="199" column="1" bodyfile="/arrow/cpp/src/gandiva/node.h" bodystart="199" bodyend="214"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classgandiva_1_1_node" kindref="compound">Node</ref> in the expression tree, representing an and/or boolean expression. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="410">
        <label>gandiva::BooleanNode</label>
        <link refid="classgandiva_1_1_boolean_node"/>
        <childnode refid="411" relation="public-inheritance">
        </childnode>
      </node>
      <node id="411">
        <label>gandiva::Node</label>
        <link refid="classgandiva_1_1_node"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="412">
        <label>gandiva::BooleanNode</label>
        <link refid="classgandiva_1_1_boolean_node"/>
        <childnode refid="413" relation="public-inheritance">
        </childnode>
      </node>
      <node id="413">
        <label>gandiva::Node</label>
        <link refid="classgandiva_1_1_node"/>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/gandiva/node.h" line="186" column="1" bodyfile="/arrow/cpp/src/gandiva/node.h" bodystart="186" bodyend="219"/>
    <listofallmembers>
      <member refid="classgandiva_1_1_boolean_node_1a84cce12a7ba0090a950c36f052d5d033" prot="public" virt="virtual"><scope>gandiva::BooleanNode</scope><name>Accept</name></member>
      <member refid="classgandiva_1_1_boolean_node_1a3464a51cbb7ae4a660ee6de4d9a9787ba3af99bccb16b74baee7b380be2ea9723" prot="public" virt="non-virtual"><scope>gandiva::BooleanNode</scope><name>AND</name></member>
      <member refid="classgandiva_1_1_boolean_node_1aa0d0896755d075610d0589a9ffcf381a" prot="public" virt="non-virtual"><scope>gandiva::BooleanNode</scope><name>BooleanNode</name></member>
      <member refid="classgandiva_1_1_boolean_node_1a3adbe6bef1372013879de9a6afc8c4d9" prot="public" virt="non-virtual"><scope>gandiva::BooleanNode</scope><name>children</name></member>
      <member refid="classgandiva_1_1_boolean_node_1a0aae5b7f8fa293e094dfd59e1c61cb5a" prot="private" virt="non-virtual"><scope>gandiva::BooleanNode</scope><name>children_</name></member>
      <member refid="classgandiva_1_1_boolean_node_1a9f4cdcd4d03a9d7a7b13c2cd73ae22b5" prot="public" virt="non-virtual"><scope>gandiva::BooleanNode</scope><name>expr_type</name></member>
      <member refid="classgandiva_1_1_boolean_node_1aa1c731b8f70be565ac01e84fc794b34d" prot="private" virt="non-virtual"><scope>gandiva::BooleanNode</scope><name>expr_type_</name></member>
      <member refid="classgandiva_1_1_boolean_node_1a3464a51cbb7ae4a660ee6de4d9a9787b" prot="public" virt="non-virtual"><scope>gandiva::BooleanNode</scope><name>ExprType</name></member>
      <member refid="classgandiva_1_1_node_1abb254ba06af6ededc023d840cb4ae4ca" prot="public" virt="non-virtual"><scope>gandiva::BooleanNode</scope><name>Node</name></member>
      <member refid="classgandiva_1_1_boolean_node_1a3464a51cbb7ae4a660ee6de4d9a9787baa7d73e9aab0627a1e884ead0f2c91982" prot="public" virt="non-virtual"><scope>gandiva::BooleanNode</scope><name>OR</name></member>
      <member refid="classgandiva_1_1_node_1ab196d58f5e486a054ff5d49e1d932e83" prot="public" virt="non-virtual"><scope>gandiva::BooleanNode</scope><name>return_type</name></member>
      <member refid="classgandiva_1_1_node_1a01cea0ee791882a488f56df5780874df" prot="protected" virt="non-virtual"><scope>gandiva::BooleanNode</scope><name>return_type_</name></member>
      <member refid="classgandiva_1_1_boolean_node_1aa4077189da14b40fb36fbe4babc3e570" prot="public" virt="virtual"><scope>gandiva::BooleanNode</scope><name>ToString</name></member>
      <member refid="classgandiva_1_1_node_1a8bddcf2654584db4ea12ac393a87b0d3" prot="public" virt="virtual"><scope>gandiva::BooleanNode</scope><name>~Node</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
