<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1flight_1_1_flight_server_options" kind="class" language="C++" prot="public">
    <compoundname>arrow::flight::FlightServerOptions</compoundname>
    <includes refid="server_8h" local="no">arrow/flight/server.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classarrow_1_1flight_1_1_flight_server_options_1aa7faa740a57bce03c267148e43afd411" prot="public" static="no" mutable="no">
        <type><ref refid="structarrow_1_1flight_1_1_location" kindref="compound">Location</ref></type>
        <definition>Location arrow::flight::FlightServerOptions::location</definition>
        <argsstring></argsstring>
        <name>location</name>
        <briefdescription>
<para>The host &amp; port (or domain socket path) to listen on. </para>        </briefdescription>
        <detaileddescription>
<para>Use port 0 to bind to an available port. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/server.h" line="119" column="1" bodyfile="/arrow/cpp/src/arrow/flight/server.h" bodystart="119" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1flight_1_1_flight_server_options_1af3dff1faed9844a53f964275f312d5d8" prot="public" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1flight_1_1_server_auth_handler" kindref="compound">ServerAuthHandler</ref> &gt;</type>
        <definition>std::shared_ptr&lt;ServerAuthHandler&gt; arrow::flight::FlightServerOptions::auth_handler</definition>
        <argsstring></argsstring>
        <name>auth_handler</name>
        <briefdescription>
<para>The authentication handler to use. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/server.h" line="121" column="1" bodyfile="/arrow/cpp/src/arrow/flight/server.h" bodystart="121" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1flight_1_1_flight_server_options_1a931bfee1d34d25729f25d681210a4825" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="structarrow_1_1flight_1_1_cert_key_pair" kindref="compound">CertKeyPair</ref> &gt;</type>
        <definition>std::vector&lt;CertKeyPair&gt; arrow::flight::FlightServerOptions::tls_certificates</definition>
        <argsstring></argsstring>
        <name>tls_certificates</name>
        <briefdescription>
<para>A list of TLS certificate+key pairs to use. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/server.h" line="123" column="1" bodyfile="/arrow/cpp/src/arrow/flight/server.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1flight_1_1_flight_server_options_1a8ce3177a754ac0ca7750b37aae56e9f3" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::pair&lt; std::string, std::shared_ptr&lt; <ref refid="classarrow_1_1flight_1_1_server_middleware_factory" kindref="compound">ServerMiddlewareFactory</ref> &gt; &gt; &gt;</type>
        <definition>std::vector&lt;std::pair&lt;std::string, std::shared_ptr&lt;ServerMiddlewareFactory&gt; &gt; &gt; arrow::flight::FlightServerOptions::middleware</definition>
        <argsstring></argsstring>
        <name>middleware</name>
        <briefdescription>
<para>A list of server middleware to apply, along with a key to identify them by. </para>        </briefdescription>
        <detaileddescription>
<para>Middleware are always applied in the order provided. Duplicate keys are an error. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/server.h" line="131" column="1" bodyfile="/arrow/cpp/src/arrow/flight/server.h" bodystart="131" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1flight_1_1_flight_server_options_1ac80e7f3b8317bce30cf0ffc6623dfe30" prot="public" static="no" mutable="no">
        <type>std::function&lt; void(void *)&gt;</type>
        <definition>std::function&lt;void(void*)&gt; arrow::flight::FlightServerOptions::builder_hook</definition>
        <argsstring></argsstring>
        <name>builder_hook</name>
        <briefdescription>
<para>A Flight implementation-specific callback to customize transport-specific options. </para>        </briefdescription>
        <detaileddescription>
<para>Not guaranteed to be called. The type of the parameter is specific to the Flight implementation. Users should take care to link to the same transport implementation as Flight to avoid runtime problems. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/server.h" line="140" column="1" bodyfile="/arrow/cpp/src/arrow/flight/server.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_server_options_1acf95a9ece866a0bc989748b8a7da4037" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::flight::FlightServerOptions::FlightServerOptions</definition>
        <argsstring>(const Location &amp;location_)</argsstring>
        <name>FlightServerOptions</name>
        <param>
          <type>const <ref refid="structarrow_1_1flight_1_1_location" kindref="compound">Location</ref> &amp;</type>
          <declname>location_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/server.h" line="113" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1flight_1_1_flight_server_options_1a4bb7ecf6a74cc35b0c509c7702f9f2f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::flight::FlightServerOptions::~FlightServerOptions</definition>
        <argsstring>()</argsstring>
        <name>~FlightServerOptions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/server.h" line="115" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="1918">
        <label>arrow::flight::FlightServerOptions</label>
        <link refid="classarrow_1_1flight_1_1_flight_server_options"/>
        <childnode refid="1919" relation="usage">
          <edgelabel>location</edgelabel>
        </childnode>
      </node>
      <node id="1919">
        <label>arrow::flight::Location</label>
        <link refid="structarrow_1_1flight_1_1_location"/>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/flight/server.h" line="111" column="1" bodyfile="/arrow/cpp/src/arrow/flight/server.h" bodystart="111" bodyend="141"/>
    <listofallmembers>
      <member refid="classarrow_1_1flight_1_1_flight_server_options_1af3dff1faed9844a53f964275f312d5d8" prot="public" virt="non-virtual"><scope>arrow::flight::FlightServerOptions</scope><name>auth_handler</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_server_options_1ac80e7f3b8317bce30cf0ffc6623dfe30" prot="public" virt="non-virtual"><scope>arrow::flight::FlightServerOptions</scope><name>builder_hook</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_server_options_1acf95a9ece866a0bc989748b8a7da4037" prot="public" virt="non-virtual"><scope>arrow::flight::FlightServerOptions</scope><name>FlightServerOptions</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_server_options_1aa7faa740a57bce03c267148e43afd411" prot="public" virt="non-virtual"><scope>arrow::flight::FlightServerOptions</scope><name>location</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_server_options_1a8ce3177a754ac0ca7750b37aae56e9f3" prot="public" virt="non-virtual"><scope>arrow::flight::FlightServerOptions</scope><name>middleware</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_server_options_1a931bfee1d34d25729f25d681210a4825" prot="public" virt="non-virtual"><scope>arrow::flight::FlightServerOptions</scope><name>tls_certificates</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_server_options_1a4bb7ecf6a74cc35b0c509c7702f9f2f6" prot="public" virt="non-virtual"><scope>arrow::flight::FlightServerOptions</scope><name>~FlightServerOptions</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
