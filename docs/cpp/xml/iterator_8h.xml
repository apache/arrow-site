<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="iterator_8h" kind="file" language="C++">
    <compoundname>iterator.h</compoundname>
    <includes local="no">cassert</includes>
    <includes local="no">functional</includes>
    <includes local="no">memory</includes>
    <includes local="no">tuple</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes refid="result_8h" local="yes">arrow/result.h</includes>
    <includes refid="status_8h" local="yes">arrow/status.h</includes>
    <includes refid="util_2compare_8h" local="yes">arrow/util/compare.h</includes>
    <includes refid="functional_8h" local="yes">arrow/util/functional.h</includes>
    <includes refid="macros_8h" local="yes">arrow/util/macros.h</includes>
    <includes refid="optional_8h" local="yes">arrow/util/optional.h</includes>
    <includes refid="arrow_2util_2visibility_8h" local="yes">arrow/util/visibility.h</includes>
    <includedby refid="dataset__internal_8h" local="yes">/arrow/cpp/src/arrow/dataset/dataset_internal.h</includedby>
    <includedby refid="future__iterator_8h" local="yes">/arrow/cpp/src/arrow/util/future_iterator.h</includedby>
    <incdepgraph>
      <node id="12769">
        <label>arrow/util/compare.h</label>
        <link refid="util_2compare_8h"/>
        <childnode refid="12758" relation="include">
        </childnode>
        <childnode refid="12760" relation="include">
        </childnode>
        <childnode refid="12761" relation="include">
        </childnode>
        <childnode refid="12770" relation="include">
        </childnode>
      </node>
      <node id="12757">
        <label>functional</label>
      </node>
      <node id="12771">
        <label>cstdint</label>
      </node>
      <node id="12766">
        <label>arrow/status.h</label>
        <link refid="status_8h"/>
        <childnode refid="12767" relation="include">
        </childnode>
        <childnode refid="12768" relation="include">
        </childnode>
        <childnode refid="12758" relation="include">
        </childnode>
        <childnode refid="12765" relation="include">
        </childnode>
        <childnode refid="12761" relation="include">
        </childnode>
        <childnode refid="12769" relation="include">
        </childnode>
        <childnode refid="12770" relation="include">
        </childnode>
        <childnode refid="12772" relation="include">
        </childnode>
        <childnode refid="12774" relation="include">
        </childnode>
      </node>
      <node id="12775">
        <label>arrow/util/functional.h</label>
        <link refid="functional_8h"/>
        <childnode refid="12759" relation="include">
        </childnode>
        <childnode refid="12760" relation="include">
        </childnode>
        <childnode refid="12770" relation="include">
        </childnode>
      </node>
      <node id="12776">
        <label>arrow/util/optional.h</label>
        <link refid="optional_8h"/>
        <childnode refid="12777" relation="include">
        </childnode>
      </node>
      <node id="12756">
        <label>cassert</label>
      </node>
      <node id="12765">
        <label>string</label>
      </node>
      <node id="12773">
        <label>ostream</label>
      </node>
      <node id="12774">
        <label>arrow/util/visibility.h</label>
        <link refid="arrow_2util_2visibility_8h"/>
      </node>
      <node id="12759">
        <label>tuple</label>
      </node>
      <node id="12762">
        <label>vector</label>
      </node>
      <node id="12764">
        <label>new</label>
      </node>
      <node id="12761">
        <label>utility</label>
      </node>
      <node id="12777">
        <label>arrow/vendored/optional.hpp</label>
      </node>
      <node id="12768">
        <label>iosfwd</label>
      </node>
      <node id="12763">
        <label>arrow/result.h</label>
        <link refid="result_8h"/>
        <childnode refid="12764" relation="include">
        </childnode>
        <childnode refid="12765" relation="include">
        </childnode>
        <childnode refid="12760" relation="include">
        </childnode>
        <childnode refid="12761" relation="include">
        </childnode>
        <childnode refid="12766" relation="include">
        </childnode>
        <childnode refid="12769" relation="include">
        </childnode>
      </node>
      <node id="12755">
        <label>/arrow/cpp/src/arrow/util/iterator.h</label>
        <link refid="iterator_8h"/>
        <childnode refid="12756" relation="include">
        </childnode>
        <childnode refid="12757" relation="include">
        </childnode>
        <childnode refid="12758" relation="include">
        </childnode>
        <childnode refid="12759" relation="include">
        </childnode>
        <childnode refid="12760" relation="include">
        </childnode>
        <childnode refid="12761" relation="include">
        </childnode>
        <childnode refid="12762" relation="include">
        </childnode>
        <childnode refid="12763" relation="include">
        </childnode>
        <childnode refid="12766" relation="include">
        </childnode>
        <childnode refid="12769" relation="include">
        </childnode>
        <childnode refid="12775" relation="include">
        </childnode>
        <childnode refid="12770" relation="include">
        </childnode>
        <childnode refid="12776" relation="include">
        </childnode>
        <childnode refid="12774" relation="include">
        </childnode>
      </node>
      <node id="12760">
        <label>type_traits</label>
      </node>
      <node id="12767">
        <label>cstring</label>
      </node>
      <node id="12772">
        <label>arrow/util/string_builder.h</label>
        <link refid="string__builder_8h"/>
        <childnode refid="12758" relation="include">
        </childnode>
        <childnode refid="12773" relation="include">
        </childnode>
        <childnode refid="12765" relation="include">
        </childnode>
        <childnode refid="12761" relation="include">
        </childnode>
        <childnode refid="12774" relation="include">
        </childnode>
      </node>
      <node id="12758">
        <label>memory</label>
      </node>
      <node id="12770">
        <label>arrow/util/macros.h</label>
        <link refid="macros_8h"/>
        <childnode refid="12771" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="12781">
        <label>/arrow/cpp/src/arrow/util/future_iterator.h</label>
        <link refid="future__iterator_8h"/>
      </node>
      <node id="12779">
        <label>/arrow/cpp/src/arrow/dataset/dataset_internal.h</label>
        <link refid="dataset__internal_8h"/>
        <childnode refid="12780" relation="include">
        </childnode>
      </node>
      <node id="12780">
        <label>/arrow/cpp/src/arrow/dataset/scanner_internal.h</label>
        <link refid="scanner__internal_8h"/>
      </node>
      <node id="12778">
        <label>/arrow/cpp/src/arrow/util/iterator.h</label>
        <link refid="iterator_8h"/>
        <childnode refid="12779" relation="include">
        </childnode>
        <childnode refid="12781" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classarrow_1_1_iterator" prot="public">arrow::Iterator</innerclass>
    <innerclass refid="structarrow_1_1_iteration_traits" prot="public">arrow::IterationTraits</innerclass>
    <innerclass refid="structarrow_1_1_iteration_traits_3_01util_1_1optional_3_01_t_01_4_01_4" prot="public">arrow::IterationTraits&lt; util::optional&lt; T &gt; &gt;</innerclass>
    <innerclass refid="classarrow_1_1_iterator" prot="public">arrow::Iterator</innerclass>
    <innerclass refid="classarrow_1_1_iterator_1_1_range_iterator" prot="public">arrow::Iterator::RangeIterator</innerclass>
    <innerclass refid="structarrow_1_1_iteration_traits_3_01_iterator_3_01_t_01_4_01_4" prot="public">arrow::IterationTraits&lt; Iterator&lt; T &gt; &gt;</innerclass>
    <innerclass refid="classarrow_1_1_function_iterator" prot="public">arrow::FunctionIterator</innerclass>
    <innerclass refid="classarrow_1_1_vector_iterator" prot="public">arrow::VectorIterator</innerclass>
    <innerclass refid="classarrow_1_1_vector_optional_iterator" prot="public">arrow::VectorOptionalIterator</innerclass>
    <innerclass refid="classarrow_1_1_map_iterator" prot="public">arrow::MapIterator</innerclass>
    <innerclass refid="structarrow_1_1_filter_iterator" prot="public">arrow::FilterIterator</innerclass>
    <innerclass refid="classarrow_1_1_filter_iterator_1_1_impl" prot="public">arrow::FilterIterator::Impl</innerclass>
    <innerclass refid="classarrow_1_1_flatten_iterator" prot="public">arrow::FlattenIterator</innerclass>
    <innerclass refid="classarrow_1_1_readahead_iterator" prot="public">arrow::ReadaheadIterator</innerclass>
    <innernamespace refid="namespacearrow">arrow</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cassert&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;tuple&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="result_8h" kindref="compound">arrow/result.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="status_8h" kindref="compound">arrow/status.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="util_2compare_8h" kindref="compound">arrow/util/compare.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="functional_8h" kindref="compound">arrow/util/functional.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="macros_8h" kindref="compound">arrow/util/macros.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="optional_8h" kindref="compound">arrow/util/optional.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="arrow_2util_2visibility_8h" kindref="compound">arrow/util/visibility.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacearrow" kindref="compound">arrow</ref><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Iterator;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="42" refid="structarrow_1_1_iteration_traits" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structarrow_1_1_iteration_traits" kindref="compound">IterationTraits</ref><sp/>{</highlight></codeline>
<codeline lineno="46" refid="structarrow_1_1_iteration_traits_1a3ec3a949aefcc0361ae4cc263faf4a8b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>T<sp/><ref refid="structarrow_1_1_iteration_traits_1a3ec3a949aefcc0361ae4cc263faf4a8b" kindref="member">End</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>T(<ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>);<sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal">};</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="50" refid="structarrow_1_1_iteration_traits_3_01util_1_1optional_3_01_t_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structarrow_1_1_iteration_traits" kindref="compound">IterationTraits</ref>&lt;util::<ref refid="namespacearrow_1_1util_1a37597d23d580458d4547f817e2943744" kindref="member">optional</ref>&lt;T&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="54" refid="structarrow_1_1_iteration_traits_3_01util_1_1optional_3_01_t_01_4_01_4_1a0826dc95d96eb73620a6b2ea008184aa" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="namespacearrow_1_1util_1a37597d23d580458d4547f817e2943744" kindref="member">util::optional&lt;T&gt;</ref><sp/><ref refid="structarrow_1_1_iteration_traits_3_01util_1_1optional_3_01_t_01_4_01_4_1a0826dc95d96eb73620a6b2ea008184aa" kindref="member">End</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>util::nullopt;<sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(bkietz)<sp/>The<sp/>range-for<sp/>loop<sp/>over<sp/>Iterator&lt;optional&lt;T&gt;&gt;<sp/>yields</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Result&lt;optional&lt;T&gt;&gt;<sp/>which<sp/>is<sp/>unnecessary<sp/>(since<sp/>only<sp/>the<sp/>unyielded<sp/>end<sp/>optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>nullopt.<sp/>Add<sp/>IterationTraits::GetRangeElement()<sp/>to<sp/>handle<sp/>this<sp/>case</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">};</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classarrow_1_1_iterator" kindref="compound">Iterator</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1util_1_1_equality_comparable" kindref="compound">util::EqualityComparable</ref>&lt;Iterator&lt;T&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Wrapped&gt;</highlight></codeline>
<codeline lineno="77" refid="classarrow_1_1_iterator_1ae8f407244068440da5baafec1e163423" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_iterator_1ae8f407244068440da5baafec1e163423" kindref="member">Iterator</ref>(Wrapped<sp/>has_next)</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>ptr_(new<sp/>Wrapped(<ref refid="namespacestd" kindref="compound">std</ref>::move(has_next)),<sp/>Delete&lt;Wrapped&gt;),<sp/>next_(Next&lt;Wrapped&gt;)<sp/>{}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="classarrow_1_1_iterator_1a0397f35684cd711325e89ae0cbbaaf5d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_iterator_1a0397f35684cd711325e89ae0cbbaaf5d" kindref="member">Iterator</ref>()<sp/>:<sp/>ptr_(<ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>,<sp/>[](void*)<sp/>{})<sp/>{}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="classarrow_1_1_iterator_1aa45bdd8baa769270634c8d28ca8b2623" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;T&gt;</ref><sp/><ref refid="classarrow_1_1_iterator_1aa45bdd8baa769270634c8d28ca8b2623" kindref="member">Next</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>next_(ptr_.get());<sp/>}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Visitor&gt;</highlight></codeline>
<codeline lineno="90" refid="classarrow_1_1_iterator_1ad4ad044d48e8981dd542b1b9f1b97c9e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_iterator_1ad4ad044d48e8981dd542b1b9f1b97c9e" kindref="member">Visit</ref>(Visitor&amp;&amp;<sp/>visitor)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>end<sp/>=<sp/><ref refid="structarrow_1_1_iteration_traits_1a3ec3a949aefcc0361ae4cc263faf4a8b" kindref="member">IterationTraits&lt;T&gt;::End</ref>();</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="result_8h_1aaf9efe9debc83022fad249a0fa56e680" kindref="member">ARROW_ASSIGN_OR_RAISE</ref>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value,<sp/>Next());</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(value<sp/>==<sp/>end)<sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(visitor(std::move(value)));</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1a5c0b0031db6eeec3dcc70485d24cfe03" kindref="member">Status::OK</ref>();</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="107" refid="classarrow_1_1_iterator_1ac1d269d7e0f7751dd7fe859c4e268921" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_iterator_1ac1d269d7e0f7751dd7fe859c4e268921" kindref="member">Equals</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_iterator" kindref="compound">Iterator</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr_<sp/>==<sp/>other.ptr_;<sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="classarrow_1_1_iterator_1a009a47964dc03797996e52eec95d26df" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ptr_<sp/>!=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>;<sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="111" refid="classarrow_1_1_iterator_1_1_range_iterator" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classarrow_1_1_iterator_1_1_range_iterator" kindref="compound">RangeIterator</ref><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="113" refid="classarrow_1_1_iterator_1_1_range_iterator_1a5aeb5efc83e0f4df23746ad1ea5d6a36" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_iterator_1_1_range_iterator_1a5aeb5efc83e0f4df23746ad1ea5d6a36" kindref="member">RangeIterator</ref>()<sp/>:<sp/>value_(<ref refid="structarrow_1_1_iteration_traits" kindref="compound">IterationTraits</ref>&lt;T&gt;::<ref refid="structarrow_1_1_iteration_traits_1a3ec3a949aefcc0361ae4cc263faf4a8b" kindref="member">End</ref>()),<sp/>iterator_()<sp/>{}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115" refid="classarrow_1_1_iterator_1_1_range_iterator_1a247db788256ef2b91927460207187196" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_iterator_1_1_range_iterator_1a247db788256ef2b91927460207187196" kindref="member">RangeIterator</ref>(<ref refid="classarrow_1_1_iterator" kindref="compound">Iterator</ref><sp/>i)</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>value_(<ref refid="structarrow_1_1_iteration_traits" kindref="compound">IterationTraits</ref>&lt;T&gt;::<ref refid="structarrow_1_1_iteration_traits_1a3ec3a949aefcc0361ae4cc263faf4a8b" kindref="member">End</ref>()),<sp/>iterator_(<ref refid="namespacestd" kindref="compound">std</ref>::move(i))<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Next();</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="classarrow_1_1_iterator_1_1_range_iterator_1ae58551ae3a19092cb4eb93b748522cd2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_iterator_1_1_range_iterator_1ae58551ae3a19092cb4eb93b748522cd2" kindref="member">operator!=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_iterator_1_1_range_iterator" kindref="compound">RangeIterator</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_<sp/>!=<sp/>other.value_;<sp/>}</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122" refid="classarrow_1_1_iterator_1_1_range_iterator_1aae92283adad089f74d341fc5a47e8ec9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_iterator_1_1_range_iterator" kindref="compound">RangeIterator</ref>&amp;<sp/><ref refid="classarrow_1_1_iterator_1_1_range_iterator_1aae92283adad089f74d341fc5a47e8ec9" kindref="member">operator++</ref>()<sp/>{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>Next();</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127" refid="classarrow_1_1_iterator_1_1_range_iterator_1adabcc13236b24012ac546505ba62f154" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;T&gt;</ref><sp/><ref refid="classarrow_1_1_iterator_1_1_range_iterator_1adabcc13236b24012ac546505ba62f154" kindref="member">operator*</ref>()<sp/>{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(value_.status());</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value<sp/>=<sp/>std::move(value_);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>value_<sp/>=<sp/><ref refid="structarrow_1_1_iteration_traits_1a3ec3a949aefcc0361ae4cc263faf4a8b" kindref="member">IterationTraits&lt;T&gt;::End</ref>();</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Next()<sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!value_.ok())<sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_<sp/>=<sp/><ref refid="structarrow_1_1_iteration_traits_1a3ec3a949aefcc0361ae4cc263faf4a8b" kindref="member">IterationTraits&lt;T&gt;::End</ref>();</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>value_<sp/>=<sp/>iterator_.Next();</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;T&gt;</ref><sp/>value_;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_iterator" kindref="compound">Iterator</ref><sp/>iterator_;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148" refid="classarrow_1_1_iterator_1ab28b6a820eab0c2031d6ef3071f207bf" refkind="member"><highlight class="normal"><sp/><sp/>RangeIterator<sp/><ref refid="classarrow_1_1_iterator_1ab28b6a820eab0c2031d6ef3071f207bf" kindref="member">begin</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RangeIterator(std::move(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">));<sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150" refid="classarrow_1_1_iterator_1aa101c174b560017923078215b5a5154e" refkind="member"><highlight class="normal"><sp/><sp/>RangeIterator<sp/><ref refid="classarrow_1_1_iterator_1aa101c174b560017923078215b5a5154e" kindref="member">end</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>RangeIterator();<sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="153" refid="classarrow_1_1_iterator_1aa82f50ff3b311668856e942633f9cb16" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::vector&lt;T&gt;</ref>&gt;<sp/><ref refid="classarrow_1_1_iterator_1aa82f50ff3b311668856e942633f9cb16" kindref="member">ToVector</ref>()<sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;T&gt;<sp/>out;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>maybe_element<sp/>:<sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="result_8h_1aaf9efe9debc83022fad249a0fa56e680" kindref="member">ARROW_ASSIGN_OR_RAISE</ref>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>element,<sp/>std::move(maybe_element));</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out.push_back(std::move(element));</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ARROW-8193:<sp/>On<sp/>gcc-4.8<sp/>without<sp/>the<sp/>explicit<sp/>move<sp/>it<sp/>tries<sp/>to<sp/>use<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>copy<sp/>constructor,<sp/>which<sp/>may<sp/>be<sp/>deleted<sp/>on<sp/>the<sp/>elements<sp/>of<sp/>type<sp/>T</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(out);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>HasNext&gt;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Delete(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">HasNext*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ptr);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>HasNext&gt;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;T&gt;</ref><sp/>Next(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>ptr)<sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">HasNext*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(ptr)-&gt;Next();</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;void,<sp/>void<sp/>(*)(void*)&gt;<sp/>ptr_;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;T&gt;</ref><sp/>(*next_)(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>;</highlight></codeline>
<codeline lineno="186"><highlight class="normal">};</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="189" refid="structarrow_1_1_iteration_traits_3_01_iterator_3_01_t_01_4_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structarrow_1_1_iteration_traits" kindref="compound">IterationTraits</ref>&lt;<ref refid="classarrow_1_1_iterator" kindref="compound">Iterator</ref>&lt;T&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>end<sp/>condition<sp/>for<sp/>an<sp/>Iterator<sp/>of<sp/>Iterators<sp/>is<sp/>a<sp/>default<sp/>constructed<sp/>(null)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Iterator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192" refid="structarrow_1_1_iteration_traits_3_01_iterator_3_01_t_01_4_01_4_1a885ad8dd1c0d2b55b5d0adcb32c5a8a2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_iterator" kindref="compound">Iterator&lt;T&gt;</ref><sp/><ref refid="structarrow_1_1_iteration_traits_3_01_iterator_3_01_t_01_4_01_4_1a885ad8dd1c0d2b55b5d0adcb32c5a8a2" kindref="member">End</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_iterator" kindref="compound">Iterator&lt;T&gt;</ref>();<sp/>}</highlight></codeline>
<codeline lineno="193"><highlight class="normal">};</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Fn,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="196" refid="classarrow_1_1_function_iterator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classarrow_1_1_function_iterator" kindref="compound">FunctionIterator</ref><sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="198" refid="classarrow_1_1_function_iterator_1a569f452db5226577842161edeb295860" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_function_iterator_1a569f452db5226577842161edeb295860" kindref="member">FunctionIterator</ref>(Fn<sp/>fn)<sp/>:<sp/>fn_(<ref refid="namespacestd" kindref="compound">std</ref>::move(fn))<sp/>{}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200" refid="classarrow_1_1_function_iterator_1acc5f4eaf08c0a076a4219ce30c25da45" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;T&gt;</ref><sp/><ref refid="classarrow_1_1_function_iterator_1acc5f4eaf08c0a076a4219ce30c25da45" kindref="member">Next</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fn_();<sp/>}</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/>Fn<sp/>fn_;</highlight></codeline>
<codeline lineno="204"><highlight class="normal">};</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Fn,</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Ret<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>internal::call_traits::return_type&lt;Fn&gt;::ValueType&gt;</highlight></codeline>
<codeline lineno="209" refid="namespacearrow_1afbe9311bc4b5b80d1cc42102bb1542ab" refkind="member"><highlight class="normal"><ref refid="classarrow_1_1_iterator" kindref="compound">Iterator&lt;Ret&gt;</ref><sp/><ref refid="namespacearrow_1afbe9311bc4b5b80d1cc42102bb1542ab" kindref="member">MakeFunctionIterator</ref>(Fn<sp/>fn)<sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_iterator" kindref="compound">Iterator&lt;Ret&gt;</ref>(<ref refid="classarrow_1_1_function_iterator" kindref="compound">FunctionIterator&lt;Fn, Ret&gt;</ref>(std::move(fn)));</highlight></codeline>
<codeline lineno="211"><highlight class="normal">}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="214" refid="namespacearrow_1ac88b501daab08dda0e148de95dd68d94" refkind="member"><highlight class="normal"><ref refid="classarrow_1_1_iterator" kindref="compound">Iterator&lt;T&gt;</ref><sp/><ref refid="namespacearrow_1ac88b501daab08dda0e148de95dd68d94" kindref="member">MakeEmptyIterator</ref>()<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacearrow_1afbe9311bc4b5b80d1cc42102bb1542ab" kindref="member">MakeFunctionIterator</ref>([]()<sp/>-&gt;<sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;T&gt;</ref><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_iteration_traits_1a3ec3a949aefcc0361ae4cc263faf4a8b" kindref="member">IterationTraits&lt;T&gt;::End</ref>();<sp/>});</highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="219" refid="namespacearrow_1ab926f5eb39c55824dd5a7cf146ca867e" refkind="member"><highlight class="normal"><ref refid="classarrow_1_1_iterator" kindref="compound">Iterator&lt;T&gt;</ref><sp/><ref refid="namespacearrow_1ab926f5eb39c55824dd5a7cf146ca867e" kindref="member">MakeErrorIterator</ref>(<ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacearrow_1afbe9311bc4b5b80d1cc42102bb1542ab" kindref="member">MakeFunctionIterator</ref>([s]()<sp/>-&gt;<sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;T&gt;</ref><sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(s);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_iteration_traits_1a3ec3a949aefcc0361ae4cc263faf4a8b" kindref="member">IterationTraits&lt;T&gt;::End</ref>();</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/>});</highlight></codeline>
<codeline lineno="224"><highlight class="normal">}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="228" refid="classarrow_1_1_vector_iterator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classarrow_1_1_vector_iterator" kindref="compound">VectorIterator</ref><sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="230" refid="classarrow_1_1_vector_iterator_1a03ba36c52d5ec15fc5bbc0ce3e2c147f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_vector_iterator_1a03ba36c52d5ec15fc5bbc0ce3e2c147f" kindref="member">VectorIterator</ref>(std::vector&lt;T&gt;<sp/>v)<sp/>:<sp/>elements_(<ref refid="namespacestd" kindref="compound">std</ref>::move(v))<sp/>{}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232" refid="classarrow_1_1_vector_iterator_1a877843317ab23899950d074aec3f5f68" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;T&gt;</ref><sp/><ref refid="classarrow_1_1_vector_iterator_1a877843317ab23899950d074aec3f5f68" kindref="member">Next</ref>()<sp/>{</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i_<sp/>==<sp/>elements_.size())<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_iteration_traits_1a3ec3a949aefcc0361ae4cc263faf4a8b" kindref="member">IterationTraits&lt;T&gt;::End</ref>();</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(elements_[i_++]);</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>std::vector&lt;T&gt;<sp/>elements_;</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="242"><highlight class="normal">};</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="245" refid="namespacearrow_1a260d67d2d8f74d6bef570dc730982fee" refkind="member"><highlight class="normal"><ref refid="classarrow_1_1_iterator" kindref="compound">Iterator&lt;T&gt;</ref><sp/><ref refid="namespacearrow_1a260d67d2d8f74d6bef570dc730982fee" kindref="member">MakeVectorIterator</ref>(std::vector&lt;T&gt;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_iterator" kindref="compound">Iterator&lt;T&gt;</ref>(<ref refid="classarrow_1_1_vector_iterator" kindref="compound">VectorIterator&lt;T&gt;</ref>(std::move(v)));</highlight></codeline>
<codeline lineno="247"><highlight class="normal">}</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="252" refid="classarrow_1_1_vector_optional_iterator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classarrow_1_1_vector_optional_iterator" kindref="compound">VectorOptionalIterator</ref><sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="254" refid="classarrow_1_1_vector_optional_iterator_1a35fa2a875ccb20c950959ed71d4e2461" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_vector_optional_iterator_1a35fa2a875ccb20c950959ed71d4e2461" kindref="member">VectorOptionalIterator</ref>(std::vector&lt;T&gt;<sp/>v)<sp/>:<sp/>elements_(<ref refid="namespacestd" kindref="compound">std</ref>::move(v))<sp/>{}</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="256" refid="classarrow_1_1_vector_optional_iterator_1ae989431f63fd7214b4d67c7945b93158" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;util::optional&lt;T&gt;</ref>&gt;<sp/><ref refid="classarrow_1_1_vector_optional_iterator_1ae989431f63fd7214b4d67c7945b93158" kindref="member">Next</ref>()<sp/>{</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i_<sp/>==<sp/>elements_.size())<sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>util::nullopt;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(elements_[i_++]);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>std::vector&lt;T&gt;<sp/>elements_;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="266"><highlight class="normal">};</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="269" refid="namespacearrow_1a34c8b32dbbc2e7415d1e286ca132c006" refkind="member"><highlight class="normal"><ref refid="classarrow_1_1_iterator" kindref="compound">Iterator&lt;util::optional&lt;T&gt;</ref>&gt;<sp/><ref refid="namespacearrow_1a34c8b32dbbc2e7415d1e286ca132c006" kindref="member">MakeVectorOptionalIterator</ref>(std::vector&lt;T&gt;<sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_iterator" kindref="compound">Iterator&lt;util::optional&lt;T&gt;</ref>&gt;(<ref refid="classarrow_1_1_vector_optional_iterator" kindref="compound">VectorOptionalIterator&lt;T&gt;</ref>(std::move(v)));</highlight></codeline>
<codeline lineno="271"><highlight class="normal">}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Fn,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>I,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>O&gt;</highlight></codeline>
<codeline lineno="276" refid="classarrow_1_1_map_iterator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classarrow_1_1_map_iterator" kindref="compound">MapIterator</ref><sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="278" refid="classarrow_1_1_map_iterator_1a943de39b6dd401605eacccfe78a1c6a8" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_map_iterator_1a943de39b6dd401605eacccfe78a1c6a8" kindref="member">MapIterator</ref>(Fn<sp/><ref refid="group__type-factories_1ga18349773a5006d18cc0071b89715cb7a" kindref="member">map</ref>,<sp/><ref refid="classarrow_1_1_iterator" kindref="compound">Iterator&lt;I&gt;</ref><sp/>it)</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>map_(<ref refid="namespacestd" kindref="compound">std</ref>::move(map)),<sp/>it_(<ref refid="namespacestd" kindref="compound">std</ref>::move(it))<sp/>{}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281" refid="classarrow_1_1_map_iterator_1a0b60208a85806fd07766ad02950356d2" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;O&gt;</ref><sp/><ref refid="classarrow_1_1_map_iterator_1a0b60208a85806fd07766ad02950356d2" kindref="member">Next</ref>()<sp/>{</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="result_8h_1aaf9efe9debc83022fad249a0fa56e680" kindref="member">ARROW_ASSIGN_OR_RAISE</ref>(I<sp/>i,<sp/>it_.Next());</highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/><ref refid="structarrow_1_1_iteration_traits" kindref="compound">IterationTraits&lt;I&gt;::End</ref>())<sp/>{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_iteration_traits_1a3ec3a949aefcc0361ae4cc263faf4a8b" kindref="member">IterationTraits&lt;O&gt;::End</ref>();</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>map_(std::move(i));</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/>Fn<sp/>map_;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_iterator" kindref="compound">Iterator&lt;I&gt;</ref><sp/>it_;</highlight></codeline>
<codeline lineno="294"><highlight class="normal">};</highlight></codeline>
<codeline lineno="295"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Fn,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>From<sp/>=<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">ernal::call_traits::argument_type&lt;0,<sp/>Fn&gt;,</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>To<sp/>=<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">ernal::call_traits::return_type&lt;Fn&gt;&gt;</highlight></codeline>
<codeline lineno="300" refid="namespacearrow_1a0739021d27a4ce9b060cd1d0fb537821" refkind="member"><highlight class="normal"><ref refid="classarrow_1_1_iterator" kindref="compound">Iterator&lt;To&gt;</ref><sp/><ref refid="namespacearrow_1a0739021d27a4ce9b060cd1d0fb537821" kindref="member">MakeMapIterator</ref>(Fn<sp/><ref refid="group__type-factories_1ga18349773a5006d18cc0071b89715cb7a" kindref="member">map</ref>,<sp/><ref refid="classarrow_1_1_iterator" kindref="compound">Iterator&lt;From&gt;</ref><sp/>it)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_iterator" kindref="compound">Iterator&lt;To&gt;</ref>(<ref refid="classarrow_1_1_map_iterator" kindref="compound">MapIterator&lt;Fn, From, To&gt;</ref>(std::move(map),<sp/>std::move(it)));</highlight></codeline>
<codeline lineno="302"><highlight class="normal">}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Fn,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>From<sp/>=<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">ernal::call_traits::argument_type&lt;0,<sp/>Fn&gt;,</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>To<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">ernal::call_traits::return_type&lt;Fn&gt;::ValueType&gt;</highlight></codeline>
<codeline lineno="307" refid="namespacearrow_1a91b921bf603b379a7e9a25236ec3fe79" refkind="member"><highlight class="normal"><ref refid="classarrow_1_1_iterator" kindref="compound">Iterator&lt;To&gt;</ref><sp/><ref refid="namespacearrow_1a91b921bf603b379a7e9a25236ec3fe79" kindref="member">MakeMaybeMapIterator</ref>(Fn<sp/><ref refid="group__type-factories_1ga18349773a5006d18cc0071b89715cb7a" kindref="member">map</ref>,<sp/><ref refid="classarrow_1_1_iterator" kindref="compound">Iterator&lt;From&gt;</ref><sp/>it)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_iterator" kindref="compound">Iterator&lt;To&gt;</ref>(<ref refid="classarrow_1_1_map_iterator" kindref="compound">MapIterator&lt;Fn, From, To&gt;</ref>(std::move(map),<sp/>std::move(it)));</highlight></codeline>
<codeline lineno="309"><highlight class="normal">}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311" refid="structarrow_1_1_filter_iterator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structarrow_1_1_filter_iterator" kindref="compound">FilterIterator</ref><sp/>{</highlight></codeline>
<codeline lineno="312" refid="structarrow_1_1_filter_iterator_1a1df4646fc9121d4c8c91e8052a45e1eba56a268f7a66c096b7e3b325394b61e12" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_filter_iterator_1a1df4646fc9121d4c8c91e8052a45e1eb" kindref="member">Action</ref><sp/>{<sp/>ACCEPT,<sp/>REJECT<sp/>};</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>To&gt;</highlight></codeline>
<codeline lineno="315" refid="structarrow_1_1_filter_iterator_1a9c3fc7695fe42dcc7138d9a5f349423e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::pair&lt;To, Action&gt;</ref>&gt;<sp/><ref refid="structarrow_1_1_filter_iterator_1a9c3fc7695fe42dcc7138d9a5f349423e" kindref="member">Reject</ref>()<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_pair(<ref refid="structarrow_1_1_iteration_traits" kindref="compound">IterationTraits&lt;To&gt;::End</ref>(),<sp/>REJECT);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>To&gt;</highlight></codeline>
<codeline lineno="320" refid="structarrow_1_1_filter_iterator_1ae36de730b920df93a6d3704299ef1a07" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::pair&lt;To, Action&gt;</ref>&gt;<sp/><ref refid="structarrow_1_1_filter_iterator_1ae36de730b920df93a6d3704299ef1a07" kindref="member">Accept</ref>(To<sp/>out)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_pair(std::move(out),<sp/>ACCEPT);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>To&gt;</highlight></codeline>
<codeline lineno="325" refid="structarrow_1_1_filter_iterator_1a659159272c13549b04f5dd1d8ca3033e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::pair&lt;To, Action&gt;</ref>&gt;<sp/><ref refid="structarrow_1_1_filter_iterator_1a659159272c13549b04f5dd1d8ca3033e" kindref="member">MaybeAccept</ref>(<ref refid="classarrow_1_1_result" kindref="compound">Result&lt;To&gt;</ref><sp/>maybe_out)<sp/>{</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::move(maybe_out).Map(Accept&lt;To&gt;);</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>To&gt;</highlight></codeline>
<codeline lineno="330" refid="structarrow_1_1_filter_iterator_1abda9020834033cccdb5a04b4bc14329c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::pair&lt;To, Action&gt;</ref>&gt;<sp/><ref refid="structarrow_1_1_filter_iterator_1abda9020834033cccdb5a04b4bc14329c" kindref="member">Error</ref>(<ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>s)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Fn,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>From,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>To&gt;</highlight></codeline>
<codeline lineno="335" refid="classarrow_1_1_filter_iterator_1_1_impl" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classarrow_1_1_filter_iterator_1_1_impl" kindref="compound">Impl</ref><sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="337" refid="classarrow_1_1_filter_iterator_1_1_impl_1af45ccffd931eb5808ad059bd3b3d7a79" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_filter_iterator_1_1_impl_1af45ccffd931eb5808ad059bd3b3d7a79" kindref="member">Impl</ref>(Fn<sp/>filter,<sp/><ref refid="classarrow_1_1_iterator" kindref="compound">Iterator&lt;From&gt;</ref><sp/>it)<sp/>:<sp/>filter_(filter),<sp/>it_(<ref refid="namespacestd" kindref="compound">std</ref>::move(it))<sp/>{}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339" refid="classarrow_1_1_filter_iterator_1_1_impl_1a20a48668fa568f5f2978dc2a07a49e50" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;To&gt;</ref><sp/><ref refid="classarrow_1_1_filter_iterator_1_1_impl_1a20a48668fa568f5f2978dc2a07a49e50" kindref="member">Next</ref>()<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>To<sp/>out<sp/>=<sp/><ref refid="structarrow_1_1_iteration_traits_1a3ec3a949aefcc0361ae4cc263faf4a8b" kindref="member">IterationTraits&lt;To&gt;::End</ref>();</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_filter_iterator_1a1df4646fc9121d4c8c91e8052a45e1eb" kindref="member">Action</ref><sp/>action;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;;)<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="result_8h_1aaf9efe9debc83022fad249a0fa56e680" kindref="member">ARROW_ASSIGN_OR_RAISE</ref>(From<sp/>i,<sp/>it_.Next());</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/><ref refid="structarrow_1_1_iteration_traits" kindref="compound">IterationTraits&lt;From&gt;::End</ref>())<sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_iteration_traits_1a3ec3a949aefcc0361ae4cc263faf4a8b" kindref="member">IterationTraits&lt;To&gt;::End</ref>();</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="result_8h_1aaf9efe9debc83022fad249a0fa56e680" kindref="member">ARROW_ASSIGN_OR_RAISE</ref>(std::tie(out,<sp/>action),<sp/>filter_(std::move(i)));</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(action<sp/>==<sp/>ACCEPT)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>Fn<sp/>filter_;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_iterator" kindref="compound">Iterator&lt;From&gt;</ref><sp/>it_;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="360"><highlight class="normal">};</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Fn,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>From<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>internal::call_traits::argument_type&lt;0,<sp/>Fn&gt;,</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Ret<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>internal::call_traits::return_type&lt;Fn&gt;::ValueType,</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>To<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::tuple_element&lt;0,<sp/>Ret&gt;::type,</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Enable<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;std::is_same&lt;</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::tuple_element&lt;1,<sp/>Ret&gt;::type,<sp/><ref refid="structarrow_1_1_filter_iterator_1a1df4646fc9121d4c8c91e8052a45e1eb" kindref="member">FilterIterator::Action</ref>&gt;::value&gt;::type&gt;</highlight></codeline>
<codeline lineno="369" refid="namespacearrow_1a62c38fa56ca1c43c4b0a2acd98de9624" refkind="member"><highlight class="normal"><ref refid="classarrow_1_1_iterator" kindref="compound">Iterator&lt;To&gt;</ref><sp/><ref refid="namespacearrow_1a62c38fa56ca1c43c4b0a2acd98de9624" kindref="member">MakeFilterIterator</ref>(Fn<sp/>filter,<sp/><ref refid="classarrow_1_1_iterator" kindref="compound">Iterator&lt;From&gt;</ref><sp/>it)<sp/>{</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_iterator" kindref="compound">Iterator&lt;To&gt;</ref>(</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_filter_iterator_1_1_impl" kindref="compound">FilterIterator::Impl&lt;Fn, From, To&gt;</ref>(std::move(filter),<sp/>std::move(it)));</highlight></codeline>
<codeline lineno="372"><highlight class="normal">}</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="377" refid="classarrow_1_1_flatten_iterator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classarrow_1_1_flatten_iterator" kindref="compound">FlattenIterator</ref><sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="379" refid="classarrow_1_1_flatten_iterator_1ac95691d6d6c39b7a8fac2ba42f1a8762" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_flatten_iterator_1ac95691d6d6c39b7a8fac2ba42f1a8762" kindref="member">FlattenIterator</ref>(<ref refid="classarrow_1_1_iterator" kindref="compound">Iterator</ref>&lt;<ref refid="classarrow_1_1_iterator" kindref="compound">Iterator&lt;T&gt;</ref>&gt;<sp/>it)<sp/>:<sp/>parent_(<ref refid="namespacestd" kindref="compound">std</ref>::move(it))<sp/>{}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381" refid="classarrow_1_1_flatten_iterator_1ae7b7b43916971a6b7ef131686fcc701e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;T&gt;</ref><sp/><ref refid="classarrow_1_1_flatten_iterator_1ae7b7b43916971a6b7ef131686fcc701e" kindref="member">Next</ref>()<sp/>{</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(child_<sp/>==<sp/><ref refid="structarrow_1_1_iteration_traits" kindref="compound">IterationTraits</ref>&lt;<ref refid="classarrow_1_1_iterator" kindref="compound">Iterator&lt;T&gt;</ref>&gt;::<ref refid="structarrow_1_1_iteration_traits_1a3ec3a949aefcc0361ae4cc263faf4a8b" kindref="member">End</ref>())<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pop<sp/>from<sp/>parent&apos;s<sp/>iterator.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="result_8h_1aaf9efe9debc83022fad249a0fa56e680" kindref="member">ARROW_ASSIGN_OR_RAISE</ref>(child_,<sp/>parent_.Next());</highlight></codeline>
<codeline lineno="385"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>final<sp/>iteration<sp/>reached.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(child_<sp/>==<sp/><ref refid="structarrow_1_1_iteration_traits" kindref="compound">IterationTraits</ref>&lt;<ref refid="classarrow_1_1_iterator" kindref="compound">Iterator&lt;T&gt;</ref>&gt;::<ref refid="structarrow_1_1_iteration_traits_1a3ec3a949aefcc0361ae4cc263faf4a8b" kindref="member">End</ref>())<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_iteration_traits_1a3ec3a949aefcc0361ae4cc263faf4a8b" kindref="member">IterationTraits&lt;T&gt;::End</ref>();</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Next();</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Pop<sp/>from<sp/>child_<sp/>and<sp/>check<sp/>for<sp/>depletion.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="result_8h_1aaf9efe9debc83022fad249a0fa56e680" kindref="member">ARROW_ASSIGN_OR_RAISE</ref>(T<sp/>out,<sp/>child_.Next());</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out<sp/>==<sp/><ref refid="structarrow_1_1_iteration_traits" kindref="compound">IterationTraits&lt;T&gt;::End</ref>())<sp/>{</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>state<sp/>such<sp/>that<sp/>we<sp/>pop<sp/>from<sp/>parent<sp/>on<sp/>the<sp/>recursive<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>child_<sp/>=<sp/><ref refid="structarrow_1_1_iteration_traits" kindref="compound">IterationTraits&lt;Iterator&lt;T&gt;</ref>&gt;<ref refid="structarrow_1_1_iteration_traits_1a3ec3a949aefcc0361ae4cc263faf4a8b" kindref="member">::End</ref>();</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Next();</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_iterator" kindref="compound">Iterator&lt;Iterator&lt;T&gt;</ref>&gt;<sp/>parent_;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_iterator" kindref="compound">Iterator&lt;T&gt;</ref><sp/>child_<sp/>=<sp/><ref refid="structarrow_1_1_iteration_traits" kindref="compound">IterationTraits&lt;Iterator&lt;T&gt;</ref>&gt;<ref refid="structarrow_1_1_iteration_traits_1a3ec3a949aefcc0361ae4cc263faf4a8b" kindref="member">::End</ref>();</highlight></codeline>
<codeline lineno="409"><highlight class="normal">};</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="412" refid="namespacearrow_1a6975d6cac55ba9bd6b286030381b862c" refkind="member"><highlight class="normal"><ref refid="classarrow_1_1_iterator" kindref="compound">Iterator&lt;T&gt;</ref><sp/><ref refid="namespacearrow_1a6975d6cac55ba9bd6b286030381b862c" kindref="member">MakeFlattenIterator</ref>(<ref refid="classarrow_1_1_iterator" kindref="compound">Iterator</ref>&lt;<ref refid="classarrow_1_1_iterator" kindref="compound">Iterator&lt;T&gt;</ref>&gt;<sp/>it)<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_iterator" kindref="compound">Iterator&lt;T&gt;</ref>(<ref refid="classarrow_1_1_flatten_iterator" kindref="compound">FlattenIterator&lt;T&gt;</ref>(std::move(it)));</highlight></codeline>
<codeline lineno="414"><highlight class="normal">}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>type-erased<sp/>promise<sp/>object<sp/>for<sp/>ReadaheadQueue.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/>ReadaheadPromise<sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~ReadaheadPromise();</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Call()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="422"><highlight class="normal">};</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ReadaheadIteratorPromise<sp/>:<sp/>ReadaheadPromise<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/>~ReadaheadIteratorPromise()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ReadaheadIteratorPromise(<ref refid="classarrow_1_1_iterator" kindref="compound">Iterator&lt;T&gt;</ref>*<sp/>it)<sp/>:<sp/>it_(it)<sp/>{}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Call()</highlight><highlight class="keyword"><sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/>assert(!called_);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>out_<sp/>=<sp/>it_-&gt;Next();</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/>called_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_iterator" kindref="compound">Iterator&lt;T&gt;</ref>*<sp/>it_;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;T&gt;</ref><sp/>out_<sp/>=<sp/><ref refid="structarrow_1_1_iteration_traits_1a3ec3a949aefcc0361ae4cc263faf4a8b" kindref="member">IterationTraits&lt;T&gt;::End</ref>();</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>called_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="439"><highlight class="normal">};</highlight></codeline>
<codeline lineno="440"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/>ReadaheadQueue<sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>ReadaheadQueue(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>readahead_queue_size);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>~ReadaheadQueue();</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>Append(std::unique_ptr&lt;ReadaheadPromise&gt;);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>PopDone(std::unique_ptr&lt;ReadaheadPromise&gt;*);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>Pump(std::function&lt;std::unique_ptr&lt;ReadaheadPromise&gt;()&gt;<sp/>factory);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>Shutdown();</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>EnsureShutdownOrDie();</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">Impl;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Impl&gt;<sp/>impl_;</highlight></codeline>
<codeline lineno="455"><highlight class="normal">};</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>detail</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="462" refid="classarrow_1_1_readahead_iterator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classarrow_1_1_readahead_iterator" kindref="compound">ReadaheadIterator</ref><sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>PromiseType<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>detail::ReadaheadIteratorPromise&lt;T&gt;;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Public<sp/>default<sp/>constructor<sp/>creates<sp/>an<sp/>empty<sp/>iterator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="467" refid="classarrow_1_1_readahead_iterator_1af0a91d3c17da39cb528568e784fdc9ab" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_readahead_iterator_1af0a91d3c17da39cb528568e784fdc9ab" kindref="member">ReadaheadIterator</ref>()<sp/>:<sp/>done_(true)<sp/>{}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="469" refid="classarrow_1_1_readahead_iterator_1a7dd72c63386058c10ff38fb270600aec" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_readahead_iterator_1a7dd72c63386058c10ff38fb270600aec" kindref="member">~ReadaheadIterator</ref>()<sp/>{</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(queue_)<sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>the<sp/>queue<sp/>doesn&apos;t<sp/>call<sp/>any<sp/>promises<sp/>after<sp/>this<sp/>object</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>destroyed.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>queue_-&gt;EnsureShutdownOrDie();</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><ref refid="macros_8h_1a11a6be0a7119f319a7b18cd28b34ee61" kindref="member">ARROW_DEFAULT_MOVE_AND_ASSIGN</ref>(<ref refid="classarrow_1_1_readahead_iterator" kindref="compound">ReadaheadIterator</ref>);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><ref refid="macros_8h_1a40d72e185b1488b5659b761f0b6115bb" kindref="member">ARROW_DISALLOW_COPY_AND_ASSIGN</ref>(<ref refid="classarrow_1_1_readahead_iterator" kindref="compound">ReadaheadIterator</ref>);</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="480" refid="classarrow_1_1_readahead_iterator_1ac34cd4c631e159b96d0f28a259648f1f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;T&gt;</ref><sp/><ref refid="classarrow_1_1_readahead_iterator_1ac34cd4c631e159b96d0f28a259648f1f" kindref="member">Next</ref>()<sp/>{</highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(done_)<sp/>{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_iteration_traits_1a3ec3a949aefcc0361ae4cc263faf4a8b" kindref="member">IterationTraits&lt;T&gt;::End</ref>();</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_ptr&lt;detail::ReadaheadPromise&gt;<sp/>promise;</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(queue_-&gt;PopDone(&amp;promise));</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>it_promise<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">PromiseType*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(promise.get());</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(queue_-&gt;Append(MakePromise()));</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="result_8h_1aaf9efe9debc83022fad249a0fa56e680" kindref="member">ARROW_ASSIGN_OR_RAISE</ref>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>out,<sp/>std::move(it_promise-&gt;out_));</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(out<sp/>==<sp/><ref refid="structarrow_1_1_iteration_traits" kindref="compound">IterationTraits&lt;T&gt;::End</ref>())<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>done_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>out;</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="498" refid="classarrow_1_1_readahead_iterator_1aff4b0d0b48d706551cc0f3a3efd6a948" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;Iterator&lt;T&gt;</ref>&gt;<sp/><ref refid="classarrow_1_1_readahead_iterator_1aff4b0d0b48d706551cc0f3a3efd6a948" kindref="member">Make</ref>(<ref refid="classarrow_1_1_iterator" kindref="compound">Iterator&lt;T&gt;</ref><sp/>it,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>readahead_queue_size)<sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_readahead_iterator" kindref="compound">ReadaheadIterator</ref><sp/>rh(std::move(it),<sp/>readahead_queue_size);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(rh.Pump());</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_iterator" kindref="compound">Iterator&lt;T&gt;</ref>(std::move(rh));</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_readahead_iterator" kindref="compound">ReadaheadIterator</ref>(<ref refid="classarrow_1_1_iterator" kindref="compound">Iterator&lt;T&gt;</ref><sp/>it,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>readahead_queue_size)</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>it_(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_iterator" kindref="compound">Iterator&lt;T&gt;</ref>(std::move(it))),</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>queue_(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>detail::ReadaheadQueue(readahead_queue_size))<sp/>{}</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>Pump()<sp/>{</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>queue_-&gt;Pump([</highlight><highlight class="keyword">this</highlight><highlight class="normal">]()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>MakePromise();<sp/>});</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;detail::ReadaheadPromise&gt;<sp/>MakePromise()<sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::unique_ptr&lt;detail::ReadaheadPromise&gt;(</highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>PromiseType{it_.get()});</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>underlying<sp/>iterator<sp/>is<sp/>referenced<sp/>by<sp/>pointer<sp/>in<sp/>ReadaheadPromise,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>so<sp/>make<sp/>sure<sp/>it<sp/>doesn&apos;t<sp/>move.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;Iterator&lt;T&gt;&gt;<sp/>it_;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;detail::ReadaheadQueue&gt;<sp/>queue_;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>done_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="522"><highlight class="normal">};</highlight></codeline>
<codeline lineno="523"><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="525" refid="namespacearrow_1a664b7dc6954a6f27fc0e3b1ea4db551d" refkind="member"><highlight class="normal"><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;Iterator&lt;T&gt;</ref>&gt;<sp/><ref refid="namespacearrow_1a664b7dc6954a6f27fc0e3b1ea4db551d" kindref="member">MakeReadaheadIterator</ref>(<ref refid="classarrow_1_1_iterator" kindref="compound">Iterator&lt;T&gt;</ref><sp/>it,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>readahead_queue_size)<sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_readahead_iterator_1aff4b0d0b48d706551cc0f3a3efd6a948" kindref="member">ReadaheadIterator&lt;T&gt;::Make</ref>(std::move(it),<sp/>readahead_queue_size);</highlight></codeline>
<codeline lineno="527"><highlight class="normal">}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>arrow</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/arrow/cpp/src/arrow/util/iterator.h"/>
  </compounddef>
</doxygen>
