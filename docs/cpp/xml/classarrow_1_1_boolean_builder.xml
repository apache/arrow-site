<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_boolean_builder" kind="class" language="C++" prot="public">
    <compoundname>arrow::BooleanBuilder</compoundname>
    <basecompoundref refid="classarrow_1_1_array_builder" prot="public" virt="non-virtual">arrow::ArrayBuilder</basecompoundref>
    <includes refid="builder__primitive_8h" local="no">arrow/array/builder_primitive.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classarrow_1_1_boolean_builder_1a015a0bf935ed6cfed91128fe627679b8" prot="public" static="no">
        <type><ref refid="classarrow_1_1_boolean_type" kindref="compound">BooleanType</ref></type>
        <definition>using arrow::BooleanBuilder::TypeClass =  BooleanType</definition>
        <argsstring></argsstring>
        <name>TypeClass</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_primitive.h" line="274" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_primitive.h" bodystart="274" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classarrow_1_1_boolean_builder_1adafbb5c2669ffc31a0c47df21f72a4a8" prot="public" static="no">
        <type>bool</type>
        <definition>using arrow::BooleanBuilder::value_type =  bool</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_primitive.h" line="275" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_primitive.h" bodystart="275" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classarrow_1_1_boolean_builder_1a476a09025041ecd70885132105c946a2" prot="protected" static="no" mutable="no">
        <type><ref refid="classarrow_1_1_typed_buffer_builder" kindref="compound">TypedBufferBuilder</ref>&lt; bool &gt;</type>
        <definition>TypedBufferBuilder&lt;bool&gt; arrow::BooleanBuilder::data_builder_</definition>
        <argsstring></argsstring>
        <name>data_builder_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_primitive.h" line="437" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_primitive.h" bodystart="437" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1_boolean_builder_1a2efeda705f9ea90f2076bec171d883ef" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::BooleanBuilder::BooleanBuilder</definition>
        <argsstring>(MemoryPool *pool=default_memory_pool())</argsstring>
        <name>BooleanBuilder</name>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
          <defval><ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">default_memory_pool</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_primitive.h" line="277" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_boolean_builder_1a3e27f19fa8fd0276ba9dd1771750eb1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::BooleanBuilder::BooleanBuilder</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;type, MemoryPool *pool=default_memory_pool())</argsstring>
        <name>BooleanBuilder</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
          <defval><ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">default_memory_pool</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_primitive.h" line="279" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_boolean_builder_1a3ac08ddd73dd5be1d27f2f148cf95d75" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::BooleanBuilder::AppendNulls</definition>
        <argsstring>(int64_t length) final</argsstring>
        <name>AppendNulls</name>
        <reimplements refid="classarrow_1_1_array_builder_1a0900943af067e85d9fa227123c223b14">AppendNulls</reimplements>
        <param>
          <type>int64_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Write nulls as uint8_t* (0 value indicates null) into pre-allocated memory. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_primitive.h" line="283" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_primitive.h" bodystart="283" bodyend="288"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_boolean_builder_1aae9f39dbf89f8d1874cc8a4a90aec06b" prot="public" static="no" const="no" explicit="no" inline="yes" final="yes" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::BooleanBuilder::AppendNull</definition>
        <argsstring>() final</argsstring>
        <name>AppendNull</name>
        <reimplements refid="classarrow_1_1_array_builder_1a6f7c2fbebb93e8630142dca01a328015">AppendNull</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_primitive.h" line="290" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_primitive.h" bodystart="290" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_boolean_builder_1a8780642eb6e5a4a45e31222e78c1cc09" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::BooleanBuilder::Append</definition>
        <argsstring>(const bool val)</argsstring>
        <name>Append</name>
        <param>
          <type>const bool</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para><ref refid="structarrow_1_1_scalar" kindref="compound">Scalar</ref> append. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_primitive.h" line="297" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_primitive.h" bodystart="297" bodyend="301"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_boolean_builder_1afc580587e3bf57107e524767c375d251" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::BooleanBuilder::Append</definition>
        <argsstring>(const uint8_t val)</argsstring>
        <name>Append</name>
        <param>
          <type>const uint8_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_primitive.h" line="303" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_primitive.h" bodystart="303" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_boolean_builder_1a3695606656e7e71457473c59d1cee0a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void arrow::BooleanBuilder::UnsafeAppend</definition>
        <argsstring>(const bool val)</argsstring>
        <name>UnsafeAppend</name>
        <param>
          <type>const bool</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para><ref refid="structarrow_1_1_scalar" kindref="compound">Scalar</ref> append, without checking for capacity. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_primitive.h" line="306" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_primitive.h" bodystart="306" bodyend="309"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_boolean_builder_1ac6708b26cb77b0a2390b8ddb64bf8737" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void arrow::BooleanBuilder::UnsafeAppendNull</definition>
        <argsstring>()</argsstring>
        <name>UnsafeAppendNull</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_primitive.h" line="311" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_primitive.h" bodystart="311" bodyend="314"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_boolean_builder_1abf0ae864d7e51ee2cb10f9026b699bdb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void arrow::BooleanBuilder::UnsafeAppend</definition>
        <argsstring>(const uint8_t val)</argsstring>
        <name>UnsafeAppend</name>
        <param>
          <type>const uint8_t</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_primitive.h" line="316" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_primitive.h" bodystart="316" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_boolean_builder_1a60382b2dd40f2d0e66b7ac318fe1d71d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::BooleanBuilder::AppendValues</definition>
        <argsstring>(const uint8_t *values, int64_t length, const uint8_t *valid_bytes=NULLPTR)</argsstring>
        <name>AppendValues</name>
        <param>
          <type>const uint8_t *</type>
          <declname>values</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>valid_bytes</declname>
          <defval><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></defval>
        </param>
        <briefdescription>
<para>Append a sequence of elements in one shot. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">values</parametername>
</parameternamelist>
<parameterdescription>
<para>a contiguous array of bytes (non-zero is 1) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of values to append </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">valid_bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional sequence of bytes where non-zero indicates a valid (non-null) value </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_primitive.h" line="324" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_boolean_builder_1ab257c69eaabe3d00eafae7a598f83e91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::BooleanBuilder::AppendValues</definition>
        <argsstring>(const uint8_t *values, int64_t length, const std::vector&lt; bool &gt; &amp;is_valid)</argsstring>
        <name>AppendValues</name>
        <param>
          <type>const uint8_t *</type>
          <declname>values</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>const std::vector&lt; bool &gt; &amp;</type>
          <declname>is_valid</declname>
        </param>
        <briefdescription>
<para>Append a sequence of elements in one shot. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">values</parametername>
</parameternamelist>
<parameterdescription>
<para>a contiguous C array of values </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of values to append </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">is_valid</parametername>
</parameternamelist>
<parameterdescription>
<para>an std::vector&lt;bool&gt; indicating valid (1) or null (0). Equal in length to values </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_primitive.h" line="333" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_boolean_builder_1a1cfd3c422525a51a4b1b9fa45ab773be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::BooleanBuilder::AppendValues</definition>
        <argsstring>(const std::vector&lt; uint8_t &gt; &amp;values, const std::vector&lt; bool &gt; &amp;is_valid)</argsstring>
        <name>AppendValues</name>
        <param>
          <type>const std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>values</declname>
        </param>
        <param>
          <type>const std::vector&lt; bool &gt; &amp;</type>
          <declname>is_valid</declname>
        </param>
        <briefdescription>
<para>Append a sequence of elements in one shot. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">values</parametername>
</parameternamelist>
<parameterdescription>
<para>a std::vector of bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">is_valid</parametername>
</parameternamelist>
<parameterdescription>
<para>an std::vector&lt;bool&gt; indicating valid (1) or null (0). Equal in length to values </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_primitive.h" line="341" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_boolean_builder_1a2e10c5bbd21da120a3c343519977b4c1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::BooleanBuilder::AppendValues</definition>
        <argsstring>(const std::vector&lt; uint8_t &gt; &amp;values)</argsstring>
        <name>AppendValues</name>
        <param>
          <type>const std::vector&lt; uint8_t &gt; &amp;</type>
          <declname>values</declname>
        </param>
        <briefdescription>
<para>Append a sequence of elements in one shot. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">values</parametername>
</parameternamelist>
<parameterdescription>
<para>a std::vector of bytes </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_primitive.h" line="347" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_boolean_builder_1ac6075414fa190df919ec081884771acc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::BooleanBuilder::AppendValues</definition>
        <argsstring>(const std::vector&lt; bool &gt; &amp;values, const std::vector&lt; bool &gt; &amp;is_valid)</argsstring>
        <name>AppendValues</name>
        <param>
          <type>const std::vector&lt; bool &gt; &amp;</type>
          <declname>values</declname>
        </param>
        <param>
          <type>const std::vector&lt; bool &gt; &amp;</type>
          <declname>is_valid</declname>
        </param>
        <briefdescription>
<para>Append a sequence of elements in one shot. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">values</parametername>
</parameternamelist>
<parameterdescription>
<para>an std::vector&lt;bool&gt; indicating true (1) or false </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">is_valid</parametername>
</parameternamelist>
<parameterdescription>
<para>an std::vector&lt;bool&gt; indicating valid (1) or null (0). Equal in length to values </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_primitive.h" line="354" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_boolean_builder_1a54d7f7893e1f9b4ea55172a9af4f1bb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::BooleanBuilder::AppendValues</definition>
        <argsstring>(const std::vector&lt; bool &gt; &amp;values)</argsstring>
        <name>AppendValues</name>
        <param>
          <type>const std::vector&lt; bool &gt; &amp;</type>
          <declname>values</declname>
        </param>
        <briefdescription>
<para>Append a sequence of elements in one shot. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">values</parametername>
</parameternamelist>
<parameterdescription>
<para>an std::vector&lt;bool&gt; indicating true (1) or false </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_primitive.h" line="359" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_boolean_builder_1ae2a6d1b574abe92480d25c9736c51e69" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValuesIter</type>
          </param>
        </templateparamlist>
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::BooleanBuilder::AppendValues</definition>
        <argsstring>(ValuesIter values_begin, ValuesIter values_end)</argsstring>
        <name>AppendValues</name>
        <param>
          <type>ValuesIter</type>
          <declname>values_begin</declname>
        </param>
        <param>
          <type>ValuesIter</type>
          <declname>values_end</declname>
        </param>
        <briefdescription>
<para>Append a sequence of elements in one shot. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">values_begin</parametername>
</parameternamelist>
<parameterdescription>
<para>InputIterator to the beginning of the values </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">values_end</parametername>
</parameternamelist>
<parameterdescription>
<para>InputIterator pointing to the end of the values or null(0) values </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_primitive.h" line="367" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_primitive.h" bodystart="367" bodyend="375"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_boolean_builder_1aedf2ef31c0989d7507e7241fc535a29b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValuesIter</type>
          </param>
          <param>
            <type>typename ValidIter</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacearrow_1a6ffa941ae85f4dd1545a9fad796324c6" kindref="member">enable_if_t</ref>&lt;!std::is_pointer&lt; ValidIter &gt;::value, <ref refid="classarrow_1_1_status" kindref="compound">Status</ref> &gt;</type>
        <definition>enable_if_t&lt;!std::is_pointer&lt;ValidIter&gt;::value, Status&gt; arrow::BooleanBuilder::AppendValues</definition>
        <argsstring>(ValuesIter values_begin, ValuesIter values_end, ValidIter valid_begin)</argsstring>
        <name>AppendValues</name>
        <param>
          <type>ValuesIter</type>
          <declname>values_begin</declname>
        </param>
        <param>
          <type>ValuesIter</type>
          <declname>values_end</declname>
        </param>
        <param>
          <type>ValidIter</type>
          <declname>valid_begin</declname>
        </param>
        <briefdescription>
<para>Append a sequence of elements in one shot, with a specified nullmap. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">values_begin</parametername>
</parameternamelist>
<parameterdescription>
<para>InputIterator to the beginning of the values </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">values_end</parametername>
</parameternamelist>
<parameterdescription>
<para>InputIterator pointing to the end of the values </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">valid_begin</parametername>
</parameternamelist>
<parameterdescription>
<para>InputIterator with elements indication valid(1) or null(0) values </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_primitive.h" line="384" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_primitive.h" bodystart="384" bodyend="399"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_boolean_builder_1ade97955cdc3e192bffdee3f1c5ba0552" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValuesIter</type>
          </param>
          <param>
            <type>typename ValidIter</type>
          </param>
        </templateparamlist>
        <type><ref refid="namespacearrow_1a6ffa941ae85f4dd1545a9fad796324c6" kindref="member">enable_if_t</ref>&lt; std::is_pointer&lt; ValidIter &gt;::value, <ref refid="classarrow_1_1_status" kindref="compound">Status</ref> &gt;</type>
        <definition>enable_if_t&lt;std::is_pointer&lt;ValidIter&gt;::value, Status&gt; arrow::BooleanBuilder::AppendValues</definition>
        <argsstring>(ValuesIter values_begin, ValuesIter values_end, ValidIter valid_begin)</argsstring>
        <name>AppendValues</name>
        <param>
          <type>ValuesIter</type>
          <declname>values_begin</declname>
        </param>
        <param>
          <type>ValuesIter</type>
          <declname>values_end</declname>
        </param>
        <param>
          <type>ValidIter</type>
          <declname>valid_begin</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_primitive.h" line="403" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_primitive.h" bodystart="403" bodyend="419"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_boolean_builder_1af4c4528e268cff838b8d7a5abc843046" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::BooleanBuilder::AppendValues</definition>
        <argsstring>(int64_t length, bool value)</argsstring>
        <name>AppendValues</name>
        <param>
          <type>int64_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_primitive.h" line="421" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_boolean_builder_1a84e5ee3cc0ae427135093c80b014765c" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::BooleanBuilder::FinishInternal</definition>
        <argsstring>(std::shared_ptr&lt; ArrayData &gt; *out) override</argsstring>
        <name>FinishInternal</name>
        <reimplements refid="classarrow_1_1_array_builder_1a0e0aea1c332b472f3671bea9da5ec473">FinishInternal</reimplements>
        <param>
          <type>std::shared_ptr&lt; <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Return result of builder as an internal generic <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> object. </para>        </briefdescription>
        <detaileddescription>
<para>Resets builder except for dictionary builder</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the finalized <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_primitive.h" line="423" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_boolean_builder_1ac18cf571ba568b0e58510290e429e9ec" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::BooleanBuilder::Finish</definition>
        <argsstring>(std::shared_ptr&lt; BooleanArray &gt; *out)</argsstring>
        <name>Finish</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_boolean_array" kindref="compound">BooleanArray</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_primitive.h" line="429" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_primitive.h" bodystart="429" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_boolean_builder_1a5c7274589b0a49432cac36e0badbf742" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void arrow::BooleanBuilder::Reset</definition>
        <argsstring>() override</argsstring>
        <name>Reset</name>
        <reimplements refid="classarrow_1_1_array_builder_1a71a25653bdf242da1b3a317f4fd49a98">Reset</reimplements>
        <briefdescription>
<para>Reset the builder. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_primitive.h" line="431" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_boolean_builder_1a4f2626da73f59eb1c0473c7adacdf470" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::BooleanBuilder::Resize</definition>
        <argsstring>(int64_t capacity) override</argsstring>
        <name>Resize</name>
        <reimplements refid="classarrow_1_1_array_builder_1a994d873bec453c33fbaeb995442d520b">Resize</reimplements>
        <param>
          <type>int64_t</type>
          <declname>capacity</declname>
        </param>
        <briefdescription>
<para>Ensure that enough memory has been allocated to fit the indicated number of total elements in the builder, including any that have already been appended. </para>        </briefdescription>
        <detaileddescription>
<para>Does not account for reallocations that may be due to variable size data, like binary values. To make space for incremental appends, use Reserve instead.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum number of total array values to accommodate. Must be greater than the current capacity. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_primitive.h" line="432" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_boolean_builder_1aa3517d917b67cb7221fe3ef21fe553c6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::BooleanBuilder::type</definition>
        <argsstring>() const override</argsstring>
        <name>type</name>
        <reimplements refid="classarrow_1_1_array_builder_1a39b4b420be1fcf4fe7219fe953eb65c7">type</reimplements>
        <briefdescription>
<para>Return the type of the built <ref refid="classarrow_1_1_array" kindref="compound">Array</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_primitive.h" line="434" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_primitive.h" bodystart="434" bodyend="434"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="392">
        <label>arrow::BooleanBuilder</label>
        <link refid="classarrow_1_1_boolean_builder"/>
        <childnode refid="393" relation="public-inheritance">
        </childnode>
      </node>
      <node id="393">
        <label>arrow::ArrayBuilder</label>
        <link refid="classarrow_1_1_array_builder"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="396">
        <label>arrow::MemoryPool</label>
        <link refid="classarrow_1_1_memory_pool"/>
      </node>
      <node id="394">
        <label>arrow::BooleanBuilder</label>
        <link refid="classarrow_1_1_boolean_builder"/>
        <childnode refid="395" relation="public-inheritance">
        </childnode>
        <childnode refid="397" relation="usage">
          <edgelabel>data_builder_</edgelabel>
        </childnode>
      </node>
      <node id="397">
        <label>arrow::TypedBufferBuilder&lt; bool &gt;</label>
        <link refid="classarrow_1_1_typed_buffer_builder_3_01bool_01_4"/>
      </node>
      <node id="395">
        <label>arrow::ArrayBuilder</label>
        <link refid="classarrow_1_1_array_builder"/>
        <childnode refid="396" relation="usage">
          <edgelabel>pool_</edgelabel>
        </childnode>
        <childnode refid="397" relation="usage">
          <edgelabel>null_bitmap_builder_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/array/builder_primitive.h" line="272" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_primitive.h" bodystart="272" bodyend="438"/>
    <listofallmembers>
      <member refid="classarrow_1_1_array_builder_1a630ea6ee96e26b8f1a2d08b45180fb32" prot="public" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>Advance</name></member>
      <member refid="classarrow_1_1_boolean_builder_1a8780642eb6e5a4a45e31222e78c1cc09" prot="public" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>Append</name></member>
      <member refid="classarrow_1_1_boolean_builder_1afc580587e3bf57107e524767c375d251" prot="public" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>Append</name></member>
      <member refid="classarrow_1_1_boolean_builder_1aae9f39dbf89f8d1874cc8a4a90aec06b" prot="public" virt="virtual"><scope>arrow::BooleanBuilder</scope><name>AppendNull</name></member>
      <member refid="classarrow_1_1_boolean_builder_1a3ac08ddd73dd5be1d27f2f148cf95d75" prot="public" virt="virtual"><scope>arrow::BooleanBuilder</scope><name>AppendNulls</name></member>
      <member refid="classarrow_1_1_array_builder_1a21c1d9818e379f41e6c72df407ae029d" prot="protected" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>AppendToBitmap</name></member>
      <member refid="classarrow_1_1_array_builder_1a17c9bf5211cb980518df3bb1c33ba4fc" prot="protected" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>AppendToBitmap</name></member>
      <member refid="classarrow_1_1_array_builder_1ab8bb1f62d1eaa27de03c41a2db3d53e3" prot="protected" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>AppendToBitmap</name></member>
      <member refid="classarrow_1_1_boolean_builder_1a60382b2dd40f2d0e66b7ac318fe1d71d" prot="public" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>AppendValues</name></member>
      <member refid="classarrow_1_1_boolean_builder_1ab257c69eaabe3d00eafae7a598f83e91" prot="public" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>AppendValues</name></member>
      <member refid="classarrow_1_1_boolean_builder_1a1cfd3c422525a51a4b1b9fa45ab773be" prot="public" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>AppendValues</name></member>
      <member refid="classarrow_1_1_boolean_builder_1a2e10c5bbd21da120a3c343519977b4c1" prot="public" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>AppendValues</name></member>
      <member refid="classarrow_1_1_boolean_builder_1ac6075414fa190df919ec081884771acc" prot="public" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>AppendValues</name></member>
      <member refid="classarrow_1_1_boolean_builder_1a54d7f7893e1f9b4ea55172a9af4f1bb3" prot="public" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>AppendValues</name></member>
      <member refid="classarrow_1_1_boolean_builder_1ae2a6d1b574abe92480d25c9736c51e69" prot="public" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>AppendValues</name></member>
      <member refid="classarrow_1_1_boolean_builder_1aedf2ef31c0989d7507e7241fc535a29b" prot="public" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>AppendValues</name></member>
      <member refid="classarrow_1_1_boolean_builder_1ade97955cdc3e192bffdee3f1c5ba0552" prot="public" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>AppendValues</name></member>
      <member refid="classarrow_1_1_boolean_builder_1af4c4528e268cff838b8d7a5abc843046" prot="public" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>AppendValues</name></member>
      <member refid="classarrow_1_1_array_builder_1ab5fe829691bef00b33894d51e16e6aa5" prot="public" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>ArrayBuilder</name></member>
      <member refid="classarrow_1_1_boolean_builder_1a2efeda705f9ea90f2076bec171d883ef" prot="public" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>BooleanBuilder</name></member>
      <member refid="classarrow_1_1_boolean_builder_1a3e27f19fa8fd0276ba9dd1771750eb1d" prot="public" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>BooleanBuilder</name></member>
      <member refid="classarrow_1_1_array_builder_1a0236e815af8f62c98bd612eea219cd73" prot="public" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>capacity</name></member>
      <member refid="classarrow_1_1_array_builder_1aeb92737fe5ada5b372459705c1690d7e" prot="protected" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>capacity_</name></member>
      <member refid="classarrow_1_1_array_builder_1a0d77ad3f24791679196dda8b3ac84437" prot="protected" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>CheckCapacity</name></member>
      <member refid="classarrow_1_1_array_builder_1aad4a1ed2c24204b1cc21e44ab0ad444b" prot="public" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>child</name></member>
      <member refid="classarrow_1_1_array_builder_1a66ce8a6890bf6f222baf1642557d889b" prot="protected" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>children_</name></member>
      <member refid="classarrow_1_1_boolean_builder_1a476a09025041ecd70885132105c946a2" prot="protected" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>data_builder_</name></member>
      <member refid="classarrow_1_1_boolean_builder_1ac18cf571ba568b0e58510290e429e9ec" prot="public" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>Finish</name></member>
      <member refid="classarrow_1_1_array_builder_1a67b2227edb4b51bc44425f1c8a439819" prot="public" virt="non-virtual" ambiguityscope="arrow::ArrayBuilder::"><scope>arrow::BooleanBuilder</scope><name>Finish</name></member>
      <member refid="classarrow_1_1_boolean_builder_1a84e5ee3cc0ae427135093c80b014765c" prot="public" virt="virtual"><scope>arrow::BooleanBuilder</scope><name>FinishInternal</name></member>
      <member refid="classarrow_1_1_array_builder_1a9f90da9e81d9db4bc9277458ba70d46a" prot="protected" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>FinishTyped</name></member>
      <member refid="classarrow_1_1_array_builder_1a296ac75b9b3d877192e37681c66513ba" prot="public" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>length</name></member>
      <member refid="classarrow_1_1_array_builder_1ae8b7ebc042e6684440bd9e1c77f0f5c1" prot="protected" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>length_</name></member>
      <member refid="classarrow_1_1_array_builder_1a0f32beedba413982480c5df287946922" prot="protected" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>null_bitmap_builder_</name></member>
      <member refid="classarrow_1_1_array_builder_1aad098f61890072a4576867a7cf4fb9ee" prot="public" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>null_count</name></member>
      <member refid="classarrow_1_1_array_builder_1a9ea96ba4121857ab23241b6b408051b9" prot="protected" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>null_count_</name></member>
      <member refid="classarrow_1_1_array_builder_1aa829b8339092408c9d710cc2c1bdc46a" prot="public" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>num_children</name></member>
      <member refid="classarrow_1_1_array_builder_1a33e3aa20cedda9f6d8581809437f1c86" prot="protected" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>pool_</name></member>
      <member refid="classarrow_1_1_array_builder_1afe8448fda39a8529a119bde5ba7ba119" prot="public" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>Reserve</name></member>
      <member refid="classarrow_1_1_boolean_builder_1a5c7274589b0a49432cac36e0badbf742" prot="public" virt="virtual"><scope>arrow::BooleanBuilder</scope><name>Reset</name></member>
      <member refid="classarrow_1_1_boolean_builder_1a4f2626da73f59eb1c0473c7adacdf470" prot="public" virt="virtual"><scope>arrow::BooleanBuilder</scope><name>Resize</name></member>
      <member refid="classarrow_1_1_array_builder_1aa505ec95646314c3b9254e0cce39538b" prot="protected" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>SetNotNull</name></member>
      <member refid="classarrow_1_1_array_builder_1a1e3e49019e307f0829ef66b72ce1b82e" prot="protected" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>TrimBuffer</name></member>
      <member refid="classarrow_1_1_boolean_builder_1aa3517d917b67cb7221fe3ef21fe553c6" prot="public" virt="virtual"><scope>arrow::BooleanBuilder</scope><name>type</name></member>
      <member refid="classarrow_1_1_boolean_builder_1a015a0bf935ed6cfed91128fe627679b8" prot="public" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>TypeClass</name></member>
      <member refid="classarrow_1_1_boolean_builder_1a3695606656e7e71457473c59d1cee0a8" prot="public" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>UnsafeAppend</name></member>
      <member refid="classarrow_1_1_boolean_builder_1abf0ae864d7e51ee2cb10f9026b699bdb" prot="public" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>UnsafeAppend</name></member>
      <member refid="classarrow_1_1_boolean_builder_1ac6708b26cb77b0a2390b8ddb64bf8737" prot="public" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>UnsafeAppendNull</name></member>
      <member refid="classarrow_1_1_array_builder_1a2dbe80584eac62147112c4d0a43ceea2" prot="protected" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>UnsafeAppendToBitmap</name></member>
      <member refid="classarrow_1_1_array_builder_1afd319659d3125af8a72c0c529c329c12" prot="protected" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>UnsafeAppendToBitmap</name></member>
      <member refid="classarrow_1_1_array_builder_1a40a4e3c231f1f47dcd046c42ee63b63b" prot="protected" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>UnsafeAppendToBitmap</name></member>
      <member refid="classarrow_1_1_array_builder_1a361c8efe3030a75126cbbbe90e9a3ee4" prot="protected" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>UnsafeAppendToBitmap</name></member>
      <member refid="classarrow_1_1_array_builder_1aa0a2125633a3cdb1860d3f62d44ac4a1" prot="protected" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>UnsafeSetNotNull</name></member>
      <member refid="classarrow_1_1_array_builder_1ab5622a696215f318672d5a800d4bfe48" prot="protected" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>UnsafeSetNull</name></member>
      <member refid="classarrow_1_1_boolean_builder_1adafbb5c2669ffc31a0c47df21f72a4a8" prot="public" virt="non-virtual"><scope>arrow::BooleanBuilder</scope><name>value_type</name></member>
      <member refid="classarrow_1_1_array_builder_1a74bb29b347e12ed7528925d12db109a7" prot="public" virt="virtual"><scope>arrow::BooleanBuilder</scope><name>~ArrayBuilder</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
