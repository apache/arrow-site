<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classgandiva_1_1_l_l_v_m_generator" kind="class" language="C++" prot="public">
    <compoundname>gandiva::LLVMGenerator</compoundname>
    <includes refid="llvm__generator_8h" local="no">gandiva/llvm_generator.h</includes>
    <innerclass refid="classgandiva_1_1_l_l_v_m_generator_1_1_visitor" prot="private">gandiva::LLVMGenerator::Visitor</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classgandiva_1_1_l_l_v_m_generator_1a9eae468d166bb01c16322aeeb72a357b" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; <ref refid="classgandiva_1_1_engine" kindref="compound">Engine</ref> &gt;</type>
        <definition>std::unique_ptr&lt;Engine&gt; gandiva::LLVMGenerator::engine_</definition>
        <argsstring></argsstring>
        <name>engine_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/llvm_generator.h" line="239" column="1" bodyfile="/arrow/cpp/src/gandiva/llvm_generator.h" bodystart="239" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgandiva_1_1_l_l_v_m_generator_1ac6d0b5c65ac2fcdaf967d13959e75bf0" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::unique_ptr&lt; <ref refid="classgandiva_1_1_compiled_expr" kindref="compound">CompiledExpr</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::unique_ptr&lt;CompiledExpr&gt; &gt; gandiva::LLVMGenerator::compiled_exprs_</definition>
        <argsstring></argsstring>
        <name>compiled_exprs_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/llvm_generator.h" line="240" column="1" bodyfile="/arrow/cpp/src/gandiva/llvm_generator.h" bodystart="240" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgandiva_1_1_l_l_v_m_generator_1a599a4edb98745e3699072fafebf1c9ba" prot="private" static="no" mutable="no">
        <type><ref refid="classgandiva_1_1_function_registry" kindref="compound">FunctionRegistry</ref></type>
        <definition>FunctionRegistry gandiva::LLVMGenerator::function_registry_</definition>
        <argsstring></argsstring>
        <name>function_registry_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/llvm_generator.h" line="241" column="1" bodyfile="/arrow/cpp/src/gandiva/llvm_generator.h" bodystart="241" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgandiva_1_1_l_l_v_m_generator_1a07d5fad67f4a290b4f53904f00cefa3c" prot="private" static="no" mutable="no">
        <type><ref refid="classgandiva_1_1_annotator" kindref="compound">Annotator</ref></type>
        <definition>Annotator gandiva::LLVMGenerator::annotator_</definition>
        <argsstring></argsstring>
        <name>annotator_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/llvm_generator.h" line="242" column="1" bodyfile="/arrow/cpp/src/gandiva/llvm_generator.h" bodystart="242" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgandiva_1_1_l_l_v_m_generator_1afbf9996b863d9731dec150027558b083" prot="private" static="no" mutable="no">
        <type><ref refid="classgandiva_1_1_selection_vector_1a6b95945ed4cd8c0a38f643d25e3a8fa0" kindref="member">SelectionVector::Mode</ref></type>
        <definition>SelectionVector::Mode gandiva::LLVMGenerator::selection_vector_mode_</definition>
        <argsstring></argsstring>
        <name>selection_vector_mode_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/llvm_generator.h" line="243" column="1" bodyfile="/arrow/cpp/src/gandiva/llvm_generator.h" bodystart="243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgandiva_1_1_l_l_v_m_generator_1ab26fc122ab82c5d9ee839234f056e7a3" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool gandiva::LLVMGenerator::enable_ir_traces_</definition>
        <argsstring></argsstring>
        <name>enable_ir_traces_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/llvm_generator.h" line="246" column="1" bodyfile="/arrow/cpp/src/gandiva/llvm_generator.h" bodystart="246" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgandiva_1_1_l_l_v_m_generator_1a31b0a747279b1578c49eee3f532a3261" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; gandiva::LLVMGenerator::trace_strings_</definition>
        <argsstring></argsstring>
        <name>trace_strings_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/llvm_generator.h" line="247" column="1" bodyfile="/arrow/cpp/src/gandiva/llvm_generator.h" bodystart="247" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classgandiva_1_1_l_l_v_m_generator_1aa76a51d61990b37bc8a78b7f63df0567" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>static Status gandiva::LLVMGenerator::Make</definition>
        <argsstring>(std::shared_ptr&lt; Configuration &gt; config, std::unique_ptr&lt; LLVMGenerator &gt; *llvm_generator)</argsstring>
        <name>Make</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classgandiva_1_1_configuration" kindref="compound">Configuration</ref> &gt;</type>
          <declname>config</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classgandiva_1_1_l_l_v_m_generator" kindref="compound">LLVMGenerator</ref> &gt; *</type>
          <declname>llvm_generator</declname>
        </param>
        <briefdescription>
<para>Factory method to initialize the generator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/llvm_generator.h" line="49" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgandiva_1_1_l_l_v_m_generator_1a58a803f4601367f6333ea64c37276be5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>Status gandiva::LLVMGenerator::Build</definition>
        <argsstring>(const ExpressionVector &amp;exprs, SelectionVector::Mode mode)</argsstring>
        <name>Build</name>
        <param>
          <type>const <ref refid="namespacegandiva_1aad814820a6a80cb656b0f09decdc4cb9" kindref="member">ExpressionVector</ref> &amp;</type>
          <declname>exprs</declname>
        </param>
        <param>
          <type><ref refid="classgandiva_1_1_selection_vector_1a6b95945ed4cd8c0a38f643d25e3a8fa0" kindref="member">SelectionVector::Mode</ref></type>
          <declname>mode</declname>
        </param>
        <briefdescription>
<para>Build the code for the expression trees for default mode. </para>        </briefdescription>
        <detaileddescription>
<para>Each element in the vector represents an expression tree </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/llvm_generator.h" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_l_l_v_m_generator_1a4939c905f0948c6e2f0589f18f9f721d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>Status gandiva::LLVMGenerator::Build</definition>
        <argsstring>(const ExpressionVector &amp;exprs)</argsstring>
        <name>Build</name>
        <param>
          <type>const <ref refid="namespacegandiva_1aad814820a6a80cb656b0f09decdc4cb9" kindref="member">ExpressionVector</ref> &amp;</type>
          <declname>exprs</declname>
        </param>
        <briefdescription>
<para>Build the code for the expression trees for default mode. </para>        </briefdescription>
        <detaileddescription>
<para>Each element in the vector represents an expression tree </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/llvm_generator.h" line="58" column="1" bodyfile="/arrow/cpp/src/gandiva/llvm_generator.h" bodystart="58" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_l_l_v_m_generator_1a3bb803a321f177e2cf0f8ca571411056" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>Status gandiva::LLVMGenerator::Execute</definition>
        <argsstring>(const arrow::RecordBatch &amp;record_batch, const ArrayDataVector &amp;output_vector)</argsstring>
        <name>Execute</name>
        <param>
          <type>const <ref refid="classarrow_1_1_record_batch" kindref="compound">arrow::RecordBatch</ref> &amp;</type>
          <declname>record_batch</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegandiva_1a0fbce3498a8553897e2ff8371059c8bd" kindref="member">ArrayDataVector</ref> &amp;</type>
          <declname>output_vector</declname>
        </param>
        <briefdescription>
<para>Execute the built expression against the provided arguments for default mode. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/llvm_generator.h" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_l_l_v_m_generator_1affc246b1c22fc04bfac30bfded1e831e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>Status gandiva::LLVMGenerator::Execute</definition>
        <argsstring>(const arrow::RecordBatch &amp;record_batch, const SelectionVector *selection_vector, const ArrayDataVector &amp;output_vector)</argsstring>
        <name>Execute</name>
        <param>
          <type>const <ref refid="classarrow_1_1_record_batch" kindref="compound">arrow::RecordBatch</ref> &amp;</type>
          <declname>record_batch</declname>
        </param>
        <param>
          <type>const <ref refid="classgandiva_1_1_selection_vector" kindref="compound">SelectionVector</ref> *</type>
          <declname>selection_vector</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegandiva_1a0fbce3498a8553897e2ff8371059c8bd" kindref="member">ArrayDataVector</ref> &amp;</type>
          <declname>output_vector</declname>
        </param>
        <briefdescription>
<para>Execute the built expression against the provided arguments for all modes. </para>        </briefdescription>
        <detaileddescription>
<para>Only works on the records specified in the selection_vector. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/llvm_generator.h" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_l_l_v_m_generator_1a2696f98b03b882f6c8ac55596bdcef9d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classgandiva_1_1_selection_vector_1a6b95945ed4cd8c0a38f643d25e3a8fa0" kindref="member">SelectionVector::Mode</ref></type>
        <definition>SelectionVector::Mode gandiva::LLVMGenerator::selection_vector_mode</definition>
        <argsstring>()</argsstring>
        <name>selection_vector_mode</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/llvm_generator.h" line="73" column="1" bodyfile="/arrow/cpp/src/gandiva/llvm_generator.h" bodystart="73" bodyend="73"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_l_l_v_m_generator_1a91d0e807407f387167aa70d5328ce6c3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classgandiva_1_1_l_l_v_m_types" kindref="compound">LLVMTypes</ref> *</type>
        <definition>LLVMTypes* gandiva::LLVMGenerator::types</definition>
        <argsstring>()</argsstring>
        <name>types</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/llvm_generator.h" line="74" column="1" bodyfile="/arrow/cpp/src/gandiva/llvm_generator.h" bodystart="74" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_l_l_v_m_generator_1adb6dac4e70e9c952e4325cdaf4574e95" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>llvm::Module *</type>
        <definition>llvm::Module* gandiva::LLVMGenerator::module</definition>
        <argsstring>()</argsstring>
        <name>module</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/llvm_generator.h" line="75" column="1" bodyfile="/arrow/cpp/src/gandiva/llvm_generator.h" bodystart="75" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_l_l_v_m_generator_1a4055cf80af0cf7f1f26fb578ec46e562" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string gandiva::LLVMGenerator::DumpIR</definition>
        <argsstring>()</argsstring>
        <name>DumpIR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/llvm_generator.h" line="76" column="1" bodyfile="/arrow/cpp/src/gandiva/llvm_generator.h" bodystart="76" bodyend="76"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classgandiva_1_1_l_l_v_m_generator_1a7f8bce3bdbc17bbafc842b830028bba9" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gandiva::LLVMGenerator::LLVMGenerator</definition>
        <argsstring>()</argsstring>
        <name>LLVMGenerator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/llvm_generator.h" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_l_l_v_m_generator_1a121c329bec1d2c685423f35f87c1a844" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gandiva::LLVMGenerator::FRIEND_TEST</definition>
        <argsstring>(TestLLVMGenerator, VerifyPCFunctions)</argsstring>
        <name>FRIEND_TEST</name>
        <param>
          <type>TestLLVMGenerator</type>
        </param>
        <param>
          <type>VerifyPCFunctions</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/llvm_generator.h" line="81" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_l_l_v_m_generator_1a14d377cb6af2357b3f9d73e2c48ba660" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gandiva::LLVMGenerator::FRIEND_TEST</definition>
        <argsstring>(TestLLVMGenerator, TestAdd)</argsstring>
        <name>FRIEND_TEST</name>
        <param>
          <type>TestLLVMGenerator</type>
        </param>
        <param>
          <type>TestAdd</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/llvm_generator.h" line="82" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_l_l_v_m_generator_1a92ccc0e6e76619c0cfab79e104112eba" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>gandiva::LLVMGenerator::FRIEND_TEST</definition>
        <argsstring>(TestLLVMGenerator, TestNullInternal)</argsstring>
        <name>FRIEND_TEST</name>
        <param>
          <type>TestLLVMGenerator</type>
        </param>
        <param>
          <type>TestNullInternal</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/llvm_generator.h" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_l_l_v_m_generator_1a9ffd63526f6c61f1625a0603ff3aa88e" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>llvm::LLVMContext *</type>
        <definition>llvm::LLVMContext* gandiva::LLVMGenerator::context</definition>
        <argsstring>()</argsstring>
        <name>context</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/llvm_generator.h" line="85" column="1" bodyfile="/arrow/cpp/src/gandiva/llvm_generator.h" bodystart="85" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_l_l_v_m_generator_1a41cdbd3b527434da0f5dafa83a760863" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>llvm::IRBuilder *</type>
        <definition>llvm::IRBuilder* gandiva::LLVMGenerator::ir_builder</definition>
        <argsstring>()</argsstring>
        <name>ir_builder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/llvm_generator.h" line="86" column="1" bodyfile="/arrow/cpp/src/gandiva/llvm_generator.h" bodystart="86" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_l_l_v_m_generator_1af10ad23d87ede2a057e6fc2363729c85" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>Status gandiva::LLVMGenerator::Add</definition>
        <argsstring>(const ExpressionPtr expr, const FieldDescriptorPtr output)</argsstring>
        <name>Add</name>
        <param>
          <type>const <ref refid="namespacegandiva_1a6735ddd686b37cdc7cda5f33008497c9" kindref="member">ExpressionPtr</ref></type>
          <declname>expr</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegandiva_1a35aabfbc0202ae826625ee230e45e40c" kindref="member">FieldDescriptorPtr</ref></type>
          <declname>output</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/llvm_generator.h" line="172" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_l_l_v_m_generator_1a86adc84e79e336db54b6e26678cc3818" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::Value *</type>
        <definition>llvm::Value* gandiva::LLVMGenerator::LoadVectorAtIndex</definition>
        <argsstring>(llvm::Value *arg_addrs, int idx, const std::string &amp;name)</argsstring>
        <name>LoadVectorAtIndex</name>
        <param>
          <type>llvm::Value *</type>
          <declname>arg_addrs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Generate code to load the vector at specified index in the &apos;arg_addrs&apos; array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/llvm_generator.h" line="175" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_l_l_v_m_generator_1a90e713dce8f3cd77623ff10afd589494" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::Value *</type>
        <definition>llvm::Value* gandiva::LLVMGenerator::GetValidityReference</definition>
        <argsstring>(llvm::Value *arg_addrs, int idx, FieldPtr field)</argsstring>
        <name>GetValidityReference</name>
        <param>
          <type>llvm::Value *</type>
          <declname>arg_addrs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <param>
          <type><ref refid="namespacegandiva_1a8202d69b17c893247edc1c7653412438" kindref="member">FieldPtr</ref></type>
          <declname>field</declname>
        </param>
        <briefdescription>
<para>Generate code to load the vector at specified index and cast it as bitmap. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/llvm_generator.h" line="179" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_l_l_v_m_generator_1a24076d74c72ca1deea8688d21019518c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::Value *</type>
        <definition>llvm::Value* gandiva::LLVMGenerator::GetDataReference</definition>
        <argsstring>(llvm::Value *arg_addrs, int idx, FieldPtr field)</argsstring>
        <name>GetDataReference</name>
        <param>
          <type>llvm::Value *</type>
          <declname>arg_addrs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <param>
          <type><ref refid="namespacegandiva_1a8202d69b17c893247edc1c7653412438" kindref="member">FieldPtr</ref></type>
          <declname>field</declname>
        </param>
        <briefdescription>
<para>Generate code to load the vector at specified index and cast it as data array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/llvm_generator.h" line="182" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_l_l_v_m_generator_1a8a31a3aec76b503e0b984593d7544b9a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::Value *</type>
        <definition>llvm::Value* gandiva::LLVMGenerator::GetOffsetsReference</definition>
        <argsstring>(llvm::Value *arg_addrs, int idx, FieldPtr field)</argsstring>
        <name>GetOffsetsReference</name>
        <param>
          <type>llvm::Value *</type>
          <declname>arg_addrs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <param>
          <type><ref refid="namespacegandiva_1a8202d69b17c893247edc1c7653412438" kindref="member">FieldPtr</ref></type>
          <declname>field</declname>
        </param>
        <briefdescription>
<para>Generate code to load the vector at specified index and cast it as offsets array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/llvm_generator.h" line="185" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_l_l_v_m_generator_1a6ef9e81c2f8d69d32de316d0008ee45b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::Value *</type>
        <definition>llvm::Value* gandiva::LLVMGenerator::GetDataBufferPtrReference</definition>
        <argsstring>(llvm::Value *arg_addrs, int idx, FieldPtr field)</argsstring>
        <name>GetDataBufferPtrReference</name>
        <param>
          <type>llvm::Value *</type>
          <declname>arg_addrs</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <param>
          <type><ref refid="namespacegandiva_1a8202d69b17c893247edc1c7653412438" kindref="member">FieldPtr</ref></type>
          <declname>field</declname>
        </param>
        <briefdescription>
<para>Generate code to load the vector at specified index and cast it as buffer pointer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/llvm_generator.h" line="188" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_l_l_v_m_generator_1a6e8d48e5bd4ce9370efcbc272b2dad9d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>Status gandiva::LLVMGenerator::CodeGenExprValue</definition>
        <argsstring>(DexPtr value_expr, int num_buffers, FieldDescriptorPtr output, int suffix_idx, llvm::Function **fn, SelectionVector::Mode selection_vector_mode)</argsstring>
        <name>CodeGenExprValue</name>
        <param>
          <type><ref refid="namespacegandiva_1a90061130771aa24c22b3875b23b473f5" kindref="member">DexPtr</ref></type>
          <declname>value_expr</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num_buffers</declname>
        </param>
        <param>
          <type><ref refid="namespacegandiva_1a35aabfbc0202ae826625ee230e45e40c" kindref="member">FieldDescriptorPtr</ref></type>
          <declname>output</declname>
        </param>
        <param>
          <type>int</type>
          <declname>suffix_idx</declname>
        </param>
        <param>
          <type>llvm::Function **</type>
          <declname>fn</declname>
        </param>
        <param>
          <type><ref refid="classgandiva_1_1_selection_vector_1a6b95945ed4cd8c0a38f643d25e3a8fa0" kindref="member">SelectionVector::Mode</ref></type>
          <declname>selection_vector_mode</declname>
        </param>
        <briefdescription>
<para>Generate code for the value array of one expression. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/llvm_generator.h" line="191" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_l_l_v_m_generator_1a252b38bb76336498103969acda6f0012" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::Value *</type>
        <definition>llvm::Value* gandiva::LLVMGenerator::GetLocalBitMapReference</definition>
        <argsstring>(llvm::Value *arg_bitmaps, int idx)</argsstring>
        <name>GetLocalBitMapReference</name>
        <param>
          <type>llvm::Value *</type>
          <declname>arg_bitmaps</declname>
        </param>
        <param>
          <type>int</type>
          <declname>idx</declname>
        </param>
        <briefdescription>
<para>Generate code to load the local bitmap specified index and cast it as bitmap. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/llvm_generator.h" line="196" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_l_l_v_m_generator_1aa9eb73419e4b98d0d76a29b223625f15" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::Value *</type>
        <definition>llvm::Value* gandiva::LLVMGenerator::GetPackedBitValue</definition>
        <argsstring>(llvm::Value *bitmap, llvm::Value *position)</argsstring>
        <name>GetPackedBitValue</name>
        <param>
          <type>llvm::Value *</type>
          <declname>bitmap</declname>
        </param>
        <param>
          <type>llvm::Value *</type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Generate code to get the bit value at &apos;position&apos; in the bitmap. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/llvm_generator.h" line="199" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_l_l_v_m_generator_1a88fa34cb1027d26a88059c52058a3734" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::Value *</type>
        <definition>llvm::Value* gandiva::LLVMGenerator::GetPackedValidityBitValue</definition>
        <argsstring>(llvm::Value *bitmap, llvm::Value *position)</argsstring>
        <name>GetPackedValidityBitValue</name>
        <param>
          <type>llvm::Value *</type>
          <declname>bitmap</declname>
        </param>
        <param>
          <type>llvm::Value *</type>
          <declname>position</declname>
        </param>
        <briefdescription>
<para>Generate code to get the bit value at &apos;position&apos; in the validity bitmap. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/llvm_generator.h" line="202" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_l_l_v_m_generator_1ad6785d798619ad176b65fddc3fece82f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gandiva::LLVMGenerator::SetPackedBitValue</definition>
        <argsstring>(llvm::Value *bitmap, llvm::Value *position, llvm::Value *value)</argsstring>
        <name>SetPackedBitValue</name>
        <param>
          <type>llvm::Value *</type>
          <declname>bitmap</declname>
        </param>
        <param>
          <type>llvm::Value *</type>
          <declname>position</declname>
        </param>
        <param>
          <type>llvm::Value *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Generate code to set the bit value at &apos;position&apos; in the bitmap to &apos;value&apos;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/llvm_generator.h" line="205" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_l_l_v_m_generator_1a8fe5479fc4ebc1b039ac9f0ef5b0493f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gandiva::LLVMGenerator::ClearPackedBitValueIfFalse</definition>
        <argsstring>(llvm::Value *bitmap, llvm::Value *position, llvm::Value *value)</argsstring>
        <name>ClearPackedBitValueIfFalse</name>
        <param>
          <type>llvm::Value *</type>
          <declname>bitmap</declname>
        </param>
        <param>
          <type>llvm::Value *</type>
          <declname>position</declname>
        </param>
        <param>
          <type>llvm::Value *</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Generate code to clear the bit value at &apos;position&apos; in the bitmap if &apos;value&apos; is false. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/llvm_generator.h" line="209" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_l_l_v_m_generator_1aab0b32b5be4cda96a99072c6c62679d2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classgandiva_1_1_decimal_l_value" kindref="compound">DecimalLValue</ref> &gt;</type>
        <definition>std::shared_ptr&lt;DecimalLValue&gt; gandiva::LLVMGenerator::BuildDecimalLValue</definition>
        <argsstring>(llvm::Value *value, DataTypePtr arrow_type)</argsstring>
        <name>BuildDecimalLValue</name>
        <param>
          <type>llvm::Value *</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="namespacegandiva_1a3e3446d98cf1dcf281b0d3f6c16a65d3" kindref="member">DataTypePtr</ref></type>
          <declname>arrow_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/llvm_generator.h" line="213" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_l_l_v_m_generator_1abb5d2f20b2191f479f2d41d7120d48f2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>llvm::Value *</type>
        <definition>llvm::Value* gandiva::LLVMGenerator::AddFunctionCall</definition>
        <argsstring>(const std::string &amp;full_name, llvm::Type *ret_type, const std::vector&lt; llvm::Value *&gt; &amp;args)</argsstring>
        <name>AddFunctionCall</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>full_name</declname>
        </param>
        <param>
          <type>llvm::Type *</type>
          <declname>ret_type</declname>
        </param>
        <param>
          <type>const std::vector&lt; llvm::Value *&gt; &amp;</type>
          <declname>args</declname>
        </param>
        <briefdescription>
<para>Generate code to make a function call (to a pre-compiled IR function) which takes &apos;args&apos; and has a return type &apos;ret_type&apos;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/llvm_generator.h" line="218" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_l_l_v_m_generator_1aae8ba426c6b2c9d8846e66034063cd48" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gandiva::LLVMGenerator::ComputeBitMapsForExpr</definition>
        <argsstring>(const CompiledExpr &amp;compiled_expr, const EvalBatch &amp;eval_batch, const SelectionVector *selection_vector)</argsstring>
        <name>ComputeBitMapsForExpr</name>
        <param>
          <type>const <ref refid="classgandiva_1_1_compiled_expr" kindref="compound">CompiledExpr</ref> &amp;</type>
          <declname>compiled_expr</declname>
        </param>
        <param>
          <type>const <ref refid="classgandiva_1_1_eval_batch" kindref="compound">EvalBatch</ref> &amp;</type>
          <declname>eval_batch</declname>
        </param>
        <param>
          <type>const <ref refid="classgandiva_1_1_selection_vector" kindref="compound">SelectionVector</ref> *</type>
          <declname>selection_vector</declname>
        </param>
        <briefdescription>
<para>Compute the result bitmap for the expression. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">compiled_expr</parametername>
</parameternamelist>
<parameterdescription>
<para>the compiled expression (includes the bitmap indices to be used for computing the validity bitmap of the result). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">eval_batch</parametername>
</parameternamelist>
<parameterdescription>
<para>(includes input/output buffer addresses) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">selection_vector</parametername>
</parameternamelist>
<parameterdescription>
<para>the list of selected positions </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/llvm_generator.h" line="227" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_l_l_v_m_generator_1a1752b2e6e74a89fb408ab6022f02fa06" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string gandiva::LLVMGenerator::ReplaceFormatInTrace</definition>
        <argsstring>(const std::string &amp;msg, llvm::Value *value, std::string *print_fn)</argsstring>
        <name>ReplaceFormatInTrace</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>llvm::Value *</type>
          <declname>value</declname>
        </param>
        <param>
          <type>std::string *</type>
          <declname>print_fn</declname>
        </param>
        <briefdescription>
<para>Replace the T in the trace msg with the correct type corresponding to &apos;type&apos; eg. </para>        </briefdescription>
        <detaileddescription>
<para>d for int32, ld for int64, .. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/llvm_generator.h" line="233" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_l_l_v_m_generator_1a6757513bed220a3f5b9aa93a367d2128" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void gandiva::LLVMGenerator::AddTrace</definition>
        <argsstring>(const std::string &amp;msg, llvm::Value *value=NULLPTR)</argsstring>
        <name>AddTrace</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>llvm::Value *</type>
          <declname>value</declname>
          <defval><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></defval>
        </param>
        <briefdescription>
<para>Generate the code to print a trace msg with one optional argument (T) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/llvm_generator.h" line="237" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Builds an LLVM module and generates code for the specified set of expressions. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/gandiva/llvm_generator.h" line="46" column="1" bodyfile="/arrow/cpp/src/gandiva/llvm_generator.h" bodystart="46" bodyend="248"/>
    <listofallmembers>
      <member refid="classgandiva_1_1_l_l_v_m_generator_1af10ad23d87ede2a057e6fc2363729c85" prot="private" virt="non-virtual"><scope>gandiva::LLVMGenerator</scope><name>Add</name></member>
      <member refid="classgandiva_1_1_l_l_v_m_generator_1abb5d2f20b2191f479f2d41d7120d48f2" prot="private" virt="non-virtual"><scope>gandiva::LLVMGenerator</scope><name>AddFunctionCall</name></member>
      <member refid="classgandiva_1_1_l_l_v_m_generator_1a6757513bed220a3f5b9aa93a367d2128" prot="private" virt="non-virtual"><scope>gandiva::LLVMGenerator</scope><name>AddTrace</name></member>
      <member refid="classgandiva_1_1_l_l_v_m_generator_1a07d5fad67f4a290b4f53904f00cefa3c" prot="private" virt="non-virtual"><scope>gandiva::LLVMGenerator</scope><name>annotator_</name></member>
      <member refid="classgandiva_1_1_l_l_v_m_generator_1a58a803f4601367f6333ea64c37276be5" prot="public" virt="non-virtual"><scope>gandiva::LLVMGenerator</scope><name>Build</name></member>
      <member refid="classgandiva_1_1_l_l_v_m_generator_1a4939c905f0948c6e2f0589f18f9f721d" prot="public" virt="non-virtual"><scope>gandiva::LLVMGenerator</scope><name>Build</name></member>
      <member refid="classgandiva_1_1_l_l_v_m_generator_1aab0b32b5be4cda96a99072c6c62679d2" prot="private" virt="non-virtual"><scope>gandiva::LLVMGenerator</scope><name>BuildDecimalLValue</name></member>
      <member refid="classgandiva_1_1_l_l_v_m_generator_1a8fe5479fc4ebc1b039ac9f0ef5b0493f" prot="private" virt="non-virtual"><scope>gandiva::LLVMGenerator</scope><name>ClearPackedBitValueIfFalse</name></member>
      <member refid="classgandiva_1_1_l_l_v_m_generator_1a6e8d48e5bd4ce9370efcbc272b2dad9d" prot="private" virt="non-virtual"><scope>gandiva::LLVMGenerator</scope><name>CodeGenExprValue</name></member>
      <member refid="classgandiva_1_1_l_l_v_m_generator_1ac6d0b5c65ac2fcdaf967d13959e75bf0" prot="private" virt="non-virtual"><scope>gandiva::LLVMGenerator</scope><name>compiled_exprs_</name></member>
      <member refid="classgandiva_1_1_l_l_v_m_generator_1aae8ba426c6b2c9d8846e66034063cd48" prot="private" virt="non-virtual"><scope>gandiva::LLVMGenerator</scope><name>ComputeBitMapsForExpr</name></member>
      <member refid="classgandiva_1_1_l_l_v_m_generator_1a9ffd63526f6c61f1625a0603ff3aa88e" prot="private" virt="non-virtual"><scope>gandiva::LLVMGenerator</scope><name>context</name></member>
      <member refid="classgandiva_1_1_l_l_v_m_generator_1a4055cf80af0cf7f1f26fb578ec46e562" prot="public" virt="non-virtual"><scope>gandiva::LLVMGenerator</scope><name>DumpIR</name></member>
      <member refid="classgandiva_1_1_l_l_v_m_generator_1ab26fc122ab82c5d9ee839234f056e7a3" prot="private" virt="non-virtual"><scope>gandiva::LLVMGenerator</scope><name>enable_ir_traces_</name></member>
      <member refid="classgandiva_1_1_l_l_v_m_generator_1a9eae468d166bb01c16322aeeb72a357b" prot="private" virt="non-virtual"><scope>gandiva::LLVMGenerator</scope><name>engine_</name></member>
      <member refid="classgandiva_1_1_l_l_v_m_generator_1a3bb803a321f177e2cf0f8ca571411056" prot="public" virt="non-virtual"><scope>gandiva::LLVMGenerator</scope><name>Execute</name></member>
      <member refid="classgandiva_1_1_l_l_v_m_generator_1affc246b1c22fc04bfac30bfded1e831e" prot="public" virt="non-virtual"><scope>gandiva::LLVMGenerator</scope><name>Execute</name></member>
      <member refid="classgandiva_1_1_l_l_v_m_generator_1a121c329bec1d2c685423f35f87c1a844" prot="private" virt="non-virtual"><scope>gandiva::LLVMGenerator</scope><name>FRIEND_TEST</name></member>
      <member refid="classgandiva_1_1_l_l_v_m_generator_1a14d377cb6af2357b3f9d73e2c48ba660" prot="private" virt="non-virtual"><scope>gandiva::LLVMGenerator</scope><name>FRIEND_TEST</name></member>
      <member refid="classgandiva_1_1_l_l_v_m_generator_1a92ccc0e6e76619c0cfab79e104112eba" prot="private" virt="non-virtual"><scope>gandiva::LLVMGenerator</scope><name>FRIEND_TEST</name></member>
      <member refid="classgandiva_1_1_l_l_v_m_generator_1a599a4edb98745e3699072fafebf1c9ba" prot="private" virt="non-virtual"><scope>gandiva::LLVMGenerator</scope><name>function_registry_</name></member>
      <member refid="classgandiva_1_1_l_l_v_m_generator_1a6ef9e81c2f8d69d32de316d0008ee45b" prot="private" virt="non-virtual"><scope>gandiva::LLVMGenerator</scope><name>GetDataBufferPtrReference</name></member>
      <member refid="classgandiva_1_1_l_l_v_m_generator_1a24076d74c72ca1deea8688d21019518c" prot="private" virt="non-virtual"><scope>gandiva::LLVMGenerator</scope><name>GetDataReference</name></member>
      <member refid="classgandiva_1_1_l_l_v_m_generator_1a252b38bb76336498103969acda6f0012" prot="private" virt="non-virtual"><scope>gandiva::LLVMGenerator</scope><name>GetLocalBitMapReference</name></member>
      <member refid="classgandiva_1_1_l_l_v_m_generator_1a8a31a3aec76b503e0b984593d7544b9a" prot="private" virt="non-virtual"><scope>gandiva::LLVMGenerator</scope><name>GetOffsetsReference</name></member>
      <member refid="classgandiva_1_1_l_l_v_m_generator_1aa9eb73419e4b98d0d76a29b223625f15" prot="private" virt="non-virtual"><scope>gandiva::LLVMGenerator</scope><name>GetPackedBitValue</name></member>
      <member refid="classgandiva_1_1_l_l_v_m_generator_1a88fa34cb1027d26a88059c52058a3734" prot="private" virt="non-virtual"><scope>gandiva::LLVMGenerator</scope><name>GetPackedValidityBitValue</name></member>
      <member refid="classgandiva_1_1_l_l_v_m_generator_1a90e713dce8f3cd77623ff10afd589494" prot="private" virt="non-virtual"><scope>gandiva::LLVMGenerator</scope><name>GetValidityReference</name></member>
      <member refid="classgandiva_1_1_l_l_v_m_generator_1a41cdbd3b527434da0f5dafa83a760863" prot="private" virt="non-virtual"><scope>gandiva::LLVMGenerator</scope><name>ir_builder</name></member>
      <member refid="classgandiva_1_1_l_l_v_m_generator_1a7f8bce3bdbc17bbafc842b830028bba9" prot="private" virt="non-virtual"><scope>gandiva::LLVMGenerator</scope><name>LLVMGenerator</name></member>
      <member refid="classgandiva_1_1_l_l_v_m_generator_1a86adc84e79e336db54b6e26678cc3818" prot="private" virt="non-virtual"><scope>gandiva::LLVMGenerator</scope><name>LoadVectorAtIndex</name></member>
      <member refid="classgandiva_1_1_l_l_v_m_generator_1aa76a51d61990b37bc8a78b7f63df0567" prot="public" virt="non-virtual"><scope>gandiva::LLVMGenerator</scope><name>Make</name></member>
      <member refid="classgandiva_1_1_l_l_v_m_generator_1adb6dac4e70e9c952e4325cdaf4574e95" prot="public" virt="non-virtual"><scope>gandiva::LLVMGenerator</scope><name>module</name></member>
      <member refid="classgandiva_1_1_l_l_v_m_generator_1a1752b2e6e74a89fb408ab6022f02fa06" prot="private" virt="non-virtual"><scope>gandiva::LLVMGenerator</scope><name>ReplaceFormatInTrace</name></member>
      <member refid="classgandiva_1_1_l_l_v_m_generator_1a2696f98b03b882f6c8ac55596bdcef9d" prot="public" virt="non-virtual"><scope>gandiva::LLVMGenerator</scope><name>selection_vector_mode</name></member>
      <member refid="classgandiva_1_1_l_l_v_m_generator_1afbf9996b863d9731dec150027558b083" prot="private" virt="non-virtual"><scope>gandiva::LLVMGenerator</scope><name>selection_vector_mode_</name></member>
      <member refid="classgandiva_1_1_l_l_v_m_generator_1ad6785d798619ad176b65fddc3fece82f" prot="private" virt="non-virtual"><scope>gandiva::LLVMGenerator</scope><name>SetPackedBitValue</name></member>
      <member refid="classgandiva_1_1_l_l_v_m_generator_1a31b0a747279b1578c49eee3f532a3261" prot="private" virt="non-virtual"><scope>gandiva::LLVMGenerator</scope><name>trace_strings_</name></member>
      <member refid="classgandiva_1_1_l_l_v_m_generator_1a91d0e807407f387167aa70d5328ce6c3" prot="public" virt="non-virtual"><scope>gandiva::LLVMGenerator</scope><name>types</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
