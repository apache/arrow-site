<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1io_1_1_hdfs_readable_file" kind="class" language="C++" prot="public">
    <compoundname>arrow::io::HdfsReadableFile</compoundname>
    <basecompoundref refid="classarrow_1_1io_1_1_random_access_file" prot="public" virt="non-virtual">arrow::io::RandomAccessFile</basecompoundref>
    <includes refid="io_2hdfs_8h" local="no">arrow/io/hdfs.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classarrow_1_1io_1_1_hdfs_readable_file_1adc2fe50c9522af7391b8430ccccd3387" prot="private" static="no" mutable="no">
        <type>class <ref refid="arrow_2util_2visibility_8h_1a843cb8dccea68a22a2b9995605cb5a74" kindref="member">ARROW_NO_EXPORT</ref></type>
        <definition>class ARROW_NO_EXPORT arrow::io::HdfsReadableFile::HdfsReadableFileImpl</definition>
        <argsstring></argsstring>
        <name>HdfsReadableFileImpl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="234" column="1" bodyfile="/arrow/cpp/src/arrow/io/hdfs.h" bodystart="236" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1io_1_1_hdfs_readable_file_1a4e8d5e5be65b0807ea50d100059e6c96" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; HdfsReadableFileImpl &gt;</type>
        <definition>std::unique_ptr&lt;HdfsReadableFileImpl&gt; arrow::io::HdfsReadableFile::impl_</definition>
        <argsstring></argsstring>
        <name>impl_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="237" column="1" bodyfile="/arrow/cpp/src/arrow/io/hdfs.h" bodystart="237" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classarrow_1_1io_1_1_hdfs_readable_file_1a2c0e64271cef9799af36654b4b0e4604" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class HadoopFileSystem::HadoopFileSystemImpl</definition>
        <argsstring></argsstring>
        <name>HadoopFileSystem::HadoopFileSystemImpl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="239" column="1" bodyfile="/arrow/cpp/src/arrow/io/hdfs.h" bodystart="239" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1io_1_1_hdfs_readable_file_1a8b098b30462cd0d16e09eeee227107d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::io::HdfsReadableFile::~HdfsReadableFile</definition>
        <argsstring>() override</argsstring>
        <name>~HdfsReadableFile</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="214" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_hdfs_readable_file_1ac2f3703a94d75d3380598edf922860b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::HdfsReadableFile::Close</definition>
        <argsstring>() override</argsstring>
        <name>Close</name>
        <reimplements refid="classarrow_1_1io_1_1_file_interface_1ae0f46d227a430af180576715e7aa0b78">Close</reimplements>
        <briefdescription>
<para>Close the stream cleanly. </para>        </briefdescription>
        <detaileddescription>
<para>For writable streams, this will attempt to flush any pending data before releasing the underlying resource.</para><para>After <ref refid="classarrow_1_1io_1_1_hdfs_readable_file_1ac2f3703a94d75d3380598edf922860b0" kindref="member">Close()</ref> is called, <ref refid="classarrow_1_1io_1_1_hdfs_readable_file_1a936fe66d667a50b35b099a9c3143455f" kindref="member">closed()</ref> returns true and the stream is not available for further operations. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="216" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_hdfs_readable_file_1a936fe66d667a50b35b099a9c3143455f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool arrow::io::HdfsReadableFile::closed</definition>
        <argsstring>() const override</argsstring>
        <name>closed</name>
        <reimplements refid="classarrow_1_1io_1_1_file_interface_1a5ba1d2c3cec2e05e7b0018624f19c10b">closed</reimplements>
        <briefdescription>
<para>Return whether the stream is closed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="218" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_hdfs_readable_file_1af200c5550a7d4011b39573f603f37884" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; int64_t &gt;</type>
        <definition>Result&lt;int64_t&gt; arrow::io::HdfsReadableFile::Read</definition>
        <argsstring>(int64_t nbytes, void *out) override</argsstring>
        <name>Read</name>
        <reimplements refid="classarrow_1_1io_1_1_readable_1ab94d6d47006df39f6cf77c078a61b8d8">Read</reimplements>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Read data from current file position. </para>        </briefdescription>
        <detaileddescription>
<para>Read at most <computeroutput>nbytes</computeroutput> from the current file position into <computeroutput>out</computeroutput>. The number of bytes read is returned. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="222" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_hdfs_readable_file_1aae684e42de4b0bee68e15a96bd9e196b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;Buffer&gt; &gt; arrow::io::HdfsReadableFile::Read</definition>
        <argsstring>(int64_t nbytes) override</argsstring>
        <name>Read</name>
        <reimplements refid="classarrow_1_1io_1_1_readable_1aca2d005299c3af1092bedff34b5b015b">Read</reimplements>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
<para>Read data from current file position. </para>        </briefdescription>
        <detaileddescription>
<para>Read at most <computeroutput>nbytes</computeroutput> from the current file position. Less bytes may be read if EOF is reached. This method updates the current file position.</para><para>In some cases (e.g. a memory-mapped file), this method may avoid a memory copy. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="223" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_hdfs_readable_file_1ae49cbcb5d02ee5cfe796ab1fb9da8a23" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; int64_t &gt;</type>
        <definition>Result&lt;int64_t&gt; arrow::io::HdfsReadableFile::ReadAt</definition>
        <argsstring>(int64_t position, int64_t nbytes, void *out) override</argsstring>
        <name>ReadAt</name>
        <reimplements refid="classarrow_1_1io_1_1_random_access_file_1adb9d40656e516d6b77ee2bdfc00126f3">ReadAt</reimplements>
        <param>
          <type>int64_t</type>
          <declname>position</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Read data from given file position. </para>        </briefdescription>
        <detaileddescription>
<para>At most <computeroutput>nbytes</computeroutput> bytes are read. The number of bytes read is returned (it can be less than <computeroutput>nbytes</computeroutput> if EOF is reached).</para><para>This method can be safely called from multiple threads concurrently. It is unspecified whether this method updates the file position or not.</para><para>The default RandomAccessFile-provided implementation uses <ref refid="classarrow_1_1io_1_1_hdfs_readable_file_1a3bd037aee8da7719ca61f6a1a31cab27" kindref="member">Seek()</ref> and <ref refid="classarrow_1_1io_1_1_hdfs_readable_file_1af200c5550a7d4011b39573f603f37884" kindref="member">Read()</ref>, but subclasses may override it with a more efficient implementation that doesn&apos;t depend on implicit file positioning.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">position</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to read bytes from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer to read bytes into </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of bytes read, or an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="224" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_hdfs_readable_file_1a72bf1d2aa7615fbc0f8b62326053da4e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;Buffer&gt; &gt; arrow::io::HdfsReadableFile::ReadAt</definition>
        <argsstring>(int64_t position, int64_t nbytes) override</argsstring>
        <name>ReadAt</name>
        <reimplements refid="classarrow_1_1io_1_1_random_access_file_1a562433f2be06021acb9abd20bd5a8219">ReadAt</reimplements>
        <param>
          <type>int64_t</type>
          <declname>position</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
<para>Read data from given file position. </para>        </briefdescription>
        <detaileddescription>
<para>At most <computeroutput>nbytes</computeroutput> bytes are read, but it can be less if EOF is reached.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">position</parametername>
</parameternamelist>
<parameterdescription>
<para>Where to read bytes from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to read </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A buffer containing the bytes read, or an error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="225" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_hdfs_readable_file_1a3bd037aee8da7719ca61f6a1a31cab27" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::HdfsReadableFile::Seek</definition>
        <argsstring>(int64_t position) override</argsstring>
        <name>Seek</name>
        <reimplements refid="classarrow_1_1io_1_1_seekable_1a410ba0e0932dbcb939b570ee3c8c6d25">Seek</reimplements>
        <param>
          <type>int64_t</type>
          <declname>position</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="227" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_hdfs_readable_file_1a3da69e1f676fc6ada6f59278fdc0e7de" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; int64_t &gt;</type>
        <definition>Result&lt;int64_t&gt; arrow::io::HdfsReadableFile::Tell</definition>
        <argsstring>() const override</argsstring>
        <name>Tell</name>
        <reimplements refid="classarrow_1_1io_1_1_file_interface_1ac6c6709147a46cd7f45d0779c1819ce6">Tell</reimplements>
        <briefdescription>
<para>Return the position in this stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="228" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_hdfs_readable_file_1ab8a1be664475bce844fbbd01924cc7ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; int64_t &gt;</type>
        <definition>Result&lt;int64_t&gt; arrow::io::HdfsReadableFile::GetSize</definition>
        <argsstring>() override</argsstring>
        <name>GetSize</name>
        <reimplements refid="classarrow_1_1io_1_1_random_access_file_1a2a476c2a6ad474e123d1aab20be289c4">GetSize</reimplements>
        <briefdescription>
<para>Return the total file size in bytes. </para>        </briefdescription>
        <detaileddescription>
<para>This method does not read or move the current file position, so is safe to call concurrently with e.g. <ref refid="classarrow_1_1io_1_1_hdfs_readable_file_1ae49cbcb5d02ee5cfe796ab1fb9da8a23" kindref="member">ReadAt()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="229" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_hdfs_readable_file_1ac938f3b07325466754651647dcde0bba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void arrow::io::HdfsReadableFile::set_memory_pool</definition>
        <argsstring>(MemoryPool *pool)</argsstring>
        <name>set_memory_pool</name>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="231" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classarrow_1_1io_1_1_hdfs_readable_file_1af8677e1a0c5e9cba4ab88aec70e4c204" prot="private" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::io::HdfsReadableFile::HdfsReadableFile</definition>
        <argsstring>(MemoryPool *pool=NULLPTR)</argsstring>
        <name>HdfsReadableFile</name>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
          <defval><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="234" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_hdfs_readable_file_1a3da72eb7c25d58519754cf92db680a5a" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::io::HdfsReadableFile::ARROW_DISALLOW_COPY_AND_ASSIGN</definition>
        <argsstring>(HdfsReadableFile)</argsstring>
        <name>ARROW_DISALLOW_COPY_AND_ASSIGN</name>
        <param>
          <type><ref refid="classarrow_1_1io_1_1_hdfs_readable_file" kindref="compound">HdfsReadableFile</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="241" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2193">
        <label>arrow::io::Readable</label>
        <link refid="classarrow_1_1io_1_1_readable"/>
      </node>
      <node id="2192">
        <label>arrow::io::FileInterface</label>
        <link refid="classarrow_1_1io_1_1_file_interface"/>
      </node>
      <node id="2194">
        <label>arrow::io::Seekable</label>
        <link refid="classarrow_1_1io_1_1_seekable"/>
      </node>
      <node id="2188">
        <label>arrow::io::HdfsReadableFile</label>
        <link refid="classarrow_1_1io_1_1_hdfs_readable_file"/>
        <childnode refid="2189" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2190">
        <label>std::enable_shared_from_this&lt; RandomAccessFile &gt;</label>
      </node>
      <node id="2191">
        <label>arrow::io::InputStream</label>
        <link refid="classarrow_1_1io_1_1_input_stream"/>
        <childnode refid="2192" relation="public-inheritance">
        </childnode>
        <childnode refid="2193" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2189">
        <label>arrow::io::RandomAccessFile</label>
        <link refid="classarrow_1_1io_1_1_random_access_file"/>
        <childnode refid="2190" relation="public-inheritance">
        </childnode>
        <childnode refid="2191" relation="public-inheritance">
        </childnode>
        <childnode refid="2194" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2200">
        <label>arrow::io::Readable</label>
        <link refid="classarrow_1_1io_1_1_readable"/>
      </node>
      <node id="2199">
        <label>arrow::io::FileInterface</label>
        <link refid="classarrow_1_1io_1_1_file_interface"/>
      </node>
      <node id="2201">
        <label>arrow::io::Seekable</label>
        <link refid="classarrow_1_1io_1_1_seekable"/>
      </node>
      <node id="2195">
        <label>arrow::io::HdfsReadableFile</label>
        <link refid="classarrow_1_1io_1_1_hdfs_readable_file"/>
        <childnode refid="2196" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2197">
        <label>std::enable_shared_from_this&lt; RandomAccessFile &gt;</label>
      </node>
      <node id="2198">
        <label>arrow::io::InputStream</label>
        <link refid="classarrow_1_1io_1_1_input_stream"/>
        <childnode refid="2199" relation="public-inheritance">
        </childnode>
        <childnode refid="2200" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2196">
        <label>arrow::io::RandomAccessFile</label>
        <link refid="classarrow_1_1io_1_1_random_access_file"/>
        <childnode refid="2197" relation="public-inheritance">
        </childnode>
        <childnode refid="2198" relation="public-inheritance">
        </childnode>
        <childnode refid="2201" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/io/hdfs.h" line="212" column="1" bodyfile="/arrow/cpp/src/arrow/io/hdfs.h" bodystart="212" bodyend="242"/>
    <listofallmembers>
      <member refid="classarrow_1_1io_1_1_file_interface_1a0fa59fe92d3c99c9d9701210626aac60" prot="public" virt="virtual"><scope>arrow::io::HdfsReadableFile</scope><name>Abort</name></member>
      <member refid="classarrow_1_1io_1_1_input_stream_1ab5e2e1bdb05f7847363461bc3b90d386" prot="public" virt="non-virtual"><scope>arrow::io::HdfsReadableFile</scope><name>Advance</name></member>
      <member refid="classarrow_1_1io_1_1_hdfs_readable_file_1a3da72eb7c25d58519754cf92db680a5a" prot="private" virt="non-virtual"><scope>arrow::io::HdfsReadableFile</scope><name>ARROW_DISALLOW_COPY_AND_ASSIGN</name></member>
      <member refid="classarrow_1_1io_1_1_hdfs_readable_file_1ac2f3703a94d75d3380598edf922860b0" prot="public" virt="virtual"><scope>arrow::io::HdfsReadableFile</scope><name>Close</name></member>
      <member refid="classarrow_1_1io_1_1_hdfs_readable_file_1a936fe66d667a50b35b099a9c3143455f" prot="public" virt="virtual"><scope>arrow::io::HdfsReadableFile</scope><name>closed</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1afea9126bb21e3720212a826aa78b5534" prot="protected" virt="non-virtual"><scope>arrow::io::HdfsReadableFile</scope><name>FileInterface</name></member>
      <member refid="classarrow_1_1io_1_1_hdfs_readable_file_1ab8a1be664475bce844fbbd01924cc7ca" prot="public" virt="virtual"><scope>arrow::io::HdfsReadableFile</scope><name>GetSize</name></member>
      <member refid="classarrow_1_1io_1_1_random_access_file_1a077348c5eb5ad0147582a3e5aa073847" prot="public" virt="non-virtual"><scope>arrow::io::HdfsReadableFile</scope><name>GetStream</name></member>
      <member refid="classarrow_1_1io_1_1_hdfs_readable_file_1af8677e1a0c5e9cba4ab88aec70e4c204" prot="private" virt="non-virtual"><scope>arrow::io::HdfsReadableFile</scope><name>HdfsReadableFile</name></member>
      <member refid="classarrow_1_1io_1_1_hdfs_readable_file_1adc2fe50c9522af7391b8430ccccd3387" prot="private" virt="non-virtual"><scope>arrow::io::HdfsReadableFile</scope><name>HdfsReadableFileImpl</name></member>
      <member refid="classarrow_1_1io_1_1_hdfs_readable_file_1a4e8d5e5be65b0807ea50d100059e6c96" prot="private" virt="non-virtual"><scope>arrow::io::HdfsReadableFile</scope><name>impl_</name></member>
      <member refid="classarrow_1_1io_1_1_input_stream_1aeb778572d0e9bf4902dbfbbc5353d7fd" prot="protected" virt="non-virtual"><scope>arrow::io::HdfsReadableFile</scope><name>InputStream</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1a75a3739361570bb121b9adb04d5d8686" prot="public" virt="non-virtual"><scope>arrow::io::HdfsReadableFile</scope><name>mode</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1a504d0410eb6066316365a4549d000ee0" prot="protected" virt="non-virtual"><scope>arrow::io::HdfsReadableFile</scope><name>mode_</name></member>
      <member refid="classarrow_1_1io_1_1_input_stream_1aba80e2518abc166625077bd065ae3721" prot="public" virt="virtual"><scope>arrow::io::HdfsReadableFile</scope><name>Peek</name></member>
      <member refid="classarrow_1_1io_1_1_random_access_file_1a32c1cb28aa86db601b68a96615a3161c" prot="protected" virt="non-virtual"><scope>arrow::io::HdfsReadableFile</scope><name>RandomAccessFile</name></member>
      <member refid="classarrow_1_1io_1_1_hdfs_readable_file_1af200c5550a7d4011b39573f603f37884" prot="public" virt="virtual"><scope>arrow::io::HdfsReadableFile</scope><name>Read</name></member>
      <member refid="classarrow_1_1io_1_1_hdfs_readable_file_1aae684e42de4b0bee68e15a96bd9e196b" prot="public" virt="virtual"><scope>arrow::io::HdfsReadableFile</scope><name>Read</name></member>
      <member refid="classarrow_1_1io_1_1_random_access_file_1ae37e086e71206380188a28fa5b125ac4" prot="public" virt="virtual"><scope>arrow::io::HdfsReadableFile</scope><name>ReadAsync</name></member>
      <member refid="classarrow_1_1io_1_1_hdfs_readable_file_1ae49cbcb5d02ee5cfe796ab1fb9da8a23" prot="public" virt="virtual"><scope>arrow::io::HdfsReadableFile</scope><name>ReadAt</name></member>
      <member refid="classarrow_1_1io_1_1_hdfs_readable_file_1a72bf1d2aa7615fbc0f8b62326053da4e" prot="public" virt="virtual"><scope>arrow::io::HdfsReadableFile</scope><name>ReadAt</name></member>
      <member refid="classarrow_1_1io_1_1_hdfs_readable_file_1a3bd037aee8da7719ca61f6a1a31cab27" prot="public" virt="virtual"><scope>arrow::io::HdfsReadableFile</scope><name>Seek</name></member>
      <member refid="classarrow_1_1io_1_1_hdfs_readable_file_1ac938f3b07325466754651647dcde0bba" prot="public" virt="non-virtual"><scope>arrow::io::HdfsReadableFile</scope><name>set_memory_pool</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1af3dd01a780076e39a34770beb513f71f" prot="protected" virt="non-virtual"><scope>arrow::io::HdfsReadableFile</scope><name>set_mode</name></member>
      <member refid="classarrow_1_1io_1_1_input_stream_1a2b9978739db7fa75ba81e794bfba2a64" prot="public" virt="virtual"><scope>arrow::io::HdfsReadableFile</scope><name>supports_zero_copy</name></member>
      <member refid="classarrow_1_1io_1_1_hdfs_readable_file_1a3da69e1f676fc6ada6f59278fdc0e7de" prot="public" virt="virtual"><scope>arrow::io::HdfsReadableFile</scope><name>Tell</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1aa42dcdfad00634f01192b39f1d9b4929" prot="public" virt="pure-virtual"><scope>arrow::io::HdfsReadableFile</scope><name>~FileInterface</name></member>
      <member refid="classarrow_1_1io_1_1_hdfs_readable_file_1a8b098b30462cd0d16e09eeee227107d1" prot="public" virt="non-virtual"><scope>arrow::io::HdfsReadableFile</scope><name>~HdfsReadableFile</name></member>
      <member refid="classarrow_1_1io_1_1_random_access_file_1a30c6917dfe0b6e508dac2ecc81917187" prot="public" virt="non-virtual"><scope>arrow::io::HdfsReadableFile</scope><name>~RandomAccessFile</name></member>
      <member refid="classarrow_1_1io_1_1_readable_1a96a411d4494a9872d7eef4f8bb6396b4" prot="public" virt="virtual"><scope>arrow::io::HdfsReadableFile</scope><name>~Readable</name></member>
      <member refid="classarrow_1_1io_1_1_seekable_1a7642c30d2f852e0f79fec036a94ca093" prot="public" virt="virtual"><scope>arrow::io::HdfsReadableFile</scope><name>~Seekable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
