<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1util_1_1_b_z2_codec" kind="class" language="C++" prot="public">
    <compoundname>arrow::util::BZ2Codec</compoundname>
    <basecompoundref refid="classarrow_1_1util_1_1_codec" prot="public" virt="non-virtual">arrow::util::Codec</basecompoundref>
    <includes refid="compression__bz2_8h" local="no">arrow/util/compression_bz2.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classarrow_1_1util_1_1_b_z2_codec_1a98675a86e99630ce37fd712085bd2563" prot="private" static="no" mutable="no">
        <type>int</type>
        <definition>int arrow::util::BZ2Codec::compression_level_</definition>
        <argsstring></argsstring>
        <name>compression_level_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/compression_bz2.h" line="53" column="1" bodyfile="/arrow/cpp/src/arrow/util/compression_bz2.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1util_1_1_b_z2_codec_1a869054a8c0e09dcf65721dffa2f04214" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::util::BZ2Codec::BZ2Codec</definition>
        <argsstring>(int compression_level=kBZ2DefaultCompressionLevel)</argsstring>
        <name>BZ2Codec</name>
        <param>
          <type>int</type>
          <declname>compression_level</declname>
          <defval><ref refid="namespacearrow_1_1util_1acdf3fc596a402a868c4a238ae2248952" kindref="member">kBZ2DefaultCompressionLevel</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/compression_bz2.h" line="36" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1util_1_1_b_z2_codec_1a7be20872079a89b026e6a95ef6d9863d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; int64_t &gt;</type>
        <definition>Result&lt;int64_t&gt; arrow::util::BZ2Codec::Decompress</definition>
        <argsstring>(int64_t input_len, const uint8_t *input, int64_t output_buffer_len, uint8_t *output_buffer) override</argsstring>
        <name>Decompress</name>
        <reimplements refid="classarrow_1_1util_1_1_codec_1ab7dbd507ed9e2680bdbf501796fa6b85">Decompress</reimplements>
        <param>
          <type>int64_t</type>
          <declname>input_len</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>output_buffer_len</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>output_buffer</declname>
        </param>
        <briefdescription>
<para>One-shot decompression function. </para>        </briefdescription>
        <detaileddescription>
<para>output_buffer_len must be correct and therefore be obtained in advance. The actual decompressed length is returned.</para><para><simplesect kind="note"><para>One-shot decompression is not always compatible with streaming compression. Depending on the codec (e.g. LZ4), different formats may be used. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/compression_bz2.h" line="38" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1util_1_1_b_z2_codec_1a1261c9d023819ba93aabbcd7dbc86293" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; int64_t &gt;</type>
        <definition>Result&lt;int64_t&gt; arrow::util::BZ2Codec::Compress</definition>
        <argsstring>(int64_t input_len, const uint8_t *input, int64_t output_buffer_len, uint8_t *output_buffer) override</argsstring>
        <name>Compress</name>
        <reimplements refid="classarrow_1_1util_1_1_codec_1abff0ae540da681b1b3aef3b6203875ea">Compress</reimplements>
        <param>
          <type>int64_t</type>
          <declname>input_len</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>output_buffer_len</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>output_buffer</declname>
        </param>
        <briefdescription>
<para>One-shot compression function. </para>        </briefdescription>
        <detaileddescription>
<para>output_buffer_len must first have been computed using <ref refid="classarrow_1_1util_1_1_b_z2_codec_1a21056903a4366985d270b2f98353af96" kindref="member">MaxCompressedLen()</ref>. The actual compressed length is returned.</para><para><simplesect kind="note"><para>One-shot compression is not always compatible with streaming decompression. Depending on the codec (e.g. LZ4), different formats may be used. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/compression_bz2.h" line="41" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1util_1_1_b_z2_codec_1a21056903a4366985d270b2f98353af96" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>int64_t</type>
        <definition>int64_t arrow::util::BZ2Codec::MaxCompressedLen</definition>
        <argsstring>(int64_t input_len, const uint8_t *input) override</argsstring>
        <name>MaxCompressedLen</name>
        <reimplements refid="classarrow_1_1util_1_1_codec_1a560c8646856a63d6bf1313e4d867b30f">MaxCompressedLen</reimplements>
        <param>
          <type>int64_t</type>
          <declname>input_len</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/compression_bz2.h" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1util_1_1_b_z2_codec_1a08dc6558012797f81a73c8418fe531ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1util_1_1_compressor" kindref="compound">Compressor</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;Compressor&gt; &gt; arrow::util::BZ2Codec::MakeCompressor</definition>
        <argsstring>() override</argsstring>
        <name>MakeCompressor</name>
        <reimplements refid="classarrow_1_1util_1_1_codec_1a41bdf6e8ba2ca61cb682dcec598524f5">MakeCompressor</reimplements>
        <briefdescription>
<para>Create a streaming compressor instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/compression_bz2.h" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1util_1_1_b_z2_codec_1a820e773fb7d29ac27f282f7e5c1b9c8e" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1util_1_1_decompressor" kindref="compound">Decompressor</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;Decompressor&gt; &gt; arrow::util::BZ2Codec::MakeDecompressor</definition>
        <argsstring>() override</argsstring>
        <name>MakeDecompressor</name>
        <reimplements refid="classarrow_1_1util_1_1_codec_1afc63a883ad20293a56138f03207627cb">MakeDecompressor</reimplements>
        <briefdescription>
<para>Create a streaming compressor instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/compression_bz2.h" line="48" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1util_1_1_b_z2_codec_1ab51eb07ebda9c2ddb9fea8ca6d97c545" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const char *</type>
        <definition>const char* arrow::util::BZ2Codec::name</definition>
        <argsstring>() const override</argsstring>
        <name>name</name>
        <reimplements refid="classarrow_1_1util_1_1_codec_1a0d4c938e992382724c8ace29cd486490">name</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/compression_bz2.h" line="50" column="1" bodyfile="/arrow/cpp/src/arrow/util/compression_bz2.h" bodystart="50" bodyend="50"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="556">
        <label>arrow::util::BZ2Codec</label>
        <link refid="classarrow_1_1util_1_1_b_z2_codec"/>
        <childnode refid="557" relation="public-inheritance">
        </childnode>
      </node>
      <node id="557">
        <label>arrow::util::Codec</label>
        <link refid="classarrow_1_1util_1_1_codec"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="558">
        <label>arrow::util::BZ2Codec</label>
        <link refid="classarrow_1_1util_1_1_b_z2_codec"/>
        <childnode refid="559" relation="public-inheritance">
        </childnode>
      </node>
      <node id="559">
        <label>arrow::util::Codec</label>
        <link refid="classarrow_1_1util_1_1_codec"/>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/util/compression_bz2.h" line="34" column="1" bodyfile="/arrow/cpp/src/arrow/util/compression_bz2.h" bodystart="34" bodyend="54"/>
    <listofallmembers>
      <member refid="classarrow_1_1util_1_1_b_z2_codec_1a869054a8c0e09dcf65721dffa2f04214" prot="public" virt="non-virtual"><scope>arrow::util::BZ2Codec</scope><name>BZ2Codec</name></member>
      <member refid="classarrow_1_1util_1_1_b_z2_codec_1a1261c9d023819ba93aabbcd7dbc86293" prot="public" virt="virtual"><scope>arrow::util::BZ2Codec</scope><name>Compress</name></member>
      <member refid="classarrow_1_1util_1_1_codec_1a143dc54ccfdc50ccbe0f25b2c80cc216" prot="public" virt="non-virtual" ambiguityscope="arrow::util::Codec::"><scope>arrow::util::BZ2Codec</scope><name>Compress</name></member>
      <member refid="classarrow_1_1util_1_1_b_z2_codec_1a98675a86e99630ce37fd712085bd2563" prot="private" virt="non-virtual"><scope>arrow::util::BZ2Codec</scope><name>compression_level_</name></member>
      <member refid="classarrow_1_1util_1_1_codec_1a0e3313f65f079569d3e6fdf53d3e9afc" prot="public" virt="non-virtual"><scope>arrow::util::BZ2Codec</scope><name>Create</name></member>
      <member refid="classarrow_1_1util_1_1_codec_1a0026c320107b5d97a8299cbf06914780" prot="public" virt="non-virtual"><scope>arrow::util::BZ2Codec</scope><name>Create</name></member>
      <member refid="classarrow_1_1util_1_1_codec_1afea3539b46faf0aa05146543589607ab" prot="public" virt="non-virtual"><scope>arrow::util::BZ2Codec</scope><name>Create</name></member>
      <member refid="classarrow_1_1util_1_1_b_z2_codec_1a7be20872079a89b026e6a95ef6d9863d" prot="public" virt="virtual"><scope>arrow::util::BZ2Codec</scope><name>Decompress</name></member>
      <member refid="classarrow_1_1util_1_1_codec_1a962fb66a3d72b5fc0f2a81ded8582e3f" prot="public" virt="non-virtual" ambiguityscope="arrow::util::Codec::"><scope>arrow::util::BZ2Codec</scope><name>Decompress</name></member>
      <member refid="classarrow_1_1util_1_1_codec_1ac2312299ec1ae21e71700a039636c587" prot="public" virt="non-virtual"><scope>arrow::util::BZ2Codec</scope><name>GetCodecAsString</name></member>
      <member refid="classarrow_1_1util_1_1_codec_1a5d8fe3845a35fb7de7879d04250b48cc" prot="public" virt="non-virtual"><scope>arrow::util::BZ2Codec</scope><name>IsAvailable</name></member>
      <member refid="classarrow_1_1util_1_1_b_z2_codec_1a08dc6558012797f81a73c8418fe531ed" prot="public" virt="virtual"><scope>arrow::util::BZ2Codec</scope><name>MakeCompressor</name></member>
      <member refid="classarrow_1_1util_1_1_codec_1aa47b071501a27380277d9017bb080f91" prot="public" virt="virtual" ambiguityscope="arrow::util::Codec::"><scope>arrow::util::BZ2Codec</scope><name>MakeCompressor</name></member>
      <member refid="classarrow_1_1util_1_1_b_z2_codec_1a820e773fb7d29ac27f282f7e5c1b9c8e" prot="public" virt="virtual"><scope>arrow::util::BZ2Codec</scope><name>MakeDecompressor</name></member>
      <member refid="classarrow_1_1util_1_1_codec_1a51093d78a8e0cb2efa74ca6cceb1b67b" prot="public" virt="virtual" ambiguityscope="arrow::util::Codec::"><scope>arrow::util::BZ2Codec</scope><name>MakeDecompressor</name></member>
      <member refid="classarrow_1_1util_1_1_b_z2_codec_1a21056903a4366985d270b2f98353af96" prot="public" virt="virtual"><scope>arrow::util::BZ2Codec</scope><name>MaxCompressedLen</name></member>
      <member refid="classarrow_1_1util_1_1_b_z2_codec_1ab51eb07ebda9c2ddb9fea8ca6d97c545" prot="public" virt="virtual"><scope>arrow::util::BZ2Codec</scope><name>name</name></member>
      <member refid="classarrow_1_1util_1_1_codec_1a456022d9eaf814cfe95c1c1f83cce895" prot="public" virt="non-virtual"><scope>arrow::util::BZ2Codec</scope><name>UseDefaultCompressionLevel</name></member>
      <member refid="classarrow_1_1util_1_1_codec_1ad21f62af5f439db343f57d63196d8055" prot="public" virt="virtual"><scope>arrow::util::BZ2Codec</scope><name>~Codec</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
