<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="slow_8h" kind="file" language="C++">
    <compoundname>slow.h</compoundname>
    <includes local="no">cstdint</includes>
    <includes local="no">memory</includes>
    <includes local="no">utility</includes>
    <includes refid="interfaces_8h" local="yes">arrow/io/interfaces.h</includes>
    <includes refid="arrow_2util_2visibility_8h" local="yes">arrow/util/visibility.h</includes>
    <incdepgraph>
      <node id="8351">
        <label>cstdint</label>
      </node>
      <node id="8358">
        <label>arrow/type_fwd.h</label>
        <link refid="type__fwd_8h"/>
        <childnode refid="8352" relation="include">
        </childnode>
        <childnode refid="8355" relation="include">
        </childnode>
        <childnode refid="8356" relation="include">
        </childnode>
        <childnode refid="8359" relation="include">
        </childnode>
        <childnode refid="8360" relation="include">
        </childnode>
      </node>
      <node id="8354">
        <label>arrow/io/interfaces.h</label>
        <link refid="interfaces_8h"/>
        <childnode refid="8351" relation="include">
        </childnode>
        <childnode refid="8352" relation="include">
        </childnode>
        <childnode refid="8355" relation="include">
        </childnode>
        <childnode refid="8356" relation="include">
        </childnode>
        <childnode refid="8357" relation="include">
        </childnode>
        <childnode refid="8358" relation="include">
        </childnode>
        <childnode refid="8359" relation="include">
        </childnode>
        <childnode refid="8361" relation="include">
        </childnode>
        <childnode refid="8360" relation="include">
        </childnode>
      </node>
      <node id="8355">
        <label>string</label>
      </node>
      <node id="8362">
        <label>arrow/vendored/string_view.hpp</label>
      </node>
      <node id="8360">
        <label>arrow/util/visibility.h</label>
        <link refid="arrow_2util_2visibility_8h"/>
      </node>
      <node id="8356">
        <label>vector</label>
      </node>
      <node id="8353">
        <label>utility</label>
      </node>
      <node id="8361">
        <label>arrow/util/string_view.h</label>
        <link refid="string__view_8h"/>
        <childnode refid="8351" relation="include">
        </childnode>
        <childnode refid="8355" relation="include">
        </childnode>
        <childnode refid="8362" relation="include">
        </childnode>
      </node>
      <node id="8357">
        <label>arrow/io/type_fwd.h</label>
        <link refid="io_2type__fwd_8h"/>
      </node>
      <node id="8350">
        <label>/arrow/cpp/src/arrow/io/slow.h</label>
        <link refid="slow_8h"/>
        <childnode refid="8351" relation="include">
        </childnode>
        <childnode refid="8352" relation="include">
        </childnode>
        <childnode refid="8353" relation="include">
        </childnode>
        <childnode refid="8354" relation="include">
        </childnode>
        <childnode refid="8360" relation="include">
        </childnode>
      </node>
      <node id="8352">
        <label>memory</label>
      </node>
      <node id="8359">
        <label>arrow/util/macros.h</label>
        <link refid="macros_8h"/>
        <childnode refid="8351" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="classarrow_1_1io_1_1_latency_generator" prot="public">arrow::io::LatencyGenerator</innerclass>
    <innerclass refid="classarrow_1_1io_1_1_slow_input_stream_base" prot="public">arrow::io::SlowInputStreamBase</innerclass>
    <innerclass refid="classarrow_1_1io_1_1_slow_input_stream" prot="public">arrow::io::SlowInputStream</innerclass>
    <innerclass refid="classarrow_1_1io_1_1_slow_random_access_file" prot="public">arrow::io::SlowRandomAccessFile</innerclass>
    <innernamespace refid="namespacearrow">arrow</innernamespace>
    <innernamespace refid="namespacearrow_1_1io">arrow::io</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Slow<sp/>stream<sp/>implementations,<sp/>mainly<sp/>for<sp/>testing<sp/>and<sp/>benchmarking</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="interfaces_8h" kindref="compound">arrow/io/interfaces.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="arrow_2util_2visibility_8h" kindref="compound">arrow/util/visibility.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacearrow" kindref="compound">arrow</ref><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="namespaceparquet_1abad5a6612a34e123346ad35eb4933d80" kindref="member">Buffer</ref>;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref>;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">io<sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36" refid="classarrow_1_1io_1_1_latency_generator" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1io_1_1_latency_generator" kindref="compound">LatencyGenerator</ref><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classarrow_1_1io_1_1_latency_generator" kindref="compound">LatencyGenerator</ref>();</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Sleep();</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>NextLatency()<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;LatencyGenerator&gt;<sp/>Make(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>average_latency);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;LatencyGenerator&gt;<sp/>Make(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>average_latency,<sp/>int32_t<sp/>seed);</highlight></codeline>
<codeline lineno="46"><highlight class="normal">};</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>XXX<sp/>use<sp/>ConcurrencyWrapper?<sp/><sp/>It<sp/>could<sp/>increase<sp/>chances<sp/>of<sp/>finding<sp/>a<sp/>race.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>StreamType&gt;</highlight></codeline>
<codeline lineno="51" refid="classarrow_1_1io_1_1_slow_input_stream_base" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1io_1_1_slow_input_stream_base" kindref="compound">SlowInputStreamBase</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>StreamType<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="53" refid="classarrow_1_1io_1_1_slow_input_stream_base_1add43b0dde031f2bd85bc9ab12d27db43" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1io_1_1_slow_input_stream_base_1add43b0dde031f2bd85bc9ab12d27db43" kindref="member">SlowInputStreamBase</ref>(std::shared_ptr&lt;StreamType&gt;<sp/>stream,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;LatencyGenerator&gt;<sp/>latencies)</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>stream_(<ref refid="namespacestd" kindref="compound">std</ref>::move(stream)),<sp/>latencies_(<ref refid="namespacestd" kindref="compound">std</ref>::move(latencies))<sp/>{}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="classarrow_1_1io_1_1_slow_input_stream_base_1abb012c8422693357f9c158ddb0e348f6" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1io_1_1_slow_input_stream_base_1abb012c8422693357f9c158ddb0e348f6" kindref="member">SlowInputStreamBase</ref>(std::shared_ptr&lt;StreamType&gt;<sp/>stream,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>average_latency)</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>stream_(<ref refid="namespacestd" kindref="compound">std</ref>::move(stream)),<sp/>latencies_(<ref refid="classarrow_1_1io_1_1_latency_generator" kindref="compound">LatencyGenerator</ref>::Make(average_latency))<sp/>{}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="classarrow_1_1io_1_1_slow_input_stream_base_1ae8aff3850c6d6e5f597be8d4c0ba580b" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1io_1_1_slow_input_stream_base_1ae8aff3850c6d6e5f597be8d4c0ba580b" kindref="member">SlowInputStreamBase</ref>(std::shared_ptr&lt;StreamType&gt;<sp/>stream,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>average_latency,</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>seed)</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>stream_(<ref refid="namespacestd" kindref="compound">std</ref>::move(stream)),</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>latencies_(<ref refid="classarrow_1_1io_1_1_latency_generator" kindref="compound">LatencyGenerator</ref>::Make(average_latency,<sp/>seed))<sp/>{}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="66" refid="classarrow_1_1io_1_1_slow_input_stream_base_1a371552d18efa9ead7c46c4f602292b08" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;StreamType&gt;<sp/><ref refid="classarrow_1_1io_1_1_slow_input_stream_base_1a371552d18efa9ead7c46c4f602292b08" kindref="member">stream_</ref>;</highlight></codeline>
<codeline lineno="67" refid="classarrow_1_1io_1_1_slow_input_stream_base_1a14811e4447e25e0ec8a4fc5ecd1e2663" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;LatencyGenerator&gt;<sp/><ref refid="classarrow_1_1io_1_1_slow_input_stream_base_1a14811e4447e25e0ec8a4fc5ecd1e2663" kindref="member">latencies_</ref>;</highlight></codeline>
<codeline lineno="68"><highlight class="normal">};</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="76" refid="classarrow_1_1io_1_1_slow_input_stream" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1io_1_1_slow_input_stream" kindref="compound">SlowInputStream</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1io_1_1_slow_input_stream_base" kindref="compound">SlowInputStreamBase</ref>&lt;InputStream&gt;<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/>~<ref refid="classarrow_1_1io_1_1_slow_input_stream" kindref="compound">SlowInputStream</ref>()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1io_1_1_slow_input_stream_base" kindref="compound">SlowInputStreamBase&lt;InputStream&gt;::SlowInputStreamBase</ref>;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>Close()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>Abort()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>closed()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;int64_t&gt;</ref><sp/>Read(int64_t<sp/>nbytes,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>out)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;Buffer&gt;</ref>&gt;<sp/>Read(int64_t<sp/>nbytes)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;util::string_view&gt;</ref><sp/>Peek(int64_t<sp/>nbytes)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;int64_t&gt;</ref><sp/>Tell()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="91"><highlight class="normal">};</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="96" refid="classarrow_1_1io_1_1_slow_random_access_file" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1io_1_1_slow_random_access_file" kindref="compound">SlowRandomAccessFile</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1io_1_1_slow_input_stream_base" kindref="compound">SlowInputStreamBase</ref>&lt;RandomAccessFile&gt;<sp/>{</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>~<ref refid="classarrow_1_1io_1_1_slow_random_access_file" kindref="compound">SlowRandomAccessFile</ref>()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1io_1_1_slow_input_stream_base" kindref="compound">SlowInputStreamBase&lt;RandomAccessFile&gt;::SlowInputStreamBase</ref>;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>Close()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>Abort()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>closed()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;int64_t&gt;</ref><sp/>Read(int64_t<sp/>nbytes,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>out)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;Buffer&gt;</ref>&gt;<sp/>Read(int64_t<sp/>nbytes)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;int64_t&gt;</ref><sp/>ReadAt(int64_t<sp/>position,<sp/>int64_t<sp/>nbytes,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>out)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;Buffer&gt;</ref>&gt;<sp/>ReadAt(int64_t<sp/>position,<sp/>int64_t<sp/>nbytes)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;util::string_view&gt;</ref><sp/>Peek(int64_t<sp/>nbytes)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;int64_t&gt;</ref><sp/>GetSize()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>Seek(int64_t<sp/>position)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;int64_t&gt;</ref><sp/>Tell()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal">};</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>io</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>arrow</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/arrow/cpp/src/arrow/io/slow.h"/>
  </compounddef>
</doxygen>
