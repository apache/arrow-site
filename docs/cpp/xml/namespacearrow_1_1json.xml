<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacearrow_1_1json" kind="namespace" language="C++">
    <compoundname>arrow::json</compoundname>
    <innerclass refid="classarrow_1_1json_1_1_block_parser" prot="public">arrow::json::BlockParser</innerclass>
    <innerclass refid="classarrow_1_1json_1_1_chunked_array_builder" prot="public">arrow::json::ChunkedArrayBuilder</innerclass>
    <innerclass refid="classarrow_1_1json_1_1_converter" prot="public">arrow::json::Converter</innerclass>
    <innerclass refid="structarrow_1_1json_1_1_kind" prot="public">arrow::json::Kind</innerclass>
    <innerclass refid="structarrow_1_1json_1_1_parse_options" prot="public">arrow::json::ParseOptions</innerclass>
    <innerclass refid="classarrow_1_1json_1_1_promotion_graph" prot="public">arrow::json::PromotionGraph</innerclass>
    <innerclass refid="structarrow_1_1json_1_1_read_options" prot="public">arrow::json::ReadOptions</innerclass>
    <innerclass refid="classarrow_1_1json_1_1_table_reader" prot="public">arrow::json::TableReader</innerclass>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="namespacearrow_1_1json_1a0a9ff33c277d8effb0b8029baf388056" prot="public" static="no">
        <name>UnexpectedFieldBehavior</name>
        <enumvalue id="namespacearrow_1_1json_1a0a9ff33c277d8effb0b8029baf388056afd038fc7f319e48f3115d92bf5bdbef9" prot="public">
          <name>Ignore</name>
          <briefdescription>
<para>Unexpected JSON fields are ignored. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacearrow_1_1json_1a0a9ff33c277d8effb0b8029baf388056a902b0d55fddef6f8d651fe1035b7d4bd" prot="public">
          <name>Error</name>
          <briefdescription>
<para>Unexpected JSON fields error out. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="namespacearrow_1_1json_1a0a9ff33c277d8effb0b8029baf388056af4ff566055b0218236801a62db87e218" prot="public">
          <name>InferType</name>
          <briefdescription>
<para>Unexpected JSON fields are type-inferred and included in the output. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/json/options.h" line="32" column="1" bodyfile="/arrow/cpp/src/arrow/json/options.h" bodystart="32" bodyend="39"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="namespacearrow_1_1json_1a8dcddbe7a112156307abc902a3e93672" prot="public" static="no" mutable="no">
        <type>constexpr int32_t</type>
        <definition>constexpr int32_t arrow::json::kMaxParserNumRows</definition>
        <argsstring></argsstring>
        <name>kMaxParserNumRows</name>
        <initializer>= 100000</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/json/parser.h" line="51" column="1" bodyfile="/arrow/cpp/src/arrow/json/parser.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacearrow_1_1json_1a1c3857702a96082550bd262664862129" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::json::MakeChunkedArrayBuilder</definition>
        <argsstring>(const std::shared_ptr&lt; internal::TaskGroup &gt; &amp;task_group, MemoryPool *pool, const PromotionGraph *promotion_graph, const std::shared_ptr&lt; DataType &gt; &amp;type, std::shared_ptr&lt; ChunkedArrayBuilder &gt; *out)</argsstring>
        <name>MakeChunkedArrayBuilder</name>
        <param>
          <type>const std::shared_ptr&lt; internal::TaskGroup &gt; &amp;</type>
          <declname>task_group</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>const <ref refid="classarrow_1_1json_1_1_promotion_graph" kindref="compound">PromotionGraph</ref> *</type>
          <declname>promotion_graph</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1json_1_1_chunked_array_builder" kindref="compound">ChunkedArrayBuilder</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>create a chunked builder </para>        </briefdescription>
        <detaileddescription>
<para>if unexpected fields and promotion need to be handled, promotion_graph must be non-null </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/json/chunked_builder.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1json_1ad95facadcc813f9a90134666ded314cf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classarrow_1_1_chunker" kindref="compound">Chunker</ref> &gt;</type>
        <definition>std::unique_ptr&lt;Chunker&gt; arrow::json::MakeChunker</definition>
        <argsstring>(const ParseOptions &amp;options)</argsstring>
        <name>MakeChunker</name>
        <param>
          <type>const <ref refid="structarrow_1_1json_1_1_parse_options" kindref="compound">ParseOptions</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/json/chunker.h" line="32" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1json_1a23771cf46a7b1c1058498b583c60e767" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::json::MakeConverter</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;out_type, MemoryPool *pool, std::shared_ptr&lt; Converter &gt; *out)</argsstring>
        <name>MakeConverter</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>out_type</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1json_1_1_converter" kindref="compound">Converter</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>produce a single converter to the specified out_type </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/json/converter.h" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1json_1aa63f027cfaf4c074e901b4e79e7b57ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classarrow_1_1json_1_1_promotion_graph" kindref="compound">PromotionGraph</ref> *</type>
        <definition>const PromotionGraph* arrow::json::GetPromotionGraph</definition>
        <argsstring>()</argsstring>
        <name>GetPromotionGraph</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/json/converter.h" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1json_1a0149654c44ba7a8c1348898dbfde57c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::json::ParseOne</definition>
        <argsstring>(ParseOptions options, std::shared_ptr&lt; Buffer &gt; json, std::shared_ptr&lt; RecordBatch &gt; *out)</argsstring>
        <name>ParseOne</name>
        <param>
          <type><ref refid="structarrow_1_1json_1_1_parse_options" kindref="compound">ParseOptions</ref></type>
          <declname>options</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;</type>
          <declname>json</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/json/reader.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1json_1aea619be9f2c28452bd483ce4bd7bff1a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::json::Convert</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;out_type, const std::shared_ptr&lt; Array &gt; &amp;in, std::shared_ptr&lt; Array &gt; *out)</argsstring>
        <name>Convert</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>out_type</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; &amp;</type>
          <declname>in</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>convert an <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> produced by <ref refid="classarrow_1_1json_1_1_block_parser" kindref="compound">BlockParser</ref> into an <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> of out_type </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/json/reader.h" line="62" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/arrow/json/chunked_builder.h" line="38" column="1"/>
  </compounddef>
</doxygen>
