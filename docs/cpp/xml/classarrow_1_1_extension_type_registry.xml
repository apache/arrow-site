<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_extension_type_registry" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>arrow::ExtensionTypeRegistry</compoundname>
    <includes refid="extension__type_8h" local="no">arrow/extension_type.h</includes>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1_extension_type_registry_1a5de79d13b768fb262abeaa2ab20895ac" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_extension_type_registry" kindref="compound">ExtensionTypeRegistry</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;ExtensionTypeRegistry&gt; arrow::ExtensionTypeRegistry::GetGlobalRegistry</definition>
        <argsstring>()</argsstring>
        <name>GetGlobalRegistry</name>
        <briefdescription>
<para>Provide access to the global registry to allow code to control for race conditions in registry teardown when some types need to be unregistered and destroyed first. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/extension_type.h" line="119" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1_extension_type_registry_1a2e91b51ac9e19864201efe303c4eb6c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual arrow::ExtensionTypeRegistry::~ExtensionTypeRegistry</definition>
        <argsstring>()=default</argsstring>
        <name>~ExtensionTypeRegistry</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/extension_type.h" line="121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_extension_type_registry_1a95ebda6cc4797b343783ca23297f1ea4" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>virtual Status arrow::ExtensionTypeRegistry::RegisterType</definition>
        <argsstring>(std::shared_ptr&lt; ExtensionType &gt; type)=0</argsstring>
        <name>RegisterType</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_extension_type" kindref="compound">ExtensionType</ref> &gt;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/extension_type.h" line="123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_extension_type_registry_1ac627c521ef299fcb9b9491c85f62363f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>virtual Status arrow::ExtensionTypeRegistry::UnregisterType</definition>
        <argsstring>(const std::string &amp;type_name)=0</argsstring>
        <name>UnregisterType</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>type_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/extension_type.h" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_extension_type_registry_1ac0ab92ea7900bb1255850dc010761985" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_extension_type" kindref="compound">ExtensionType</ref> &gt;</type>
        <definition>virtual std::shared_ptr&lt;ExtensionType&gt; arrow::ExtensionTypeRegistry::GetType</definition>
        <argsstring>(const std::string &amp;type_name)=0</argsstring>
        <name>GetType</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>type_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/extension_type.h" line="125" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/arrow/extension_type.h" line="114" column="1" bodyfile="/arrow/cpp/src/arrow/extension_type.h" bodystart="114" bodyend="126"/>
    <listofallmembers>
      <member refid="classarrow_1_1_extension_type_registry_1a5de79d13b768fb262abeaa2ab20895ac" prot="public" virt="non-virtual"><scope>arrow::ExtensionTypeRegistry</scope><name>GetGlobalRegistry</name></member>
      <member refid="classarrow_1_1_extension_type_registry_1ac0ab92ea7900bb1255850dc010761985" prot="public" virt="pure-virtual"><scope>arrow::ExtensionTypeRegistry</scope><name>GetType</name></member>
      <member refid="classarrow_1_1_extension_type_registry_1a95ebda6cc4797b343783ca23297f1ea4" prot="public" virt="pure-virtual"><scope>arrow::ExtensionTypeRegistry</scope><name>RegisterType</name></member>
      <member refid="classarrow_1_1_extension_type_registry_1ac627c521ef299fcb9b9491c85f62363f" prot="public" virt="pure-virtual"><scope>arrow::ExtensionTypeRegistry</scope><name>UnregisterType</name></member>
      <member refid="classarrow_1_1_extension_type_registry_1a2e91b51ac9e19864201efe303c4eb6c3" prot="public" virt="virtual"><scope>arrow::ExtensionTypeRegistry</scope><name>~ExtensionTypeRegistry</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
