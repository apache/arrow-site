<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1io_1_1_fixed_size_buffer_writer" kind="class" language="C++" prot="public">
    <compoundname>arrow::io::FixedSizeBufferWriter</compoundname>
    <basecompoundref refid="classarrow_1_1io_1_1_writable_file" prot="public" virt="non-virtual">arrow::io::WritableFile</basecompoundref>
    <includes refid="io_2memory_8h" local="no">arrow/io/memory.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classarrow_1_1io_1_1_fixed_size_buffer_writer_1a03fe73b61469276c535aa3fef56db5c3" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; FixedSizeBufferWriterImpl &gt;</type>
        <definition>std::unique_ptr&lt;FixedSizeBufferWriterImpl&gt; arrow::io::FixedSizeBufferWriter::impl_</definition>
        <argsstring></argsstring>
        <name>impl_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/memory.h" line="139" column="1" bodyfile="/arrow/cpp/src/arrow/io/memory.h" bodystart="138" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1io_1_1_fixed_size_buffer_writer_1a54aacd40e26b32dbe6bc52669adf1045" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::io::FixedSizeBufferWriter::FixedSizeBufferWriter</definition>
        <argsstring>(const std::shared_ptr&lt; Buffer &gt; &amp;buffer)</argsstring>
        <name>FixedSizeBufferWriter</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &amp;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Input buffer must be mutable, will abort if not. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/memory.h" line="119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_fixed_size_buffer_writer_1ad071ee1572c0ab5c903fa3c5181f4799" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::io::FixedSizeBufferWriter::~FixedSizeBufferWriter</definition>
        <argsstring>() override</argsstring>
        <name>~FixedSizeBufferWriter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/memory.h" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_fixed_size_buffer_writer_1a23897d9eb4988d489f7e8a444211a54f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::FixedSizeBufferWriter::Close</definition>
        <argsstring>() override</argsstring>
        <name>Close</name>
        <reimplements refid="classarrow_1_1io_1_1_file_interface_1ae0f46d227a430af180576715e7aa0b78">Close</reimplements>
        <briefdescription>
<para>Close the stream cleanly. </para>        </briefdescription>
        <detaileddescription>
<para>For writable streams, this will attempt to flush any pending data before releasing the underlying resource.</para><para>After <ref refid="classarrow_1_1io_1_1_fixed_size_buffer_writer_1a23897d9eb4988d489f7e8a444211a54f" kindref="member">Close()</ref> is called, <ref refid="classarrow_1_1io_1_1_fixed_size_buffer_writer_1a2058a1392d03ff754f3fbe00c5f84263" kindref="member">closed()</ref> returns true and the stream is not available for further operations. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/memory.h" line="122" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_fixed_size_buffer_writer_1a2058a1392d03ff754f3fbe00c5f84263" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool arrow::io::FixedSizeBufferWriter::closed</definition>
        <argsstring>() const override</argsstring>
        <name>closed</name>
        <reimplements refid="classarrow_1_1io_1_1_file_interface_1a5ba1d2c3cec2e05e7b0018624f19c10b">closed</reimplements>
        <briefdescription>
<para>Return whether the stream is closed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/memory.h" line="123" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_fixed_size_buffer_writer_1a02f7ef2b27dc75ca386072427b0195bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::FixedSizeBufferWriter::Seek</definition>
        <argsstring>(int64_t position) override</argsstring>
        <name>Seek</name>
        <reimplements refid="classarrow_1_1io_1_1_seekable_1a410ba0e0932dbcb939b570ee3c8c6d25">Seek</reimplements>
        <param>
          <type>int64_t</type>
          <declname>position</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/memory.h" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_fixed_size_buffer_writer_1a5bcd09d7754b10701b091098c4762711" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; int64_t &gt;</type>
        <definition>Result&lt;int64_t&gt; arrow::io::FixedSizeBufferWriter::Tell</definition>
        <argsstring>() const override</argsstring>
        <name>Tell</name>
        <reimplements refid="classarrow_1_1io_1_1_file_interface_1ac6c6709147a46cd7f45d0779c1819ce6">Tell</reimplements>
        <briefdescription>
<para>Return the position in this stream. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/memory.h" line="125" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_fixed_size_buffer_writer_1a5b4d5f27023b1e90fa33c72c867bf88b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::FixedSizeBufferWriter::Write</definition>
        <argsstring>(const void *data, int64_t nbytes) override</argsstring>
        <name>Write</name>
        <reimplements refid="classarrow_1_1io_1_1_writable_1a51d9feed73c33f095ca4b9f35dede84d">Write</reimplements>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
<para>Write the given data to the stream. </para>        </briefdescription>
        <detaileddescription>
<para>This method always processes the bytes in full. Depending on the semantics of the stream, the data may be written out immediately, held in a buffer, or written asynchronously. In the case where the stream buffers the data, it will be copied. To avoid potentially large copies, use the Write variant that takes an owned <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/memory.h" line="126" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_fixed_size_buffer_writer_1ae08b6a647c15e5b6f1a1dd9b250623b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::io::FixedSizeBufferWriter::WriteAt</definition>
        <argsstring>(int64_t position, const void *data, int64_t nbytes) override</argsstring>
        <name>WriteAt</name>
        <reimplements refid="classarrow_1_1io_1_1_writable_file_1ac537915c4132d1e8bd9005f539c47615">WriteAt</reimplements>
        <param>
          <type>int64_t</type>
          <declname>position</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/memory.h" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_fixed_size_buffer_writer_1a10acc812bc7338d9d250d05d6f9809ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void arrow::io::FixedSizeBufferWriter::set_memcopy_threads</definition>
        <argsstring>(int num_threads)</argsstring>
        <name>set_memcopy_threads</name>
        <param>
          <type>int</type>
          <declname>num_threads</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/memory.h" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_fixed_size_buffer_writer_1a7e69ddfbbc6bb0dc0050d4a92c148121" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void arrow::io::FixedSizeBufferWriter::set_memcopy_blocksize</definition>
        <argsstring>(int64_t blocksize)</argsstring>
        <name>set_memcopy_blocksize</name>
        <param>
          <type>int64_t</type>
          <declname>blocksize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/memory.h" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1io_1_1_fixed_size_buffer_writer_1a05aec9d809419513b1e263fd9057420c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void arrow::io::FixedSizeBufferWriter::set_memcopy_threshold</definition>
        <argsstring>(int64_t threshold)</argsstring>
        <name>set_memcopy_threshold</name>
        <param>
          <type>int64_t</type>
          <declname>threshold</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/io/memory.h" line="135" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An output stream that writes into a fixed-size mutable buffer. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1752">
        <label>arrow::io::OutputStream</label>
        <link refid="classarrow_1_1io_1_1_output_stream"/>
        <childnode refid="1753" relation="public-inheritance">
        </childnode>
        <childnode refid="1754" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1751">
        <label>arrow::io::WritableFile</label>
        <link refid="classarrow_1_1io_1_1_writable_file"/>
        <childnode refid="1752" relation="public-inheritance">
        </childnode>
        <childnode refid="1755" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1754">
        <label>arrow::io::Writable</label>
        <link refid="classarrow_1_1io_1_1_writable"/>
      </node>
      <node id="1753">
        <label>arrow::io::FileInterface</label>
        <link refid="classarrow_1_1io_1_1_file_interface"/>
      </node>
      <node id="1755">
        <label>arrow::io::Seekable</label>
        <link refid="classarrow_1_1io_1_1_seekable"/>
      </node>
      <node id="1750">
        <label>arrow::io::FixedSizeBufferWriter</label>
        <link refid="classarrow_1_1io_1_1_fixed_size_buffer_writer"/>
        <childnode refid="1751" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1758">
        <label>arrow::io::OutputStream</label>
        <link refid="classarrow_1_1io_1_1_output_stream"/>
        <childnode refid="1759" relation="public-inheritance">
        </childnode>
        <childnode refid="1760" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1757">
        <label>arrow::io::WritableFile</label>
        <link refid="classarrow_1_1io_1_1_writable_file"/>
        <childnode refid="1758" relation="public-inheritance">
        </childnode>
        <childnode refid="1761" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1760">
        <label>arrow::io::Writable</label>
        <link refid="classarrow_1_1io_1_1_writable"/>
      </node>
      <node id="1759">
        <label>arrow::io::FileInterface</label>
        <link refid="classarrow_1_1io_1_1_file_interface"/>
      </node>
      <node id="1761">
        <label>arrow::io::Seekable</label>
        <link refid="classarrow_1_1io_1_1_seekable"/>
      </node>
      <node id="1756">
        <label>arrow::io::FixedSizeBufferWriter</label>
        <link refid="classarrow_1_1io_1_1_fixed_size_buffer_writer"/>
        <childnode refid="1757" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/io/memory.h" line="116" column="1" bodyfile="/arrow/cpp/src/arrow/io/memory.h" bodystart="116" bodyend="140"/>
    <listofallmembers>
      <member refid="classarrow_1_1io_1_1_file_interface_1a0fa59fe92d3c99c9d9701210626aac60" prot="public" virt="virtual"><scope>arrow::io::FixedSizeBufferWriter</scope><name>Abort</name></member>
      <member refid="classarrow_1_1io_1_1_fixed_size_buffer_writer_1a23897d9eb4988d489f7e8a444211a54f" prot="public" virt="virtual"><scope>arrow::io::FixedSizeBufferWriter</scope><name>Close</name></member>
      <member refid="classarrow_1_1io_1_1_fixed_size_buffer_writer_1a2058a1392d03ff754f3fbe00c5f84263" prot="public" virt="virtual"><scope>arrow::io::FixedSizeBufferWriter</scope><name>closed</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1afea9126bb21e3720212a826aa78b5534" prot="protected" virt="non-virtual"><scope>arrow::io::FixedSizeBufferWriter</scope><name>FileInterface</name></member>
      <member refid="classarrow_1_1io_1_1_fixed_size_buffer_writer_1a54aacd40e26b32dbe6bc52669adf1045" prot="public" virt="non-virtual"><scope>arrow::io::FixedSizeBufferWriter</scope><name>FixedSizeBufferWriter</name></member>
      <member refid="classarrow_1_1io_1_1_writable_1a06e513a551f68603013c1586ba8b939f" prot="public" virt="virtual"><scope>arrow::io::FixedSizeBufferWriter</scope><name>Flush</name></member>
      <member refid="classarrow_1_1io_1_1_fixed_size_buffer_writer_1a03fe73b61469276c535aa3fef56db5c3" prot="protected" virt="non-virtual"><scope>arrow::io::FixedSizeBufferWriter</scope><name>impl_</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1a75a3739361570bb121b9adb04d5d8686" prot="public" virt="non-virtual"><scope>arrow::io::FixedSizeBufferWriter</scope><name>mode</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1a504d0410eb6066316365a4549d000ee0" prot="protected" virt="non-virtual"><scope>arrow::io::FixedSizeBufferWriter</scope><name>mode_</name></member>
      <member refid="classarrow_1_1io_1_1_output_stream_1a5b1e0adea7ef92368ddc07027995aca1" prot="protected" virt="non-virtual"><scope>arrow::io::FixedSizeBufferWriter</scope><name>OutputStream</name></member>
      <member refid="classarrow_1_1io_1_1_fixed_size_buffer_writer_1a02f7ef2b27dc75ca386072427b0195bd" prot="public" virt="virtual"><scope>arrow::io::FixedSizeBufferWriter</scope><name>Seek</name></member>
      <member refid="classarrow_1_1io_1_1_fixed_size_buffer_writer_1a7e69ddfbbc6bb0dc0050d4a92c148121" prot="public" virt="non-virtual"><scope>arrow::io::FixedSizeBufferWriter</scope><name>set_memcopy_blocksize</name></member>
      <member refid="classarrow_1_1io_1_1_fixed_size_buffer_writer_1a10acc812bc7338d9d250d05d6f9809ec" prot="public" virt="non-virtual"><scope>arrow::io::FixedSizeBufferWriter</scope><name>set_memcopy_threads</name></member>
      <member refid="classarrow_1_1io_1_1_fixed_size_buffer_writer_1a05aec9d809419513b1e263fd9057420c" prot="public" virt="non-virtual"><scope>arrow::io::FixedSizeBufferWriter</scope><name>set_memcopy_threshold</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1af3dd01a780076e39a34770beb513f71f" prot="protected" virt="non-virtual"><scope>arrow::io::FixedSizeBufferWriter</scope><name>set_mode</name></member>
      <member refid="classarrow_1_1io_1_1_fixed_size_buffer_writer_1a5bcd09d7754b10701b091098c4762711" prot="public" virt="virtual"><scope>arrow::io::FixedSizeBufferWriter</scope><name>Tell</name></member>
      <member refid="classarrow_1_1io_1_1_writable_file_1a1834e50389ef694613b1998392f47efa" prot="protected" virt="non-virtual"><scope>arrow::io::FixedSizeBufferWriter</scope><name>WritableFile</name></member>
      <member refid="classarrow_1_1io_1_1_fixed_size_buffer_writer_1a5b4d5f27023b1e90fa33c72c867bf88b" prot="public" virt="virtual"><scope>arrow::io::FixedSizeBufferWriter</scope><name>Write</name></member>
      <member refid="classarrow_1_1io_1_1_writable_1a048bbc5e85b1d739bc49c57553e85069" prot="public" virt="virtual" ambiguityscope="arrow::io::WritableFile::"><scope>arrow::io::FixedSizeBufferWriter</scope><name>Write</name></member>
      <member refid="classarrow_1_1io_1_1_writable_1a00ee30dff05bda7526c91e594a9607e7" prot="public" virt="non-virtual" ambiguityscope="arrow::io::WritableFile::"><scope>arrow::io::FixedSizeBufferWriter</scope><name>Write</name></member>
      <member refid="classarrow_1_1io_1_1_fixed_size_buffer_writer_1ae08b6a647c15e5b6f1a1dd9b250623b5" prot="public" virt="virtual"><scope>arrow::io::FixedSizeBufferWriter</scope><name>WriteAt</name></member>
      <member refid="classarrow_1_1io_1_1_file_interface_1aa42dcdfad00634f01192b39f1d9b4929" prot="public" virt="pure-virtual"><scope>arrow::io::FixedSizeBufferWriter</scope><name>~FileInterface</name></member>
      <member refid="classarrow_1_1io_1_1_fixed_size_buffer_writer_1ad071ee1572c0ab5c903fa3c5181f4799" prot="public" virt="non-virtual"><scope>arrow::io::FixedSizeBufferWriter</scope><name>~FixedSizeBufferWriter</name></member>
      <member refid="classarrow_1_1io_1_1_seekable_1a7642c30d2f852e0f79fec036a94ca093" prot="public" virt="virtual"><scope>arrow::io::FixedSizeBufferWriter</scope><name>~Seekable</name></member>
      <member refid="classarrow_1_1io_1_1_writable_1acc17343118544c62f14d62f538fa8592" prot="public" virt="virtual"><scope>arrow::io::FixedSizeBufferWriter</scope><name>~Writable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
