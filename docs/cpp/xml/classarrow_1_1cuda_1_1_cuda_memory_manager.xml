<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1cuda_1_1_cuda_memory_manager" kind="class" language="C++" prot="public">
    <compoundname>arrow::cuda::CudaMemoryManager</compoundname>
    <basecompoundref refid="classarrow_1_1_memory_manager" prot="public" virt="non-virtual">arrow::MemoryManager</basecompoundref>
    <includes refid="cuda__context_8h" local="no">arrow/gpu/cuda_context.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classarrow_1_1cuda_1_1_cuda_memory_manager_1af8631e429d4a54336e15c1272492651c" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class CudaDevice</definition>
        <argsstring></argsstring>
        <name>CudaDevice</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="220" column="1" bodyfile="/arrow/cpp/src/arrow/gpu/cuda_context.h" bodystart="220" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_memory_manager_1afe4c971cfdbd8504e5e2a5c20c864d45" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_random_access_file" kindref="compound">io::RandomAccessFile</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;io::RandomAccessFile&gt; &gt; arrow::cuda::CudaMemoryManager::GetBufferReader</definition>
        <argsstring>(std::shared_ptr&lt; Buffer &gt; buf) override</argsstring>
        <name>GetBufferReader</name>
        <reimplements refid="classarrow_1_1_memory_manager_1a95ff2d7345e5892f6f0750fc1b9543a5">GetBufferReader</reimplements>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Create a RandomAccessFile to read a particular buffer. </para>        </briefdescription>
        <detaileddescription>
<para>The given buffer must be tied to this <ref refid="classarrow_1_1_memory_manager" kindref="compound">MemoryManager</ref>.</para><para>See also the <ref refid="classarrow_1_1_buffer_1ae2eded44b1379542966cd441a49fe953" kindref="member">Buffer::GetReader</ref> shorthand. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="190" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_memory_manager_1a1a3ac0ffa638a473c4616ef8cab3782b" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1io_1_1_output_stream" kindref="compound">io::OutputStream</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;io::OutputStream&gt; &gt; arrow::cuda::CudaMemoryManager::GetBufferWriter</definition>
        <argsstring>(std::shared_ptr&lt; Buffer &gt; buf) override</argsstring>
        <name>GetBufferWriter</name>
        <reimplements refid="classarrow_1_1_memory_manager_1a7888256d7a122d4bbda0b1c6d36efc08">GetBufferWriter</reimplements>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Create a OutputStream to write to a particular buffer. </para>        </briefdescription>
        <detaileddescription>
<para>The given buffer must be mutable and tied to this <ref refid="classarrow_1_1_memory_manager" kindref="compound">MemoryManager</ref>. The returned stream object writes into the buffer&apos;s underlying memory (but it won&apos;t resize it).</para><para>See also the <ref refid="classarrow_1_1_buffer_1a3131f10cde81c53e4d6615eb5e4850ec" kindref="member">Buffer::GetWriter</ref> shorthand. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="192" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_memory_manager_1a387b91fec7a558ea5e77ac4eb382528d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;Buffer&gt; &gt; arrow::cuda::CudaMemoryManager::AllocateBuffer</definition>
        <argsstring>(int64_t size) override</argsstring>
        <name>AllocateBuffer</name>
        <reimplements refid="classarrow_1_1_memory_manager_1af9a8d3491d119faea0e4c9b4581bcb00">AllocateBuffer</reimplements>
        <param>
          <type>int64_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Allocate a (mutable) <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>The buffer will be allocated in the device&apos;s memory. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="195" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_memory_manager_1a0a32036a408f28362ee697b4fbcef316" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1cuda_1_1_cuda_device" kindref="compound">CudaDevice</ref> &gt;</type>
        <definition>std::shared_ptr&lt;CudaDevice&gt; arrow::cuda::CudaMemoryManager::cuda_device</definition>
        <argsstring>() const</argsstring>
        <name>cuda_device</name>
        <briefdescription>
<para>The <ref refid="classarrow_1_1cuda_1_1_cuda_device" kindref="compound">CudaDevice</ref> instance tied to this <ref refid="classarrow_1_1_memory_manager" kindref="compound">MemoryManager</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>This is a useful shorthand returning a concrete-typed pointer, avoiding having to cast the <computeroutput><ref refid="classarrow_1_1_memory_manager_1a5b5e7539c2b6a3dcec4ed283a314d4a1" kindref="member">device()</ref></computeroutput> result. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="201" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-static-func">
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_memory_manager_1a2053d33157034282bb3a80ebfc7ad9fc" prot="protected" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1cuda_1_1_cuda_memory_manager" kindref="compound">CudaMemoryManager</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;CudaMemoryManager&gt; arrow::cuda::CudaMemoryManager::Make</definition>
        <argsstring>(const std::shared_ptr&lt; Device &gt; &amp;device)</argsstring>
        <name>Make</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_device" kindref="compound">Device</ref> &gt; &amp;</type>
          <declname>device</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="205" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_memory_manager_1abfd01f4e3d980242a2564ae5ef309e77" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;Buffer&gt; &gt; arrow::cuda::CudaMemoryManager::CopyBufferFrom</definition>
        <argsstring>(const std::shared_ptr&lt; Buffer &gt; &amp;buf, const std::shared_ptr&lt; MemoryManager &gt; &amp;from) override</argsstring>
        <name>CopyBufferFrom</name>
        <reimplements refid="classarrow_1_1_memory_manager_1a9cd074a9eb848bb8f7c1ba0bacc12773">CopyBufferFrom</reimplements>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &amp;</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_memory_manager" kindref="compound">MemoryManager</ref> &gt; &amp;</type>
          <declname>from</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="207" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_memory_manager_1a23e68939460131f56fd63f228fe5e7ca" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;Buffer&gt; &gt; arrow::cuda::CudaMemoryManager::CopyBufferTo</definition>
        <argsstring>(const std::shared_ptr&lt; Buffer &gt; &amp;buf, const std::shared_ptr&lt; MemoryManager &gt; &amp;to) override</argsstring>
        <name>CopyBufferTo</name>
        <reimplements refid="classarrow_1_1_memory_manager_1ac558ad6b86c1b6866768b8a10ee242d2">CopyBufferTo</reimplements>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &amp;</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_memory_manager" kindref="compound">MemoryManager</ref> &gt; &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="210" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_memory_manager_1ae4d997085a15ebae2e90e3d505fe462f" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;Buffer&gt; &gt; arrow::cuda::CudaMemoryManager::ViewBufferFrom</definition>
        <argsstring>(const std::shared_ptr&lt; Buffer &gt; &amp;buf, const std::shared_ptr&lt; MemoryManager &gt; &amp;from) override</argsstring>
        <name>ViewBufferFrom</name>
        <reimplements refid="classarrow_1_1_memory_manager_1aa733b0b389a1fe14ff1b95cf81554a14">ViewBufferFrom</reimplements>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &amp;</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_memory_manager" kindref="compound">MemoryManager</ref> &gt; &amp;</type>
          <declname>from</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="213" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1cuda_1_1_cuda_memory_manager_1a550632b2af064bf7085abd7e4462af67" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;Buffer&gt; &gt; arrow::cuda::CudaMemoryManager::ViewBufferTo</definition>
        <argsstring>(const std::shared_ptr&lt; Buffer &gt; &amp;buf, const std::shared_ptr&lt; MemoryManager &gt; &amp;to) override</argsstring>
        <name>ViewBufferTo</name>
        <reimplements refid="classarrow_1_1_memory_manager_1a16287a682e1c18d9b4b697f20d555fed">ViewBufferTo</reimplements>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &amp;</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_memory_manager" kindref="compound">MemoryManager</ref> &gt; &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="216" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classarrow_1_1_memory_manager" kindref="compound">MemoryManager</ref> implementation for CUDA. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="827">
        <label>arrow::cuda::CudaMemoryManager</label>
        <link refid="classarrow_1_1cuda_1_1_cuda_memory_manager"/>
        <childnode refid="828" relation="public-inheritance">
        </childnode>
      </node>
      <node id="829">
        <label>std::enable_shared_from_this&lt; MemoryManager &gt;</label>
      </node>
      <node id="828">
        <label>arrow::MemoryManager</label>
        <link refid="classarrow_1_1_memory_manager"/>
        <childnode refid="829" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="830">
        <label>arrow::cuda::CudaMemoryManager</label>
        <link refid="classarrow_1_1cuda_1_1_cuda_memory_manager"/>
        <childnode refid="831" relation="public-inheritance">
        </childnode>
      </node>
      <node id="832">
        <label>std::enable_shared_from_this&lt; MemoryManager &gt;</label>
      </node>
      <node id="831">
        <label>arrow::MemoryManager</label>
        <link refid="classarrow_1_1_memory_manager"/>
        <childnode refid="832" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/gpu/cuda_context.h" line="188" column="1" bodyfile="/arrow/cpp/src/arrow/gpu/cuda_context.h" bodystart="188" bodyend="221"/>
    <listofallmembers>
      <member refid="classarrow_1_1cuda_1_1_cuda_memory_manager_1a387b91fec7a558ea5e77ac4eb382528d" prot="public" virt="virtual"><scope>arrow::cuda::CudaMemoryManager</scope><name>AllocateBuffer</name></member>
      <member refid="classarrow_1_1_memory_manager_1a3aebef8752c289bde067fceb9bc2dde1" prot="protected" virt="non-virtual"><scope>arrow::cuda::CudaMemoryManager</scope><name>ARROW_DISALLOW_COPY_AND_ASSIGN</name></member>
      <member refid="classarrow_1_1_memory_manager_1ade50a93d074fd3ccbddad215371784c2" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaMemoryManager</scope><name>CopyBuffer</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_memory_manager_1abfd01f4e3d980242a2564ae5ef309e77" prot="protected" virt="virtual"><scope>arrow::cuda::CudaMemoryManager</scope><name>CopyBufferFrom</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_memory_manager_1a23e68939460131f56fd63f228fe5e7ca" prot="protected" virt="virtual"><scope>arrow::cuda::CudaMemoryManager</scope><name>CopyBufferTo</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_memory_manager_1a0a32036a408f28362ee697b4fbcef316" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaMemoryManager</scope><name>cuda_device</name></member>
      <member refid="classarrow_1_1_memory_manager_1a5b5e7539c2b6a3dcec4ed283a314d4a1" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaMemoryManager</scope><name>device</name></member>
      <member refid="classarrow_1_1_memory_manager_1a5c86d3366a8fe9d7925a05aa84954477" prot="protected" virt="non-virtual"><scope>arrow::cuda::CudaMemoryManager</scope><name>device_</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_memory_manager_1afe4c971cfdbd8504e5e2a5c20c864d45" prot="public" virt="virtual"><scope>arrow::cuda::CudaMemoryManager</scope><name>GetBufferReader</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_memory_manager_1a1a3ac0ffa638a473c4616ef8cab3782b" prot="public" virt="virtual"><scope>arrow::cuda::CudaMemoryManager</scope><name>GetBufferWriter</name></member>
      <member refid="classarrow_1_1_memory_manager_1abfed9ff4dc52b5952f43c1c43a830372" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaMemoryManager</scope><name>is_cpu</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_memory_manager_1a2053d33157034282bb3a80ebfc7ad9fc" prot="protected" virt="non-virtual"><scope>arrow::cuda::CudaMemoryManager</scope><name>Make</name></member>
      <member refid="classarrow_1_1_memory_manager_1ae77d89525b8def7390a82b195549bd0e" prot="protected" virt="non-virtual"><scope>arrow::cuda::CudaMemoryManager</scope><name>MemoryManager</name></member>
      <member refid="classarrow_1_1_memory_manager_1ab53a4d3f8077ca1df66a49f904b3ce43" prot="public" virt="non-virtual"><scope>arrow::cuda::CudaMemoryManager</scope><name>ViewBuffer</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_memory_manager_1ae4d997085a15ebae2e90e3d505fe462f" prot="protected" virt="virtual"><scope>arrow::cuda::CudaMemoryManager</scope><name>ViewBufferFrom</name></member>
      <member refid="classarrow_1_1cuda_1_1_cuda_memory_manager_1a550632b2af064bf7085abd7e4462af67" prot="protected" virt="virtual"><scope>arrow::cuda::CudaMemoryManager</scope><name>ViewBufferTo</name></member>
      <member refid="classarrow_1_1_memory_manager_1ad42b4e8c52ba63786b1bf43173c4d5a7" prot="public" virt="virtual"><scope>arrow::cuda::CudaMemoryManager</scope><name>~MemoryManager</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
