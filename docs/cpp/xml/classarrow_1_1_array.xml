<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_array" kind="class" language="C++" prot="public">
    <compoundname>arrow::Array</compoundname>
    <derivedcompoundref refid="classarrow_1_1_base_list_array" prot="public" virt="non-virtual">arrow::BaseListArray&lt; TYPE &gt;</derivedcompoundref>
    <derivedcompoundref refid="classarrow_1_1_dictionary_array" prot="public" virt="non-virtual">arrow::DictionaryArray</derivedcompoundref>
    <derivedcompoundref refid="classarrow_1_1_extension_array" prot="public" virt="non-virtual">arrow::ExtensionArray</derivedcompoundref>
    <derivedcompoundref refid="classarrow_1_1_fixed_size_list_array" prot="public" virt="non-virtual">arrow::FixedSizeListArray</derivedcompoundref>
    <derivedcompoundref refid="classarrow_1_1_flat_array" prot="public" virt="non-virtual">arrow::FlatArray</derivedcompoundref>
    <derivedcompoundref refid="classarrow_1_1_struct_array" prot="public" virt="non-virtual">arrow::StructArray</derivedcompoundref>
    <derivedcompoundref refid="classarrow_1_1_union_array" prot="public" virt="non-virtual">arrow::UnionArray</derivedcompoundref>
    <derivedcompoundref refid="classarrow_1_1_base_list_array" prot="public" virt="non-virtual">arrow::BaseListArray&lt; LargeListType &gt;</derivedcompoundref>
    <derivedcompoundref refid="classarrow_1_1_base_list_array" prot="public" virt="non-virtual">arrow::BaseListArray&lt; ListType &gt;</derivedcompoundref>
    <includes refid="array_8h" local="no">arrow/array.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classarrow_1_1_array_1a2631dce1d5868216cba0a140e81ef14e" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &gt;</type>
        <definition>std::shared_ptr&lt;ArrayData&gt; arrow::Array::data_</definition>
        <argsstring></argsstring>
        <name>data_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="436" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="436" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_array_1aed59d9e8608229ff3808983cdc908ccd" prot="protected" static="no" mutable="no">
        <type>const uint8_t *</type>
        <definition>const uint8_t* arrow::Array::null_bitmap_data_</definition>
        <argsstring></argsstring>
        <name>null_bitmap_data_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="437" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="437" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1_array_1addd582eec9488bca2b3379b71fef6ce5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual arrow::Array::~Array</definition>
        <argsstring>()=default</argsstring>
        <name>~Array</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="311" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_array_1a18c61cd4c8c158a30f30023eabc83acb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::Array::IsNull</definition>
        <argsstring>(int64_t i) const</argsstring>
        <name>IsNull</name>
        <param>
          <type>int64_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Return true if value at index is null. Does not boundscheck. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="314" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="314" bodyend="317"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_array_1ae554bfb313cd6b161f63fb2966dbd662" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::Array::IsValid</definition>
        <argsstring>(int64_t i) const</argsstring>
        <name>IsValid</name>
        <param>
          <type>int64_t</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Return true if value at index is valid (not null). </para>        </briefdescription>
        <detaileddescription>
<para>Does not boundscheck </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="321" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="321" bodyend="324"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_array_1a49c7fb3f73d2d43e7338591c5a8bd8bf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t arrow::Array::length</definition>
        <argsstring>() const</argsstring>
        <name>length</name>
        <briefdescription>
<para>Size in the number of elements this array contains. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="327" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="327" bodyend="327"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_array_1a1a0c6c1aa06cffd1dcb3813f0d24b2fd" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t arrow::Array::offset</definition>
        <argsstring>() const</argsstring>
        <name>offset</name>
        <briefdescription>
<para>A relative position into another array&apos;s data, to enable zero-copy slicing. </para>        </briefdescription>
        <detaileddescription>
<para>This value defaults to zero </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="331" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="331" bodyend="331"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_array_1a0537d3b69a889b951e88be2fe9f3d96a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t arrow::Array::null_count</definition>
        <argsstring>() const</argsstring>
        <name>null_count</name>
        <briefdescription>
<para>The number of null entries in the array. </para>        </briefdescription>
        <detaileddescription>
<para>If the null count was not known at time of construction (and set to a negative value), then the null count will be computed and cached on the first invocation of this function </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="337" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_array_1a635a694fbadb0bfa731beb97df2ef7ea" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::Array::type</definition>
        <argsstring>() const</argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="339" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="339" bodyend="339"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_array_1a155d9d827415438f976e3cb31e0a55f6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref></type>
        <definition>Type::type arrow::Array::type_id</definition>
        <argsstring>() const</argsstring>
        <name>type_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="340" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="340" bodyend="340"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_array_1a76c4756ac85b29f9135064d68d2ef908" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Buffer&gt; arrow::Array::null_bitmap</definition>
        <argsstring>() const</argsstring>
        <name>null_bitmap</name>
        <briefdescription>
<para><ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> for the null bitmap. </para>        </briefdescription>
        <detaileddescription>
<para>Note that for <computeroutput>null_count == 0</computeroutput>, this can be null. This buffer does not account for any slice offset </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="346" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="346" bodyend="346"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_array_1a7a8838fbc97b9b3b8ca15cb163b2027c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const uint8_t *</type>
        <definition>const uint8_t* arrow::Array::null_bitmap_data</definition>
        <argsstring>() const</argsstring>
        <name>null_bitmap_data</name>
        <briefdescription>
<para>Raw pointer to the null bitmap. </para>        </briefdescription>
        <detaileddescription>
<para>Note that for <computeroutput>null_count == 0</computeroutput>, this can be null. This buffer does not account for any slice offset </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="352" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="352" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_array_1a686cf58bab513d8ecfe3a285f4562eab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::Array::Equals</definition>
        <argsstring>(const Array &amp;arr, const EqualOptions &amp;=EqualOptions::Defaults()) const</argsstring>
        <name>Equals</name>
        <param>
          <type>const <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>const <ref refid="classarrow_1_1_equal_options" kindref="compound">EqualOptions</ref> &amp;</type>
          <defval><ref refid="classarrow_1_1_equal_options_1aceb7c9984ead6d5a79ba4a725193d452" kindref="member">EqualOptions::Defaults</ref>()</defval>
        </param>
        <briefdescription>
<para>Equality comparison with another array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="355" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_array_1a99913841c11eb73c61a25c018f57ca40" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::Array::Equals</definition>
        <argsstring>(const std::shared_ptr&lt; Array &gt; &amp;arr, const EqualOptions &amp;=EqualOptions::Defaults()) const</argsstring>
        <name>Equals</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>const <ref refid="classarrow_1_1_equal_options" kindref="compound">EqualOptions</ref> &amp;</type>
          <defval><ref refid="classarrow_1_1_equal_options_1aceb7c9984ead6d5a79ba4a725193d452" kindref="member">EqualOptions::Defaults</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="356" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_array_1a95ff1c7489e9d2fd5ff52fde1b8b5c46" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arrow::Array::Diff</definition>
        <argsstring>(const Array &amp;other) const</argsstring>
        <name>Diff</name>
        <param>
          <type>const <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Return the formatted unified diff of <ref refid="namespacearrow_1a0d16f62627582ce40fcb90f88471c67e" kindref="member">arrow::Diff</ref> between this <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> and another <ref refid="classarrow_1_1_array" kindref="compound">Array</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="361" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_array_1a381e6469686eccd2545cf1dc171f6cb7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::Array::ApproxEquals</definition>
        <argsstring>(const std::shared_ptr&lt; Array &gt; &amp;arr, const EqualOptions &amp;=EqualOptions::Defaults()) const</argsstring>
        <name>ApproxEquals</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; &amp;</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>const <ref refid="classarrow_1_1_equal_options" kindref="compound">EqualOptions</ref> &amp;</type>
          <defval><ref refid="classarrow_1_1_equal_options_1aceb7c9984ead6d5a79ba4a725193d452" kindref="member">EqualOptions::Defaults</ref>()</defval>
        </param>
        <briefdescription>
<para>Approximate equality comparison with another array. </para>        </briefdescription>
        <detaileddescription>
<para>epsilon is only used if this is FloatArray or DoubleArray </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="366" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_array_1a2ed35161e2e2200bf4dcadb6ff11d7fb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::Array::ApproxEquals</definition>
        <argsstring>(const Array &amp;arr, const EqualOptions &amp;=EqualOptions::Defaults()) const</argsstring>
        <name>ApproxEquals</name>
        <param>
          <type>const <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>arr</declname>
        </param>
        <param>
          <type>const <ref refid="classarrow_1_1_equal_options" kindref="compound">EqualOptions</ref> &amp;</type>
          <defval><ref refid="classarrow_1_1_equal_options_1aceb7c9984ead6d5a79ba4a725193d452" kindref="member">EqualOptions::Defaults</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="368" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_array_1ace5ac1affa59422d70a8b3f6929b70bc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::Array::RangeEquals</definition>
        <argsstring>(int64_t start_idx, int64_t end_idx, int64_t other_start_idx, const Array &amp;other) const</argsstring>
        <name>RangeEquals</name>
        <param>
          <type>int64_t</type>
          <declname>start_idx</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>end_idx</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>other_start_idx</declname>
        </param>
        <param>
          <type>const <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Compare if the range of slots specified are equal for the given array and this array. </para>        </briefdescription>
        <detaileddescription>
<para>end_idx exclusive. This methods does not bounds check. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="373" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_array_1a537467bcecb4471b18d3271f14ca9ad2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::Array::RangeEquals</definition>
        <argsstring>(int64_t start_idx, int64_t end_idx, int64_t other_start_idx, const std::shared_ptr&lt; Array &gt; &amp;other) const</argsstring>
        <name>RangeEquals</name>
        <param>
          <type>int64_t</type>
          <declname>start_idx</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>end_idx</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>other_start_idx</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="375" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_array_1acf138d427e7f8a8c56cac7f9d9e64db3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::Array::RangeEquals</definition>
        <argsstring>(const Array &amp;other, int64_t start_idx, int64_t end_idx, int64_t other_start_idx) const</argsstring>
        <name>RangeEquals</name>
        <param>
          <type>const <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>start_idx</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>end_idx</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>other_start_idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="377" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_array_1a28f8f8d92439489bbd1727392123b0f7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::Array::RangeEquals</definition>
        <argsstring>(const std::shared_ptr&lt; Array &gt; &amp;other, int64_t start_idx, int64_t end_idx, int64_t other_start_idx) const</argsstring>
        <name>RangeEquals</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>start_idx</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>end_idx</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>other_start_idx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="379" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_array_1a168f3ec5c96688dadeaf015692e4bef8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::Array::Accept</definition>
        <argsstring>(ArrayVisitor *visitor) const</argsstring>
        <name>Accept</name>
        <param>
          <type><ref refid="classarrow_1_1_array_visitor" kindref="compound">ArrayVisitor</ref> *</type>
          <declname>visitor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="382" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_array_1aa2b5f248c09a41c089e1fbc911beecb0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;Array&gt; &gt; arrow::Array::View</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;type) const</argsstring>
        <name>View</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Construct a zero-copy view of this array with the given type. </para>        </briefdescription>
        <detaileddescription>
<para>This method checks if the types are layout-compatible. Nested types are traversed in depth-first order. Data buffers must have the same item sizes, even though the logical types may be different. An error is returned if the types are not layout-compatible. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="390" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_array_1ad015904c8c6e5e2513c791fb577f2679" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::Array::View</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;type, std::shared_ptr&lt; Array &gt; *out) const</argsstring>
        <name>View</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="393" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_array_1ae32f72c78fe10ce17f0a817e302e17d1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Array&gt; arrow::Array::Slice</definition>
        <argsstring>(int64_t offset, int64_t length) const</argsstring>
        <name>Slice</name>
        <param>
          <type>int64_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Construct a zero-copy slice of the array with the indicated offset and length. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>the position of the first element in the constructed slice </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>the length of the slice. If there are not enough elements in the array, the length will be adjusted accordingly</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>a new object wrapped in std::shared_ptr&lt;Array&gt; </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="404" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_array_1a5cf4c3330e850670aa52dab3b21869ea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Array&gt; arrow::Array::Slice</definition>
        <argsstring>(int64_t offset) const</argsstring>
        <name>Slice</name>
        <param>
          <type>int64_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Slice from offset until end of the array. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="407" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_array_1aeca84e9b3a1f1e6e3f83a61c90e376a9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &gt;</type>
        <definition>std::shared_ptr&lt;ArrayData&gt; arrow::Array::data</definition>
        <argsstring>() const</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="409" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="409" bodyend="409"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_array_1a183e69c91c531609f42a29b593119d58" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int arrow::Array::num_fields</definition>
        <argsstring>() const</argsstring>
        <name>num_fields</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="411" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="411" bodyend="411"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_array_1a41c7af0e40ac55f2ce11785fea3e051e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arrow::Array::ToString</definition>
        <argsstring>() const</argsstring>
        <name>ToString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>PrettyPrint representation of array suitable for debugging </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="414" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_array_1ad62bad8fde2bb8fbd5a52df3fa4bd56c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::Array::Validate</definition>
        <argsstring>() const</argsstring>
        <name>Validate</name>
        <briefdescription>
<para>Perform cheap validation checks to determine obvious inconsistencies within the array&apos;s internal data. </para>        </briefdescription>
        <detaileddescription>
<para>This is O(k) where k is the number of descendents.</para><para><simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="422" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_array_1a793321da66d2d1839e6c89a956e4cb07" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::Array::ValidateFull</definition>
        <argsstring>() const</argsstring>
        <name>ValidateFull</name>
        <briefdescription>
<para>Perform extensive validation checks to determine inconsistencies within the array&apos;s internal data. </para>        </briefdescription>
        <detaileddescription>
<para>This is potentially O(k*n) where k is the number of descendents and n is the array length.</para><para><simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="431" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classarrow_1_1_array_1ae44d3c2fae3a8578fe829da20c6732f8" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::Array::Array</definition>
        <argsstring>()</argsstring>
        <name>Array</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="434" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="434" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_array_1a7053d3600bccd9cd34fcb6f5470a75c1" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void arrow::Array::SetData</definition>
        <argsstring>(const std::shared_ptr&lt; ArrayData &gt; &amp;data)</argsstring>
        <name>SetData</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Protected method for constructors. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="440" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="440" bodyend="447"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classarrow_1_1_array_1a1d0626baf5aff78340da72bf456379a8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::Array::ARROW_DISALLOW_COPY_AND_ASSIGN</definition>
        <argsstring>(Array)</argsstring>
        <name>ARROW_DISALLOW_COPY_AND_ASSIGN</name>
        <param>
          <type><ref refid="classarrow_1_1_array" kindref="compound">Array</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="450" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classarrow_1_1_array" kindref="compound">Array</ref> base type Immutable data array with some logical type and some length. </para>    </briefdescription>
    <detaileddescription>
<para>Any memory is owned by the respective <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> instance (or its parents).</para><para>The base class is only required to have a null bitmap buffer if the null count is greater than 0</para><para>If known, the null count can be provided in the base <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> constructor. If the null count is not known, pass -1 to indicate that the null count is to be computed on the first call to <ref refid="classarrow_1_1_array_1a0537d3b69a889b951e88be2fe9f3d96a" kindref="member">null_count()</ref> </para>    </detaileddescription>
    <inheritancegraph>
      <node id="95">
        <label>arrow::FixedSizeBinaryArray</label>
        <link refid="classarrow_1_1_fixed_size_binary_array"/>
        <childnode refid="92" relation="public-inheritance">
        </childnode>
      </node>
      <node id="108">
        <label>arrow::LargeListArray</label>
        <link refid="classarrow_1_1_large_list_array"/>
        <childnode refid="107" relation="public-inheritance">
        </childnode>
      </node>
      <node id="101">
        <label>arrow::StringArray</label>
        <link refid="classarrow_1_1_string_array"/>
        <childnode refid="100" relation="public-inheritance">
        </childnode>
      </node>
      <node id="85">
        <label>arrow::BaseListArray&lt; TYPE &gt;</label>
        <link refid="classarrow_1_1_base_list_array"/>
        <childnode refid="84" relation="public-inheritance">
        </childnode>
      </node>
      <node id="84">
        <label>arrow::Array</label>
        <link refid="classarrow_1_1_array"/>
      </node>
      <node id="87">
        <label>arrow::ExtensionArray</label>
        <link refid="classarrow_1_1_extension_array"/>
        <childnode refid="84" relation="public-inheritance">
        </childnode>
      </node>
      <node id="94">
        <label>arrow::DayTimeIntervalArray</label>
        <link refid="classarrow_1_1_day_time_interval_array"/>
        <childnode refid="92" relation="public-inheritance">
        </childnode>
      </node>
      <node id="106">
        <label>arrow::UnionArray</label>
        <link refid="classarrow_1_1_union_array"/>
        <childnode refid="84" relation="public-inheritance">
        </childnode>
      </node>
      <node id="103">
        <label>arrow::LargeBinaryArray</label>
        <link refid="classarrow_1_1_large_binary_array"/>
        <childnode refid="102" relation="public-inheritance">
        </childnode>
      </node>
      <node id="99">
        <label>arrow::BaseBinaryArray&lt; BinaryType &gt;</label>
        <link refid="classarrow_1_1_base_binary_array"/>
        <childnode refid="89" relation="public-inheritance">
        </childnode>
      </node>
      <node id="109">
        <label>arrow::BaseListArray&lt; ListType &gt;</label>
        <link refid="classarrow_1_1_base_list_array"/>
        <childnode refid="84" relation="public-inheritance">
        </childnode>
      </node>
      <node id="107">
        <label>arrow::BaseListArray&lt; LargeListType &gt;</label>
        <link refid="classarrow_1_1_base_list_array"/>
        <childnode refid="84" relation="public-inheritance">
        </childnode>
      </node>
      <node id="96">
        <label>arrow::Decimal128Array</label>
        <link refid="classarrow_1_1_decimal128_array"/>
        <childnode refid="95" relation="public-inheritance">
        </childnode>
      </node>
      <node id="104">
        <label>arrow::LargeStringArray</label>
        <link refid="classarrow_1_1_large_string_array"/>
        <childnode refid="103" relation="public-inheritance">
        </childnode>
      </node>
      <node id="100">
        <label>arrow::BinaryArray</label>
        <link refid="classarrow_1_1_binary_array"/>
        <childnode refid="99" relation="public-inheritance">
        </childnode>
      </node>
      <node id="90">
        <label>arrow::BaseBinaryArray&lt; TYPE &gt;</label>
        <link refid="classarrow_1_1_base_binary_array"/>
        <childnode refid="89" relation="public-inheritance">
        </childnode>
      </node>
      <node id="92">
        <label>arrow::PrimitiveArray</label>
        <link refid="classarrow_1_1_primitive_array"/>
        <childnode refid="89" relation="public-inheritance">
        </childnode>
      </node>
      <node id="102">
        <label>arrow::BaseBinaryArray&lt; LargeBinaryType &gt;</label>
        <link refid="classarrow_1_1_base_binary_array"/>
        <childnode refid="89" relation="public-inheritance">
        </childnode>
      </node>
      <node id="89">
        <label>arrow::FlatArray</label>
        <link refid="classarrow_1_1_flat_array"/>
        <childnode refid="84" relation="public-inheritance">
        </childnode>
      </node>
      <node id="86">
        <label>arrow::DictionaryArray</label>
        <link refid="classarrow_1_1_dictionary_array"/>
        <childnode refid="84" relation="public-inheritance">
        </childnode>
      </node>
      <node id="93">
        <label>arrow::BooleanArray</label>
        <link refid="classarrow_1_1_boolean_array"/>
        <childnode refid="92" relation="public-inheritance">
        </childnode>
      </node>
      <node id="97">
        <label>arrow::NumericArray&lt; TYPE &gt;</label>
        <link refid="classarrow_1_1_numeric_array"/>
        <childnode refid="92" relation="public-inheritance">
        </childnode>
      </node>
      <node id="88">
        <label>arrow::FixedSizeListArray</label>
        <link refid="classarrow_1_1_fixed_size_list_array"/>
        <childnode refid="84" relation="public-inheritance">
        </childnode>
      </node>
      <node id="111">
        <label>arrow::MapArray</label>
        <link refid="classarrow_1_1_map_array"/>
        <childnode refid="110" relation="public-inheritance">
        </childnode>
      </node>
      <node id="98">
        <label>arrow::NumericArray&lt; IndexType &gt;</label>
        <link refid="classarrow_1_1_numeric_array"/>
        <childnode refid="92" relation="public-inheritance">
        </childnode>
      </node>
      <node id="91">
        <label>arrow::NullArray</label>
        <link refid="classarrow_1_1_null_array"/>
        <childnode refid="89" relation="public-inheritance">
        </childnode>
      </node>
      <node id="105">
        <label>arrow::StructArray</label>
        <link refid="classarrow_1_1_struct_array"/>
        <childnode refid="84" relation="public-inheritance">
        </childnode>
      </node>
      <node id="110">
        <label>arrow::ListArray</label>
        <link refid="classarrow_1_1_list_array"/>
        <childnode refid="109" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/arrow/cpp/src/arrow/array.h" line="309" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="309" bodyend="451"/>
    <listofallmembers>
      <member refid="classarrow_1_1_array_1a168f3ec5c96688dadeaf015692e4bef8" prot="public" virt="non-virtual"><scope>arrow::Array</scope><name>Accept</name></member>
      <member refid="classarrow_1_1_array_1a381e6469686eccd2545cf1dc171f6cb7" prot="public" virt="non-virtual"><scope>arrow::Array</scope><name>ApproxEquals</name></member>
      <member refid="classarrow_1_1_array_1a2ed35161e2e2200bf4dcadb6ff11d7fb" prot="public" virt="non-virtual"><scope>arrow::Array</scope><name>ApproxEquals</name></member>
      <member refid="classarrow_1_1_array_1ae44d3c2fae3a8578fe829da20c6732f8" prot="protected" virt="non-virtual"><scope>arrow::Array</scope><name>Array</name></member>
      <member refid="classarrow_1_1_array_1a1d0626baf5aff78340da72bf456379a8" prot="private" virt="non-virtual"><scope>arrow::Array</scope><name>ARROW_DISALLOW_COPY_AND_ASSIGN</name></member>
      <member refid="classarrow_1_1_array_1aeca84e9b3a1f1e6e3f83a61c90e376a9" prot="public" virt="non-virtual"><scope>arrow::Array</scope><name>data</name></member>
      <member refid="classarrow_1_1_array_1a2631dce1d5868216cba0a140e81ef14e" prot="protected" virt="non-virtual"><scope>arrow::Array</scope><name>data_</name></member>
      <member refid="classarrow_1_1_array_1a95ff1c7489e9d2fd5ff52fde1b8b5c46" prot="public" virt="non-virtual"><scope>arrow::Array</scope><name>Diff</name></member>
      <member refid="classarrow_1_1_array_1a686cf58bab513d8ecfe3a285f4562eab" prot="public" virt="non-virtual"><scope>arrow::Array</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_array_1a99913841c11eb73c61a25c018f57ca40" prot="public" virt="non-virtual"><scope>arrow::Array</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_array_1a18c61cd4c8c158a30f30023eabc83acb" prot="public" virt="non-virtual"><scope>arrow::Array</scope><name>IsNull</name></member>
      <member refid="classarrow_1_1_array_1ae554bfb313cd6b161f63fb2966dbd662" prot="public" virt="non-virtual"><scope>arrow::Array</scope><name>IsValid</name></member>
      <member refid="classarrow_1_1_array_1a49c7fb3f73d2d43e7338591c5a8bd8bf" prot="public" virt="non-virtual"><scope>arrow::Array</scope><name>length</name></member>
      <member refid="classarrow_1_1_array_1a76c4756ac85b29f9135064d68d2ef908" prot="public" virt="non-virtual"><scope>arrow::Array</scope><name>null_bitmap</name></member>
      <member refid="classarrow_1_1_array_1a7a8838fbc97b9b3b8ca15cb163b2027c" prot="public" virt="non-virtual"><scope>arrow::Array</scope><name>null_bitmap_data</name></member>
      <member refid="classarrow_1_1_array_1aed59d9e8608229ff3808983cdc908ccd" prot="protected" virt="non-virtual"><scope>arrow::Array</scope><name>null_bitmap_data_</name></member>
      <member refid="classarrow_1_1_array_1a0537d3b69a889b951e88be2fe9f3d96a" prot="public" virt="non-virtual"><scope>arrow::Array</scope><name>null_count</name></member>
      <member refid="classarrow_1_1_array_1a183e69c91c531609f42a29b593119d58" prot="public" virt="non-virtual"><scope>arrow::Array</scope><name>num_fields</name></member>
      <member refid="classarrow_1_1_array_1a1a0c6c1aa06cffd1dcb3813f0d24b2fd" prot="public" virt="non-virtual"><scope>arrow::Array</scope><name>offset</name></member>
      <member refid="classarrow_1_1_array_1ace5ac1affa59422d70a8b3f6929b70bc" prot="public" virt="non-virtual"><scope>arrow::Array</scope><name>RangeEquals</name></member>
      <member refid="classarrow_1_1_array_1a537467bcecb4471b18d3271f14ca9ad2" prot="public" virt="non-virtual"><scope>arrow::Array</scope><name>RangeEquals</name></member>
      <member refid="classarrow_1_1_array_1acf138d427e7f8a8c56cac7f9d9e64db3" prot="public" virt="non-virtual"><scope>arrow::Array</scope><name>RangeEquals</name></member>
      <member refid="classarrow_1_1_array_1a28f8f8d92439489bbd1727392123b0f7" prot="public" virt="non-virtual"><scope>arrow::Array</scope><name>RangeEquals</name></member>
      <member refid="classarrow_1_1_array_1a7053d3600bccd9cd34fcb6f5470a75c1" prot="protected" virt="non-virtual"><scope>arrow::Array</scope><name>SetData</name></member>
      <member refid="classarrow_1_1_array_1ae32f72c78fe10ce17f0a817e302e17d1" prot="public" virt="non-virtual"><scope>arrow::Array</scope><name>Slice</name></member>
      <member refid="classarrow_1_1_array_1a5cf4c3330e850670aa52dab3b21869ea" prot="public" virt="non-virtual"><scope>arrow::Array</scope><name>Slice</name></member>
      <member refid="classarrow_1_1_array_1a41c7af0e40ac55f2ce11785fea3e051e" prot="public" virt="non-virtual"><scope>arrow::Array</scope><name>ToString</name></member>
      <member refid="classarrow_1_1_array_1a635a694fbadb0bfa731beb97df2ef7ea" prot="public" virt="non-virtual"><scope>arrow::Array</scope><name>type</name></member>
      <member refid="classarrow_1_1_array_1a155d9d827415438f976e3cb31e0a55f6" prot="public" virt="non-virtual"><scope>arrow::Array</scope><name>type_id</name></member>
      <member refid="classarrow_1_1_array_1ad62bad8fde2bb8fbd5a52df3fa4bd56c" prot="public" virt="non-virtual"><scope>arrow::Array</scope><name>Validate</name></member>
      <member refid="classarrow_1_1_array_1a793321da66d2d1839e6c89a956e4cb07" prot="public" virt="non-virtual"><scope>arrow::Array</scope><name>ValidateFull</name></member>
      <member refid="classarrow_1_1_array_1aa2b5f248c09a41c089e1fbc911beecb0" prot="public" virt="non-virtual"><scope>arrow::Array</scope><name>View</name></member>
      <member refid="classarrow_1_1_array_1ad015904c8c6e5e2513c791fb577f2679" prot="public" virt="non-virtual"><scope>arrow::Array</scope><name>View</name></member>
      <member refid="classarrow_1_1_array_1addd582eec9488bca2b3379b71fef6ce5" prot="public" virt="virtual"><scope>arrow::Array</scope><name>~Array</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
