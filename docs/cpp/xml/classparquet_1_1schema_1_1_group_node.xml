<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classparquet_1_1schema_1_1_group_node" kind="class" language="C++" prot="public">
    <compoundname>parquet::schema::GroupNode</compoundname>
    <basecompoundref refid="classparquet_1_1schema_1_1_node" prot="public" virt="non-virtual">parquet::schema::Node</basecompoundref>
    <includes refid="schema_8h" local="no">parquet/schema.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classparquet_1_1schema_1_1_group_node_1a20e4312fabd6468a526c6398d05773ce" prot="private" static="no" mutable="no">
        <type><ref refid="namespaceparquet_1_1schema_1a8289c0ec21718b7fa853359974ffb298" kindref="member">NodeVector</ref></type>
        <definition>NodeVector parquet::schema::GroupNode::fields_</definition>
        <argsstring></argsstring>
        <name>fields_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="319" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="319" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classparquet_1_1schema_1_1_group_node_1a2003351b4cac93da627675f9479c2e77" prot="private" static="no" mutable="no">
        <type>std::unordered_multimap&lt; std::string, int &gt;</type>
        <definition>std::unordered_multimap&lt;std::string, int&gt; parquet::schema::GroupNode::field_name_to_idx_</definition>
        <argsstring></argsstring>
        <name>field_name_to_idx_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="323" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="323" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classparquet_1_1schema_1_1_group_node_1a093020a68e6f9ea53dd8644d219ab6c6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::unique_ptr&lt; <ref refid="classparquet_1_1schema_1_1_node" kindref="compound">Node</ref> &gt;</type>
        <definition>static std::unique_ptr&lt;Node&gt; parquet::schema::GroupNode::FromParquet</definition>
        <argsstring>(const void *opaque_element, NodeVector fields={}, int field_id=-1)</argsstring>
        <name>FromParquet</name>
        <param>
          <type>const void *</type>
          <declname>opaque_element</declname>
        </param>
        <param>
          <type><ref refid="namespaceparquet_1_1schema_1a8289c0ec21718b7fa853359974ffb298" kindref="member">NodeVector</ref></type>
          <declname>fields</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>int</type>
          <declname>field_id</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="270" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_group_node_1a68f17d0fe35797e96e837f4c795189fe" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceparquet_1_1schema_1a7fe5ee27b1dd5f12098ce3f3e6200b9e" kindref="member">NodePtr</ref></type>
        <definition>static NodePtr parquet::schema::GroupNode::Make</definition>
        <argsstring>(const std::string &amp;name, Repetition::type repetition, const NodeVector &amp;fields, ConvertedType::type converted_type=ConvertedType::NONE, int field_id=-1)</argsstring>
        <name>Make</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structparquet_1_1_repetition_1a7e942dfcd49240c465cdf3e1dc011af4" kindref="member">Repetition::type</ref></type>
          <declname>repetition</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceparquet_1_1schema_1a8289c0ec21718b7fa853359974ffb298" kindref="member">NodeVector</ref> &amp;</type>
          <declname>fields</declname>
        </param>
        <param>
          <type><ref refid="structparquet_1_1_converted_type_1a4c93674b47bffc29042acda48281e198" kindref="member">ConvertedType::type</ref></type>
          <declname>converted_type</declname>
          <defval><ref refid="structparquet_1_1_converted_type_1a4c93674b47bffc29042acda48281e198adeb8756102a33f6619ada0dafcdf4167" kindref="member">ConvertedType::NONE</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>field_id</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="274" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="274" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_group_node_1a9f6d40f0ec65a381e77ec8e49bae9541" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceparquet_1_1schema_1a7fe5ee27b1dd5f12098ce3f3e6200b9e" kindref="member">NodePtr</ref></type>
        <definition>static NodePtr parquet::schema::GroupNode::Make</definition>
        <argsstring>(const std::string &amp;name, Repetition::type repetition, const NodeVector &amp;fields, std::shared_ptr&lt; const LogicalType &gt; logical_type, int field_id=-1)</argsstring>
        <name>Make</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structparquet_1_1_repetition_1a7e942dfcd49240c465cdf3e1dc011af4" kindref="member">Repetition::type</ref></type>
          <declname>repetition</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceparquet_1_1schema_1a8289c0ec21718b7fa853359974ffb298" kindref="member">NodeVector</ref> &amp;</type>
          <declname>fields</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; const <ref refid="classparquet_1_1_logical_type" kindref="compound">LogicalType</ref> &gt;</type>
          <declname>logical_type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>field_id</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="283" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="283" bodyend="288"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classparquet_1_1schema_1_1_group_node_1ad67f06fd3370febe80b41e2d4a96d7e4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool parquet::schema::GroupNode::Equals</definition>
        <argsstring>(const Node *other) const override</argsstring>
        <name>Equals</name>
        <reimplements refid="classparquet_1_1schema_1_1_node_1a1b045de58dcd6db5a9ccebfa3f182832">Equals</reimplements>
        <param>
          <type>const <ref refid="classparquet_1_1schema_1_1_node" kindref="compound">Node</ref> *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="290" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_group_node_1a34be6c9218e1a9296da01f03c3fd05d2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespaceparquet_1_1schema_1a7fe5ee27b1dd5f12098ce3f3e6200b9e" kindref="member">NodePtr</ref></type>
        <definition>NodePtr parquet::schema::GroupNode::field</definition>
        <argsstring>(int i) const</argsstring>
        <name>field</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="292" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="292" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_group_node_1a693fb1324170c4407185c79559e1c53c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int parquet::schema::GroupNode::FieldIndex</definition>
        <argsstring>(const std::string &amp;name) const</argsstring>
        <name>FieldIndex</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="296" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_group_node_1a90adf40d7d437617f5a8279c502a10f7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int parquet::schema::GroupNode::FieldIndex</definition>
        <argsstring>(const Node &amp;node) const</argsstring>
        <name>FieldIndex</name>
        <param>
          <type>const <ref refid="classparquet_1_1schema_1_1_node" kindref="compound">Node</ref> &amp;</type>
          <declname>node</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="298" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_group_node_1a19e216f9fb5511237a24781ad0dafdd5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int parquet::schema::GroupNode::field_count</definition>
        <argsstring>() const</argsstring>
        <name>field_count</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="300" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="300" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_group_node_1a49eb54279aab4615345404aaeaeec6cc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void parquet::schema::GroupNode::ToParquet</definition>
        <argsstring>(void *element) const override</argsstring>
        <name>ToParquet</name>
        <reimplements refid="classparquet_1_1schema_1_1_node_1a7876879459998b3d197d1f3d9208b573">ToParquet</reimplements>
        <param>
          <type>void *</type>
          <declname>element</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="302" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_group_node_1a7111d90d737f09657e4edc90ce09efff" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void parquet::schema::GroupNode::Visit</definition>
        <argsstring>(Visitor *visitor) override</argsstring>
        <name>Visit</name>
        <reimplements refid="classparquet_1_1schema_1_1_node_1aa5737bec0a433a471277d242e82ee4e4">Visit</reimplements>
        <param>
          <type><ref refid="classparquet_1_1schema_1_1_node_1_1_visitor" kindref="compound">Visitor</ref> *</type>
          <declname>visitor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="303" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_group_node_1ad7ff56839788061e2561bd7ec1fab6b0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void parquet::schema::GroupNode::VisitConst</definition>
        <argsstring>(ConstVisitor *visitor) const override</argsstring>
        <name>VisitConst</name>
        <reimplements refid="classparquet_1_1schema_1_1_node_1a3a83130adcdb8f7976a9ddc061c4e117">VisitConst</reimplements>
        <param>
          <type><ref refid="classparquet_1_1schema_1_1_node_1_1_const_visitor" kindref="compound">ConstVisitor</ref> *</type>
          <declname>visitor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="304" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_group_node_1a8102863ab4bc9304f1135e992275361e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool parquet::schema::GroupNode::HasRepeatedFields</definition>
        <argsstring>() const</argsstring>
        <name>HasRepeatedFields</name>
        <briefdescription>
<para>Return true if this node or any child node has REPEATED repetition type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="308" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classparquet_1_1schema_1_1_group_node_1a31e8706d759efc1237393e3016eb341e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>parquet::schema::GroupNode::GroupNode</definition>
        <argsstring>(const std::string &amp;name, Repetition::type repetition, const NodeVector &amp;fields, ConvertedType::type converted_type=ConvertedType::NONE, int field_id=-1)</argsstring>
        <name>GroupNode</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structparquet_1_1_repetition_1a7e942dfcd49240c465cdf3e1dc011af4" kindref="member">Repetition::type</ref></type>
          <declname>repetition</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceparquet_1_1schema_1a8289c0ec21718b7fa853359974ffb298" kindref="member">NodeVector</ref> &amp;</type>
          <declname>fields</declname>
        </param>
        <param>
          <type><ref refid="structparquet_1_1_converted_type_1a4c93674b47bffc29042acda48281e198" kindref="member">ConvertedType::type</ref></type>
          <declname>converted_type</declname>
          <defval><ref refid="structparquet_1_1_converted_type_1a4c93674b47bffc29042acda48281e198adeb8756102a33f6619ada0dafcdf4167" kindref="member">ConvertedType::NONE</ref></defval>
        </param>
        <param>
          <type>int</type>
          <declname>field_id</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="311" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_group_node_1ab748c1cf5ca321c059298b001436bb90" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>parquet::schema::GroupNode::GroupNode</definition>
        <argsstring>(const std::string &amp;name, Repetition::type repetition, const NodeVector &amp;fields, std::shared_ptr&lt; const LogicalType &gt; logical_type, int field_id=-1)</argsstring>
        <name>GroupNode</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structparquet_1_1_repetition_1a7e942dfcd49240c465cdf3e1dc011af4" kindref="member">Repetition::type</ref></type>
          <declname>repetition</declname>
        </param>
        <param>
          <type>const <ref refid="namespaceparquet_1_1schema_1a8289c0ec21718b7fa853359974ffb298" kindref="member">NodeVector</ref> &amp;</type>
          <declname>fields</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; const <ref refid="classparquet_1_1_logical_type" kindref="compound">LogicalType</ref> &gt;</type>
          <declname>logical_type</declname>
        </param>
        <param>
          <type>int</type>
          <declname>field_id</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="315" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_group_node_1aca84825225ca15f013c1af1c452e6310" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool parquet::schema::GroupNode::EqualsInternal</definition>
        <argsstring>(const GroupNode *other) const</argsstring>
        <name>EqualsInternal</name>
        <param>
          <type>const <ref refid="classparquet_1_1schema_1_1_group_node" kindref="compound">GroupNode</ref> *</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="320" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_group_node_1a5384f4f7a74288d018e7966bb0dddf93" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>parquet::schema::GroupNode::FRIEND_TEST</definition>
        <argsstring>(TestGroupNode, Attrs)</argsstring>
        <name>FRIEND_TEST</name>
        <param>
          <type>TestGroupNode</type>
        </param>
        <param>
          <type>Attrs</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="325" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_group_node_1a0108ade4eaf2d2d7380c04c7f4e0181b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>parquet::schema::GroupNode::FRIEND_TEST</definition>
        <argsstring>(TestGroupNode, Equals)</argsstring>
        <name>FRIEND_TEST</name>
        <param>
          <type>TestGroupNode</type>
        </param>
        <param>
          <type><ref refid="classparquet_1_1schema_1_1_group_node_1ad67f06fd3370febe80b41e2d4a96d7e4" kindref="member">Equals</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="326" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_group_node_1a446810fab51b976f5a020e169c096853" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>parquet::schema::GroupNode::FRIEND_TEST</definition>
        <argsstring>(TestGroupNode, FieldIndex)</argsstring>
        <name>FRIEND_TEST</name>
        <param>
          <type>TestGroupNode</type>
        </param>
        <param>
          <type><ref refid="classparquet_1_1schema_1_1_group_node_1a693fb1324170c4407185c79559e1c53c" kindref="member">FieldIndex</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="327" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1schema_1_1_group_node_1a260ded975a6616c152e196f3630a2836" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>parquet::schema::GroupNode::FRIEND_TEST</definition>
        <argsstring>(TestGroupNode, FieldIndexDuplicateName)</argsstring>
        <name>FRIEND_TEST</name>
        <param>
          <type>TestGroupNode</type>
        </param>
        <param>
          <type>FieldIndexDuplicateName</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/schema.h" line="328" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2118">
        <label>parquet::schema::GroupNode</label>
        <link refid="classparquet_1_1schema_1_1_group_node"/>
        <childnode refid="2119" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2119">
        <label>parquet::schema::Node</label>
        <link refid="classparquet_1_1schema_1_1_node"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2120">
        <label>parquet::schema::GroupNode</label>
        <link refid="classparquet_1_1schema_1_1_group_node"/>
        <childnode refid="2121" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2121">
        <label>parquet::schema::Node</label>
        <link refid="classparquet_1_1schema_1_1_node"/>
        <childnode refid="2121" relation="usage">
          <edgelabel>parent_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/parquet/schema.h" line="267" column="1" bodyfile="/arrow/cpp/src/parquet/schema.h" bodystart="267" bodyend="329"/>
    <listofallmembers>
      <member refid="classparquet_1_1schema_1_1_node_1aa2175d7164787a0f1bd8d93233bc5934" prot="public" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>converted_type</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1aea0bd0c888704ff9c0fa832124f8e5ad" prot="protected" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>converted_type_</name></member>
      <member refid="classparquet_1_1schema_1_1_group_node_1ad67f06fd3370febe80b41e2d4a96d7e4" prot="public" virt="virtual"><scope>parquet::schema::GroupNode</scope><name>Equals</name></member>
      <member refid="classparquet_1_1schema_1_1_group_node_1aca84825225ca15f013c1af1c452e6310" prot="private" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>EqualsInternal</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a8fe067fc9c2ded42ddfb589f4d40cf08" prot="protected" virt="non-virtual" ambiguityscope="parquet::schema::Node::"><scope>parquet::schema::GroupNode</scope><name>EqualsInternal</name></member>
      <member refid="classparquet_1_1schema_1_1_group_node_1a34be6c9218e1a9296da01f03c3fd05d2" prot="public" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>field</name></member>
      <member refid="classparquet_1_1schema_1_1_group_node_1a19e216f9fb5511237a24781ad0dafdd5" prot="public" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>field_count</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1aa6442e18cc800110e673e13819c85b53" prot="public" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>field_id</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a97de05e7887acfe99dd2891e904e61f6" prot="protected" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>field_id_</name></member>
      <member refid="classparquet_1_1schema_1_1_group_node_1a2003351b4cac93da627675f9479c2e77" prot="private" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>field_name_to_idx_</name></member>
      <member refid="classparquet_1_1schema_1_1_group_node_1a693fb1324170c4407185c79559e1c53c" prot="public" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>FieldIndex</name></member>
      <member refid="classparquet_1_1schema_1_1_group_node_1a90adf40d7d437617f5a8279c502a10f7" prot="public" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>FieldIndex</name></member>
      <member refid="classparquet_1_1schema_1_1_group_node_1a20e4312fabd6468a526c6398d05773ce" prot="private" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>fields_</name></member>
      <member refid="classparquet_1_1schema_1_1_group_node_1a5384f4f7a74288d018e7966bb0dddf93" prot="private" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>FRIEND_TEST</name></member>
      <member refid="classparquet_1_1schema_1_1_group_node_1a0108ade4eaf2d2d7380c04c7f4e0181b" prot="private" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>FRIEND_TEST</name></member>
      <member refid="classparquet_1_1schema_1_1_group_node_1a446810fab51b976f5a020e169c096853" prot="private" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>FRIEND_TEST</name></member>
      <member refid="classparquet_1_1schema_1_1_group_node_1a260ded975a6616c152e196f3630a2836" prot="private" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>FRIEND_TEST</name></member>
      <member refid="classparquet_1_1schema_1_1_group_node_1a093020a68e6f9ea53dd8644d219ab6c6" prot="public" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>FromParquet</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1aab450ce50c75c565dde2d550311c5020af049b3443056c6e12e06dd41630bc0db" prot="public" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>GROUP</name></member>
      <member refid="classparquet_1_1schema_1_1_group_node_1a31e8706d759efc1237393e3016eb341e" prot="private" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>GroupNode</name></member>
      <member refid="classparquet_1_1schema_1_1_group_node_1ab748c1cf5ca321c059298b001436bb90" prot="private" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>GroupNode</name></member>
      <member refid="classparquet_1_1schema_1_1_group_node_1a8102863ab4bc9304f1135e992275361e" prot="public" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>HasRepeatedFields</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a4876454789f5bb9c7d9b5d2cf0619850" prot="public" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>is_group</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a0b3015fc760df30425b643541f34051d" prot="public" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>is_optional</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a16e05d4314f205ddde0f06a8c98c30a5" prot="public" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>is_primitive</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1afa2f550a4fe582d22eb5850082722d92" prot="public" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>is_repeated</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1ac43e59ae65df7e224e2ba5308e6620c2" prot="public" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>is_required</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a7906213a612cdd2ba7ec9695467534ec" prot="public" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>logical_type</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1ad26ec60df1d8805b768d6fb742c8c122" prot="protected" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>logical_type_</name></member>
      <member refid="classparquet_1_1schema_1_1_group_node_1a68f17d0fe35797e96e837f4c795189fe" prot="public" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>Make</name></member>
      <member refid="classparquet_1_1schema_1_1_group_node_1a9f6d40f0ec65a381e77ec8e49bae9541" prot="public" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>Make</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1ac84aeaa2ec13ffc81f5756f2f39911bd" prot="public" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>name</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a7e2ce16cdf24f982f7d87f45ed8be209" prot="protected" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>name_</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a38014237d7d0ac0ccfa170568a1e7bd6" prot="protected" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>Node</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1af53a3215e176399423ea5c2ce010ade0" prot="protected" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>Node</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a094fa7e3ff9b5a8ecd07e2d9fd4d2f22" prot="public" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>node_type</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a6a6a7d17ebacfd44a495dd6e6dcf388f" prot="public" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>parent</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a04e7addaf1850c92e6bc49e05b08d1ab" prot="protected" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>parent_</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1ab255f7cc073220cf4718eee621b6f992" prot="public" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>PARQUET_DEPRECATED</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a0bb5393f695b41088adfd84cda835e78" prot="public" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>path</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1aab450ce50c75c565dde2d550311c5020a937da11d2024ff231f447c3053e74d88" prot="public" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>PRIMITIVE</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1ac1541fa1f8d0a6db7bc12ba3855e0373" prot="public" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>repetition</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a759b242d4a25fd8f4198c5f27a2f7733" prot="protected" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>repetition_</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a73bd2add8d170bcfefd8c667b47780c4" prot="protected" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>SetParent</name></member>
      <member refid="classparquet_1_1schema_1_1_group_node_1a49eb54279aab4615345404aaeaeec6cc" prot="public" virt="virtual"><scope>parquet::schema::GroupNode</scope><name>ToParquet</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1aab450ce50c75c565dde2d550311c5020" prot="public" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>type</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a77bbfa65c2f78dfa5fe9410376da9ec6" prot="protected" virt="non-virtual"><scope>parquet::schema::GroupNode</scope><name>type_</name></member>
      <member refid="classparquet_1_1schema_1_1_group_node_1a7111d90d737f09657e4edc90ce09efff" prot="public" virt="virtual"><scope>parquet::schema::GroupNode</scope><name>Visit</name></member>
      <member refid="classparquet_1_1schema_1_1_group_node_1ad7ff56839788061e2561bd7ec1fab6b0" prot="public" virt="virtual"><scope>parquet::schema::GroupNode</scope><name>VisitConst</name></member>
      <member refid="classparquet_1_1schema_1_1_node_1a5aa34e85de9d924de494185b4c954e00" prot="public" virt="virtual"><scope>parquet::schema::GroupNode</scope><name>~Node</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
