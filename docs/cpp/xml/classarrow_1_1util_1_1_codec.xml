<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1util_1_1_codec" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>arrow::util::Codec</compoundname>
    <includes refid="compression_8h" local="no">arrow/util/compression.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1util_1_1_codec_1ad21f62af5f439db343f57d63196d8055" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual arrow::util::Codec::~Codec</definition>
        <argsstring>()</argsstring>
        <name>~Codec</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/compression.h" line="120" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1util_1_1_codec_1ab7dbd507ed9e2680bdbf501796fa6b85" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; int64_t &gt;</type>
        <definition>virtual Result&lt;int64_t&gt; arrow::util::Codec::Decompress</definition>
        <argsstring>(int64_t input_len, const uint8_t *input, int64_t output_buffer_len, uint8_t *output_buffer)=0</argsstring>
        <name>Decompress</name>
        <param>
          <type>int64_t</type>
          <declname>input_len</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>output_buffer_len</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>output_buffer</declname>
        </param>
        <briefdescription>
<para>One-shot decompression function. </para>        </briefdescription>
        <detaileddescription>
<para>output_buffer_len must be correct and therefore be obtained in advance. The actual decompressed length is returned.</para><para><simplesect kind="note"><para>One-shot decompression is not always compatible with streaming compression. Depending on the codec (e.g. LZ4), different formats may be used. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/compression.h" line="147" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1util_1_1_codec_1abff0ae540da681b1b3aef3b6203875ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; int64_t &gt;</type>
        <definition>virtual Result&lt;int64_t&gt; arrow::util::Codec::Compress</definition>
        <argsstring>(int64_t input_len, const uint8_t *input, int64_t output_buffer_len, uint8_t *output_buffer)=0</argsstring>
        <name>Compress</name>
        <param>
          <type>int64_t</type>
          <declname>input_len</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>input</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>output_buffer_len</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>output_buffer</declname>
        </param>
        <briefdescription>
<para>One-shot compression function. </para>        </briefdescription>
        <detaileddescription>
<para>output_buffer_len must first have been computed using <ref refid="classarrow_1_1util_1_1_codec_1a560c8646856a63d6bf1313e4d867b30f" kindref="member">MaxCompressedLen()</ref>. The actual compressed length is returned.</para><para><simplesect kind="note"><para>One-shot compression is not always compatible with streaming decompression. Depending on the codec (e.g. LZ4), different formats may be used. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/compression.h" line="159" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1util_1_1_codec_1a560c8646856a63d6bf1313e4d867b30f" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>int64_t</type>
        <definition>virtual int64_t arrow::util::Codec::MaxCompressedLen</definition>
        <argsstring>(int64_t input_len, const uint8_t *input)=0</argsstring>
        <name>MaxCompressedLen</name>
        <param>
          <type>int64_t</type>
          <declname>input_len</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>input</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/compression.h" line="162" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1util_1_1_codec_1a41bdf6e8ba2ca61cb682dcec598524f5" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1util_1_1_compressor" kindref="compound">Compressor</ref> &gt; &gt;</type>
        <definition>virtual Result&lt;std::shared_ptr&lt;Compressor&gt; &gt; arrow::util::Codec::MakeCompressor</definition>
        <argsstring>()=0</argsstring>
        <name>MakeCompressor</name>
        <briefdescription>
<para>Create a streaming compressor instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/compression.h" line="165" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1util_1_1_codec_1afc63a883ad20293a56138f03207627cb" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1util_1_1_decompressor" kindref="compound">Decompressor</ref> &gt; &gt;</type>
        <definition>virtual Result&lt;std::shared_ptr&lt;Decompressor&gt; &gt; arrow::util::Codec::MakeDecompressor</definition>
        <argsstring>()=0</argsstring>
        <name>MakeDecompressor</name>
        <briefdescription>
<para>Create a streaming compressor instance. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/compression.h" line="168" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1util_1_1_codec_1a0d4c938e992382724c8ace29cd486490" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>const char *</type>
        <definition>virtual const char* arrow::util::Codec::name</definition>
        <argsstring>() const =0</argsstring>
        <name>name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/compression.h" line="170" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1util_1_1_codec_1a456022d9eaf814cfe95c1c1f83cce895" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>static int arrow::util::Codec::UseDefaultCompressionLevel</definition>
        <argsstring>()</argsstring>
        <name>UseDefaultCompressionLevel</name>
        <briefdescription>
<para>Return special value to indicate that a codec implementation should use its default compression level. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/compression.h" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1util_1_1_codec_1ac2312299ec1ae21e71700a039636c587" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>static std::string arrow::util::Codec::GetCodecAsString</definition>
        <argsstring>(Compression::type t)</argsstring>
        <name>GetCodecAsString</name>
        <param>
          <type><ref refid="structarrow_1_1_compression_1a8abcec0357242c077a2905d645f2163f" kindref="member">Compression::type</ref></type>
          <declname>t</declname>
        </param>
        <briefdescription>
<para>Return a string name for compression type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/compression.h" line="127" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1util_1_1_codec_1a7964eedc005cb6c8bd2e54fcca8e02d2" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; <ref refid="structarrow_1_1_compression_1a8abcec0357242c077a2905d645f2163f" kindref="member">Compression::type</ref> &gt;</type>
        <definition>static Result&lt;Compression::type&gt; arrow::util::Codec::GetCompressionType</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>GetCompressionType</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Return compression type for name (all upper case) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/compression.h" line="130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1util_1_1_codec_1a0e3313f65f079569d3e6fdf53d3e9afc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::unique_ptr&lt; <ref refid="classarrow_1_1util_1_1_codec" kindref="compound">Codec</ref> &gt; &gt;</type>
        <definition>static Result&lt;std::unique_ptr&lt;Codec&gt; &gt; arrow::util::Codec::Create</definition>
        <argsstring>(Compression::type codec, int compression_level=kUseDefaultCompressionLevel)</argsstring>
        <name>Create</name>
        <param>
          <type><ref refid="structarrow_1_1_compression_1a8abcec0357242c077a2905d645f2163f" kindref="member">Compression::type</ref></type>
          <declname>codec</declname>
        </param>
        <param>
          <type>int</type>
          <declname>compression_level</declname>
          <defval><ref refid="namespacearrow_1_1util_1ac1fbe4367a2f5b84c3d760d42c4f7c84" kindref="member">kUseDefaultCompressionLevel</ref></defval>
        </param>
        <briefdescription>
<para>Create a codec for the given compression algorithm. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/compression.h" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1util_1_1_codec_1a5d8fe3845a35fb7de7879d04250b48cc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool arrow::util::Codec::IsAvailable</definition>
        <argsstring>(Compression::type codec)</argsstring>
        <name>IsAvailable</name>
        <param>
          <type><ref refid="structarrow_1_1_compression_1a8abcec0357242c077a2905d645f2163f" kindref="member">Compression::type</ref></type>
          <declname>codec</declname>
        </param>
        <briefdescription>
<para>Return true if support for indicated codec has been enabled. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/compression.h" line="137" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classarrow_1_1util_1_1_codec_1a2fe053c7a7cfc7778fba942359984158" prot="private" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>virtual Status arrow::util::Codec::Init</definition>
        <argsstring>()</argsstring>
        <name>Init</name>
        <briefdescription>
<para>Initializes the codec&apos;s resources. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/util/compression.h" line="174" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="structarrow_1_1_compression" kindref="compound">Compression</ref> codec. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/arrow/util/compression.h" line="118" column="1" bodyfile="/arrow/cpp/src/arrow/util/compression.h" bodystart="118" bodyend="175"/>
    <listofallmembers>
      <member refid="classarrow_1_1util_1_1_codec_1abff0ae540da681b1b3aef3b6203875ea" prot="public" virt="pure-virtual"><scope>arrow::util::Codec</scope><name>Compress</name></member>
      <member refid="classarrow_1_1util_1_1_codec_1a0e3313f65f079569d3e6fdf53d3e9afc" prot="public" virt="non-virtual"><scope>arrow::util::Codec</scope><name>Create</name></member>
      <member refid="classarrow_1_1util_1_1_codec_1ab7dbd507ed9e2680bdbf501796fa6b85" prot="public" virt="pure-virtual"><scope>arrow::util::Codec</scope><name>Decompress</name></member>
      <member refid="classarrow_1_1util_1_1_codec_1ac2312299ec1ae21e71700a039636c587" prot="public" virt="non-virtual"><scope>arrow::util::Codec</scope><name>GetCodecAsString</name></member>
      <member refid="classarrow_1_1util_1_1_codec_1a7964eedc005cb6c8bd2e54fcca8e02d2" prot="public" virt="non-virtual"><scope>arrow::util::Codec</scope><name>GetCompressionType</name></member>
      <member refid="classarrow_1_1util_1_1_codec_1a2fe053c7a7cfc7778fba942359984158" prot="private" virt="virtual"><scope>arrow::util::Codec</scope><name>Init</name></member>
      <member refid="classarrow_1_1util_1_1_codec_1a5d8fe3845a35fb7de7879d04250b48cc" prot="public" virt="non-virtual"><scope>arrow::util::Codec</scope><name>IsAvailable</name></member>
      <member refid="classarrow_1_1util_1_1_codec_1a41bdf6e8ba2ca61cb682dcec598524f5" prot="public" virt="pure-virtual"><scope>arrow::util::Codec</scope><name>MakeCompressor</name></member>
      <member refid="classarrow_1_1util_1_1_codec_1afc63a883ad20293a56138f03207627cb" prot="public" virt="pure-virtual"><scope>arrow::util::Codec</scope><name>MakeDecompressor</name></member>
      <member refid="classarrow_1_1util_1_1_codec_1a560c8646856a63d6bf1313e4d867b30f" prot="public" virt="pure-virtual"><scope>arrow::util::Codec</scope><name>MaxCompressedLen</name></member>
      <member refid="classarrow_1_1util_1_1_codec_1a0d4c938e992382724c8ace29cd486490" prot="public" virt="pure-virtual"><scope>arrow::util::Codec</scope><name>name</name></member>
      <member refid="classarrow_1_1util_1_1_codec_1a456022d9eaf814cfe95c1c1f83cce895" prot="public" virt="non-virtual"><scope>arrow::util::Codec</scope><name>UseDefaultCompressionLevel</name></member>
      <member refid="classarrow_1_1util_1_1_codec_1ad21f62af5f439db343f57d63196d8055" prot="public" virt="virtual"><scope>arrow::util::Codec</scope><name>~Codec</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
