<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1compute_1_1_unary_kernel" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>arrow::compute::UnaryKernel</compoundname>
    <basecompoundref refid="classarrow_1_1compute_1_1_op_kernel" prot="public" virt="non-virtual">arrow::compute::OpKernel</basecompoundref>
    <derivedcompoundref refid="classarrow_1_1compute_1_1_aggregate_unary_kernel" prot="public" virt="non-virtual">arrow::compute::AggregateUnaryKernel</derivedcompoundref>
    <derivedcompoundref refid="classarrow_1_1compute_1_1detail_1_1_primitive_allocating_unary_kernel" prot="public" virt="non-virtual">arrow::compute::detail::PrimitiveAllocatingUnaryKernel</derivedcompoundref>
    <includes refid="kernel_8h" local="no">arrow/compute/kernel.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1compute_1_1_unary_kernel_1af48ca34480cf7b1b2817f06db33dccd7" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>virtual Status arrow::compute::UnaryKernel::Call</definition>
        <argsstring>(FunctionContext *ctx, const Datum &amp;input, Datum *out)=0</argsstring>
        <name>Call</name>
        <reimplementedby refid="classarrow_1_1compute_1_1_aggregate_unary_kernel_1ac3c2944722b872e9f852bca0d6b06966">Call</reimplementedby>
        <param>
          <type><ref refid="classarrow_1_1compute_1_1_function_context" kindref="compound">FunctionContext</ref> *</type>
          <declname>ctx</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1compute_1_1_datum" kindref="compound">Datum</ref> &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type><ref refid="structarrow_1_1compute_1_1_datum" kindref="compound">Datum</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Executes the kernel. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ctx</parametername>
</parameternamelist>
<parameterdescription>
<para>The function context for the kernel </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">input</parametername>
</parameternamelist>
<parameterdescription>
<para>The kernel input data </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>The output of the function. Each implementation of this function might assume different things about the existing contents of out (e.g. which buffers are preallocated). In the future it is expected that there will be a more generic mechanism for understanding the necessary contracts. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="278" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>An array-valued function of a single input argument. </para>    </briefdescription>
    <detaileddescription>
<para>Note to implementors: Try to avoid making kernels that allocate memory if the output size is a deterministic function of the Input <ref refid="structarrow_1_1compute_1_1_datum" kindref="compound">Datum</ref>&apos;s metadata. Instead separate the logic of the kernel and allocations necessary into two different kernels. Some reusable kernels that allocate buffers and delegate computation to another kernel are available in util-internal.h. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="5043">
        <label>arrow::compute::OpKernel</label>
        <link refid="classarrow_1_1compute_1_1_op_kernel"/>
      </node>
      <node id="5044">
        <label>arrow::compute::AggregateUnaryKernel</label>
        <link refid="classarrow_1_1compute_1_1_aggregate_unary_kernel"/>
        <childnode refid="5042" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5042">
        <label>arrow::compute::UnaryKernel</label>
        <link refid="classarrow_1_1compute_1_1_unary_kernel"/>
        <childnode refid="5043" relation="public-inheritance">
        </childnode>
      </node>
      <node id="5045">
        <label>arrow::compute::detail::PrimitiveAllocatingUnaryKernel</label>
        <childnode refid="5042" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="5047">
        <label>arrow::compute::OpKernel</label>
        <link refid="classarrow_1_1compute_1_1_op_kernel"/>
      </node>
      <node id="5046">
        <label>arrow::compute::UnaryKernel</label>
        <link refid="classarrow_1_1compute_1_1_unary_kernel"/>
        <childnode refid="5047" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="267" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="267" bodyend="279"/>
    <listofallmembers>
      <member refid="classarrow_1_1compute_1_1_unary_kernel_1af48ca34480cf7b1b2817f06db33dccd7" prot="public" virt="pure-virtual"><scope>arrow::compute::UnaryKernel</scope><name>Call</name></member>
      <member refid="classarrow_1_1compute_1_1_op_kernel_1a7c5f16b7acdba73640c9131e2cd04270" prot="public" virt="pure-virtual"><scope>arrow::compute::UnaryKernel</scope><name>out_type</name></member>
      <member refid="classarrow_1_1compute_1_1_op_kernel_1a640d7e2c51722436ed428013dabb63d3" prot="public" virt="virtual"><scope>arrow::compute::UnaryKernel</scope><name>~OpKernel</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
