<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="visitor__inline_8h" kind="file" language="C++">
    <compoundname>visitor_inline.h</compoundname>
    <includes local="no">utility</includes>
    <includes refid="array_8h" local="yes">arrow/array.h</includes>
    <includes refid="extension__type_8h" local="yes">arrow/extension_type.h</includes>
    <includes refid="scalar_8h" local="yes">arrow/scalar.h</includes>
    <includes refid="status_8h" local="yes">arrow/status.h</includes>
    <includes refid="type_8h" local="yes">arrow/type.h</includes>
    <includes refid="bit__util_8h" local="yes">arrow/util/bit_util.h</includes>
    <includes refid="checked__cast_8h" local="yes">arrow/util/checked_cast.h</includes>
    <includes refid="functional_8h" local="yes">arrow/util/functional.h</includes>
    <includes refid="optional_8h" local="yes">arrow/util/optional.h</includes>
    <includes refid="string__view_8h" local="yes">arrow/util/string_view.h</includes>
    <includedby refid="dict__internal_8h" local="yes">/arrow/cpp/src/arrow/array/dict_internal.h</includedby>
    <includedby refid="take__internal_8h" local="yes">/arrow/cpp/src/arrow/compute/kernels/take_internal.h</includedby>
    <incdepgraph>
      <node id="14578">
        <label>atomic</label>
      </node>
      <node id="14594">
        <label>arrow/util/compare.h</label>
        <link refid="util_2compare_8h"/>
        <childnode refid="14581" relation="include">
        </childnode>
        <childnode refid="14583" relation="include">
        </childnode>
        <childnode refid="14576" relation="include">
        </childnode>
        <childnode refid="14586" relation="include">
        </childnode>
      </node>
      <node id="14610">
        <label>limits</label>
      </node>
      <node id="14579">
        <label>cstdint</label>
      </node>
      <node id="14611">
        <label>arrow/buffer.h</label>
        <link refid="buffer_8h"/>
        <childnode refid="14579" relation="include">
        </childnode>
        <childnode refid="14593" relation="include">
        </childnode>
        <childnode refid="14581" relation="include">
        </childnode>
        <childnode refid="14582" relation="include">
        </childnode>
        <childnode refid="14583" relation="include">
        </childnode>
        <childnode refid="14576" relation="include">
        </childnode>
        <childnode refid="14584" relation="include">
        </childnode>
        <childnode refid="14612" relation="include">
        </childnode>
        <childnode refid="14613" relation="include">
        </childnode>
        <childnode refid="14592" relation="include">
        </childnode>
        <childnode refid="14597" relation="include">
        </childnode>
        <childnode refid="14586" relation="include">
        </childnode>
        <childnode refid="14614" relation="include">
        </childnode>
        <childnode refid="14587" relation="include">
        </childnode>
      </node>
      <node id="14604">
        <label>endian.h</label>
      </node>
      <node id="14592">
        <label>arrow/status.h</label>
        <link refid="status_8h"/>
        <childnode refid="14593" relation="include">
        </childnode>
        <childnode refid="14580" relation="include">
        </childnode>
        <childnode refid="14581" relation="include">
        </childnode>
        <childnode refid="14582" relation="include">
        </childnode>
        <childnode refid="14576" relation="include">
        </childnode>
        <childnode refid="14594" relation="include">
        </childnode>
        <childnode refid="14586" relation="include">
        </childnode>
        <childnode refid="14595" relation="include">
        </childnode>
        <childnode refid="14587" relation="include">
        </childnode>
      </node>
      <node id="14616">
        <label>arrow/util/functional.h</label>
        <link refid="functional_8h"/>
        <childnode refid="14617" relation="include">
        </childnode>
        <childnode refid="14583" relation="include">
        </childnode>
        <childnode refid="14586" relation="include">
        </childnode>
      </node>
      <node id="14624">
        <label>arrow/util/optional.h</label>
        <link refid="optional_8h"/>
        <childnode refid="14625" relation="include">
        </childnode>
      </node>
      <node id="14597">
        <label>arrow/type_fwd.h</label>
        <link refid="type__fwd_8h"/>
        <childnode refid="14581" relation="include">
        </childnode>
        <childnode refid="14582" relation="include">
        </childnode>
        <childnode refid="14584" relation="include">
        </childnode>
        <childnode refid="14586" relation="include">
        </childnode>
        <childnode refid="14587" relation="include">
        </childnode>
      </node>
      <node id="14609">
        <label>cmath</label>
      </node>
      <node id="14608">
        <label>cassert</label>
      </node>
      <node id="14598">
        <label>arrow/util/checked_cast.h</label>
        <link refid="checked__cast_8h"/>
        <childnode refid="14581" relation="include">
        </childnode>
        <childnode refid="14583" relation="include">
        </childnode>
      </node>
      <node id="14582">
        <label>string</label>
      </node>
      <node id="14615">
        <label>arrow/vendored/string_view.hpp</label>
      </node>
      <node id="14575">
        <label>/arrow/cpp/src/arrow/visitor_inline.h</label>
        <link refid="visitor__inline_8h"/>
        <childnode refid="14576" relation="include">
        </childnode>
        <childnode refid="14577" relation="include">
        </childnode>
        <childnode refid="14619" relation="include">
        </childnode>
        <childnode refid="14620" relation="include">
        </childnode>
        <childnode refid="14592" relation="include">
        </childnode>
        <childnode refid="14588" relation="include">
        </childnode>
        <childnode refid="14603" relation="include">
        </childnode>
        <childnode refid="14598" relation="include">
        </childnode>
        <childnode refid="14616" relation="include">
        </childnode>
        <childnode refid="14624" relation="include">
        </childnode>
        <childnode refid="14614" relation="include">
        </childnode>
      </node>
      <node id="14585">
        <label>arrow/compare.h</label>
        <link refid="compare_8h"/>
        <childnode refid="14579" relation="include">
        </childnode>
        <childnode refid="14580" relation="include">
        </childnode>
        <childnode refid="14586" relation="include">
        </childnode>
        <childnode refid="14587" relation="include">
        </childnode>
      </node>
      <node id="14599">
        <label>arrow/util/variant.h</label>
        <link refid="variant_8h"/>
        <childnode refid="14600" relation="include">
        </childnode>
      </node>
      <node id="14601">
        <label>arrow/visitor.h</label>
        <link refid="visitor_8h"/>
        <childnode refid="14592" relation="include">
        </childnode>
        <childnode refid="14597" relation="include">
        </childnode>
        <childnode refid="14587" relation="include">
        </childnode>
      </node>
      <node id="14596">
        <label>ostream</label>
      </node>
      <node id="14619">
        <label>arrow/extension_type.h</label>
        <link refid="extension__type_8h"/>
        <childnode refid="14581" relation="include">
        </childnode>
        <childnode refid="14582" relation="include">
        </childnode>
        <childnode refid="14577" relation="include">
        </childnode>
        <childnode refid="14588" relation="include">
        </childnode>
        <childnode refid="14587" relation="include">
        </childnode>
      </node>
      <node id="14587">
        <label>arrow/util/visibility.h</label>
        <link refid="arrow_2util_2visibility_8h"/>
      </node>
      <node id="14623">
        <label>arrow/util/logging.h</label>
        <link refid="arrow_2util_2logging_8h"/>
        <childnode refid="14581" relation="include">
        </childnode>
        <childnode refid="14596" relation="include">
        </childnode>
        <childnode refid="14582" relation="include">
        </childnode>
        <childnode refid="14586" relation="include">
        </childnode>
        <childnode refid="14587" relation="include">
        </childnode>
      </node>
      <node id="14612">
        <label>arrow/device.h</label>
        <link refid="device_8h"/>
        <childnode refid="14579" relation="include">
        </childnode>
        <childnode refid="14581" relation="include">
        </childnode>
        <childnode refid="14582" relation="include">
        </childnode>
        <childnode refid="14613" relation="include">
        </childnode>
        <childnode refid="14597" relation="include">
        </childnode>
        <childnode refid="14594" relation="include">
        </childnode>
        <childnode refid="14586" relation="include">
        </childnode>
        <childnode refid="14587" relation="include">
        </childnode>
      </node>
      <node id="14603">
        <label>arrow/util/bit_util.h</label>
        <link refid="bit__util_8h"/>
        <childnode refid="14604" relation="include">
        </childnode>
        <childnode refid="14605" relation="include">
        </childnode>
        <childnode refid="14606" relation="include">
        </childnode>
        <childnode refid="14607" relation="include">
        </childnode>
        <childnode refid="14608" relation="include">
        </childnode>
        <childnode refid="14609" relation="include">
        </childnode>
        <childnode refid="14579" relation="include">
        </childnode>
        <childnode refid="14593" relation="include">
        </childnode>
        <childnode refid="14610" relation="include">
        </childnode>
        <childnode refid="14581" relation="include">
        </childnode>
        <childnode refid="14582" relation="include">
        </childnode>
        <childnode refid="14583" relation="include">
        </childnode>
        <childnode refid="14576" relation="include">
        </childnode>
        <childnode refid="14584" relation="include">
        </childnode>
        <childnode refid="14611" relation="include">
        </childnode>
        <childnode refid="14590" relation="include">
        </childnode>
        <childnode refid="14594" relation="include">
        </childnode>
        <childnode refid="14616" relation="include">
        </childnode>
        <childnode refid="14586" relation="include">
        </childnode>
        <childnode refid="14595" relation="include">
        </childnode>
        <childnode refid="14614" relation="include">
        </childnode>
        <childnode refid="14618" relation="include">
        </childnode>
        <childnode refid="14587" relation="include">
        </childnode>
      </node>
      <node id="14607">
        <label>bitset</label>
      </node>
      <node id="14617">
        <label>tuple</label>
      </node>
      <node id="14584">
        <label>vector</label>
      </node>
      <node id="14591">
        <label>new</label>
      </node>
      <node id="14576">
        <label>utility</label>
      </node>
      <node id="14614">
        <label>arrow/util/string_view.h</label>
        <link refid="string__view_8h"/>
        <childnode refid="14579" relation="include">
        </childnode>
        <childnode refid="14582" relation="include">
        </childnode>
        <childnode refid="14615" relation="include">
        </childnode>
      </node>
      <node id="14606">
        <label>array</label>
      </node>
      <node id="14622">
        <label>arrow/util/basic_decimal.h</label>
        <link refid="basic__decimal_8h"/>
        <childnode refid="14606" relation="include">
        </childnode>
        <childnode refid="14579" relation="include">
        </childnode>
        <childnode refid="14610" relation="include">
        </childnode>
        <childnode refid="14582" relation="include">
        </childnode>
        <childnode refid="14583" relation="include">
        </childnode>
        <childnode refid="14586" relation="include">
        </childnode>
        <childnode refid="14618" relation="include">
        </childnode>
        <childnode refid="14587" relation="include">
        </childnode>
      </node>
      <node id="14602">
        <label>arrow/type_traits.h</label>
        <link refid="type__traits_8h"/>
        <childnode refid="14581" relation="include">
        </childnode>
        <childnode refid="14582" relation="include">
        </childnode>
        <childnode refid="14583" relation="include">
        </childnode>
        <childnode refid="14584" relation="include">
        </childnode>
        <childnode refid="14597" relation="include">
        </childnode>
        <childnode refid="14603" relation="include">
        </childnode>
      </node>
      <node id="14621">
        <label>arrow/util/decimal.h</label>
        <link refid="util_2decimal_8h"/>
        <childnode refid="14579" relation="include">
        </childnode>
        <childnode refid="14580" relation="include">
        </childnode>
        <childnode refid="14610" relation="include">
        </childnode>
        <childnode refid="14582" relation="include">
        </childnode>
        <childnode refid="14583" relation="include">
        </childnode>
        <childnode refid="14576" relation="include">
        </childnode>
        <childnode refid="14590" relation="include">
        </childnode>
        <childnode refid="14592" relation="include">
        </childnode>
        <childnode refid="14622" relation="include">
        </childnode>
        <childnode refid="14614" relation="include">
        </childnode>
      </node>
      <node id="14625">
        <label>arrow/vendored/optional.hpp</label>
      </node>
      <node id="14613">
        <label>arrow/io/type_fwd.h</label>
        <link refid="io_2type__fwd_8h"/>
      </node>
      <node id="14580">
        <label>iosfwd</label>
      </node>
      <node id="14577">
        <label>arrow/array.h</label>
        <link refid="array_8h"/>
        <childnode refid="14578" relation="include">
        </childnode>
        <childnode refid="14579" relation="include">
        </childnode>
        <childnode refid="14580" relation="include">
        </childnode>
        <childnode refid="14581" relation="include">
        </childnode>
        <childnode refid="14582" relation="include">
        </childnode>
        <childnode refid="14583" relation="include">
        </childnode>
        <childnode refid="14576" relation="include">
        </childnode>
        <childnode refid="14584" relation="include">
        </childnode>
        <childnode refid="14585" relation="include">
        </childnode>
        <childnode refid="14588" relation="include">
        </childnode>
        <childnode refid="14597" relation="include">
        </childnode>
        <childnode refid="14602" relation="include">
        </childnode>
        <childnode refid="14603" relation="include">
        </childnode>
        <childnode refid="14598" relation="include">
        </childnode>
        <childnode refid="14586" relation="include">
        </childnode>
        <childnode refid="14614" relation="include">
        </childnode>
        <childnode refid="14587" relation="include">
        </childnode>
      </node>
      <node id="14600">
        <label>arrow/vendored/variant.hpp</label>
      </node>
      <node id="14590">
        <label>arrow/result.h</label>
        <link refid="result_8h"/>
        <childnode refid="14591" relation="include">
        </childnode>
        <childnode refid="14582" relation="include">
        </childnode>
        <childnode refid="14583" relation="include">
        </childnode>
        <childnode refid="14576" relation="include">
        </childnode>
        <childnode refid="14592" relation="include">
        </childnode>
        <childnode refid="14594" relation="include">
        </childnode>
      </node>
      <node id="14589">
        <label>climits</label>
      </node>
      <node id="14620">
        <label>arrow/scalar.h</label>
        <link refid="scalar_8h"/>
        <childnode refid="14581" relation="include">
        </childnode>
        <childnode refid="14582" relation="include">
        </childnode>
        <childnode refid="14576" relation="include">
        </childnode>
        <childnode refid="14584" relation="include">
        </childnode>
        <childnode refid="14590" relation="include">
        </childnode>
        <childnode refid="14592" relation="include">
        </childnode>
        <childnode refid="14588" relation="include">
        </childnode>
        <childnode refid="14597" relation="include">
        </childnode>
        <childnode refid="14602" relation="include">
        </childnode>
        <childnode refid="14594" relation="include">
        </childnode>
        <childnode refid="14621" relation="include">
        </childnode>
        <childnode refid="14623" relation="include">
        </childnode>
        <childnode refid="14614" relation="include">
        </childnode>
        <childnode refid="14587" relation="include">
        </childnode>
      </node>
      <node id="14588">
        <label>arrow/type.h</label>
        <link refid="type_8h"/>
        <childnode refid="14578" relation="include">
        </childnode>
        <childnode refid="14589" relation="include">
        </childnode>
        <childnode refid="14579" relation="include">
        </childnode>
        <childnode refid="14580" relation="include">
        </childnode>
        <childnode refid="14581" relation="include">
        </childnode>
        <childnode refid="14582" relation="include">
        </childnode>
        <childnode refid="14576" relation="include">
        </childnode>
        <childnode refid="14584" relation="include">
        </childnode>
        <childnode refid="14590" relation="include">
        </childnode>
        <childnode refid="14597" relation="include">
        </childnode>
        <childnode refid="14598" relation="include">
        </childnode>
        <childnode refid="14586" relation="include">
        </childnode>
        <childnode refid="14599" relation="include">
        </childnode>
        <childnode refid="14587" relation="include">
        </childnode>
        <childnode refid="14601" relation="include">
        </childnode>
      </node>
      <node id="14583">
        <label>type_traits</label>
      </node>
      <node id="14605">
        <label>algorithm</label>
      </node>
      <node id="14593">
        <label>cstring</label>
      </node>
      <node id="14595">
        <label>arrow/util/string_builder.h</label>
        <link refid="string__builder_8h"/>
        <childnode refid="14581" relation="include">
        </childnode>
        <childnode refid="14596" relation="include">
        </childnode>
        <childnode refid="14582" relation="include">
        </childnode>
        <childnode refid="14576" relation="include">
        </childnode>
        <childnode refid="14587" relation="include">
        </childnode>
      </node>
      <node id="14581">
        <label>memory</label>
      </node>
      <node id="14586">
        <label>arrow/util/macros.h</label>
        <link refid="macros_8h"/>
        <childnode refid="14579" relation="include">
        </childnode>
      </node>
      <node id="14618">
        <label>arrow/util/type_traits.h</label>
        <link refid="util_2type__traits_8h"/>
        <childnode refid="14583" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="14627">
        <label>/arrow/cpp/src/arrow/array/dict_internal.h</label>
        <link refid="dict__internal_8h"/>
      </node>
      <node id="14626">
        <label>/arrow/cpp/src/arrow/visitor_inline.h</label>
        <link refid="visitor__inline_8h"/>
        <childnode refid="14627" relation="include">
        </childnode>
        <childnode refid="14628" relation="include">
        </childnode>
      </node>
      <node id="14628">
        <label>/arrow/cpp/src/arrow/compute/kernels/take_internal.h</label>
        <link refid="take__internal_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structarrow_1_1_array_data_visitor" prot="public">arrow::ArrayDataVisitor</innerclass>
    <innernamespace refid="namespacearrow">arrow</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="visitor__inline_8h_1a69d99770f279c369dd054a4325386de5" prot="public" static="no">
        <name>ARROW_GENERATE_FOR_ALL_INTEGER_TYPES</name>
        <param><defname>ACTION</defname></param>
        <initializer>ACTION(Int8);                                      \
  ACTION(UInt8);                                     \
  ACTION(Int16);                                     \
  ACTION(UInt16);                                    \
  ACTION(Int32);                                     \
  ACTION(UInt32);                                    \
  ACTION(Int64);                                     \
  ACTION(UInt64)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/visitor_inline.h" line="37" column="9" bodyfile="/arrow/cpp/src/arrow/visitor_inline.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="visitor__inline_8h_1ae61c63941aaf90e9a477e51cce5f9862" prot="public" static="no">
        <name>ARROW_GENERATE_FOR_ALL_NUMERIC_TYPES</name>
        <param><defname>ACTION</defname></param>
        <initializer><ref refid="visitor__inline_8h_1a69d99770f279c369dd054a4325386de5" kindref="member">ARROW_GENERATE_FOR_ALL_INTEGER_TYPES</ref>(ACTION);      \
  ACTION(HalfFloat);                                 \
  ACTION(Float);                                     \
  ACTION(Double)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/visitor_inline.h" line="47" column="9" bodyfile="/arrow/cpp/src/arrow/visitor_inline.h" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="visitor__inline_8h_1a74dffd8bdcd9262ebbe538454658f779" prot="public" static="no">
        <name>ARROW_GENERATE_FOR_ALL_TYPES</name>
        <param><defname>ACTION</defname></param>
        <initializer>ACTION(Null);                                 \
  ACTION(Boolean);                              \
  <ref refid="visitor__inline_8h_1ae61c63941aaf90e9a477e51cce5f9862" kindref="member">ARROW_GENERATE_FOR_ALL_NUMERIC_TYPES</ref>(ACTION); \
  ACTION(String);                               \
  ACTION(Binary);                               \
  ACTION(LargeString);                          \
  ACTION(LargeBinary);                          \
  ACTION(FixedSizeBinary);                      \
  ACTION(Duration);                             \
  ACTION(Date32);                               \
  ACTION(Date64);                               \
  ACTION(Timestamp);                            \
  ACTION(Time32);                               \
  ACTION(Time64);                               \
  ACTION(Decimal128);                           \
  ACTION(List);                                 \
  ACTION(LargeList);                            \
  ACTION(Map);                                  \
  ACTION(FixedSizeList);                        \
  ACTION(Struct);                               \
  ACTION(Union);                                \
  ACTION(Dictionary);                           \
  ACTION(Extension)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/visitor_inline.h" line="53" column="9" bodyfile="/arrow/cpp/src/arrow/visitor_inline.h" bodystart="53" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="visitor__inline_8h_1a8ca2e21277883259a44f9b3093c5d4bd" prot="public" static="no">
        <name>TYPE_VISIT_INLINE</name>
        <param><defname>TYPE_CLASS</defname></param>
        <initializer>case TYPE_CLASS##Type::type_id:     \
    return visitor-&gt;Visit(internal::checked_cast&lt;const TYPE_CLASS##Type&amp;&gt;(type));</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/visitor_inline.h" line="78" column="9" bodyfile="/arrow/cpp/src/arrow/visitor_inline.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="visitor__inline_8h_1afe0bc2b7f1c9656b48ecd4850db9f316" prot="public" static="no">
        <name>ARRAY_VISIT_INLINE</name>
        <param><defname>TYPE_CLASS</defname></param>
        <initializer>case TYPE_CLASS##Type::type_id:                                                        \
    return visitor-&gt;Visit(                                                               \
        internal::checked_cast&lt;const typename TypeTraits&lt;TYPE_CLASS##Type&gt;::ArrayType&amp;&gt;( \
            array));</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/visitor_inline.h" line="104" column="9" bodyfile="/arrow/cpp/src/arrow/visitor_inline.h" bodystart="104" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="visitor__inline_8h_1a76641c1ee783e3eb14dc9a37a5c62681" prot="public" static="no">
        <name>SCALAR_VISIT_INLINE</name>
        <param><defname>TYPE_CLASS</defname></param>
        <initializer>case TYPE_CLASS##Type::type_id:       \
    return visitor-&gt;Visit(internal::checked_cast&lt;const TYPE_CLASS##Scalar&amp;&gt;(scalar));</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/visitor_inline.h" line="449" column="9" bodyfile="/arrow/cpp/src/arrow/visitor_inline.h" bodystart="449" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Private<sp/>header,<sp/>not<sp/>to<sp/>be<sp/>exported</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="array_8h" kindref="compound">arrow/array.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="extension__type_8h" kindref="compound">arrow/extension_type.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="scalar_8h" kindref="compound">arrow/scalar.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="status_8h" kindref="compound">arrow/status.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type_8h" kindref="compound">arrow/type.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="bit__util_8h" kindref="compound">arrow/util/bit_util.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="checked__cast_8h" kindref="compound">arrow/util/checked_cast.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="functional_8h" kindref="compound">arrow/util/functional.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="optional_8h" kindref="compound">arrow/util/optional.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="string__view_8h" kindref="compound">arrow/util/string_view.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacearrow" kindref="compound">arrow</ref><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="visitor__inline_8h_1a69d99770f279c369dd054a4325386de5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ARROW_GENERATE_FOR_ALL_INTEGER_TYPES(ACTION)<sp/>\</highlight></codeline>
<codeline lineno="38"><highlight class="preprocessor"><sp/><sp/>ACTION(Int8);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="39"><highlight class="preprocessor"><sp/><sp/>ACTION(UInt8);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="40"><highlight class="preprocessor"><sp/><sp/>ACTION(Int16);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="41"><highlight class="preprocessor"><sp/><sp/>ACTION(UInt16);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="42"><highlight class="preprocessor"><sp/><sp/>ACTION(Int32);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="43"><highlight class="preprocessor"><sp/><sp/>ACTION(UInt32);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="44"><highlight class="preprocessor"><sp/><sp/>ACTION(Int64);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="45"><highlight class="preprocessor"><sp/><sp/>ACTION(UInt64)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="visitor__inline_8h_1ae61c63941aaf90e9a477e51cce5f9862" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ARROW_GENERATE_FOR_ALL_NUMERIC_TYPES(ACTION)<sp/>\</highlight></codeline>
<codeline lineno="48"><highlight class="preprocessor"><sp/><sp/>ARROW_GENERATE_FOR_ALL_INTEGER_TYPES(ACTION);<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="49"><highlight class="preprocessor"><sp/><sp/>ACTION(HalfFloat);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"><sp/><sp/>ACTION(Float);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="51"><highlight class="preprocessor"><sp/><sp/>ACTION(Double)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="visitor__inline_8h_1a74dffd8bdcd9262ebbe538454658f779" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ARROW_GENERATE_FOR_ALL_TYPES(ACTION)<sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="54"><highlight class="preprocessor"><sp/><sp/>ACTION(Null);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="55"><highlight class="preprocessor"><sp/><sp/>ACTION(Boolean);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="56"><highlight class="preprocessor"><sp/><sp/>ARROW_GENERATE_FOR_ALL_NUMERIC_TYPES(ACTION);<sp/>\</highlight></codeline>
<codeline lineno="57"><highlight class="preprocessor"><sp/><sp/>ACTION(String);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="58"><highlight class="preprocessor"><sp/><sp/>ACTION(Binary);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="59"><highlight class="preprocessor"><sp/><sp/>ACTION(LargeString);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="60"><highlight class="preprocessor"><sp/><sp/>ACTION(LargeBinary);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="61"><highlight class="preprocessor"><sp/><sp/>ACTION(FixedSizeBinary);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="62"><highlight class="preprocessor"><sp/><sp/>ACTION(Duration);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor"><sp/><sp/>ACTION(Date32);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor"><sp/><sp/>ACTION(Date64);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="65"><highlight class="preprocessor"><sp/><sp/>ACTION(Timestamp);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="66"><highlight class="preprocessor"><sp/><sp/>ACTION(Time32);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="67"><highlight class="preprocessor"><sp/><sp/>ACTION(Time64);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="68"><highlight class="preprocessor"><sp/><sp/>ACTION(Decimal128);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="69"><highlight class="preprocessor"><sp/><sp/>ACTION(List);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="70"><highlight class="preprocessor"><sp/><sp/>ACTION(LargeList);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="71"><highlight class="preprocessor"><sp/><sp/>ACTION(Map);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor"><sp/><sp/>ACTION(FixedSizeList);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor"><sp/><sp/>ACTION(Struct);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"><sp/><sp/>ACTION(Union);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="75"><highlight class="preprocessor"><sp/><sp/>ACTION(Dictionary);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"><sp/><sp/>ACTION(Extension)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="visitor__inline_8h_1a8ca2e21277883259a44f9b3093c5d4bd" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TYPE_VISIT_INLINE(TYPE_CLASS)<sp/>\</highlight></codeline>
<codeline lineno="79"><highlight class="preprocessor"><sp/><sp/>case<sp/>TYPE_CLASS##Type::type_id:<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="80"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>visitor-&gt;Visit(internal::checked_cast&lt;const<sp/>TYPE_CLASS##Type&amp;&gt;(type));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VISITOR&gt;</highlight></codeline>
<codeline lineno="83" refid="namespacearrow_1a431bd46d978673b1b00afc3049776c49" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="namespacearrow_1a431bd46d978673b1b00afc3049776c49" kindref="member">VisitTypeInline</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref>&amp;<sp/>type,<sp/>VISITOR*<sp/>visitor)<sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(type.<ref refid="classarrow_1_1_data_type_1a5ec6a1c93420c68e9c8065d4a56ad645" kindref="member">id</ref>())<sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="visitor__inline_8h_1a74dffd8bdcd9262ebbe538454658f779" kindref="member">ARROW_GENERATE_FOR_ALL_TYPES</ref>(<ref refid="visitor__inline_8h_1a8ca2e21277883259a44f9b3093c5d4bd" kindref="member">TYPE_VISIT_INLINE</ref>);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44aaa546143f5b445f6478b7e157546ec3f" kindref="member">Type::INTERVAL</ref>:<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>interval_type<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classarrow_1_1_interval_type" kindref="compound">IntervalType</ref>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(type);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interval_type.interval_type()<sp/>==<sp/><ref refid="classarrow_1_1_interval_type_1ae72a8a101c098ebf09ed0af253222eccaebf2d56ec2d1e87647e2880577559f3a" kindref="member">IntervalType::MONTHS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>visitor-&gt;Visit(internal::checked_cast&lt;const<sp/>MonthIntervalType&amp;&gt;(type));</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interval_type.interval_type()<sp/>==<sp/><ref refid="classarrow_1_1_interval_type_1ae72a8a101c098ebf09ed0af253222ecca5893bc3e913db19b82ce8e6c52b3c02f" kindref="member">IntervalType::DAY_TIME</ref>)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>visitor-&gt;Visit(internal::checked_cast&lt;const<sp/>DayTimeIntervalType&amp;&gt;(type));</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1ae63ddaaa7db5edef4e75a26b693351a1" kindref="member">Status::NotImplemented</ref>(</highlight><highlight class="stringliteral">&quot;Type<sp/>not<sp/>implemented&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>TYPE_VISIT_INLINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104" refid="visitor__inline_8h_1afe0bc2b7f1c9656b48ecd4850db9f316" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ARRAY_VISIT_INLINE(TYPE_CLASS)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="105"><highlight class="preprocessor"><sp/><sp/>case<sp/>TYPE_CLASS##Type::type_id:<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="106"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>visitor-&gt;Visit(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="107"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal::checked_cast&lt;const<sp/>typename<sp/>TypeTraits&lt;TYPE_CLASS##Type&gt;::ArrayType&amp;&gt;(<sp/>\</highlight></codeline>
<codeline lineno="108"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>array));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VISITOR&gt;</highlight></codeline>
<codeline lineno="111" refid="namespacearrow_1a2f912387c238cd2feef3c242c0647d2b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="namespacearrow_1a2f912387c238cd2feef3c242c0647d2b" kindref="member">VisitArrayInline</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_array" kindref="compound">Array</ref>&amp;<sp/>array,<sp/>VISITOR*<sp/>visitor)<sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(array.<ref refid="classarrow_1_1_array_1a155d9d827415438f976e3cb31e0a55f6" kindref="member">type_id</ref>())<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="visitor__inline_8h_1a74dffd8bdcd9262ebbe538454658f779" kindref="member">ARROW_GENERATE_FOR_ALL_TYPES</ref>(<ref refid="visitor__inline_8h_1afe0bc2b7f1c9656b48ecd4850db9f316" kindref="member">ARRAY_VISIT_INLINE</ref>);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44aaa546143f5b445f6478b7e157546ec3f" kindref="member">Type::INTERVAL</ref>:<sp/>{</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>interval_type<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal"><ref refid="classarrow_1_1_interval_type" kindref="compound">IntervalType</ref>&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*array.<ref refid="classarrow_1_1_array_1a635a694fbadb0bfa731beb97df2ef7ea" kindref="member">type</ref>());</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interval_type.interval_type()<sp/>==<sp/><ref refid="classarrow_1_1_interval_type_1ae72a8a101c098ebf09ed0af253222eccaebf2d56ec2d1e87647e2880577559f3a" kindref="member">IntervalType::MONTHS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>visitor-&gt;Visit(internal::checked_cast&lt;const<sp/>MonthIntervalArray&amp;&gt;(array));</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interval_type.interval_type()<sp/>==<sp/><ref refid="classarrow_1_1_interval_type_1ae72a8a101c098ebf09ed0af253222ecca5893bc3e913db19b82ce8e6c52b3c02f" kindref="member">IntervalType::DAY_TIME</ref>)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>visitor-&gt;Visit(internal::checked_cast&lt;const<sp/>DayTimeIntervalArray&amp;&gt;(array));</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1ae63ddaaa7db5edef4e75a26b693351a1" kindref="member">Status::NotImplemented</ref>(</highlight><highlight class="stringliteral">&quot;Type<sp/>not<sp/>implemented&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="129"><highlight class="normal">}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Enable<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ArrayDataInlineVisitor<sp/>{};</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Numeric<sp/>and<sp/>primitive<sp/>C-compatible<sp/>types</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ArrayDataInlineVisitor&lt;T,<sp/>enable_if_has_c_type&lt;T&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>c_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::c_type;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VisitFunc&gt;</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>VisitStatus(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref>&amp;<sp/>arr,<sp/>VisitFunc&amp;&amp;<sp/>func)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>c_type*<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref><sp/>=<sp/>arr.<ref refid="structarrow_1_1_array_data_1a3dfb7d5574b7ae1295e20fd0e617f9c4" kindref="member">GetValues</ref>&lt;c_type&gt;(1);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arr.<ref refid="structarrow_1_1_array_data_1a76c53d7331c71833c3be390c602c542d" kindref="member">null_count</ref><sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::BitmapReader<sp/>valid_reader(arr.<ref refid="structarrow_1_1_array_data_1a11920b2e9bc4cb04cdb5970a45c5d3b0" kindref="member">buffers</ref>[0]-&gt;data(),<sp/>arr.<ref refid="structarrow_1_1_array_data_1a62e35001b5555f0b59bb0db3db494419" kindref="member">offset</ref>,<sp/>arr.<ref refid="structarrow_1_1_array_data_1aa4b33bdefec3290da60142301d852120" kindref="member">length</ref>);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>arr.<ref refid="structarrow_1_1_array_data_1aa4b33bdefec3290da60142301d852120" kindref="member">length</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_null<sp/>=<sp/>valid_reader.IsNotSet();</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_null)<sp/>{</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(func(<ref refid="namespacearrow_1_1util_1a37597d23d580458d4547f817e2943744" kindref="member">util::optional&lt;c_type&gt;</ref>()));</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(func(<ref refid="namespacearrow_1_1util_1a37597d23d580458d4547f817e2943744" kindref="member">util::optional&lt;c_type&gt;</ref>(data[i])));</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valid_reader.Next();</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>arr.<ref refid="structarrow_1_1_array_data_1aa4b33bdefec3290da60142301d852120" kindref="member">length</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(func(<ref refid="namespacearrow_1_1util_1a37597d23d580458d4547f817e2943744" kindref="member">util::optional&lt;c_type&gt;</ref>(data[i])));</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1a5c0b0031db6eeec3dcc70485d24cfe03" kindref="member">Status::OK</ref>();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VisitFunc&gt;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VisitVoid(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref>&amp;<sp/>arr,<sp/>VisitFunc&amp;&amp;<sp/>func)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>c_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::c_type;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>c_type*<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref><sp/>=<sp/>arr.<ref refid="structarrow_1_1_array_data_1a3dfb7d5574b7ae1295e20fd0e617f9c4" kindref="member">GetValues</ref>&lt;c_type&gt;(1);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arr.<ref refid="structarrow_1_1_array_data_1a76c53d7331c71833c3be390c602c542d" kindref="member">null_count</ref><sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::BitmapReader<sp/>valid_reader(arr.<ref refid="structarrow_1_1_array_data_1a11920b2e9bc4cb04cdb5970a45c5d3b0" kindref="member">buffers</ref>[0]-&gt;data(),<sp/>arr.<ref refid="structarrow_1_1_array_data_1a62e35001b5555f0b59bb0db3db494419" kindref="member">offset</ref>,<sp/>arr.<ref refid="structarrow_1_1_array_data_1aa4b33bdefec3290da60142301d852120" kindref="member">length</ref>);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>arr.<ref refid="structarrow_1_1_array_data_1aa4b33bdefec3290da60142301d852120" kindref="member">length</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_null<sp/>=<sp/>valid_reader.IsNotSet();</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_null)<sp/>{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func(<ref refid="namespacearrow_1_1util_1a37597d23d580458d4547f817e2943744" kindref="member">util::optional&lt;c_type&gt;</ref>());</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func(<ref refid="namespacearrow_1_1util_1a37597d23d580458d4547f817e2943744" kindref="member">util::optional&lt;c_type&gt;</ref>(data[i]));</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valid_reader.Next();</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>arr.<ref refid="structarrow_1_1_array_data_1aa4b33bdefec3290da60142301d852120" kindref="member">length</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func(<ref refid="namespacearrow_1_1util_1a37597d23d580458d4547f817e2943744" kindref="member">util::optional&lt;c_type&gt;</ref>(data[i]));</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal">};</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Boolean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;&gt;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ArrayDataInlineVisitor&lt;BooleanType&gt;<sp/>{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>c_type<sp/>=<sp/>bool;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VisitFunc&gt;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>VisitStatus(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref>&amp;<sp/>arr,<sp/>VisitFunc&amp;&amp;<sp/>func)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arr.<ref refid="structarrow_1_1_array_data_1a76c53d7331c71833c3be390c602c542d" kindref="member">null_count</ref><sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::BitmapReader<sp/>valid_reader(arr.<ref refid="structarrow_1_1_array_data_1a11920b2e9bc4cb04cdb5970a45c5d3b0" kindref="member">buffers</ref>[0]-&gt;data(),<sp/>arr.<ref refid="structarrow_1_1_array_data_1a62e35001b5555f0b59bb0db3db494419" kindref="member">offset</ref>,<sp/>arr.<ref refid="structarrow_1_1_array_data_1aa4b33bdefec3290da60142301d852120" kindref="member">length</ref>);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::BitmapReader<sp/>value_reader(arr.<ref refid="structarrow_1_1_array_data_1a11920b2e9bc4cb04cdb5970a45c5d3b0" kindref="member">buffers</ref>[1]-&gt;data(),<sp/>arr.<ref refid="structarrow_1_1_array_data_1a62e35001b5555f0b59bb0db3db494419" kindref="member">offset</ref>,<sp/>arr.<ref refid="structarrow_1_1_array_data_1aa4b33bdefec3290da60142301d852120" kindref="member">length</ref>);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>arr.<ref refid="structarrow_1_1_array_data_1aa4b33bdefec3290da60142301d852120" kindref="member">length</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_null<sp/>=<sp/>valid_reader.IsNotSet();</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_null)<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(func(<ref refid="namespacearrow_1_1util_1a37597d23d580458d4547f817e2943744" kindref="member">util::optional&lt;bool&gt;</ref>()));</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(func(<ref refid="namespacearrow_1_1util_1a37597d23d580458d4547f817e2943744" kindref="member">util::optional&lt;bool&gt;</ref>(value_reader.IsSet())));</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valid_reader.Next();</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_reader.Next();</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::BitmapReader<sp/>value_reader(arr.<ref refid="structarrow_1_1_array_data_1a11920b2e9bc4cb04cdb5970a45c5d3b0" kindref="member">buffers</ref>[1]-&gt;data(),<sp/>arr.<ref refid="structarrow_1_1_array_data_1a62e35001b5555f0b59bb0db3db494419" kindref="member">offset</ref>,<sp/>arr.<ref refid="structarrow_1_1_array_data_1aa4b33bdefec3290da60142301d852120" kindref="member">length</ref>);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>arr.<ref refid="structarrow_1_1_array_data_1aa4b33bdefec3290da60142301d852120" kindref="member">length</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(func(<ref refid="namespacearrow_1_1util_1a37597d23d580458d4547f817e2943744" kindref="member">util::optional&lt;bool&gt;</ref>(value_reader.IsSet())));</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_reader.Next();</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1a5c0b0031db6eeec3dcc70485d24cfe03" kindref="member">Status::OK</ref>();</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VisitFunc&gt;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VisitVoid(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref>&amp;<sp/>arr,<sp/>VisitFunc&amp;&amp;<sp/>func)<sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arr.<ref refid="structarrow_1_1_array_data_1a76c53d7331c71833c3be390c602c542d" kindref="member">null_count</ref><sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::BitmapReader<sp/>valid_reader(arr.<ref refid="structarrow_1_1_array_data_1a11920b2e9bc4cb04cdb5970a45c5d3b0" kindref="member">buffers</ref>[0]-&gt;data(),<sp/>arr.<ref refid="structarrow_1_1_array_data_1a62e35001b5555f0b59bb0db3db494419" kindref="member">offset</ref>,<sp/>arr.<ref refid="structarrow_1_1_array_data_1aa4b33bdefec3290da60142301d852120" kindref="member">length</ref>);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::BitmapReader<sp/>value_reader(arr.<ref refid="structarrow_1_1_array_data_1a11920b2e9bc4cb04cdb5970a45c5d3b0" kindref="member">buffers</ref>[1]-&gt;data(),<sp/>arr.<ref refid="structarrow_1_1_array_data_1a62e35001b5555f0b59bb0db3db494419" kindref="member">offset</ref>,<sp/>arr.<ref refid="structarrow_1_1_array_data_1aa4b33bdefec3290da60142301d852120" kindref="member">length</ref>);</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>arr.<ref refid="structarrow_1_1_array_data_1aa4b33bdefec3290da60142301d852120" kindref="member">length</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_null<sp/>=<sp/>valid_reader.IsNotSet();</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_null)<sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func(<ref refid="namespacearrow_1_1util_1a37597d23d580458d4547f817e2943744" kindref="member">util::optional&lt;bool&gt;</ref>());</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func(<ref refid="namespacearrow_1_1util_1a37597d23d580458d4547f817e2943744" kindref="member">util::optional&lt;bool&gt;</ref>(value_reader.IsSet()));</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valid_reader.Next();</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_reader.Next();</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::BitmapReader<sp/>value_reader(arr.<ref refid="structarrow_1_1_array_data_1a11920b2e9bc4cb04cdb5970a45c5d3b0" kindref="member">buffers</ref>[1]-&gt;data(),<sp/>arr.<ref refid="structarrow_1_1_array_data_1a62e35001b5555f0b59bb0db3db494419" kindref="member">offset</ref>,<sp/>arr.<ref refid="structarrow_1_1_array_data_1aa4b33bdefec3290da60142301d852120" kindref="member">length</ref>);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>arr.<ref refid="structarrow_1_1_array_data_1aa4b33bdefec3290da60142301d852120" kindref="member">length</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func(<ref refid="namespacearrow_1_1util_1a37597d23d580458d4547f817e2943744" kindref="member">util::optional&lt;bool&gt;</ref>(value_reader.IsSet()));</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>value_reader.Next();</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal">};</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Binary,<sp/>String...</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ArrayDataInlineVisitor&lt;T,<sp/>enable_if_base_binary&lt;T&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>c_type<sp/>=<sp/><ref refid="namespaceparquet_1af53c3c244055490d5dd385dd8a874540" kindref="member">util::string_view</ref>;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VisitFunc&gt;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>VisitStatus(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref>&amp;<sp/>arr,<sp/>VisitFunc&amp;&amp;<sp/>func)<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>offset_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::offset_type;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>uint8_t<sp/>empty_value<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>offset_type*<sp/>offsets<sp/>=<sp/>arr.<ref refid="structarrow_1_1_array_data_1a3dfb7d5574b7ae1295e20fd0e617f9c4" kindref="member">GetValues</ref>&lt;offset_type&gt;(1);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!arr.<ref refid="structarrow_1_1_array_data_1a11920b2e9bc4cb04cdb5970a45c5d3b0" kindref="member">buffers</ref>[2])<sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>&amp;empty_value;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>not<sp/>apply<sp/>the<sp/>array<sp/>offset<sp/>to<sp/>the<sp/>values<sp/>array;<sp/>the<sp/>value_offsets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>index<sp/>the<sp/>non-sliced<sp/>values<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>arr.<ref refid="structarrow_1_1_array_data_1a3dfb7d5574b7ae1295e20fd0e617f9c4" kindref="member">GetValues</ref>&lt;uint8_t&gt;(2,<sp/></highlight><highlight class="comment">/*absolute_offset=*/</highlight><highlight class="normal">0);</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arr.<ref refid="structarrow_1_1_array_data_1a76c53d7331c71833c3be390c602c542d" kindref="member">null_count</ref><sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::BitmapReader<sp/>valid_reader(arr.<ref refid="structarrow_1_1_array_data_1a11920b2e9bc4cb04cdb5970a45c5d3b0" kindref="member">buffers</ref>[0]-&gt;data(),<sp/>arr.<ref refid="structarrow_1_1_array_data_1a62e35001b5555f0b59bb0db3db494419" kindref="member">offset</ref>,<sp/>arr.<ref refid="structarrow_1_1_array_data_1aa4b33bdefec3290da60142301d852120" kindref="member">length</ref>);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>arr.<ref refid="structarrow_1_1_array_data_1aa4b33bdefec3290da60142301d852120" kindref="member">length</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_null<sp/>=<sp/>valid_reader.IsNotSet();</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valid_reader.Next();</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_null)<sp/>{</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(func(<ref refid="namespacearrow_1_1util_1a37597d23d580458d4547f817e2943744" kindref="member">util::optional&lt;util::string_view&gt;</ref>()));</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value<sp/>=<sp/><ref refid="namespaceparquet_1af53c3c244055490d5dd385dd8a874540" kindref="member">util::string_view</ref>(reinterpret_cast&lt;const<sp/>char*&gt;(data<sp/>+<sp/>offsets[i]),</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offsets[i<sp/>+<sp/>1]<sp/>-<sp/>offsets[i]);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(func(<ref refid="namespacearrow_1_1util_1a37597d23d580458d4547f817e2943744" kindref="member">util::optional&lt;util::string_view&gt;</ref>(value)));</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>arr.<ref refid="structarrow_1_1_array_data_1aa4b33bdefec3290da60142301d852120" kindref="member">length</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value<sp/>=<sp/><ref refid="namespaceparquet_1af53c3c244055490d5dd385dd8a874540" kindref="member">util::string_view</ref>(reinterpret_cast&lt;const<sp/>char*&gt;(data<sp/>+<sp/>offsets[i]),</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offsets[i<sp/>+<sp/>1]<sp/>-<sp/>offsets[i]);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(func(<ref refid="namespacearrow_1_1util_1a37597d23d580458d4547f817e2943744" kindref="member">util::optional&lt;util::string_view&gt;</ref>(value)));</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1a5c0b0031db6eeec3dcc70485d24cfe03" kindref="member">Status::OK</ref>();</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VisitFunc&gt;</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VisitVoid(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref>&amp;<sp/>arr,<sp/>VisitFunc&amp;&amp;<sp/>func)<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>offset_type<sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T::offset_type;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>constexpr<sp/>uint8_t<sp/>empty_value<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>offset_type*<sp/>offsets<sp/>=<sp/>arr.<ref refid="structarrow_1_1_array_data_1a3dfb7d5574b7ae1295e20fd0e617f9c4" kindref="member">GetValues</ref>&lt;offset_type&gt;(1);</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!arr.<ref refid="structarrow_1_1_array_data_1a11920b2e9bc4cb04cdb5970a45c5d3b0" kindref="member">buffers</ref>[2])<sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>&amp;empty_value;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>not<sp/>apply<sp/>the<sp/>array<sp/>offset<sp/>to<sp/>the<sp/>values<sp/>array;<sp/>the<sp/>value_offsets</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>index<sp/>the<sp/>non-sliced<sp/>values<sp/>array.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>=<sp/>arr.<ref refid="structarrow_1_1_array_data_1a3dfb7d5574b7ae1295e20fd0e617f9c4" kindref="member">GetValues</ref>&lt;uint8_t&gt;(2,<sp/></highlight><highlight class="comment">/*absolute_offset=*/</highlight><highlight class="normal">0);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arr.<ref refid="structarrow_1_1_array_data_1a76c53d7331c71833c3be390c602c542d" kindref="member">null_count</ref><sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::BitmapReader<sp/>valid_reader(arr.<ref refid="structarrow_1_1_array_data_1a11920b2e9bc4cb04cdb5970a45c5d3b0" kindref="member">buffers</ref>[0]-&gt;data(),<sp/>arr.<ref refid="structarrow_1_1_array_data_1a62e35001b5555f0b59bb0db3db494419" kindref="member">offset</ref>,<sp/>arr.<ref refid="structarrow_1_1_array_data_1aa4b33bdefec3290da60142301d852120" kindref="member">length</ref>);</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>arr.<ref refid="structarrow_1_1_array_data_1aa4b33bdefec3290da60142301d852120" kindref="member">length</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_null<sp/>=<sp/>valid_reader.IsNotSet();</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valid_reader.Next();</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_null)<sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func(<ref refid="namespacearrow_1_1util_1a37597d23d580458d4547f817e2943744" kindref="member">util::optional&lt;util::string_view&gt;</ref>());</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value<sp/>=<sp/><ref refid="namespaceparquet_1af53c3c244055490d5dd385dd8a874540" kindref="member">util::string_view</ref>(reinterpret_cast&lt;const<sp/>char*&gt;(data<sp/>+<sp/>offsets[i]),</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offsets[i<sp/>+<sp/>1]<sp/>-<sp/>offsets[i]);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func(<ref refid="namespacearrow_1_1util_1a37597d23d580458d4547f817e2943744" kindref="member">util::optional&lt;util::string_view&gt;</ref>(value));</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>arr.<ref refid="structarrow_1_1_array_data_1aa4b33bdefec3290da60142301d852120" kindref="member">length</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value<sp/>=<sp/><ref refid="namespaceparquet_1af53c3c244055490d5dd385dd8a874540" kindref="member">util::string_view</ref>(reinterpret_cast&lt;const<sp/>char*&gt;(data<sp/>+<sp/>offsets[i]),</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>offsets[i<sp/>+<sp/>1]<sp/>-<sp/>offsets[i]);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func(<ref refid="namespacearrow_1_1util_1a37597d23d580458d4547f817e2943744" kindref="member">util::optional&lt;util::string_view&gt;</ref>(value));</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal">};</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight><highlight class="comment">//<sp/>FixedSizeBinary,<sp/>Decimal128</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ArrayDataInlineVisitor&lt;T,<sp/>enable_if_fixed_size_binary&lt;T&gt;&gt;<sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>c_type<sp/>=<sp/><ref refid="namespaceparquet_1af53c3c244055490d5dd385dd8a874540" kindref="member">util::string_view</ref>;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VisitFunc&gt;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>VisitStatus(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref>&amp;<sp/>arr,<sp/>VisitFunc&amp;&amp;<sp/>func)<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>fw_type<sp/>=<sp/>internal::checked_cast&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_fixed_size_binary_type" kindref="compound">FixedSizeBinaryType</ref>&amp;&gt;(*arr.<ref refid="structarrow_1_1_array_data_1a3fcb28b85ec35b1886359086616869d5" kindref="member">type</ref>);</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t<sp/>byte_width<sp/>=<sp/>fw_type.<ref refid="classarrow_1_1_fixed_size_binary_type_1a684663b4cfeedd523eece039c6c0955a" kindref="member">byte_width</ref>();</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref><sp/>=</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arr.<ref refid="structarrow_1_1_array_data_1a3dfb7d5574b7ae1295e20fd0e617f9c4" kindref="member">GetValues</ref>&lt;uint8_t&gt;(1,</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*absolute_offset=*/</highlight><highlight class="normal">arr.<ref refid="structarrow_1_1_array_data_1a62e35001b5555f0b59bb0db3db494419" kindref="member">offset</ref><sp/>*<sp/>byte_width);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arr.<ref refid="structarrow_1_1_array_data_1a76c53d7331c71833c3be390c602c542d" kindref="member">null_count</ref><sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::BitmapReader<sp/>valid_reader(arr.<ref refid="structarrow_1_1_array_data_1a11920b2e9bc4cb04cdb5970a45c5d3b0" kindref="member">buffers</ref>[0]-&gt;data(),<sp/>arr.<ref refid="structarrow_1_1_array_data_1a62e35001b5555f0b59bb0db3db494419" kindref="member">offset</ref>,<sp/>arr.<ref refid="structarrow_1_1_array_data_1aa4b33bdefec3290da60142301d852120" kindref="member">length</ref>);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>arr.<ref refid="structarrow_1_1_array_data_1aa4b33bdefec3290da60142301d852120" kindref="member">length</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_null<sp/>=<sp/>valid_reader.IsNotSet();</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valid_reader.Next();</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_null)<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(func(<ref refid="namespacearrow_1_1util_1a37597d23d580458d4547f817e2943744" kindref="member">util::optional&lt;util::string_view&gt;</ref>()));</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value<sp/>=<sp/><ref refid="namespaceparquet_1af53c3c244055490d5dd385dd8a874540" kindref="member">util::string_view</ref>(reinterpret_cast&lt;const<sp/>char*&gt;(data),<sp/>byte_width);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(func(<ref refid="namespacearrow_1_1util_1a37597d23d580458d4547f817e2943744" kindref="member">util::optional&lt;util::string_view&gt;</ref>(value)));</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>+=<sp/>byte_width;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>arr.<ref refid="structarrow_1_1_array_data_1aa4b33bdefec3290da60142301d852120" kindref="member">length</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value<sp/>=<sp/><ref refid="namespaceparquet_1af53c3c244055490d5dd385dd8a874540" kindref="member">util::string_view</ref>(reinterpret_cast&lt;const<sp/>char*&gt;(data),<sp/>byte_width);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(func(<ref refid="namespacearrow_1_1util_1a37597d23d580458d4547f817e2943744" kindref="member">util::optional&lt;util::string_view&gt;</ref>(value)));</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>+=<sp/>byte_width;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1a5c0b0031db6eeec3dcc70485d24cfe03" kindref="member">Status::OK</ref>();</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VisitFunc&gt;</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>VisitVoid(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref>&amp;<sp/>arr,<sp/>VisitFunc&amp;&amp;<sp/>func)<sp/>{</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>fw_type<sp/>=<sp/>internal::checked_cast&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_fixed_size_binary_type" kindref="compound">FixedSizeBinaryType</ref>&amp;&gt;(*arr.<ref refid="structarrow_1_1_array_data_1a3fcb28b85ec35b1886359086616869d5" kindref="member">type</ref>);</highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int32_t<sp/>byte_width<sp/>=<sp/>fw_type.<ref refid="classarrow_1_1_fixed_size_binary_type_1a684663b4cfeedd523eece039c6c0955a" kindref="member">byte_width</ref>();</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref><sp/>=</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>arr.<ref refid="structarrow_1_1_array_data_1a3dfb7d5574b7ae1295e20fd0e617f9c4" kindref="member">GetValues</ref>&lt;uint8_t&gt;(1,</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*absolute_offset=*/</highlight><highlight class="normal">arr.<ref refid="structarrow_1_1_array_data_1a62e35001b5555f0b59bb0db3db494419" kindref="member">offset</ref><sp/>*<sp/>byte_width);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(arr.<ref refid="structarrow_1_1_array_data_1a76c53d7331c71833c3be390c602c542d" kindref="member">null_count</ref><sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::BitmapReader<sp/>valid_reader(arr.<ref refid="structarrow_1_1_array_data_1a11920b2e9bc4cb04cdb5970a45c5d3b0" kindref="member">buffers</ref>[0]-&gt;data(),<sp/>arr.<ref refid="structarrow_1_1_array_data_1a62e35001b5555f0b59bb0db3db494419" kindref="member">offset</ref>,<sp/>arr.<ref refid="structarrow_1_1_array_data_1aa4b33bdefec3290da60142301d852120" kindref="member">length</ref>);</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>arr.<ref refid="structarrow_1_1_array_data_1aa4b33bdefec3290da60142301d852120" kindref="member">length</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_null<sp/>=<sp/>valid_reader.IsNotSet();</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>valid_reader.Next();</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_null)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func(<ref refid="namespacearrow_1_1util_1a37597d23d580458d4547f817e2943744" kindref="member">util::optional&lt;util::string_view&gt;</ref>());</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value<sp/>=<sp/><ref refid="namespaceparquet_1af53c3c244055490d5dd385dd8a874540" kindref="member">util::string_view</ref>(reinterpret_cast&lt;const<sp/>char*&gt;(data),<sp/>byte_width);</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func(<ref refid="namespacearrow_1_1util_1a37597d23d580458d4547f817e2943744" kindref="member">util::optional&lt;util::string_view&gt;</ref>(value));</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>+=<sp/>byte_width;</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>arr.<ref refid="structarrow_1_1_array_data_1aa4b33bdefec3290da60142301d852120" kindref="member">length</ref>;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>value<sp/>=<sp/><ref refid="namespaceparquet_1af53c3c244055490d5dd385dd8a874540" kindref="member">util::string_view</ref>(reinterpret_cast&lt;const<sp/>char*&gt;(data),<sp/>byte_width);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func(<ref refid="namespacearrow_1_1util_1a37597d23d580458d4547f817e2943744" kindref="member">util::optional&lt;util::string_view&gt;</ref>(value));</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>data<sp/>+=<sp/>byte_width;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="391"><highlight class="normal">};</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Visit<sp/>an<sp/>array&apos;s<sp/>data<sp/>values,<sp/>in<sp/>order,<sp/>without<sp/>overhead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>given<sp/>`VisitFunc`<sp/>should<sp/>be<sp/>a<sp/>callable<sp/>with<sp/>either<sp/>of<sp/>these<sp/>signatures:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>void(util::optional&lt;scalar_type&gt;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>Status(util::optional&lt;scalar_type&gt;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"></highlight><highlight class="comment">//<sp/>...<sp/>where<sp/>`scalar_type`<sp/>depends<sp/>on<sp/>the<sp/>array<sp/>data<sp/>type:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>the<sp/>type&apos;s<sp/>`c_type`,<sp/>if<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>for<sp/>boolean<sp/>arrays,<sp/>a<sp/>`bool`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>for<sp/>binary,<sp/>string<sp/>and<sp/>fixed-size<sp/>binary<sp/>arrays,<sp/>a<sp/>`util::string_view`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VisitFunc&gt;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>internal::call_traits::enable_if_return&lt;VisitFunc,<sp/>Status&gt;::type</highlight></codeline>
<codeline lineno="408" refid="namespacearrow_1ab4b3c91dfc7add7c20e0dcfbb8fe25db" refkind="member"><highlight class="normal"><ref refid="namespacearrow_1ab4b3c91dfc7add7c20e0dcfbb8fe25db" kindref="member">VisitArrayDataInline</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref>&amp;<sp/>arr,<sp/>VisitFunc&amp;&amp;<sp/>func)<sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::ArrayDataInlineVisitor&lt;T&gt;::VisitStatus(arr,</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::forward&lt;VisitFunc&gt;(func));</highlight></codeline>
<codeline lineno="411"><highlight class="normal">}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VisitFunc&gt;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>internal::call_traits::enable_if_return&lt;VisitFunc,<sp/>void&gt;::type</highlight></codeline>
<codeline lineno="415" refid="namespacearrow_1a66beb93f9f98c00347447ad37eaae535" refkind="member"><highlight class="normal"><ref refid="namespacearrow_1ab4b3c91dfc7add7c20e0dcfbb8fe25db" kindref="member">VisitArrayDataInline</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref>&amp;<sp/>arr,<sp/>VisitFunc&amp;&amp;<sp/>func)<sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::ArrayDataInlineVisitor&lt;T&gt;::VisitVoid(arr,</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::forward&lt;VisitFunc&gt;(func));</highlight></codeline>
<codeline lineno="418"><highlight class="normal">}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Visit<sp/>an<sp/>array&apos;s<sp/>data<sp/>values,<sp/>in<sp/>order,<sp/>without<sp/>overhead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>Visit<sp/>method&apos;s<sp/>`visitor`<sp/>argument<sp/>should<sp/>be<sp/>an<sp/>object<sp/>with<sp/>two<sp/>public<sp/>methods:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>Status<sp/>VisitNull()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>Status<sp/>VisitValue(&lt;scalar&gt;)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>scalar<sp/>value&apos;s<sp/>type<sp/>depends<sp/>on<sp/>the<sp/>array<sp/>data<sp/>type:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>the<sp/>type&apos;s<sp/>`c_type`,<sp/>if<sp/>any</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>for<sp/>boolean<sp/>arrays,<sp/>a<sp/>`bool`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>for<sp/>binary,<sp/>string<sp/>and<sp/>fixed-size<sp/>binary<sp/>arrays,<sp/>a<sp/>`util::string_view`</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="432" refid="structarrow_1_1_array_data_visitor" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structarrow_1_1_array_data_visitor" kindref="compound">ArrayDataVisitor</ref><sp/>{</highlight></codeline>
<codeline lineno="433" refid="structarrow_1_1_array_data_visitor_1a1a15ff883b0fc6500c3b4374a917a57f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_array_data_visitor_1a1a15ff883b0fc6500c3b4374a917a57f" kindref="member">InlineVisitorType</ref><sp/>=<sp/>internal::ArrayDataInlineVisitor&lt;T&gt;;</highlight></codeline>
<codeline lineno="434" refid="structarrow_1_1_array_data_visitor_1a427721528158fb0a735d8fceeaffa1eb" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_array_data_visitor_1a427721528158fb0a735d8fceeaffa1eb" kindref="member">c_type</ref><sp/>=<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>InlineVisitorType::c_type;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Visitor&gt;</highlight></codeline>
<codeline lineno="437" refid="structarrow_1_1_array_data_visitor_1a63b3c2c8642a0d6139352ab3625e41f0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="structarrow_1_1_array_data_visitor_1a63b3c2c8642a0d6139352ab3625e41f0" kindref="member">Visit</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref>&amp;<sp/>arr,<sp/>Visitor*<sp/>visitor)<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>func<sp/>=<sp/>[visitor](<ref refid="namespacearrow_1_1util_1a37597d23d580458d4547f817e2943744" kindref="member">util::optional&lt;c_type&gt;</ref><sp/>v)<sp/>{</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v.has_value())<sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>visitor-&gt;VisitValue(*v);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>visitor-&gt;VisitNull();</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>InlineVisitorType::VisitStatus(arr,<sp/>std::move(func));</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="447"><highlight class="normal">};</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449" refid="visitor__inline_8h_1a76641c1ee783e3eb14dc9a37a5c62681" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>SCALAR_VISIT_INLINE(TYPE_CLASS)<sp/>\</highlight></codeline>
<codeline lineno="450"><highlight class="preprocessor"><sp/><sp/>case<sp/>TYPE_CLASS##Type::type_id:<sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="451"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>visitor-&gt;Visit(internal::checked_cast&lt;const<sp/>TYPE_CLASS##Scalar&amp;&gt;(scalar));</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VISITOR&gt;</highlight></codeline>
<codeline lineno="454" refid="namespacearrow_1a511650783e127b8c2acb1326b9b94e7a" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="namespacearrow_1a511650783e127b8c2acb1326b9b94e7a" kindref="member">VisitScalarInline</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_scalar" kindref="compound">Scalar</ref>&amp;<sp/><ref refid="namespacearrow_1_1dataset_1abbc0528fcaf8fe939da7b3784bb120d4" kindref="member">scalar</ref>,<sp/>VISITOR*<sp/>visitor)<sp/>{</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(scalar.<ref refid="structarrow_1_1_scalar_1ae3f8aa29da0a3f3ac9d3de6a97818328" kindref="member">type</ref>-&gt;id())<sp/>{</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="visitor__inline_8h_1a74dffd8bdcd9262ebbe538454658f779" kindref="member">ARROW_GENERATE_FOR_ALL_TYPES</ref>(<ref refid="visitor__inline_8h_1a76641c1ee783e3eb14dc9a37a5c62681" kindref="member">SCALAR_VISIT_INLINE</ref>);</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44aaa546143f5b445f6478b7e157546ec3f" kindref="member">Type::INTERVAL</ref>:<sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>interval_type<sp/>=</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal::checked_cast&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_interval_type" kindref="compound">IntervalType</ref>&amp;&gt;(*scalar.<ref refid="structarrow_1_1_scalar_1ae3f8aa29da0a3f3ac9d3de6a97818328" kindref="member">type</ref>);</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interval_type.interval_type()<sp/>==<sp/><ref refid="classarrow_1_1_interval_type_1ae72a8a101c098ebf09ed0af253222eccaebf2d56ec2d1e87647e2880577559f3a" kindref="member">IntervalType::MONTHS</ref>)<sp/>{</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>visitor-&gt;Visit(internal::checked_cast&lt;const<sp/>MonthIntervalScalar&amp;&gt;(scalar));</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(interval_type.interval_type()<sp/>==<sp/><ref refid="classarrow_1_1_interval_type_1ae72a8a101c098ebf09ed0af253222ecca5893bc3e913db19b82ce8e6c52b3c02f" kindref="member">IntervalType::DAY_TIME</ref>)<sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>visitor-&gt;Visit(</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal::checked_cast&lt;const<sp/>DayTimeIntervalScalar&amp;&gt;(scalar));</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1ae63ddaaa7db5edef4e75a26b693351a1" kindref="member">Status::NotImplemented</ref>(</highlight><highlight class="stringliteral">&quot;Scalar<sp/>visitor<sp/>for<sp/>type<sp/>not<sp/>implemented<sp/>&quot;</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scalar.<ref refid="structarrow_1_1_scalar_1ae3f8aa29da0a3f3ac9d3de6a97818328" kindref="member">type</ref>-&gt;ToString());</highlight></codeline>
<codeline lineno="473"><highlight class="normal">}</highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>TYPE_VISIT_INLINE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Visit<sp/>a<sp/>null<sp/>bitmap,<sp/>in<sp/>order,<sp/>without<sp/>overhead.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>given<sp/>`VisitFunc`<sp/>should<sp/>be<sp/>a<sp/>callable<sp/>with<sp/>either<sp/>of<sp/>these<sp/>signatures:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>void(bool<sp/>is_valid)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight><highlight class="comment">//<sp/>-<sp/>Status(bool<sp/>is_valid)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VisitFunc&gt;</highlight></codeline>
<codeline lineno="484"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>internal::call_traits::enable_if_return&lt;VisitFunc,<sp/>Status&gt;::type</highlight></codeline>
<codeline lineno="485" refid="namespacearrow_1a584027e59cc605219695aaadf50ed2df" refkind="member"><highlight class="normal"><ref refid="namespacearrow_1a584027e59cc605219695aaadf50ed2df" kindref="member">VisitNullBitmapInline</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>valid_bits,<sp/>int64_t<sp/>valid_bits_offset,</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>num_values,<sp/>int64_t<sp/>null_count,<sp/>VisitFunc&amp;&amp;<sp/>func)<sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(null_count<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>internal::BitmapReader<sp/>bit_reader(valid_bits,<sp/>valid_bits_offset,<sp/>num_values);</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_values;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="status_8h_1a0a03bcf7fdbd9a96c67afa05fc0a545d" kindref="member">RETURN_NOT_OK</ref>(func(bit_reader.IsSet()));</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bit_reader.Next();</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_values;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="status_8h_1a0a03bcf7fdbd9a96c67afa05fc0a545d" kindref="member">RETURN_NOT_OK</ref>(func(</highlight><highlight class="keyword">true</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1a5c0b0031db6eeec3dcc70485d24cfe03" kindref="member">Status::OK</ref>();</highlight></codeline>
<codeline lineno="499"><highlight class="normal">}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>VisitFunc&gt;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>internal::call_traits::enable_if_return&lt;VisitFunc,<sp/>void&gt;::type</highlight></codeline>
<codeline lineno="503" refid="namespacearrow_1ad71c7a67f4fdbcc165276f04d955e5ec" refkind="member"><highlight class="normal"><ref refid="namespacearrow_1a584027e59cc605219695aaadf50ed2df" kindref="member">VisitNullBitmapInline</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>valid_bits,<sp/>int64_t<sp/>valid_bits_offset,</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>num_values,<sp/>int64_t<sp/>null_count,<sp/>VisitFunc&amp;&amp;<sp/>func)<sp/>{</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(null_count<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>internal::BitmapReader<sp/>bit_reader(valid_bits,<sp/>valid_bits_offset,<sp/>num_values);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_values;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>func(bit_reader.IsSet());</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>bit_reader.Next();</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(int64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_values;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>func(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="516"><highlight class="normal">}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"></highlight></codeline>
<codeline lineno="518"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>arrow</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/arrow/cpp/src/arrow/visitor_inline.h"/>
  </compounddef>
</doxygen>
