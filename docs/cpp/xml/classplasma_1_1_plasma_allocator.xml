<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classplasma_1_1_plasma_allocator" kind="class" language="C++" prot="public">
    <compoundname>plasma::PlasmaAllocator</compoundname>
    <includes refid="plasma__allocator_8h" local="no">plasma/plasma_allocator.h</includes>
      <sectiondef kind="private-static-attrib">
      <memberdef kind="variable" id="classplasma_1_1_plasma_allocator_1a6d0c6c1a522155409b9cbb14e64f6bf1" prot="private" static="yes" mutable="no">
        <type>int64_t</type>
        <definition>int64_t plasma::PlasmaAllocator::allocated_</definition>
        <argsstring></argsstring>
        <name>allocated_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/plasma_allocator.h" line="57" column="1" bodyfile="/arrow/cpp/src/plasma/plasma_allocator.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classplasma_1_1_plasma_allocator_1a394f893bfec7ad8d7dfa5c5cb407ed96" prot="private" static="yes" mutable="no">
        <type>int64_t</type>
        <definition>int64_t plasma::PlasmaAllocator::footprint_limit_</definition>
        <argsstring></argsstring>
        <name>footprint_limit_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/plasma_allocator.h" line="58" column="1" bodyfile="/arrow/cpp/src/plasma/plasma_allocator.h" bodystart="58" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classplasma_1_1_plasma_allocator_1adb9d65991f22a0b6c31b839efae4bc63" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>static void* plasma::PlasmaAllocator::Memalign</definition>
        <argsstring>(size_t alignment, size_t bytes)</argsstring>
        <name>Memalign</name>
        <param>
          <type>size_t</type>
          <declname>alignment</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>Allocates size bytes and returns a pointer to the allocated memory. </para>        </briefdescription>
        <detaileddescription>
<para>The memory address will be a multiple of alignment, which must be a power of two.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alignment</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory alignment. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to allocated memory. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/plasma_allocator.h" line="33" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_allocator_1a516d0d53d2db2a8a52f7f207f205a964" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void plasma::PlasmaAllocator::Free</definition>
        <argsstring>(void *mem, size_t bytes)</argsstring>
        <name>Free</name>
        <param>
          <type>void *</type>
          <declname>mem</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>Frees the memory space pointed to by mem, which must have been returned by a previous call to <ref refid="classplasma_1_1_plasma_allocator_1adb9d65991f22a0b6c31b839efae4bc63" kindref="member">Memalign()</ref> </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>mem</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to memory to free. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Number of bytes to be freed. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/plasma_allocator.h" line="40" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_allocator_1a527f9841522a2440b1b79b32d92f2aa8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void plasma::PlasmaAllocator::SetFootprintLimit</definition>
        <argsstring>(size_t bytes)</argsstring>
        <name>SetFootprintLimit</name>
        <param>
          <type>size_t</type>
          <declname>bytes</declname>
        </param>
        <briefdescription>
<para>Sets the memory footprint limit for Plasma. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Plasma memory footprint limit in bytes. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/plasma_allocator.h" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_allocator_1a5218faf961a76326e213cdfec75e238c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>static int64_t plasma::PlasmaAllocator::GetFootprintLimit</definition>
        <argsstring>()</argsstring>
        <name>GetFootprintLimit</name>
        <briefdescription>
<para>Get the memory footprint limit for Plasma. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Plasma memory footprint limit in bytes. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/plasma_allocator.h" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_plasma_allocator_1ae6d3718ef418172f610288636c1850c6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>static int64_t plasma::PlasmaAllocator::Allocated</definition>
        <argsstring>()</argsstring>
        <name>Allocated</name>
        <briefdescription>
<para>Get the number of bytes allocated by Plasma so far. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Number of bytes allocated by Plasma so far. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/plasma_allocator.h" line="54" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/plasma/plasma_allocator.h" line="25" column="1" bodyfile="/arrow/cpp/src/plasma/plasma_allocator.h" bodystart="25" bodyend="59"/>
    <listofallmembers>
      <member refid="classplasma_1_1_plasma_allocator_1ae6d3718ef418172f610288636c1850c6" prot="public" virt="non-virtual"><scope>plasma::PlasmaAllocator</scope><name>Allocated</name></member>
      <member refid="classplasma_1_1_plasma_allocator_1a6d0c6c1a522155409b9cbb14e64f6bf1" prot="private" virt="non-virtual"><scope>plasma::PlasmaAllocator</scope><name>allocated_</name></member>
      <member refid="classplasma_1_1_plasma_allocator_1a394f893bfec7ad8d7dfa5c5cb407ed96" prot="private" virt="non-virtual"><scope>plasma::PlasmaAllocator</scope><name>footprint_limit_</name></member>
      <member refid="classplasma_1_1_plasma_allocator_1a516d0d53d2db2a8a52f7f207f205a964" prot="public" virt="non-virtual"><scope>plasma::PlasmaAllocator</scope><name>Free</name></member>
      <member refid="classplasma_1_1_plasma_allocator_1a5218faf961a76326e213cdfec75e238c" prot="public" virt="non-virtual"><scope>plasma::PlasmaAllocator</scope><name>GetFootprintLimit</name></member>
      <member refid="classplasma_1_1_plasma_allocator_1adb9d65991f22a0b6c31b839efae4bc63" prot="public" virt="non-virtual"><scope>plasma::PlasmaAllocator</scope><name>Memalign</name></member>
      <member refid="classplasma_1_1_plasma_allocator_1a527f9841522a2440b1b79b32d92f2aa8" prot="public" virt="non-virtual"><scope>plasma::PlasmaAllocator</scope><name>SetFootprintLimit</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
