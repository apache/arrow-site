<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classparquet_1_1_typed_column_reader" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>parquet::TypedColumnReader</compoundname>
    <basecompoundref refid="classparquet_1_1_column_reader" prot="public" virt="non-virtual">parquet::ColumnReader</basecompoundref>
    <includes refid="column__reader_8h" local="no">parquet/column_reader.h</includes>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>DType</declname>
        <defname>DType</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classparquet_1_1_typed_column_reader_1a21c95b1d5918815dfef28b31063d1f5a" prot="public" static="no">
        <type>DType::c_type</type>
        <definition>typedef DType::c_type parquet::TypedColumnReader&lt; DType &gt;::T</definition>
        <argsstring></argsstring>
        <name>T</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/column_reader.h" line="135" column="1" bodyfile="/arrow/cpp/src/parquet/column_reader.h" bodystart="135" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classparquet_1_1_typed_column_reader_1aab05717e88e2f6d17a7a0f4925921440" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>int64_t</type>
        <definition>virtual int64_t parquet::TypedColumnReader&lt; DType &gt;::ReadBatch</definition>
        <argsstring>(int64_t batch_size, int16_t *def_levels, int16_t *rep_levels, T *values, int64_t *values_read)=0</argsstring>
        <name>ReadBatch</name>
        <param>
          <type>int64_t</type>
          <declname>batch_size</declname>
        </param>
        <param>
          <type>int16_t *</type>
          <declname>def_levels</declname>
        </param>
        <param>
          <type>int16_t *</type>
          <declname>rep_levels</declname>
        </param>
        <param>
          <type><ref refid="classparquet_1_1_typed_column_reader_1a21c95b1d5918815dfef28b31063d1f5a" kindref="member">T</ref> *</type>
          <declname>values</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>values_read</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/column_reader.h" line="154" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_typed_column_reader_1a39d13b02edfd5489a281323a15d6dbe1" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>int64_t</type>
        <definition>virtual int64_t parquet::TypedColumnReader&lt; DType &gt;::ReadBatchSpaced</definition>
        <argsstring>(int64_t batch_size, int16_t *def_levels, int16_t *rep_levels, T *values, uint8_t *valid_bits, int64_t valid_bits_offset, int64_t *levels_read, int64_t *values_read, int64_t *null_count)=0</argsstring>
        <name>ReadBatchSpaced</name>
        <param>
          <type>int64_t</type>
          <declname>batch_size</declname>
        </param>
        <param>
          <type>int16_t *</type>
          <declname>def_levels</declname>
        </param>
        <param>
          <type>int16_t *</type>
          <declname>rep_levels</declname>
        </param>
        <param>
          <type><ref refid="classparquet_1_1_typed_column_reader_1a21c95b1d5918815dfef28b31063d1f5a" kindref="member">T</ref> *</type>
          <declname>values</declname>
        </param>
        <param>
          <type>uint8_t *</type>
          <declname>valid_bits</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>valid_bits_offset</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>levels_read</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>values_read</declname>
        </param>
        <param>
          <type>int64_t *</type>
          <declname>null_count</declname>
        </param>
        <briefdescription>
<para>Read a batch of repetition levels, definition levels, and values from the column and leave spaces for null entries on the lowest level in the values buffer. </para>        </briefdescription>
        <detaileddescription>
<para>In comparison to ReadBatch the length of repetition and definition levels is the same as of the number of values read for max_definition_level == 1. In the case of max_definition_level &gt; 1, the repetition and definition levels are larger than the values but the values include the null entries with definition_level == (max_definition_level - 1).</para><para>To fully exhaust a row group, you must read batches until the number of values read reaches the number of stored values according to the metadata.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>batch_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of levels to read </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">def_levels</parametername>
</parameternamelist>
<parameterdescription>
<para>The Parquet definition levels, output has the length levels_read. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">rep_levels</parametername>
</parameternamelist>
<parameterdescription>
<para>The Parquet repetition levels, output has the length levels_read. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">values</parametername>
</parameternamelist>
<parameterdescription>
<para>The values in the lowest nested level including spacing for nulls on the lowest levels; output has the length values_read. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">valid_bits</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory allocated for a bitmap that indicates if the row is null or on the maximum definition level. For performance reasons the underlying buffer should be able to store 1 bit more than required. If this requires an additional byte, this byte is only read but never written to. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>valid_bits_offset</parametername>
</parameternamelist>
<parameterdescription>
<para>The offset in bits of the valid_bits where the first relevant bit resides. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">levels_read</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of repetition/definition levels that were read. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">values_read</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of values read, this includes all non-null entries as well as all null-entries on the lowest level (i.e. definition_level == max_definition_level - 1) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">null_count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of nulls on the lowest levels. (i.e. (values_read - null_count) is total number of non-null entries) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/column_reader.h" line="191" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_typed_column_reader_1ad1db500a5424a3e3360df1b71cd7c931" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>int64_t</type>
        <definition>virtual int64_t parquet::TypedColumnReader&lt; DType &gt;::Skip</definition>
        <argsstring>(int64_t num_rows_to_skip)=0</argsstring>
        <name>Skip</name>
        <param>
          <type>int64_t</type>
          <declname>num_rows_to_skip</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/column_reader.h" line="198" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4748">
        <label>parquet::ColumnReader</label>
        <link refid="classparquet_1_1_column_reader"/>
      </node>
      <node id="4747">
        <label>parquet::TypedColumnReader&lt; DType &gt;</label>
        <link refid="classparquet_1_1_typed_column_reader"/>
        <childnode refid="4748" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4750">
        <label>parquet::ColumnReader</label>
        <link refid="classparquet_1_1_column_reader"/>
      </node>
      <node id="4749">
        <label>parquet::TypedColumnReader&lt; DType &gt;</label>
        <link refid="classparquet_1_1_typed_column_reader"/>
        <childnode refid="4750" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/parquet/column_reader.h" line="133" column="1" bodyfile="/arrow/cpp/src/parquet/column_reader.h" bodystart="133" bodyend="199"/>
    <listofallmembers>
      <member refid="classparquet_1_1_column_reader_1acfe43003e1ea3095144faa058c282ae4" prot="public" virt="pure-virtual"><scope>parquet::TypedColumnReader</scope><name>descr</name></member>
      <member refid="classparquet_1_1_column_reader_1af4d71255518e448994895417aacb0cc8" prot="public" virt="pure-virtual"><scope>parquet::TypedColumnReader</scope><name>HasNext</name></member>
      <member refid="classparquet_1_1_column_reader_1a1ad9510f20dabcb46670b06485a6a6ac" prot="public" virt="non-virtual"><scope>parquet::TypedColumnReader</scope><name>Make</name></member>
      <member refid="classparquet_1_1_typed_column_reader_1aab05717e88e2f6d17a7a0f4925921440" prot="public" virt="pure-virtual"><scope>parquet::TypedColumnReader</scope><name>ReadBatch</name></member>
      <member refid="classparquet_1_1_typed_column_reader_1a39d13b02edfd5489a281323a15d6dbe1" prot="public" virt="pure-virtual"><scope>parquet::TypedColumnReader</scope><name>ReadBatchSpaced</name></member>
      <member refid="classparquet_1_1_typed_column_reader_1ad1db500a5424a3e3360df1b71cd7c931" prot="public" virt="pure-virtual"><scope>parquet::TypedColumnReader</scope><name>Skip</name></member>
      <member refid="classparquet_1_1_typed_column_reader_1a21c95b1d5918815dfef28b31063d1f5a" prot="public" virt="non-virtual"><scope>parquet::TypedColumnReader</scope><name>T</name></member>
      <member refid="classparquet_1_1_column_reader_1a7fe6a1369a4e2ed8ada6b4a66ddc9b75" prot="public" virt="pure-virtual"><scope>parquet::TypedColumnReader</scope><name>type</name></member>
      <member refid="classparquet_1_1_column_reader_1ac8606500cf6bae21855854da49927380" prot="public" virt="virtual"><scope>parquet::TypedColumnReader</scope><name>~ColumnReader</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
