<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structarrow_1_1flight_1_1_ticket" kind="struct" language="C++" prot="public">
    <compoundname>arrow::flight::Ticket</compoundname>
    <includes refid="arrow_2flight_2types_8h" local="no">arrow/flight/types.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="structarrow_1_1flight_1_1_ticket_1aebde6e2b07e45f50c558ce4ade3c3a92" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string arrow::flight::Ticket::ticket</definition>
        <argsstring></argsstring>
        <name>ticket</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="236" column="1" bodyfile="/arrow/cpp/src/arrow/flight/types.h" bodystart="236" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structarrow_1_1flight_1_1_ticket_1aee490ddefc4063d0012521a2241c8c05" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::flight::Ticket::Equals</definition>
        <argsstring>(const Ticket &amp;other) const</argsstring>
        <name>Equals</name>
        <param>
          <type>const <ref refid="structarrow_1_1flight_1_1_ticket" kindref="compound">Ticket</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="238" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1flight_1_1_ticket_1a78e2339782faf566cfb2557ac2220125" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::flight::Ticket::SerializeToString</definition>
        <argsstring>(std::string *out) const</argsstring>
        <name>SerializeToString</name>
        <param>
          <type>std::string *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Get the wire-format representation of this type. </para>        </briefdescription>
        <detaileddescription>
<para>Useful when interoperating with non-Flight systems (e.g. REST services) that may want to return Flight types. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="251" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structarrow_1_1flight_1_1_ticket_1ae7812df8c8772b34348a863d352d716f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Ticket &amp;left, const Ticket &amp;right)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structarrow_1_1flight_1_1_ticket" kindref="compound">Ticket</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1flight_1_1_ticket" kindref="compound">Ticket</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="240" column="1" bodyfile="/arrow/cpp/src/arrow/flight/types.h" bodystart="240" bodyend="242"/>
      </memberdef>
      <memberdef kind="friend" id="structarrow_1_1flight_1_1_ticket_1ab91e7ac2c575299045cfd63f061f2e60" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const Ticket &amp;left, const Ticket &amp;right)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structarrow_1_1flight_1_1_ticket" kindref="compound">Ticket</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1flight_1_1_ticket" kindref="compound">Ticket</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="243" column="1" bodyfile="/arrow/cpp/src/arrow/flight/types.h" bodystart="243" bodyend="245"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structarrow_1_1flight_1_1_ticket_1ae0f91bbf92f83db03f67e34870236487" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::flight::Ticket::Deserialize</definition>
        <argsstring>(const std::string &amp;serialized, Ticket *out)</argsstring>
        <name>Deserialize</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>serialized</declname>
        </param>
        <param>
          <type><ref refid="structarrow_1_1flight_1_1_ticket" kindref="compound">Ticket</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Parse the wire-format representation of this type. </para>        </briefdescription>
        <detaileddescription>
<para>Useful when interoperating with non-Flight systems (e.g. REST services) that may want to return Flight types. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="257" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Data structure providing an opaque identifier or credential to use when requesting a data stream with the DoGet RPC. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/arrow/flight/types.h" line="235" column="1" bodyfile="/arrow/cpp/src/arrow/flight/types.h" bodystart="235" bodyend="258"/>
    <listofallmembers>
      <member refid="structarrow_1_1flight_1_1_ticket_1ae0f91bbf92f83db03f67e34870236487" prot="public" virt="non-virtual"><scope>arrow::flight::Ticket</scope><name>Deserialize</name></member>
      <member refid="structarrow_1_1flight_1_1_ticket_1aee490ddefc4063d0012521a2241c8c05" prot="public" virt="non-virtual"><scope>arrow::flight::Ticket</scope><name>Equals</name></member>
      <member refid="structarrow_1_1flight_1_1_ticket_1ab91e7ac2c575299045cfd63f061f2e60" prot="public" virt="non-virtual"><scope>arrow::flight::Ticket</scope><name>operator!=</name></member>
      <member refid="structarrow_1_1flight_1_1_ticket_1ae7812df8c8772b34348a863d352d716f" prot="public" virt="non-virtual"><scope>arrow::flight::Ticket</scope><name>operator==</name></member>
      <member refid="structarrow_1_1flight_1_1_ticket_1a78e2339782faf566cfb2557ac2220125" prot="public" virt="non-virtual"><scope>arrow::flight::Ticket</scope><name>SerializeToString</name></member>
      <member refid="structarrow_1_1flight_1_1_ticket_1aebde6e2b07e45f50c558ce4ade3c3a92" prot="public" virt="non-virtual"><scope>arrow::flight::Ticket</scope><name>ticket</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
