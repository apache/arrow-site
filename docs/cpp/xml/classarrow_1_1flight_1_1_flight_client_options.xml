<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1flight_1_1_flight_client_options" kind="class" language="C++" prot="public">
    <compoundname>arrow::flight::FlightClientOptions</compoundname>
    <includes refid="arrow_2flight_2client_8h" local="no">arrow/flight/client.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classarrow_1_1flight_1_1_flight_client_options_1add5f255e136e5d25243a504bfbe90958" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string arrow::flight::FlightClientOptions::tls_root_certs</definition>
        <argsstring></argsstring>
        <name>tls_root_certs</name>
        <briefdescription>
<para>Root certificates to use for validating server certificates. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/client.h" line="67" column="1" bodyfile="/arrow/cpp/src/arrow/flight/client.h" bodystart="67" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1flight_1_1_flight_client_options_1a494b451fcfece2fd181c609cfe4f0e4b" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string arrow::flight::FlightClientOptions::override_hostname</definition>
        <argsstring></argsstring>
        <name>override_hostname</name>
        <briefdescription>
<para>Override the hostname checked by TLS. Use with caution. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/client.h" line="69" column="1" bodyfile="/arrow/cpp/src/arrow/flight/client.h" bodystart="69" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1flight_1_1_flight_client_options_1a1b798cd0468120edb6a2acf7a87e931b" prot="public" static="no" mutable="no">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1flight_1_1_client_middleware_factory" kindref="compound">ClientMiddlewareFactory</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;ClientMiddlewareFactory&gt; &gt; arrow::flight::FlightClientOptions::middleware</definition>
        <argsstring></argsstring>
        <name>middleware</name>
        <briefdescription>
<para>A list of client middleware to apply. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/client.h" line="71" column="1" bodyfile="/arrow/cpp/src/arrow/flight/client.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/arrow/flight/client.h" line="63" column="1" bodyfile="/arrow/cpp/src/arrow/flight/client.h" bodystart="63" bodyend="72"/>
    <listofallmembers>
      <member refid="classarrow_1_1flight_1_1_flight_client_options_1a1b798cd0468120edb6a2acf7a87e931b" prot="public" virt="non-virtual"><scope>arrow::flight::FlightClientOptions</scope><name>middleware</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_client_options_1a494b451fcfece2fd181c609cfe4f0e4b" prot="public" virt="non-virtual"><scope>arrow::flight::FlightClientOptions</scope><name>override_hostname</name></member>
      <member refid="classarrow_1_1flight_1_1_flight_client_options_1add5f255e136e5d25243a504bfbe90958" prot="public" virt="non-virtual"><scope>arrow::flight::FlightClientOptions</scope><name>tls_root_certs</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
