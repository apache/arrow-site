<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="rle__encoding_8h" kind="file" language="C++">
    <compoundname>rle_encoding.h</compoundname>
    <includes local="no">algorithm</includes>
    <includes local="no">cmath</includes>
    <includes local="no">vector</includes>
    <includes refid="bit__stream__utils_8h" local="yes">arrow/util/bit_stream_utils.h</includes>
    <includes refid="bit__util_8h" local="yes">arrow/util/bit_util.h</includes>
    <includes refid="macros_8h" local="yes">arrow/util/macros.h</includes>
    <incdepgraph>
      <node id="13446">
        <label>arrow/util/compare.h</label>
        <link refid="util_2compare_8h"/>
        <childnode refid="13438" relation="include">
        </childnode>
        <childnode refid="13439" relation="include">
        </childnode>
        <childnode refid="13440" relation="include">
        </childnode>
        <childnode refid="13445" relation="include">
        </childnode>
      </node>
      <node id="13459">
        <label>arrow/util/bpacking_default.h</label>
        <link refid="bpacking__default_8h"/>
      </node>
      <node id="13437">
        <label>limits</label>
      </node>
      <node id="13428">
        <label>cstdint</label>
      </node>
      <node id="13441">
        <label>arrow/buffer.h</label>
        <link refid="buffer_8h"/>
        <childnode refid="13428" relation="include">
        </childnode>
        <childnode refid="13436" relation="include">
        </childnode>
        <childnode refid="13438" relation="include">
        </childnode>
        <childnode refid="13426" relation="include">
        </childnode>
        <childnode refid="13439" relation="include">
        </childnode>
        <childnode refid="13440" relation="include">
        </childnode>
        <childnode refid="13423" relation="include">
        </childnode>
        <childnode refid="13442" relation="include">
        </childnode>
        <childnode refid="13443" relation="include">
        </childnode>
        <childnode refid="13447" relation="include">
        </childnode>
        <childnode refid="13444" relation="include">
        </childnode>
        <childnode refid="13445" relation="include">
        </childnode>
        <childnode refid="13427" relation="include">
        </childnode>
        <childnode refid="13430" relation="include">
        </childnode>
      </node>
      <node id="13432">
        <label>endian.h</label>
      </node>
      <node id="13447">
        <label>arrow/status.h</label>
        <link refid="status_8h"/>
        <childnode refid="13436" relation="include">
        </childnode>
        <childnode refid="13448" relation="include">
        </childnode>
        <childnode refid="13438" relation="include">
        </childnode>
        <childnode refid="13426" relation="include">
        </childnode>
        <childnode refid="13440" relation="include">
        </childnode>
        <childnode refid="13446" relation="include">
        </childnode>
        <childnode refid="13445" relation="include">
        </childnode>
        <childnode refid="13449" relation="include">
        </childnode>
        <childnode refid="13430" relation="include">
        </childnode>
      </node>
      <node id="13453">
        <label>arrow/util/functional.h</label>
        <link refid="functional_8h"/>
        <childnode refid="13454" relation="include">
        </childnode>
        <childnode refid="13439" relation="include">
        </childnode>
        <childnode refid="13445" relation="include">
        </childnode>
      </node>
      <node id="13444">
        <label>arrow/type_fwd.h</label>
        <link refid="type__fwd_8h"/>
        <childnode refid="13438" relation="include">
        </childnode>
        <childnode refid="13426" relation="include">
        </childnode>
        <childnode refid="13423" relation="include">
        </childnode>
        <childnode refid="13445" relation="include">
        </childnode>
        <childnode refid="13430" relation="include">
        </childnode>
      </node>
      <node id="13422">
        <label>cmath</label>
      </node>
      <node id="13435">
        <label>cassert</label>
      </node>
      <node id="13424">
        <label>arrow/util/bit_stream_utils.h</label>
        <link refid="bit__stream__utils_8h"/>
        <childnode refid="13425" relation="include">
        </childnode>
        <childnode refid="13421" relation="include">
        </childnode>
        <childnode refid="13428" relation="include">
        </childnode>
        <childnode refid="13431" relation="include">
        </childnode>
        <childnode refid="13456" relation="include">
        </childnode>
        <childnode refid="13457" relation="include">
        </childnode>
        <childnode refid="13445" relation="include">
        </childnode>
      </node>
      <node id="13426">
        <label>string</label>
      </node>
      <node id="13429">
        <label>arrow/vendored/string_view.hpp</label>
      </node>
      <node id="13450">
        <label>ostream</label>
      </node>
      <node id="13430">
        <label>arrow/util/visibility.h</label>
        <link refid="arrow_2util_2visibility_8h"/>
      </node>
      <node id="13457">
        <label>arrow/util/logging.h</label>
        <link refid="arrow_2util_2logging_8h"/>
        <childnode refid="13438" relation="include">
        </childnode>
        <childnode refid="13450" relation="include">
        </childnode>
        <childnode refid="13426" relation="include">
        </childnode>
        <childnode refid="13445" relation="include">
        </childnode>
        <childnode refid="13430" relation="include">
        </childnode>
      </node>
      <node id="13442">
        <label>arrow/device.h</label>
        <link refid="device_8h"/>
        <childnode refid="13428" relation="include">
        </childnode>
        <childnode refid="13438" relation="include">
        </childnode>
        <childnode refid="13426" relation="include">
        </childnode>
        <childnode refid="13443" relation="include">
        </childnode>
        <childnode refid="13444" relation="include">
        </childnode>
        <childnode refid="13446" relation="include">
        </childnode>
        <childnode refid="13445" relation="include">
        </childnode>
        <childnode refid="13430" relation="include">
        </childnode>
      </node>
      <node id="13425">
        <label>string.h</label>
        <link refid="string_8h"/>
        <childnode refid="13426" relation="include">
        </childnode>
        <childnode refid="13423" relation="include">
        </childnode>
        <childnode refid="13427" relation="include">
        </childnode>
        <childnode refid="13430" relation="include">
        </childnode>
      </node>
      <node id="13431">
        <label>arrow/util/bit_util.h</label>
        <link refid="bit__util_8h"/>
        <childnode refid="13432" relation="include">
        </childnode>
        <childnode refid="13421" relation="include">
        </childnode>
        <childnode refid="13433" relation="include">
        </childnode>
        <childnode refid="13434" relation="include">
        </childnode>
        <childnode refid="13435" relation="include">
        </childnode>
        <childnode refid="13422" relation="include">
        </childnode>
        <childnode refid="13428" relation="include">
        </childnode>
        <childnode refid="13436" relation="include">
        </childnode>
        <childnode refid="13437" relation="include">
        </childnode>
        <childnode refid="13438" relation="include">
        </childnode>
        <childnode refid="13426" relation="include">
        </childnode>
        <childnode refid="13439" relation="include">
        </childnode>
        <childnode refid="13440" relation="include">
        </childnode>
        <childnode refid="13423" relation="include">
        </childnode>
        <childnode refid="13441" relation="include">
        </childnode>
        <childnode refid="13451" relation="include">
        </childnode>
        <childnode refid="13446" relation="include">
        </childnode>
        <childnode refid="13453" relation="include">
        </childnode>
        <childnode refid="13445" relation="include">
        </childnode>
        <childnode refid="13449" relation="include">
        </childnode>
        <childnode refid="13427" relation="include">
        </childnode>
        <childnode refid="13455" relation="include">
        </childnode>
        <childnode refid="13430" relation="include">
        </childnode>
      </node>
      <node id="13434">
        <label>bitset</label>
      </node>
      <node id="13454">
        <label>tuple</label>
      </node>
      <node id="13423">
        <label>vector</label>
      </node>
      <node id="13452">
        <label>new</label>
      </node>
      <node id="13440">
        <label>utility</label>
      </node>
      <node id="13427">
        <label>arrow/util/string_view.h</label>
        <link refid="string__view_8h"/>
        <childnode refid="13428" relation="include">
        </childnode>
        <childnode refid="13426" relation="include">
        </childnode>
        <childnode refid="13429" relation="include">
        </childnode>
      </node>
      <node id="13433">
        <label>array</label>
      </node>
      <node id="13443">
        <label>arrow/io/type_fwd.h</label>
        <link refid="io_2type__fwd_8h"/>
      </node>
      <node id="13448">
        <label>iosfwd</label>
      </node>
      <node id="13451">
        <label>arrow/result.h</label>
        <link refid="result_8h"/>
        <childnode refid="13452" relation="include">
        </childnode>
        <childnode refid="13426" relation="include">
        </childnode>
        <childnode refid="13439" relation="include">
        </childnode>
        <childnode refid="13440" relation="include">
        </childnode>
        <childnode refid="13447" relation="include">
        </childnode>
        <childnode refid="13446" relation="include">
        </childnode>
      </node>
      <node id="13458">
        <label>arrow/util/ubsan.h</label>
        <link refid="ubsan_8h"/>
        <childnode refid="13436" relation="include">
        </childnode>
        <childnode refid="13438" relation="include">
        </childnode>
        <childnode refid="13439" relation="include">
        </childnode>
        <childnode refid="13445" relation="include">
        </childnode>
      </node>
      <node id="13439">
        <label>type_traits</label>
      </node>
      <node id="13421">
        <label>algorithm</label>
      </node>
      <node id="13436">
        <label>cstring</label>
      </node>
      <node id="13449">
        <label>arrow/util/string_builder.h</label>
        <link refid="string__builder_8h"/>
        <childnode refid="13438" relation="include">
        </childnode>
        <childnode refid="13450" relation="include">
        </childnode>
        <childnode refid="13426" relation="include">
        </childnode>
        <childnode refid="13440" relation="include">
        </childnode>
        <childnode refid="13430" relation="include">
        </childnode>
      </node>
      <node id="13438">
        <label>memory</label>
      </node>
      <node id="13445">
        <label>arrow/util/macros.h</label>
        <link refid="macros_8h"/>
        <childnode refid="13428" relation="include">
        </childnode>
      </node>
      <node id="13456">
        <label>arrow/util/bpacking.h</label>
        <link refid="bpacking_8h"/>
        <childnode refid="13457" relation="include">
        </childnode>
        <childnode refid="13458" relation="include">
        </childnode>
        <childnode refid="13459" relation="include">
        </childnode>
      </node>
      <node id="13455">
        <label>arrow/util/type_traits.h</label>
        <link refid="util_2type__traits_8h"/>
        <childnode refid="13439" relation="include">
        </childnode>
      </node>
      <node id="13420">
        <label>/arrow/cpp/src/arrow/util/rle_encoding.h</label>
        <link refid="rle__encoding_8h"/>
        <childnode refid="13421" relation="include">
        </childnode>
        <childnode refid="13422" relation="include">
        </childnode>
        <childnode refid="13423" relation="include">
        </childnode>
        <childnode refid="13424" relation="include">
        </childnode>
        <childnode refid="13431" relation="include">
        </childnode>
        <childnode refid="13445" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <innerclass refid="classarrow_1_1util_1_1_rle_decoder" prot="public">arrow::util::RleDecoder</innerclass>
    <innerclass refid="classarrow_1_1util_1_1_rle_encoder" prot="public">arrow::util::RleEncoder</innerclass>
    <innernamespace refid="namespacearrow">arrow</innernamespace>
    <innernamespace refid="namespacearrow_1_1util">arrow::util</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Imported<sp/>from<sp/>Apache<sp/>Impala<sp/>(incubating)<sp/>on<sp/>2016-01-29<sp/>and<sp/>modified<sp/>for<sp/>use</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">//<sp/>in<sp/>parquet-cpp,<sp/>Arrow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="bit__stream__utils_8h" kindref="compound">arrow/util/bit_stream_utils.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="bit__util_8h" kindref="compound">arrow/util/bit_util.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="macros_8h" kindref="compound">arrow/util/macros.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacearrow" kindref="compound">arrow</ref><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">util<sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="comment">//</highlight></codeline>
<codeline lineno="55"><highlight class="comment"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="65"><highlight class="comment"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="71"><highlight class="comment"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="77"><highlight class="comment"></highlight><highlight class="comment">//</highlight></codeline>
<codeline lineno="82"><highlight class="comment"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="85" refid="classarrow_1_1util_1_1_rle_decoder" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classarrow_1_1util_1_1_rle_decoder" kindref="compound">RleDecoder</ref><sp/>{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="89" refid="classarrow_1_1util_1_1_rle_decoder_1aaebb3e3674a08e0cdf1c7658e562543a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1aaebb3e3674a08e0cdf1c7658e562543a" kindref="member">RleDecoder</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>buffer_len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit_width)</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1abc4bbe1847bd0dd04a51f81972d846e7" kindref="member">bit_reader_</ref>(buffer,<sp/>buffer_len),</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a43e57698def7bfd3cc7da70cb2979835" kindref="member">bit_width_</ref>(bit_width),</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a5083cb6107087bce883571c34f37b619" kindref="member">current_value_</ref>(0),</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a558ea1da20bf44666f7b5e7b9b0dba3d" kindref="member">repeat_count_</ref>(0),</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1ab3949c9b7429d7c5eca6b0e7785d4114" kindref="member">literal_count_</ref>(0)<sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="arrow_2util_2logging_8h_1aece88ac235225ad03cf77868a931cc83" kindref="member">DCHECK_GE</ref>(<ref refid="classarrow_1_1util_1_1_rle_decoder_1a43e57698def7bfd3cc7da70cb2979835" kindref="member">bit_width_</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="arrow_2util_2logging_8h_1a9fe3823537dcd0e93ddd2410d25de11a" kindref="member">DCHECK_LE</ref>(<ref refid="classarrow_1_1util_1_1_rle_decoder_1a43e57698def7bfd3cc7da70cb2979835" kindref="member">bit_width_</ref>,<sp/>64);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="classarrow_1_1util_1_1_rle_decoder_1a25ddb7000f17bb7c694217afcacaf47c" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a25ddb7000f17bb7c694217afcacaf47c" kindref="member">RleDecoder</ref>()<sp/>:<sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a43e57698def7bfd3cc7da70cb2979835" kindref="member">bit_width_</ref>(-1)<sp/>{}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="classarrow_1_1util_1_1_rle_decoder_1a4424bd7ca2e897d429f94ee0d8d2d219" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a4424bd7ca2e897d429f94ee0d8d2d219" kindref="member">Reset</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>buffer_len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit_width)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="arrow_2util_2logging_8h_1aece88ac235225ad03cf77868a931cc83" kindref="member">DCHECK_GE</ref>(bit_width,<sp/>0);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="arrow_2util_2logging_8h_1a9fe3823537dcd0e93ddd2410d25de11a" kindref="member">DCHECK_LE</ref>(bit_width,<sp/>64);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1abc4bbe1847bd0dd04a51f81972d846e7" kindref="member">bit_reader_</ref>.Reset(buffer,<sp/>buffer_len);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a43e57698def7bfd3cc7da70cb2979835" kindref="member">bit_width_</ref><sp/>=<sp/>bit_width;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a5083cb6107087bce883571c34f37b619" kindref="member">current_value_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a558ea1da20bf44666f7b5e7b9b0dba3d" kindref="member">repeat_count_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1ab3949c9b7429d7c5eca6b0e7785d4114" kindref="member">literal_count_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1adf113d49f938fcfeb11431e186d62d11" kindref="member">Get</ref>(T*<sp/>val);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a5fddb45e23c7d3b0210f0851d3c91764" kindref="member">GetBatch</ref>(T*<sp/>values,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>batch_size);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1ac9c2ad67c5159f3ab3dce3fa5a4a156d" kindref="member">GetBatchSpaced</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>batch_size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>null_count,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>valid_bits,</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>valid_bits_offset,<sp/>T*<sp/>out);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a1be9beaddad6debb63ed36d58f14aa33" kindref="member">GetBatchWithDict</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/><ref refid="group__type-factories_1ga36f61c68b2a04a9d179cb56ff1186c59" kindref="member">dictionary</ref>,<sp/>int32_t<sp/>dictionary_length,<sp/>T*<sp/>values,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>batch_size);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a41e5dcea59ec7365015ec9b4cde0276f" kindref="member">GetBatchWithDictSpaced</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/>dictionary,<sp/>int32_t<sp/>dictionary_length,<sp/>T*<sp/>values,</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>batch_size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>null_count,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>valid_bits,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>valid_bits_offset);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="139" refid="classarrow_1_1util_1_1_rle_decoder_1abc4bbe1847bd0dd04a51f81972d846e7" refkind="member"><highlight class="normal"><sp/><sp/>BitUtil::BitReader<sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1abc4bbe1847bd0dd04a51f81972d846e7" kindref="member">bit_reader_</ref>;</highlight></codeline>
<codeline lineno="141" refid="classarrow_1_1util_1_1_rle_decoder_1a43e57698def7bfd3cc7da70cb2979835" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a43e57698def7bfd3cc7da70cb2979835" kindref="member">bit_width_</ref>;</highlight></codeline>
<codeline lineno="142" refid="classarrow_1_1util_1_1_rle_decoder_1a5083cb6107087bce883571c34f37b619" refkind="member"><highlight class="normal"><sp/><sp/>uint64_t<sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a5083cb6107087bce883571c34f37b619" kindref="member">current_value_</ref>;</highlight></codeline>
<codeline lineno="143" refid="classarrow_1_1util_1_1_rle_decoder_1a558ea1da20bf44666f7b5e7b9b0dba3d" refkind="member"><highlight class="normal"><sp/><sp/>int32_t<sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a558ea1da20bf44666f7b5e7b9b0dba3d" kindref="member">repeat_count_</ref>;</highlight></codeline>
<codeline lineno="144" refid="classarrow_1_1util_1_1_rle_decoder_1ab3949c9b7429d7c5eca6b0e7785d4114" refkind="member"><highlight class="normal"><sp/><sp/>int32_t<sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1ab3949c9b7429d7c5eca6b0e7785d4114" kindref="member">literal_count_</ref>;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>NextCounts();</highlight></codeline>
<codeline lineno="151"><highlight class="normal">};</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="159" refid="classarrow_1_1util_1_1_rle_encoder" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classarrow_1_1util_1_1_rle_encoder" kindref="compound">RleEncoder</ref><sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="167" refid="classarrow_1_1util_1_1_rle_encoder_1a60a51d6cfef536ffc4da20d22db50b53" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1util_1_1_rle_encoder_1a60a51d6cfef536ffc4da20d22db50b53" kindref="member">RleEncoder</ref>(uint8_t*<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>buffer_len,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit_width)</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a43e57698def7bfd3cc7da70cb2979835" kindref="member">bit_width_</ref>(bit_width),<sp/>bit_writer_(buffer,<sp/>buffer_len)<sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="arrow_2util_2logging_8h_1aece88ac235225ad03cf77868a931cc83" kindref="member">DCHECK_GE</ref>(<ref refid="classarrow_1_1util_1_1_rle_decoder_1a43e57698def7bfd3cc7da70cb2979835" kindref="member">bit_width_</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="arrow_2util_2logging_8h_1a9fe3823537dcd0e93ddd2410d25de11a" kindref="member">DCHECK_LE</ref>(<ref refid="classarrow_1_1util_1_1_rle_decoder_1a43e57698def7bfd3cc7da70cb2979835" kindref="member">bit_width_</ref>,<sp/>64);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>max_run_byte_size_<sp/>=<sp/>MinBufferSize(bit_width);</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="arrow_2util_2logging_8h_1aece88ac235225ad03cf77868a931cc83" kindref="member">DCHECK_GE</ref>(buffer_len,<sp/>max_run_byte_size_)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;Input<sp/>buffer<sp/>not<sp/>big<sp/>enough.&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>Clear();</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="179" refid="classarrow_1_1util_1_1_rle_encoder_1aee4f9f8c6998224e9fb530f889b0bfa0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1util_1_1_rle_encoder_1aee4f9f8c6998224e9fb530f889b0bfa0" kindref="member">MinBufferSize</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit_width)<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_literal_run_size<sp/>=</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1<sp/>+</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(BitUtil::BytesForBits(MAX_VALUES_PER_LITERAL_RUN<sp/>*<sp/>bit_width));</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_repeated_run_size<sp/>=<sp/>BitUtil::BitReader::kMaxVlqByteLength<sp/>+</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(BitUtil::BytesForBits(bit_width));</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::max(max_literal_run_size,<sp/>max_repeated_run_size);</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="191" refid="classarrow_1_1util_1_1_rle_encoder_1acdb52f24fec353f0c59a3efbc5a20d0d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1util_1_1_rle_encoder_1acdb52f24fec353f0c59a3efbc5a20d0d" kindref="member">MaxBufferSize</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bit_width,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_values)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>a<sp/>bit_width<sp/>&gt;<sp/>1,<sp/>the<sp/>worst<sp/>case<sp/>is<sp/>the<sp/>repetition<sp/>of<sp/>&quot;literal<sp/>run<sp/>of<sp/>length<sp/>8</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>then<sp/>a<sp/>repeated<sp/>run<sp/>of<sp/>length<sp/>8&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>8<sp/>values<sp/>per<sp/>smallest<sp/>run,<sp/>8<sp/>bits<sp/>per<sp/>byte</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes_per_run<sp/>=<sp/>bit_width;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_runs<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(BitUtil::CeilDiv(num_values,<sp/>8));</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>literal_max_size<sp/>=<sp/>num_runs<sp/>+<sp/>num_runs<sp/>*<sp/>bytes_per_run;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>the<sp/>very<sp/>worst<sp/>case<sp/>scenario,<sp/>the<sp/>data<sp/>is<sp/>a<sp/>concatenation<sp/>of<sp/>repeated</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>runs<sp/>of<sp/>8<sp/>values.<sp/>Repeated<sp/>run<sp/>has<sp/>a<sp/>1<sp/>byte<sp/>varint<sp/>followed<sp/>by<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bit-packed<sp/>repeated<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>min_repeated_run_size<sp/>=<sp/>1<sp/>+<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(BitUtil::BytesForBits(bit_width));</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>repeated_max_size<sp/>=</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(BitUtil::CeilDiv(num_values,<sp/>8))<sp/>*<sp/>min_repeated_run_size;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::max(literal_max_size,<sp/>repeated_max_size);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Put(uint64_t<sp/>value);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Flush();</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Clear();</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="221" refid="classarrow_1_1util_1_1_rle_encoder_1ae7b580281acc8cb2589fe21d8c8ab815" refkind="member"><highlight class="normal"><sp/><sp/>uint8_t*<sp/><ref refid="classarrow_1_1util_1_1_rle_encoder_1ae7b580281acc8cb2589fe21d8c8ab815" kindref="member">buffer</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bit_writer_.buffer();<sp/>}</highlight></codeline>
<codeline lineno="222" refid="classarrow_1_1util_1_1_rle_encoder_1a73af478811cec4e51ca6ae3d676649ac" refkind="member"><highlight class="normal"><sp/><sp/>int32_t<sp/><ref refid="classarrow_1_1util_1_1_rle_encoder_1a73af478811cec4e51ca6ae3d676649ac" kindref="member">len</ref>()<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bit_writer_.bytes_written();<sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FlushBufferedValues(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>done);</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FlushLiteralRun(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>update_indicator_byte);</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FlushRepeatedRun();</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CheckBufferFull();</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MAX_VALUES_PER_LITERAL_RUN<sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>6)<sp/>*<sp/>8;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a43e57698def7bfd3cc7da70cb2979835" kindref="member">bit_width_</ref>;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/>BitUtil::BitWriter<sp/>bit_writer_;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>buffer_full_;</highlight></codeline>
<codeline lineno="258"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>max_run_byte_size_;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>int64_t<sp/>buffered_values_[8];</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_buffered_values_;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>uint64_t<sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a5083cb6107087bce883571c34f37b619" kindref="member">current_value_</ref>;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a558ea1da20bf44666f7b5e7b9b0dba3d" kindref="member">repeat_count_</ref>;</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1ab3949c9b7429d7c5eca6b0e7785d4114" kindref="member">literal_count_</ref>;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/>uint8_t*<sp/>literal_indicator_byte_;</highlight></codeline>
<codeline lineno="286"><highlight class="normal">};</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="289" refid="classarrow_1_1util_1_1_rle_decoder_1adf113d49f938fcfeb11431e186d62d11" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1adf113d49f938fcfeb11431e186d62d11" kindref="member">RleDecoder::Get</ref>(T*<sp/>val)<sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a5fddb45e23c7d3b0210f0851d3c91764" kindref="member">GetBatch</ref>(val,<sp/>1)<sp/>==<sp/>1;</highlight></codeline>
<codeline lineno="291"><highlight class="normal">}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="294" refid="classarrow_1_1util_1_1_rle_decoder_1a5fddb45e23c7d3b0210f0851d3c91764" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a5fddb45e23c7d3b0210f0851d3c91764" kindref="member">RleDecoder::GetBatch</ref>(T*<sp/>values,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>batch_size)<sp/>{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><ref refid="arrow_2util_2logging_8h_1aece88ac235225ad03cf77868a931cc83" kindref="member">DCHECK_GE</ref>(<ref refid="classarrow_1_1util_1_1_rle_decoder_1a43e57698def7bfd3cc7da70cb2979835" kindref="member">bit_width_</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>values_read<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>out<sp/>=<sp/>values;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(values_read<sp/>&lt;<sp/>batch_size)<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>remaining<sp/>=<sp/>batch_size<sp/>-<sp/>values_read;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classarrow_1_1util_1_1_rle_decoder_1a558ea1da20bf44666f7b5e7b9b0dba3d" kindref="member">repeat_count_</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>repeat_batch<sp/>=<sp/>std::min(remaining,<sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a558ea1da20bf44666f7b5e7b9b0dba3d" kindref="member">repeat_count_</ref>);</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::fill(out,<sp/>out<sp/>+<sp/>repeat_batch,<sp/>static_cast&lt;T&gt;(<ref refid="classarrow_1_1util_1_1_rle_decoder_1a5083cb6107087bce883571c34f37b619" kindref="member">current_value_</ref>));</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a558ea1da20bf44666f7b5e7b9b0dba3d" kindref="member">repeat_count_</ref><sp/>-=<sp/>repeat_batch;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>values_read<sp/>+=<sp/>repeat_batch;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>+=<sp/>repeat_batch;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classarrow_1_1util_1_1_rle_decoder_1ab3949c9b7429d7c5eca6b0e7785d4114" kindref="member">literal_count_</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>literal_batch<sp/>=<sp/>std::min(remaining,<sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1ab3949c9b7429d7c5eca6b0e7785d4114" kindref="member">literal_count_</ref>);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>actual_read<sp/>=<sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1abc4bbe1847bd0dd04a51f81972d846e7" kindref="member">bit_reader_</ref>.GetBatch(<ref refid="classarrow_1_1util_1_1_rle_decoder_1a43e57698def7bfd3cc7da70cb2979835" kindref="member">bit_width_</ref>,<sp/>out,<sp/>literal_batch);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(actual_read<sp/>!=<sp/>literal_batch)<sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>values_read;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1ab3949c9b7429d7c5eca6b0e7785d4114" kindref="member">literal_count_</ref><sp/>-=<sp/>literal_batch;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>values_read<sp/>+=<sp/>literal_batch;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>+=<sp/>literal_batch;</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!NextCounts&lt;T&gt;())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>values_read;</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>values_read;</highlight></codeline>
<codeline lineno="326"><highlight class="normal">}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="329" refid="classarrow_1_1util_1_1_rle_decoder_1ac9c2ad67c5159f3ab3dce3fa5a4a156d" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1ac9c2ad67c5159f3ab3dce3fa5a4a156d" kindref="member">RleDecoder::GetBatchSpaced</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>batch_size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>null_count,</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>valid_bits,</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>valid_bits_offset,<sp/>T*<sp/>out)<sp/>{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><ref refid="arrow_2util_2logging_8h_1aece88ac235225ad03cf77868a931cc83" kindref="member">DCHECK_GE</ref>(<ref refid="classarrow_1_1util_1_1_rle_decoder_1a43e57698def7bfd3cc7da70cb2979835" kindref="member">bit_width_</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>values_read<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>remaining_nulls<sp/>=<sp/>null_count;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/>T<sp/>zero<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/>arrow::internal::BitmapReader<sp/>bit_reader(valid_bits,<sp/>valid_bits_offset,<sp/>batch_size);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(values_read<sp/>&lt;<sp/>batch_size)<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="arrow_2util_2logging_8h_1ac38ad2de0753ea2ed31f4930eca0f566" kindref="member">DCHECK_LT</ref>(bit_reader.position(),<sp/>batch_size);</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_valid<sp/>=<sp/>bit_reader.IsSet();</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>bit_reader.Next();</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_valid)<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="classarrow_1_1util_1_1_rle_decoder_1a558ea1da20bf44666f7b5e7b9b0dba3d" kindref="member">repeat_count_</ref><sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>(<ref refid="classarrow_1_1util_1_1_rle_decoder_1ab3949c9b7429d7c5eca6b0e7785d4114" kindref="member">literal_count_</ref><sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!NextCounts&lt;T&gt;())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>values_read;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classarrow_1_1util_1_1_rle_decoder_1a558ea1da20bf44666f7b5e7b9b0dba3d" kindref="member">repeat_count_</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>current<sp/>index<sp/>is<sp/>already<sp/>valid,<sp/>we<sp/>don&apos;t<sp/>need<sp/>to<sp/>check<sp/>that<sp/>again</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>repeat_batch<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a558ea1da20bf44666f7b5e7b9b0dba3d" kindref="member">repeat_count_</ref>--;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="classarrow_1_1util_1_1_rle_decoder_1a558ea1da20bf44666f7b5e7b9b0dba3d" kindref="member">repeat_count_</ref><sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>(values_read<sp/>+<sp/>repeat_batch)<sp/>&lt;<sp/>batch_size)<sp/>{</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="arrow_2util_2logging_8h_1ac38ad2de0753ea2ed31f4930eca0f566" kindref="member">DCHECK_LT</ref>(bit_reader.position(),<sp/>batch_size);</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bit_reader.IsSet())<sp/>{</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a558ea1da20bf44666f7b5e7b9b0dba3d" kindref="member">repeat_count_</ref>--;</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remaining_nulls--;</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>repeat_batch++;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bit_reader.Next();</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fill(out,<sp/>out<sp/>+<sp/>repeat_batch,<sp/>static_cast&lt;T&gt;(<ref refid="classarrow_1_1util_1_1_rle_decoder_1a5083cb6107087bce883571c34f37b619" kindref="member">current_value_</ref>));</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>+=<sp/>repeat_batch;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values_read<sp/>+=<sp/>repeat_batch;</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classarrow_1_1util_1_1_rle_decoder_1ab3949c9b7429d7c5eca6b0e7785d4114" kindref="member">literal_count_</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>literal_batch<sp/>=</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::min(batch_size<sp/>-<sp/>values_read<sp/>-<sp/>remaining_nulls,<sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1ab3949c9b7429d7c5eca6b0e7785d4114" kindref="member">literal_count_</ref>);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decode<sp/>the<sp/>literals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kBufferSize<sp/>=<sp/>1024;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>indices[kBufferSize];</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>literal_batch<sp/>=<sp/>std::min(literal_batch,<sp/>kBufferSize);</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>actual_read<sp/>=<sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1abc4bbe1847bd0dd04a51f81972d846e7" kindref="member">bit_reader_</ref>.GetBatch(<ref refid="classarrow_1_1util_1_1_rle_decoder_1a43e57698def7bfd3cc7da70cb2979835" kindref="member">bit_width_</ref>,<sp/>&amp;indices[0],<sp/>literal_batch);</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="arrow_2util_2logging_8h_1a41dd12c3206f67dc0b985215522c1013" kindref="member">DCHECK_EQ</ref>(actual_read,<sp/>literal_batch);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>skipped<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>literals_read<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>indices[0];</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>first<sp/>bitset<sp/>to<sp/>the<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(literals_read<sp/>&lt;<sp/>literal_batch)<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="arrow_2util_2logging_8h_1ac38ad2de0753ea2ed31f4930eca0f566" kindref="member">DCHECK_LT</ref>(bit_reader.position(),<sp/>batch_size);</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bit_reader.IsSet())<sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out<sp/>=<sp/>indices[literals_read];</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>literals_read++;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out<sp/>=<sp/>zero;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skipped++;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++out;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bit_reader.Next();</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1ab3949c9b7429d7c5eca6b0e7785d4114" kindref="member">literal_count_</ref><sp/>-=<sp/>literal_batch;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values_read<sp/>+=<sp/>literal_batch<sp/>+<sp/>skipped;</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remaining_nulls<sp/>-=<sp/>skipped;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*out<sp/>=<sp/>zero;</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++out;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>values_read++;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>remaining_nulls--;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>values_read;</highlight></codeline>
<codeline lineno="408"><highlight class="normal">}</highlight></codeline>
<codeline lineno="409"><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IndexInRange(int32_t<sp/>idx,<sp/>int32_t<sp/>dictionary_length)<sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>idx<sp/>&gt;=<sp/>0<sp/>&amp;&amp;<sp/>idx<sp/>&lt;<sp/>dictionary_length;</highlight></codeline>
<codeline lineno="412"><highlight class="normal">}</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="415" refid="classarrow_1_1util_1_1_rle_decoder_1a1be9beaddad6debb63ed36d58f14aa33" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a1be9beaddad6debb63ed36d58f14aa33" kindref="member">RleDecoder::GetBatchWithDict</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/><ref refid="group__type-factories_1ga36f61c68b2a04a9d179cb56ff1186c59" kindref="member">dictionary</ref>,<sp/>int32_t<sp/>dictionary_length,</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T*<sp/>values,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>batch_size)<sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><ref refid="arrow_2util_2logging_8h_1aece88ac235225ad03cf77868a931cc83" kindref="member">DCHECK_GE</ref>(<ref refid="classarrow_1_1util_1_1_rle_decoder_1a43e57698def7bfd3cc7da70cb2979835" kindref="member">bit_width_</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>values_read<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">*<sp/>out<sp/>=<sp/>values;</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(values_read<sp/>&lt;<sp/>batch_size)<sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>remaining<sp/>=<sp/>batch_size<sp/>-<sp/>values_read;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classarrow_1_1util_1_1_rle_decoder_1a558ea1da20bf44666f7b5e7b9b0dba3d" kindref="member">repeat_count_</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classarrow_1_1util_1_1_rle_decoder_1a5083cb6107087bce883571c34f37b619" kindref="member">current_value_</ref>);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="macros_8h_1a6f2ee7ad52872edb915cf48e163ac99c" kindref="member">ARROW_PREDICT_FALSE</ref>(!IndexInRange(idx,<sp/>dictionary_length)))<sp/>{</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>values_read;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>val<sp/>=<sp/>dictionary[idx];</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>repeat_batch<sp/>=<sp/>std::min(remaining,<sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a558ea1da20bf44666f7b5e7b9b0dba3d" kindref="member">repeat_count_</ref>);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::fill(out,<sp/>out<sp/>+<sp/>repeat_batch,<sp/>val);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Upkeep<sp/>counters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a558ea1da20bf44666f7b5e7b9b0dba3d" kindref="member">repeat_count_</ref><sp/>-=<sp/>repeat_batch;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>values_read<sp/>+=<sp/>repeat_batch;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>+=<sp/>repeat_batch;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classarrow_1_1util_1_1_rle_decoder_1ab3949c9b7429d7c5eca6b0e7785d4114" kindref="member">literal_count_</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kBufferSize<sp/>=<sp/>1024;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indices[kBufferSize];</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>literal_batch<sp/>=<sp/>std::min(remaining,<sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1ab3949c9b7429d7c5eca6b0e7785d4114" kindref="member">literal_count_</ref>);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>literal_batch<sp/>=<sp/>std::min(literal_batch,<sp/>kBufferSize);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>actual_read<sp/>=<sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1abc4bbe1847bd0dd04a51f81972d846e7" kindref="member">bit_reader_</ref>.GetBatch(<ref refid="classarrow_1_1util_1_1_rle_decoder_1a43e57698def7bfd3cc7da70cb2979835" kindref="member">bit_width_</ref>,<sp/>indices,<sp/>literal_batch);</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="macros_8h_1a6f2ee7ad52872edb915cf48e163ac99c" kindref="member">ARROW_PREDICT_FALSE</ref>(actual_read<sp/>!=<sp/>literal_batch))<sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>values_read;</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>literal_batch;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index<sp/>=<sp/>indices[i];</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="macros_8h_1a6f2ee7ad52872edb915cf48e163ac99c" kindref="member">ARROW_PREDICT_FALSE</ref>(!IndexInRange(index,<sp/>dictionary_length)))<sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>values_read;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out[i]<sp/>=<sp/>dictionary[index];</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Upkeep<sp/>counters<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1ab3949c9b7429d7c5eca6b0e7785d4114" kindref="member">literal_count_</ref><sp/>-=<sp/>literal_batch;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>values_read<sp/>+=<sp/>literal_batch;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>+=<sp/>literal_batch;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!NextCounts&lt;T&gt;())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>values_read;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>values_read;</highlight></codeline>
<codeline lineno="469"><highlight class="normal">}</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="472" refid="classarrow_1_1util_1_1_rle_decoder_1a41e5dcea59ec7365015ec9b4cde0276f" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a41e5dcea59ec7365015ec9b4cde0276f" kindref="member">RleDecoder::GetBatchWithDictSpaced</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>T*<sp/><ref refid="group__type-factories_1ga36f61c68b2a04a9d179cb56ff1186c59" kindref="member">dictionary</ref>,</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>dictionary_length,<sp/>T*<sp/>out,</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>batch_size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>null_count,</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>valid_bits,</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>valid_bits_offset)<sp/>{</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><ref refid="arrow_2util_2logging_8h_1aece88ac235225ad03cf77868a931cc83" kindref="member">DCHECK_GE</ref>(<ref refid="classarrow_1_1util_1_1_rle_decoder_1a43e57698def7bfd3cc7da70cb2979835" kindref="member">bit_width_</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>values_read<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>remaining_nulls<sp/>=<sp/>null_count;</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/>T<sp/>zero<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/>arrow::internal::BitmapReader<sp/>bit_reader(valid_bits,<sp/>valid_bits_offset,<sp/>batch_size);</highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(values_read<sp/>&lt;<sp/>batch_size)<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="arrow_2util_2logging_8h_1ac38ad2de0753ea2ed31f4930eca0f566" kindref="member">DCHECK_LT</ref>(bit_reader.position(),<sp/>batch_size);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_valid<sp/>=<sp/>bit_reader.IsSet();</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>bit_reader.Next();</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_valid)<sp/>{</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((<ref refid="classarrow_1_1util_1_1_rle_decoder_1a558ea1da20bf44666f7b5e7b9b0dba3d" kindref="member">repeat_count_</ref><sp/>==<sp/>0)<sp/>&amp;&amp;<sp/>(<ref refid="classarrow_1_1util_1_1_rle_decoder_1ab3949c9b7429d7c5eca6b0e7785d4114" kindref="member">literal_count_</ref><sp/>==<sp/>0))<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!NextCounts&lt;T&gt;())<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>values_read;</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classarrow_1_1util_1_1_rle_decoder_1a558ea1da20bf44666f7b5e7b9b0dba3d" kindref="member">repeat_count_</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int32_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(<ref refid="classarrow_1_1util_1_1_rle_decoder_1a5083cb6107087bce883571c34f37b619" kindref="member">current_value_</ref>);</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="macros_8h_1a6f2ee7ad52872edb915cf48e163ac99c" kindref="member">ARROW_PREDICT_FALSE</ref>(!IndexInRange(idx,<sp/>dictionary_length)))<sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>values_read;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>T<sp/>value<sp/>=<sp/>dictionary[idx];</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>current<sp/>index<sp/>is<sp/>already<sp/>valid,<sp/>we<sp/>don&apos;t<sp/>need<sp/>to<sp/>check<sp/>that<sp/>again</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>repeat_batch<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a558ea1da20bf44666f7b5e7b9b0dba3d" kindref="member">repeat_count_</ref>--;</highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(<ref refid="classarrow_1_1util_1_1_rle_decoder_1a558ea1da20bf44666f7b5e7b9b0dba3d" kindref="member">repeat_count_</ref><sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>(values_read<sp/>+<sp/>repeat_batch)<sp/>&lt;<sp/>batch_size)<sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="arrow_2util_2logging_8h_1ac38ad2de0753ea2ed31f4930eca0f566" kindref="member">DCHECK_LT</ref>(bit_reader.position(),<sp/>batch_size);</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bit_reader.IsSet())<sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a558ea1da20bf44666f7b5e7b9b0dba3d" kindref="member">repeat_count_</ref>--;</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remaining_nulls--;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>repeat_batch++;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bit_reader.Next();</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::fill(out,<sp/>out<sp/>+<sp/>repeat_batch,<sp/>value);</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>out<sp/>+=<sp/>repeat_batch;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values_read<sp/>+=<sp/>repeat_batch;</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classarrow_1_1util_1_1_rle_decoder_1ab3949c9b7429d7c5eca6b0e7785d4114" kindref="member">literal_count_</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>literal_batch<sp/>=</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::min(batch_size<sp/>-<sp/>values_read<sp/>-<sp/>remaining_nulls,<sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1ab3949c9b7429d7c5eca6b0e7785d4114" kindref="member">literal_count_</ref>);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Decode<sp/>the<sp/>literals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>kBufferSize<sp/>=<sp/>1024;</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>indices[kBufferSize];</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>literal_batch<sp/>=<sp/>std::min(literal_batch,<sp/>kBufferSize);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>actual_read<sp/>=<sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1abc4bbe1847bd0dd04a51f81972d846e7" kindref="member">bit_reader_</ref>.GetBatch(<ref refid="classarrow_1_1util_1_1_rle_decoder_1a43e57698def7bfd3cc7da70cb2979835" kindref="member">bit_width_</ref>,<sp/>&amp;indices[0],<sp/>literal_batch);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(actual_read<sp/>!=<sp/>literal_batch)<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>values_read;</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>skipped<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>literals_read<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="530"><highlight class="normal"></highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>first_idx<sp/>=<sp/>indices[0];</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="macros_8h_1a6f2ee7ad52872edb915cf48e163ac99c" kindref="member">ARROW_PREDICT_FALSE</ref>(!IndexInRange(first_idx,<sp/>dictionary_length)))<sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>values_read;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out++<sp/>=<sp/>dictionary[first_idx];</highlight></codeline>
<codeline lineno="536"><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>first<sp/>bitset<sp/>to<sp/>the<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(literals_read<sp/>&lt;<sp/>literal_batch)<sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="arrow_2util_2logging_8h_1ac38ad2de0753ea2ed31f4930eca0f566" kindref="member">DCHECK_LT</ref>(bit_reader.position(),<sp/>batch_size);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bit_reader.IsSet())<sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>indices[literals_read];</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="macros_8h_1a6f2ee7ad52872edb915cf48e163ac99c" kindref="member">ARROW_PREDICT_FALSE</ref>(!IndexInRange(idx,<sp/>dictionary_length)))<sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>values_read;</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out<sp/>=<sp/>dictionary[idx];</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>literals_read++;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*out<sp/>=<sp/>zero;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>skipped++;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++out;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bit_reader.Next();</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1ab3949c9b7429d7c5eca6b0e7785d4114" kindref="member">literal_count_</ref><sp/>-=<sp/>literal_batch;</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values_read<sp/>+=<sp/>literal_batch<sp/>+<sp/>skipped;</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>remaining_nulls<sp/>-=<sp/>skipped;</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*out<sp/>=<sp/>zero;</highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>++out;</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>values_read++;</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>remaining_nulls--;</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>values_read;</highlight></codeline>
<codeline lineno="567"><highlight class="normal">}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>RleDecoder::NextCounts()<sp/>{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>the<sp/>next<sp/>run&apos;s<sp/>indicator<sp/>int,<sp/>it<sp/>could<sp/>be<sp/>a<sp/>literal<sp/>or<sp/>repeated<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>int<sp/>is<sp/>encoded<sp/>as<sp/>a<sp/>vlq-encoded<sp/>value.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/>uint32_t<sp/>indicator_value<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classarrow_1_1util_1_1_rle_decoder_1abc4bbe1847bd0dd04a51f81972d846e7" kindref="member">bit_reader_</ref>.GetVlqInt(&amp;indicator_value))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>lsb<sp/>indicates<sp/>if<sp/>it<sp/>is<sp/>a<sp/>literal<sp/>run<sp/>or<sp/>repeated<sp/>run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_literal<sp/>=<sp/>indicator_value<sp/>&amp;<sp/>1;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/>uint32_t<sp/>count<sp/>=<sp/>indicator_value<sp/>&gt;&gt;<sp/>1;</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(is_literal)<sp/>{</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="macros_8h_1a6f2ee7ad52872edb915cf48e163ac99c" kindref="member">ARROW_PREDICT_FALSE</ref>(count<sp/>==<sp/>0<sp/>||<sp/>count<sp/>&gt;<sp/>static_cast&lt;uint32_t&gt;(INT32_MAX)<sp/>/<sp/>8))<sp/>{</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1ab3949c9b7429d7c5eca6b0e7785d4114" kindref="member">literal_count_</ref><sp/>=<sp/>count<sp/>*<sp/>8;</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="585"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="macros_8h_1a6f2ee7ad52872edb915cf48e163ac99c" kindref="member">ARROW_PREDICT_FALSE</ref>(count<sp/>==<sp/>0<sp/>||<sp/>count<sp/>&gt;<sp/>static_cast&lt;uint32_t&gt;(INT32_MAX)))<sp/>{</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a558ea1da20bf44666f7b5e7b9b0dba3d" kindref="member">repeat_count_</ref><sp/>=<sp/>count;</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>XXX<sp/>(ARROW-4018)<sp/>this<sp/>is<sp/>not<sp/>big-endian<sp/>compatible</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="classarrow_1_1util_1_1_rle_decoder_1abc4bbe1847bd0dd04a51f81972d846e7" kindref="member">bit_reader_</ref>.GetAligned&lt;T&gt;(static_cast&lt;int&gt;(BitUtil::CeilDiv(<ref refid="classarrow_1_1util_1_1_rle_decoder_1a43e57698def7bfd3cc7da70cb2979835" kindref="member">bit_width_</ref>,<sp/>8)),</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>reinterpret_cast&lt;T*&gt;(&amp;<ref refid="classarrow_1_1util_1_1_rle_decoder_1a5083cb6107087bce883571c34f37b619" kindref="member">current_value_</ref>)))<sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="596"><highlight class="normal">}</highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight></codeline>
<codeline lineno="600" refid="classarrow_1_1util_1_1_rle_encoder_1a2e5e59b665781890ccc559c6b5c13c85" refkind="member"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1util_1_1_rle_encoder_1a2e5e59b665781890ccc559c6b5c13c85" kindref="member">RleEncoder::Put</ref>(uint64_t<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><ref refid="arrow_2util_2logging_8h_1afbcf38b795bbece32e47b67a15463fd5" kindref="member">DCHECK</ref>(<ref refid="classarrow_1_1util_1_1_rle_decoder_1a43e57698def7bfd3cc7da70cb2979835" kindref="member">bit_width_</ref><sp/>==<sp/>64<sp/>||<sp/>value<sp/>&lt;<sp/>(1ULL<sp/>&lt;&lt;<sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a43e57698def7bfd3cc7da70cb2979835" kindref="member">bit_width_</ref>));</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="macros_8h_1a6f2ee7ad52872edb915cf48e163ac99c" kindref="member">ARROW_PREDICT_FALSE</ref>(buffer_full_))<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="macros_8h_1a1f418a9edc46d53e62732e7ccd06f329" kindref="member">ARROW_PREDICT_TRUE</ref>(<ref refid="classarrow_1_1util_1_1_rle_decoder_1a5083cb6107087bce883571c34f37b619" kindref="member">current_value_</ref><sp/>==<sp/>value))<sp/>{</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/>++<ref refid="classarrow_1_1util_1_1_rle_decoder_1a558ea1da20bf44666f7b5e7b9b0dba3d" kindref="member">repeat_count_</ref>;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classarrow_1_1util_1_1_rle_decoder_1a558ea1da20bf44666f7b5e7b9b0dba3d" kindref="member">repeat_count_</ref><sp/>&gt;<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>just<sp/>a<sp/>continuation<sp/>of<sp/>the<sp/>current<sp/>run,<sp/>no<sp/>need<sp/>to<sp/>buffer<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Note<sp/>that<sp/>this<sp/>is<sp/>the<sp/>fast<sp/>path<sp/>for<sp/>long<sp/>repeated<sp/>runs.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classarrow_1_1util_1_1_rle_decoder_1a558ea1da20bf44666f7b5e7b9b0dba3d" kindref="member">repeat_count_</ref><sp/>&gt;=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>had<sp/>a<sp/>run<sp/>that<sp/>was<sp/>long<sp/>enough<sp/>but<sp/>it<sp/>has<sp/>ended.<sp/><sp/>Flush<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>current<sp/>repeated<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="arrow_2util_2logging_8h_1a41dd12c3206f67dc0b985215522c1013" kindref="member">DCHECK_EQ</ref>(<ref refid="classarrow_1_1util_1_1_rle_decoder_1ab3949c9b7429d7c5eca6b0e7785d4114" kindref="member">literal_count_</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FlushRepeatedRun();</highlight></codeline>
<codeline lineno="618"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a558ea1da20bf44666f7b5e7b9b0dba3d" kindref="member">repeat_count_</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a5083cb6107087bce883571c34f37b619" kindref="member">current_value_</ref><sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/>buffered_values_[num_buffered_values_]<sp/>=<sp/>value;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++num_buffered_values_<sp/>==<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="arrow_2util_2logging_8h_1a41dd12c3206f67dc0b985215522c1013" kindref="member">DCHECK_EQ</ref>(<ref refid="classarrow_1_1util_1_1_rle_decoder_1ab3949c9b7429d7c5eca6b0e7785d4114" kindref="member">literal_count_</ref><sp/>%<sp/>8,<sp/>0);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>FlushBufferedValues(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="627"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="629"><highlight class="normal">}</highlight></codeline>
<codeline lineno="630"><highlight class="normal"></highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RleEncoder::FlushLiteralRun(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>update_indicator_byte)<sp/>{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(literal_indicator_byte_<sp/>==<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>literal<sp/>indicator<sp/>byte<sp/>has<sp/>not<sp/>been<sp/>reserved<sp/>yet,<sp/>get<sp/>one<sp/>now.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/>literal_indicator_byte_<sp/>=<sp/>bit_writer_.GetNextBytePtr();</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="arrow_2util_2logging_8h_1afbcf38b795bbece32e47b67a15463fd5" kindref="member">DCHECK</ref>(literal_indicator_byte_<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal"></highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>all<sp/>the<sp/>buffered<sp/>values<sp/>as<sp/>bit<sp/>packed<sp/>literals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>num_buffered_values_;<sp/>++i)<sp/>{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>success<sp/>=<sp/>bit_writer_.PutValue(buffered_values_[i],<sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a43e57698def7bfd3cc7da70cb2979835" kindref="member">bit_width_</ref>);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="arrow_2util_2logging_8h_1afbcf38b795bbece32e47b67a15463fd5" kindref="member">DCHECK</ref>(success)<sp/>&lt;&lt;<sp/></highlight><highlight class="stringliteral">&quot;There<sp/>is<sp/>a<sp/>bug<sp/>in<sp/>using<sp/>CheckBufferFull()&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/>num_buffered_values_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(update_indicator_byte)<sp/>{</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>At<sp/>this<sp/>point<sp/>we<sp/>need<sp/>to<sp/>write<sp/>the<sp/>indicator<sp/>byte<sp/>for<sp/>the<sp/>literal<sp/>run.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>only<sp/>reserve<sp/>one<sp/>byte,<sp/>to<sp/>allow<sp/>for<sp/>streaming<sp/>writes<sp/>of<sp/>literal<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>logic<sp/>makes<sp/>sure<sp/>we<sp/>flush<sp/>literal<sp/>runs<sp/>often<sp/>enough<sp/>to<sp/>not<sp/>overrun</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>1<sp/>byte.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="arrow_2util_2logging_8h_1a41dd12c3206f67dc0b985215522c1013" kindref="member">DCHECK_EQ</ref>(<ref refid="classarrow_1_1util_1_1_rle_decoder_1ab3949c9b7429d7c5eca6b0e7785d4114" kindref="member">literal_count_</ref><sp/>%<sp/>8,<sp/>0);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_groups<sp/>=<sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1ab3949c9b7429d7c5eca6b0e7785d4114" kindref="member">literal_count_</ref><sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>indicator_value<sp/>=<sp/>(num_groups<sp/>&lt;&lt;<sp/>1)<sp/>|<sp/>1;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="arrow_2util_2logging_8h_1a41dd12c3206f67dc0b985215522c1013" kindref="member">DCHECK_EQ</ref>(indicator_value<sp/>&amp;<sp/>0xFFFFFF00,<sp/>0);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/>*literal_indicator_byte_<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">uint8_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(indicator_value);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>literal_indicator_byte_<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1ab3949c9b7429d7c5eca6b0e7785d4114" kindref="member">literal_count_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>CheckBufferFull();</highlight></codeline>
<codeline lineno="658"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="659"><highlight class="normal">}</highlight></codeline>
<codeline lineno="660"><highlight class="normal"></highlight></codeline>
<codeline lineno="661"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RleEncoder::FlushRepeatedRun()<sp/>{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><ref refid="arrow_2util_2logging_8h_1aea1a4ae4670d96f78121402fb066b571" kindref="member">DCHECK_GT</ref>(<ref refid="classarrow_1_1util_1_1_rle_decoder_1a558ea1da20bf44666f7b5e7b9b0dba3d" kindref="member">repeat_count_</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>result<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>lsb<sp/>of<sp/>0<sp/>indicates<sp/>this<sp/>is<sp/>a<sp/>repeated<sp/>run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/>int32_t<sp/>indicator_value<sp/>=<sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a558ea1da20bf44666f7b5e7b9b0dba3d" kindref="member">repeat_count_</ref><sp/>&lt;&lt;<sp/>1<sp/>|<sp/>0;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/>result<sp/>&amp;=<sp/>bit_writer_.PutVlqInt(indicator_value);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/>result<sp/>&amp;=<sp/>bit_writer_.PutAligned(<ref refid="classarrow_1_1util_1_1_rle_decoder_1a5083cb6107087bce883571c34f37b619" kindref="member">current_value_</ref>,</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;int&gt;(BitUtil::CeilDiv(<ref refid="classarrow_1_1util_1_1_rle_decoder_1a43e57698def7bfd3cc7da70cb2979835" kindref="member">bit_width_</ref>,<sp/>8)));</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><ref refid="arrow_2util_2logging_8h_1afbcf38b795bbece32e47b67a15463fd5" kindref="member">DCHECK</ref>(result);</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/>num_buffered_values_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a558ea1da20bf44666f7b5e7b9b0dba3d" kindref="member">repeat_count_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/>CheckBufferFull();</highlight></codeline>
<codeline lineno="673"><highlight class="normal">}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RleEncoder::FlushBufferedValues(</highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>done)<sp/>{</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classarrow_1_1util_1_1_rle_decoder_1a558ea1da20bf44666f7b5e7b9b0dba3d" kindref="member">repeat_count_</ref><sp/>&gt;=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="679"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>the<sp/>buffered<sp/>values.<sp/><sp/>They<sp/>are<sp/>part<sp/>of<sp/>the<sp/>repeated<sp/>run<sp/>now<sp/>and<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>don&apos;t<sp/>want<sp/>to<sp/>flush<sp/>them<sp/>out<sp/>as<sp/>literals.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>num_buffered_values_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classarrow_1_1util_1_1_rle_decoder_1ab3949c9b7429d7c5eca6b0e7785d4114" kindref="member">literal_count_</ref><sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>was<sp/>a<sp/>current<sp/>literal<sp/>run.<sp/><sp/>All<sp/>the<sp/>values<sp/>in<sp/>it<sp/>have<sp/>been<sp/>flushed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>but<sp/>we<sp/>still<sp/>need<sp/>to<sp/>update<sp/>the<sp/>indicator<sp/>byte.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="arrow_2util_2logging_8h_1a41dd12c3206f67dc0b985215522c1013" kindref="member">DCHECK_EQ</ref>(<ref refid="classarrow_1_1util_1_1_rle_decoder_1ab3949c9b7429d7c5eca6b0e7785d4114" kindref="member">literal_count_</ref><sp/>%<sp/>8,<sp/>0);</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="arrow_2util_2logging_8h_1a41dd12c3206f67dc0b985215522c1013" kindref="member">DCHECK_EQ</ref>(<ref refid="classarrow_1_1util_1_1_rle_decoder_1a558ea1da20bf44666f7b5e7b9b0dba3d" kindref="member">repeat_count_</ref>,<sp/>8);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FlushLiteralRun(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="arrow_2util_2logging_8h_1a41dd12c3206f67dc0b985215522c1013" kindref="member">DCHECK_EQ</ref>(<ref refid="classarrow_1_1util_1_1_rle_decoder_1ab3949c9b7429d7c5eca6b0e7785d4114" kindref="member">literal_count_</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1ab3949c9b7429d7c5eca6b0e7785d4114" kindref="member">literal_count_</ref><sp/>+=<sp/>num_buffered_values_;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><ref refid="arrow_2util_2logging_8h_1a41dd12c3206f67dc0b985215522c1013" kindref="member">DCHECK_EQ</ref>(<ref refid="classarrow_1_1util_1_1_rle_decoder_1ab3949c9b7429d7c5eca6b0e7785d4114" kindref="member">literal_count_</ref><sp/>%<sp/>8,<sp/>0);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num_groups<sp/>=<sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1ab3949c9b7429d7c5eca6b0e7785d4114" kindref="member">literal_count_</ref><sp/>/<sp/>8;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(num_groups<sp/>+<sp/>1<sp/>&gt;=<sp/>(1<sp/>&lt;&lt;<sp/>6))<sp/>{</highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>to<sp/>start<sp/>a<sp/>new<sp/>literal<sp/>run<sp/>because<sp/>the<sp/>indicator<sp/>byte<sp/>we&apos;ve<sp/>reserved</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>cannot<sp/>store<sp/>more<sp/>values.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="arrow_2util_2logging_8h_1afbcf38b795bbece32e47b67a15463fd5" kindref="member">DCHECK</ref>(literal_indicator_byte_<sp/>!=<sp/>NULL);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>FlushLiteralRun(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/>FlushLiteralRun(done);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a558ea1da20bf44666f7b5e7b9b0dba3d" kindref="member">repeat_count_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="705"><highlight class="normal">}</highlight></codeline>
<codeline lineno="706"><highlight class="normal"></highlight></codeline>
<codeline lineno="707" refid="classarrow_1_1util_1_1_rle_encoder_1ab8b9ede6f970e92aa90543f2ac22097b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1util_1_1_rle_encoder_1ab8b9ede6f970e92aa90543f2ac22097b" kindref="member">RleEncoder::Flush</ref>()<sp/>{</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classarrow_1_1util_1_1_rle_decoder_1ab3949c9b7429d7c5eca6b0e7785d4114" kindref="member">literal_count_</ref><sp/>&gt;<sp/>0<sp/>||<sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a558ea1da20bf44666f7b5e7b9b0dba3d" kindref="member">repeat_count_</ref><sp/>&gt;<sp/>0<sp/>||<sp/>num_buffered_values_<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>all_repeat<sp/>=<sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1ab3949c9b7429d7c5eca6b0e7785d4114" kindref="member">literal_count_</ref><sp/>==<sp/>0<sp/>&amp;&amp;<sp/>(<ref refid="classarrow_1_1util_1_1_rle_decoder_1a558ea1da20bf44666f7b5e7b9b0dba3d" kindref="member">repeat_count_</ref><sp/>==<sp/>num_buffered_values_<sp/>||</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>num_buffered_values_<sp/>==<sp/>0);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>There<sp/>is<sp/>something<sp/>pending,<sp/>figure<sp/>out<sp/>if<sp/>it&apos;s<sp/>a<sp/>repeated<sp/>or<sp/>literal<sp/>run</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="classarrow_1_1util_1_1_rle_decoder_1a558ea1da20bf44666f7b5e7b9b0dba3d" kindref="member">repeat_count_</ref><sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>all_repeat)<sp/>{</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FlushRepeatedRun();</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="arrow_2util_2logging_8h_1a41dd12c3206f67dc0b985215522c1013" kindref="member">DCHECK_EQ</ref>(<ref refid="classarrow_1_1util_1_1_rle_decoder_1ab3949c9b7429d7c5eca6b0e7785d4114" kindref="member">literal_count_</ref><sp/>%<sp/>8,<sp/>0);</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Buffer<sp/>the<sp/>last<sp/>group<sp/>of<sp/>literals<sp/>to<sp/>8<sp/>by<sp/>padding<sp/>with<sp/>0s.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(;<sp/>num_buffered_values_<sp/>!=<sp/>0<sp/>&amp;&amp;<sp/>num_buffered_values_<sp/>&lt;<sp/>8;</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++num_buffered_values_)<sp/>{</highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>buffered_values_[num_buffered_values_]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1ab3949c9b7429d7c5eca6b0e7785d4114" kindref="member">literal_count_</ref><sp/>+=<sp/>num_buffered_values_;</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>FlushLiteralRun(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a558ea1da20bf44666f7b5e7b9b0dba3d" kindref="member">repeat_count_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/>bit_writer_.Flush();</highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><ref refid="arrow_2util_2logging_8h_1a41dd12c3206f67dc0b985215522c1013" kindref="member">DCHECK_EQ</ref>(num_buffered_values_,<sp/>0);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><ref refid="arrow_2util_2logging_8h_1a41dd12c3206f67dc0b985215522c1013" kindref="member">DCHECK_EQ</ref>(<ref refid="classarrow_1_1util_1_1_rle_decoder_1ab3949c9b7429d7c5eca6b0e7785d4114" kindref="member">literal_count_</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><ref refid="arrow_2util_2logging_8h_1a41dd12c3206f67dc0b985215522c1013" kindref="member">DCHECK_EQ</ref>(<ref refid="classarrow_1_1util_1_1_rle_decoder_1a558ea1da20bf44666f7b5e7b9b0dba3d" kindref="member">repeat_count_</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>bit_writer_.bytes_written();</highlight></codeline>
<codeline lineno="732"><highlight class="normal">}</highlight></codeline>
<codeline lineno="733"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>RleEncoder::CheckBufferFull()<sp/>{</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bytes_written<sp/>=<sp/>bit_writer_.bytes_written();</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bytes_written<sp/>+<sp/>max_run_byte_size_<sp/>&gt;<sp/>bit_writer_.buffer_len())<sp/>{</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>buffer_full_<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="739"><highlight class="normal">}</highlight></codeline>
<codeline lineno="740"><highlight class="normal"></highlight></codeline>
<codeline lineno="741" refid="classarrow_1_1util_1_1_rle_encoder_1adcb2d9b0ecc749bec776f7e1a3baa654" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1util_1_1_rle_encoder_1adcb2d9b0ecc749bec776f7e1a3baa654" kindref="member">RleEncoder::Clear</ref>()<sp/>{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/>buffer_full_<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a5083cb6107087bce883571c34f37b619" kindref="member">current_value_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1a558ea1da20bf44666f7b5e7b9b0dba3d" kindref="member">repeat_count_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/>num_buffered_values_<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1util_1_1_rle_decoder_1ab3949c9b7429d7c5eca6b0e7785d4114" kindref="member">literal_count_</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/>literal_indicator_byte_<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/>bit_writer_.Clear();</highlight></codeline>
<codeline lineno="749"><highlight class="normal">}</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>util</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="752"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>arrow</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/arrow/cpp/src/arrow/util/rle_encoding.h"/>
  </compounddef>
</doxygen>
