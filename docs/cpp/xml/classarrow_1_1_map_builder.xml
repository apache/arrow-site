<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_map_builder" kind="class" language="C++" prot="public">
    <compoundname>arrow::MapBuilder</compoundname>
    <basecompoundref refid="classarrow_1_1_array_builder" prot="public" virt="non-virtual">arrow::ArrayBuilder</basecompoundref>
    <includes refid="builder__nested_8h" local="no">arrow/array/builder_nested.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classarrow_1_1_map_builder_1aca6b20b35a451ac936c4750143d530ac" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool arrow::MapBuilder::keys_sorted_</definition>
        <argsstring></argsstring>
        <name>keys_sorted_</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="276" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_nested.h" bodystart="276" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_map_builder_1afb7b570b19d0ba0da440004f4c9ca0b4" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_list_builder" kindref="compound">ListBuilder</ref> &gt;</type>
        <definition>std::shared_ptr&lt;ListBuilder&gt; arrow::MapBuilder::list_builder_</definition>
        <argsstring></argsstring>
        <name>list_builder_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="277" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_nested.h" bodystart="277" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_map_builder_1a948dc695ca0314798e3b96ec92a6efbd" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array_builder" kindref="compound">ArrayBuilder</ref> &gt;</type>
        <definition>std::shared_ptr&lt;ArrayBuilder&gt; arrow::MapBuilder::key_builder_</definition>
        <argsstring></argsstring>
        <name>key_builder_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="278" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_nested.h" bodystart="278" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_map_builder_1a37f1086183c3de87fdd07e31702df1de" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array_builder" kindref="compound">ArrayBuilder</ref> &gt;</type>
        <definition>std::shared_ptr&lt;ArrayBuilder&gt; arrow::MapBuilder::item_builder_</definition>
        <argsstring></argsstring>
        <name>item_builder_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="279" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_nested.h" bodystart="279" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1_map_builder_1a30ad6e4fcd4628360681cd710f56560f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::MapBuilder::MapBuilder</definition>
        <argsstring>(MemoryPool *pool, const std::shared_ptr&lt; ArrayBuilder &gt; &amp;key_builder, const std::shared_ptr&lt; ArrayBuilder &gt; &amp;item_builder, const std::shared_ptr&lt; DataType &gt; &amp;type)</argsstring>
        <name>MapBuilder</name>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_array_builder" kindref="compound">ArrayBuilder</ref> &gt; &amp;</type>
          <declname>key_builder</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_array_builder" kindref="compound">ArrayBuilder</ref> &gt; &amp;</type>
          <declname>item_builder</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Use this constructor to define the built array&apos;s type explicitly. </para>        </briefdescription>
        <detaileddescription>
<para>If key_builder or item_builder has indeterminate type, this builder will also. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="214" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_map_builder_1aa0c7f6ecb6f35b534e8fc4489eba81d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::MapBuilder::MapBuilder</definition>
        <argsstring>(MemoryPool *pool, const std::shared_ptr&lt; ArrayBuilder &gt; &amp;key_builder, const std::shared_ptr&lt; ArrayBuilder &gt; &amp;item_builder, bool keys_sorted=false)</argsstring>
        <name>MapBuilder</name>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_array_builder" kindref="compound">ArrayBuilder</ref> &gt; &amp;</type>
          <declname>key_builder</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_array_builder" kindref="compound">ArrayBuilder</ref> &gt; &amp;</type>
          <declname>item_builder</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keys_sorted</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Use this constructor to infer the built array&apos;s type. </para>        </briefdescription>
        <detaileddescription>
<para>If key_builder or item_builder has indeterminate type, this builder will also. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="220" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_map_builder_1a2740b157594106cdee063de3c6d40173" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::MapBuilder::Resize</definition>
        <argsstring>(int64_t capacity) override</argsstring>
        <name>Resize</name>
        <reimplements refid="classarrow_1_1_array_builder_1a994d873bec453c33fbaeb995442d520b">Resize</reimplements>
        <param>
          <type>int64_t</type>
          <declname>capacity</declname>
        </param>
        <briefdescription>
<para>Ensure that enough memory has been allocated to fit the indicated number of total elements in the builder, including any that have already been appended. </para>        </briefdescription>
        <detaileddescription>
<para>Does not account for reallocations that may be due to variable size data, like binary values. To make space for incremental appends, use Reserve instead.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">capacity</parametername>
</parameternamelist>
<parameterdescription>
<para>the minimum number of total array values to accommodate. Must be greater than the current capacity. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="223" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_map_builder_1aedad1aa92a893f60a677f2a59e30d65f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void arrow::MapBuilder::Reset</definition>
        <argsstring>() override</argsstring>
        <name>Reset</name>
        <reimplements refid="classarrow_1_1_array_builder_1a71a25653bdf242da1b3a317f4fd49a98">Reset</reimplements>
        <briefdescription>
<para>Reset the builder. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="224" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_map_builder_1a6ee03b643d8dc1ff7d5fe5009f852412" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::MapBuilder::FinishInternal</definition>
        <argsstring>(std::shared_ptr&lt; ArrayData &gt; *out) override</argsstring>
        <name>FinishInternal</name>
        <reimplements refid="classarrow_1_1_array_builder_1a0e0aea1c332b472f3671bea9da5ec473">FinishInternal</reimplements>
        <param>
          <type>std::shared_ptr&lt; <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Return result of builder as an internal generic <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> object. </para>        </briefdescription>
        <detaileddescription>
<para>Resets builder except for dictionary builder</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>the finalized <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> object </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="225" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_map_builder_1af01d92301a87bf5c5a6431f1047f397f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::MapBuilder::Finish</definition>
        <argsstring>(std::shared_ptr&lt; MapArray &gt; *out)</argsstring>
        <name>Finish</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_map_array" kindref="compound">MapArray</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="231" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_nested.h" bodystart="231" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_map_builder_1ac688d7bd31692bcbfc6e3cdd5dadcd37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::MapBuilder::AppendValues</definition>
        <argsstring>(const int32_t *offsets, int64_t length, const uint8_t *valid_bytes=NULLPTR)</argsstring>
        <name>AppendValues</name>
        <param>
          <type>const int32_t *</type>
          <declname>offsets</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>const uint8_t *</type>
          <declname>valid_bytes</declname>
          <defval><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></defval>
        </param>
        <briefdescription>
<para>Vector append. </para>        </briefdescription>
        <detaileddescription>
<para>If passed, valid_bytes is of equal length to values, and any zero byte will be considered as a null for that slot </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="237" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_map_builder_1a7f9750c01d1f8fa3cffcfb6af27d661b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::MapBuilder::Append</definition>
        <argsstring>()</argsstring>
        <name>Append</name>
        <briefdescription>
<para>Start a new variable-length map slot. </para>        </briefdescription>
        <detaileddescription>
<para>This function should be called before beginning to append elements to the key and item builders </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="244" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_map_builder_1ab93134c7e0033f61f7e151dbcd4becca" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::MapBuilder::AppendNull</definition>
        <argsstring>() final</argsstring>
        <name>AppendNull</name>
        <reimplements refid="classarrow_1_1_array_builder_1a6f7c2fbebb93e8630142dca01a328015">AppendNull</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="246" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_map_builder_1a7df073c6ced7e1766d7577c844a7772b" prot="public" static="no" const="no" explicit="no" inline="no" final="yes" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::MapBuilder::AppendNulls</definition>
        <argsstring>(int64_t length) final</argsstring>
        <name>AppendNulls</name>
        <reimplements refid="classarrow_1_1_array_builder_1a0900943af067e85d9fa227123c223b14">AppendNulls</reimplements>
        <param>
          <type>int64_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="248" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_map_builder_1a0bb40712348e55725178e9b94cc57b08" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_array_builder" kindref="compound">ArrayBuilder</ref> *</type>
        <definition>ArrayBuilder* arrow::MapBuilder::key_builder</definition>
        <argsstring>() const</argsstring>
        <name>key_builder</name>
        <briefdescription>
<para>Get builder to append keys. </para>        </briefdescription>
        <detaileddescription>
<para>Append a key with this builder should be followed by appending an item or null value with <ref refid="classarrow_1_1_map_builder_1a1e431353da3d8e696589ff40780175b2" kindref="member">item_builder()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="254" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_nested.h" bodystart="254" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_map_builder_1a1e431353da3d8e696589ff40780175b2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_array_builder" kindref="compound">ArrayBuilder</ref> *</type>
        <definition>ArrayBuilder* arrow::MapBuilder::item_builder</definition>
        <argsstring>() const</argsstring>
        <name>item_builder</name>
        <briefdescription>
<para>Get builder to append items. </para>        </briefdescription>
        <detaileddescription>
<para>Appending an item with this builder should have been preceded by appending a key with <ref refid="classarrow_1_1_map_builder_1a0bb40712348e55725178e9b94cc57b08" kindref="member">key_builder()</ref>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="260" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_nested.h" bodystart="260" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_map_builder_1aae188ddffd83c7590f33fd784f146d36" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_array_builder" kindref="compound">ArrayBuilder</ref> *</type>
        <definition>ArrayBuilder* arrow::MapBuilder::value_builder</definition>
        <argsstring>() const</argsstring>
        <name>value_builder</name>
        <briefdescription>
<para>Get builder to add Map entries as struct values. </para>        </briefdescription>
        <detaileddescription>
<para>This is used instead of <ref refid="classarrow_1_1_map_builder_1a0bb40712348e55725178e9b94cc57b08" kindref="member">key_builder()</ref>/item_builder() and allows the Map to be built as a list of struct values. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="266" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_nested.h" bodystart="266" bodyend="266"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_map_builder_1a468ecd7d5d0b7236324528b3011373d2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::MapBuilder::type</definition>
        <argsstring>() const override</argsstring>
        <name>type</name>
        <reimplements refid="classarrow_1_1_array_builder_1a39b4b420be1fcf4fe7219fe953eb65c7">type</reimplements>
        <briefdescription>
<para>Return the type of the built <ref refid="classarrow_1_1_array" kindref="compound">Array</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="268" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_nested.h" bodystart="268" bodyend="270"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classarrow_1_1_map_builder_1a2baf06c0af9e975458b31f727dc78a4e" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::MapBuilder::AdjustStructBuilderLength</definition>
        <argsstring>()</argsstring>
        <name>AdjustStructBuilderLength</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="273" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Builder class for arrays of variable-size maps. </para>    </briefdescription>
    <detaileddescription>
<para>To use this class, you must append values to the key and item array builders and use the Append function to delimit each distinct map (once the keys and items have been appended) or use the bulk API to append a sequence of offsets and null maps.</para><para>Key uniqueness and ordering are not validated. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="2976">
        <label>arrow::MapBuilder</label>
        <link refid="classarrow_1_1_map_builder"/>
        <childnode refid="2977" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2977">
        <label>arrow::ArrayBuilder</label>
        <link refid="classarrow_1_1_array_builder"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2980">
        <label>arrow::MemoryPool</label>
        <link refid="classarrow_1_1_memory_pool"/>
      </node>
      <node id="2978">
        <label>arrow::MapBuilder</label>
        <link refid="classarrow_1_1_map_builder"/>
        <childnode refid="2979" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2981">
        <label>arrow::TypedBufferBuilder&lt; bool &gt;</label>
        <link refid="classarrow_1_1_typed_buffer_builder_3_01bool_01_4"/>
      </node>
      <node id="2979">
        <label>arrow::ArrayBuilder</label>
        <link refid="classarrow_1_1_array_builder"/>
        <childnode refid="2980" relation="usage">
          <edgelabel>pool_</edgelabel>
        </childnode>
        <childnode refid="2981" relation="usage">
          <edgelabel>null_bitmap_builder_</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/array/builder_nested.h" line="210" column="1" bodyfile="/arrow/cpp/src/arrow/array/builder_nested.h" bodystart="210" bodyend="280"/>
    <listofallmembers>
      <member refid="classarrow_1_1_map_builder_1a2baf06c0af9e975458b31f727dc78a4e" prot="protected" virt="non-virtual"><scope>arrow::MapBuilder</scope><name>AdjustStructBuilderLength</name></member>
      <member refid="classarrow_1_1_array_builder_1a630ea6ee96e26b8f1a2d08b45180fb32" prot="public" virt="non-virtual"><scope>arrow::MapBuilder</scope><name>Advance</name></member>
      <member refid="classarrow_1_1_map_builder_1a7f9750c01d1f8fa3cffcfb6af27d661b" prot="public" virt="non-virtual"><scope>arrow::MapBuilder</scope><name>Append</name></member>
      <member refid="classarrow_1_1_map_builder_1ab93134c7e0033f61f7e151dbcd4becca" prot="public" virt="virtual"><scope>arrow::MapBuilder</scope><name>AppendNull</name></member>
      <member refid="classarrow_1_1_map_builder_1a7df073c6ced7e1766d7577c844a7772b" prot="public" virt="virtual"><scope>arrow::MapBuilder</scope><name>AppendNulls</name></member>
      <member refid="classarrow_1_1_array_builder_1a21c1d9818e379f41e6c72df407ae029d" prot="protected" virt="non-virtual"><scope>arrow::MapBuilder</scope><name>AppendToBitmap</name></member>
      <member refid="classarrow_1_1_array_builder_1a17c9bf5211cb980518df3bb1c33ba4fc" prot="protected" virt="non-virtual"><scope>arrow::MapBuilder</scope><name>AppendToBitmap</name></member>
      <member refid="classarrow_1_1_array_builder_1ab8bb1f62d1eaa27de03c41a2db3d53e3" prot="protected" virt="non-virtual"><scope>arrow::MapBuilder</scope><name>AppendToBitmap</name></member>
      <member refid="classarrow_1_1_map_builder_1ac688d7bd31692bcbfc6e3cdd5dadcd37" prot="public" virt="non-virtual"><scope>arrow::MapBuilder</scope><name>AppendValues</name></member>
      <member refid="classarrow_1_1_array_builder_1ab5fe829691bef00b33894d51e16e6aa5" prot="public" virt="non-virtual"><scope>arrow::MapBuilder</scope><name>ArrayBuilder</name></member>
      <member refid="classarrow_1_1_array_builder_1a0236e815af8f62c98bd612eea219cd73" prot="public" virt="non-virtual"><scope>arrow::MapBuilder</scope><name>capacity</name></member>
      <member refid="classarrow_1_1_array_builder_1aeb92737fe5ada5b372459705c1690d7e" prot="protected" virt="non-virtual"><scope>arrow::MapBuilder</scope><name>capacity_</name></member>
      <member refid="classarrow_1_1_array_builder_1a0d77ad3f24791679196dda8b3ac84437" prot="protected" virt="non-virtual"><scope>arrow::MapBuilder</scope><name>CheckCapacity</name></member>
      <member refid="classarrow_1_1_array_builder_1aad4a1ed2c24204b1cc21e44ab0ad444b" prot="public" virt="non-virtual"><scope>arrow::MapBuilder</scope><name>child</name></member>
      <member refid="classarrow_1_1_array_builder_1a66ce8a6890bf6f222baf1642557d889b" prot="protected" virt="non-virtual"><scope>arrow::MapBuilder</scope><name>children_</name></member>
      <member refid="classarrow_1_1_map_builder_1af01d92301a87bf5c5a6431f1047f397f" prot="public" virt="non-virtual"><scope>arrow::MapBuilder</scope><name>Finish</name></member>
      <member refid="classarrow_1_1_array_builder_1a67b2227edb4b51bc44425f1c8a439819" prot="public" virt="non-virtual" ambiguityscope="arrow::ArrayBuilder::"><scope>arrow::MapBuilder</scope><name>Finish</name></member>
      <member refid="classarrow_1_1_map_builder_1a6ee03b643d8dc1ff7d5fe5009f852412" prot="public" virt="virtual"><scope>arrow::MapBuilder</scope><name>FinishInternal</name></member>
      <member refid="classarrow_1_1_array_builder_1a9f90da9e81d9db4bc9277458ba70d46a" prot="protected" virt="non-virtual"><scope>arrow::MapBuilder</scope><name>FinishTyped</name></member>
      <member refid="classarrow_1_1_map_builder_1a1e431353da3d8e696589ff40780175b2" prot="public" virt="non-virtual"><scope>arrow::MapBuilder</scope><name>item_builder</name></member>
      <member refid="classarrow_1_1_map_builder_1a37f1086183c3de87fdd07e31702df1de" prot="protected" virt="non-virtual"><scope>arrow::MapBuilder</scope><name>item_builder_</name></member>
      <member refid="classarrow_1_1_map_builder_1a0bb40712348e55725178e9b94cc57b08" prot="public" virt="non-virtual"><scope>arrow::MapBuilder</scope><name>key_builder</name></member>
      <member refid="classarrow_1_1_map_builder_1a948dc695ca0314798e3b96ec92a6efbd" prot="protected" virt="non-virtual"><scope>arrow::MapBuilder</scope><name>key_builder_</name></member>
      <member refid="classarrow_1_1_map_builder_1aca6b20b35a451ac936c4750143d530ac" prot="protected" virt="non-virtual"><scope>arrow::MapBuilder</scope><name>keys_sorted_</name></member>
      <member refid="classarrow_1_1_array_builder_1a296ac75b9b3d877192e37681c66513ba" prot="public" virt="non-virtual"><scope>arrow::MapBuilder</scope><name>length</name></member>
      <member refid="classarrow_1_1_array_builder_1ae8b7ebc042e6684440bd9e1c77f0f5c1" prot="protected" virt="non-virtual"><scope>arrow::MapBuilder</scope><name>length_</name></member>
      <member refid="classarrow_1_1_map_builder_1afb7b570b19d0ba0da440004f4c9ca0b4" prot="protected" virt="non-virtual"><scope>arrow::MapBuilder</scope><name>list_builder_</name></member>
      <member refid="classarrow_1_1_map_builder_1a30ad6e4fcd4628360681cd710f56560f" prot="public" virt="non-virtual"><scope>arrow::MapBuilder</scope><name>MapBuilder</name></member>
      <member refid="classarrow_1_1_map_builder_1aa0c7f6ecb6f35b534e8fc4489eba81d2" prot="public" virt="non-virtual"><scope>arrow::MapBuilder</scope><name>MapBuilder</name></member>
      <member refid="classarrow_1_1_array_builder_1a0f32beedba413982480c5df287946922" prot="protected" virt="non-virtual"><scope>arrow::MapBuilder</scope><name>null_bitmap_builder_</name></member>
      <member refid="classarrow_1_1_array_builder_1aad098f61890072a4576867a7cf4fb9ee" prot="public" virt="non-virtual"><scope>arrow::MapBuilder</scope><name>null_count</name></member>
      <member refid="classarrow_1_1_array_builder_1a9ea96ba4121857ab23241b6b408051b9" prot="protected" virt="non-virtual"><scope>arrow::MapBuilder</scope><name>null_count_</name></member>
      <member refid="classarrow_1_1_array_builder_1aa829b8339092408c9d710cc2c1bdc46a" prot="public" virt="non-virtual"><scope>arrow::MapBuilder</scope><name>num_children</name></member>
      <member refid="classarrow_1_1_array_builder_1a33e3aa20cedda9f6d8581809437f1c86" prot="protected" virt="non-virtual"><scope>arrow::MapBuilder</scope><name>pool_</name></member>
      <member refid="classarrow_1_1_array_builder_1afe8448fda39a8529a119bde5ba7ba119" prot="public" virt="non-virtual"><scope>arrow::MapBuilder</scope><name>Reserve</name></member>
      <member refid="classarrow_1_1_map_builder_1aedad1aa92a893f60a677f2a59e30d65f" prot="public" virt="virtual"><scope>arrow::MapBuilder</scope><name>Reset</name></member>
      <member refid="classarrow_1_1_map_builder_1a2740b157594106cdee063de3c6d40173" prot="public" virt="virtual"><scope>arrow::MapBuilder</scope><name>Resize</name></member>
      <member refid="classarrow_1_1_array_builder_1aa505ec95646314c3b9254e0cce39538b" prot="protected" virt="non-virtual"><scope>arrow::MapBuilder</scope><name>SetNotNull</name></member>
      <member refid="classarrow_1_1_array_builder_1a1e3e49019e307f0829ef66b72ce1b82e" prot="protected" virt="non-virtual"><scope>arrow::MapBuilder</scope><name>TrimBuffer</name></member>
      <member refid="classarrow_1_1_map_builder_1a468ecd7d5d0b7236324528b3011373d2" prot="public" virt="virtual"><scope>arrow::MapBuilder</scope><name>type</name></member>
      <member refid="classarrow_1_1_array_builder_1a44b3f511e5aefdba55aebfd4afa99c8f" prot="protected" virt="non-virtual"><scope>arrow::MapBuilder</scope><name>UnsafeAppendNull</name></member>
      <member refid="classarrow_1_1_array_builder_1a2dbe80584eac62147112c4d0a43ceea2" prot="protected" virt="non-virtual"><scope>arrow::MapBuilder</scope><name>UnsafeAppendToBitmap</name></member>
      <member refid="classarrow_1_1_array_builder_1afd319659d3125af8a72c0c529c329c12" prot="protected" virt="non-virtual"><scope>arrow::MapBuilder</scope><name>UnsafeAppendToBitmap</name></member>
      <member refid="classarrow_1_1_array_builder_1a40a4e3c231f1f47dcd046c42ee63b63b" prot="protected" virt="non-virtual"><scope>arrow::MapBuilder</scope><name>UnsafeAppendToBitmap</name></member>
      <member refid="classarrow_1_1_array_builder_1a361c8efe3030a75126cbbbe90e9a3ee4" prot="protected" virt="non-virtual"><scope>arrow::MapBuilder</scope><name>UnsafeAppendToBitmap</name></member>
      <member refid="classarrow_1_1_array_builder_1aa0a2125633a3cdb1860d3f62d44ac4a1" prot="protected" virt="non-virtual"><scope>arrow::MapBuilder</scope><name>UnsafeSetNotNull</name></member>
      <member refid="classarrow_1_1_array_builder_1ab5622a696215f318672d5a800d4bfe48" prot="protected" virt="non-virtual"><scope>arrow::MapBuilder</scope><name>UnsafeSetNull</name></member>
      <member refid="classarrow_1_1_map_builder_1aae188ddffd83c7590f33fd784f146d36" prot="public" virt="non-virtual"><scope>arrow::MapBuilder</scope><name>value_builder</name></member>
      <member refid="classarrow_1_1_array_builder_1a74bb29b347e12ed7528925d12db109a7" prot="public" virt="virtual"><scope>arrow::MapBuilder</scope><name>~ArrayBuilder</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
