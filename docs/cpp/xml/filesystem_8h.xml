<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="filesystem_8h" kind="file" language="C++">
    <compoundname>filesystem.h</compoundname>
    <includes local="no">chrono</includes>
    <includes local="no">cstdint</includes>
    <includes local="no">iosfwd</includes>
    <includes local="no">memory</includes>
    <includes local="no">string</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes refid="type__fwd_8h" local="yes">arrow/type_fwd.h</includes>
    <includes refid="util_2compare_8h" local="yes">arrow/util/compare.h</includes>
    <includes refid="macros_8h" local="yes">arrow/util/macros.h</includes>
    <includes refid="arrow_2util_2visibility_8h" local="yes">arrow/util/visibility.h</includes>
    <includes refid="windows__fixup_8h" local="yes">arrow/util/windows_fixup.h</includes>
    <includedby refid="discovery_8h" local="yes">/arrow/cpp/src/arrow/dataset/discovery.h</includedby>
    <includedby refid="file__base_8h" local="yes">/arrow/cpp/src/arrow/dataset/file_base.h</includedby>
    <includedby refid="filesystem_2api_8h" local="yes">/arrow/cpp/src/arrow/filesystem/api.h</includedby>
    <includedby refid="filesystem_2hdfs_8h" local="yes">/arrow/cpp/src/arrow/filesystem/hdfs.h</includedby>
    <includedby refid="localfs_8h" local="yes">/arrow/cpp/src/arrow/filesystem/localfs.h</includedby>
    <includedby refid="mockfs_8h" local="yes">/arrow/cpp/src/arrow/filesystem/mockfs.h</includedby>
    <includedby refid="path__forest_8h" local="yes">/arrow/cpp/src/arrow/filesystem/path_forest.h</includedby>
    <includedby refid="s3__internal_8h" local="yes">/arrow/cpp/src/arrow/filesystem/s3_internal.h</includedby>
    <includedby refid="s3fs_8h" local="yes">/arrow/cpp/src/arrow/filesystem/s3fs.h</includedby>
    <includedby refid="filesystem_2util__internal_8h" local="yes">/arrow/cpp/src/arrow/filesystem/util_internal.h</includedby>
    <incdepgraph>
      <node id="7195">
        <label>arrow/util/windows_fixup.h</label>
        <link refid="windows__fixup_8h"/>
      </node>
      <node id="7193">
        <label>arrow/util/compare.h</label>
        <link refid="util_2compare_8h"/>
        <childnode refid="7186" relation="include">
        </childnode>
        <childnode refid="7194" relation="include">
        </childnode>
        <childnode refid="7188" relation="include">
        </childnode>
        <childnode refid="7191" relation="include">
        </childnode>
      </node>
      <node id="7184">
        <label>cstdint</label>
      </node>
      <node id="7190">
        <label>arrow/type_fwd.h</label>
        <link refid="type__fwd_8h"/>
        <childnode refid="7186" relation="include">
        </childnode>
        <childnode refid="7187" relation="include">
        </childnode>
        <childnode refid="7189" relation="include">
        </childnode>
        <childnode refid="7191" relation="include">
        </childnode>
        <childnode refid="7192" relation="include">
        </childnode>
      </node>
      <node id="7187">
        <label>string</label>
      </node>
      <node id="7192">
        <label>arrow/util/visibility.h</label>
        <link refid="arrow_2util_2visibility_8h"/>
      </node>
      <node id="7189">
        <label>vector</label>
      </node>
      <node id="7188">
        <label>utility</label>
      </node>
      <node id="7185">
        <label>iosfwd</label>
      </node>
      <node id="7183">
        <label>chrono</label>
      </node>
      <node id="7194">
        <label>type_traits</label>
      </node>
      <node id="7182">
        <label>/arrow/cpp/src/arrow/filesystem/filesystem.h</label>
        <link refid="filesystem_8h"/>
        <childnode refid="7183" relation="include">
        </childnode>
        <childnode refid="7184" relation="include">
        </childnode>
        <childnode refid="7185" relation="include">
        </childnode>
        <childnode refid="7186" relation="include">
        </childnode>
        <childnode refid="7187" relation="include">
        </childnode>
        <childnode refid="7188" relation="include">
        </childnode>
        <childnode refid="7189" relation="include">
        </childnode>
        <childnode refid="7190" relation="include">
        </childnode>
        <childnode refid="7193" relation="include">
        </childnode>
        <childnode refid="7191" relation="include">
        </childnode>
        <childnode refid="7192" relation="include">
        </childnode>
        <childnode refid="7195" relation="include">
        </childnode>
      </node>
      <node id="7186">
        <label>memory</label>
      </node>
      <node id="7191">
        <label>arrow/util/macros.h</label>
        <link refid="macros_8h"/>
        <childnode refid="7184" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="7204">
        <label>/arrow/cpp/src/arrow/filesystem/localfs.h</label>
        <link refid="localfs_8h"/>
        <childnode refid="7202" relation="include">
        </childnode>
      </node>
      <node id="7201">
        <label>/arrow/cpp/src/arrow/dataset/file_parquet.h</label>
        <link refid="file__parquet_8h"/>
        <childnode refid="7198" relation="include">
        </childnode>
      </node>
      <node id="7203">
        <label>/arrow/cpp/src/arrow/filesystem/hdfs.h</label>
        <link refid="filesystem_2hdfs_8h"/>
        <childnode refid="7202" relation="include">
        </childnode>
      </node>
      <node id="7209">
        <label>/arrow/cpp/src/arrow/filesystem/util_internal.h</label>
        <link refid="filesystem_2util__internal_8h"/>
      </node>
      <node id="7202">
        <label>/arrow/cpp/src/arrow/filesystem/api.h</label>
        <link refid="filesystem_2api_8h"/>
      </node>
      <node id="7199">
        <label>/arrow/cpp/src/arrow/dataset/file_base.h</label>
        <link refid="file__base_8h"/>
        <childnode refid="7198" relation="include">
        </childnode>
        <childnode refid="7200" relation="include">
        </childnode>
        <childnode refid="7201" relation="include">
        </childnode>
      </node>
      <node id="7197">
        <label>/arrow/cpp/src/arrow/dataset/discovery.h</label>
        <link refid="discovery_8h"/>
        <childnode refid="7198" relation="include">
        </childnode>
      </node>
      <node id="7205">
        <label>/arrow/cpp/src/arrow/filesystem/mockfs.h</label>
        <link refid="mockfs_8h"/>
        <childnode refid="7202" relation="include">
        </childnode>
      </node>
      <node id="7200">
        <label>/arrow/cpp/src/arrow/dataset/file_ipc.h</label>
        <link refid="file__ipc_8h"/>
        <childnode refid="7198" relation="include">
        </childnode>
      </node>
      <node id="7208">
        <label>/arrow/cpp/src/arrow/filesystem/s3fs.h</label>
        <link refid="s3fs_8h"/>
        <childnode refid="7202" relation="include">
        </childnode>
      </node>
      <node id="7206">
        <label>/arrow/cpp/src/arrow/filesystem/path_forest.h</label>
        <link refid="path__forest_8h"/>
        <childnode refid="7197" relation="include">
        </childnode>
        <childnode refid="7199" relation="include">
        </childnode>
      </node>
      <node id="7207">
        <label>/arrow/cpp/src/arrow/filesystem/s3_internal.h</label>
        <link refid="s3__internal_8h"/>
      </node>
      <node id="7196">
        <label>/arrow/cpp/src/arrow/filesystem/filesystem.h</label>
        <link refid="filesystem_8h"/>
        <childnode refid="7197" relation="include">
        </childnode>
        <childnode refid="7199" relation="include">
        </childnode>
        <childnode refid="7202" relation="include">
        </childnode>
        <childnode refid="7203" relation="include">
        </childnode>
        <childnode refid="7204" relation="include">
        </childnode>
        <childnode refid="7205" relation="include">
        </childnode>
        <childnode refid="7206" relation="include">
        </childnode>
        <childnode refid="7207" relation="include">
        </childnode>
        <childnode refid="7208" relation="include">
        </childnode>
        <childnode refid="7209" relation="include">
        </childnode>
      </node>
      <node id="7198">
        <label>/arrow/cpp/src/arrow/dataset/api.h</label>
        <link refid="dataset_2api_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structarrow_1_1fs_1_1_file_info" prot="public">arrow::fs::FileInfo</innerclass>
    <innerclass refid="structarrow_1_1fs_1_1_file_info_1_1_by_path" prot="public">arrow::fs::FileInfo::ByPath</innerclass>
    <innerclass refid="structarrow_1_1fs_1_1_file_selector" prot="public">arrow::fs::FileSelector</innerclass>
    <innerclass refid="classarrow_1_1fs_1_1_file_system" prot="public">arrow::fs::FileSystem</innerclass>
    <innerclass refid="classarrow_1_1fs_1_1_sub_tree_file_system" prot="public">arrow::fs::SubTreeFileSystem</innerclass>
    <innerclass refid="classarrow_1_1fs_1_1_slow_file_system" prot="public">arrow::fs::SlowFileSystem</innerclass>
    <innernamespace refid="namespacearrow">arrow</innernamespace>
    <innernamespace refid="namespacearrow_1_1io">arrow::io</innernamespace>
    <innernamespace refid="namespacearrow_1_1fs">arrow::fs</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;chrono&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iosfwd&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type__fwd_8h" kindref="compound">arrow/type_fwd.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="util_2compare_8h" kindref="compound">arrow/util/compare.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="macros_8h" kindref="compound">arrow/util/macros.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="arrow_2util_2visibility_8h" kindref="compound">arrow/util/visibility.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="windows__fixup_8h" kindref="compound">arrow/util/windows_fixup.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacearrow" kindref="compound">arrow</ref><sp/>{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">io<sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">InputStream;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">LatencyGenerator;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">OutputStream;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">RandomAccessFile;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>io</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">fs<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">//<sp/>A<sp/>system<sp/>clock<sp/>time<sp/>point<sp/>expressed<sp/>as<sp/>a<sp/>64-bit<sp/>(or<sp/>more)<sp/>number<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="comment">//<sp/>nanoseconds<sp/>since<sp/>the<sp/>epoch.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="namespacearrow_1_1fs_1ae5daf21ab2c817a43e3f937b7fc9d3b8" kindref="member">TimePoint</ref><sp/>=</highlight></codeline>
<codeline lineno="50" refid="namespacearrow_1_1fs_1ae5daf21ab2c817a43e3f937b7fc9d3b8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::chrono::time_point&lt;std::chrono::system_clock,<sp/>std::chrono::nanoseconds&gt;;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="namespacearrow_1_1fs_1ae7f70d357901a07a605fcdd5e2bfc98b" refkind="member"><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/><ref refid="namespacearrow_1_1fs_1ae7f70d357901a07a605fcdd5e2bfc98b" kindref="member">FileType</ref><sp/>:<sp/>int8_t<sp/>{</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><ref refid="namespacearrow_1_1fs_1ae7f70d357901a07a605fcdd5e2bfc98ba38c300f4fc9ce8a77aad4a30de05cad8" kindref="member">NotFound</ref>,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><ref refid="namespacearrow_1_1fs_1ae7f70d357901a07a605fcdd5e2bfc98ba88183b946cc5f0e8c96b2e66e1c74a7e" kindref="member">Unknown</ref>,</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><ref refid="namespacearrow_1_1fs_1ae7f70d357901a07a605fcdd5e2bfc98ba0b27918290ff5323bea1e3b78a9cf04e" kindref="member">File</ref>,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><ref refid="namespacearrow_1_1fs_1ae7f70d357901a07a605fcdd5e2bfc98bae73cda510e8bb947f7e61089e5581494" kindref="member">Directory</ref></highlight></codeline>
<codeline lineno="65"><highlight class="normal">};</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal">ARROW_EXPORT<sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>(<ref refid="namespacearrow_1_1fs_1ae7f70d357901a07a605fcdd5e2bfc98b" kindref="member">FileType</ref>);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal">ARROW_EXPORT<sp/>std::ostream&amp;<sp/><ref refid="namespacearrow_1_1fs_1a5d0258ac07dca9fc4234115b2d6a4985" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>os,<sp/><ref refid="namespacearrow_1_1fs_1ae7f70d357901a07a605fcdd5e2bfc98b" kindref="member">FileType</ref>);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>kNoSize<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacearrow_1_1fs_1ae5daf21ab2c817a43e3f937b7fc9d3b8" kindref="member">TimePoint</ref><sp/>kNoTime<sp/>=<sp/><ref refid="namespacearrow_1_1fs_1ae5daf21ab2c817a43e3f937b7fc9d3b8" kindref="member">TimePoint</ref>(<ref refid="group__type-factories_1ga4a09df951503764895e56db3fe5d053c" kindref="member">TimePoint::duration</ref>(-1));</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="structarrow_1_1fs_1_1_file_info" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1util_1_1_equality_comparable" kindref="compound">util::EqualityComparable</ref>&lt;FileInfo&gt;<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><ref refid="namespacearrow_1_1fs_1a2158c4a2cb23c9257fd1c192e6f6dad1" kindref="member">FileInfo</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><ref refid="namespacearrow_1_1fs_1a2158c4a2cb23c9257fd1c192e6f6dad1" kindref="member">FileInfo</ref>(<ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref>&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref>&amp;<sp/>operator=(<ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref>&amp;&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><ref refid="namespacearrow_1_1fs_1a2158c4a2cb23c9257fd1c192e6f6dad1" kindref="member">FileInfo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref>&amp;)<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="structarrow_1_1fs_1_1_file_info_1a5a5713d7cc8113a9dd0c2ea36393878d" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacearrow_1_1fs_1ae7f70d357901a07a605fcdd5e2bfc98b" kindref="member">FileType</ref><sp/><ref refid="structarrow_1_1fs_1_1_file_info_1a5a5713d7cc8113a9dd0c2ea36393878d" kindref="member">type</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_;<sp/>}</highlight></codeline>
<codeline lineno="84" refid="structarrow_1_1fs_1_1_file_info_1aa5d96d2e13523351b51f7a05cde137fa" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1fs_1_1_file_info_1aa5d96d2e13523351b51f7a05cde137fa" kindref="member">set_type</ref>(<ref refid="namespacearrow_1_1fs_1ae7f70d357901a07a605fcdd5e2bfc98b" kindref="member">FileType</ref><sp/>type)<sp/>{<sp/>type_<sp/>=<sp/>type;<sp/>}</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="87" refid="structarrow_1_1fs_1_1_file_info_1a8d8afac04486180d00a165bdd4357c63" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="structarrow_1_1fs_1_1_file_info_1a8d8afac04486180d00a165bdd4357c63" kindref="member">path</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>path_;<sp/>}</highlight></codeline>
<codeline lineno="88" refid="structarrow_1_1fs_1_1_file_info_1ad008575c02a7804c37dad021afc62b8d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1fs_1_1_file_info_1ad008575c02a7804c37dad021afc62b8d" kindref="member">set_path</ref>(std::string<sp/>path)<sp/>{<sp/>path_<sp/>=<sp/>std::move(path);<sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/>std::string<sp/>base_name()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>directory<sp/>base<sp/>name<sp/>(component<sp/>before<sp/>the<sp/>file<sp/>base<sp/>name).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/>std::string<sp/>dir_name()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="99" refid="structarrow_1_1fs_1_1_file_info_1a331d4198caafc5657a4b12b6eafb407e" refkind="member"><highlight class="normal"><sp/><sp/>int64_t<sp/><ref refid="structarrow_1_1fs_1_1_file_info_1a331d4198caafc5657a4b12b6eafb407e" kindref="member">size</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>size_;<sp/>}</highlight></codeline>
<codeline lineno="100" refid="structarrow_1_1fs_1_1_file_info_1aae32805a95348633228d24018bfbe1cf" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1fs_1_1_file_info_1aae32805a95348633228d24018bfbe1cf" kindref="member">set_size</ref>(int64_t<sp/>size)<sp/>{<sp/>size_<sp/>=<sp/>size;<sp/>}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/>std::string<sp/>extension()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="structarrow_1_1fs_1_1_file_info_1ac20f62017b58598d50452891d9d7d85f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacearrow_1_1fs_1ae5daf21ab2c817a43e3f937b7fc9d3b8" kindref="member">TimePoint</ref><sp/><ref refid="structarrow_1_1fs_1_1_file_info_1ac20f62017b58598d50452891d9d7d85f" kindref="member">mtime</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>mtime_;<sp/>}</highlight></codeline>
<codeline lineno="107" refid="structarrow_1_1fs_1_1_file_info_1a49f82612c3339fc4ead4c35d69ee4f35" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1fs_1_1_file_info_1a49f82612c3339fc4ead4c35d69ee4f35" kindref="member">set_mtime</ref>(<ref refid="namespacearrow_1_1fs_1ae5daf21ab2c817a43e3f937b7fc9d3b8" kindref="member">TimePoint</ref><sp/>mtime)<sp/>{<sp/>mtime_<sp/>=<sp/>mtime;<sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="structarrow_1_1fs_1_1_file_info_1a83a268ff1e1cfea2487c0d8640f268f4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1fs_1_1_file_info_1a83a268ff1e1cfea2487c0d8640f268f4" kindref="member">IsFile</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_<sp/>==<sp/>FileType::File;<sp/>}</highlight></codeline>
<codeline lineno="110" refid="structarrow_1_1fs_1_1_file_info_1a3a1753df078593fa05200c84bbf5dc04" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1fs_1_1_file_info_1a3a1753df078593fa05200c84bbf5dc04" kindref="member">IsDirectory</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_<sp/>==<sp/>FileType::Directory;<sp/>}</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="112" refid="structarrow_1_1fs_1_1_file_info_1affe395af25376e394d41a0d9d578799f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1fs_1_1_file_info_1affe395af25376e394d41a0d9d578799f" kindref="member">Equals</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type()<sp/>==<sp/>other.<ref refid="structarrow_1_1fs_1_1_file_info_1a5a5713d7cc8113a9dd0c2ea36393878d" kindref="member">type</ref>()<sp/>&amp;&amp;<sp/>path()<sp/>==<sp/>other.<ref refid="structarrow_1_1fs_1_1_file_info_1a8d8afac04486180d00a165bdd4357c63" kindref="member">path</ref>()<sp/>&amp;&amp;<sp/>size()<sp/>==<sp/>other.<ref refid="structarrow_1_1fs_1_1_file_info_1a331d4198caafc5657a4b12b6eafb407e" kindref="member">size</ref>()<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mtime()<sp/>==<sp/>other.<ref refid="structarrow_1_1fs_1_1_file_info_1ac20f62017b58598d50452891d9d7d85f" kindref="member">mtime</ref>();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="122" refid="structarrow_1_1fs_1_1_file_info_1_1_by_path" refkind="compound"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structarrow_1_1fs_1_1_file_info_1_1_by_path" kindref="compound">ByPath</ref><sp/>{</highlight></codeline>
<codeline lineno="123" refid="structarrow_1_1fs_1_1_file_info_1_1_by_path_1a157e369f32efa292d0b8681fdbd84e1a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1fs_1_1_file_info_1_1_by_path_1a157e369f32efa292d0b8681fdbd84e1a" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref>&amp;<sp/>l,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref>&amp;<sp/>r)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l.<ref refid="structarrow_1_1fs_1_1_file_info_1a8d8afac04486180d00a165bdd4357c63" kindref="member">path</ref>()<sp/>&lt;<sp/>r.<ref refid="structarrow_1_1fs_1_1_file_info_1a8d8afac04486180d00a165bdd4357c63" kindref="member">path</ref>();</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="127" refid="structarrow_1_1fs_1_1_file_info_1_1_by_path_1ab4372399c3e5f089b54482c067232b52" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1fs_1_1_file_info_1_1_by_path_1ab4372399c3e5f089b54482c067232b52" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref>&amp;<sp/>i)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::hash&lt;std::string&gt;{}(i.<ref refid="structarrow_1_1fs_1_1_file_info_1a8d8afac04486180d00a165bdd4357c63" kindref="member">path</ref>());</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="133" refid="structarrow_1_1fs_1_1_file_info_1a8068def0347bbbe1a2745b04f1c2ef2f" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacearrow_1_1fs_1ae7f70d357901a07a605fcdd5e2bfc98b" kindref="member">FileType</ref><sp/>type_<sp/>=<sp/>FileType::Unknown;</highlight></codeline>
<codeline lineno="134" refid="structarrow_1_1fs_1_1_file_info_1a1e219c4bb797c59cd253379b9f5e5866" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="structarrow_1_1fs_1_1_file_info_1a1e219c4bb797c59cd253379b9f5e5866" kindref="member">path_</ref>;</highlight></codeline>
<codeline lineno="135" refid="structarrow_1_1fs_1_1_file_info_1a34d55e9844ecdc19025d831ffd2b9d29" refkind="member"><highlight class="normal"><sp/><sp/>int64_t<sp/>size_<sp/>=<sp/>kNoSize;</highlight></codeline>
<codeline lineno="136" refid="structarrow_1_1fs_1_1_file_info_1aa0b3bdcd23c051de20b22dfee3c7a316" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacearrow_1_1fs_1ae5daf21ab2c817a43e3f937b7fc9d3b8" kindref="member">TimePoint</ref><sp/>mtime_<sp/>=<sp/>kNoTime;</highlight></codeline>
<codeline lineno="137"><highlight class="normal">};</highlight></codeline>
<codeline lineno="138" refid="namespacearrow_1_1fs_1a2158c4a2cb23c9257fd1c192e6f6dad1" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>FileStats<sp/><ref refid="macros_8h_1a549c31e444db4171aa03c5d51bac855c" kindref="member">ARROW_DEPRECATED_USING</ref>(</highlight><highlight class="stringliteral">&quot;Use<sp/>FileInfo&quot;</highlight><highlight class="normal">)<sp/>=<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref>;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal">ARROW_EXPORT<sp/>std::ostream&amp;<sp/><ref refid="namespacearrow_1_1fs_1a210ee569d40df1f8406abf30c02852bb" kindref="member">operator&lt;&lt;</ref>(std::ostream&amp;<sp/>os,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref>&amp;);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="143" refid="structarrow_1_1fs_1_1_file_selector" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="structarrow_1_1fs_1_1_file_selector" kindref="compound">FileSelector</ref><sp/>{</highlight></codeline>
<codeline lineno="146" refid="structarrow_1_1fs_1_1_file_selector_1a5736330a72fa912314aba0ec4f0e4105" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="structarrow_1_1fs_1_1_file_selector_1a5736330a72fa912314aba0ec4f0e4105" kindref="member">base_dir</ref>;</highlight></codeline>
<codeline lineno="149" refid="structarrow_1_1fs_1_1_file_selector_1aead1e24f5aa8bb7a3e893436cde83ea7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>allow_not_found<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="151" refid="structarrow_1_1fs_1_1_file_selector_1ac5642a0e14beebb274c80b24dda2168a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>recursive<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="153" refid="structarrow_1_1fs_1_1_file_selector_1a2b7d0aff4fbc17195aa746c9df425c17" refkind="member"><highlight class="normal"><sp/><sp/>int32_t<sp/>max_recursion<sp/>=<sp/>INT32_MAX;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155" refid="structarrow_1_1fs_1_1_file_selector_1a84fe98b7e3633d6e0902bc0486c664bd" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1fs_1_1_file_selector_1a84fe98b7e3633d6e0902bc0486c664bd" kindref="member">FileSelector</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="156"><highlight class="normal">};</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="159" refid="classarrow_1_1fs_1_1_file_system" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1fs_1_1_file_system" kindref="compound">FileSystem</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::enable_shared_from_this&lt;FileSystem&gt;<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classarrow_1_1fs_1_1_file_system" kindref="compound">FileSystem</ref>();</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/>type_name()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::string&gt;</ref><sp/>NormalizePath(std::string<sp/>path);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Equals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1fs_1_1_file_system" kindref="compound">FileSystem</ref>&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173" refid="classarrow_1_1fs_1_1_file_system_1aa0bfcdc572b747ce2b650147d8ddb888" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1fs_1_1_file_system_1aa0bfcdc572b747ce2b650147d8ddb888" kindref="member">Equals</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;FileSystem&gt;&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Equals(*other);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;FileInfo&gt;</ref><sp/>GetFileInfo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>path)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::vector&lt;FileInfo&gt;</ref>&gt;<sp/>GetFileInfo(</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;&amp;<sp/>paths);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::vector&lt;FileInfo&gt;</ref>&gt;<sp/>GetFileInfo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1fs_1_1_file_selector" kindref="compound">FileSelector</ref>&amp;<sp/>select)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>CreateDir(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>path,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>recursive<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>DeleteDir(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>path)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>DeleteDirContents(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>path)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>DeleteFile(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>path)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>DeleteFiles(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;&amp;<sp/>paths);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>Move(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>src,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>dest)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>CopyFile(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>src,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>dest)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;io::InputStream&gt;</ref>&gt;<sp/>OpenInputStream(</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>path)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;io::RandomAccessFile&gt;</ref>&gt;<sp/>OpenInputFile(</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>path)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;io::OutputStream&gt;</ref>&gt;<sp/>OpenOutputStream(</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>path)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;io::OutputStream&gt;</ref>&gt;<sp/>OpenAppendStream(</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>path)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="248"><highlight class="normal">};</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="259" refid="classarrow_1_1fs_1_1_sub_tree_file_system" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1fs_1_1_sub_tree_file_system" kindref="compound">SubTreeFileSystem</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1fs_1_1_file_system" kindref="compound">FileSystem</ref><sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>constructor<sp/>may<sp/>abort<sp/>if<sp/>base_path<sp/>is<sp/>invalid.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1fs_1_1_sub_tree_file_system" kindref="compound">SubTreeFileSystem</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>base_path,</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;FileSystem&gt;<sp/>base_fs);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/>~<ref refid="classarrow_1_1fs_1_1_sub_tree_file_system" kindref="compound">SubTreeFileSystem</ref>()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266" refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a6a5343686f2afa903a4a0ce2882ee162" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a6a5343686f2afa903a4a0ce2882ee162" kindref="member">type_name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;subtree&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="267" refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a18ac48282fe9bf8c1f0d2bb5afc9899a" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a18ac48282fe9bf8c1f0d2bb5afc9899a" kindref="member">base_path</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>base_path_;<sp/>}</highlight></codeline>
<codeline lineno="268" refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a4b3f86fc827eca7df8d5fd13acd14e04" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;FileSystem&gt;<sp/><ref refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a4b3f86fc827eca7df8d5fd13acd14e04" kindref="member">base_fs</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>base_fs_;<sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::string&gt;</ref><sp/>NormalizePath(std::string<sp/>path)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Equals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1fs_1_1_file_system" kindref="compound">FileSystem</ref>&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>FileSystem::GetFileInfo;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;FileInfo&gt;</ref><sp/>GetFileInfo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>path)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::vector&lt;FileInfo&gt;</ref>&gt;<sp/>GetFileInfo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1fs_1_1_file_selector" kindref="compound">FileSelector</ref>&amp;<sp/>select)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>CreateDir(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>path,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>recursive<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>DeleteDir(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>path)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>DeleteDirContents(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>path)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>DeleteFile(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>path)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>Move(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>src,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>dest)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>CopyFile(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>src,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>dest)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;io::InputStream&gt;</ref>&gt;<sp/>OpenInputStream(</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>path)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;io::RandomAccessFile&gt;</ref>&gt;<sp/>OpenInputFile(</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>path)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;io::OutputStream&gt;</ref>&gt;<sp/>OpenOutputStream(</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>path)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;io::OutputStream&gt;</ref>&gt;<sp/>OpenAppendStream(</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>path)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="301" refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a8d4709e1653f0b145b94ddbab4d4c7ad" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a8d4709e1653f0b145b94ddbab4d4c7ad" kindref="member">SubTreeFileSystem</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303" refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a2aadb2172efe8a87088edb59696665ea" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a2aadb2172efe8a87088edb59696665ea" kindref="member">base_path_</ref>;</highlight></codeline>
<codeline lineno="304" refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a71f06ce0d94daa6f5ae58cd2972c4c08" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;FileSystem&gt;<sp/><ref refid="classarrow_1_1fs_1_1_sub_tree_file_system_1a71f06ce0d94daa6f5ae58cd2972c4c08" kindref="member">base_fs_</ref>;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/>std::string<sp/>PrependBase(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>s)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>PrependBaseNonEmpty(std::string*<sp/>s)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::string&gt;</ref><sp/>StripBase(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>s)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>FixInfo(<ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref>*<sp/>info)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::string&gt;</ref><sp/>NormalizeBasePath(</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::string<sp/>base_path,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;FileSystem&gt;&amp;<sp/>base_fs);</highlight></codeline>
<codeline lineno="313"><highlight class="normal">};</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="317" refid="classarrow_1_1fs_1_1_slow_file_system" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1fs_1_1_slow_file_system" kindref="compound">SlowFileSystem</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1fs_1_1_file_system" kindref="compound">FileSystem</ref><sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1fs_1_1_slow_file_system" kindref="compound">SlowFileSystem</ref>(std::shared_ptr&lt;FileSystem&gt;<sp/>base_fs,</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;io::LatencyGenerator&gt;<sp/>latencies);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1fs_1_1_slow_file_system" kindref="compound">SlowFileSystem</ref>(std::shared_ptr&lt;FileSystem&gt;<sp/>base_fs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>average_latency);</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1fs_1_1_slow_file_system" kindref="compound">SlowFileSystem</ref>(std::shared_ptr&lt;FileSystem&gt;<sp/>base_fs,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>average_latency,</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int32_t<sp/>seed);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"></highlight></codeline>
<codeline lineno="325" refid="classarrow_1_1fs_1_1_slow_file_system_1ab1fa6ad1dfcf76cc818176d0820a2997" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classarrow_1_1fs_1_1_slow_file_system_1ab1fa6ad1dfcf76cc818176d0820a2997" kindref="member">type_name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;slow&quot;</highlight><highlight class="normal">;<sp/>}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Equals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1fs_1_1_file_system" kindref="compound">FileSystem</ref>&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>FileSystem::GetFileInfo;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;FileInfo&gt;</ref><sp/>GetFileInfo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>path)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::vector&lt;FileInfo&gt;</ref>&gt;<sp/>GetFileInfo(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1fs_1_1_file_selector" kindref="compound">FileSelector</ref>&amp;<sp/>select)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>CreateDir(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>path,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>recursive<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>DeleteDir(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>path)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>DeleteDirContents(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>path)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>DeleteFile(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>path)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>Move(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>src,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>dest)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>CopyFile(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>src,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>dest)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;io::InputStream&gt;</ref>&gt;<sp/>OpenInputStream(</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>path)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;io::RandomAccessFile&gt;</ref>&gt;<sp/>OpenInputFile(</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>path)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;io::OutputStream&gt;</ref>&gt;<sp/>OpenOutputStream(</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>path)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;io::OutputStream&gt;</ref>&gt;<sp/>OpenAppendStream(</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>path)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="353" refid="classarrow_1_1fs_1_1_slow_file_system_1a17348d4265b2beec2eea9b0fa44397d7" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;FileSystem&gt;<sp/><ref refid="classarrow_1_1fs_1_1_slow_file_system_1a17348d4265b2beec2eea9b0fa44397d7" kindref="member">base_fs_</ref>;</highlight></codeline>
<codeline lineno="354" refid="classarrow_1_1fs_1_1_slow_file_system_1a24d4963661714c3975964c12b7490d2d" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;io::LatencyGenerator&gt;<sp/><ref refid="classarrow_1_1fs_1_1_slow_file_system_1a24d4963661714c3975964c12b7490d2d" kindref="member">latencies_</ref>;</highlight></codeline>
<codeline lineno="355"><highlight class="normal">};</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"></codeline>
<codeline lineno="368"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;FileSystem&gt;</ref>&gt;<sp/><ref refid="namespacearrow_1_1fs_1aeefa716e3e4b7955cb084447abeb0976" kindref="member">FileSystemFromUri</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>uri,</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::string*<sp/>out_path<sp/>=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;FileSystem&gt;</ref>&gt;<sp/><ref refid="group__filesystem-factories_1ga8687f598b2c715fcc85f067fa94a5fab" kindref="member">FileSystemFromUriOrPath</ref>(</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>uri,<sp/>std::string*<sp/>out_path<sp/>=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>);</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"></codeline>
<codeline lineno="391"><highlight class="normal"><ref refid="macros_8h_1aa2ec0a506575823661e32d0be213b070" kindref="member">ARROW_DEPRECATED</ref>(</highlight><highlight class="stringliteral">&quot;Use<sp/>Result-returning<sp/>version&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="namespacearrow_1_1fs_1aeefa716e3e4b7955cb084447abeb0976" kindref="member">FileSystemFromUri</ref>(const<sp/><ref refid="namespacestd" kindref="compound">std</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">&amp;<sp/>uri,<sp/><ref refid="namespacestd" kindref="compound">std</ref>::shared_ptr&lt;<ref refid="classarrow_1_1fs_1_1_file_system" kindref="compound">FileSystem</ref>&gt;*<sp/>out_fs,</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacestd" kindref="compound">std</ref>::</highlight><highlight class="keywordtype">string</highlight><highlight class="normal">*<sp/>out_path<sp/>=<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>fs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>arrow</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/arrow/cpp/src/arrow/filesystem/filesystem.h"/>
  </compounddef>
</doxygen>
