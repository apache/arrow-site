<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="cuda__memory_8h" kind="file" language="C++">
    <compoundname>cuda_memory.h</compoundname>
    <includes local="no">cstdint</includes>
    <includes local="no">memory</includes>
    <includes refid="buffer_8h" local="yes">arrow/buffer.h</includes>
    <includes refid="concurrency_8h" local="yes">arrow/io/concurrency.h</includes>
    <includes refid="type__fwd_8h" local="yes">arrow/type_fwd.h</includes>
    <includedby refid="cuda__api_8h" local="yes">/arrow/cpp/src/arrow/gpu/cuda_api.h</includedby>
    <includedby refid="cuda__arrow__ipc_8h" local="yes">/arrow/cpp/src/arrow/gpu/cuda_arrow_ipc.h</includedby>
    <incdepgraph>
      <node id="7977">
        <label>arrow/util/compare.h</label>
        <link refid="util_2compare_8h"/>
        <childnode refid="7965" relation="include">
        </childnode>
        <childnode refid="7969" relation="include">
        </childnode>
        <childnode refid="7970" relation="include">
        </childnode>
        <childnode refid="7975" relation="include">
        </childnode>
      </node>
      <node id="7964">
        <label>cstdint</label>
      </node>
      <node id="7966">
        <label>arrow/buffer.h</label>
        <link refid="buffer_8h"/>
        <childnode refid="7964" relation="include">
        </childnode>
        <childnode refid="7967" relation="include">
        </childnode>
        <childnode refid="7965" relation="include">
        </childnode>
        <childnode refid="7968" relation="include">
        </childnode>
        <childnode refid="7969" relation="include">
        </childnode>
        <childnode refid="7970" relation="include">
        </childnode>
        <childnode refid="7971" relation="include">
        </childnode>
        <childnode refid="7972" relation="include">
        </childnode>
        <childnode refid="7973" relation="include">
        </childnode>
        <childnode refid="7978" relation="include">
        </childnode>
        <childnode refid="7974" relation="include">
        </childnode>
        <childnode refid="7975" relation="include">
        </childnode>
        <childnode refid="7982" relation="include">
        </childnode>
        <childnode refid="7976" relation="include">
        </childnode>
      </node>
      <node id="7978">
        <label>arrow/status.h</label>
        <link refid="status_8h"/>
        <childnode refid="7967" relation="include">
        </childnode>
        <childnode refid="7979" relation="include">
        </childnode>
        <childnode refid="7965" relation="include">
        </childnode>
        <childnode refid="7968" relation="include">
        </childnode>
        <childnode refid="7970" relation="include">
        </childnode>
        <childnode refid="7977" relation="include">
        </childnode>
        <childnode refid="7975" relation="include">
        </childnode>
        <childnode refid="7980" relation="include">
        </childnode>
        <childnode refid="7976" relation="include">
        </childnode>
      </node>
      <node id="7974">
        <label>arrow/type_fwd.h</label>
        <link refid="type__fwd_8h"/>
        <childnode refid="7965" relation="include">
        </childnode>
        <childnode refid="7968" relation="include">
        </childnode>
        <childnode refid="7971" relation="include">
        </childnode>
        <childnode refid="7975" relation="include">
        </childnode>
        <childnode refid="7976" relation="include">
        </childnode>
      </node>
      <node id="7985">
        <label>arrow/io/interfaces.h</label>
        <link refid="interfaces_8h"/>
        <childnode refid="7964" relation="include">
        </childnode>
        <childnode refid="7965" relation="include">
        </childnode>
        <childnode refid="7968" relation="include">
        </childnode>
        <childnode refid="7971" relation="include">
        </childnode>
        <childnode refid="7973" relation="include">
        </childnode>
        <childnode refid="7974" relation="include">
        </childnode>
        <childnode refid="7975" relation="include">
        </childnode>
        <childnode refid="7982" relation="include">
        </childnode>
        <childnode refid="7976" relation="include">
        </childnode>
      </node>
      <node id="7988">
        <label>arrow/util/checked_cast.h</label>
        <link refid="checked__cast_8h"/>
        <childnode refid="7965" relation="include">
        </childnode>
        <childnode refid="7969" relation="include">
        </childnode>
      </node>
      <node id="7968">
        <label>string</label>
      </node>
      <node id="7983">
        <label>arrow/vendored/string_view.hpp</label>
      </node>
      <node id="7981">
        <label>ostream</label>
      </node>
      <node id="7976">
        <label>arrow/util/visibility.h</label>
        <link refid="arrow_2util_2visibility_8h"/>
      </node>
      <node id="7972">
        <label>arrow/device.h</label>
        <link refid="device_8h"/>
        <childnode refid="7964" relation="include">
        </childnode>
        <childnode refid="7965" relation="include">
        </childnode>
        <childnode refid="7968" relation="include">
        </childnode>
        <childnode refid="7973" relation="include">
        </childnode>
        <childnode refid="7974" relation="include">
        </childnode>
        <childnode refid="7977" relation="include">
        </childnode>
        <childnode refid="7975" relation="include">
        </childnode>
        <childnode refid="7976" relation="include">
        </childnode>
      </node>
      <node id="7971">
        <label>vector</label>
      </node>
      <node id="7987">
        <label>new</label>
      </node>
      <node id="7970">
        <label>utility</label>
      </node>
      <node id="7982">
        <label>arrow/util/string_view.h</label>
        <link refid="string__view_8h"/>
        <childnode refid="7964" relation="include">
        </childnode>
        <childnode refid="7968" relation="include">
        </childnode>
        <childnode refid="7983" relation="include">
        </childnode>
      </node>
      <node id="7973">
        <label>arrow/io/type_fwd.h</label>
        <link refid="io_2type__fwd_8h"/>
      </node>
      <node id="7979">
        <label>iosfwd</label>
      </node>
      <node id="7963">
        <label>/arrow/cpp/src/arrow/gpu/cuda_memory.h</label>
        <link refid="cuda__memory_8h"/>
        <childnode refid="7964" relation="include">
        </childnode>
        <childnode refid="7965" relation="include">
        </childnode>
        <childnode refid="7966" relation="include">
        </childnode>
        <childnode refid="7984" relation="include">
        </childnode>
        <childnode refid="7974" relation="include">
        </childnode>
      </node>
      <node id="7984">
        <label>arrow/io/concurrency.h</label>
        <link refid="concurrency_8h"/>
        <childnode refid="7965" relation="include">
        </childnode>
        <childnode refid="7985" relation="include">
        </childnode>
        <childnode refid="7986" relation="include">
        </childnode>
        <childnode refid="7978" relation="include">
        </childnode>
        <childnode refid="7988" relation="include">
        </childnode>
        <childnode refid="7975" relation="include">
        </childnode>
        <childnode refid="7976" relation="include">
        </childnode>
      </node>
      <node id="7986">
        <label>arrow/result.h</label>
        <link refid="result_8h"/>
        <childnode refid="7987" relation="include">
        </childnode>
        <childnode refid="7968" relation="include">
        </childnode>
        <childnode refid="7969" relation="include">
        </childnode>
        <childnode refid="7970" relation="include">
        </childnode>
        <childnode refid="7978" relation="include">
        </childnode>
        <childnode refid="7977" relation="include">
        </childnode>
      </node>
      <node id="7969">
        <label>type_traits</label>
      </node>
      <node id="7967">
        <label>cstring</label>
      </node>
      <node id="7980">
        <label>arrow/util/string_builder.h</label>
        <link refid="string__builder_8h"/>
        <childnode refid="7965" relation="include">
        </childnode>
        <childnode refid="7981" relation="include">
        </childnode>
        <childnode refid="7968" relation="include">
        </childnode>
        <childnode refid="7970" relation="include">
        </childnode>
        <childnode refid="7976" relation="include">
        </childnode>
      </node>
      <node id="7965">
        <label>memory</label>
      </node>
      <node id="7975">
        <label>arrow/util/macros.h</label>
        <link refid="macros_8h"/>
        <childnode refid="7964" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="7991">
        <label>/arrow/cpp/src/arrow/gpu/cuda_arrow_ipc.h</label>
        <link refid="cuda__arrow__ipc_8h"/>
        <childnode refid="7990" relation="include">
        </childnode>
      </node>
      <node id="7990">
        <label>/arrow/cpp/src/arrow/gpu/cuda_api.h</label>
        <link refid="cuda__api_8h"/>
      </node>
      <node id="7989">
        <label>/arrow/cpp/src/arrow/gpu/cuda_memory.h</label>
        <link refid="cuda__memory_8h"/>
        <childnode refid="7990" relation="include">
        </childnode>
        <childnode refid="7991" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="classarrow_1_1cuda_1_1_cuda_buffer" prot="public">arrow::cuda::CudaBuffer</innerclass>
    <innerclass refid="classarrow_1_1cuda_1_1_cuda_host_buffer" prot="public">arrow::cuda::CudaHostBuffer</innerclass>
    <innerclass refid="classarrow_1_1cuda_1_1_cuda_ipc_mem_handle" prot="public">arrow::cuda::CudaIpcMemHandle</innerclass>
    <innerclass refid="classarrow_1_1cuda_1_1_cuda_buffer_reader" prot="public">arrow::cuda::CudaBufferReader</innerclass>
    <innerclass refid="classarrow_1_1cuda_1_1_cuda_buffer_writer" prot="public">arrow::cuda::CudaBufferWriter</innerclass>
    <innernamespace refid="namespacearrow">arrow</innernamespace>
    <innernamespace refid="namespacearrow_1_1cuda">arrow::cuda</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="buffer_8h" kindref="compound">arrow/buffer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="concurrency_8h" kindref="compound">arrow/io/concurrency.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type__fwd_8h" kindref="compound">arrow/type_fwd.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacearrow" kindref="compound">arrow</ref><sp/>{</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">cuda<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">CudaContext;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">CudaIpcMemHandle;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="37" refid="classarrow_1_1cuda_1_1_cuda_buffer" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1cuda_1_1_cuda_buffer" kindref="compound">CudaBuffer</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>XXX<sp/>deprecate?</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1cuda_1_1_cuda_buffer" kindref="compound">CudaBuffer</ref>(uint8_t*<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>,<sp/>int64_t<sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;CudaContext&gt;&amp;<sp/>context,</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>own_data<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_ipc<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1cuda_1_1_cuda_buffer" kindref="compound">CudaBuffer</ref>(uintptr_t<sp/>address,<sp/>int64_t<sp/>size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;CudaContext&gt;&amp;<sp/>context,</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>own_data<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>is_ipc<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1cuda_1_1_cuda_buffer" kindref="compound">CudaBuffer</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;CudaBuffer&gt;&amp;<sp/>parent,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>offset,</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>size);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/>~<ref refid="classarrow_1_1cuda_1_1_cuda_buffer" kindref="compound">CudaBuffer</ref>();</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;CudaBuffer&gt;</ref>&gt;<sp/>FromBuffer(std::shared_ptr&lt;Buffer&gt;<sp/>buffer);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><ref refid="macros_8h_1aa2ec0a506575823661e32d0be213b070" kindref="member">ARROW_DEPRECATED</ref>(</highlight><highlight class="stringliteral">&quot;Use<sp/>Result-returning<sp/>version&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>FromBuffer(std::shared_ptr&lt;Buffer&gt;<sp/>buffer,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;CudaBuffer&gt;*<sp/>out);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>CopyToHost(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>position,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>nbytes,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>out)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>CopyFromHost(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>position,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data,<sp/>int64_t<sp/>nbytes);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>CopyFromDevice(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>position,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data,<sp/>int64_t<sp/>nbytes);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>CopyFromAnotherDevice(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;CudaContext&gt;&amp;<sp/>src_ctx,</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>position,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data,<sp/>int64_t<sp/>nbytes);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;CudaIpcMemHandle&gt;</ref>&gt;<sp/>ExportForIpc();</highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><ref refid="macros_8h_1aa2ec0a506575823661e32d0be213b070" kindref="member">ARROW_DEPRECATED</ref>(</highlight><highlight class="stringliteral">&quot;Use<sp/>Result-returning<sp/>version&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>ExportForIpc(std::shared_ptr&lt;CudaIpcMemHandle&gt;*<sp/>handle);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="classarrow_1_1cuda_1_1_cuda_buffer_1aa927776914abab7325da8fc0ef19e45d" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;CudaContext&gt;&amp;<sp/><ref refid="classarrow_1_1cuda_1_1_cuda_buffer_1aa927776914abab7325da8fc0ef19e45d" kindref="member">context</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>context_;<sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="122" refid="classarrow_1_1cuda_1_1_cuda_buffer_1aafe61ce52540397e3276c7be157a6a9e" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;CudaContext&gt;<sp/><ref refid="classarrow_1_1cuda_1_1_cuda_buffer_1aafe61ce52540397e3276c7be157a6a9e" kindref="member">context_</ref>;</highlight></codeline>
<codeline lineno="123" refid="classarrow_1_1cuda_1_1_cuda_buffer_1a6d7b6368b50f82075b757ddbcec1d96c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1cuda_1_1_cuda_buffer_1a6d7b6368b50f82075b757ddbcec1d96c" kindref="member">own_data_</ref>;</highlight></codeline>
<codeline lineno="124" refid="classarrow_1_1cuda_1_1_cuda_buffer_1a41c83051f79f28cca3ae3b68bbcd6066" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1cuda_1_1_cuda_buffer_1a41c83051f79f28cca3ae3b68bbcd6066" kindref="member">is_ipc_</ref>;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>Close();</highlight></codeline>
<codeline lineno="127"><highlight class="normal">};</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="classarrow_1_1cuda_1_1_cuda_host_buffer" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1cuda_1_1_cuda_host_buffer" kindref="compound">CudaHostBuffer</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_mutable_buffer" kindref="compound">MutableBuffer</ref><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_mutable_buffer_1a3b01c712ad660aea1b10a0ad2b232ac7" kindref="member">MutableBuffer::MutableBuffer</ref>;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/>~<ref refid="classarrow_1_1cuda_1_1_cuda_host_buffer" kindref="compound">CudaHostBuffer</ref>();</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;uintptr_t&gt;</ref><sp/><ref refid="namespacearrow_1_1cuda_1a1738441f91556be0df2af295b22c1f58" kindref="member">GetDeviceAddress</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;CudaContext&gt;&amp;<sp/>ctx);</highlight></codeline>
<codeline lineno="138"><highlight class="normal">};</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="classarrow_1_1cuda_1_1_cuda_ipc_mem_handle" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1cuda_1_1_cuda_ipc_mem_handle" kindref="compound">CudaIpcMemHandle</ref><sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/>~<ref refid="classarrow_1_1cuda_1_1_cuda_ipc_mem_handle" kindref="compound">CudaIpcMemHandle</ref>();</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;CudaIpcMemHandle&gt;</ref>&gt;<sp/>FromBuffer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>opaque_handle);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><ref refid="macros_8h_1aa2ec0a506575823661e32d0be213b070" kindref="member">ARROW_DEPRECATED</ref>(</highlight><highlight class="stringliteral">&quot;Use<sp/>Result-returning<sp/>version&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>FromBuffer(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>opaque_handle,</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;CudaIpcMemHandle&gt;*<sp/>handle);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;Buffer&gt;</ref>&gt;<sp/>Serialize(</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/>pool<sp/>=<sp/><ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">default_memory_pool</ref>())<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><ref refid="macros_8h_1aa2ec0a506575823661e32d0be213b070" kindref="member">ARROW_DEPRECATED</ref>(</highlight><highlight class="stringliteral">&quot;Use<sp/>Result-returning<sp/>version&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>Serialize(<ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/>pool,<sp/>std::shared_ptr&lt;Buffer&gt;*<sp/>out)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1cuda_1_1_cuda_ipc_mem_handle" kindref="compound">CudaIpcMemHandle</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>handle);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1cuda_1_1_cuda_ipc_mem_handle" kindref="compound">CudaIpcMemHandle</ref>(int64_t<sp/>memory_size,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>cu_handle);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">CudaIpcMemHandleImpl;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;CudaIpcMemHandleImpl&gt;<sp/>impl_;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>handle()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/>int64_t<sp/>memory_size()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1cuda_1_1_cuda_buffer" kindref="compound">CudaBuffer</ref>;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">friend</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1cuda_1_1_cuda_context" kindref="compound">CudaContext</ref>;</highlight></codeline>
<codeline lineno="184"><highlight class="normal">};</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="194" refid="classarrow_1_1cuda_1_1_cuda_buffer_reader" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1cuda_1_1_cuda_buffer_reader" kindref="compound">CudaBufferReader</ref></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>::arrow::io::internal::RandomAccessFileConcurrencyWrapper&lt;CudaBufferReader&gt;<sp/>{</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1cuda_1_1_cuda_buffer_reader" kindref="compound">CudaBufferReader</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Buffer&gt;&amp;<sp/>buffer);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>closed()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>supports_zero_copy()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"></highlight></codeline>
<codeline lineno="203" refid="classarrow_1_1cuda_1_1_cuda_buffer_reader_1a84ad7364befe895392dfa954a0156996" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;CudaBuffer&gt;<sp/><ref refid="classarrow_1_1cuda_1_1_cuda_buffer_reader_1a84ad7364befe895392dfa954a0156996" kindref="member">buffer</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buffer_;<sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/>friend<sp/>::arrow::io::internal::RandomAccessFileConcurrencyWrapper&lt;CudaBufferReader&gt;;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>DoClose();</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;int64_t&gt;</ref><sp/>DoRead(int64_t<sp/>nbytes,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>buffer);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;Buffer&gt;</ref>&gt;<sp/>DoRead(int64_t<sp/>nbytes);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;int64_t&gt;</ref><sp/>DoReadAt(int64_t<sp/>position,<sp/>int64_t<sp/>nbytes,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>out);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;Buffer&gt;</ref>&gt;<sp/>DoReadAt(int64_t<sp/>position,<sp/>int64_t<sp/>nbytes);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;int64_t&gt;</ref><sp/>DoTell()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>DoSeek(int64_t<sp/>position);</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;int64_t&gt;</ref><sp/>DoGetSize();</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="219" refid="classarrow_1_1cuda_1_1_cuda_buffer_reader_1afb4e9abe2c74575ab9ec161b8b276b16" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1cuda_1_1_cuda_buffer_reader_1afb4e9abe2c74575ab9ec161b8b276b16" kindref="member">CheckClosed</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_open_)<sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1aa388393c060f3b44316876a630190576" kindref="member">Status::Invalid</ref>(</highlight><highlight class="stringliteral">&quot;Operation<sp/>forbidden<sp/>on<sp/>closed<sp/>CudaBufferReader&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1a5c0b0031db6eeec3dcc70485d24cfe03" kindref="member">Status::OK</ref>();</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226" refid="classarrow_1_1cuda_1_1_cuda_buffer_reader_1aa06ee0184921f48c829d6f537f1c9a98" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;CudaBuffer&gt;<sp/><ref refid="classarrow_1_1cuda_1_1_cuda_buffer_reader_1aa06ee0184921f48c829d6f537f1c9a98" kindref="member">buffer_</ref>;</highlight></codeline>
<codeline lineno="227" refid="classarrow_1_1cuda_1_1_cuda_buffer_reader_1a22f58c0024dc9994df8d5a75bf663a49" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;CudaContext&gt;<sp/><ref refid="classarrow_1_1cuda_1_1_cuda_buffer_reader_1a22f58c0024dc9994df8d5a75bf663a49" kindref="member">context_</ref>;</highlight></codeline>
<codeline lineno="228" refid="classarrow_1_1cuda_1_1_cuda_buffer_reader_1a01bad8257cc83ac5d9ed478309008871" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uintptr_t<sp/><ref refid="classarrow_1_1cuda_1_1_cuda_buffer_reader_1a01bad8257cc83ac5d9ed478309008871" kindref="member">address_</ref>;</highlight></codeline>
<codeline lineno="229" refid="classarrow_1_1cuda_1_1_cuda_buffer_reader_1a106a3cc03156e5c5ebea89d9d2ccbe7b" refkind="member"><highlight class="normal"><sp/><sp/>int64_t<sp/><ref refid="classarrow_1_1cuda_1_1_cuda_buffer_reader_1a106a3cc03156e5c5ebea89d9d2ccbe7b" kindref="member">size_</ref>;</highlight></codeline>
<codeline lineno="230" refid="classarrow_1_1cuda_1_1_cuda_buffer_reader_1a0ce99137d11a0b96dd3024199579a2c0" refkind="member"><highlight class="normal"><sp/><sp/>int64_t<sp/><ref refid="classarrow_1_1cuda_1_1_cuda_buffer_reader_1a0ce99137d11a0b96dd3024199579a2c0" kindref="member">position_</ref>;</highlight></codeline>
<codeline lineno="231" refid="classarrow_1_1cuda_1_1_cuda_buffer_reader_1a7510efdea3627481eb15029f7de4e232" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1cuda_1_1_cuda_buffer_reader_1a7510efdea3627481eb15029f7de4e232" kindref="member">is_open_</ref>;</highlight></codeline>
<codeline lineno="232"><highlight class="normal">};</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="236" refid="classarrow_1_1cuda_1_1_cuda_buffer_writer" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1cuda_1_1_cuda_buffer_writer" kindref="compound">CudaBufferWriter</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1io_1_1_writable_file" kindref="compound">io::WritableFile</ref><sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1cuda_1_1_cuda_buffer_writer" kindref="compound">CudaBufferWriter</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;CudaBuffer&gt;&amp;<sp/>buffer);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/>~<ref refid="classarrow_1_1cuda_1_1_cuda_buffer_writer" kindref="compound">CudaBufferWriter</ref>()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>Close()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>closed()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>Flush()<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>Seek(int64_t<sp/>position)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>Write(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>,<sp/>int64_t<sp/>nbytes)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>WriteAt(int64_t<sp/>position,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>data,<sp/>int64_t<sp/>nbytes)<sp/></highlight><highlight class="keyword">override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;int64_t&gt;</ref><sp/>Tell()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>SetBufferSize(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>buffer_size);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/>int64_t<sp/>buffer_size()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/>int64_t<sp/>num_bytes_buffered()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">CudaBufferWriterImpl;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/>std::unique_ptr&lt;CudaBufferWriterImpl&gt;<sp/>impl_;</highlight></codeline>
<codeline lineno="273"><highlight class="normal">};</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;CudaHostBuffer&gt;</ref>&gt;<sp/><ref refid="namespacearrow_1_1cuda_1a0efbe1ffd03ba56780d052b6631008c3" kindref="member">AllocateCudaHostBuffer</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device_number,</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>size);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"><ref refid="macros_8h_1aa2ec0a506575823661e32d0be213b070" kindref="member">ARROW_DEPRECATED</ref>(</highlight><highlight class="stringliteral">&quot;Use<sp/>Result-returning<sp/>version&quot;</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="297"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="namespacearrow_1_1cuda_1a0efbe1ffd03ba56780d052b6631008c3" kindref="member">AllocateCudaHostBuffer</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>device_number,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>int64_t<sp/>size,</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;CudaHostBuffer&gt;*<sp/>out);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;uintptr_t&gt;</ref><sp/><ref refid="namespacearrow_1_1cuda_1a1738441f91556be0df2af295b22c1f58" kindref="member">GetDeviceAddress</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/>cpu_data,</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;CudaContext&gt;&amp;<sp/>ctx);</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;uint8_t*&gt;</ref><sp/><ref refid="namespacearrow_1_1cuda_1a7ce46200c025b23251d4902dff4ac38b" kindref="member">GetHostAddress</ref>(uintptr_t<sp/>device_ptr);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>cuda</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>arrow</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/arrow/cpp/src/arrow/gpu/cuda_memory.h"/>
  </compounddef>
</doxygen>
