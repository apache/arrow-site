<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="arrow_2dataset_2filter_8h" kind="file" language="C++">
    <compoundname>filter.h</compoundname>
    <includes local="no">functional</includes>
    <includes local="no">memory</includes>
    <includes local="no">string</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes refid="context_8h" local="yes">arrow/compute/context.h</includes>
    <includes refid="kernel_8h" local="yes">arrow/compute/kernel.h</includes>
    <includes refid="kernels_2cast_8h" local="yes">arrow/compute/kernels/cast.h</includes>
    <includes refid="compute_2kernels_2compare_8h" local="yes">arrow/compute/kernels/compare.h</includes>
    <includes refid="dataset_2type__fwd_8h" local="yes">arrow/dataset/type_fwd.h</includes>
    <includes refid="arrow_2dataset_2visibility_8h" local="yes">arrow/dataset/visibility.h</includes>
    <includes refid="result_8h" local="yes">arrow/result.h</includes>
    <includes refid="scalar_8h" local="yes">arrow/scalar.h</includes>
    <includes refid="type__fwd_8h" local="yes">arrow/type_fwd.h</includes>
    <includes refid="checked__cast_8h" local="yes">arrow/util/checked_cast.h</includes>
    <includes refid="variant_8h" local="yes">arrow/util/variant.h</includes>
    <includedby refid="dataset_2api_8h" local="yes">/arrow/cpp/src/arrow/dataset/api.h</includedby>
    <includedby refid="partition_8h" local="yes">/arrow/cpp/src/arrow/dataset/partition.h</includedby>
    <includedby refid="scanner__internal_8h" local="yes">/arrow/cpp/src/arrow/dataset/scanner_internal.h</includedby>
    <incdepgraph>
      <node id="3476">
        <label>arrow/util/memory.h</label>
        <link refid="util_2memory_8h"/>
        <childnode refid="3429" relation="include">
        </childnode>
        <childnode refid="3424" relation="include">
        </childnode>
        <childnode refid="3437" relation="include">
        </childnode>
      </node>
      <node id="3431">
        <label>atomic</label>
      </node>
      <node id="3435">
        <label>arrow/util/compare.h</label>
        <link refid="util_2compare_8h"/>
        <childnode refid="3424" relation="include">
        </childnode>
        <childnode refid="3436" relation="include">
        </childnode>
        <childnode refid="3426" relation="include">
        </childnode>
        <childnode refid="3437" relation="include">
        </childnode>
      </node>
      <node id="3423">
        <label>functional</label>
      </node>
      <node id="3461">
        <label>limits</label>
      </node>
      <node id="3429">
        <label>cstdint</label>
      </node>
      <node id="3462">
        <label>arrow/buffer.h</label>
        <link refid="buffer_8h"/>
        <childnode refid="3429" relation="include">
        </childnode>
        <childnode refid="3433" relation="include">
        </childnode>
        <childnode refid="3424" relation="include">
        </childnode>
        <childnode refid="3425" relation="include">
        </childnode>
        <childnode refid="3436" relation="include">
        </childnode>
        <childnode refid="3426" relation="include">
        </childnode>
        <childnode refid="3427" relation="include">
        </childnode>
        <childnode refid="3463" relation="include">
        </childnode>
        <childnode refid="3464" relation="include">
        </childnode>
        <childnode refid="3432" relation="include">
        </childnode>
        <childnode refid="3441" relation="include">
        </childnode>
        <childnode refid="3437" relation="include">
        </childnode>
        <childnode refid="3465" relation="include">
        </childnode>
        <childnode refid="3440" relation="include">
        </childnode>
      </node>
      <node id="3455">
        <label>endian.h</label>
      </node>
      <node id="3432">
        <label>arrow/status.h</label>
        <link refid="status_8h"/>
        <childnode refid="3433" relation="include">
        </childnode>
        <childnode refid="3434" relation="include">
        </childnode>
        <childnode refid="3424" relation="include">
        </childnode>
        <childnode refid="3425" relation="include">
        </childnode>
        <childnode refid="3426" relation="include">
        </childnode>
        <childnode refid="3435" relation="include">
        </childnode>
        <childnode refid="3437" relation="include">
        </childnode>
        <childnode refid="3438" relation="include">
        </childnode>
        <childnode refid="3440" relation="include">
        </childnode>
      </node>
      <node id="3467">
        <label>arrow/util/functional.h</label>
        <link refid="functional_8h"/>
        <childnode refid="3468" relation="include">
        </childnode>
        <childnode refid="3436" relation="include">
        </childnode>
        <childnode refid="3437" relation="include">
        </childnode>
      </node>
      <node id="3441">
        <label>arrow/type_fwd.h</label>
        <link refid="type__fwd_8h"/>
        <childnode refid="3424" relation="include">
        </childnode>
        <childnode refid="3425" relation="include">
        </childnode>
        <childnode refid="3427" relation="include">
        </childnode>
        <childnode refid="3437" relation="include">
        </childnode>
        <childnode refid="3440" relation="include">
        </childnode>
      </node>
      <node id="3460">
        <label>cmath</label>
      </node>
      <node id="3459">
        <label>cassert</label>
      </node>
      <node id="3449">
        <label>arrow/util/checked_cast.h</label>
        <link refid="checked__cast_8h"/>
        <childnode refid="3424" relation="include">
        </childnode>
        <childnode refid="3436" relation="include">
        </childnode>
      </node>
      <node id="3425">
        <label>string</label>
      </node>
      <node id="3466">
        <label>arrow/vendored/string_view.hpp</label>
      </node>
      <node id="3444">
        <label>arrow/compare.h</label>
        <link refid="compare_8h"/>
        <childnode refid="3429" relation="include">
        </childnode>
        <childnode refid="3434" relation="include">
        </childnode>
        <childnode refid="3437" relation="include">
        </childnode>
        <childnode refid="3440" relation="include">
        </childnode>
      </node>
      <node id="3450">
        <label>arrow/util/variant.h</label>
        <link refid="variant_8h"/>
        <childnode refid="3451" relation="include">
        </childnode>
      </node>
      <node id="3475">
        <label>arrow/table.h</label>
        <link refid="table_8h"/>
        <childnode refid="3429" relation="include">
        </childnode>
        <childnode refid="3424" relation="include">
        </childnode>
        <childnode refid="3425" relation="include">
        </childnode>
        <childnode refid="3426" relation="include">
        </childnode>
        <childnode refid="3427" relation="include">
        </childnode>
        <childnode refid="3470" relation="include">
        </childnode>
        <childnode refid="3445" relation="include">
        </childnode>
        <childnode refid="3441" relation="include">
        </childnode>
        <childnode refid="3437" relation="include">
        </childnode>
        <childnode refid="3440" relation="include">
        </childnode>
      </node>
      <node id="3452">
        <label>arrow/visitor.h</label>
        <link refid="visitor_8h"/>
        <childnode refid="3432" relation="include">
        </childnode>
        <childnode refid="3441" relation="include">
        </childnode>
        <childnode refid="3440" relation="include">
        </childnode>
      </node>
      <node id="3439">
        <label>ostream</label>
      </node>
      <node id="3440">
        <label>arrow/util/visibility.h</label>
        <link refid="arrow_2util_2visibility_8h"/>
      </node>
      <node id="3428">
        <label>arrow/compute/context.h</label>
        <link refid="context_8h"/>
        <childnode refid="3429" relation="include">
        </childnode>
        <childnode refid="3424" relation="include">
        </childnode>
        <childnode refid="3430" relation="include">
        </childnode>
        <childnode refid="3432" relation="include">
        </childnode>
        <childnode refid="3437" relation="include">
        </childnode>
        <childnode refid="3440" relation="include">
        </childnode>
      </node>
      <node id="3474">
        <label>arrow/util/logging.h</label>
        <link refid="arrow_2util_2logging_8h"/>
        <childnode refid="3424" relation="include">
        </childnode>
        <childnode refid="3439" relation="include">
        </childnode>
        <childnode refid="3425" relation="include">
        </childnode>
        <childnode refid="3437" relation="include">
        </childnode>
        <childnode refid="3440" relation="include">
        </childnode>
      </node>
      <node id="3463">
        <label>arrow/device.h</label>
        <link refid="device_8h"/>
        <childnode refid="3429" relation="include">
        </childnode>
        <childnode refid="3424" relation="include">
        </childnode>
        <childnode refid="3425" relation="include">
        </childnode>
        <childnode refid="3464" relation="include">
        </childnode>
        <childnode refid="3441" relation="include">
        </childnode>
        <childnode refid="3435" relation="include">
        </childnode>
        <childnode refid="3437" relation="include">
        </childnode>
        <childnode refid="3440" relation="include">
        </childnode>
      </node>
      <node id="3430">
        <label>arrow/memory_pool.h</label>
        <link refid="memory__pool_8h"/>
        <childnode refid="3431" relation="include">
        </childnode>
        <childnode refid="3429" relation="include">
        </childnode>
        <childnode refid="3424" relation="include">
        </childnode>
        <childnode refid="3425" relation="include">
        </childnode>
        <childnode refid="3432" relation="include">
        </childnode>
        <childnode refid="3441" relation="include">
        </childnode>
        <childnode refid="3440" relation="include">
        </childnode>
      </node>
      <node id="3454">
        <label>arrow/util/bit_util.h</label>
        <link refid="bit__util_8h"/>
        <childnode refid="3455" relation="include">
        </childnode>
        <childnode refid="3456" relation="include">
        </childnode>
        <childnode refid="3457" relation="include">
        </childnode>
        <childnode refid="3458" relation="include">
        </childnode>
        <childnode refid="3459" relation="include">
        </childnode>
        <childnode refid="3460" relation="include">
        </childnode>
        <childnode refid="3429" relation="include">
        </childnode>
        <childnode refid="3433" relation="include">
        </childnode>
        <childnode refid="3461" relation="include">
        </childnode>
        <childnode refid="3424" relation="include">
        </childnode>
        <childnode refid="3425" relation="include">
        </childnode>
        <childnode refid="3436" relation="include">
        </childnode>
        <childnode refid="3426" relation="include">
        </childnode>
        <childnode refid="3427" relation="include">
        </childnode>
        <childnode refid="3462" relation="include">
        </childnode>
        <childnode refid="3447" relation="include">
        </childnode>
        <childnode refid="3435" relation="include">
        </childnode>
        <childnode refid="3467" relation="include">
        </childnode>
        <childnode refid="3437" relation="include">
        </childnode>
        <childnode refid="3438" relation="include">
        </childnode>
        <childnode refid="3465" relation="include">
        </childnode>
        <childnode refid="3469" relation="include">
        </childnode>
        <childnode refid="3440" relation="include">
        </childnode>
      </node>
      <node id="3458">
        <label>bitset</label>
      </node>
      <node id="3468">
        <label>tuple</label>
      </node>
      <node id="3427">
        <label>vector</label>
      </node>
      <node id="3448">
        <label>new</label>
      </node>
      <node id="3426">
        <label>utility</label>
      </node>
      <node id="3465">
        <label>arrow/util/string_view.h</label>
        <link refid="string__view_8h"/>
        <childnode refid="3429" relation="include">
        </childnode>
        <childnode refid="3425" relation="include">
        </childnode>
        <childnode refid="3466" relation="include">
        </childnode>
      </node>
      <node id="3457">
        <label>array</label>
      </node>
      <node id="3473">
        <label>arrow/util/basic_decimal.h</label>
        <link refid="basic__decimal_8h"/>
        <childnode refid="3457" relation="include">
        </childnode>
        <childnode refid="3429" relation="include">
        </childnode>
        <childnode refid="3461" relation="include">
        </childnode>
        <childnode refid="3425" relation="include">
        </childnode>
        <childnode refid="3436" relation="include">
        </childnode>
        <childnode refid="3437" relation="include">
        </childnode>
        <childnode refid="3469" relation="include">
        </childnode>
        <childnode refid="3440" relation="include">
        </childnode>
      </node>
      <node id="3453">
        <label>arrow/type_traits.h</label>
        <link refid="type__traits_8h"/>
        <childnode refid="3424" relation="include">
        </childnode>
        <childnode refid="3425" relation="include">
        </childnode>
        <childnode refid="3436" relation="include">
        </childnode>
        <childnode refid="3427" relation="include">
        </childnode>
        <childnode refid="3441" relation="include">
        </childnode>
        <childnode refid="3454" relation="include">
        </childnode>
      </node>
      <node id="3442">
        <label>arrow/compute/kernel.h</label>
        <link refid="kernel_8h"/>
        <childnode refid="3424" relation="include">
        </childnode>
        <childnode refid="3426" relation="include">
        </childnode>
        <childnode refid="3427" relation="include">
        </childnode>
        <childnode refid="3443" relation="include">
        </childnode>
        <childnode refid="3470" relation="include">
        </childnode>
        <childnode refid="3471" relation="include">
        </childnode>
        <childnode refid="3475" relation="include">
        </childnode>
        <childnode refid="3437" relation="include">
        </childnode>
        <childnode refid="3476" relation="include">
        </childnode>
        <childnode refid="3450" relation="include">
        </childnode>
        <childnode refid="3440" relation="include">
        </childnode>
      </node>
      <node id="3472">
        <label>arrow/util/decimal.h</label>
        <link refid="util_2decimal_8h"/>
        <childnode refid="3429" relation="include">
        </childnode>
        <childnode refid="3434" relation="include">
        </childnode>
        <childnode refid="3461" relation="include">
        </childnode>
        <childnode refid="3425" relation="include">
        </childnode>
        <childnode refid="3436" relation="include">
        </childnode>
        <childnode refid="3426" relation="include">
        </childnode>
        <childnode refid="3447" relation="include">
        </childnode>
        <childnode refid="3432" relation="include">
        </childnode>
        <childnode refid="3473" relation="include">
        </childnode>
        <childnode refid="3465" relation="include">
        </childnode>
      </node>
      <node id="3470">
        <label>arrow/record_batch.h</label>
        <link refid="record__batch_8h"/>
        <childnode refid="3429" relation="include">
        </childnode>
        <childnode refid="3424" relation="include">
        </childnode>
        <childnode refid="3425" relation="include">
        </childnode>
        <childnode refid="3427" relation="include">
        </childnode>
        <childnode refid="3447" relation="include">
        </childnode>
        <childnode refid="3432" relation="include">
        </childnode>
        <childnode refid="3441" relation="include">
        </childnode>
        <childnode refid="3437" relation="include">
        </childnode>
        <childnode refid="3440" relation="include">
        </childnode>
      </node>
      <node id="3464">
        <label>arrow/io/type_fwd.h</label>
        <link refid="io_2type__fwd_8h"/>
      </node>
      <node id="3434">
        <label>iosfwd</label>
      </node>
      <node id="3478">
        <label>arrow/compute/kernels/compare.h</label>
        <link refid="compute_2kernels_2compare_8h"/>
        <childnode refid="3424" relation="include">
        </childnode>
        <childnode refid="3442" relation="include">
        </childnode>
        <childnode refid="3440" relation="include">
        </childnode>
      </node>
      <node id="3477">
        <label>arrow/compute/kernels/cast.h</label>
        <link refid="kernels_2cast_8h"/>
        <childnode refid="3424" relation="include">
        </childnode>
        <childnode refid="3432" relation="include">
        </childnode>
        <childnode refid="3440" relation="include">
        </childnode>
      </node>
      <node id="3422">
        <label>/arrow/cpp/src/arrow/dataset/filter.h</label>
        <link refid="arrow_2dataset_2filter_8h"/>
        <childnode refid="3423" relation="include">
        </childnode>
        <childnode refid="3424" relation="include">
        </childnode>
        <childnode refid="3425" relation="include">
        </childnode>
        <childnode refid="3426" relation="include">
        </childnode>
        <childnode refid="3427" relation="include">
        </childnode>
        <childnode refid="3428" relation="include">
        </childnode>
        <childnode refid="3442" relation="include">
        </childnode>
        <childnode refid="3477" relation="include">
        </childnode>
        <childnode refid="3478" relation="include">
        </childnode>
        <childnode refid="3479" relation="include">
        </childnode>
        <childnode refid="3480" relation="include">
        </childnode>
        <childnode refid="3447" relation="include">
        </childnode>
        <childnode refid="3471" relation="include">
        </childnode>
        <childnode refid="3441" relation="include">
        </childnode>
        <childnode refid="3449" relation="include">
        </childnode>
        <childnode refid="3450" relation="include">
        </childnode>
      </node>
      <node id="3479">
        <label>arrow/dataset/type_fwd.h</label>
        <link refid="dataset_2type__fwd_8h"/>
        <childnode refid="3424" relation="include">
        </childnode>
        <childnode refid="3427" relation="include">
        </childnode>
        <childnode refid="3480" relation="include">
        </childnode>
        <childnode refid="3441" relation="include">
        </childnode>
      </node>
      <node id="3443">
        <label>arrow/array.h</label>
        <link refid="array_8h"/>
        <childnode refid="3431" relation="include">
        </childnode>
        <childnode refid="3429" relation="include">
        </childnode>
        <childnode refid="3434" relation="include">
        </childnode>
        <childnode refid="3424" relation="include">
        </childnode>
        <childnode refid="3425" relation="include">
        </childnode>
        <childnode refid="3436" relation="include">
        </childnode>
        <childnode refid="3426" relation="include">
        </childnode>
        <childnode refid="3427" relation="include">
        </childnode>
        <childnode refid="3444" relation="include">
        </childnode>
        <childnode refid="3445" relation="include">
        </childnode>
        <childnode refid="3441" relation="include">
        </childnode>
        <childnode refid="3453" relation="include">
        </childnode>
        <childnode refid="3454" relation="include">
        </childnode>
        <childnode refid="3449" relation="include">
        </childnode>
        <childnode refid="3437" relation="include">
        </childnode>
        <childnode refid="3465" relation="include">
        </childnode>
        <childnode refid="3440" relation="include">
        </childnode>
      </node>
      <node id="3480">
        <label>arrow/dataset/visibility.h</label>
        <link refid="arrow_2dataset_2visibility_8h"/>
      </node>
      <node id="3451">
        <label>arrow/vendored/variant.hpp</label>
      </node>
      <node id="3447">
        <label>arrow/result.h</label>
        <link refid="result_8h"/>
        <childnode refid="3448" relation="include">
        </childnode>
        <childnode refid="3425" relation="include">
        </childnode>
        <childnode refid="3436" relation="include">
        </childnode>
        <childnode refid="3426" relation="include">
        </childnode>
        <childnode refid="3432" relation="include">
        </childnode>
        <childnode refid="3435" relation="include">
        </childnode>
      </node>
      <node id="3446">
        <label>climits</label>
      </node>
      <node id="3471">
        <label>arrow/scalar.h</label>
        <link refid="scalar_8h"/>
        <childnode refid="3424" relation="include">
        </childnode>
        <childnode refid="3425" relation="include">
        </childnode>
        <childnode refid="3426" relation="include">
        </childnode>
        <childnode refid="3427" relation="include">
        </childnode>
        <childnode refid="3447" relation="include">
        </childnode>
        <childnode refid="3432" relation="include">
        </childnode>
        <childnode refid="3445" relation="include">
        </childnode>
        <childnode refid="3441" relation="include">
        </childnode>
        <childnode refid="3453" relation="include">
        </childnode>
        <childnode refid="3435" relation="include">
        </childnode>
        <childnode refid="3472" relation="include">
        </childnode>
        <childnode refid="3474" relation="include">
        </childnode>
        <childnode refid="3465" relation="include">
        </childnode>
        <childnode refid="3440" relation="include">
        </childnode>
      </node>
      <node id="3445">
        <label>arrow/type.h</label>
        <link refid="type_8h"/>
        <childnode refid="3431" relation="include">
        </childnode>
        <childnode refid="3446" relation="include">
        </childnode>
        <childnode refid="3429" relation="include">
        </childnode>
        <childnode refid="3434" relation="include">
        </childnode>
        <childnode refid="3424" relation="include">
        </childnode>
        <childnode refid="3425" relation="include">
        </childnode>
        <childnode refid="3426" relation="include">
        </childnode>
        <childnode refid="3427" relation="include">
        </childnode>
        <childnode refid="3447" relation="include">
        </childnode>
        <childnode refid="3441" relation="include">
        </childnode>
        <childnode refid="3449" relation="include">
        </childnode>
        <childnode refid="3437" relation="include">
        </childnode>
        <childnode refid="3450" relation="include">
        </childnode>
        <childnode refid="3440" relation="include">
        </childnode>
        <childnode refid="3452" relation="include">
        </childnode>
      </node>
      <node id="3436">
        <label>type_traits</label>
      </node>
      <node id="3456">
        <label>algorithm</label>
      </node>
      <node id="3433">
        <label>cstring</label>
      </node>
      <node id="3438">
        <label>arrow/util/string_builder.h</label>
        <link refid="string__builder_8h"/>
        <childnode refid="3424" relation="include">
        </childnode>
        <childnode refid="3439" relation="include">
        </childnode>
        <childnode refid="3425" relation="include">
        </childnode>
        <childnode refid="3426" relation="include">
        </childnode>
        <childnode refid="3440" relation="include">
        </childnode>
      </node>
      <node id="3424">
        <label>memory</label>
      </node>
      <node id="3437">
        <label>arrow/util/macros.h</label>
        <link refid="macros_8h"/>
        <childnode refid="3429" relation="include">
        </childnode>
      </node>
      <node id="3469">
        <label>arrow/util/type_traits.h</label>
        <link refid="util_2type__traits_8h"/>
        <childnode refid="3436" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="3483">
        <label>/arrow/cpp/src/arrow/dataset/partition.h</label>
        <link refid="partition_8h"/>
        <childnode refid="3484" relation="include">
        </childnode>
        <childnode refid="3485" relation="include">
        </childnode>
      </node>
      <node id="3487">
        <label>/arrow/cpp/src/arrow/dataset/file_parquet.h</label>
        <link refid="file__parquet_8h"/>
        <childnode refid="3482" relation="include">
        </childnode>
      </node>
      <node id="3485">
        <label>/arrow/cpp/src/arrow/dataset/file_base.h</label>
        <link refid="file__base_8h"/>
        <childnode refid="3482" relation="include">
        </childnode>
        <childnode refid="3486" relation="include">
        </childnode>
        <childnode refid="3487" relation="include">
        </childnode>
      </node>
      <node id="3484">
        <label>/arrow/cpp/src/arrow/dataset/discovery.h</label>
        <link refid="discovery_8h"/>
        <childnode refid="3482" relation="include">
        </childnode>
      </node>
      <node id="3488">
        <label>/arrow/cpp/src/arrow/dataset/scanner_internal.h</label>
        <link refid="scanner__internal_8h"/>
      </node>
      <node id="3486">
        <label>/arrow/cpp/src/arrow/dataset/file_ipc.h</label>
        <link refid="file__ipc_8h"/>
        <childnode refid="3482" relation="include">
        </childnode>
      </node>
      <node id="3481">
        <label>/arrow/cpp/src/arrow/dataset/filter.h</label>
        <link refid="arrow_2dataset_2filter_8h"/>
        <childnode refid="3482" relation="include">
        </childnode>
        <childnode refid="3483" relation="include">
        </childnode>
        <childnode refid="3488" relation="include">
        </childnode>
      </node>
      <node id="3482">
        <label>/arrow/cpp/src/arrow/dataset/api.h</label>
        <link refid="dataset_2api_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structarrow_1_1dataset_1_1_expression_type" prot="public">arrow::dataset::ExpressionType</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_expression" prot="public">arrow::dataset::Expression</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_expression_impl" prot="public">arrow::dataset::ExpressionImpl</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_unary_expression" prot="public">arrow::dataset::UnaryExpression</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_binary_expression" prot="public">arrow::dataset::BinaryExpression</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_comparison_expression" prot="public">arrow::dataset::ComparisonExpression</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_and_expression" prot="public">arrow::dataset::AndExpression</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_or_expression" prot="public">arrow::dataset::OrExpression</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_not_expression" prot="public">arrow::dataset::NotExpression</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_is_valid_expression" prot="public">arrow::dataset::IsValidExpression</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_in_expression" prot="public">arrow::dataset::InExpression</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_cast_expression" prot="public">arrow::dataset::CastExpression</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_scalar_expression" prot="public">arrow::dataset::ScalarExpression</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_field_expression" prot="public">arrow::dataset::FieldExpression</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_custom_expression" prot="public">arrow::dataset::CustomExpression</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_expression_evaluator" prot="public">arrow::dataset::ExpressionEvaluator</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_tree_evaluator" prot="public">arrow::dataset::TreeEvaluator</innerclass>
    <innernamespace refid="namespacearrow">arrow</innernamespace>
    <innernamespace refid="namespacearrow_1_1dataset">arrow::dataset</innernamespace>
    <innernamespace refid="namespacearrow_1_1dataset_1_1string__literals">arrow::dataset::string_literals</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="arrow_2dataset_2filter_8h_1a702e78d48414b5149fc4d54964773a11" prot="public" static="no">
        <name>COMPARISON_FACTORY</name>
        <param><defname>NAME</defname></param>
        <param><defname>FACTORY_NAME</defname></param>
        <param><defname>OP</defname></param>
        <initializer>inline std::shared_ptr&lt;ComparisonExpression&gt; FACTORY_NAME(                             \
      const std::shared_ptr&lt;Expression&gt;&amp; lhs, const std::shared_ptr&lt;Expression&gt;&amp; rhs) {  \
    return std::make_shared&lt;ComparisonExpression&gt;(compute::CompareOperator::NAME, lhs,   \
                                                  rhs);                                  \
  }                                                                                      \
                                                                                         \
  template &lt;typename T, typename Enable = typename std::enable_if&lt;!std::is_base_of&lt;      \
                            Expression, typename std::decay&lt;T&gt;::type&gt;::value&gt;::type&gt;     \
  ComparisonExpression operator OP(const Expression&amp; lhs, T&amp;&amp; rhs) {                     \
    return ComparisonExpression(compute::CompareOperator::NAME, lhs.Copy(),              \
                                scalar(std::forward&lt;T&gt;(rhs)));                           \
  }                                                                                      \
                                                                                         \
  inline ComparisonExpression operator OP(const Expression&amp; lhs,                         \
                                          const Expression&amp; rhs) {                       \
    return ComparisonExpression(compute::CompareOperator::NAME, lhs.Copy(), rhs.Copy()); \
  }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/filter.h" line="466" column="9" bodyfile="/arrow/cpp/src/arrow/dataset/filter.h" bodystart="466" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="context_8h" kindref="compound">arrow/compute/context.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="kernel_8h" kindref="compound">arrow/compute/kernel.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="kernels_2cast_8h" kindref="compound">arrow/compute/kernels/cast.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="compute_2kernels_2compare_8h" kindref="compound">arrow/compute/kernels/compare.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="dataset_2type__fwd_8h" kindref="compound">arrow/dataset/type_fwd.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="arrow_2dataset_2visibility_8h" kindref="compound">arrow/dataset/visibility.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="result_8h" kindref="compound">arrow/result.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="scalar_8h" kindref="compound">arrow/scalar.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type__fwd_8h" kindref="compound">arrow/type_fwd.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="checked__cast_8h" kindref="compound">arrow/util/checked_cast.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="variant_8h" kindref="compound">arrow/util/variant.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacearrow" kindref="compound">arrow</ref><sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">dataset<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="structarrow_1_1dataset_1_1_expression_type" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structarrow_1_1dataset_1_1_expression_type" kindref="compound">ExpressionType</ref><sp/>{</highlight></codeline>
<codeline lineno="42" refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5" kindref="member">type</ref><sp/>{</highlight></codeline>
<codeline lineno="44" refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5ad4d52feaeed01860ccd6a3447d173a93" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5ad4d52feaeed01860ccd6a3447d173a93" kindref="member">FIELD</ref>,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5adf763cd188561b0a6fb97f4e6194d05a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5adf763cd188561b0a6fb97f4e6194d05a" kindref="member">SCALAR</ref>,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(bkietz)<sp/>ARRAY,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="53" refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5a2a4b5173910f951fb7eb952fd83bd3c4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5a2a4b5173910f951fb7eb952fd83bd3c4" kindref="member">NOT</ref>,</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="56" refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5a439a3988070075e517d97129a260ec73" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5a439a3988070075e517d97129a260ec73" kindref="member">CAST</ref>,</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5a84582cd4b09f4d784f5b97ef0e9972d6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5a84582cd4b09f4d784f5b97ef0e9972d6" kindref="member">AND</ref>,</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="62" refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5a0aee6b8f48f5cdfef65665203bc229e9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5a0aee6b8f48f5cdfef65665203bc229e9" kindref="member">OR</ref>,</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5a59d4ed07a0331a094d801800b1358e90" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5a59d4ed07a0331a094d801800b1358e90" kindref="member">COMPARISON</ref>,</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>TODO(bkietz)<sp/>COALESCE,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="72" refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5a6e382fe9efd09abe35f49bfc709a40f6" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5a6e382fe9efd09abe35f49bfc709a40f6" kindref="member">IS_VALID</ref>,</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="75" refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5ad1a684cdcf0547ceb0abec3d12ff20ab" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5ad1a684cdcf0547ceb0abec3d12ff20ab" kindref="member">IN</ref>,</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="78" refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5ac81d2708b25a2eb8906abb7a8565aa76" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5ac81d2708b25a2eb8906abb7a8565aa76" kindref="member">CUSTOM</ref>,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="80"><highlight class="normal">};</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="83" refid="classarrow_1_1dataset_1_1_expression" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="arrow_2dataset_2visibility_8h_1a8dd8d57cd1ce7b38ce34aa040b68a6b7" kindref="member">ARROW_DS_EXPORT</ref><sp/><ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref><sp/>{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="85" refid="classarrow_1_1dataset_1_1_expression_1ace247255d88029192703e49bcb468c7a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression_1ace247255d88029192703e49bcb468c7a" kindref="member">Expression</ref>(<ref refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5" kindref="member">ExpressionType::type</ref><sp/><ref refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5" kindref="member">type</ref>)<sp/>:<sp/>type_(type)<sp/>{}</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Equals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref>&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Equals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Expression&gt;&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Enable<sp/>=<sp/>decltype(MakeScalar(std::declval&lt;T&gt;()))&gt;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Equals(T&amp;&amp;<sp/>t)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>IsNull()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;DataType&gt;</ref>&gt;<sp/>Validate(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref>&amp;<sp/><ref refid="group__schema-factories_1gab03f1059d8776b1e85ee93c7cd03a078" kindref="member">schema</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Expression&gt;<sp/>Assume(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref>&amp;<sp/>given)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="182" refid="classarrow_1_1dataset_1_1_expression_1aa94bb5128873b3955ef1079dbfa59a05" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Expression&gt;<sp/><ref refid="classarrow_1_1dataset_1_1_expression_1aa94bb5128873b3955ef1079dbfa59a05" kindref="member">Assume</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Expression&gt;&amp;<sp/>given)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Assume(*given);</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight></codeline>
<codeline lineno="190" refid="classarrow_1_1dataset_1_1_expression_1a26c748fc0b8eb3ffa800bd957a019d39" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5" kindref="member">ExpressionType::type</ref><sp/><ref refid="classarrow_1_1dataset_1_1_expression_1a26c748fc0b8eb3ffa800bd957a019d39" kindref="member">type</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_;<sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Expression&gt;<sp/>Copy()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1dataset_1_1_in_expression" kindref="compound">InExpression</ref><sp/>In(std::shared_ptr&lt;Array&gt;<sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal">)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1dataset_1_1_is_valid_expression" kindref="compound">IsValidExpression</ref><sp/>IsValid()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1dataset_1_1_cast_expression" kindref="compound">CastExpression</ref><sp/>CastTo(std::shared_ptr&lt;DataType&gt;<sp/><ref refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5" kindref="member">type</ref>,</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1compute_1_1_cast_options" kindref="compound">compute::CastOptions</ref><sp/>options<sp/>=<sp/><ref refid="structarrow_1_1compute_1_1_cast_options" kindref="compound">compute::CastOptions</ref>())<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1dataset_1_1_cast_expression" kindref="compound">CastExpression</ref><sp/>CastLike(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref>&amp;<sp/>expr,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1compute_1_1_cast_options" kindref="compound">compute::CastOptions</ref><sp/>options<sp/>=<sp/><ref refid="structarrow_1_1compute_1_1_cast_options" kindref="compound">compute::CastOptions</ref>())<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1dataset_1_1_cast_expression" kindref="compound">CastExpression</ref><sp/>CastLike(std::shared_ptr&lt;Expression&gt;<sp/>expr,</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1compute_1_1_cast_options" kindref="compound">compute::CastOptions</ref><sp/>options<sp/>=<sp/><ref refid="structarrow_1_1compute_1_1_cast_options" kindref="compound">compute::CastOptions</ref>())<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="209" refid="classarrow_1_1dataset_1_1_expression_1a4f70ea37a6b7d7e542b1d806e65305f4" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5" kindref="member">ExpressionType::type</ref><sp/><ref refid="classarrow_1_1dataset_1_1_expression_1a4f70ea37a6b7d7e542b1d806e65305f4" kindref="member">type_</ref>;</highlight></codeline>
<codeline lineno="210"><highlight class="normal">};</highlight></codeline>
<codeline lineno="211"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Base,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Derived,<sp/>ExpressionType::type<sp/>E&gt;</highlight></codeline>
<codeline lineno="214" refid="classarrow_1_1dataset_1_1_expression_impl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classarrow_1_1dataset_1_1_expression_impl" kindref="compound">ExpressionImpl</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>Base<sp/>{</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="216" refid="classarrow_1_1dataset_1_1_expression_impl_1ac0d20822c852c91a7954643d2046ace9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5" kindref="member">ExpressionType::type</ref><sp/>expression_type<sp/>=<sp/>E;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>A0,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>A&gt;</highlight></codeline>
<codeline lineno="219" refid="classarrow_1_1dataset_1_1_expression_impl_1a42fa4e97b34c43391b6babb001c3634c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression_impl_1a42fa4e97b34c43391b6babb001c3634c" kindref="member">ExpressionImpl</ref>(A0&amp;&amp;<sp/>arg0,<sp/>A&amp;&amp;...<sp/>args)</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>Base(expression_type,<sp/><ref refid="namespacestd" kindref="compound">std</ref>::forward&lt;A0&gt;(arg0),<sp/><ref refid="namespacestd" kindref="compound">std</ref>::forward&lt;A&gt;(args)...)<sp/>{}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222" refid="classarrow_1_1dataset_1_1_expression_impl_1a6efe2a97203c4253061884774b261fa7" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Expression&gt;<sp/><ref refid="classarrow_1_1dataset_1_1_expression_impl_1a6efe2a97203c4253061884774b261fa7" kindref="member">Copy</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;Derived&gt;(internal::checked_cast&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Derived&amp;&gt;(*this));</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal">};</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="228" refid="classarrow_1_1dataset_1_1_unary_expression" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="arrow_2dataset_2visibility_8h_1a8dd8d57cd1ce7b38ce34aa040b68a6b7" kindref="member">ARROW_DS_EXPORT</ref><sp/><ref refid="classarrow_1_1dataset_1_1_unary_expression" kindref="compound">UnaryExpression</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref><sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="230" refid="classarrow_1_1dataset_1_1_unary_expression_1a13793184fb3c695ed51d6ef666801e61" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Expression&gt;&amp;<sp/><ref refid="classarrow_1_1dataset_1_1_unary_expression_1a13793184fb3c695ed51d6ef666801e61" kindref="member">operand</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>operand_;<sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Equals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref>&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="235" refid="classarrow_1_1dataset_1_1_unary_expression_1a866bb7d6c74e828367b2d22efba0b14e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1dataset_1_1_unary_expression_1a866bb7d6c74e828367b2d22efba0b14e" kindref="member">UnaryExpression</ref>(<ref refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5" kindref="member">ExpressionType::type</ref><sp/><ref refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5" kindref="member">type</ref>,<sp/>std::shared_ptr&lt;Expression&gt;<sp/>operand)</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref>(type),<sp/>operand_(<ref refid="namespacestd" kindref="compound">std</ref>::move(operand))<sp/>{}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
<codeline lineno="238" refid="classarrow_1_1dataset_1_1_unary_expression_1abee129bd1e31822aee0a8a2c6213fb44" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Expression&gt;<sp/><ref refid="classarrow_1_1dataset_1_1_unary_expression_1abee129bd1e31822aee0a8a2c6213fb44" kindref="member">operand_</ref>;</highlight></codeline>
<codeline lineno="239"><highlight class="normal">};</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="242" refid="classarrow_1_1dataset_1_1_binary_expression" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="arrow_2dataset_2visibility_8h_1a8dd8d57cd1ce7b38ce34aa040b68a6b7" kindref="member">ARROW_DS_EXPORT</ref><sp/><ref refid="classarrow_1_1dataset_1_1_binary_expression" kindref="compound">BinaryExpression</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref><sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="244" refid="classarrow_1_1dataset_1_1_binary_expression_1ab2c13cf049f0e5917ae8577b3271b9ef" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Expression&gt;&amp;<sp/><ref refid="classarrow_1_1dataset_1_1_binary_expression_1ab2c13cf049f0e5917ae8577b3271b9ef" kindref="member">left_operand</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>left_operand_;<sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246" refid="classarrow_1_1dataset_1_1_binary_expression_1a337dcf35256a54831291b8e405ddc890" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Expression&gt;&amp;<sp/><ref refid="classarrow_1_1dataset_1_1_binary_expression_1a337dcf35256a54831291b8e405ddc890" kindref="member">right_operand</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>right_operand_;<sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Equals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref>&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="251" refid="classarrow_1_1dataset_1_1_binary_expression_1a8391e5535bc5ee3287a98073c04ce650" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1dataset_1_1_binary_expression_1a8391e5535bc5ee3287a98073c04ce650" kindref="member">BinaryExpression</ref>(<ref refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5" kindref="member">ExpressionType::type</ref><sp/><ref refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5" kindref="member">type</ref>,<sp/>std::shared_ptr&lt;Expression&gt;<sp/>left_operand,</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Expression&gt;<sp/>right_operand)</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref>(type),</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>left_operand_(<ref refid="namespacestd" kindref="compound">std</ref>::move(left_operand)),</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>right_operand_(<ref refid="namespacestd" kindref="compound">std</ref>::move(right_operand))<sp/>{}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257" refid="classarrow_1_1dataset_1_1_binary_expression_1a67f1f4d0217a452207d707073296febf" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Expression&gt;<sp/>left_operand_,<sp/><ref refid="classarrow_1_1dataset_1_1_binary_expression_1a67f1f4d0217a452207d707073296febf" kindref="member">right_operand_</ref>;</highlight></codeline>
<codeline lineno="258"><highlight class="normal">};</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260" refid="classarrow_1_1dataset_1_1_comparison_expression" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="arrow_2dataset_2visibility_8h_1a8dd8d57cd1ce7b38ce34aa040b68a6b7" kindref="member">ARROW_DS_EXPORT</ref><sp/><ref refid="classarrow_1_1dataset_1_1_comparison_expression" kindref="compound">ComparisonExpression</ref><sp/>final</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression_impl" kindref="compound">ExpressionImpl</ref>&lt;BinaryExpression,<sp/>ComparisonExpression,</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExpressionType::COMPARISON&gt;<sp/>{</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="264" refid="classarrow_1_1dataset_1_1_comparison_expression_1aef056c93fa39063996fa9e464266ed0e" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1dataset_1_1_comparison_expression_1aef056c93fa39063996fa9e464266ed0e" kindref="member">ComparisonExpression</ref>(<ref refid="namespacearrow_1_1compute_1a722101516c22b89bdf3f54ff6f90cd2e" kindref="member">compute::CompareOperator</ref><sp/>op,</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Expression&gt;<sp/>left_operand,</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Expression&gt;<sp/>right_operand)</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classarrow_1_1dataset_1_1_expression_impl" kindref="compound">ExpressionImpl</ref>(<ref refid="namespacestd" kindref="compound">std</ref>::move(left_operand),<sp/><ref refid="namespacestd" kindref="compound">std</ref>::move(right_operand)),<sp/>op_(op)<sp/>{}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="270"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Equals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref>&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Expression&gt;<sp/>Assume(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref>&amp;<sp/>given)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275" refid="classarrow_1_1dataset_1_1_comparison_expression_1a592fc64cf9ce1e4e4a29e49fb46f7036" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="namespacearrow_1_1compute_1a722101516c22b89bdf3f54ff6f90cd2e" kindref="member">compute::CompareOperator</ref><sp/><ref refid="classarrow_1_1dataset_1_1_comparison_expression_1a592fc64cf9ce1e4e4a29e49fb46f7036" kindref="member">op</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>op_;<sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;DataType&gt;</ref>&gt;<sp/>Validate(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref>&amp;<sp/><ref refid="group__schema-factories_1gab03f1059d8776b1e85ee93c7cd03a078" kindref="member">schema</ref>)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Expression&gt;<sp/>AssumeGivenComparison(</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_comparison_expression" kindref="compound">ComparisonExpression</ref>&amp;<sp/>given)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><ref refid="namespacearrow_1_1compute_1a722101516c22b89bdf3f54ff6f90cd2e" kindref="member">compute::CompareOperator</ref><sp/>op_;</highlight></codeline>
<codeline lineno="284"><highlight class="normal">};</highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="286" refid="classarrow_1_1dataset_1_1_and_expression" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="arrow_2dataset_2visibility_8h_1a8dd8d57cd1ce7b38ce34aa040b68a6b7" kindref="member">ARROW_DS_EXPORT</ref><sp/><ref refid="classarrow_1_1dataset_1_1_and_expression" kindref="compound">AndExpression</ref><sp/>final</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression_impl" kindref="compound">ExpressionImpl</ref>&lt;BinaryExpression,<sp/>AndExpression,<sp/>ExpressionType::AND&gt;<sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression_impl_1a42fa4e97b34c43391b6babb001c3634c" kindref="member">ExpressionImpl::ExpressionImpl</ref>;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Expression&gt;<sp/>Assume(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref>&amp;<sp/>given)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"></highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;DataType&gt;</ref>&gt;<sp/>Validate(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref>&amp;<sp/><ref refid="group__schema-factories_1gab03f1059d8776b1e85ee93c7cd03a078" kindref="member">schema</ref>)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="296"><highlight class="normal">};</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298" refid="classarrow_1_1dataset_1_1_or_expression" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="arrow_2dataset_2visibility_8h_1a8dd8d57cd1ce7b38ce34aa040b68a6b7" kindref="member">ARROW_DS_EXPORT</ref><sp/><ref refid="classarrow_1_1dataset_1_1_or_expression" kindref="compound">OrExpression</ref><sp/>final</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression_impl" kindref="compound">ExpressionImpl</ref>&lt;BinaryExpression,<sp/>OrExpression,<sp/>ExpressionType::OR&gt;<sp/>{</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression_impl_1a42fa4e97b34c43391b6babb001c3634c" kindref="member">ExpressionImpl::ExpressionImpl</ref>;</highlight></codeline>
<codeline lineno="302"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Expression&gt;<sp/>Assume(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref>&amp;<sp/>given)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="306"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;DataType&gt;</ref>&gt;<sp/>Validate(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref>&amp;<sp/><ref refid="group__schema-factories_1gab03f1059d8776b1e85ee93c7cd03a078" kindref="member">schema</ref>)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="308"><highlight class="normal">};</highlight></codeline>
<codeline lineno="309"><highlight class="normal"></highlight></codeline>
<codeline lineno="310" refid="classarrow_1_1dataset_1_1_not_expression" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="arrow_2dataset_2visibility_8h_1a8dd8d57cd1ce7b38ce34aa040b68a6b7" kindref="member">ARROW_DS_EXPORT</ref><sp/><ref refid="classarrow_1_1dataset_1_1_not_expression" kindref="compound">NotExpression</ref><sp/>final</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression_impl" kindref="compound">ExpressionImpl</ref>&lt;UnaryExpression,<sp/>NotExpression,<sp/>ExpressionType::NOT&gt;<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression_impl_1a42fa4e97b34c43391b6babb001c3634c" kindref="member">ExpressionImpl::ExpressionImpl</ref>;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Expression&gt;<sp/>Assume(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref>&amp;<sp/>given)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;DataType&gt;</ref>&gt;<sp/>Validate(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref>&amp;<sp/><ref refid="group__schema-factories_1gab03f1059d8776b1e85ee93c7cd03a078" kindref="member">schema</ref>)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="320"><highlight class="normal">};</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="322" refid="classarrow_1_1dataset_1_1_is_valid_expression" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="arrow_2dataset_2visibility_8h_1a8dd8d57cd1ce7b38ce34aa040b68a6b7" kindref="member">ARROW_DS_EXPORT</ref><sp/><ref refid="classarrow_1_1dataset_1_1_is_valid_expression" kindref="compound">IsValidExpression</ref><sp/>final</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression_impl" kindref="compound">ExpressionImpl</ref>&lt;UnaryExpression,<sp/>IsValidExpression,</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExpressionType::IS_VALID&gt;<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression_impl_1a42fa4e97b34c43391b6babb001c3634c" kindref="member">ExpressionImpl::ExpressionImpl</ref>;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;DataType&gt;</ref>&gt;<sp/>Validate(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref>&amp;<sp/><ref refid="group__schema-factories_1gab03f1059d8776b1e85ee93c7cd03a078" kindref="member">schema</ref>)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Expression&gt;<sp/>Assume(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref>&amp;<sp/>given)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="333"><highlight class="normal">};</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335" refid="classarrow_1_1dataset_1_1_in_expression" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="arrow_2dataset_2visibility_8h_1a8dd8d57cd1ce7b38ce34aa040b68a6b7" kindref="member">ARROW_DS_EXPORT</ref><sp/><ref refid="classarrow_1_1dataset_1_1_in_expression" kindref="compound">InExpression</ref><sp/>final</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression_impl" kindref="compound">ExpressionImpl</ref>&lt;UnaryExpression,<sp/>InExpression,<sp/>ExpressionType::IN&gt;<sp/>{</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="338" refid="classarrow_1_1dataset_1_1_in_expression_1a763bb0ff6f0c590fd9c646200d013c01" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1dataset_1_1_in_expression_1a763bb0ff6f0c590fd9c646200d013c01" kindref="member">InExpression</ref>(std::shared_ptr&lt;Expression&gt;<sp/>operand,<sp/>std::shared_ptr&lt;Array&gt;<sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classarrow_1_1dataset_1_1_expression_impl" kindref="compound">ExpressionImpl</ref>(<ref refid="namespacestd" kindref="compound">std</ref>::move(operand)),<sp/>set_(<ref refid="namespacestd" kindref="compound">std</ref>::move(set))<sp/>{}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;DataType&gt;</ref>&gt;<sp/>Validate(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref>&amp;<sp/><ref refid="group__schema-factories_1gab03f1059d8776b1e85ee93c7cd03a078" kindref="member">schema</ref>)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Expression&gt;<sp/>Assume(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref>&amp;<sp/>given)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="348" refid="classarrow_1_1dataset_1_1_in_expression_1ab09e13724003f592f4eab502d5126659" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Array&gt;&amp;<sp/></highlight><highlight class="keyword">set</highlight><highlight class="normal">()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>set_;<sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Array&gt;<sp/>set_;</highlight></codeline>
<codeline lineno="352"><highlight class="normal">};</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="355" refid="classarrow_1_1dataset_1_1_cast_expression" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="arrow_2dataset_2visibility_8h_1a8dd8d57cd1ce7b38ce34aa040b68a6b7" kindref="member">ARROW_DS_EXPORT</ref><sp/><ref refid="classarrow_1_1dataset_1_1_cast_expression" kindref="compound">CastExpression</ref><sp/>final</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression_impl" kindref="compound">ExpressionImpl</ref>&lt;UnaryExpression,<sp/>CastExpression,<sp/>ExpressionType::CAST&gt;<sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="358" refid="classarrow_1_1dataset_1_1_cast_expression_1a4883dab7e943017608b63916ec2b1576" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1dataset_1_1_cast_expression_1a4883dab7e943017608b63916ec2b1576" kindref="member">CastExpression</ref>(std::shared_ptr&lt;Expression&gt;<sp/>operand,<sp/>std::shared_ptr&lt;DataType&gt;<sp/>to,</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1compute_1_1_cast_options" kindref="compound">compute::CastOptions</ref><sp/>options)</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classarrow_1_1dataset_1_1_expression_impl" kindref="compound">ExpressionImpl</ref>(<ref refid="namespacestd" kindref="compound">std</ref>::move(operand)),</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to_(<ref refid="namespacestd" kindref="compound">std</ref>::move(to)),</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options_(<ref refid="namespacestd" kindref="compound">std</ref>::move(options))<sp/>{}</highlight></codeline>
<codeline lineno="363"><highlight class="normal"></highlight></codeline>
<codeline lineno="366" refid="classarrow_1_1dataset_1_1_cast_expression_1ace482a64dd4963406852db271c03b4ef" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1dataset_1_1_cast_expression_1ace482a64dd4963406852db271c03b4ef" kindref="member">CastExpression</ref>(std::shared_ptr&lt;Expression&gt;<sp/>operand,<sp/>std::shared_ptr&lt;Expression&gt;<sp/>like,</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1compute_1_1_cast_options" kindref="compound">compute::CastOptions</ref><sp/>options)</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classarrow_1_1dataset_1_1_expression_impl" kindref="compound">ExpressionImpl</ref>(<ref refid="namespacestd" kindref="compound">std</ref>::move(operand)),</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>to_(<ref refid="namespacestd" kindref="compound">std</ref>::move(like)),</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>options_(<ref refid="namespacestd" kindref="compound">std</ref>::move(options))<sp/>{}</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Expression&gt;<sp/>Assume(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref>&amp;<sp/>given)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;DataType&gt;</ref>&gt;<sp/>Validate(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref>&amp;<sp/><ref refid="group__schema-factories_1gab03f1059d8776b1e85ee93c7cd03a078" kindref="member">schema</ref>)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight></codeline>
<codeline lineno="378" refid="classarrow_1_1dataset_1_1_cast_expression_1a4f64946723714fb165813e122ecebf4e" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1compute_1_1_cast_options" kindref="compound">compute::CastOptions</ref>&amp;<sp/><ref refid="classarrow_1_1dataset_1_1_cast_expression_1a4f64946723714fb165813e122ecebf4e" kindref="member">options</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>options_;<sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>to_type()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Expression&gt;&amp;<sp/>like_expr()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/>util::variant&lt;std::shared_ptr&lt;DataType&gt;,<sp/>std::shared_ptr&lt;Expression&gt;&gt;<sp/>to_;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1compute_1_1_cast_options" kindref="compound">compute::CastOptions</ref><sp/>options_;</highlight></codeline>
<codeline lineno="391"><highlight class="normal">};</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="394" refid="classarrow_1_1dataset_1_1_scalar_expression" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="arrow_2dataset_2visibility_8h_1a8dd8d57cd1ce7b38ce34aa040b68a6b7" kindref="member">ARROW_DS_EXPORT</ref><sp/><ref refid="classarrow_1_1dataset_1_1_scalar_expression" kindref="compound">ScalarExpression</ref><sp/>final<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref><sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="396" refid="classarrow_1_1dataset_1_1_scalar_expression_1ab9436128ab2ccb82d34db03f93d5a593" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_scalar_expression_1ab9436128ab2ccb82d34db03f93d5a593" kindref="member">ScalarExpression</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Scalar&gt;&amp;<sp/>value)</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref>(<ref refid="structarrow_1_1dataset_1_1_expression_type" kindref="compound">ExpressionType</ref>::<ref refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5adf763cd188561b0a6fb97f4e6194d05a" kindref="member">SCALAR</ref>),<sp/>value_(<ref refid="namespacestd" kindref="compound">std</ref>::move(value))<sp/>{}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399" refid="classarrow_1_1dataset_1_1_scalar_expression_1a8246820293e5d3baf936485a17a4aa01" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Scalar&gt;&amp;<sp/><ref refid="classarrow_1_1dataset_1_1_scalar_expression_1a8246820293e5d3baf936485a17a4aa01" kindref="member">value</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>value_;<sp/>}</highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Equals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref>&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;DataType&gt;</ref>&gt;<sp/>Validate(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref>&amp;<sp/><ref refid="group__schema-factories_1gab03f1059d8776b1e85ee93c7cd03a078" kindref="member">schema</ref>)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Expression&gt;<sp/>Copy()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Scalar&gt;<sp/>value_;</highlight></codeline>
<codeline lineno="411"><highlight class="normal">};</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="415" refid="classarrow_1_1dataset_1_1_field_expression" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="arrow_2dataset_2visibility_8h_1a8dd8d57cd1ce7b38ce34aa040b68a6b7" kindref="member">ARROW_DS_EXPORT</ref><sp/><ref refid="classarrow_1_1dataset_1_1_field_expression" kindref="compound">FieldExpression</ref><sp/>final<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref><sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="417" refid="classarrow_1_1dataset_1_1_field_expression_1adc11ee439a664380c612cc600ea32fd0" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_field_expression_1adc11ee439a664380c612cc600ea32fd0" kindref="member">FieldExpression</ref>(std::string<sp/>name)</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref>(<ref refid="structarrow_1_1dataset_1_1_expression_type" kindref="compound">ExpressionType</ref>::<ref refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5ad4d52feaeed01860ccd6a3447d173a93" kindref="member">FIELD</ref>),<sp/>name_(<ref refid="namespacestd" kindref="compound">std</ref>::move(name))<sp/>{}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="420" refid="classarrow_1_1dataset_1_1_field_expression_1aa0ade5c1c568622871cc82a5199873d4" refkind="member"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="classarrow_1_1dataset_1_1_field_expression_1aa0ade5c1c568622871cc82a5199873d4" kindref="member">name</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>name_;<sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Equals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref>&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"></highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;DataType&gt;</ref>&gt;<sp/>Validate(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref>&amp;<sp/><ref refid="group__schema-factories_1gab03f1059d8776b1e85ee93c7cd03a078" kindref="member">schema</ref>)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Expression&gt;<sp/>Copy()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/>std::string<sp/>name_;</highlight></codeline>
<codeline lineno="432"><highlight class="normal">};</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="434" refid="classarrow_1_1dataset_1_1_custom_expression" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="arrow_2dataset_2visibility_8h_1a8dd8d57cd1ce7b38ce34aa040b68a6b7" kindref="member">ARROW_DS_EXPORT</ref><sp/><ref refid="classarrow_1_1dataset_1_1_custom_expression" kindref="compound">CustomExpression</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref><sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="436" refid="classarrow_1_1dataset_1_1_custom_expression_1a35f6b1e8ff91fcbb8da46cbb7aed2cd9" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1dataset_1_1_custom_expression_1a35f6b1e8ff91fcbb8da46cbb7aed2cd9" kindref="member">CustomExpression</ref>()<sp/>:<sp/><ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref>(<ref refid="structarrow_1_1dataset_1_1_expression_type" kindref="compound">ExpressionType</ref>::<ref refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5ac81d2708b25a2eb8906abb7a8565aa76" kindref="member">CUSTOM</ref>)<sp/>{}</highlight></codeline>
<codeline lineno="437"><highlight class="normal">};</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><ref refid="arrow_2dataset_2visibility_8h_1a8dd8d57cd1ce7b38ce34aa040b68a6b7" kindref="member">ARROW_DS_EXPORT</ref><sp/>std::shared_ptr&lt;AndExpression&gt;<sp/><ref refid="namespacearrow_1_1dataset_1a5d63b36287db7c429b1418d63518680b" kindref="member">and_</ref>(std::shared_ptr&lt;Expression&gt;<sp/>lhs,</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Expression&gt;<sp/>rhs);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><ref refid="arrow_2dataset_2visibility_8h_1a8dd8d57cd1ce7b38ce34aa040b68a6b7" kindref="member">ARROW_DS_EXPORT</ref><sp/>std::shared_ptr&lt;Expression&gt;<sp/><ref refid="namespacearrow_1_1dataset_1a5d63b36287db7c429b1418d63518680b" kindref="member">and_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacearrow_1_1dataset_1a2b7f7d9324d77bc7b43a96f1b09f5001" kindref="member">ExpressionVector</ref>&amp;<sp/>subexpressions);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><ref refid="arrow_2dataset_2visibility_8h_1a8dd8d57cd1ce7b38ce34aa040b68a6b7" kindref="member">ARROW_DS_EXPORT</ref><sp/><ref refid="classarrow_1_1dataset_1_1_and_expression" kindref="compound">AndExpression</ref><sp/><ref refid="namespacearrow_1_1dataset_1a97fb68ccfd0fb66654b124725d354008" kindref="member">operator&amp;&amp;</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><ref refid="arrow_2dataset_2visibility_8h_1a8dd8d57cd1ce7b38ce34aa040b68a6b7" kindref="member">ARROW_DS_EXPORT</ref><sp/>std::shared_ptr&lt;OrExpression&gt;<sp/><ref refid="namespacearrow_1_1dataset_1a8075d0e76f7e41aca2ba87e8dd97d7d6" kindref="member">or_</ref>(std::shared_ptr&lt;Expression&gt;<sp/>lhs,</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Expression&gt;<sp/>rhs);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><ref refid="arrow_2dataset_2visibility_8h_1a8dd8d57cd1ce7b38ce34aa040b68a6b7" kindref="member">ARROW_DS_EXPORT</ref><sp/>std::shared_ptr&lt;Expression&gt;<sp/><ref refid="namespacearrow_1_1dataset_1a8075d0e76f7e41aca2ba87e8dd97d7d6" kindref="member">or_</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="namespacearrow_1_1dataset_1a2b7f7d9324d77bc7b43a96f1b09f5001" kindref="member">ExpressionVector</ref>&amp;<sp/>subexpressions);</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><ref refid="arrow_2dataset_2visibility_8h_1a8dd8d57cd1ce7b38ce34aa040b68a6b7" kindref="member">ARROW_DS_EXPORT</ref><sp/><ref refid="classarrow_1_1dataset_1_1_or_expression" kindref="compound">OrExpression</ref><sp/><ref refid="namespacearrow_1_1dataset_1a59ab0466ab3e1f9910c05b91e4e72c2c" kindref="member">operator||</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref>&amp;<sp/>lhs,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"></highlight></codeline>
<codeline lineno="453"><highlight class="normal"><ref refid="arrow_2dataset_2visibility_8h_1a8dd8d57cd1ce7b38ce34aa040b68a6b7" kindref="member">ARROW_DS_EXPORT</ref><sp/>std::shared_ptr&lt;NotExpression&gt;<sp/><ref refid="namespacearrow_1_1dataset_1a3058878af14d68822141e49ab3986dd3" kindref="member">not_</ref>(std::shared_ptr&lt;Expression&gt;<sp/>operand);</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><ref refid="arrow_2dataset_2visibility_8h_1a8dd8d57cd1ce7b38ce34aa040b68a6b7" kindref="member">ARROW_DS_EXPORT</ref><sp/><ref refid="classarrow_1_1dataset_1_1_not_expression" kindref="compound">NotExpression</ref><sp/><ref refid="namespacearrow_1_1dataset_1adf8b44e79ce70631fc12e75d6bf3e207" kindref="member">operator!</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref>&amp;<sp/>rhs);</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457" refid="namespacearrow_1_1dataset_1abbc0528fcaf8fe939da7b3784bb120d4" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ScalarExpression&gt;<sp/><ref refid="namespacearrow_1_1dataset_1abbc0528fcaf8fe939da7b3784bb120d4" kindref="member">scalar</ref>(std::shared_ptr&lt;Scalar&gt;<sp/>value)<sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;ScalarExpression&gt;(std::move(value));</highlight></codeline>
<codeline lineno="459"><highlight class="normal">}</highlight></codeline>
<codeline lineno="460"><highlight class="normal"></highlight></codeline>
<codeline lineno="461"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="462" refid="namespacearrow_1_1dataset_1af8dde5750bbce95449c6752de07c0b11" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacearrow_1_1dataset_1abbc0528fcaf8fe939da7b3784bb120d4" kindref="member">scalar</ref>(T&amp;&amp;<sp/>value)<sp/>-&gt;<sp/>decltype(<ref refid="namespacearrow_1_1dataset_1abbc0528fcaf8fe939da7b3784bb120d4" kindref="member">scalar</ref>(<ref refid="namespacearrow_1a5902391d987b8f930a8d3898813d91d9" kindref="member">MakeScalar</ref>(std::forward&lt;T&gt;(value))))<sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacearrow_1_1dataset_1abbc0528fcaf8fe939da7b3784bb120d4" kindref="member">scalar</ref>(<ref refid="namespacearrow_1a5902391d987b8f930a8d3898813d91d9" kindref="member">MakeScalar</ref>(std::forward&lt;T&gt;(value)));</highlight></codeline>
<codeline lineno="464"><highlight class="normal">}</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466" refid="arrow_2dataset_2filter_8h_1a702e78d48414b5149fc4d54964773a11" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>COMPARISON_FACTORY(NAME,<sp/>FACTORY_NAME,<sp/>OP)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="467"><highlight class="preprocessor"><sp/><sp/>inline<sp/>std::shared_ptr&lt;ComparisonExpression&gt;<sp/>FACTORY_NAME(<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="468"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>std::shared_ptr&lt;Expression&gt;&amp;<sp/>lhs,<sp/>const<sp/>std::shared_ptr&lt;Expression&gt;&amp;<sp/>rhs)<sp/>{<sp/><sp/>\</highlight></codeline>
<codeline lineno="469"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>std::make_shared&lt;ComparisonExpression&gt;(compute::CompareOperator::NAME,<sp/>lhs,<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="470"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="471"><highlight class="preprocessor"><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="472"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="473"><highlight class="preprocessor"><sp/><sp/>template<sp/>&lt;typename<sp/>T,<sp/>typename<sp/>Enable<sp/>=<sp/>typename<sp/>std::enable_if&lt;!std::is_base_of&lt;<sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="474"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Expression,<sp/>typename<sp/>std::decay&lt;T&gt;::type&gt;::value&gt;::type&gt;<sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="475"><highlight class="preprocessor"><sp/><sp/>ComparisonExpression<sp/>operator<sp/>OP(const<sp/>Expression&amp;<sp/>lhs,<sp/>T&amp;&amp;<sp/>rhs)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="476"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>ComparisonExpression(compute::CompareOperator::NAME,<sp/>lhs.Copy(),<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="477"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>scalar(std::forward&lt;T&gt;(rhs)));<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="478"><highlight class="preprocessor"><sp/><sp/>}<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="479"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="480"><highlight class="preprocessor"><sp/><sp/>inline<sp/>ComparisonExpression<sp/>operator<sp/>OP(const<sp/>Expression&amp;<sp/>lhs,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="481"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>const<sp/>Expression&amp;<sp/>rhs)<sp/>{<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="482"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>return<sp/>ComparisonExpression(compute::CompareOperator::NAME,<sp/>lhs.Copy(),<sp/>rhs.Copy());<sp/>\</highlight></codeline>
<codeline lineno="483"><highlight class="preprocessor"><sp/><sp/>}</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><ref refid="arrow_2dataset_2filter_8h_1a702e78d48414b5149fc4d54964773a11" kindref="member">COMPARISON_FACTORY</ref>(<ref refid="namespacearrow_1_1compute_1a722101516c22b89bdf3f54ff6f90cd2ea602792ae96607227306b00b948a49642" kindref="member">EQUAL</ref>,<sp/>equal,<sp/>==)</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><ref refid="arrow_2dataset_2filter_8h_1a702e78d48414b5149fc4d54964773a11" kindref="member">COMPARISON_FACTORY</ref>(<ref refid="namespacearrow_1_1compute_1a722101516c22b89bdf3f54ff6f90cd2ea4bcbbc099f2f532f402c86415099f446" kindref="member">NOT_EQUAL</ref>,<sp/>not_equal,<sp/>!=)</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><ref refid="arrow_2dataset_2filter_8h_1a702e78d48414b5149fc4d54964773a11" kindref="member">COMPARISON_FACTORY</ref>(<ref refid="namespacearrow_1_1compute_1a722101516c22b89bdf3f54ff6f90cd2ea3da583275ccef5bb978f7c0caf0c93e8" kindref="member">GREATER</ref>,<sp/>greater,<sp/>&gt;)</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><ref refid="arrow_2dataset_2filter_8h_1a702e78d48414b5149fc4d54964773a11" kindref="member">COMPARISON_FACTORY</ref>(<ref refid="namespacearrow_1_1compute_1a722101516c22b89bdf3f54ff6f90cd2eaafce6452f6406693fc0b4736f343c19a" kindref="member">GREATER_EQUAL</ref>,<sp/>greater_equal,<sp/>&gt;=)</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><ref refid="arrow_2dataset_2filter_8h_1a702e78d48414b5149fc4d54964773a11" kindref="member">COMPARISON_FACTORY</ref>(<ref refid="namespacearrow_1_1compute_1a722101516c22b89bdf3f54ff6f90cd2eaece4bea22705948d598457047b45a713" kindref="member">LESS</ref>,<sp/>less,<sp/>&lt;)</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><ref refid="arrow_2dataset_2filter_8h_1a702e78d48414b5149fc4d54964773a11" kindref="member">COMPARISON_FACTORY</ref>(<ref refid="namespacearrow_1_1compute_1a722101516c22b89bdf3f54ff6f90cd2eab8cba2f6e6f1cb0afed2d02ee7ed5afa" kindref="member">LESS_EQUAL</ref>,<sp/>less_equal,<sp/>&lt;=)</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="preprocessor">#undef<sp/>COMPARISON_FACTORY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492" refid="namespacearrow_1_1dataset_1abf7e2c331809b06808fd7f46400595ea" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;FieldExpression&gt;<sp/><ref refid="namespacearrow_1_1dataset_1abf7e2c331809b06808fd7f46400595ea" kindref="member">field_ref</ref>(std::string<sp/>name)<sp/>{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;FieldExpression&gt;(std::move(name));</highlight></codeline>
<codeline lineno="494"><highlight class="normal">}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight></codeline>
<codeline lineno="496" refid="namespacearrow_1_1dataset_1_1string__literals" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">string_literals<sp/>{</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_field_expression" kindref="compound">FieldExpression</ref><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal"><sp/>_(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>name_length)<sp/>{</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_field_expression" kindref="compound">FieldExpression</ref>({name,<sp/>name_length});</highlight></codeline>
<codeline lineno="501"><highlight class="normal">}</highlight></codeline>
<codeline lineno="502"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>string_literals</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Enable&gt;</highlight></codeline>
<codeline lineno="505" refid="classarrow_1_1dataset_1_1_expression_1a55f49c9a8081e757c4d399073785f171" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression_1a8c952a05b1090e1ec15adbe7ed712ea6" kindref="member">Expression::Equals</ref>(T&amp;&amp;<sp/>t)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(type_<sp/>!=<sp/><ref refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5adf763cd188561b0a6fb97f4e6194d05a" kindref="member">ExpressionType::SCALAR</ref>)<sp/>{</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>s<sp/>=<sp/><ref refid="namespacearrow_1a5902391d987b8f930a8d3898813d91d9" kindref="member">MakeScalar</ref>(std::forward&lt;T&gt;(t));</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>internal::checked_cast&lt;</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_scalar_expression" kindref="compound">ScalarExpression</ref>&amp;&gt;(*this).<ref refid="classarrow_1_1dataset_1_1_scalar_expression_1a8246820293e5d3baf936485a17a4aa01" kindref="member">value</ref>()-&gt;Equals(*s);</highlight></codeline>
<codeline lineno="511"><highlight class="normal">}</highlight></codeline>
<codeline lineno="512"><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Visitor&gt;</highlight></codeline>
<codeline lineno="514" refid="namespacearrow_1_1dataset_1a57ae27e6da86581df9e4615313d75674" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/><ref refid="namespacearrow_1_1dataset_1a57ae27e6da86581df9e4615313d75674" kindref="member">VisitExpression</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref>&amp;<sp/>expr,<sp/>Visitor&amp;&amp;<sp/>visitor)</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>-&gt;<sp/>decltype(visitor(expr))<sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(expr.type())<sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5ad4d52feaeed01860ccd6a3447d173a93" kindref="member">ExpressionType::FIELD</ref>:</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>visitor(internal::checked_cast&lt;const<sp/>FieldExpression&amp;&gt;(expr));</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5adf763cd188561b0a6fb97f4e6194d05a" kindref="member">ExpressionType::SCALAR</ref>:</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>visitor(internal::checked_cast&lt;const<sp/>ScalarExpression&amp;&gt;(expr));</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5ad1a684cdcf0547ceb0abec3d12ff20ab" kindref="member">ExpressionType::IN</ref>:</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>visitor(internal::checked_cast&lt;const<sp/>InExpression&amp;&gt;(expr));</highlight></codeline>
<codeline lineno="525"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5a6e382fe9efd09abe35f49bfc709a40f6" kindref="member">ExpressionType::IS_VALID</ref>:</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>visitor(internal::checked_cast&lt;const<sp/>IsValidExpression&amp;&gt;(expr));</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5a84582cd4b09f4d784f5b97ef0e9972d6" kindref="member">ExpressionType::AND</ref>:</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>visitor(internal::checked_cast&lt;const<sp/>AndExpression&amp;&gt;(expr));</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5a0aee6b8f48f5cdfef65665203bc229e9" kindref="member">ExpressionType::OR</ref>:</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>visitor(internal::checked_cast&lt;const<sp/>OrExpression&amp;&gt;(expr));</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5a2a4b5173910f951fb7eb952fd83bd3c4" kindref="member">ExpressionType::NOT</ref>:</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>visitor(internal::checked_cast&lt;const<sp/>NotExpression&amp;&gt;(expr));</highlight></codeline>
<codeline lineno="537"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5a439a3988070075e517d97129a260ec73" kindref="member">ExpressionType::CAST</ref>:</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>visitor(internal::checked_cast&lt;const<sp/>CastExpression&amp;&gt;(expr));</highlight></codeline>
<codeline lineno="540"><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5a59d4ed07a0331a094d801800b1358e90" kindref="member">ExpressionType::COMPARISON</ref>:</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>visitor(internal::checked_cast&lt;const<sp/>ComparisonExpression&amp;&gt;(expr));</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1dataset_1_1_expression_type_1aa055f8b51338c1fa7f7dda520053b4d5ac81d2708b25a2eb8906abb7a8565aa76" kindref="member">ExpressionType::CUSTOM</ref>:</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>visitor(internal::checked_cast&lt;const<sp/>CustomExpression&amp;&gt;(expr));</highlight></codeline>
<codeline lineno="549"><highlight class="normal">}</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><ref refid="arrow_2dataset_2visibility_8h_1a8dd8d57cd1ce7b38ce34aa040b68a6b7" kindref="member">ARROW_DS_EXPORT</ref><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;Expression&gt;</ref>&gt;<sp/><ref refid="namespacearrow_1_1dataset_1a95b827aceba2fc24b3a2882ef5684a94" kindref="member">InsertImplicitCasts</ref>(</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref>&amp;<sp/>expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref>&amp;<sp/><ref refid="group__schema-factories_1gab03f1059d8776b1e85ee93c7cd03a078" kindref="member">schema</ref>);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><ref refid="arrow_2dataset_2visibility_8h_1a8dd8d57cd1ce7b38ce34aa040b68a6b7" kindref="member">ARROW_DS_EXPORT</ref><sp/>std::vector&lt;std::string&gt;<sp/><ref refid="namespacearrow_1_1dataset_1ac75fca74c726dc902e652c13518362b4" kindref="member">FieldsInExpression</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref>&amp;<sp/>expr);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"><ref refid="arrow_2dataset_2visibility_8h_1a8dd8d57cd1ce7b38ce34aa040b68a6b7" kindref="member">ARROW_DS_EXPORT</ref><sp/>std::vector&lt;std::string&gt;<sp/><ref refid="namespacearrow_1_1dataset_1ac75fca74c726dc902e652c13518362b4" kindref="member">FieldsInExpression</ref>(</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Expression&gt;&amp;<sp/>expr);</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="562" refid="classarrow_1_1dataset_1_1_expression_evaluator" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="arrow_2dataset_2visibility_8h_1a8dd8d57cd1ce7b38ce34aa040b68a6b7" kindref="member">ARROW_DS_EXPORT</ref><sp/><ref refid="classarrow_1_1dataset_1_1_expression_evaluator" kindref="compound">ExpressionEvaluator</ref><sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classarrow_1_1dataset_1_1_expression_evaluator" kindref="compound">ExpressionEvaluator</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;compute::Datum&gt;</ref><sp/>Evaluate(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref>&amp;<sp/>expr,</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref>&amp;<sp/>batch,</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/>pool)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577" refid="classarrow_1_1dataset_1_1_expression_evaluator_1a21e0bcc1077b15d56b5d8039e7e32314" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;compute::Datum&gt;</ref><sp/><ref refid="classarrow_1_1dataset_1_1_expression_evaluator_1a21e0bcc1077b15d56b5d8039e7e32314" kindref="member">Evaluate</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref>&amp;<sp/>expr,</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref>&amp;<sp/>batch)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="579"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Evaluate(expr,<sp/>batch,<sp/><ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">default_memory_pool</ref>());</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="581"><highlight class="normal"></highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;RecordBatch&gt;</ref>&gt;<sp/><ref refid="namespacearrow_1_1compute_1a5197379391d1425601f697bc949d7229" kindref="member">Filter</ref>(</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1compute_1_1_datum" kindref="compound">compute::Datum</ref>&amp;<sp/>selection,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;RecordBatch&gt;&amp;<sp/>batch,</highlight></codeline>
<codeline lineno="584"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/>pool)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight></codeline>
<codeline lineno="586" refid="classarrow_1_1dataset_1_1_expression_evaluator_1a76cef0916b1ade6ce0998cf3d95b9318" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;RecordBatch&gt;</ref>&gt;<sp/><ref refid="classarrow_1_1dataset_1_1_expression_evaluator_1a76cef0916b1ade6ce0998cf3d95b9318" kindref="member">Filter</ref>(</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1compute_1_1_datum" kindref="compound">compute::Datum</ref>&amp;<sp/>selection,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;RecordBatch&gt;&amp;<sp/>batch)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="namespacearrow_1_1compute_1a5197379391d1425601f697bc949d7229" kindref="member">Filter</ref>(selection,<sp/>batch,<sp/><ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">default_memory_pool</ref>());</highlight></codeline>
<codeline lineno="589"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_iterator" kindref="compound">RecordBatchIterator</ref><sp/>FilterBatches(<ref refid="classarrow_1_1_iterator" kindref="compound">RecordBatchIterator</ref><sp/>unfiltered,</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Expression&gt;<sp/>filter,</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/>pool<sp/>=<sp/><ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">default_memory_pool</ref>());</highlight></codeline>
<codeline lineno="598"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;ExpressionEvaluator&gt;<sp/>Null();</highlight></codeline>
<codeline lineno="602"><highlight class="normal">};</highlight></codeline>
<codeline lineno="603"><highlight class="normal"></highlight></codeline>
<codeline lineno="606" refid="classarrow_1_1dataset_1_1_tree_evaluator" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="arrow_2dataset_2visibility_8h_1a8dd8d57cd1ce7b38ce34aa040b68a6b7" kindref="member">ARROW_DS_EXPORT</ref><sp/><ref refid="classarrow_1_1dataset_1_1_tree_evaluator" kindref="compound">TreeEvaluator</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression_evaluator" kindref="compound">ExpressionEvaluator</ref><sp/>{</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;compute::Datum&gt;</ref><sp/>Evaluate(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref>&amp;<sp/>expr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref>&amp;<sp/>batch,</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/>pool)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;RecordBatch&gt;</ref>&gt;<sp/><ref refid="namespacearrow_1_1compute_1a5197379391d1425601f697bc949d7229" kindref="member">Filter</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1compute_1_1_datum" kindref="compound">compute::Datum</ref>&amp;<sp/>selection,</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;RecordBatch&gt;&amp;<sp/>batch,</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/>pool)<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"></highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">Impl;</highlight></codeline>
<codeline lineno="617"><highlight class="normal">};</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="619"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>dataset</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="620"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>arrow</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/arrow/cpp/src/arrow/dataset/filter.h"/>
  </compounddef>
</doxygen>
