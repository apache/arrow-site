<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classgandiva_1_1_if_node" kind="class" language="C++" prot="public">
    <compoundname>gandiva::IfNode</compoundname>
    <basecompoundref refid="classgandiva_1_1_node" prot="public" virt="non-virtual">gandiva::Node</basecompoundref>
    <includes refid="node_8h" local="no">gandiva/node.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classgandiva_1_1_if_node_1a429fe51b150d814eb47077a9c7801d2d" prot="private" static="no" mutable="no">
        <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
        <definition>NodePtr gandiva::IfNode::condition_</definition>
        <argsstring></argsstring>
        <name>condition_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/node.h" line="180" column="1" bodyfile="/arrow/cpp/src/gandiva/node.h" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgandiva_1_1_if_node_1accbe715deaa3d8c6d0b8dad5fde8d73d" prot="private" static="no" mutable="no">
        <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
        <definition>NodePtr gandiva::IfNode::then_node_</definition>
        <argsstring></argsstring>
        <name>then_node_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/node.h" line="181" column="1" bodyfile="/arrow/cpp/src/gandiva/node.h" bodystart="181" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgandiva_1_1_if_node_1a6e30d0f488de4be98468baad71b36bbf" prot="private" static="no" mutable="no">
        <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
        <definition>NodePtr gandiva::IfNode::else_node_</definition>
        <argsstring></argsstring>
        <name>else_node_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/node.h" line="182" column="1" bodyfile="/arrow/cpp/src/gandiva/node.h" bodystart="182" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgandiva_1_1_if_node_1ab708288bfc6c41547309b4f75bf8aebd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>gandiva::IfNode::IfNode</definition>
        <argsstring>(NodePtr condition, NodePtr then_node, NodePtr else_node, DataTypePtr result_type)</argsstring>
        <name>IfNode</name>
        <param>
          <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
          <declname>condition</declname>
        </param>
        <param>
          <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
          <declname>then_node</declname>
        </param>
        <param>
          <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
          <declname>else_node</declname>
        </param>
        <param>
          <type><ref refid="namespacegandiva_1a3e3446d98cf1dcf281b0d3f6c16a65d3" kindref="member">DataTypePtr</ref></type>
          <declname>result_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/node.h" line="159" column="1" bodyfile="/arrow/cpp/src/gandiva/node.h" bodystart="159" bodyend="163"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_if_node_1ae14023d53beeaac0859e75cc396bc0c4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>Status gandiva::IfNode::Accept</definition>
        <argsstring>(NodeVisitor &amp;visitor) const override</argsstring>
        <name>Accept</name>
        <reimplements refid="classgandiva_1_1_node_1a07a1ab1f2c7f363bdd27cbba8387ffa3">Accept</reimplements>
        <param>
          <type><ref refid="classgandiva_1_1_node_visitor" kindref="compound">NodeVisitor</ref> &amp;</type>
          <declname>visitor</declname>
        </param>
        <briefdescription>
<para>Derived classes should simply invoke the Visit api of the visitor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/node.h" line="165" column="1" bodyfile="/arrow/cpp/src/gandiva/node.h" bodystart="165" bodyend="165"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_if_node_1a448fbf14c400e9f8409b1973def67f03" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref> &amp;</type>
        <definition>const NodePtr&amp; gandiva::IfNode::condition</definition>
        <argsstring>() const</argsstring>
        <name>condition</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/node.h" line="167" column="1" bodyfile="/arrow/cpp/src/gandiva/node.h" bodystart="167" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_if_node_1a121755a3806bebcb701c82fbe19ccda4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref> &amp;</type>
        <definition>const NodePtr&amp; gandiva::IfNode::then_node</definition>
        <argsstring>() const</argsstring>
        <name>then_node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/node.h" line="168" column="1" bodyfile="/arrow/cpp/src/gandiva/node.h" bodystart="168" bodyend="168"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_if_node_1a8dccb1573d0964c3ed921d45763ac137" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref> &amp;</type>
        <definition>const NodePtr&amp; gandiva::IfNode::else_node</definition>
        <argsstring>() const</argsstring>
        <name>else_node</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/node.h" line="169" column="1" bodyfile="/arrow/cpp/src/gandiva/node.h" bodystart="169" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_if_node_1aeef6668fbb4ffa1d985f88e1e3d23285" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string gandiva::IfNode::ToString</definition>
        <argsstring>() const override</argsstring>
        <name>ToString</name>
        <reimplements refid="classgandiva_1_1_node_1a7e458c306e2162546c96a9c8eea0eef6">ToString</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/node.h" line="171" column="1" bodyfile="/arrow/cpp/src/gandiva/node.h" bodystart="171" bodyend="177"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classgandiva_1_1_node" kindref="compound">Node</ref> in the expression tree, representing an if-else expression. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2222">
        <label>gandiva::IfNode</label>
        <link refid="classgandiva_1_1_if_node"/>
        <childnode refid="2223" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2223">
        <label>gandiva::Node</label>
        <link refid="classgandiva_1_1_node"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2224">
        <label>gandiva::IfNode</label>
        <link refid="classgandiva_1_1_if_node"/>
        <childnode refid="2225" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2225">
        <label>gandiva::Node</label>
        <link refid="classgandiva_1_1_node"/>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/gandiva/node.h" line="157" column="1" bodyfile="/arrow/cpp/src/gandiva/node.h" bodystart="157" bodyend="183"/>
    <listofallmembers>
      <member refid="classgandiva_1_1_if_node_1ae14023d53beeaac0859e75cc396bc0c4" prot="public" virt="virtual"><scope>gandiva::IfNode</scope><name>Accept</name></member>
      <member refid="classgandiva_1_1_if_node_1a448fbf14c400e9f8409b1973def67f03" prot="public" virt="non-virtual"><scope>gandiva::IfNode</scope><name>condition</name></member>
      <member refid="classgandiva_1_1_if_node_1a429fe51b150d814eb47077a9c7801d2d" prot="private" virt="non-virtual"><scope>gandiva::IfNode</scope><name>condition_</name></member>
      <member refid="classgandiva_1_1_if_node_1a8dccb1573d0964c3ed921d45763ac137" prot="public" virt="non-virtual"><scope>gandiva::IfNode</scope><name>else_node</name></member>
      <member refid="classgandiva_1_1_if_node_1a6e30d0f488de4be98468baad71b36bbf" prot="private" virt="non-virtual"><scope>gandiva::IfNode</scope><name>else_node_</name></member>
      <member refid="classgandiva_1_1_if_node_1ab708288bfc6c41547309b4f75bf8aebd" prot="public" virt="non-virtual"><scope>gandiva::IfNode</scope><name>IfNode</name></member>
      <member refid="classgandiva_1_1_node_1abb254ba06af6ededc023d840cb4ae4ca" prot="public" virt="non-virtual"><scope>gandiva::IfNode</scope><name>Node</name></member>
      <member refid="classgandiva_1_1_node_1ab196d58f5e486a054ff5d49e1d932e83" prot="public" virt="non-virtual"><scope>gandiva::IfNode</scope><name>return_type</name></member>
      <member refid="classgandiva_1_1_node_1a01cea0ee791882a488f56df5780874df" prot="protected" virt="non-virtual"><scope>gandiva::IfNode</scope><name>return_type_</name></member>
      <member refid="classgandiva_1_1_if_node_1a121755a3806bebcb701c82fbe19ccda4" prot="public" virt="non-virtual"><scope>gandiva::IfNode</scope><name>then_node</name></member>
      <member refid="classgandiva_1_1_if_node_1accbe715deaa3d8c6d0b8dad5fde8d73d" prot="private" virt="non-virtual"><scope>gandiva::IfNode</scope><name>then_node_</name></member>
      <member refid="classgandiva_1_1_if_node_1aeef6668fbb4ffa1d985f88e1e3d23285" prot="public" virt="virtual"><scope>gandiva::IfNode</scope><name>ToString</name></member>
      <member refid="classgandiva_1_1_node_1a8bddcf2654584db4ea12ac393a87b0d3" prot="public" virt="virtual"><scope>gandiva::IfNode</scope><name>~Node</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
