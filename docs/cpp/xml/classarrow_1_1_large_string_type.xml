<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_large_string_type" kind="class" language="C++" prot="public">
    <compoundname>arrow::LargeStringType</compoundname>
    <basecompoundref refid="classarrow_1_1_large_binary_type" prot="public" virt="non-virtual">arrow::LargeBinaryType</basecompoundref>
    <includes refid="type_8h" local="no">arrow/type.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classarrow_1_1_large_string_type_1a0ab649a23ceb0abffb71a1caf0bfde49" prot="public" static="no">
        <type><ref refid="classarrow_1_1_large_binary_type" kindref="compound">LargeBinaryType</ref></type>
        <definition>using arrow::LargeStringType::EquivalentBinaryType =  LargeBinaryType</definition>
        <argsstring></argsstring>
        <name>EquivalentBinaryType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="867" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="867" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classarrow_1_1_large_string_type_1a2efbb029b500b4548b3094a82e41fac9" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref></type>
        <definition>constexpr Type::type arrow::LargeStringType::type_id</definition>
        <argsstring></argsstring>
        <name>type_id</name>
        <initializer>= <ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44a97279348163fabb0441e9ae939dc7ef5" kindref="member">Type::LARGE_STRING</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="865" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="865" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_large_string_type_1ad8fbb665a05e2cb96fe47ad65cd0260d" prot="public" static="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool arrow::LargeStringType::is_utf8</definition>
        <argsstring></argsstring>
        <name>is_utf8</name>
        <initializer>= true</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="866" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="866" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1_large_string_type_1a711c1ba82b53411fb775dbf143b83e2d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const char *</type>
        <definition>static constexpr const char* arrow::LargeStringType::type_name</definition>
        <argsstring>()</argsstring>
        <name>type_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="869" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="869" bodyend="869"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1_large_string_type_1a00749e3798b523b2996e77c73bcd4651" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::LargeStringType::LargeStringType</definition>
        <argsstring>()</argsstring>
        <name>LargeStringType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="871" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="871" bodyend="871"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_large_string_type_1a5edecd7f1caaf74ecf35da22dbffb140" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string arrow::LargeStringType::ToString</definition>
        <argsstring>() const override</argsstring>
        <name>ToString</name>
        <reimplements refid="classarrow_1_1_large_binary_type_1a7872d009ffff66404157a0ca86162f54">ToString</reimplements>
        <briefdescription>
<para>A string representation of the type, including any children. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="873" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_large_string_type_1a07c2864eabf436e15ec944e488f17f6e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string arrow::LargeStringType::name</definition>
        <argsstring>() const override</argsstring>
        <name>name</name>
        <reimplements refid="classarrow_1_1_large_binary_type_1a13b91514b5c18c6ad41d84cb92e0c31f">name</reimplements>
        <briefdescription>
<para>A string name of the type, omitting any child fields. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Experimental API </para></simplesect>
<simplesect kind="since"><para>0.7.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="874" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="874" bodyend="874"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classarrow_1_1_large_string_type_1af2bbe651ffb01c7ff11e4afbb869bb48" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arrow::LargeStringType::ComputeFingerprint</definition>
        <argsstring>() const override</argsstring>
        <name>ComputeFingerprint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="877" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Concrete type class for large variable-size string data, utf8-encoded. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2782">
        <label>arrow::DataType</label>
        <link refid="classarrow_1_1_data_type"/>
        <childnode refid="2783" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2780">
        <label>arrow::LargeBinaryType</label>
        <link refid="classarrow_1_1_large_binary_type"/>
        <childnode refid="2781" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2783">
        <label>arrow::detail::Fingerprintable</label>
      </node>
      <node id="2779">
        <label>arrow::LargeStringType</label>
        <link refid="classarrow_1_1_large_string_type"/>
        <childnode refid="2780" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2781">
        <label>arrow::BaseBinaryType</label>
        <link refid="classarrow_1_1_base_binary_type"/>
        <childnode refid="2782" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2787">
        <label>arrow::DataType</label>
        <link refid="classarrow_1_1_data_type"/>
        <childnode refid="2788" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2785">
        <label>arrow::LargeBinaryType</label>
        <link refid="classarrow_1_1_large_binary_type"/>
        <childnode refid="2786" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2788">
        <label>arrow::detail::Fingerprintable</label>
      </node>
      <node id="2784">
        <label>arrow::LargeStringType</label>
        <link refid="classarrow_1_1_large_string_type"/>
        <childnode refid="2785" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2786">
        <label>arrow::BaseBinaryType</label>
        <link refid="classarrow_1_1_base_binary_type"/>
        <childnode refid="2787" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/type.h" line="863" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="863" bodyend="878"/>
    <listofallmembers>
      <member refid="classarrow_1_1_data_type_1a97571c4039e363f7ebcb09f7c789064a" prot="public" virt="non-virtual"><scope>arrow::LargeStringType</scope><name>Accept</name></member>
      <member refid="classarrow_1_1_data_type_1a3c9f77b8d895abd8618566386cbeb7c0" prot="public" virt="non-virtual"><scope>arrow::LargeStringType</scope><name>child</name></member>
      <member refid="classarrow_1_1_data_type_1a36061c037a2e6e974cc3b22dfb6a5bac" prot="public" virt="non-virtual"><scope>arrow::LargeStringType</scope><name>children</name></member>
      <member refid="classarrow_1_1_data_type_1a8dd2f042289733133c386463afcea902" prot="protected" virt="non-virtual"><scope>arrow::LargeStringType</scope><name>children_</name></member>
      <member refid="classarrow_1_1_large_string_type_1af2bbe651ffb01c7ff11e4afbb869bb48" prot="protected" virt="non-virtual"><scope>arrow::LargeStringType</scope><name>ComputeFingerprint</name></member>
      <member refid="classarrow_1_1_data_type_1a1e0bf7cc98ce39872b8044f375d7de6b" prot="protected" virt="non-virtual"><scope>arrow::LargeStringType</scope><name>ComputeMetadataFingerprint</name></member>
      <member refid="classarrow_1_1_data_type_1a1b8a7ece05983649f67396177f40e844" prot="public" virt="non-virtual"><scope>arrow::LargeStringType</scope><name>DataType</name></member>
      <member refid="classarrow_1_1_data_type_1aaf003113bb8f4c51a03a16f4b27a52bb" prot="public" virt="non-virtual"><scope>arrow::LargeStringType</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_data_type_1ae974f4c707ef998d25368d278818af6b" prot="public" virt="non-virtual"><scope>arrow::LargeStringType</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_large_string_type_1a0ab649a23ceb0abffb71a1caf0bfde49" prot="public" virt="non-virtual"><scope>arrow::LargeStringType</scope><name>EquivalentBinaryType</name></member>
      <member refid="classarrow_1_1_data_type_1a5ec6a1c93420c68e9c8065d4a56ad645" prot="public" virt="non-virtual"><scope>arrow::LargeStringType</scope><name>id</name></member>
      <member refid="classarrow_1_1_data_type_1aa2704f1cfc50018d02e109b32f67e422" prot="protected" virt="non-virtual"><scope>arrow::LargeStringType</scope><name>id_</name></member>
      <member refid="classarrow_1_1_large_string_type_1ad8fbb665a05e2cb96fe47ad65cd0260d" prot="public" virt="non-virtual"><scope>arrow::LargeStringType</scope><name>is_utf8</name></member>
      <member refid="classarrow_1_1_large_binary_type_1a9bfcd4b8120c8b03cdf2dfd8f5f57346" prot="public" virt="non-virtual"><scope>arrow::LargeStringType</scope><name>LargeBinaryType</name></member>
      <member refid="classarrow_1_1_large_binary_type_1a6c29e5c9d8f7d4c49da7e19ccb8bc77f" prot="protected" virt="non-virtual"><scope>arrow::LargeStringType</scope><name>LargeBinaryType</name></member>
      <member refid="classarrow_1_1_large_string_type_1a00749e3798b523b2996e77c73bcd4651" prot="public" virt="non-virtual"><scope>arrow::LargeStringType</scope><name>LargeStringType</name></member>
      <member refid="classarrow_1_1_large_binary_type_1a224295a081273aa84c2e5134f0321997" prot="public" virt="virtual"><scope>arrow::LargeStringType</scope><name>layout</name></member>
      <member refid="classarrow_1_1_large_string_type_1a07c2864eabf436e15ec944e488f17f6e" prot="public" virt="virtual"><scope>arrow::LargeStringType</scope><name>name</name></member>
      <member refid="classarrow_1_1_data_type_1ac8920179a6c1e7f434c495d5ec4662f1" prot="public" virt="non-virtual"><scope>arrow::LargeStringType</scope><name>num_children</name></member>
      <member refid="classarrow_1_1_large_binary_type_1af062b46bc4740286b1f0c2f502203a05" prot="public" virt="non-virtual"><scope>arrow::LargeStringType</scope><name>offset_type</name></member>
      <member refid="classarrow_1_1_large_string_type_1a5edecd7f1caaf74ecf35da22dbffb140" prot="public" virt="virtual"><scope>arrow::LargeStringType</scope><name>ToString</name></member>
      <member refid="classarrow_1_1_large_string_type_1a2efbb029b500b4548b3094a82e41fac9" prot="public" virt="non-virtual"><scope>arrow::LargeStringType</scope><name>type_id</name></member>
      <member refid="classarrow_1_1_large_string_type_1a711c1ba82b53411fb775dbf143b83e2d" prot="public" virt="non-virtual"><scope>arrow::LargeStringType</scope><name>type_name</name></member>
      <member refid="classarrow_1_1_data_type_1a268b7e57ebec17a48930c73d8c0605d2" prot="public" virt="non-virtual"><scope>arrow::LargeStringType</scope><name>~DataType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
