<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structarrow_1_1stl_1_1_schema_from_tuple" kind="struct" language="C++" prot="public">
    <compoundname>arrow::stl::SchemaFromTuple</compoundname>
    <includes refid="stl_8h" local="no">arrow/stl.h</includes>
    <templateparamlist>
      <param>
        <type>typename Tuple</type>
      </param>
      <param>
        <type>std::size_t</type>
        <declname>N</declname>
        <defname>N</defname>
        <defval>std::tuple_size&lt;Tuple&gt;::value</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structarrow_1_1stl_1_1_schema_from_tuple_1a697ab565c2c41c30bdaf676c798a7e94" prot="public" static="no">
        <type>internal::BareTupleElement&lt; N - 1, Tuple &gt;</type>
        <definition>using arrow::stl::SchemaFromTuple&lt; Tuple, N &gt;::Element =  internal::BareTupleElement&lt;N - 1, Tuple&gt;</definition>
        <argsstring></argsstring>
        <name>Element</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/stl.h" line="211" column="1" bodyfile="/arrow/cpp/src/arrow/stl.h" bodystart="211" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structarrow_1_1stl_1_1_schema_from_tuple_1abb910fd773073764a4165c73543dabd0" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt; &gt;</type>
        <definition>static std::vector&lt;std::shared_ptr&lt;Field&gt; &gt; arrow::stl::SchemaFromTuple&lt; Tuple, N &gt;::MakeSchemaRecursion</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;names)</argsstring>
        <name>MakeSchemaRecursion</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>names</declname>
        </param>
        <briefdescription>
<para>Recursively build a vector of <ref refid="classarrow_1_1_field" kindref="compound">arrow::Field</ref> from the defined types. </para>        </briefdescription>
        <detaileddescription>
<para>In most cases MakeSchema is the better entrypoint for the <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> creation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/stl.h" line="218" column="1" bodyfile="/arrow/cpp/src/arrow/stl.h" bodystart="218" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1stl_1_1_schema_from_tuple_1a164e732029c4fcfcabe1b1ee7e385094" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;Schema&gt; arrow::stl::SchemaFromTuple&lt; Tuple, N &gt;::MakeSchema</definition>
        <argsstring>(const std::vector&lt; std::string &gt; &amp;names)</argsstring>
        <name>MakeSchema</name>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>names</declname>
        </param>
        <briefdescription>
<para>Build a <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> from the types of the tuple-like structure passed in as template parameter assign the column names at runtime. </para>        </briefdescription>
        <detaileddescription>
<para>An example usage of this API can look like the following:</para><para><programlisting><codeline><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TupleType<sp/>=<sp/>std::tuple&lt;int,<sp/>std::vector&lt;std::string&gt;&gt;;</highlight></codeline>
<codeline><highlight class="normal">std::shared_ptr&lt;Schema&gt;<sp/><ref refid="group__schema-factories_1gab03f1059d8776b1e85ee93c7cd03a078" kindref="member">schema</ref><sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1stl_1_1_schema_from_tuple_1a164e732029c4fcfcabe1b1ee7e385094" kindref="member">SchemaFromTuple&lt;TupleType&gt;::MakeSchema</ref>({</highlight><highlight class="stringliteral">&quot;int_column&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;list_of_strings_column&quot;</highlight><highlight class="normal">});</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/stl.h" line="237" column="1" bodyfile="/arrow/cpp/src/arrow/stl.h" bodystart="237" bodyend="239"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1stl_1_1_schema_from_tuple_1aecaa315b7fe5945dc94d72e10f73a325" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename NamesTuple</type>
          </param>
        </templateparamlist>
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt; &gt;</type>
        <definition>static std::vector&lt;std::shared_ptr&lt;Field&gt; &gt; arrow::stl::SchemaFromTuple&lt; Tuple, N &gt;::MakeSchemaRecursionT</definition>
        <argsstring>(const NamesTuple &amp;names)</argsstring>
        <name>MakeSchemaRecursionT</name>
        <param>
          <type>const NamesTuple &amp;</type>
          <declname>names</declname>
        </param>
        <briefdescription>
<para>Recursively build a vector of <ref refid="classarrow_1_1_field" kindref="compound">arrow::Field</ref> from the defined types. </para>        </briefdescription>
        <detaileddescription>
<para>In most cases MakeSchema is the better entrypoint for the <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> creation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/stl.h" line="247" column="1" bodyfile="/arrow/cpp/src/arrow/stl.h" bodystart="247" bodyend="257"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1stl_1_1_schema_from_tuple_1a5f21195eda1d9c573852dcf7615ba7e3" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename NamesTuple</type>
          </param>
        </templateparamlist>
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;Schema&gt; arrow::stl::SchemaFromTuple&lt; Tuple, N &gt;::MakeSchema</definition>
        <argsstring>(const NamesTuple &amp;names)</argsstring>
        <name>MakeSchema</name>
        <param>
          <type>const NamesTuple &amp;</type>
          <declname>names</declname>
        </param>
        <briefdescription>
<para>Build a <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> from the types of the tuple-like structure passed in as template parameter assign the column names at runtime. </para>        </briefdescription>
        <detaileddescription>
<para>An example usage of this API can look like the following:</para><para><programlisting><codeline><highlight class="keyword">using</highlight><highlight class="normal"><sp/>TupleType<sp/>=<sp/>std::tuple&lt;int,<sp/>std::vector&lt;std::string&gt;&gt;;</highlight></codeline>
<codeline><highlight class="normal">std::shared_ptr&lt;Schema&gt;<sp/>schema<sp/>=</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1stl_1_1_schema_from_tuple_1a164e732029c4fcfcabe1b1ee7e385094" kindref="member">SchemaFromTuple&lt;TupleType&gt;::MakeSchema</ref>({</highlight><highlight class="stringliteral">&quot;int_column&quot;</highlight><highlight class="normal">,<sp/></highlight><highlight class="stringliteral">&quot;list_of_strings_column&quot;</highlight><highlight class="normal">});</highlight></codeline>
</programlisting> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/stl.h" line="270" column="1" bodyfile="/arrow/cpp/src/arrow/stl.h" bodystart="270" bodyend="272"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Build an <ref refid="classarrow_1_1_schema" kindref="compound">arrow::Schema</ref> based upon the types defined in a std::tuple-like structure. </para>    </briefdescription>
    <detaileddescription>
<para>While the type information is available at compile-time, we still need to add the column names at runtime, thus these methods are not constexpr. </para>    </detaileddescription>
    <location file="/arrow/cpp/src/arrow/stl.h" line="210" column="1" bodyfile="/arrow/cpp/src/arrow/stl.h" bodystart="210" bodyend="273"/>
    <listofallmembers>
      <member refid="structarrow_1_1stl_1_1_schema_from_tuple_1a697ab565c2c41c30bdaf676c798a7e94" prot="public" virt="non-virtual"><scope>arrow::stl::SchemaFromTuple</scope><name>Element</name></member>
      <member refid="structarrow_1_1stl_1_1_schema_from_tuple_1a164e732029c4fcfcabe1b1ee7e385094" prot="public" virt="non-virtual"><scope>arrow::stl::SchemaFromTuple</scope><name>MakeSchema</name></member>
      <member refid="structarrow_1_1stl_1_1_schema_from_tuple_1a5f21195eda1d9c573852dcf7615ba7e3" prot="public" virt="non-virtual"><scope>arrow::stl::SchemaFromTuple</scope><name>MakeSchema</name></member>
      <member refid="structarrow_1_1stl_1_1_schema_from_tuple_1abb910fd773073764a4165c73543dabd0" prot="public" virt="non-virtual"><scope>arrow::stl::SchemaFromTuple</scope><name>MakeSchemaRecursion</name></member>
      <member refid="structarrow_1_1stl_1_1_schema_from_tuple_1aecaa315b7fe5945dc94d72e10f73a325" prot="public" virt="non-virtual"><scope>arrow::stl::SchemaFromTuple</scope><name>MakeSchemaRecursionT</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
