<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1compute_1_1_op_kernel" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>arrow::compute::OpKernel</compoundname>
    <derivedcompoundref refid="classarrow_1_1compute_1_1_binary_kernel" prot="public" virt="non-virtual">arrow::compute::BinaryKernel</derivedcompoundref>
    <derivedcompoundref refid="classarrow_1_1compute_1_1_unary_kernel" prot="public" virt="non-virtual">arrow::compute::UnaryKernel</derivedcompoundref>
    <includes refid="kernel_8h" local="no">arrow/compute/kernel.h</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1compute_1_1_op_kernel_1a640d7e2c51722436ed428013dabb63d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual arrow::compute::OpKernel::~OpKernel</definition>
        <argsstring>()=default</argsstring>
        <name>~OpKernel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="56" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1compute_1_1_op_kernel_1a7c5f16b7acdba73640c9131e2cd04270" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt;</type>
        <definition>virtual std::shared_ptr&lt;DataType&gt; arrow::compute::OpKernel::out_type</definition>
        <argsstring>() const =0</argsstring>
        <name>out_type</name>
        <reimplementedby refid="classarrow_1_1compute_1_1_add_kernel_1a3e1c5443031d245ac45728d79d6475fa">out_type</reimplementedby>
        <reimplementedby refid="classarrow_1_1compute_1_1_filter_kernel_1af6ffa5804e28fd19dad6935a3b2d0b9d">out_type</reimplementedby>
        <reimplementedby refid="classarrow_1_1compute_1_1_aggregate_unary_kernel_1a98da7996286bf51c7a90f16c3d5d5a9d">out_type</reimplementedby>
        <reimplementedby refid="classarrow_1_1compute_1_1_take_kernel_1a92e44db1c4d86667f66c0e9f1456b740">out_type</reimplementedby>
        <briefdescription>
<para>EXPERIMENTAL The output data type of the kernel. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the output type </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="59" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base class for operator kernels. </para>    </briefdescription>
    <detaileddescription>
<para>Note to implementors: Operator kernels are intended to be the lowest level of an analytics/compute engine. They will generally not be exposed directly to end-users. Instead they will be wrapped by higher level constructs (e.g. top-level functions or physical execution plan nodes). These higher level constructs are responsible for user input validation and returning the appropriate error <ref refid="classarrow_1_1_status" kindref="compound">Status</ref>.</para><para>Due to this design, implementations of Call (the execution method on subclasses) should use assertions (i.e. DCHECK) to double-check parameter arguments when in higher level components returning an InvalidArgument error might be more appropriate. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="3355">
        <label>arrow::compute::OpKernel</label>
        <link refid="classarrow_1_1compute_1_1_op_kernel"/>
      </node>
      <node id="3362">
        <label>arrow::compute::AggregateUnaryKernel</label>
        <link refid="classarrow_1_1compute_1_1_aggregate_unary_kernel"/>
        <childnode refid="3361" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3356">
        <label>arrow::compute::BinaryKernel</label>
        <link refid="classarrow_1_1compute_1_1_binary_kernel"/>
        <childnode refid="3355" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3357">
        <label>arrow::compute::AddKernel</label>
        <link refid="classarrow_1_1compute_1_1_add_kernel"/>
        <childnode refid="3356" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3358">
        <label>arrow::compute::detail::PrimitiveAllocatingBinaryKernel</label>
        <childnode refid="3356" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3361">
        <label>arrow::compute::UnaryKernel</label>
        <link refid="classarrow_1_1compute_1_1_unary_kernel"/>
        <childnode refid="3355" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3363">
        <label>arrow::compute::detail::PrimitiveAllocatingUnaryKernel</label>
        <childnode refid="3361" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3359">
        <label>arrow::compute::FilterKernel</label>
        <link refid="classarrow_1_1compute_1_1_filter_kernel"/>
        <childnode refid="3356" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3360">
        <label>arrow::compute::TakeKernel</label>
        <link refid="classarrow_1_1compute_1_1_take_kernel"/>
        <childnode refid="3356" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/arrow/cpp/src/arrow/compute/kernel.h" line="54" column="1" bodyfile="/arrow/cpp/src/arrow/compute/kernel.h" bodystart="54" bodyend="60"/>
    <listofallmembers>
      <member refid="classarrow_1_1compute_1_1_op_kernel_1a7c5f16b7acdba73640c9131e2cd04270" prot="public" virt="pure-virtual"><scope>arrow::compute::OpKernel</scope><name>out_type</name></member>
      <member refid="classarrow_1_1compute_1_1_op_kernel_1a640d7e2c51722436ed428013dabb63d3" prot="public" virt="virtual"><scope>arrow::compute::OpKernel</scope><name>~OpKernel</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
