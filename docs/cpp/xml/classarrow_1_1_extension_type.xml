<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_extension_type" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>arrow::ExtensionType</compoundname>
    <basecompoundref refid="classarrow_1_1_data_type" prot="public" virt="non-virtual">arrow::DataType</basecompoundref>
    <derivedcompoundref refid="classarrow_1_1py_1_1_py_extension_type" prot="public" virt="non-virtual">arrow::py::PyExtensionType</derivedcompoundref>
    <includes refid="extension__type_8h" local="no">arrow/extension_type.h</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classarrow_1_1_extension_type_1a941594575270b88e4892e73e3ee39e4f" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref></type>
        <definition>constexpr Type::type arrow::ExtensionType::type_id</definition>
        <argsstring></argsstring>
        <name>type_id</name>
        <initializer>= <ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44af62348e1483c0b1a1536853e35588dad" kindref="member">Type::EXTENSION</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/extension_type.h" line="35" column="1" bodyfile="/arrow/cpp/src/arrow/extension_type.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classarrow_1_1_extension_type_1a09fc1e29ec03b24599f24dad5fb9e81f" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::ExtensionType::storage_type_</definition>
        <argsstring></argsstring>
        <name>storage_type_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/extension_type.h" line="87" column="1" bodyfile="/arrow/cpp/src/arrow/extension_type.h" bodystart="87" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1_extension_type_1aadda8549c7cca187b72a42e8ed280482" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const char *</type>
        <definition>static constexpr const char* arrow::ExtensionType::type_name</definition>
        <argsstring>()</argsstring>
        <name>type_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/extension_type.h" line="37" column="1" bodyfile="/arrow/cpp/src/arrow/extension_type.h" bodystart="37" bodyend="37"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1_extension_type_1affa30a5b5993a3e38d8ea27e20253ae1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::ExtensionType::storage_type</definition>
        <argsstring>() const</argsstring>
        <name>storage_type</name>
        <briefdescription>
<para>The type of array used to represent this extension type&apos;s data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/extension_type.h" line="40" column="1" bodyfile="/arrow/cpp/src/arrow/extension_type.h" bodystart="40" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_extension_type_1a467c12cd7f9ee1bdbee822a311c7f2c6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="structarrow_1_1_data_type_layout" kindref="compound">DataTypeLayout</ref></type>
        <definition>DataTypeLayout arrow::ExtensionType::layout</definition>
        <argsstring>() const override</argsstring>
        <name>layout</name>
        <reimplements refid="classarrow_1_1_data_type_1a4fe70f6a45eda029ea118c8470ff925e">layout</reimplements>
        <briefdescription>
<para>Return the data type layout. </para>        </briefdescription>
        <detaileddescription>
<para>Children are not included.</para><para><simplesect kind="note"><para>Experimental API </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/extension_type.h" line="42" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_extension_type_1a0004afa50de1db25fdeb1fe290cf7312" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string arrow::ExtensionType::ToString</definition>
        <argsstring>() const override</argsstring>
        <name>ToString</name>
        <reimplements refid="classarrow_1_1_data_type_1a944727354fb11138ebd46368319598f2">ToString</reimplements>
        <briefdescription>
<para>A string representation of the type, including any children. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/extension_type.h" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_extension_type_1a7db26a19117968f84d607a31b0f49322" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string arrow::ExtensionType::name</definition>
        <argsstring>() const override</argsstring>
        <name>name</name>
        <reimplements refid="classarrow_1_1_data_type_1a94985d12273f5dd353d6142921299d4d">name</reimplements>
        <briefdescription>
<para>A string name of the type, omitting any child fields. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Experimental API </para></simplesect>
<simplesect kind="since"><para>0.7.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/extension_type.h" line="46" column="1" bodyfile="/arrow/cpp/src/arrow/extension_type.h" bodystart="46" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_extension_type_1ad9916ec6eff760b2e7ea27a0447280b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::string</type>
        <definition>virtual std::string arrow::ExtensionType::extension_name</definition>
        <argsstring>() const =0</argsstring>
        <name>extension_name</name>
        <reimplementedby refid="classarrow_1_1py_1_1_py_extension_type_1a9b7f2afdd5bc6a89e1fa8c5db11413d2">extension_name</reimplementedby>
        <briefdescription>
<para>Unique name of extension type used to identify type for serialization. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the string name of the extension </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/extension_type.h" line="51" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_extension_type_1a69e984708e321511b6ead98555926a54" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool arrow::ExtensionType::ExtensionEquals</definition>
        <argsstring>(const ExtensionType &amp;other) const =0</argsstring>
        <name>ExtensionEquals</name>
        <reimplementedby refid="classarrow_1_1py_1_1_py_extension_type_1a3d7a39403b8f1bb996f39f66cb93cedc">ExtensionEquals</reimplementedby>
        <param>
          <type>const <ref refid="classarrow_1_1_extension_type" kindref="compound">ExtensionType</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Determine if two instances of the same extension types are equal. </para>        </briefdescription>
        <detaileddescription>
<para>Invoked from <ref refid="classarrow_1_1_data_type_1aaf003113bb8f4c51a03a16f4b27a52bb" kindref="member">ExtensionType::Equals</ref> <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">other</parametername>
</parameternamelist>
<parameterdescription>
<para>the type to compare this type with </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>bool true if type instances are equal </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/extension_type.h" line="57" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_extension_type_1a57dda0a9013da282fad40e8480fbbd05" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt;</type>
        <definition>virtual std::shared_ptr&lt;Array&gt; arrow::ExtensionType::MakeArray</definition>
        <argsstring>(std::shared_ptr&lt; ArrayData &gt; data) const =0</argsstring>
        <name>MakeArray</name>
        <reimplementedby refid="classarrow_1_1py_1_1_py_extension_type_1a5b1c1c89607f6fd5b75a946b7ee97db4">MakeArray</reimplementedby>
        <param>
          <type>std::shared_ptr&lt; <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &gt;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
<para>Wrap built-in <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> type in a user-defined <ref refid="classarrow_1_1_extension_array" kindref="compound">ExtensionArray</ref> instance. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>the physical storage for the extension type </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/extension_type.h" line="61" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_extension_type_1ab30f3ba683a121093598f67581eda893" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &gt;</type>
        <definition>virtual Result&lt;std::shared_ptr&lt;DataType&gt; &gt; arrow::ExtensionType::Deserialize</definition>
        <argsstring>(std::shared_ptr&lt; DataType &gt; storage_type, const std::string &amp;serialized_data) const =0</argsstring>
        <name>Deserialize</name>
        <reimplementedby refid="classarrow_1_1py_1_1_py_extension_type_1a41c41e7ddfe96efb912ae8ab6e5a14d4">Deserialize</reimplementedby>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt;</type>
          <declname>storage_type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>serialized_data</declname>
        </param>
        <briefdescription>
<para>Create an instance of the <ref refid="classarrow_1_1_extension_type" kindref="compound">ExtensionType</ref> given the actual storage type and the serialized representation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">storage_type</parametername>
</parameternamelist>
<parameterdescription>
<para>the physical storage type of the extension </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">serialized_data</parametername>
</parameternamelist>
<parameterdescription>
<para>the serialized representation produced by Serialize </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/extension_type.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_extension_type_1afb2a3286f7f95fa90f4998849f2b8540" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::ExtensionType::Deserialize</definition>
        <argsstring>(std::shared_ptr&lt; DataType &gt; storage_type, const std::string &amp;serialized_data, std::shared_ptr&lt; DataType &gt; *out) const</argsstring>
        <name>Deserialize</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt;</type>
          <declname>storage_type</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>serialized_data</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/extension_type.h" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_extension_type_1ad8d5ca0bb4338a8c5bd54cbb1e5b9041" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::string</type>
        <definition>virtual std::string arrow::ExtensionType::Serialize</definition>
        <argsstring>() const =0</argsstring>
        <name>Serialize</name>
        <reimplementedby refid="classarrow_1_1py_1_1_py_extension_type_1adf8571501c6b5a0038e3b7b64f9828e8">Serialize</reimplementedby>
        <briefdescription>
<para>Create a serialized representation of the extension type&apos;s metadata. </para>        </briefdescription>
        <detaileddescription>
<para>The storage type will be handled automatically in IPC code paths <simplesect kind="return"><para>the serialized representation </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/extension_type.h" line="81" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classarrow_1_1_extension_type_1a0c5142ee04cd6c089bbf67409f034d65" prot="protected" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::ExtensionType::ExtensionType</definition>
        <argsstring>(std::shared_ptr&lt; DataType &gt; storage_type)</argsstring>
        <name>ExtensionType</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt;</type>
          <declname>storage_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/extension_type.h" line="84" column="1" bodyfile="/arrow/cpp/src/arrow/extension_type.h" bodystart="84" bodyend="85"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The base class for custom / user-defined types. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="1514">
        <label>arrow::DataType</label>
        <link refid="classarrow_1_1_data_type"/>
        <childnode refid="1515" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1516">
        <label>arrow::py::PyExtensionType</label>
        <link refid="classarrow_1_1py_1_1_py_extension_type"/>
        <childnode refid="1513" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1515">
        <label>arrow::detail::Fingerprintable</label>
      </node>
      <node id="1513">
        <label>arrow::ExtensionType</label>
        <link refid="classarrow_1_1_extension_type"/>
        <childnode refid="1514" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1518">
        <label>arrow::DataType</label>
        <link refid="classarrow_1_1_data_type"/>
        <childnode refid="1519" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1519">
        <label>arrow::detail::Fingerprintable</label>
      </node>
      <node id="1517">
        <label>arrow::ExtensionType</label>
        <link refid="classarrow_1_1_extension_type"/>
        <childnode refid="1518" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/extension_type.h" line="33" column="1" bodyfile="/arrow/cpp/src/arrow/extension_type.h" bodystart="33" bodyend="88"/>
    <listofallmembers>
      <member refid="classarrow_1_1_data_type_1a97571c4039e363f7ebcb09f7c789064a" prot="public" virt="non-virtual"><scope>arrow::ExtensionType</scope><name>Accept</name></member>
      <member refid="classarrow_1_1_data_type_1a3c9f77b8d895abd8618566386cbeb7c0" prot="public" virt="non-virtual"><scope>arrow::ExtensionType</scope><name>child</name></member>
      <member refid="classarrow_1_1_data_type_1a36061c037a2e6e974cc3b22dfb6a5bac" prot="public" virt="non-virtual"><scope>arrow::ExtensionType</scope><name>children</name></member>
      <member refid="classarrow_1_1_data_type_1a8dd2f042289733133c386463afcea902" prot="protected" virt="non-virtual"><scope>arrow::ExtensionType</scope><name>children_</name></member>
      <member refid="classarrow_1_1_data_type_1a76d3baecd61b755855fff41df058785a" prot="protected" virt="non-virtual"><scope>arrow::ExtensionType</scope><name>ComputeFingerprint</name></member>
      <member refid="classarrow_1_1_data_type_1a1e0bf7cc98ce39872b8044f375d7de6b" prot="protected" virt="non-virtual"><scope>arrow::ExtensionType</scope><name>ComputeMetadataFingerprint</name></member>
      <member refid="classarrow_1_1_data_type_1a1b8a7ece05983649f67396177f40e844" prot="public" virt="non-virtual"><scope>arrow::ExtensionType</scope><name>DataType</name></member>
      <member refid="classarrow_1_1_extension_type_1ab30f3ba683a121093598f67581eda893" prot="public" virt="pure-virtual"><scope>arrow::ExtensionType</scope><name>Deserialize</name></member>
      <member refid="classarrow_1_1_extension_type_1afb2a3286f7f95fa90f4998849f2b8540" prot="public" virt="non-virtual"><scope>arrow::ExtensionType</scope><name>Deserialize</name></member>
      <member refid="classarrow_1_1_data_type_1aaf003113bb8f4c51a03a16f4b27a52bb" prot="public" virt="non-virtual"><scope>arrow::ExtensionType</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_data_type_1ae974f4c707ef998d25368d278818af6b" prot="public" virt="non-virtual"><scope>arrow::ExtensionType</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_extension_type_1ad9916ec6eff760b2e7ea27a0447280b2" prot="public" virt="pure-virtual"><scope>arrow::ExtensionType</scope><name>extension_name</name></member>
      <member refid="classarrow_1_1_extension_type_1a69e984708e321511b6ead98555926a54" prot="public" virt="pure-virtual"><scope>arrow::ExtensionType</scope><name>ExtensionEquals</name></member>
      <member refid="classarrow_1_1_extension_type_1a0c5142ee04cd6c089bbf67409f034d65" prot="protected" virt="non-virtual"><scope>arrow::ExtensionType</scope><name>ExtensionType</name></member>
      <member refid="classarrow_1_1_data_type_1a5ec6a1c93420c68e9c8065d4a56ad645" prot="public" virt="non-virtual"><scope>arrow::ExtensionType</scope><name>id</name></member>
      <member refid="classarrow_1_1_data_type_1aa2704f1cfc50018d02e109b32f67e422" prot="protected" virt="non-virtual"><scope>arrow::ExtensionType</scope><name>id_</name></member>
      <member refid="classarrow_1_1_extension_type_1a467c12cd7f9ee1bdbee822a311c7f2c6" prot="public" virt="virtual"><scope>arrow::ExtensionType</scope><name>layout</name></member>
      <member refid="classarrow_1_1_extension_type_1a57dda0a9013da282fad40e8480fbbd05" prot="public" virt="pure-virtual"><scope>arrow::ExtensionType</scope><name>MakeArray</name></member>
      <member refid="classarrow_1_1_extension_type_1a7db26a19117968f84d607a31b0f49322" prot="public" virt="virtual"><scope>arrow::ExtensionType</scope><name>name</name></member>
      <member refid="classarrow_1_1_data_type_1ac8920179a6c1e7f434c495d5ec4662f1" prot="public" virt="non-virtual"><scope>arrow::ExtensionType</scope><name>num_children</name></member>
      <member refid="classarrow_1_1_extension_type_1ad8d5ca0bb4338a8c5bd54cbb1e5b9041" prot="public" virt="pure-virtual"><scope>arrow::ExtensionType</scope><name>Serialize</name></member>
      <member refid="classarrow_1_1_extension_type_1affa30a5b5993a3e38d8ea27e20253ae1" prot="public" virt="non-virtual"><scope>arrow::ExtensionType</scope><name>storage_type</name></member>
      <member refid="classarrow_1_1_extension_type_1a09fc1e29ec03b24599f24dad5fb9e81f" prot="protected" virt="non-virtual"><scope>arrow::ExtensionType</scope><name>storage_type_</name></member>
      <member refid="classarrow_1_1_extension_type_1a0004afa50de1db25fdeb1fe290cf7312" prot="public" virt="virtual"><scope>arrow::ExtensionType</scope><name>ToString</name></member>
      <member refid="classarrow_1_1_extension_type_1a941594575270b88e4892e73e3ee39e4f" prot="public" virt="non-virtual"><scope>arrow::ExtensionType</scope><name>type_id</name></member>
      <member refid="classarrow_1_1_extension_type_1aadda8549c7cca187b72a42e8ed280482" prot="public" virt="non-virtual"><scope>arrow::ExtensionType</scope><name>type_name</name></member>
      <member refid="classarrow_1_1_data_type_1a268b7e57ebec17a48930c73d8c0605d2" prot="public" virt="non-virtual"><scope>arrow::ExtensionType</scope><name>~DataType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
