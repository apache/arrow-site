<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1fs_1_1_path_forest" kind="class" language="C++" prot="public">
    <compoundname>arrow::fs::PathForest</compoundname>
    <basecompoundref refid="classarrow_1_1util_1_1_equality_comparable" prot="public" virt="non-virtual">arrow::util::EqualityComparable&lt; PathForest &gt;</basecompoundref>
    <includes refid="path__forest_8h" local="no">arrow/filesystem/path_forest.h</includes>
    <innerclass refid="structarrow_1_1fs_1_1_path_forest_1_1_ref" prot="public">arrow::fs::PathForest::Ref</innerclass>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classarrow_1_1fs_1_1_path_forest_1a460dd0f3388269a06d383693dcdb2fcd" prot="public" static="no">
        <name>@0</name>
        <enumvalue id="classarrow_1_1fs_1_1_path_forest_1a460dd0f3388269a06d383693dcdb2fcda52db91d6e17c6717a00d59dcc694c114" prot="public">
          <name>Continue</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classarrow_1_1fs_1_1_path_forest_1a460dd0f3388269a06d383693dcdb2fcda6ad2f99b14fcb7eb1918894d4184028a" prot="public">
          <name>Prune</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/path_forest.h" line="102" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/path_forest.h" bodystart="102" bodyend="102"/>
      </memberdef>
      <memberdef kind="typedef" id="classarrow_1_1fs_1_1_path_forest_1abf37aedffb05e37f2f165d3c70f78446" prot="public" static="no">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; decltype(<ref refid="classarrow_1_1fs_1_1_path_forest_1a460dd0f3388269a06d383693dcdb2fcda6ad2f99b14fcb7eb1918894d4184028a" kindref="member">Prune</ref>)&gt;</type>
        <definition>using arrow::fs::PathForest::MaybePrune =  Result&lt;decltype(Prune)&gt;</definition>
        <argsstring></argsstring>
        <name>MaybePrune</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/path_forest.h" line="103" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/path_forest.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classarrow_1_1fs_1_1_path_forest_1a928d497d1ae471e52f2e80c7e9c7572e" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int arrow::fs::PathForest::offset_</definition>
        <argsstring></argsstring>
        <name>offset_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/path_forest.h" line="148" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/path_forest.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1fs_1_1_path_forest_1a88df9a79f7d090b3722980376fb8e864" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int arrow::fs::PathForest::size_</definition>
        <argsstring></argsstring>
        <name>size_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/path_forest.h" line="148" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/path_forest.h" bodystart="148" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1fs_1_1_path_forest_1a6c83762534526934226422ab9842af58" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; std::vector&lt; <ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref> &gt; &gt;</type>
        <definition>std::shared_ptr&lt;std::vector&lt;FileInfo&gt; &gt; arrow::fs::PathForest::infos_</definition>
        <argsstring></argsstring>
        <name>infos_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/path_forest.h" line="149" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/path_forest.h" bodystart="149" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1fs_1_1_path_forest_1aea20d0e0de4a8544a6eaf10de06385be" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; std::vector&lt; int &gt; &gt;</type>
        <definition>std::shared_ptr&lt;std::vector&lt;int&gt; &gt; arrow::fs::PathForest::descendant_counts_</definition>
        <argsstring></argsstring>
        <name>descendant_counts_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/path_forest.h" line="150" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/path_forest.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1fs_1_1_path_forest_1a31a0bee73c647f4aa60d5b3e14438617" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; std::vector&lt; int &gt; &gt;</type>
        <definition>std::shared_ptr&lt;std::vector&lt;int&gt; &gt; arrow::fs::PathForest::parents_</definition>
        <argsstring></argsstring>
        <name>parents_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/path_forest.h" line="150" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/path_forest.h" bodystart="150" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1fs_1_1_path_forest_1aada127962c8f3a2b4b0fc02b6c26f4ab" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Associated</declname>
            <defname>Associated</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; <ref refid="classarrow_1_1fs_1_1_path_forest" kindref="compound">PathForest</ref> &gt;</type>
        <definition>static Result&lt;PathForest&gt; arrow::fs::PathForest::Make</definition>
        <argsstring>(std::vector&lt; FileInfo &gt; infos, std::vector&lt; Associated &gt; *... associated)</argsstring>
        <name>Make</name>
        <param>
          <type>std::vector&lt; <ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref> &gt;</type>
          <declname>infos</declname>
        </param>
        <param>
          <type>std::vector&lt; Associated &gt; *...</type>
          <declname>associated</declname>
        </param>
        <briefdescription>
<para>Transforms a <ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref> vector into a forest. </para>        </briefdescription>
        <detaileddescription>
<para>The caller should ensure that infos does not contain duplicates.</para><para>Vector(s) of associated objects (IE associated[i] is associated with infos[i]) may be passed for reordering. (After construction, associated[i] is associated with forest[i]). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/path_forest.h" line="51" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/path_forest.h" bodystart="51" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_path_forest_1a5bdcbd43eb1e0bd953b776512ff27cb6" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; <ref refid="classarrow_1_1fs_1_1_path_forest" kindref="compound">PathForest</ref> &gt;</type>
        <definition>static Result&lt;PathForest&gt; arrow::fs::PathForest::MakeFromPreSorted</definition>
        <argsstring>(std::vector&lt; FileInfo &gt; sorted_infos)</argsstring>
        <name>MakeFromPreSorted</name>
        <param>
          <type>std::vector&lt; <ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref> &gt;</type>
          <declname>sorted_infos</declname>
        </param>
        <briefdescription>
<para>Make a <ref refid="classarrow_1_1fs_1_1_path_forest" kindref="compound">PathForest</ref> from a <ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref> vector which is already sorted in a depth first visitation order. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/path_forest.h" line="67" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1fs_1_1_path_forest_1a4f8afffdd8060e1e249d58ed1fb7ed19" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int arrow::fs::PathForest::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
<para>Returns the number of nodes in this forest. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/path_forest.h" line="70" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/path_forest.h" bodystart="70" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_path_forest_1a026c2f2f7ba3abe250a74ca9d27ea4f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::fs::PathForest::Equals</definition>
        <argsstring>(const PathForest &amp;other) const</argsstring>
        <name>Equals</name>
        <param>
          <type>const <ref refid="classarrow_1_1fs_1_1_path_forest" kindref="compound">PathForest</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/path_forest.h" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_path_forest_1a8eec30de4d4e065beec43bb4ef7a97ed" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arrow::fs::PathForest::ToString</definition>
        <argsstring>() const</argsstring>
        <name>ToString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/path_forest.h" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_path_forest_1a7a34f8a0befd6255e8d67aeda36d8406" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structarrow_1_1fs_1_1_path_forest_1_1_ref" kindref="compound">Ref</ref></type>
        <definition>Ref arrow::fs::PathForest::operator[]</definition>
        <argsstring>(int i) const</argsstring>
        <name>operator[]</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/path_forest.h" line="94" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/path_forest.h" bodystart="94" bodyend="94"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_path_forest_1a0ba9cf6099ca42281bb6b3ac3c3cbdcf" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structarrow_1_1fs_1_1_path_forest_1_1_ref" kindref="compound">Ref</ref> &gt;</type>
        <definition>std::vector&lt;Ref&gt; arrow::fs::PathForest::roots</definition>
        <argsstring>() const</argsstring>
        <name>roots</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/path_forest.h" line="96" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_path_forest_1afe6b216d52f128d4047d177bf2124f61" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref> &gt; &amp;</type>
        <definition>std::vector&lt;FileInfo&gt;&amp; arrow::fs::PathForest::infos</definition>
        <argsstring>() &amp;</argsstring>
        <name>infos</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/path_forest.h" line="98" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/path_forest.h" bodystart="98" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_path_forest_1a5c8e868c9973173f931ae1608ac74fa1" prot="public" static="no" const="yes" explicit="no" inline="yes" refqual="lvalue" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref> &gt; &amp;</type>
        <definition>const std::vector&lt;FileInfo&gt;&amp; arrow::fs::PathForest::infos</definition>
        <argsstring>() const &amp;</argsstring>
        <name>infos</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/path_forest.h" line="99" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/path_forest.h" bodystart="99" bodyend="99"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_path_forest_1a7bf1892c1ff763fc3f0f2185b14f56d0" prot="public" static="no" const="no" explicit="no" inline="yes" refqual="rvalue" virt="non-virtual">
        <type>std::vector&lt; <ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref> &gt;</type>
        <definition>std::vector&lt;FileInfo&gt; arrow::fs::PathForest::infos</definition>
        <argsstring>() &amp;&amp;</argsstring>
        <name>infos</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/path_forest.h" line="100" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/path_forest.h" bodystart="100" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_path_forest_1a3f1d041ca7648b14f570d1eaa8867453" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Visitor</type>
          </param>
        </templateparamlist>
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::fs::PathForest::Visit</definition>
        <argsstring>(Visitor &amp;&amp;v) const</argsstring>
        <name>Visit</name>
        <param>
          <type>Visitor &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Visitors may return MaybePrune to enable eager pruning. </para>        </briefdescription>
        <detaileddescription>
<para>Visitors will be called with the <ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref> of the currently visited node and the index of that node in depth first visitation order (useful for accessing parallel vectors of associated data). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/path_forest.h" line="109" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/path_forest.h" bodystart="109" bodyend="112"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classarrow_1_1fs_1_1_path_forest_1afd0136e22dc39e9c76dd8e85b07f1128" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::fs::PathForest::PathForest</definition>
        <argsstring>(int offset, int size, std::shared_ptr&lt; std::vector&lt; FileInfo &gt;&gt; infos, std::shared_ptr&lt; std::vector&lt; int &gt;&gt; descendant_counts, std::shared_ptr&lt; std::vector&lt; int &gt;&gt; parents)</argsstring>
        <name>PathForest</name>
        <param>
          <type>int</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; std::vector&lt; <ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref> &gt;&gt;</type>
          <declname>infos</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; std::vector&lt; int &gt;&gt;</type>
          <declname>descendant_counts</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; std::vector&lt; int &gt;&gt;</type>
          <declname>parents</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/path_forest.h" line="115" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/path_forest.h" bodystart="115" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_path_forest_1a970ca641ddaea2367c9b13884bdc7855" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Visitor</type>
          </param>
        </templateparamlist>
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::fs::PathForest::VisitImpl</definition>
        <argsstring>(Visitor &amp;&amp;v, std::true_type) const</argsstring>
        <name>VisitImpl</name>
        <param>
          <type>Visitor &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>std::true_type</type>
        </param>
        <briefdescription>
<para>Visit with eager pruning. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/path_forest.h" line="126" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/path_forest.h" bodystart="126" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1fs_1_1_path_forest_1a71362bdedc70a52ae635b03e3fa4b12a" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Visitor</type>
          </param>
        </templateparamlist>
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::fs::PathForest::VisitImpl</definition>
        <argsstring>(Visitor &amp;&amp;v, std::false_type) const</argsstring>
        <name>VisitImpl</name>
        <param>
          <type>Visitor &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>std::false_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/filesystem/path_forest.h" line="141" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/path_forest.h" bodystart="141" bodyend="146"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A <ref refid="classarrow_1_1fs_1_1_path_forest" kindref="compound">PathForest</ref> is a utility to transform a vector of <ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref> into a forest representation for tree traversal purposes. </para>    </briefdescription>
    <detaileddescription>
<para>Note: there is no guarantee of a shared root. Each node in the graph wraps a <ref refid="structarrow_1_1fs_1_1_file_info" kindref="compound">FileInfo</ref>. Files are expected to be found only at leaves of the tree. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="3534">
        <label>arrow::fs::PathForest</label>
        <link refid="classarrow_1_1fs_1_1_path_forest"/>
        <childnode refid="3535" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3535">
        <label>arrow::util::EqualityComparable&lt; PathForest &gt;</label>
        <link refid="classarrow_1_1util_1_1_equality_comparable"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3536">
        <label>arrow::fs::PathForest</label>
        <link refid="classarrow_1_1fs_1_1_path_forest"/>
        <childnode refid="3537" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3537">
        <label>arrow::util::EqualityComparable&lt; PathForest &gt;</label>
        <link refid="classarrow_1_1util_1_1_equality_comparable"/>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/filesystem/path_forest.h" line="42" column="1" bodyfile="/arrow/cpp/src/arrow/filesystem/path_forest.h" bodystart="42" bodyend="151"/>
    <listofallmembers>
      <member refid="classarrow_1_1fs_1_1_path_forest_1a460dd0f3388269a06d383693dcdb2fcda52db91d6e17c6717a00d59dcc694c114" prot="public" virt="non-virtual"><scope>arrow::fs::PathForest</scope><name>Continue</name></member>
      <member refid="classarrow_1_1fs_1_1_path_forest_1aea20d0e0de4a8544a6eaf10de06385be" prot="protected" virt="non-virtual"><scope>arrow::fs::PathForest</scope><name>descendant_counts_</name></member>
      <member refid="classarrow_1_1fs_1_1_path_forest_1a026c2f2f7ba3abe250a74ca9d27ea4f2" prot="public" virt="non-virtual"><scope>arrow::fs::PathForest</scope><name>Equals</name></member>
      <member refid="classarrow_1_1util_1_1_equality_comparable_1a140cfdea92ae17331d8db8f69aad082f" prot="public" virt="non-virtual" ambiguityscope="EqualityComparable&lt; PathForest &gt;::"><scope>arrow::fs::PathForest</scope><name>Equals</name></member>
      <member refid="classarrow_1_1fs_1_1_path_forest_1afe6b216d52f128d4047d177bf2124f61" prot="public" virt="non-virtual"><scope>arrow::fs::PathForest</scope><name>infos</name></member>
      <member refid="classarrow_1_1fs_1_1_path_forest_1a5c8e868c9973173f931ae1608ac74fa1" prot="public" virt="non-virtual"><scope>arrow::fs::PathForest</scope><name>infos</name></member>
      <member refid="classarrow_1_1fs_1_1_path_forest_1a7bf1892c1ff763fc3f0f2185b14f56d0" prot="public" virt="non-virtual"><scope>arrow::fs::PathForest</scope><name>infos</name></member>
      <member refid="classarrow_1_1fs_1_1_path_forest_1a6c83762534526934226422ab9842af58" prot="protected" virt="non-virtual"><scope>arrow::fs::PathForest</scope><name>infos_</name></member>
      <member refid="classarrow_1_1fs_1_1_path_forest_1aada127962c8f3a2b4b0fc02b6c26f4ab" prot="public" virt="non-virtual"><scope>arrow::fs::PathForest</scope><name>Make</name></member>
      <member refid="classarrow_1_1fs_1_1_path_forest_1a5bdcbd43eb1e0bd953b776512ff27cb6" prot="public" virt="non-virtual"><scope>arrow::fs::PathForest</scope><name>MakeFromPreSorted</name></member>
      <member refid="classarrow_1_1fs_1_1_path_forest_1abf37aedffb05e37f2f165d3c70f78446" prot="public" virt="non-virtual"><scope>arrow::fs::PathForest</scope><name>MaybePrune</name></member>
      <member refid="classarrow_1_1fs_1_1_path_forest_1a928d497d1ae471e52f2e80c7e9c7572e" prot="protected" virt="non-virtual"><scope>arrow::fs::PathForest</scope><name>offset_</name></member>
      <member refid="classarrow_1_1util_1_1_equality_comparable_1a1a7ff2c6f720209bc960524c47ad0535" prot="public" virt="non-virtual"><scope>arrow::fs::PathForest</scope><name>operator!=</name></member>
      <member refid="classarrow_1_1util_1_1_equality_comparable_1ac0e8ec25e77ece923689ee31c389200e" prot="public" virt="non-virtual"><scope>arrow::fs::PathForest</scope><name>operator==</name></member>
      <member refid="classarrow_1_1fs_1_1_path_forest_1a7a34f8a0befd6255e8d67aeda36d8406" prot="public" virt="non-virtual"><scope>arrow::fs::PathForest</scope><name>operator[]</name></member>
      <member refid="classarrow_1_1fs_1_1_path_forest_1a31a0bee73c647f4aa60d5b3e14438617" prot="protected" virt="non-virtual"><scope>arrow::fs::PathForest</scope><name>parents_</name></member>
      <member refid="classarrow_1_1fs_1_1_path_forest_1afd0136e22dc39e9c76dd8e85b07f1128" prot="protected" virt="non-virtual"><scope>arrow::fs::PathForest</scope><name>PathForest</name></member>
      <member refid="classarrow_1_1fs_1_1_path_forest_1a460dd0f3388269a06d383693dcdb2fcda6ad2f99b14fcb7eb1918894d4184028a" prot="public" virt="non-virtual"><scope>arrow::fs::PathForest</scope><name>Prune</name></member>
      <member refid="classarrow_1_1fs_1_1_path_forest_1a0ba9cf6099ca42281bb6b3ac3c3cbdcf" prot="public" virt="non-virtual"><scope>arrow::fs::PathForest</scope><name>roots</name></member>
      <member refid="classarrow_1_1fs_1_1_path_forest_1a4f8afffdd8060e1e249d58ed1fb7ed19" prot="public" virt="non-virtual"><scope>arrow::fs::PathForest</scope><name>size</name></member>
      <member refid="classarrow_1_1fs_1_1_path_forest_1a88df9a79f7d090b3722980376fb8e864" prot="protected" virt="non-virtual"><scope>arrow::fs::PathForest</scope><name>size_</name></member>
      <member refid="classarrow_1_1fs_1_1_path_forest_1a8eec30de4d4e065beec43bb4ef7a97ed" prot="public" virt="non-virtual"><scope>arrow::fs::PathForest</scope><name>ToString</name></member>
      <member refid="classarrow_1_1fs_1_1_path_forest_1a3f1d041ca7648b14f570d1eaa8867453" prot="public" virt="non-virtual"><scope>arrow::fs::PathForest</scope><name>Visit</name></member>
      <member refid="classarrow_1_1fs_1_1_path_forest_1a970ca641ddaea2367c9b13884bdc7855" prot="protected" virt="non-virtual"><scope>arrow::fs::PathForest</scope><name>VisitImpl</name></member>
      <member refid="classarrow_1_1fs_1_1_path_forest_1a71362bdedc70a52ae635b03e3fa4b12a" prot="protected" virt="non-virtual"><scope>arrow::fs::PathForest</scope><name>VisitImpl</name></member>
      <member refid="classarrow_1_1util_1_1_equality_comparable_1a14c5ed61e030855eef29edebc6355806" prot="public" virt="non-virtual"><scope>arrow::fs::PathForest</scope><name>~EqualityComparable</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
