<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__buffer-allocation-functions" kind="group">
    <compoundname>buffer-allocation-functions</compoundname>
    <title>Functions for allocating buffers</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__buffer-allocation-functions_1gab7eeff2b27bb71cb821a1005d1d0a9be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; std::unique_ptr&lt; Buffer &gt; &gt;</type>
        <definition>Result&lt;std::unique_ptr&lt;Buffer&gt; &gt; arrow::AllocateBuffer</definition>
        <argsstring>(const int64_t size, MemoryPool *pool=NULLPTR)</argsstring>
        <name>AllocateBuffer</name>
        <param>
          <type>const int64_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>MemoryPool *</type>
          <declname>pool</declname>
          <defval><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></defval>
        </param>
        <briefdescription>
<para>Allocate a fixed size mutable buffer from a memory pool, zero its padding. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of buffer to allocate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pool</parametername>
</parameternamelist>
<parameterdescription>
<para>a memory pool </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/buffer.h" line="452" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__buffer-allocation-functions_1gaff11ee23eb038410107ea5246f2fb330" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Status</type>
        <definition>Status arrow::AllocateBuffer</definition>
        <argsstring>(MemoryPool *pool, const int64_t size, std::shared_ptr&lt; Buffer &gt; *out)</argsstring>
        <name>AllocateBuffer</name>
        <param>
          <type>MemoryPool *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>const int64_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; Buffer &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/buffer.h" line="457" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__buffer-allocation-functions_1gae4d3ff86145cc77724a56967ea8a3f5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Status</type>
        <definition>Status arrow::AllocateBuffer</definition>
        <argsstring>(const int64_t size, std::shared_ptr&lt; Buffer &gt; *out)</argsstring>
        <name>AllocateBuffer</name>
        <param>
          <type>const int64_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; Buffer &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/buffer.h" line="461" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__buffer-allocation-functions_1gad9698aacbd4ac435cc0cb676e2cb1fe0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Status</type>
        <definition>Status arrow::AllocateBuffer</definition>
        <argsstring>(MemoryPool *pool, const int64_t size, std::unique_ptr&lt; Buffer &gt; *out)</argsstring>
        <name>AllocateBuffer</name>
        <param>
          <type>MemoryPool *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>const int64_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; Buffer &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/buffer.h" line="465" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__buffer-allocation-functions_1ga06f0e830cd9d1892b243dda5cc66429a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Status</type>
        <definition>Status arrow::AllocateBuffer</definition>
        <argsstring>(const int64_t size, std::unique_ptr&lt; Buffer &gt; *out)</argsstring>
        <name>AllocateBuffer</name>
        <param>
          <type>const int64_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; Buffer &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/buffer.h" line="469" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__buffer-allocation-functions_1gaa44d72e6284de08b2171a710a01de2d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; std::unique_ptr&lt; ResizableBuffer &gt; &gt;</type>
        <definition>Result&lt;std::unique_ptr&lt;ResizableBuffer&gt; &gt; arrow::AllocateResizableBuffer</definition>
        <argsstring>(const int64_t size, MemoryPool *pool=NULLPTR)</argsstring>
        <name>AllocateResizableBuffer</name>
        <param>
          <type>const int64_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>MemoryPool *</type>
          <declname>pool</declname>
          <defval><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></defval>
        </param>
        <briefdescription>
<para>Allocate a resizeable buffer from a memory pool, zero its padding. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>size of buffer to allocate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pool</parametername>
</parameternamelist>
<parameterdescription>
<para>a memory pool </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/buffer.h" line="476" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__buffer-allocation-functions_1ga9c3ce000978a518fad942be4a54e9870" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Status</type>
        <definition>Status arrow::AllocateResizableBuffer</definition>
        <argsstring>(MemoryPool *pool, const int64_t size, std::shared_ptr&lt; ResizableBuffer &gt; *out)</argsstring>
        <name>AllocateResizableBuffer</name>
        <param>
          <type>MemoryPool *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>const int64_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; ResizableBuffer &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/buffer.h" line="481" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__buffer-allocation-functions_1gaa80acc74f413afe7f8ed46cde85a5a80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Status</type>
        <definition>Status arrow::AllocateResizableBuffer</definition>
        <argsstring>(const int64_t size, std::shared_ptr&lt; ResizableBuffer &gt; *out)</argsstring>
        <name>AllocateResizableBuffer</name>
        <param>
          <type>const int64_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; ResizableBuffer &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/buffer.h" line="486" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__buffer-allocation-functions_1ga2fdac7fee8638d46c79b8136aa38c956" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Status</type>
        <definition>Status arrow::AllocateResizableBuffer</definition>
        <argsstring>(MemoryPool *pool, const int64_t size, std::unique_ptr&lt; ResizableBuffer &gt; *out)</argsstring>
        <name>AllocateResizableBuffer</name>
        <param>
          <type>MemoryPool *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>const int64_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; ResizableBuffer &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/buffer.h" line="490" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__buffer-allocation-functions_1ga6eb313aa6e6d83310dcc2a951875b9d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Status</type>
        <definition>Status arrow::AllocateResizableBuffer</definition>
        <argsstring>(const int64_t size, std::unique_ptr&lt; ResizableBuffer &gt; *out)</argsstring>
        <name>AllocateResizableBuffer</name>
        <param>
          <type>const int64_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; ResizableBuffer &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/buffer.h" line="495" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__buffer-allocation-functions_1ga4726342b8bd298b7bf05f741076e7527" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; std::shared_ptr&lt; Buffer &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;Buffer&gt; &gt; arrow::AllocateBitmap</definition>
        <argsstring>(int64_t length, MemoryPool *pool=NULLPTR)</argsstring>
        <name>AllocateBitmap</name>
        <param>
          <type>int64_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>MemoryPool *</type>
          <declname>pool</declname>
          <defval><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></defval>
        </param>
        <briefdescription>
<para>Allocate a bitmap buffer from a memory pool no guarantee on values is provided. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>size in bits of bitmap to allocate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pool</parametername>
</parameternamelist>
<parameterdescription>
<para>memory pool to allocate memory from </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/buffer.h" line="503" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__buffer-allocation-functions_1ga93c20471c43a7a35eaabf2506d5b533e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Status</type>
        <definition>Status arrow::AllocateBitmap</definition>
        <argsstring>(MemoryPool *pool, int64_t length, std::shared_ptr&lt; Buffer &gt; *out)</argsstring>
        <name>AllocateBitmap</name>
        <param>
          <type>MemoryPool *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; Buffer &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/buffer.h" line="507" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__buffer-allocation-functions_1ga4bdacf00a6041fa3825f419698c7c40c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; std::shared_ptr&lt; Buffer &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;Buffer&gt; &gt; arrow::AllocateEmptyBitmap</definition>
        <argsstring>(int64_t length, MemoryPool *pool=NULLPTR)</argsstring>
        <name>AllocateEmptyBitmap</name>
        <param>
          <type>int64_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>MemoryPool *</type>
          <declname>pool</declname>
          <defval><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></defval>
        </param>
        <briefdescription>
<para>Allocate a zero-initialized bitmap buffer from a memory pool. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>size in bits of bitmap to allocate </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pool</parametername>
</parameternamelist>
<parameterdescription>
<para>memory pool to allocate memory from </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/buffer.h" line="514" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__buffer-allocation-functions_1ga79907066edd38d36e95c56673aa46a3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Status</type>
        <definition>Status arrow::AllocateEmptyBitmap</definition>
        <argsstring>(MemoryPool *pool, int64_t length, std::shared_ptr&lt; Buffer &gt; *out)</argsstring>
        <name>AllocateEmptyBitmap</name>
        <param>
          <type>MemoryPool *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; Buffer &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/buffer.h" line="519" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__buffer-allocation-functions_1ga2c62ce65a76507d648998fc260e5ead1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Status</type>
        <definition>Status arrow::AllocateEmptyBitmap</definition>
        <argsstring>(int64_t length, std::shared_ptr&lt; Buffer &gt; *out)</argsstring>
        <name>AllocateEmptyBitmap</name>
        <param>
          <type>int64_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; Buffer &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/buffer.h" line="524" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__buffer-allocation-functions_1ga614382b33dc47fa784c7a4b3be2c0f59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Result&lt; std::shared_ptr&lt; Buffer &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;Buffer&gt; &gt; arrow::ConcatenateBuffers</definition>
        <argsstring>(const BufferVector &amp;buffers, MemoryPool *pool=NULLPTR)</argsstring>
        <name>ConcatenateBuffers</name>
        <param>
          <type>const BufferVector &amp;</type>
          <declname>buffers</declname>
        </param>
        <param>
          <type>MemoryPool *</type>
          <declname>pool</declname>
          <defval><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></defval>
        </param>
        <briefdescription>
<para>Concatenate multiple buffers into a single buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">buffers</parametername>
</parameternamelist>
<parameterdescription>
<para>to be concatenated </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pool</parametername>
</parameternamelist>
<parameterdescription>
<para>memory pool to allocate the new buffer from </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/buffer.h" line="531" column="1"/>
      </memberdef>
      <memberdef kind="function" id="group__buffer-allocation-functions_1ga193a7618d4456e8d4f40d305c8d683f1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>Status</type>
        <definition>Status arrow::ConcatenateBuffers</definition>
        <argsstring>(const BufferVector &amp;buffers, MemoryPool *pool, std::shared_ptr&lt; Buffer &gt; *out)</argsstring>
        <name>ConcatenateBuffers</name>
        <param>
          <type>const BufferVector &amp;</type>
          <declname>buffers</declname>
        </param>
        <param>
          <type>MemoryPool *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; Buffer &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/buffer.h" line="535" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
