<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_sparse_tensor" kind="class" language="C++" prot="public">
    <compoundname>arrow::SparseTensor</compoundname>
    <derivedcompoundref refid="classarrow_1_1_sparse_tensor_impl" prot="public" virt="non-virtual">arrow::SparseTensorImpl&lt; SparseIndexType &gt;</derivedcompoundref>
    <includes refid="sparse__tensor_8h" local="no">arrow/sparse_tensor.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classarrow_1_1_sparse_tensor_1a58e196efc866e19a8247f43788bcb230" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::SparseTensor::type_</definition>
        <argsstring></argsstring>
        <name>type_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="478" column="1" bodyfile="/arrow/cpp/src/arrow/sparse_tensor.h" bodystart="478" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_sparse_tensor_1a1597140ec1d7da1601956c16f2591e77" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Buffer&gt; arrow::SparseTensor::data_</definition>
        <argsstring></argsstring>
        <name>data_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="479" column="1" bodyfile="/arrow/cpp/src/arrow/sparse_tensor.h" bodystart="479" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_sparse_tensor_1ac0e2a6c0d406a5880b547c479bd859e6" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; int64_t &gt;</type>
        <definition>std::vector&lt;int64_t&gt; arrow::SparseTensor::shape_</definition>
        <argsstring></argsstring>
        <name>shape_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="480" column="1" bodyfile="/arrow/cpp/src/arrow/sparse_tensor.h" bodystart="480" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_sparse_tensor_1acefbca7144aed7047e0b2c15f8eef73a" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_sparse_index" kindref="compound">SparseIndex</ref> &gt;</type>
        <definition>std::shared_ptr&lt;SparseIndex&gt; arrow::SparseTensor::sparse_index_</definition>
        <argsstring></argsstring>
        <name>sparse_index_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="481" column="1" bodyfile="/arrow/cpp/src/arrow/sparse_tensor.h" bodystart="481" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_sparse_tensor_1a357ba9a894f60f742a18fb70ab78de7c" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; arrow::SparseTensor::dim_names_</definition>
        <argsstring></argsstring>
        <name>dim_names_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="484" column="1" bodyfile="/arrow/cpp/src/arrow/sparse_tensor.h" bodystart="484" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1_sparse_tensor_1a6fdd4bdda41c888420c1eaedf9fb5d1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual arrow::SparseTensor::~SparseTensor</definition>
        <argsstring>()=default</argsstring>
        <name>~SparseTensor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="412" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_sparse_tensor_1aab6562f2df4f3432091fe3ed57ce07fb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structarrow_1_1_sparse_tensor_format_1a0693b2fa5192ae86d525995fe6f64f3a" kindref="member">SparseTensorFormat::type</ref></type>
        <definition>SparseTensorFormat::type arrow::SparseTensor::format_id</definition>
        <argsstring>() const</argsstring>
        <name>format_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="414" column="1" bodyfile="/arrow/cpp/src/arrow/sparse_tensor.h" bodystart="414" bodyend="414"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_sparse_tensor_1a09025b42adfa15ff33aad026ae8f7dfb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::SparseTensor::type</definition>
        <argsstring>() const</argsstring>
        <name>type</name>
        <briefdescription>
<para>Return a value type of the sparse tensor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="417" column="1" bodyfile="/arrow/cpp/src/arrow/sparse_tensor.h" bodystart="417" bodyend="417"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_sparse_tensor_1a09c5fe678e12a8f9ac60a672e0cc686b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Buffer&gt; arrow::SparseTensor::data</definition>
        <argsstring>() const</argsstring>
        <name>data</name>
        <briefdescription>
<para>Return a buffer that contains the value vector of the sparse tensor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="420" column="1" bodyfile="/arrow/cpp/src/arrow/sparse_tensor.h" bodystart="420" bodyend="420"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_sparse_tensor_1a1a1fce4423a761cb71e76cdf4c22fe4b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const uint8_t *</type>
        <definition>const uint8_t* arrow::SparseTensor::raw_data</definition>
        <argsstring>() const</argsstring>
        <name>raw_data</name>
        <briefdescription>
<para>Return an immutable raw data pointer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="423" column="1" bodyfile="/arrow/cpp/src/arrow/sparse_tensor.h" bodystart="423" bodyend="423"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_sparse_tensor_1a3bfaf3952ca78265b1b65f3adf9bad92" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t *</type>
        <definition>uint8_t* arrow::SparseTensor::raw_mutable_data</definition>
        <argsstring>() const</argsstring>
        <name>raw_mutable_data</name>
        <briefdescription>
<para>Return a mutable raw data pointer. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="426" column="1" bodyfile="/arrow/cpp/src/arrow/sparse_tensor.h" bodystart="426" bodyend="426"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_sparse_tensor_1a326ccf3414aac22d0fd6a0b0b7aeb999" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; int64_t &gt; &amp;</type>
        <definition>const std::vector&lt;int64_t&gt;&amp; arrow::SparseTensor::shape</definition>
        <argsstring>() const</argsstring>
        <name>shape</name>
        <briefdescription>
<para>Return a shape vector of the sparse tensor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="429" column="1" bodyfile="/arrow/cpp/src/arrow/sparse_tensor.h" bodystart="429" bodyend="429"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_sparse_tensor_1a06ea9b9c3ec29a62880433a6f52bf19b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_sparse_index" kindref="compound">SparseIndex</ref> &gt; &amp;</type>
        <definition>const std::shared_ptr&lt;SparseIndex&gt;&amp; arrow::SparseTensor::sparse_index</definition>
        <argsstring>() const</argsstring>
        <name>sparse_index</name>
        <briefdescription>
<para>Return a sparse index of the sparse tensor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="432" column="1" bodyfile="/arrow/cpp/src/arrow/sparse_tensor.h" bodystart="432" bodyend="432"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_sparse_tensor_1a517daac896ab6b6565016d3a74124d22" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int arrow::SparseTensor::ndim</definition>
        <argsstring>() const</argsstring>
        <name>ndim</name>
        <briefdescription>
<para>Return a number of dimensions of the sparse tensor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="435" column="1" bodyfile="/arrow/cpp/src/arrow/sparse_tensor.h" bodystart="435" bodyend="435"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_sparse_tensor_1ace353930e273b6df117757d77cf00bd9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; std::string &gt; &amp;</type>
        <definition>const std::vector&lt;std::string&gt;&amp; arrow::SparseTensor::dim_names</definition>
        <argsstring>() const</argsstring>
        <name>dim_names</name>
        <briefdescription>
<para>Return a vector of dimension names. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="438" column="1" bodyfile="/arrow/cpp/src/arrow/sparse_tensor.h" bodystart="438" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_sparse_tensor_1a3643b42e620b15e048ad50c339f95ee6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; arrow::SparseTensor::dim_name</definition>
        <argsstring>(int i) const</argsstring>
        <name>dim_name</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Return the name of the i-th dimension. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="441" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_sparse_tensor_1a94ae1eb4239eddb4100c2358affa8440" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t arrow::SparseTensor::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
<para>Total number of value cells in the sparse tensor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="444" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_sparse_tensor_1ad36e1e26afb5c6c091ef0a877f1b70b4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::SparseTensor::is_mutable</definition>
        <argsstring>() const</argsstring>
        <name>is_mutable</name>
        <briefdescription>
<para>Return true if the underlying data buffer is mutable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="447" column="1" bodyfile="/arrow/cpp/src/arrow/sparse_tensor.h" bodystart="447" bodyend="447"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_sparse_tensor_1a3728b0fe87415b007515b5747d57cdd1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t arrow::SparseTensor::non_zero_length</definition>
        <argsstring>() const</argsstring>
        <name>non_zero_length</name>
        <briefdescription>
<para>Total number of non-zero cells in the sparse tensor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="450" column="1" bodyfile="/arrow/cpp/src/arrow/sparse_tensor.h" bodystart="450" bodyend="452"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_sparse_tensor_1adaf0d6dc9e20bb1024e736c7155df725" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::SparseTensor::Equals</definition>
        <argsstring>(const SparseTensor &amp;other, const EqualOptions &amp;=EqualOptions::Defaults()) const</argsstring>
        <name>Equals</name>
        <param>
          <type>const <ref refid="classarrow_1_1_sparse_tensor" kindref="compound">SparseTensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>const <ref refid="classarrow_1_1_equal_options" kindref="compound">EqualOptions</ref> &amp;</type>
          <defval><ref refid="classarrow_1_1_equal_options_1aceb7c9984ead6d5a79ba4a725193d452" kindref="member">EqualOptions::Defaults</ref>()</defval>
        </param>
        <briefdescription>
<para>Return whether sparse tensors are equal. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="455" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_sparse_tensor_1a65d724ff1245e12e220069feb3dd5928" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::SparseTensor::ToTensor</definition>
        <argsstring>(std::shared_ptr&lt; Tensor &gt; *out) const</argsstring>
        <name>ToTensor</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_tensor" kindref="compound">Tensor</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Return dense representation of sparse tensor as tensor. </para>        </briefdescription>
        <detaileddescription>
<para>The returned <ref refid="classarrow_1_1_tensor" kindref="compound">Tensor</ref> has row-major order (C-like). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="461" column="1" bodyfile="/arrow/cpp/src/arrow/sparse_tensor.h" bodystart="461" bodyend="463"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_sparse_tensor_1a8bac558f64a79b4c58f3d0d82de2c917" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::SparseTensor::ToTensor</definition>
        <argsstring>(MemoryPool *pool, std::shared_ptr&lt; Tensor &gt; *out) const</argsstring>
        <name>ToTensor</name>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_tensor" kindref="compound">Tensor</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Return dense representation of sparse tensor as tensor using specified memory pool. </para>        </briefdescription>
        <detaileddescription>
<para>The returned <ref refid="classarrow_1_1_tensor" kindref="compound">Tensor</ref> has row-major order (C-like). </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="469" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classarrow_1_1_sparse_tensor_1a461dcef0ec4d68eebf92741b2879febb" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::SparseTensor::SparseTensor</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;type, const std::shared_ptr&lt; Buffer &gt; &amp;data, const std::vector&lt; int64_t &gt; &amp;shape, const std::shared_ptr&lt; SparseIndex &gt; &amp;sparse_index, const std::vector&lt; std::string &gt; &amp;dim_names)</argsstring>
        <name>SparseTensor</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_sparse_index" kindref="compound">SparseIndex</ref> &gt; &amp;</type>
          <declname>sparse_index</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dim_names</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="473" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>EXPERIMENTAL: The base class of sparse tensor container. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4261">
        <label>arrow::SparseTensorImpl&lt; SparseIndexType &gt;</label>
        <link refid="classarrow_1_1_sparse_tensor_impl"/>
        <childnode refid="4260" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4260">
        <label>arrow::SparseTensor</label>
        <link refid="classarrow_1_1_sparse_tensor"/>
      </node>
    </inheritancegraph>
    <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="410" column="1" bodyfile="/arrow/cpp/src/arrow/sparse_tensor.h" bodystart="410" bodyend="485"/>
    <listofallmembers>
      <member refid="classarrow_1_1_sparse_tensor_1a09c5fe678e12a8f9ac60a672e0cc686b" prot="public" virt="non-virtual"><scope>arrow::SparseTensor</scope><name>data</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1a1597140ec1d7da1601956c16f2591e77" prot="protected" virt="non-virtual"><scope>arrow::SparseTensor</scope><name>data_</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1a3643b42e620b15e048ad50c339f95ee6" prot="public" virt="non-virtual"><scope>arrow::SparseTensor</scope><name>dim_name</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1ace353930e273b6df117757d77cf00bd9" prot="public" virt="non-virtual"><scope>arrow::SparseTensor</scope><name>dim_names</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1a357ba9a894f60f742a18fb70ab78de7c" prot="protected" virt="non-virtual"><scope>arrow::SparseTensor</scope><name>dim_names_</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1adaf0d6dc9e20bb1024e736c7155df725" prot="public" virt="non-virtual"><scope>arrow::SparseTensor</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1aab6562f2df4f3432091fe3ed57ce07fb" prot="public" virt="non-virtual"><scope>arrow::SparseTensor</scope><name>format_id</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1ad36e1e26afb5c6c091ef0a877f1b70b4" prot="public" virt="non-virtual"><scope>arrow::SparseTensor</scope><name>is_mutable</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1a517daac896ab6b6565016d3a74124d22" prot="public" virt="non-virtual"><scope>arrow::SparseTensor</scope><name>ndim</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1a3728b0fe87415b007515b5747d57cdd1" prot="public" virt="non-virtual"><scope>arrow::SparseTensor</scope><name>non_zero_length</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1a1a1fce4423a761cb71e76cdf4c22fe4b" prot="public" virt="non-virtual"><scope>arrow::SparseTensor</scope><name>raw_data</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1a3bfaf3952ca78265b1b65f3adf9bad92" prot="public" virt="non-virtual"><scope>arrow::SparseTensor</scope><name>raw_mutable_data</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1a326ccf3414aac22d0fd6a0b0b7aeb999" prot="public" virt="non-virtual"><scope>arrow::SparseTensor</scope><name>shape</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1ac0e2a6c0d406a5880b547c479bd859e6" prot="protected" virt="non-virtual"><scope>arrow::SparseTensor</scope><name>shape_</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1a94ae1eb4239eddb4100c2358affa8440" prot="public" virt="non-virtual"><scope>arrow::SparseTensor</scope><name>size</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1a06ea9b9c3ec29a62880433a6f52bf19b" prot="public" virt="non-virtual"><scope>arrow::SparseTensor</scope><name>sparse_index</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1acefbca7144aed7047e0b2c15f8eef73a" prot="protected" virt="non-virtual"><scope>arrow::SparseTensor</scope><name>sparse_index_</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1a461dcef0ec4d68eebf92741b2879febb" prot="protected" virt="non-virtual"><scope>arrow::SparseTensor</scope><name>SparseTensor</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1a65d724ff1245e12e220069feb3dd5928" prot="public" virt="non-virtual"><scope>arrow::SparseTensor</scope><name>ToTensor</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1a8bac558f64a79b4c58f3d0d82de2c917" prot="public" virt="non-virtual"><scope>arrow::SparseTensor</scope><name>ToTensor</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1a09025b42adfa15ff33aad026ae8f7dfb" prot="public" virt="non-virtual"><scope>arrow::SparseTensor</scope><name>type</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1a58e196efc866e19a8247f43788bcb230" prot="protected" virt="non-virtual"><scope>arrow::SparseTensor</scope><name>type_</name></member>
      <member refid="classarrow_1_1_sparse_tensor_1a6fdd4bdda41c888420c1eaedf9fb5d1d" prot="public" virt="virtual"><scope>arrow::SparseTensor</scope><name>~SparseTensor</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
