<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="events_8h" kind="file" language="C++">
    <compoundname>events.h</compoundname>
    <includes local="no">functional</includes>
    <includes local="no">memory</includes>
    <includes local="no">unordered_map</includes>
    <includedby refid="store_8h" local="yes">/arrow/cpp/src/plasma/store.h</includedby>
    <incdepgraph>
      <node id="20045">
        <label>/arrow/cpp/src/plasma/events.h</label>
        <link refid="events_8h"/>
        <childnode refid="20046" relation="include">
        </childnode>
        <childnode refid="20047" relation="include">
        </childnode>
        <childnode refid="20048" relation="include">
        </childnode>
      </node>
      <node id="20046">
        <label>functional</label>
      </node>
      <node id="20048">
        <label>unordered_map</label>
      </node>
      <node id="20047">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="20049">
        <label>/arrow/cpp/src/plasma/events.h</label>
        <link refid="events_8h"/>
        <childnode refid="20050" relation="include">
        </childnode>
      </node>
      <node id="20050">
        <label>/arrow/cpp/src/plasma/store.h</label>
        <link refid="store_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="classplasma_1_1_event_loop" prot="public">plasma::EventLoop</innerclass>
    <innernamespace refid="namespaceplasma">plasma</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structae_event_loop" kindref="compound">aeEventLoop</ref>;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespaceplasma" kindref="compound">plasma</ref><sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">//<sp/>The<sp/>constants<sp/>below<sp/>are<sp/>defined<sp/>using<sp/>hardcoded<sp/>values<sp/>taken<sp/>from<sp/>ae.h<sp/>so</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="comment">//<sp/>that<sp/>ae.h<sp/>does<sp/>not<sp/>need<sp/>to<sp/>be<sp/>included<sp/>in<sp/>this<sp/>file.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="32" refid="namespaceplasma_1aa25f7f9aa7f8808dd0d42553b16cf31b" refkind="member"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaceplasma_1aa25f7f9aa7f8808dd0d42553b16cf31b" kindref="member">kEventLoopTimerDone</ref><sp/>=<sp/>-1;<sp/><sp/></highlight><highlight class="comment">//<sp/>AE_NOMORE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="35" refid="namespaceplasma_1aa4e30567f7b90b28008fd1fe6b2c3e14" refkind="member"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaceplasma_1aa4e30567f7b90b28008fd1fe6b2c3e14" kindref="member">kEventLoopOk</ref><sp/>=<sp/>0;<sp/><sp/></highlight><highlight class="comment">//<sp/>AE_OK</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="38" refid="namespaceplasma_1ae84cd1d6c21a08a2bedf3d1f308a371d" refkind="member"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaceplasma_1ae84cd1d6c21a08a2bedf3d1f308a371d" kindref="member">kEventLoopRead</ref><sp/>=<sp/>1;<sp/><sp/></highlight><highlight class="comment">//<sp/>AE_READABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="41" refid="namespaceplasma_1aa384c4e46a42a377972561a3cbafb472" refkind="member"><highlight class="normal">constexpr<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="namespaceplasma_1aa384c4e46a42a377972561a3cbafb472" kindref="member">kEventLoopWrite</ref><sp/>=<sp/>2;<sp/><sp/></highlight><highlight class="comment">//<sp/>AE_WRITABLE</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43" refid="namespaceplasma_1a62f124d2399362309e83ba8344cd155b" refkind="member"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="namespaceplasma_1a62f124d2399362309e83ba8344cd155b" kindref="member">TimerID</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>NOLINT</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45" refid="classplasma_1_1_event_loop" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classplasma_1_1_event_loop" kindref="compound">EventLoop</ref><sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Signature<sp/>of<sp/>the<sp/>handler<sp/>that<sp/>will<sp/>be<sp/>called<sp/>when<sp/>there<sp/>is<sp/>a<sp/>new<sp/>event</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>the<sp/>file<sp/>descriptor<sp/>that<sp/>this<sp/>handler<sp/>has<sp/>been<sp/>registered<sp/>for.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>arguments<sp/>are<sp/>the<sp/>event<sp/>flags<sp/>(read<sp/>or<sp/>write).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="classplasma_1_1_event_loop_1afb1f64d30a1d3bb9de511f8126583aae" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classplasma_1_1_event_loop_1afb1f64d30a1d3bb9de511f8126583aae" kindref="member">FileCallback</ref><sp/>=<sp/>std::function&lt;void(int)&gt;;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>handler<sp/>will<sp/>be<sp/>called<sp/>when<sp/>a<sp/>timer<sp/>times<sp/>out.<sp/>The<sp/>timer<sp/>id<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>passed<sp/>as<sp/>an<sp/>argument.<sp/>The<sp/>return<sp/>is<sp/>the<sp/>number<sp/>of<sp/>milliseconds<sp/>the<sp/>timer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>shall<sp/>be<sp/>reset<sp/>to<sp/>or<sp/>kEventLoopTimerDone<sp/>if<sp/>the<sp/>timer<sp/>shall<sp/>not<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>triggered<sp/>again.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57" refid="classplasma_1_1_event_loop_1a11ef4f6b6c35526f9813190d86ad3093" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classplasma_1_1_event_loop_1a11ef4f6b6c35526f9813190d86ad3093" kindref="member">TimerCallback</ref><sp/>=<sp/>std::function&lt;int(int64_t)&gt;;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><ref refid="classplasma_1_1_event_loop_1a7e9f4a50545e3cc50e380bf75114b45b" kindref="member">EventLoop</ref>();</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><ref refid="classplasma_1_1_event_loop_1acef49c97b4766e6b0c7402a148f1f993" kindref="member">~EventLoop</ref>();</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classplasma_1_1_event_loop_1ac7c31f1048cae6bdcee2c9fdf7ca66a0" kindref="member">AddFileEvent</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>events,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classplasma_1_1_event_loop_1afb1f64d30a1d3bb9de511f8126583aae" kindref="member">FileCallback</ref>&amp;<sp/>callback);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classplasma_1_1_event_loop_1a217ecc428989208ef94a226be196cc7f" kindref="member">RemoveFileEvent</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/>int64_t<sp/><ref refid="classplasma_1_1_event_loop_1aedbad19a51209f3faa68e00cbde087da" kindref="member">AddTimer</ref>(int64_t<sp/>timeout,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classplasma_1_1_event_loop_1a11ef4f6b6c35526f9813190d86ad3093" kindref="member">TimerCallback</ref>&amp;<sp/>callback);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classplasma_1_1_event_loop_1afbf8709d3d559e14494b950fff59d6f3" kindref="member">RemoveTimer</ref>(int64_t<sp/>timer_id);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classplasma_1_1_event_loop_1a0165bb6fa7ca0753e7f2408f6d586c12" kindref="member">Start</ref>();</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classplasma_1_1_event_loop_1a3136943dd0f8dc3680b7801267d2c2e6" kindref="member">Stop</ref>();</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="classplasma_1_1_event_loop_1a3ea81af287795772520bb93bdd5704f9" kindref="member">Shutdown</ref>();</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>FileEventCallback(<ref refid="structae_event_loop" kindref="compound">aeEventLoop</ref>*<sp/>loop,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>fd,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>context,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>events);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>TimerEventCallback(<ref refid="structae_event_loop" kindref="compound">aeEventLoop</ref>*<sp/>loop,<sp/>TimerID<sp/>timer_id,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>context);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><ref refid="structae_event_loop" kindref="compound">aeEventLoop</ref>*<sp/>loop_;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;int,<sp/>std::unique_ptr&lt;FileCallback&gt;&gt;<sp/>file_callbacks_;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/>std::unordered_map&lt;int64_t,<sp/>std::unique_ptr&lt;TimerCallback&gt;&gt;<sp/>timer_callbacks_;</highlight></codeline>
<codeline lineno="106"><highlight class="normal">};</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>plasma</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/arrow/cpp/src/plasma/events.h"/>
  </compounddef>
</doxygen>
