<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1ipc_1_1_message_decoder" kind="class" language="C++" prot="public">
    <compoundname>arrow::ipc::MessageDecoder</compoundname>
    <includes refid="message_8h" local="no">arrow/ipc/message.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classarrow_1_1ipc_1_1_message_decoder_1a93f7666b3e1fed436c447a42f13ee568" prot="public" static="no">
        <name>State</name>
        <enumvalue id="classarrow_1_1ipc_1_1_message_decoder_1a93f7666b3e1fed436c447a42f13ee568a6dccfabf35e614745d646f3136f7f1ff" prot="public">
          <name>INITIAL</name>
          <briefdescription>
<para>The initial state. </para>          </briefdescription>
          <detaileddescription>
<para>It requires one of the followings as the next data: <verbatim> * int32_t continuation token
 * int32_t end-of-stream mark (== 0)
 * int32_t metadata length (backward compatibility for
   reading old IPC messages produced prior to version 0.15.0  </verbatim> </para>          </detaileddescription>
        </enumvalue>
        <enumvalue id="classarrow_1_1ipc_1_1_message_decoder_1a93f7666b3e1fed436c447a42f13ee568aa3b1e341626d50ca9a798fd1d4c923f0" prot="public">
          <name>METADATA_LENGTH</name>
          <briefdescription>
<para>It requires int32_t metadata length. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classarrow_1_1ipc_1_1_message_decoder_1a93f7666b3e1fed436c447a42f13ee568a1780f10f11d6461b1b5565bbb971d268" prot="public">
          <name>METADATA</name>
          <briefdescription>
<para>It requires metadata. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classarrow_1_1ipc_1_1_message_decoder_1a93f7666b3e1fed436c447a42f13ee568a3eff69ea1da7b0b4e2472499baee6932" prot="public">
          <name>BODY</name>
          <briefdescription>
<para>It requires message body. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classarrow_1_1ipc_1_1_message_decoder_1a93f7666b3e1fed436c447a42f13ee568a4bec84c31939999ba2b77e27d8f17d1c" prot="public">
          <name>EOS</name>
          <briefdescription>
<para>The end-of-stream state. No more data is processed. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>State for reading a message. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/message.h" line="281" column="1" bodyfile="/arrow/cpp/src/arrow/ipc/message.h" bodystart="281" bodyend="301"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classarrow_1_1ipc_1_1_message_decoder_1abde1a2a62b33b6d7ad6b7e36d388a032" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; MessageDecoderImpl &gt;</type>
        <definition>std::unique_ptr&lt;MessageDecoderImpl&gt; arrow::ipc::MessageDecoder::impl_</definition>
        <argsstring></argsstring>
        <name>impl_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/message.h" line="460" column="1" bodyfile="/arrow/cpp/src/arrow/ipc/message.h" bodystart="459" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_message_decoder_1aeedda4ddc6e13c187ca9ec3ed96c8b53" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::ipc::MessageDecoder::MessageDecoder</definition>
        <argsstring>(std::shared_ptr&lt; MessageDecoderListener &gt; listener, MemoryPool *pool=default_memory_pool())</argsstring>
        <name>MessageDecoder</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1ipc_1_1_message_decoder_listener" kindref="compound">MessageDecoderListener</ref> &gt;</type>
          <declname>listener</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
          <defval><ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">default_memory_pool</ref>()</defval>
        </param>
        <briefdescription>
<para>Construct a message decoder. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">listener</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classarrow_1_1ipc_1_1_message_decoder_listener" kindref="compound">MessageDecoderListener</ref> that responds events from the decoder </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pool</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional <ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> to copy metadata on the CPU, if required </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/message.h" line="309" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_message_decoder_1a929a27dc831c730df0042030c0636f39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::ipc::MessageDecoder::MessageDecoder</definition>
        <argsstring>(std::shared_ptr&lt; MessageDecoderListener &gt; listener, State initial_state, int64_t initial_next_required_size, MemoryPool *pool=default_memory_pool())</argsstring>
        <name>MessageDecoder</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1ipc_1_1_message_decoder_listener" kindref="compound">MessageDecoderListener</ref> &gt;</type>
          <declname>listener</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1ipc_1_1_message_decoder_1a93f7666b3e1fed436c447a42f13ee568" kindref="member">State</ref></type>
          <declname>initial_state</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>initial_next_required_size</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
          <defval><ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">default_memory_pool</ref>()</defval>
        </param>
        <briefdescription>
<para>Construct a message decoder with the specified state. </para>        </briefdescription>
        <detaileddescription>
<para>This is a construct for advanced users that know how to decode <ref refid="classarrow_1_1ipc_1_1_message" kindref="compound">Message</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">listener</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classarrow_1_1ipc_1_1_message_decoder_listener" kindref="compound">MessageDecoderListener</ref> that responds events from the decoder </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">initial_state</parametername>
</parameternamelist>
<parameterdescription>
<para>an initial state of the decode </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">initial_next_required_size</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of bytes needed to run the next action </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">pool</parametername>
</parameternamelist>
<parameterdescription>
<para>an optional <ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> to copy metadata on the CPU, if required </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/message.h" line="324" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_message_decoder_1ab7f3d5db134df7061815f5fbcdba9237" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual arrow::ipc::MessageDecoder::~MessageDecoder</definition>
        <argsstring>()</argsstring>
        <name>~MessageDecoder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/message.h" line="328" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_message_decoder_1a61b2cf2b1e1bdd8a95046cdf16d2a9a0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::ipc::MessageDecoder::Consume</definition>
        <argsstring>(const uint8_t *data, int64_t size)</argsstring>
        <name>Consume</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Feed data to the decoder as a raw data. </para>        </briefdescription>
        <detaileddescription>
<para>If the decoder can decode one or more messages by the data, the decoder calls listener-&gt;OnMessageDecoded() with a decoded message multiple times.</para><para>If the state of the decoder is changed, corresponding callbacks on listener is called:</para><para><itemizedlist>
<listitem><para>MessageDecoder::State::INITIAL: listener-&gt;OnInitial()</para></listitem><listitem><para>MessageDecoder::State::METADATA_LENGTH: listener-&gt;OnMetadataLength()</para></listitem><listitem><para>MessageDecoder::State::METADATA: listener-&gt;OnMetadata()</para></listitem><listitem><para>MessageDecoder::State::BODY: listener-&gt;OnBody()</para></listitem><listitem><para>MessageDecoder::State::EOS: listener-&gt;OnEOS()</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>a raw data to be processed. This data isn&apos;t copied. The passed memory must be kept alive through message processing. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>raw data size. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/message.h" line="350" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_message_decoder_1a6578f2e5efaed1d90b189b8c5fe8524d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::ipc::MessageDecoder::Consume</definition>
        <argsstring>(std::shared_ptr&lt; Buffer &gt; buffer)</argsstring>
        <name>Consume</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Feed data to the decoder as a <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>If the decoder can decode one or more messages by the <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref>, the decoder calls listener-&gt;OnMessageDecoded() with a decoded message multiple times.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> to be processed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/message.h" line="360" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_message_decoder_1a1be95820fc701465ed38fc696602ca0b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t arrow::ipc::MessageDecoder::next_required_size</definition>
        <argsstring>() const</argsstring>
        <name>next_required_size</name>
        <briefdescription>
<para>Return the number of bytes needed to advance the state of the decoder. </para>        </briefdescription>
        <detaileddescription>
<para>This method is provided for users who want to optimize performance. Normal users don&apos;t need to use this method.</para><para>Here is an example usage for normal users:</para><para><programlisting><codeline><highlight class="normal">decoder.Consume(buffer1);</highlight></codeline>
<codeline><highlight class="normal">decoder.Consume(buffer2);</highlight></codeline>
<codeline><highlight class="normal">decoder.Consume(buffer3);</highlight></codeline>
</programlisting></para><para>Decoder has internal buffer. If consumed data isn&apos;t enough to advance the state of the decoder, consumed data is buffered to the internal buffer. It causes performance overhead.</para><para>If you pass <ref refid="classarrow_1_1ipc_1_1_message_decoder_1a1be95820fc701465ed38fc696602ca0b" kindref="member">next_required_size()</ref> size data to each <ref refid="classarrow_1_1ipc_1_1_message_decoder_1a61b2cf2b1e1bdd8a95046cdf16d2a9a0" kindref="member">Consume()</ref> call, the decoder doesn&apos;t use its internal buffer. It improves performance.</para><para>Here is an example usage to avoid using internal buffer:</para><para><programlisting><codeline><highlight class="normal">buffer1<sp/>=<sp/>get_data(decoder.next_required_size());</highlight></codeline>
<codeline><highlight class="normal">decoder.Consume(buffer1);</highlight></codeline>
<codeline><highlight class="normal">buffer2<sp/>=<sp/>get_data(decoder.next_required_size());</highlight></codeline>
<codeline><highlight class="normal">decoder.Consume(buffer2);</highlight></codeline>
</programlisting></para><para>Users can use this method to avoid creating small chunks. <ref refid="classarrow_1_1ipc_1_1_message" kindref="compound">Message</ref> body must be contiguous data. If users pass small chunks to the decoder, the decoder needs concatenate small chunks internally. It causes performance overhead.</para><para>Here is an example usage to reduce small chunks:</para><para><programlisting><codeline><highlight class="normal">buffer<sp/>=<sp/><ref refid="group__buffer-allocation-functions_1gaa44d72e6284de08b2171a710a01de2d6" kindref="member">AllocateResizableBuffer</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((small_chunk<sp/>=<sp/>get_data(&amp;small_chunk_size)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>current_buffer_size<sp/>=<sp/>buffer-&gt;size();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>buffer-&gt;Resize(current_buffer_size<sp/>+<sp/>small_chunk_size);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>memcpy(buffer-&gt;mutable_data()<sp/>+<sp/>current_buffer_size,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>small_chunk,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>small_chunk_size);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer-&gt;size()<sp/>&lt;<sp/>decoder.next_requied_size())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;arrow::Buffer&gt;<sp/>chunk(buffer.release());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>decoder.Consume(chunk);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>buffer<sp/>=<sp/><ref refid="group__buffer-allocation-functions_1gaa44d72e6284de08b2171a710a01de2d6" kindref="member">AllocateResizableBuffer</ref>();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer-&gt;size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;arrow::Buffer&gt;<sp/>chunk(buffer.release());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>decoder.Consume(chunk);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><simplesect kind="return"><para>the number of bytes needed to advance the state of the decoder </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/message.h" line="423" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_message_decoder_1a58613aace0ec67f21a4d9d8b0c0d5731" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1ipc_1_1_message_decoder_1a93f7666b3e1fed436c447a42f13ee568" kindref="member">State</ref></type>
        <definition>State arrow::ipc::MessageDecoder::state</definition>
        <argsstring>() const</argsstring>
        <name>state</name>
        <briefdescription>
<para>Return the current state of the decoder. </para>        </briefdescription>
        <detaileddescription>
<para>This method is provided for users who want to optimize performance. Normal users don&apos;t need to use this method.</para><para>Decoder doesn&apos;t need <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> to process data on the MessageDecoder::State::INITIAL state and the MessageDecoder::State::METADATA_LENGTH. Creating <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> has performance overhead. Advanced users can avoid creating <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> by checking the current state of the decoder:</para><para><programlisting><codeline><highlight class="keywordflow">switch</highlight><highlight class="normal"><sp/>(decoder.state())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MessageDecoder::State::INITIAL:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>MessageDecoder::State::METADATA_LENGTH:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>[</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int32_t)];</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>data_size<sp/>=<sp/>input-&gt;Read(decoder.next_required_size(),<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>decoder.Consume(<ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>,<sp/>data_size);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>buffer<sp/>=<sp/>input-&gt;Read(decoder.next_required_size());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>decoder.Consume(buffer);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><simplesect kind="return"><para>the current state </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/message.h" line="456" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_message_decoder_1ae3aafc42940f4ad17857ba3ed4e1087d" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::ipc::MessageDecoder::ARROW_DISALLOW_COPY_AND_ASSIGN</definition>
        <argsstring>(MessageDecoder)</argsstring>
        <name>ARROW_DISALLOW_COPY_AND_ASSIGN</name>
        <param>
          <type><ref refid="classarrow_1_1ipc_1_1_message_decoder" kindref="compound">MessageDecoder</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/message.h" line="462" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Push style message decoder that receives data from user. </para>    </briefdescription>
    <detaileddescription>
<para>This API is EXPERIMENTAL.</para><para><simplesect kind="since"><para>0.17.0 </para></simplesect>
</para>    </detaileddescription>
    <location file="/arrow/cpp/src/arrow/ipc/message.h" line="278" column="1" bodyfile="/arrow/cpp/src/arrow/ipc/message.h" bodystart="278" bodyend="463"/>
    <listofallmembers>
      <member refid="classarrow_1_1ipc_1_1_message_decoder_1ae3aafc42940f4ad17857ba3ed4e1087d" prot="private" virt="non-virtual"><scope>arrow::ipc::MessageDecoder</scope><name>ARROW_DISALLOW_COPY_AND_ASSIGN</name></member>
      <member refid="classarrow_1_1ipc_1_1_message_decoder_1a93f7666b3e1fed436c447a42f13ee568a3eff69ea1da7b0b4e2472499baee6932" prot="public" virt="non-virtual"><scope>arrow::ipc::MessageDecoder</scope><name>BODY</name></member>
      <member refid="classarrow_1_1ipc_1_1_message_decoder_1a61b2cf2b1e1bdd8a95046cdf16d2a9a0" prot="public" virt="non-virtual"><scope>arrow::ipc::MessageDecoder</scope><name>Consume</name></member>
      <member refid="classarrow_1_1ipc_1_1_message_decoder_1a6578f2e5efaed1d90b189b8c5fe8524d" prot="public" virt="non-virtual"><scope>arrow::ipc::MessageDecoder</scope><name>Consume</name></member>
      <member refid="classarrow_1_1ipc_1_1_message_decoder_1a93f7666b3e1fed436c447a42f13ee568a4bec84c31939999ba2b77e27d8f17d1c" prot="public" virt="non-virtual"><scope>arrow::ipc::MessageDecoder</scope><name>EOS</name></member>
      <member refid="classarrow_1_1ipc_1_1_message_decoder_1abde1a2a62b33b6d7ad6b7e36d388a032" prot="private" virt="non-virtual"><scope>arrow::ipc::MessageDecoder</scope><name>impl_</name></member>
      <member refid="classarrow_1_1ipc_1_1_message_decoder_1a93f7666b3e1fed436c447a42f13ee568a6dccfabf35e614745d646f3136f7f1ff" prot="public" virt="non-virtual"><scope>arrow::ipc::MessageDecoder</scope><name>INITIAL</name></member>
      <member refid="classarrow_1_1ipc_1_1_message_decoder_1aeedda4ddc6e13c187ca9ec3ed96c8b53" prot="public" virt="non-virtual"><scope>arrow::ipc::MessageDecoder</scope><name>MessageDecoder</name></member>
      <member refid="classarrow_1_1ipc_1_1_message_decoder_1a929a27dc831c730df0042030c0636f39" prot="public" virt="non-virtual"><scope>arrow::ipc::MessageDecoder</scope><name>MessageDecoder</name></member>
      <member refid="classarrow_1_1ipc_1_1_message_decoder_1a93f7666b3e1fed436c447a42f13ee568a1780f10f11d6461b1b5565bbb971d268" prot="public" virt="non-virtual"><scope>arrow::ipc::MessageDecoder</scope><name>METADATA</name></member>
      <member refid="classarrow_1_1ipc_1_1_message_decoder_1a93f7666b3e1fed436c447a42f13ee568aa3b1e341626d50ca9a798fd1d4c923f0" prot="public" virt="non-virtual"><scope>arrow::ipc::MessageDecoder</scope><name>METADATA_LENGTH</name></member>
      <member refid="classarrow_1_1ipc_1_1_message_decoder_1a1be95820fc701465ed38fc696602ca0b" prot="public" virt="non-virtual"><scope>arrow::ipc::MessageDecoder</scope><name>next_required_size</name></member>
      <member refid="classarrow_1_1ipc_1_1_message_decoder_1a93f7666b3e1fed436c447a42f13ee568" prot="public" virt="non-virtual"><scope>arrow::ipc::MessageDecoder</scope><name>State</name></member>
      <member refid="classarrow_1_1ipc_1_1_message_decoder_1a58613aace0ec67f21a4d9d8b0c0d5731" prot="public" virt="non-virtual"><scope>arrow::ipc::MessageDecoder</scope><name>state</name></member>
      <member refid="classarrow_1_1ipc_1_1_message_decoder_1ab7f3d5db134df7061815f5fbcdba9237" prot="public" virt="virtual"><scope>arrow::ipc::MessageDecoder</scope><name>~MessageDecoder</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
