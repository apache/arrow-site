<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_struct_array" kind="class" language="C++" prot="public">
    <compoundname>arrow::StructArray</compoundname>
    <basecompoundref refid="classarrow_1_1_array" prot="public" virt="non-virtual">arrow::Array</basecompoundref>
    <includes refid="array_8h" local="no">arrow/array.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classarrow_1_1_struct_array_1aac4588e3149c6f7558cdb538336a3cdd" prot="public" static="no">
        <type><ref refid="classarrow_1_1_struct_type" kindref="compound">StructType</ref></type>
        <definition>using arrow::StructArray::TypeClass =  StructType</definition>
        <argsstring></argsstring>
        <name>TypeClass</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1047" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="1047" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classarrow_1_1_struct_array_1a8affef690f3c1e92ff28ce8e3b1f62c5" prot="private" static="no" mutable="yes">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;Array&gt; &gt; arrow::StructArray::boxed_fields_</definition>
        <argsstring></argsstring>
        <name>boxed_fields_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1098" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="1098" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1_struct_array_1ad33ba4e6517fe682769a3daead24af61" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::StructArray::StructArray</definition>
        <argsstring>(const std::shared_ptr&lt; ArrayData &gt; &amp;data)</argsstring>
        <name>StructArray</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1049" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_struct_array_1afde4dd6247d3243035128c56b1cda2fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::StructArray::StructArray</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;type, int64_t length, const std::vector&lt; std::shared_ptr&lt; Array &gt;&gt; &amp;children, std::shared_ptr&lt; Buffer &gt; null_bitmap=NULLPTR, int64_t null_count=kUnknownNullCount, int64_t offset=0)</argsstring>
        <name>StructArray</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>length</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt;&gt; &amp;</type>
          <declname>children</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;</type>
          <declname>null_bitmap</declname>
          <defval><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></defval>
        </param>
        <param>
          <type>int64_t</type>
          <declname>null_count</declname>
          <defval><ref refid="namespacearrow_1a2bc89c993234944fd7bdbdfe95812080" kindref="member">kUnknownNullCount</ref></defval>
        </param>
        <param>
          <type>int64_t</type>
          <declname>offset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1051" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_struct_array_1ad59095a20eaeaf855bef1cba3d5a0a66" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="classarrow_1_1_struct_type" kindref="compound">StructType</ref> *</type>
        <definition>const StructType* arrow::StructArray::struct_type</definition>
        <argsstring>() const</argsstring>
        <name>struct_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1077" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_struct_array_1aa7d809e40ca52423c7eafa7e482064c6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Array&gt; arrow::StructArray::field</definition>
        <argsstring>(int pos) const</argsstring>
        <name>field</name>
        <param>
          <type>int</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1082" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_struct_array_1a3ae1f625a93bdc6592821e7e9ef3f054" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Array&gt; arrow::StructArray::GetFieldByName</definition>
        <argsstring>(const std::string &amp;name) const</argsstring>
        <name>GetFieldByName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Returns null if name not found. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1085" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_struct_array_1a3f4d5a2dbe3205772c21491160508c66" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; <ref refid="namespacearrow_1ad77c54b51dac02d857f3a26d11ed58b3" kindref="member">ArrayVector</ref> &gt;</type>
        <definition>Result&lt;ArrayVector&gt; arrow::StructArray::Flatten</definition>
        <argsstring>(MemoryPool *pool=default_memory_pool()) const</argsstring>
        <name>Flatten</name>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
          <defval><ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">default_memory_pool</ref>()</defval>
        </param>
        <briefdescription>
<para>Flatten this array as a vector of arrays, one for each field. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pool</parametername>
</parameternamelist>
<parameterdescription>
<para>The pool to allocate null bitmaps from, if necessary </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1090" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_struct_array_1a33cb8ba10aa4e3ea908c1711cbaa3c5b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::StructArray::Flatten</definition>
        <argsstring>(MemoryPool *pool, ArrayVector *out) const</argsstring>
        <name>Flatten</name>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type><ref refid="namespacearrow_1ad77c54b51dac02d857f3a26d11ed58b3" kindref="member">ArrayVector</ref> *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1093" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1_struct_array_1aa60c2cc106d51d976d3ced8d1b8233b8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_struct_array" kindref="compound">StructArray</ref> &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;StructArray&gt; &gt; arrow::StructArray::Make</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; Array &gt;&gt; &amp;children, const std::vector&lt; std::string &gt; &amp;field_names, std::shared_ptr&lt; Buffer &gt; null_bitmap=NULLPTR, int64_t null_count=kUnknownNullCount, int64_t offset=0)</argsstring>
        <name>Make</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt;&gt; &amp;</type>
          <declname>children</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>field_names</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;</type>
          <declname>null_bitmap</declname>
          <defval><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></defval>
        </param>
        <param>
          <type>int64_t</type>
          <declname>null_count</declname>
          <defval><ref refid="namespacearrow_1a2bc89c993234944fd7bdbdfe95812080" kindref="member">kUnknownNullCount</ref></defval>
        </param>
        <param>
          <type>int64_t</type>
          <declname>offset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return a <ref refid="classarrow_1_1_struct_array" kindref="compound">StructArray</ref> from child arrays and field names. </para>        </briefdescription>
        <detaileddescription>
<para>The length and data type are automatically inferred from the arguments. There should be at least one child array. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1060" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_struct_array_1a08cc2031c4a888d696c0b0fd4449b6ff" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_struct_array" kindref="compound">StructArray</ref> &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;StructArray&gt; &gt; arrow::StructArray::Make</definition>
        <argsstring>(const std::vector&lt; std::shared_ptr&lt; Array &gt;&gt; &amp;children, const std::vector&lt; std::shared_ptr&lt; Field &gt;&gt; &amp;fields, std::shared_ptr&lt; Buffer &gt; null_bitmap=NULLPTR, int64_t null_count=kUnknownNullCount, int64_t offset=0)</argsstring>
        <name>Make</name>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt;&gt; &amp;</type>
          <declname>children</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt;&gt; &amp;</type>
          <declname>fields</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;</type>
          <declname>null_bitmap</declname>
          <defval><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></defval>
        </param>
        <param>
          <type>int64_t</type>
          <declname>null_count</declname>
          <defval><ref refid="namespacearrow_1a2bc89c993234944fd7bdbdfe95812080" kindref="member">kUnknownNullCount</ref></defval>
        </param>
        <param>
          <type>int64_t</type>
          <declname>offset</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Return a <ref refid="classarrow_1_1_struct_array" kindref="compound">StructArray</ref> from child arrays and fields. </para>        </briefdescription>
        <detaileddescription>
<para>The length is automatically inferred from the arguments. There should be at least one child array. This method does not check that field types and child array types are consistent. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/array.h" line="1071" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Concrete <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> class for struct data. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4413">
        <label>arrow::Array</label>
        <link refid="classarrow_1_1_array"/>
      </node>
      <node id="4412">
        <label>arrow::StructArray</label>
        <link refid="classarrow_1_1_struct_array"/>
        <childnode refid="4413" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4415">
        <label>arrow::Array</label>
        <link refid="classarrow_1_1_array"/>
      </node>
      <node id="4414">
        <label>arrow::StructArray</label>
        <link refid="classarrow_1_1_struct_array"/>
        <childnode refid="4415" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/array.h" line="1045" column="1" bodyfile="/arrow/cpp/src/arrow/array.h" bodystart="1045" bodyend="1099"/>
    <listofallmembers>
      <member refid="classarrow_1_1_array_1a168f3ec5c96688dadeaf015692e4bef8" prot="public" virt="non-virtual"><scope>arrow::StructArray</scope><name>Accept</name></member>
      <member refid="classarrow_1_1_array_1a381e6469686eccd2545cf1dc171f6cb7" prot="public" virt="non-virtual"><scope>arrow::StructArray</scope><name>ApproxEquals</name></member>
      <member refid="classarrow_1_1_array_1a2ed35161e2e2200bf4dcadb6ff11d7fb" prot="public" virt="non-virtual"><scope>arrow::StructArray</scope><name>ApproxEquals</name></member>
      <member refid="classarrow_1_1_array_1ae44d3c2fae3a8578fe829da20c6732f8" prot="protected" virt="non-virtual"><scope>arrow::StructArray</scope><name>Array</name></member>
      <member refid="classarrow_1_1_struct_array_1a8affef690f3c1e92ff28ce8e3b1f62c5" prot="private" virt="non-virtual"><scope>arrow::StructArray</scope><name>boxed_fields_</name></member>
      <member refid="classarrow_1_1_array_1aeca84e9b3a1f1e6e3f83a61c90e376a9" prot="public" virt="non-virtual"><scope>arrow::StructArray</scope><name>data</name></member>
      <member refid="classarrow_1_1_array_1a2631dce1d5868216cba0a140e81ef14e" prot="protected" virt="non-virtual"><scope>arrow::StructArray</scope><name>data_</name></member>
      <member refid="classarrow_1_1_array_1a95ff1c7489e9d2fd5ff52fde1b8b5c46" prot="public" virt="non-virtual"><scope>arrow::StructArray</scope><name>Diff</name></member>
      <member refid="classarrow_1_1_array_1a686cf58bab513d8ecfe3a285f4562eab" prot="public" virt="non-virtual"><scope>arrow::StructArray</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_array_1a99913841c11eb73c61a25c018f57ca40" prot="public" virt="non-virtual"><scope>arrow::StructArray</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_struct_array_1aa7d809e40ca52423c7eafa7e482064c6" prot="public" virt="non-virtual"><scope>arrow::StructArray</scope><name>field</name></member>
      <member refid="classarrow_1_1_struct_array_1a3f4d5a2dbe3205772c21491160508c66" prot="public" virt="non-virtual"><scope>arrow::StructArray</scope><name>Flatten</name></member>
      <member refid="classarrow_1_1_struct_array_1a33cb8ba10aa4e3ea908c1711cbaa3c5b" prot="public" virt="non-virtual"><scope>arrow::StructArray</scope><name>Flatten</name></member>
      <member refid="classarrow_1_1_struct_array_1a3ae1f625a93bdc6592821e7e9ef3f054" prot="public" virt="non-virtual"><scope>arrow::StructArray</scope><name>GetFieldByName</name></member>
      <member refid="classarrow_1_1_array_1a18c61cd4c8c158a30f30023eabc83acb" prot="public" virt="non-virtual"><scope>arrow::StructArray</scope><name>IsNull</name></member>
      <member refid="classarrow_1_1_array_1ae554bfb313cd6b161f63fb2966dbd662" prot="public" virt="non-virtual"><scope>arrow::StructArray</scope><name>IsValid</name></member>
      <member refid="classarrow_1_1_array_1a49c7fb3f73d2d43e7338591c5a8bd8bf" prot="public" virt="non-virtual"><scope>arrow::StructArray</scope><name>length</name></member>
      <member refid="classarrow_1_1_struct_array_1aa60c2cc106d51d976d3ced8d1b8233b8" prot="public" virt="non-virtual"><scope>arrow::StructArray</scope><name>Make</name></member>
      <member refid="classarrow_1_1_struct_array_1a08cc2031c4a888d696c0b0fd4449b6ff" prot="public" virt="non-virtual"><scope>arrow::StructArray</scope><name>Make</name></member>
      <member refid="classarrow_1_1_array_1a76c4756ac85b29f9135064d68d2ef908" prot="public" virt="non-virtual"><scope>arrow::StructArray</scope><name>null_bitmap</name></member>
      <member refid="classarrow_1_1_array_1a7a8838fbc97b9b3b8ca15cb163b2027c" prot="public" virt="non-virtual"><scope>arrow::StructArray</scope><name>null_bitmap_data</name></member>
      <member refid="classarrow_1_1_array_1aed59d9e8608229ff3808983cdc908ccd" prot="protected" virt="non-virtual"><scope>arrow::StructArray</scope><name>null_bitmap_data_</name></member>
      <member refid="classarrow_1_1_array_1a0537d3b69a889b951e88be2fe9f3d96a" prot="public" virt="non-virtual"><scope>arrow::StructArray</scope><name>null_count</name></member>
      <member refid="classarrow_1_1_array_1a183e69c91c531609f42a29b593119d58" prot="public" virt="non-virtual"><scope>arrow::StructArray</scope><name>num_fields</name></member>
      <member refid="classarrow_1_1_array_1a1a0c6c1aa06cffd1dcb3813f0d24b2fd" prot="public" virt="non-virtual"><scope>arrow::StructArray</scope><name>offset</name></member>
      <member refid="classarrow_1_1_array_1ace5ac1affa59422d70a8b3f6929b70bc" prot="public" virt="non-virtual"><scope>arrow::StructArray</scope><name>RangeEquals</name></member>
      <member refid="classarrow_1_1_array_1a537467bcecb4471b18d3271f14ca9ad2" prot="public" virt="non-virtual"><scope>arrow::StructArray</scope><name>RangeEquals</name></member>
      <member refid="classarrow_1_1_array_1acf138d427e7f8a8c56cac7f9d9e64db3" prot="public" virt="non-virtual"><scope>arrow::StructArray</scope><name>RangeEquals</name></member>
      <member refid="classarrow_1_1_array_1a28f8f8d92439489bbd1727392123b0f7" prot="public" virt="non-virtual"><scope>arrow::StructArray</scope><name>RangeEquals</name></member>
      <member refid="classarrow_1_1_array_1a7053d3600bccd9cd34fcb6f5470a75c1" prot="protected" virt="non-virtual"><scope>arrow::StructArray</scope><name>SetData</name></member>
      <member refid="classarrow_1_1_array_1ae32f72c78fe10ce17f0a817e302e17d1" prot="public" virt="non-virtual"><scope>arrow::StructArray</scope><name>Slice</name></member>
      <member refid="classarrow_1_1_array_1a5cf4c3330e850670aa52dab3b21869ea" prot="public" virt="non-virtual"><scope>arrow::StructArray</scope><name>Slice</name></member>
      <member refid="classarrow_1_1_struct_array_1ad59095a20eaeaf855bef1cba3d5a0a66" prot="public" virt="non-virtual"><scope>arrow::StructArray</scope><name>struct_type</name></member>
      <member refid="classarrow_1_1_struct_array_1ad33ba4e6517fe682769a3daead24af61" prot="public" virt="non-virtual"><scope>arrow::StructArray</scope><name>StructArray</name></member>
      <member refid="classarrow_1_1_struct_array_1afde4dd6247d3243035128c56b1cda2fd" prot="public" virt="non-virtual"><scope>arrow::StructArray</scope><name>StructArray</name></member>
      <member refid="classarrow_1_1_array_1a41c7af0e40ac55f2ce11785fea3e051e" prot="public" virt="non-virtual"><scope>arrow::StructArray</scope><name>ToString</name></member>
      <member refid="classarrow_1_1_array_1a635a694fbadb0bfa731beb97df2ef7ea" prot="public" virt="non-virtual"><scope>arrow::StructArray</scope><name>type</name></member>
      <member refid="classarrow_1_1_array_1a155d9d827415438f976e3cb31e0a55f6" prot="public" virt="non-virtual"><scope>arrow::StructArray</scope><name>type_id</name></member>
      <member refid="classarrow_1_1_struct_array_1aac4588e3149c6f7558cdb538336a3cdd" prot="public" virt="non-virtual"><scope>arrow::StructArray</scope><name>TypeClass</name></member>
      <member refid="classarrow_1_1_array_1ad62bad8fde2bb8fbd5a52df3fa4bd56c" prot="public" virt="non-virtual"><scope>arrow::StructArray</scope><name>Validate</name></member>
      <member refid="classarrow_1_1_array_1a793321da66d2d1839e6c89a956e4cb07" prot="public" virt="non-virtual"><scope>arrow::StructArray</scope><name>ValidateFull</name></member>
      <member refid="classarrow_1_1_array_1aa2b5f248c09a41c089e1fbc911beecb0" prot="public" virt="non-virtual"><scope>arrow::StructArray</scope><name>View</name></member>
      <member refid="classarrow_1_1_array_1ad015904c8c6e5e2513c791fb577f2679" prot="public" virt="non-virtual"><scope>arrow::StructArray</scope><name>View</name></member>
      <member refid="classarrow_1_1_array_1addd582eec9488bca2b3379b71fef6ce5" prot="public" virt="virtual"><scope>arrow::StructArray</scope><name>~Array</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
