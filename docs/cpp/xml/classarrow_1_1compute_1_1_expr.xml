<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1compute_1_1_expr" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>arrow::compute::Expr</compoundname>
    <derivedcompoundref refid="classarrow_1_1compute_1_1_value_expr" prot="public" virt="non-virtual">arrow::compute::ValueExpr</derivedcompoundref>
    <includes refid="arrow_2compute_2expression_8h" local="no">arrow/compute/expression.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classarrow_1_1compute_1_1_expr_1a80d5e33eda9eef25716e721dfbabbefa" prot="protected" static="no" mutable="no">
        <type><ref refid="namespacearrow_1_1compute_1af255a47e73df4040c1239b137018bb89" kindref="member">ConstOpPtr</ref></type>
        <definition>ConstOpPtr arrow::compute::Expr::op_</definition>
        <argsstring></argsstring>
        <name>op_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/expression.h" line="56" column="1" bodyfile="/arrow/cpp/src/arrow/compute/expression.h" bodystart="56" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1compute_1_1_expr_1a1a94de9d06d6e03df6e7fc942edcf6aa" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::compute::Expr::Expr</definition>
        <argsstring>(ConstOpPtr op)</argsstring>
        <name>Expr</name>
        <param>
          <type><ref refid="namespacearrow_1_1compute_1af255a47e73df4040c1239b137018bb89" kindref="member">ConstOpPtr</ref></type>
          <declname>op</declname>
        </param>
        <briefdescription>
<para>Instantiate expression from an abstract operation. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">op</parametername>
</parameternamelist>
<parameterdescription>
<para>the operation that generates the expression </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/expression.h" line="41" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1compute_1_1_expr_1aa7d4c0bd44a0a8b6e85ce807dac4368a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual arrow::compute::Expr::~Expr</definition>
        <argsstring>()=default</argsstring>
        <name>~Expr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/expression.h" line="43" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1compute_1_1_expr_1a0301b0ad0be91b9755d3daf706c83dcc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::string</type>
        <definition>virtual std::string arrow::compute::Expr::kind</definition>
        <argsstring>() const =0</argsstring>
        <name>kind</name>
        <reimplementedby refid="classarrow_1_1compute_1_1_array_expr_1aac3734649fae83373efe522c3972f1cf">kind</reimplementedby>
        <reimplementedby refid="classarrow_1_1compute_1_1_scalar_expr_1a7d43014d45e3d1948531e9460ee1b563">kind</reimplementedby>
        <briefdescription>
<para>A unique string identifier for the kind of expression. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/expression.h" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1compute_1_1_expr_1a89480eaf6debbc12675ddec6bcfb0782" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacearrow_1_1compute_1af255a47e73df4040c1239b137018bb89" kindref="member">ConstOpPtr</ref></type>
        <definition>ConstOpPtr arrow::compute::Expr::op</definition>
        <argsstring>() const</argsstring>
        <name>op</name>
        <briefdescription>
<para>Accept expression visitor TODO(wesm) </para>        </briefdescription>
        <detaileddescription>
<para>The underlying operation </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compute/expression.h" line="53" column="1" bodyfile="/arrow/cpp/src/arrow/compute/expression.h" bodystart="53" bodyend="53"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base class for all analytic expressions. </para>    </briefdescription>
    <detaileddescription>
<para>Expressions may represent data values (scalars, arrays, tables) </para>    </detaileddescription>
    <inheritancegraph>
      <node id="1453">
        <label>arrow::compute::ArrayExpr</label>
        <link refid="classarrow_1_1compute_1_1_array_expr"/>
        <childnode refid="1452" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1457">
        <label>arrow::compute::scalar::List</label>
        <link refid="classarrow_1_1compute_1_1scalar_1_1_list"/>
        <childnode refid="1456" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1455">
        <label>arrow::compute::array::Struct</label>
        <link refid="classarrow_1_1compute_1_1array_1_1_struct"/>
        <childnode refid="1453" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1452">
        <label>arrow::compute::ValueExpr</label>
        <link refid="classarrow_1_1compute_1_1_value_expr"/>
        <childnode refid="1451" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1458">
        <label>arrow::compute::scalar::Struct</label>
        <link refid="classarrow_1_1compute_1_1scalar_1_1_struct"/>
        <childnode refid="1456" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1451">
        <label>arrow::compute::Expr</label>
        <link refid="classarrow_1_1compute_1_1_expr"/>
      </node>
      <node id="1456">
        <label>arrow::compute::ScalarExpr</label>
        <link refid="classarrow_1_1compute_1_1_scalar_expr"/>
        <childnode refid="1452" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1454">
        <label>arrow::compute::array::List</label>
        <link refid="classarrow_1_1compute_1_1array_1_1_list"/>
        <childnode refid="1453" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/arrow/cpp/src/arrow/compute/expression.h" line="37" column="1" bodyfile="/arrow/cpp/src/arrow/compute/expression.h" bodystart="37" bodyend="57"/>
    <listofallmembers>
      <member refid="classarrow_1_1compute_1_1_expr_1a1a94de9d06d6e03df6e7fc942edcf6aa" prot="public" virt="non-virtual"><scope>arrow::compute::Expr</scope><name>Expr</name></member>
      <member refid="classarrow_1_1compute_1_1_expr_1a0301b0ad0be91b9755d3daf706c83dcc" prot="public" virt="pure-virtual"><scope>arrow::compute::Expr</scope><name>kind</name></member>
      <member refid="classarrow_1_1compute_1_1_expr_1a89480eaf6debbc12675ddec6bcfb0782" prot="public" virt="non-virtual"><scope>arrow::compute::Expr</scope><name>op</name></member>
      <member refid="classarrow_1_1compute_1_1_expr_1a80d5e33eda9eef25716e721dfbabbefa" prot="protected" virt="non-virtual"><scope>arrow::compute::Expr</scope><name>op_</name></member>
      <member refid="classarrow_1_1compute_1_1_expr_1aa7d4c0bd44a0a8b6e85ce807dac4368a" prot="public" virt="virtual"><scope>arrow::compute::Expr</scope><name>~Expr</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
