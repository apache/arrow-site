<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_field" kind="class" language="C++" prot="public">
    <compoundname>arrow::Field</compoundname>
    <basecompoundref prot="public" virt="non-virtual">arrow::detail::Fingerprintable</basecompoundref>
    <includes refid="type_8h" local="no">arrow/type.h</includes>
    <innerclass refid="structarrow_1_1_field_1_1_merge_options" prot="public">arrow::Field::MergeOptions</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classarrow_1_1_field_1aac2e3492ffc7d51d9233119571057887" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string arrow::Field::name_</definition>
        <argsstring></argsstring>
        <name>name_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="447" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="447" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_field_1ac2b8d7321a24c0ea66487a1457fa29bf" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::Field::type_</definition>
        <argsstring></argsstring>
        <name>type_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="450" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="450" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_field_1aa01845125a96b0b665fba43456581615" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool arrow::Field::nullable_</definition>
        <argsstring></argsstring>
        <name>nullable_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="453" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="453" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_field_1a04fc0eed85e3344e6f9c098f6e19d75b" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; const <ref refid="classarrow_1_1_key_value_metadata" kindref="compound">KeyValueMetadata</ref> &gt;</type>
        <definition>std::shared_ptr&lt;const KeyValueMetadata&gt; arrow::Field::metadata_</definition>
        <argsstring></argsstring>
        <name>metadata_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="456" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="456" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1_field_1a1a80562d9a2d98ff745bdc8a0af58e87" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::Field::Field</definition>
        <argsstring>(std::string name, std::shared_ptr&lt; DataType &gt; type, bool nullable=true, std::shared_ptr&lt; const KeyValueMetadata &gt; metadata=NULLPTR)</argsstring>
        <name>Field</name>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>nullable</declname>
          <defval>true</defval>
        </param>
        <param>
          <type>std::shared_ptr&lt; const <ref refid="classarrow_1_1_key_value_metadata" kindref="compound">KeyValueMetadata</ref> &gt;</type>
          <declname>metadata</declname>
          <defval><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="343" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="343" bodyend="349"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_field_1a856f6e54969e51ded161d019ead31b23" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::Field::~Field</definition>
        <argsstring>() override</argsstring>
        <name>~Field</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="351" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_field_1a899a4cef4c13946c9996095ca53e8004" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; const <ref refid="classarrow_1_1_key_value_metadata" kindref="compound">KeyValueMetadata</ref> &gt;</type>
        <definition>std::shared_ptr&lt;const KeyValueMetadata&gt; arrow::Field::metadata</definition>
        <argsstring>() const</argsstring>
        <name>metadata</name>
        <briefdescription>
<para>Return the field&apos;s attached metadata. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="354" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="354" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_field_1ade70dc0d9c4965246815e481a7c2fd42" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::Field::HasMetadata</definition>
        <argsstring>() const</argsstring>
        <name>HasMetadata</name>
        <briefdescription>
<para>Return whether the field has non-empty metadata. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="357" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_field_1ab7fc8e454854a5c64072b5ea1ae86605" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Field&gt; arrow::Field::WithMetadata</definition>
        <argsstring>(const std::shared_ptr&lt; const KeyValueMetadata &gt; &amp;metadata) const</argsstring>
        <name>WithMetadata</name>
        <param>
          <type>const std::shared_ptr&lt; const <ref refid="classarrow_1_1_key_value_metadata" kindref="compound">KeyValueMetadata</ref> &gt; &amp;</type>
          <declname>metadata</declname>
        </param>
        <briefdescription>
<para>Return a copy of this field with the given metadata attached to it. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="360" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_field_1ae72d1b6ea8287013695dabb51fdcf8bd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Field&gt; arrow::Field::WithMergedMetadata</definition>
        <argsstring>(const std::shared_ptr&lt; const KeyValueMetadata &gt; &amp;metadata) const</argsstring>
        <name>WithMergedMetadata</name>
        <param>
          <type>const std::shared_ptr&lt; const <ref refid="classarrow_1_1_key_value_metadata" kindref="compound">KeyValueMetadata</ref> &gt; &amp;</type>
          <declname>metadata</declname>
        </param>
        <briefdescription>
<para>EXPERIMENTAL: Return a copy of this field with the given metadata merged with existing metadata (any colliding keys will be overridden by the passed metadata) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="366" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_field_1ac253b45e669f8b756fb9c15fd26e9dbe" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Field&gt; arrow::Field::RemoveMetadata</definition>
        <argsstring>() const</argsstring>
        <name>RemoveMetadata</name>
        <briefdescription>
<para>Return a copy of this field without any metadata attached to it. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="370" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_field_1af0578d97e24865ac8f4e318b26f7803f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Field&gt; arrow::Field::WithType</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;type) const</argsstring>
        <name>WithType</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
<para>Return a copy of this field with the replaced type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="373" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_field_1a9633a02bfd6785ca0f37b5218b11e781" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Field&gt; arrow::Field::WithName</definition>
        <argsstring>(const std::string &amp;name) const</argsstring>
        <name>WithName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Return a copy of this field with the replaced name. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="376" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_field_1a471b6b5607da4084a778c53751cb5022" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Field&gt; arrow::Field::WithNullable</definition>
        <argsstring>(bool nullable) const</argsstring>
        <name>WithNullable</name>
        <param>
          <type>bool</type>
          <declname>nullable</declname>
        </param>
        <briefdescription>
<para>Return a copy of this field with the replaced nullability. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="379" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_field_1a26145ec8fdd30efa57d319592c55a17f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;Field&gt; &gt; arrow::Field::MergeWith</definition>
        <argsstring>(const Field &amp;other, MergeOptions options=MergeOptions::Defaults()) const</argsstring>
        <name>MergeWith</name>
        <param>
          <type>const <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type><ref refid="structarrow_1_1_field_1_1_merge_options" kindref="compound">MergeOptions</ref></type>
          <declname>options</declname>
          <defval><ref refid="structarrow_1_1_field_1_1_merge_options_1aad6ec10fe86793101bf688bbf9c9ad96" kindref="member">MergeOptions::Defaults</ref>()</defval>
        </param>
        <briefdescription>
<para>Merge the current field with a field of the same name. </para>        </briefdescription>
        <detaileddescription>
<para>The two fields must be compatible, i.e:<itemizedlist>
<listitem><para>have the same name</para></listitem><listitem><para>have the same type, or of compatible types according to <computeroutput>options</computeroutput>.</para></listitem></itemizedlist>
</para><para>The metadata of the current field is preserved; the metadata of the other field is discarded. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="402" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_field_1ac5ec52e05b6306dd7e77e05eed3b95ff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;Field&gt; &gt; arrow::Field::MergeWith</definition>
        <argsstring>(const std::shared_ptr&lt; Field &gt; &amp;other, MergeOptions options=MergeOptions::Defaults()) const</argsstring>
        <name>MergeWith</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type><ref refid="structarrow_1_1_field_1_1_merge_options" kindref="compound">MergeOptions</ref></type>
          <declname>options</declname>
          <defval><ref refid="structarrow_1_1_field_1_1_merge_options_1aad6ec10fe86793101bf688bbf9c9ad96" kindref="member">MergeOptions::Defaults</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="404" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_field_1ad4eba972b35867b069869bafc781a07f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;Field&gt; &gt; arrow::Field::Flatten</definition>
        <argsstring>() const</argsstring>
        <name>Flatten</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="408" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_field_1a99743c7ebd2683c48b487a3eec75baca" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::Field::Equals</definition>
        <argsstring>(const Field &amp;other, bool check_metadata=false) const</argsstring>
        <name>Equals</name>
        <param>
          <type>const <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>check_metadata</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Indicate if fields are equals. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">other</parametername>
</parameternamelist>
<parameterdescription>
<para>field to check equality with. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">check_metadata</parametername>
</parameternamelist>
<parameterdescription>
<para>controls if it should check for metadata equality.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if fields are equal, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="417" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_field_1af086939979faa924d747dfea2ac3b3b0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::Field::Equals</definition>
        <argsstring>(const std::shared_ptr&lt; Field &gt; &amp;other, bool check_metadata=false) const</argsstring>
        <name>Equals</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>check_metadata</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="418" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_field_1aadb65ca72abc38a8ced47604d36409b2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::Field::IsCompatibleWith</definition>
        <argsstring>(const Field &amp;other) const</argsstring>
        <name>IsCompatibleWith</name>
        <param>
          <type>const <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Indicate if fields are compatibles. </para>        </briefdescription>
        <detaileddescription>
<para>See the criteria of MergeWith.</para><para><simplesect kind="return"><para>true if fields are compatible, false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="425" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_field_1a5f67ee820e541e4c3bd9ba1fafa271b1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::Field::IsCompatibleWith</definition>
        <argsstring>(const std::shared_ptr&lt; Field &gt; &amp;other) const</argsstring>
        <name>IsCompatibleWith</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="426" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_field_1aea6fda3e5e4566631a17e4dd30c5270a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arrow::Field::ToString</definition>
        <argsstring>(bool show_metadata=false) const</argsstring>
        <name>ToString</name>
        <param>
          <type>bool</type>
          <declname>show_metadata</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Return a string representation ot the field. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">show_metadata</parametername>
</parameternamelist>
<parameterdescription>
<para>when true, if <ref refid="classarrow_1_1_key_value_metadata" kindref="compound">KeyValueMetadata</ref> is non-empty, print keys and values in the output </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="431" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_field_1ab023b8e5c6d7deff0af5fc757ecaca89" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; arrow::Field::name</definition>
        <argsstring>() const</argsstring>
        <name>name</name>
        <briefdescription>
<para>Return the field name. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="434" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="434" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_field_1a26a4dfeb0bf5daaeefabfaba4c9084c5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
        <definition>const std::shared_ptr&lt;DataType&gt;&amp; arrow::Field::type</definition>
        <argsstring>() const</argsstring>
        <name>type</name>
        <briefdescription>
<para>Return the field data type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="436" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="436" bodyend="436"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_field_1aba2045f76a42fe34fd785190af139c25" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::Field::nullable</definition>
        <argsstring>() const</argsstring>
        <name>nullable</name>
        <briefdescription>
<para>Return whether the field is nullable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="438" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="438" bodyend="438"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_field_1a595c2cd23efa7c8c3abcd756ff3dd3ff" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Field&gt; arrow::Field::Copy</definition>
        <argsstring>() const</argsstring>
        <name>Copy</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="440" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classarrow_1_1_field_1af39d3234732d3ad28a0b6d784e9f1737" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arrow::Field::ComputeFingerprint</definition>
        <argsstring>() const override</argsstring>
        <name>ComputeFingerprint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="443" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_field_1aae41879b23732e23b45e8b3414574096" prot="private" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arrow::Field::ComputeMetadataFingerprint</definition>
        <argsstring>() const override</argsstring>
        <name>ComputeMetadataFingerprint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="444" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_field_1acec765187efb016626eb7c2df4132528" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::Field::ARROW_DISALLOW_COPY_AND_ASSIGN</definition>
        <argsstring>(Field)</argsstring>
        <name>ARROW_DISALLOW_COPY_AND_ASSIGN</name>
        <param>
          <type><ref refid="classarrow_1_1_field" kindref="compound">Field</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="458" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The combination of a field name and data type, with optional metadata. </para>    </briefdescription>
    <detaileddescription>
<para>Fields are used to describe the individual constituents of a nested <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> or a <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref>.</para><para>A field&apos;s metadata is represented by a <ref refid="classarrow_1_1_key_value_metadata" kindref="compound">KeyValueMetadata</ref> instance, which holds arbitrary key-value pairs. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="1531">
        <label>arrow::Field</label>
        <link refid="classarrow_1_1_field"/>
        <childnode refid="1532" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1532">
        <label>arrow::detail::Fingerprintable</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="1533">
        <label>arrow::Field</label>
        <link refid="classarrow_1_1_field"/>
        <childnode refid="1534" relation="public-inheritance">
        </childnode>
      </node>
      <node id="1534">
        <label>arrow::detail::Fingerprintable</label>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/type.h" line="341" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="341" bodyend="459"/>
    <listofallmembers>
      <member refid="classarrow_1_1_field_1acec765187efb016626eb7c2df4132528" prot="private" virt="non-virtual"><scope>arrow::Field</scope><name>ARROW_DISALLOW_COPY_AND_ASSIGN</name></member>
      <member refid="classarrow_1_1_field_1af39d3234732d3ad28a0b6d784e9f1737" prot="private" virt="non-virtual"><scope>arrow::Field</scope><name>ComputeFingerprint</name></member>
      <member refid="classarrow_1_1_field_1aae41879b23732e23b45e8b3414574096" prot="private" virt="non-virtual"><scope>arrow::Field</scope><name>ComputeMetadataFingerprint</name></member>
      <member refid="classarrow_1_1_field_1a595c2cd23efa7c8c3abcd756ff3dd3ff" prot="public" virt="non-virtual"><scope>arrow::Field</scope><name>Copy</name></member>
      <member refid="classarrow_1_1_field_1a99743c7ebd2683c48b487a3eec75baca" prot="public" virt="non-virtual"><scope>arrow::Field</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_field_1af086939979faa924d747dfea2ac3b3b0" prot="public" virt="non-virtual"><scope>arrow::Field</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_field_1a1a80562d9a2d98ff745bdc8a0af58e87" prot="public" virt="non-virtual"><scope>arrow::Field</scope><name>Field</name></member>
      <member refid="classarrow_1_1_field_1ad4eba972b35867b069869bafc781a07f" prot="public" virt="non-virtual"><scope>arrow::Field</scope><name>Flatten</name></member>
      <member refid="classarrow_1_1_field_1ade70dc0d9c4965246815e481a7c2fd42" prot="public" virt="non-virtual"><scope>arrow::Field</scope><name>HasMetadata</name></member>
      <member refid="classarrow_1_1_field_1aadb65ca72abc38a8ced47604d36409b2" prot="public" virt="non-virtual"><scope>arrow::Field</scope><name>IsCompatibleWith</name></member>
      <member refid="classarrow_1_1_field_1a5f67ee820e541e4c3bd9ba1fafa271b1" prot="public" virt="non-virtual"><scope>arrow::Field</scope><name>IsCompatibleWith</name></member>
      <member refid="classarrow_1_1_field_1a26145ec8fdd30efa57d319592c55a17f" prot="public" virt="non-virtual"><scope>arrow::Field</scope><name>MergeWith</name></member>
      <member refid="classarrow_1_1_field_1ac5ec52e05b6306dd7e77e05eed3b95ff" prot="public" virt="non-virtual"><scope>arrow::Field</scope><name>MergeWith</name></member>
      <member refid="classarrow_1_1_field_1a899a4cef4c13946c9996095ca53e8004" prot="public" virt="non-virtual"><scope>arrow::Field</scope><name>metadata</name></member>
      <member refid="classarrow_1_1_field_1a04fc0eed85e3344e6f9c098f6e19d75b" prot="private" virt="non-virtual"><scope>arrow::Field</scope><name>metadata_</name></member>
      <member refid="classarrow_1_1_field_1ab023b8e5c6d7deff0af5fc757ecaca89" prot="public" virt="non-virtual"><scope>arrow::Field</scope><name>name</name></member>
      <member refid="classarrow_1_1_field_1aac2e3492ffc7d51d9233119571057887" prot="private" virt="non-virtual"><scope>arrow::Field</scope><name>name_</name></member>
      <member refid="classarrow_1_1_field_1aba2045f76a42fe34fd785190af139c25" prot="public" virt="non-virtual"><scope>arrow::Field</scope><name>nullable</name></member>
      <member refid="classarrow_1_1_field_1aa01845125a96b0b665fba43456581615" prot="private" virt="non-virtual"><scope>arrow::Field</scope><name>nullable_</name></member>
      <member refid="classarrow_1_1_field_1ac253b45e669f8b756fb9c15fd26e9dbe" prot="public" virt="non-virtual"><scope>arrow::Field</scope><name>RemoveMetadata</name></member>
      <member refid="classarrow_1_1_field_1aea6fda3e5e4566631a17e4dd30c5270a" prot="public" virt="non-virtual"><scope>arrow::Field</scope><name>ToString</name></member>
      <member refid="classarrow_1_1_field_1a26a4dfeb0bf5daaeefabfaba4c9084c5" prot="public" virt="non-virtual"><scope>arrow::Field</scope><name>type</name></member>
      <member refid="classarrow_1_1_field_1ac2b8d7321a24c0ea66487a1457fa29bf" prot="private" virt="non-virtual"><scope>arrow::Field</scope><name>type_</name></member>
      <member refid="classarrow_1_1_field_1ae72d1b6ea8287013695dabb51fdcf8bd" prot="public" virt="non-virtual"><scope>arrow::Field</scope><name>WithMergedMetadata</name></member>
      <member refid="classarrow_1_1_field_1ab7fc8e454854a5c64072b5ea1ae86605" prot="public" virt="non-virtual"><scope>arrow::Field</scope><name>WithMetadata</name></member>
      <member refid="classarrow_1_1_field_1a9633a02bfd6785ca0f37b5218b11e781" prot="public" virt="non-virtual"><scope>arrow::Field</scope><name>WithName</name></member>
      <member refid="classarrow_1_1_field_1a471b6b5607da4084a778c53751cb5022" prot="public" virt="non-virtual"><scope>arrow::Field</scope><name>WithNullable</name></member>
      <member refid="classarrow_1_1_field_1af0578d97e24865ac8f4e318b26f7803f" prot="public" virt="non-virtual"><scope>arrow::Field</scope><name>WithType</name></member>
      <member refid="classarrow_1_1_field_1a856f6e54969e51ded161d019ead31b23" prot="public" virt="non-virtual"><scope>arrow::Field</scope><name>~Field</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
