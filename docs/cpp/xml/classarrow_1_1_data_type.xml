<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_data_type" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>arrow::DataType</compoundname>
    <basecompoundref prot="public" virt="non-virtual">arrow::detail::Fingerprintable</basecompoundref>
    <derivedcompoundref refid="classarrow_1_1_base_binary_type" prot="public" virt="non-virtual">arrow::BaseBinaryType</derivedcompoundref>
    <derivedcompoundref refid="classarrow_1_1_extension_type" prot="public" virt="non-virtual">arrow::ExtensionType</derivedcompoundref>
    <derivedcompoundref refid="classarrow_1_1_fixed_width_type" prot="public" virt="non-virtual">arrow::FixedWidthType</derivedcompoundref>
    <derivedcompoundref refid="classarrow_1_1_nested_type" prot="public" virt="non-virtual">arrow::NestedType</derivedcompoundref>
    <derivedcompoundref refid="classarrow_1_1_null_type" prot="public" virt="non-virtual">arrow::NullType</derivedcompoundref>
    <includes refid="type_8h" local="no">arrow/type.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classarrow_1_1_data_type_1aa2704f1cfc50018d02e109b32f67e422" prot="protected" static="no" mutable="no">
        <type><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref></type>
        <definition>Type::type arrow::DataType::id_</definition>
        <argsstring></argsstring>
        <name>id_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="281" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="281" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_data_type_1a8dd2f042289733133c386463afcea902" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;Field&gt; &gt; arrow::DataType::children_</definition>
        <argsstring></argsstring>
        <name>children_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="282" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="282" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1_data_type_1a1b8a7ece05983649f67396177f40e844" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::DataType::DataType</definition>
        <argsstring>(Type::type id)</argsstring>
        <name>DataType</name>
        <param>
          <type><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref></type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="236" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="236" bodyend="236"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_data_type_1a268b7e57ebec17a48930c73d8c0605d2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::DataType::~DataType</definition>
        <argsstring>() override</argsstring>
        <name>~DataType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="237" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_data_type_1aaf003113bb8f4c51a03a16f4b27a52bb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::DataType::Equals</definition>
        <argsstring>(const DataType &amp;other, bool check_metadata=false) const</argsstring>
        <name>Equals</name>
        <param>
          <type>const <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>check_metadata</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Return whether the types are equal. </para>        </briefdescription>
        <detaileddescription>
<para>Types that are logically convertible from one to another (e.g. List&lt;UInt8&gt; and Binary) are NOT equal. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="243" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_data_type_1ae974f4c707ef998d25368d278818af6b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::DataType::Equals</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;other) const</argsstring>
        <name>Equals</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Return whether the types are equal. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="246" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_data_type_1a3c9f77b8d895abd8618566386cbeb7c0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt; &amp;</type>
        <definition>const std::shared_ptr&lt;Field&gt;&amp; arrow::DataType::child</definition>
        <argsstring>(int i) const</argsstring>
        <name>child</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="248" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="248" bodyend="248"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_data_type_1a36061c037a2e6e974cc3b22dfb6a5bac" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt; &gt; &amp;</type>
        <definition>const std::vector&lt;std::shared_ptr&lt;Field&gt; &gt;&amp; arrow::DataType::children</definition>
        <argsstring>() const</argsstring>
        <name>children</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="250" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="250" bodyend="250"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_data_type_1ac8920179a6c1e7f434c495d5ec4662f1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int arrow::DataType::num_children</definition>
        <argsstring>() const</argsstring>
        <name>num_children</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="252" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="252" bodyend="252"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_data_type_1a97571c4039e363f7ebcb09f7c789064a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::DataType::Accept</definition>
        <argsstring>(TypeVisitor *visitor) const</argsstring>
        <name>Accept</name>
        <param>
          <type><ref refid="classarrow_1_1_type_visitor" kindref="compound">TypeVisitor</ref> *</type>
          <declname>visitor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="254" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_data_type_1a944727354fb11138ebd46368319598f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::string</type>
        <definition>virtual std::string arrow::DataType::ToString</definition>
        <argsstring>() const =0</argsstring>
        <name>ToString</name>
        <reimplementedby refid="classarrow_1_1_extension_type_1a0004afa50de1db25fdeb1fe290cf7312">ToString</reimplementedby>
        <reimplementedby refid="classarrow_1_1_null_type_1a0e3d2d63dfe4ab9a2edca2bf35250b29">ToString</reimplementedby>
        <reimplementedby refid="classarrow_1_1_list_type_1a652c8b1865ebc3e4c606cb169b5fdd01">ToString</reimplementedby>
        <reimplementedby refid="classarrow_1_1_large_list_type_1a82769560f063232ddf248c62b4f96c6d">ToString</reimplementedby>
        <reimplementedby refid="classarrow_1_1_map_type_1a127513f6fba9038f36ec0bc772d55adc">ToString</reimplementedby>
        <reimplementedby refid="classarrow_1_1_fixed_size_list_type_1a3f30b717b3fbbf43f95e9aa991fbdcf0">ToString</reimplementedby>
        <reimplementedby refid="classarrow_1_1_binary_type_1af5d9c85c40f4c48adce11196aaa4c0c8">ToString</reimplementedby>
        <reimplementedby refid="classarrow_1_1_large_binary_type_1a7872d009ffff66404157a0ca86162f54">ToString</reimplementedby>
        <reimplementedby refid="classarrow_1_1_string_type_1a9ad23b52d91b108a0598f1ca40b88538">ToString</reimplementedby>
        <reimplementedby refid="classarrow_1_1_large_string_type_1a5edecd7f1caaf74ecf35da22dbffb140">ToString</reimplementedby>
        <reimplementedby refid="classarrow_1_1_fixed_size_binary_type_1a470c5c8c75c6480ff99c8abd16e375a2">ToString</reimplementedby>
        <reimplementedby refid="classarrow_1_1_struct_type_1a61ef958c691895c85bf1f3d297b14351">ToString</reimplementedby>
        <reimplementedby refid="classarrow_1_1_decimal128_type_1aa18803bc8d4540498e2bc697353daa96">ToString</reimplementedby>
        <reimplementedby refid="classarrow_1_1_union_type_1a54535494e9b2d710c0eb9fcbdde26dcd">ToString</reimplementedby>
        <reimplementedby refid="classarrow_1_1_date32_type_1ae770c74ead8fcb6dc4ffd3c6139414a0">ToString</reimplementedby>
        <reimplementedby refid="classarrow_1_1_date64_type_1a7a144a28610069b35fa14424a8e5097c">ToString</reimplementedby>
        <reimplementedby refid="classarrow_1_1_time32_type_1af48861ed2f03de2ab932f5b4c987f4a7">ToString</reimplementedby>
        <reimplementedby refid="classarrow_1_1_time64_type_1a8c985ae014e16d79323c0a8899851091">ToString</reimplementedby>
        <reimplementedby refid="classarrow_1_1_timestamp_type_1ae220b66f0778f17a26bb757e46a7e1a9">ToString</reimplementedby>
        <reimplementedby refid="classarrow_1_1_month_interval_type_1a9445bb7993a337e558e0101c8784dd87">ToString</reimplementedby>
        <reimplementedby refid="classarrow_1_1_day_time_interval_type_1a7e064dcb55aa588ed842d98f6babe5e8">ToString</reimplementedby>
        <reimplementedby refid="classarrow_1_1_duration_type_1a9bb2f5e50db3b70cdb72fd0646eb2492">ToString</reimplementedby>
        <reimplementedby refid="classarrow_1_1_dictionary_type_1ae315ff7fb07bd9fda3139032244e92d0">ToString</reimplementedby>
        <briefdescription>
<para>A string representation of the type, including any children. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="257" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_data_type_1a94985d12273f5dd353d6142921299d4d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::string</type>
        <definition>virtual std::string arrow::DataType::name</definition>
        <argsstring>() const =0</argsstring>
        <name>name</name>
        <reimplementedby refid="classarrow_1_1_extension_type_1a7db26a19117968f84d607a31b0f49322">name</reimplementedby>
        <reimplementedby refid="classarrow_1_1_null_type_1a656232cfad677aebb79f3147b0acdfb2">name</reimplementedby>
        <reimplementedby refid="classarrow_1_1_list_type_1a6320a08c4881865abcac2fdeab4fb0a2">name</reimplementedby>
        <reimplementedby refid="classarrow_1_1_large_list_type_1ac639156265552e6b9372afa525a8af50">name</reimplementedby>
        <reimplementedby refid="classarrow_1_1_map_type_1aaec81c349f7561f49253006f35735e5e">name</reimplementedby>
        <reimplementedby refid="classarrow_1_1_fixed_size_list_type_1aeff3a940628ad39fbf065c8fbb7c00f8">name</reimplementedby>
        <reimplementedby refid="classarrow_1_1_binary_type_1a4c345ca9ef34a6099b29c3e694bedae3">name</reimplementedby>
        <reimplementedby refid="classarrow_1_1_large_binary_type_1a13b91514b5c18c6ad41d84cb92e0c31f">name</reimplementedby>
        <reimplementedby refid="classarrow_1_1_string_type_1ac286b24f3c2b3eeaf1e7d897ecd7a8d1">name</reimplementedby>
        <reimplementedby refid="classarrow_1_1_large_string_type_1a07c2864eabf436e15ec944e488f17f6e">name</reimplementedby>
        <reimplementedby refid="classarrow_1_1_fixed_size_binary_type_1af533276c83d45b5cefa826a169bef6c7">name</reimplementedby>
        <reimplementedby refid="classarrow_1_1_struct_type_1a5a6f3d58e837712a49e507925e2b40ec">name</reimplementedby>
        <reimplementedby refid="classarrow_1_1_decimal128_type_1a369b5ae40c271133e15571f9c6198170">name</reimplementedby>
        <reimplementedby refid="classarrow_1_1_union_type_1ae1fa65b67319c82d243e9a95de543bdc">name</reimplementedby>
        <reimplementedby refid="classarrow_1_1_date32_type_1a67136dde9b0df81a730d9f8aaeea3d10">name</reimplementedby>
        <reimplementedby refid="classarrow_1_1_date64_type_1a48afc838a3ac17c2ae579da3b6387f48">name</reimplementedby>
        <reimplementedby refid="classarrow_1_1_time32_type_1a7ad35f94f66f2e2f6c718328d0b1e928">name</reimplementedby>
        <reimplementedby refid="classarrow_1_1_time64_type_1abba4ccc76c566ee3f61997f78660dd79">name</reimplementedby>
        <reimplementedby refid="classarrow_1_1_timestamp_type_1acdca1b7fb9a7d6532dcbbfb6dee2172b">name</reimplementedby>
        <reimplementedby refid="classarrow_1_1_month_interval_type_1a49fe7c14ff4077443815fc88709711be">name</reimplementedby>
        <reimplementedby refid="classarrow_1_1_day_time_interval_type_1ae49b7efa3b0a38d5d49f581e8688020c">name</reimplementedby>
        <reimplementedby refid="classarrow_1_1_duration_type_1adc9baa39b3f82f912aa9330ea25c1bd1">name</reimplementedby>
        <reimplementedby refid="classarrow_1_1_dictionary_type_1a1423be356f4e0c7d28f2c52881decbed">name</reimplementedby>
        <briefdescription>
<para>A string name of the type, omitting any child fields. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Experimental API </para></simplesect>
<simplesect kind="since"><para>0.7.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="263" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_data_type_1a4fe70f6a45eda029ea118c8470ff925e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="structarrow_1_1_data_type_layout" kindref="compound">DataTypeLayout</ref></type>
        <definition>virtual DataTypeLayout arrow::DataType::layout</definition>
        <argsstring>() const =0</argsstring>
        <name>layout</name>
        <reimplementedby refid="classarrow_1_1_extension_type_1a467c12cd7f9ee1bdbee822a311c7f2c6">layout</reimplementedby>
        <reimplementedby refid="classarrow_1_1_null_type_1a3354ed04f7b102360f93475b75d6aa0d">layout</reimplementedby>
        <reimplementedby refid="classarrow_1_1_boolean_type_1a682141096208fc1fd72a31cdcf668a8d">layout</reimplementedby>
        <reimplementedby refid="classarrow_1_1_list_type_1a448fdb34f319e62fbd310997a8ba4c32">layout</reimplementedby>
        <reimplementedby refid="classarrow_1_1_large_list_type_1a56516c286c62a40e51f94281b024cdde">layout</reimplementedby>
        <reimplementedby refid="classarrow_1_1_fixed_size_list_type_1a81e0399d0c9af775bdbc05cd72b4b9a6">layout</reimplementedby>
        <reimplementedby refid="classarrow_1_1_binary_type_1a0db59e35b5b3afa44fc15f53ff86235f">layout</reimplementedby>
        <reimplementedby refid="classarrow_1_1_large_binary_type_1a224295a081273aa84c2e5134f0321997">layout</reimplementedby>
        <reimplementedby refid="classarrow_1_1_fixed_size_binary_type_1a272445981e412ccca95784e133f0a6cc">layout</reimplementedby>
        <reimplementedby refid="classarrow_1_1_struct_type_1a5c4c6bfa924d21316798b936ec37d18d">layout</reimplementedby>
        <reimplementedby refid="classarrow_1_1_union_type_1a3945a3b84db5764ecb0788fbbf21f687">layout</reimplementedby>
        <reimplementedby refid="classarrow_1_1_temporal_type_1a3765b88dae2be6093850dd40f785386b">layout</reimplementedby>
        <reimplementedby refid="classarrow_1_1_dictionary_type_1a28bbcdcb527d9c93e0cb842f4bf93bd1">layout</reimplementedby>
        <briefdescription>
<para>Return the data type layout. </para>        </briefdescription>
        <detaileddescription>
<para>Children are not included.</para><para><simplesect kind="note"><para>Experimental API </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="268" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_data_type_1a5ec6a1c93420c68e9c8065d4a56ad645" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref></type>
        <definition>Type::type arrow::DataType::id</definition>
        <argsstring>() const</argsstring>
        <name>id</name>
        <briefdescription>
<para>Return the type category. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="271" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="271" bodyend="271"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classarrow_1_1_data_type_1a76d3baecd61b755855fff41df058785a" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arrow::DataType::ComputeFingerprint</definition>
        <argsstring>() const override</argsstring>
        <name>ComputeFingerprint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="276" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_data_type_1a1e0bf7cc98ce39872b8044f375d7de6b" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arrow::DataType::ComputeMetadataFingerprint</definition>
        <argsstring>() const override</argsstring>
        <name>ComputeMetadataFingerprint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="279" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classarrow_1_1_data_type_1a0b9cacbc668f3c22edfc9386fe7ff4d8" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::DataType::ARROW_DISALLOW_COPY_AND_ASSIGN</definition>
        <argsstring>(DataType)</argsstring>
        <name>ARROW_DISALLOW_COPY_AND_ASSIGN</name>
        <param>
          <type><ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="285" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Base class for all data types. </para>    </briefdescription>
    <detaileddescription>
<para>Data types in this library are all <emphasis>logical</emphasis>. They can be expressed as either a primitive physical type (bytes or bits of some fixed size), a nested type consisting of other data types, or another data type (e.g. a timestamp encoded as an int64).</para><para>Simple datatypes may be entirely described by their <ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref> id, but complex datatypes are usually parametric. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="893">
        <label>arrow::detail::CTypeImpl&lt; HalfFloatType, FloatingPointType, Type::HALF_FLOAT, uint16_t &gt;</label>
        <childnode refid="888" relation="public-inheritance">
        </childnode>
      </node>
      <node id="933">
        <label>arrow::TimeType</label>
        <link refid="classarrow_1_1_time_type"/>
        <childnode refid="924" relation="public-inheritance">
        </childnode>
      </node>
      <node id="919">
        <label>arrow::detail::CTypeImpl&lt; UInt8Type, IntegerType, TYPE_ID, uint8_t &gt;</label>
        <childnode refid="895" relation="public-inheritance">
        </childnode>
      </node>
      <node id="923">
        <label>arrow::BooleanType</label>
        <link refid="classarrow_1_1_boolean_type"/>
        <childnode refid="922" relation="public-inheritance">
        </childnode>
      </node>
      <node id="890">
        <label>arrow::DoubleType</label>
        <link refid="classarrow_1_1_double_type"/>
        <childnode refid="889" relation="public-inheritance">
        </childnode>
      </node>
      <node id="901">
        <label>arrow::detail::CTypeImpl&lt; Int32Type, IntegerType, TYPE_ID, int32_t &gt;</label>
        <childnode refid="895" relation="public-inheritance">
        </childnode>
      </node>
      <node id="914">
        <label>arrow::detail::IntegerTypeImpl&lt; UInt32Type, Type::UINT32, uint32_t &gt;</label>
        <childnode refid="913" relation="public-inheritance">
        </childnode>
      </node>
      <node id="921">
        <label>arrow::UInt8Type</label>
        <link refid="classarrow_1_1_u_int8_type"/>
        <childnode refid="920" relation="public-inheritance">
        </childnode>
      </node>
      <node id="928">
        <label>arrow::DurationType</label>
        <link refid="classarrow_1_1_duration_type"/>
        <childnode refid="924" relation="public-inheritance">
        </childnode>
      </node>
      <node id="936">
        <label>arrow::NestedType</label>
        <link refid="classarrow_1_1_nested_type"/>
        <childnode refid="872" relation="public-inheritance">
        </childnode>
      </node>
      <node id="902">
        <label>arrow::detail::IntegerTypeImpl&lt; Int32Type, Type::INT32, int32_t &gt;</label>
        <childnode refid="901" relation="public-inheritance">
        </childnode>
      </node>
      <node id="920">
        <label>arrow::detail::IntegerTypeImpl&lt; UInt8Type, Type::UINT8, uint8_t &gt;</label>
        <childnode refid="919" relation="public-inheritance">
        </childnode>
      </node>
      <node id="935">
        <label>arrow::Time64Type</label>
        <link refid="classarrow_1_1_time64_type"/>
        <childnode refid="933" relation="public-inheritance">
        </childnode>
      </node>
      <node id="896">
        <label>arrow::detail::CTypeImpl&lt; DERIVED, IntegerType, TYPE_ID, C_TYPE &gt;</label>
        <childnode refid="895" relation="public-inheritance">
        </childnode>
      </node>
      <node id="895">
        <label>arrow::IntegerType</label>
        <link refid="classarrow_1_1_integer_type"/>
        <childnode refid="887" relation="public-inheritance">
        </childnode>
      </node>
      <node id="944">
        <label>arrow::NullType</label>
        <link refid="classarrow_1_1_null_type"/>
        <childnode refid="872" relation="public-inheritance">
        </childnode>
      </node>
      <node id="922">
        <label>arrow::detail::CTypeImpl&lt; BooleanType, PrimitiveCType, Type::BOOL, bool &gt;</label>
        <childnode refid="886" relation="public-inheritance">
        </childnode>
      </node>
      <node id="884">
        <label>arrow::DecimalType</label>
        <link refid="classarrow_1_1_decimal_type"/>
        <childnode refid="883" relation="public-inheritance">
        </childnode>
      </node>
      <node id="909">
        <label>arrow::Int8Type</label>
        <link refid="classarrow_1_1_int8_type"/>
        <childnode refid="908" relation="public-inheritance">
        </childnode>
      </node>
      <node id="942">
        <label>arrow::StructType</label>
        <link refid="classarrow_1_1_struct_type"/>
        <childnode refid="936" relation="public-inheritance">
        </childnode>
      </node>
      <node id="883">
        <label>arrow::FixedSizeBinaryType</label>
        <link refid="classarrow_1_1_fixed_size_binary_type"/>
        <childnode refid="881" relation="public-inheritance">
        </childnode>
      </node>
      <node id="882">
        <label>arrow::DictionaryType</label>
        <link refid="classarrow_1_1_dictionary_type"/>
        <childnode refid="881" relation="public-inheritance">
        </childnode>
      </node>
      <node id="872">
        <label>arrow::DataType</label>
        <link refid="classarrow_1_1_data_type"/>
        <childnode refid="873" relation="public-inheritance">
        </childnode>
      </node>
      <node id="891">
        <label>arrow::detail::CTypeImpl&lt; FloatType, FloatingPointType, Type::FLOAT, float &gt;</label>
        <childnode refid="888" relation="public-inheritance">
        </childnode>
      </node>
      <node id="929">
        <label>arrow::IntervalType</label>
        <link refid="classarrow_1_1_interval_type"/>
        <childnode refid="924" relation="public-inheritance">
        </childnode>
      </node>
      <node id="910">
        <label>arrow::detail::CTypeImpl&lt; UInt16Type, IntegerType, TYPE_ID, uint16_t &gt;</label>
        <childnode refid="895" relation="public-inheritance">
        </childnode>
      </node>
      <node id="911">
        <label>arrow::detail::IntegerTypeImpl&lt; UInt16Type, Type::UINT16, uint16_t &gt;</label>
        <childnode refid="910" relation="public-inheritance">
        </childnode>
      </node>
      <node id="876">
        <label>arrow::StringType</label>
        <link refid="classarrow_1_1_string_type"/>
        <childnode refid="875" relation="public-inheritance">
        </childnode>
      </node>
      <node id="930">
        <label>arrow::DayTimeIntervalType</label>
        <link refid="classarrow_1_1_day_time_interval_type"/>
        <childnode refid="929" relation="public-inheritance">
        </childnode>
      </node>
      <node id="934">
        <label>arrow::Time32Type</label>
        <link refid="classarrow_1_1_time32_type"/>
        <childnode refid="933" relation="public-inheritance">
        </childnode>
      </node>
      <node id="908">
        <label>arrow::detail::IntegerTypeImpl&lt; Int8Type, Type::INT8, int8_t &gt;</label>
        <childnode refid="907" relation="public-inheritance">
        </childnode>
      </node>
      <node id="903">
        <label>arrow::Int32Type</label>
        <link refid="classarrow_1_1_int32_type"/>
        <childnode refid="902" relation="public-inheritance">
        </childnode>
      </node>
      <node id="880">
        <label>arrow::py::PyExtensionType</label>
        <link refid="classarrow_1_1py_1_1_py_extension_type"/>
        <childnode refid="879" relation="public-inheritance">
        </childnode>
      </node>
      <node id="913">
        <label>arrow::detail::CTypeImpl&lt; UInt32Type, IntegerType, TYPE_ID, uint32_t &gt;</label>
        <childnode refid="895" relation="public-inheritance">
        </childnode>
      </node>
      <node id="900">
        <label>arrow::Int16Type</label>
        <link refid="classarrow_1_1_int16_type"/>
        <childnode refid="899" relation="public-inheritance">
        </childnode>
      </node>
      <node id="889">
        <label>arrow::detail::CTypeImpl&lt; DoubleType, FloatingPointType, Type::DOUBLE, double &gt;</label>
        <childnode refid="888" relation="public-inheritance">
        </childnode>
      </node>
      <node id="907">
        <label>arrow::detail::CTypeImpl&lt; Int8Type, IntegerType, TYPE_ID, int8_t &gt;</label>
        <childnode refid="895" relation="public-inheritance">
        </childnode>
      </node>
      <node id="904">
        <label>arrow::detail::CTypeImpl&lt; Int64Type, IntegerType, TYPE_ID, int64_t &gt;</label>
        <childnode refid="895" relation="public-inheritance">
        </childnode>
      </node>
      <node id="877">
        <label>arrow::LargeBinaryType</label>
        <link refid="classarrow_1_1_large_binary_type"/>
        <childnode refid="874" relation="public-inheritance">
        </childnode>
      </node>
      <node id="892">
        <label>arrow::FloatType</label>
        <link refid="classarrow_1_1_float_type"/>
        <childnode refid="891" relation="public-inheritance">
        </childnode>
      </node>
      <node id="943">
        <label>arrow::UnionType</label>
        <link refid="classarrow_1_1_union_type"/>
        <childnode refid="936" relation="public-inheritance">
        </childnode>
      </node>
      <node id="873">
        <label>arrow::detail::Fingerprintable</label>
      </node>
      <node id="888">
        <label>arrow::FloatingPointType</label>
        <link refid="classarrow_1_1_floating_point_type"/>
        <childnode refid="887" relation="public-inheritance">
        </childnode>
      </node>
      <node id="924">
        <label>arrow::TemporalType</label>
        <link refid="classarrow_1_1_temporal_type"/>
        <childnode refid="881" relation="public-inheritance">
        </childnode>
      </node>
      <node id="897">
        <label>arrow::detail::IntegerTypeImpl&lt; DERIVED, TYPE_ID, C_TYPE &gt;</label>
        <childnode refid="896" relation="public-inheritance">
        </childnode>
      </node>
      <node id="881">
        <label>arrow::FixedWidthType</label>
        <link refid="classarrow_1_1_fixed_width_type"/>
        <childnode refid="872" relation="public-inheritance">
        </childnode>
      </node>
      <node id="940">
        <label>arrow::ListType</label>
        <link refid="classarrow_1_1_list_type"/>
        <childnode refid="937" relation="public-inheritance">
        </childnode>
      </node>
      <node id="898">
        <label>arrow::detail::CTypeImpl&lt; Int16Type, IntegerType, TYPE_ID, int16_t &gt;</label>
        <childnode refid="895" relation="public-inheritance">
        </childnode>
      </node>
      <node id="905">
        <label>arrow::detail::IntegerTypeImpl&lt; Int64Type, Type::INT64, int64_t &gt;</label>
        <childnode refid="904" relation="public-inheritance">
        </childnode>
      </node>
      <node id="931">
        <label>arrow::MonthIntervalType</label>
        <link refid="classarrow_1_1_month_interval_type"/>
        <childnode refid="929" relation="public-inheritance">
        </childnode>
      </node>
      <node id="941">
        <label>arrow::MapType</label>
        <link refid="classarrow_1_1_map_type"/>
        <childnode refid="940" relation="public-inheritance">
        </childnode>
      </node>
      <node id="875">
        <label>arrow::BinaryType</label>
        <link refid="classarrow_1_1_binary_type"/>
        <childnode refid="874" relation="public-inheritance">
        </childnode>
      </node>
      <node id="886">
        <label>arrow::PrimitiveCType</label>
        <link refid="classarrow_1_1_primitive_c_type"/>
        <childnode refid="881" relation="public-inheritance">
        </childnode>
      </node>
      <node id="879">
        <label>arrow::ExtensionType</label>
        <link refid="classarrow_1_1_extension_type"/>
        <childnode refid="872" relation="public-inheritance">
        </childnode>
      </node>
      <node id="912">
        <label>arrow::UInt16Type</label>
        <link refid="classarrow_1_1_u_int16_type"/>
        <childnode refid="911" relation="public-inheritance">
        </childnode>
      </node>
      <node id="918">
        <label>arrow::UInt64Type</label>
        <link refid="classarrow_1_1_u_int64_type"/>
        <childnode refid="917" relation="public-inheritance">
        </childnode>
      </node>
      <node id="899">
        <label>arrow::detail::IntegerTypeImpl&lt; Int16Type, Type::INT16, int16_t &gt;</label>
        <childnode refid="898" relation="public-inheritance">
        </childnode>
      </node>
      <node id="885">
        <label>arrow::Decimal128Type</label>
        <link refid="classarrow_1_1_decimal128_type"/>
        <childnode refid="884" relation="public-inheritance">
        </childnode>
      </node>
      <node id="932">
        <label>arrow::TimestampType</label>
        <link refid="classarrow_1_1_timestamp_type"/>
        <childnode refid="924" relation="public-inheritance">
        </childnode>
      </node>
      <node id="927">
        <label>arrow::Date64Type</label>
        <link refid="classarrow_1_1_date64_type"/>
        <childnode refid="925" relation="public-inheritance">
        </childnode>
      </node>
      <node id="878">
        <label>arrow::LargeStringType</label>
        <link refid="classarrow_1_1_large_string_type"/>
        <childnode refid="877" relation="public-inheritance">
        </childnode>
      </node>
      <node id="915">
        <label>arrow::UInt32Type</label>
        <link refid="classarrow_1_1_u_int32_type"/>
        <childnode refid="914" relation="public-inheritance">
        </childnode>
      </node>
      <node id="894">
        <label>arrow::HalfFloatType</label>
        <link refid="classarrow_1_1_half_float_type"/>
        <childnode refid="893" relation="public-inheritance">
        </childnode>
      </node>
      <node id="916">
        <label>arrow::detail::CTypeImpl&lt; UInt64Type, IntegerType, TYPE_ID, uint64_t &gt;</label>
        <childnode refid="895" relation="public-inheritance">
        </childnode>
      </node>
      <node id="939">
        <label>arrow::LargeListType</label>
        <link refid="classarrow_1_1_large_list_type"/>
        <childnode refid="937" relation="public-inheritance">
        </childnode>
      </node>
      <node id="925">
        <label>arrow::DateType</label>
        <link refid="classarrow_1_1_date_type"/>
        <childnode refid="924" relation="public-inheritance">
        </childnode>
      </node>
      <node id="906">
        <label>arrow::Int64Type</label>
        <link refid="classarrow_1_1_int64_type"/>
        <childnode refid="905" relation="public-inheritance">
        </childnode>
      </node>
      <node id="926">
        <label>arrow::Date32Type</label>
        <link refid="classarrow_1_1_date32_type"/>
        <childnode refid="925" relation="public-inheritance">
        </childnode>
      </node>
      <node id="874">
        <label>arrow::BaseBinaryType</label>
        <link refid="classarrow_1_1_base_binary_type"/>
        <childnode refid="872" relation="public-inheritance">
        </childnode>
      </node>
      <node id="917">
        <label>arrow::detail::IntegerTypeImpl&lt; UInt64Type, Type::UINT64, uint64_t &gt;</label>
        <childnode refid="916" relation="public-inheritance">
        </childnode>
      </node>
      <node id="938">
        <label>arrow::FixedSizeListType</label>
        <link refid="classarrow_1_1_fixed_size_list_type"/>
        <childnode refid="937" relation="public-inheritance">
        </childnode>
      </node>
      <node id="937">
        <label>arrow::BaseListType</label>
        <link refid="classarrow_1_1_base_list_type"/>
        <childnode refid="936" relation="public-inheritance">
        </childnode>
      </node>
      <node id="887">
        <label>arrow::NumberType</label>
        <link refid="classarrow_1_1_number_type"/>
        <childnode refid="886" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="945">
        <label>arrow::DataType</label>
        <link refid="classarrow_1_1_data_type"/>
        <childnode refid="946" relation="public-inheritance">
        </childnode>
      </node>
      <node id="946">
        <label>arrow::detail::Fingerprintable</label>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/type.h" line="234" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="234" bodyend="286"/>
    <listofallmembers>
      <member refid="classarrow_1_1_data_type_1a97571c4039e363f7ebcb09f7c789064a" prot="public" virt="non-virtual"><scope>arrow::DataType</scope><name>Accept</name></member>
      <member refid="classarrow_1_1_data_type_1a0b9cacbc668f3c22edfc9386fe7ff4d8" prot="private" virt="non-virtual"><scope>arrow::DataType</scope><name>ARROW_DISALLOW_COPY_AND_ASSIGN</name></member>
      <member refid="classarrow_1_1_data_type_1a3c9f77b8d895abd8618566386cbeb7c0" prot="public" virt="non-virtual"><scope>arrow::DataType</scope><name>child</name></member>
      <member refid="classarrow_1_1_data_type_1a36061c037a2e6e974cc3b22dfb6a5bac" prot="public" virt="non-virtual"><scope>arrow::DataType</scope><name>children</name></member>
      <member refid="classarrow_1_1_data_type_1a8dd2f042289733133c386463afcea902" prot="protected" virt="non-virtual"><scope>arrow::DataType</scope><name>children_</name></member>
      <member refid="classarrow_1_1_data_type_1a76d3baecd61b755855fff41df058785a" prot="protected" virt="non-virtual"><scope>arrow::DataType</scope><name>ComputeFingerprint</name></member>
      <member refid="classarrow_1_1_data_type_1a1e0bf7cc98ce39872b8044f375d7de6b" prot="protected" virt="non-virtual"><scope>arrow::DataType</scope><name>ComputeMetadataFingerprint</name></member>
      <member refid="classarrow_1_1_data_type_1a1b8a7ece05983649f67396177f40e844" prot="public" virt="non-virtual"><scope>arrow::DataType</scope><name>DataType</name></member>
      <member refid="classarrow_1_1_data_type_1aaf003113bb8f4c51a03a16f4b27a52bb" prot="public" virt="non-virtual"><scope>arrow::DataType</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_data_type_1ae974f4c707ef998d25368d278818af6b" prot="public" virt="non-virtual"><scope>arrow::DataType</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_data_type_1a5ec6a1c93420c68e9c8065d4a56ad645" prot="public" virt="non-virtual"><scope>arrow::DataType</scope><name>id</name></member>
      <member refid="classarrow_1_1_data_type_1aa2704f1cfc50018d02e109b32f67e422" prot="protected" virt="non-virtual"><scope>arrow::DataType</scope><name>id_</name></member>
      <member refid="classarrow_1_1_data_type_1a4fe70f6a45eda029ea118c8470ff925e" prot="public" virt="pure-virtual"><scope>arrow::DataType</scope><name>layout</name></member>
      <member refid="classarrow_1_1_data_type_1a94985d12273f5dd353d6142921299d4d" prot="public" virt="pure-virtual"><scope>arrow::DataType</scope><name>name</name></member>
      <member refid="classarrow_1_1_data_type_1ac8920179a6c1e7f434c495d5ec4662f1" prot="public" virt="non-virtual"><scope>arrow::DataType</scope><name>num_children</name></member>
      <member refid="classarrow_1_1_data_type_1a944727354fb11138ebd46368319598f2" prot="public" virt="pure-virtual"><scope>arrow::DataType</scope><name>ToString</name></member>
      <member refid="classarrow_1_1_data_type_1a268b7e57ebec17a48930c73d8c0605d2" prot="public" virt="non-virtual"><scope>arrow::DataType</scope><name>~DataType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
