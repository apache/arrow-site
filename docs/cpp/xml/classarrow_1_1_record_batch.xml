<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_record_batch" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>arrow::RecordBatch</compoundname>
    <includes refid="record__batch_8h" local="no">arrow/record_batch.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classarrow_1_1_record_batch_1a7ca77d78199001da4f3fd99ffd035922" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Schema&gt; arrow::RecordBatch::schema_</definition>
        <argsstring></argsstring>
        <name>schema_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/record_batch.h" line="202" column="1" bodyfile="/arrow/cpp/src/arrow/record_batch.h" bodystart="202" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_record_batch_1aa62597221dab95400905423cc0155611" prot="protected" static="no" mutable="no">
        <type>int64_t</type>
        <definition>int64_t arrow::RecordBatch::num_rows_</definition>
        <argsstring></argsstring>
        <name>num_rows_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/record_batch.h" line="203" column="1" bodyfile="/arrow/cpp/src/arrow/record_batch.h" bodystart="203" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1_record_batch_1a2605e9ac846d543eb84c01cf5225d253" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual arrow::RecordBatch::~RecordBatch</definition>
        <argsstring>()=default</argsstring>
        <name>~RecordBatch</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/record_batch.h" line="40" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_record_batch_1ac35bab2c8781711e54d5a4a66e8e01ea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;Array&gt; &gt; arrow::RecordBatch::ToStructArray</definition>
        <argsstring>() const</argsstring>
        <name>ToStructArray</name>
        <briefdescription>
<para>Convert record batch to struct array. </para>        </briefdescription>
        <detaileddescription>
<para>Create a struct array whose child arrays are the record batch&apos;s columns. Note that the record batch&apos;s top-level field metadata cannot be reflected in the resulting struct array. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/record_batch.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_record_batch_1abf7bd312304bcb92e6a9100c855c2b86" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::RecordBatch::ToStructArray</definition>
        <argsstring>(std::shared_ptr&lt; Array &gt; *out) const</argsstring>
        <name>ToStructArray</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/record_batch.h" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_record_batch_1a47c8573fed66267952960c821556d1ea" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::RecordBatch::Equals</definition>
        <argsstring>(const RecordBatch &amp;other, bool check_metadata=false) const</argsstring>
        <name>Equals</name>
        <param>
          <type>const <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>check_metadata</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Determine if two record batches are exactly equal. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">other</parametername>
</parameternamelist>
<parameterdescription>
<para>the <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref> to compare with </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">check_metadata</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, check that <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> metadata is the same </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if batches are equal </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/record_batch.h" line="90" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_record_batch_1ae5f6c3764a9b0a8473fb9736c67f8dab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::RecordBatch::ApproxEquals</definition>
        <argsstring>(const RecordBatch &amp;other) const</argsstring>
        <name>ApproxEquals</name>
        <param>
          <type>const <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Determine if two record batches are approximately equal. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/record_batch.h" line="93" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_record_batch_1ab12ff2c2d5cca56fc185f9a4dfc64395" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Schema&gt; arrow::RecordBatch::schema</definition>
        <argsstring>() const</argsstring>
        <name>schema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if batches are equal </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/record_batch.h" line="97" column="1" bodyfile="/arrow/cpp/src/arrow/record_batch.h" bodystart="97" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_record_batch_1afaafcd11c10c2e149238cfc639dd306a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; &gt;</type>
        <definition>std::vector&lt;std::shared_ptr&lt;Array&gt; &gt; arrow::RecordBatch::columns</definition>
        <argsstring>() const</argsstring>
        <name>columns</name>
        <briefdescription>
<para>Retrieve all columns at once. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/record_batch.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_record_batch_1a45e8089b23491c64ae5fbe5b93f8b1c0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt;</type>
        <definition>virtual std::shared_ptr&lt;Array&gt; arrow::RecordBatch::column</definition>
        <argsstring>(int i) const =0</argsstring>
        <name>column</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Retrieve an array from the record batch. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i</parametername>
</parameternamelist>
<parameterdescription>
<para>field index, does not boundscheck </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/record_batch.h" line="105" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_record_batch_1ad03d7ec8857ab13350e791b9632e3563" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Array&gt; arrow::RecordBatch::GetColumnByName</definition>
        <argsstring>(const std::string &amp;name) const</argsstring>
        <name>GetColumnByName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
<para>Retrieve an array from the record batch. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>field name </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> or null if no field was found </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/record_batch.h" line="110" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_record_batch_1a6e61dc823f7ae23d661a4acaa462cf03" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::shared_ptr&lt; <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &gt;</type>
        <definition>virtual std::shared_ptr&lt;ArrayData&gt; arrow::RecordBatch::column_data</definition>
        <argsstring>(int i) const =0</argsstring>
        <name>column_data</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Retrieve an array&apos;s internal data from the record batch. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i</parametername>
</parameternamelist>
<parameterdescription>
<para>field index, does not boundscheck </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an internal <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> object </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/record_batch.h" line="115" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_record_batch_1aba91d7076c24dde01218fe71785f6053" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespacearrow_1a673a462c4839a467a29173c4f9625cfc" kindref="member">ArrayDataVector</ref></type>
        <definition>virtual ArrayDataVector arrow::RecordBatch::column_data</definition>
        <argsstring>() const =0</argsstring>
        <name>column_data</name>
        <briefdescription>
<para>Retrieve all arrays&apos; internal data from the record batch. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/record_batch.h" line="118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_record_batch_1ae9df570cc6b4d8d092a21d531273cbb2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref> &gt; &gt;</type>
        <definition>virtual Result&lt;std::shared_ptr&lt;RecordBatch&gt; &gt; arrow::RecordBatch::AddColumn</definition>
        <argsstring>(int i, const std::shared_ptr&lt; Field &gt; &amp;field, const std::shared_ptr&lt; Array &gt; &amp;column) const =0</argsstring>
        <name>AddColumn</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; &amp;</type>
          <declname>column</declname>
        </param>
        <briefdescription>
<para>Add column to the record batch, producing a new <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i</parametername>
</parameternamelist>
<parameterdescription>
<para>field index, which will be boundschecked </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">field</parametername>
</parameternamelist>
<parameterdescription>
<para>field to be added </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">column</parametername>
</parameternamelist>
<parameterdescription>
<para>column to be added </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/record_batch.h" line="125" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_record_batch_1ac2f3275848c63fb174379a7496d20297" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::RecordBatch::AddColumn</definition>
        <argsstring>(int i, const std::shared_ptr&lt; Field &gt; &amp;field, const std::shared_ptr&lt; Array &gt; &amp;column, std::shared_ptr&lt; RecordBatch &gt; *out) const</argsstring>
        <name>AddColumn</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt; &amp;</type>
          <declname>field</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; &amp;</type>
          <declname>column</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/record_batch.h" line="130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_record_batch_1ab1d52e71896674c0e4790d7db1d3d9ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref> &gt; &gt;</type>
        <definition>virtual Result&lt;std::shared_ptr&lt;RecordBatch&gt; &gt; arrow::RecordBatch::AddColumn</definition>
        <argsstring>(int i, std::string field_name, const std::shared_ptr&lt; Array &gt; &amp;column) const</argsstring>
        <name>AddColumn</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>field_name</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; &amp;</type>
          <declname>column</declname>
        </param>
        <briefdescription>
<para>Add new nullable column to the record batch, producing a new <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>For non-nullable columns, use the Field-based version of this method.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i</parametername>
</parameternamelist>
<parameterdescription>
<para>field index, which will be boundschecked </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">field_name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of field to be added </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">column</parametername>
</parameternamelist>
<parameterdescription>
<para>column to be added </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/record_batch.h" line="142" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_record_batch_1aba6bef82c6e8f0084c024cce8ebf86d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::RecordBatch::AddColumn</definition>
        <argsstring>(int i, std::string field_name, const std::shared_ptr&lt; Array &gt; &amp;column, std::shared_ptr&lt; RecordBatch &gt; *out) const</argsstring>
        <name>AddColumn</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>field_name</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; &amp;</type>
          <declname>column</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/record_batch.h" line="146" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_record_batch_1a3e9353d8d24a59e09b1d61118f1256a8" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref> &gt; &gt;</type>
        <definition>virtual Result&lt;std::shared_ptr&lt;RecordBatch&gt; &gt; arrow::RecordBatch::RemoveColumn</definition>
        <argsstring>(int i) const =0</argsstring>
        <name>RemoveColumn</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Remove column from the record batch, producing a new <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">i</parametername>
</parameternamelist>
<parameterdescription>
<para>field index, does boundscheck </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/record_batch.h" line="152" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_record_batch_1a30a918fdc7344244569626a429b1db44" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::RecordBatch::RemoveColumn</definition>
        <argsstring>(int i, std::shared_ptr&lt; RecordBatch &gt; *out) const</argsstring>
        <name>RemoveColumn</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/record_batch.h" line="155" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_record_batch_1a2132c8cd9b758fc2d5fad4e9042f3abc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref> &gt;</type>
        <definition>virtual std::shared_ptr&lt;RecordBatch&gt; arrow::RecordBatch::ReplaceSchemaMetadata</definition>
        <argsstring>(const std::shared_ptr&lt; const KeyValueMetadata &gt; &amp;metadata) const =0</argsstring>
        <name>ReplaceSchemaMetadata</name>
        <param>
          <type>const std::shared_ptr&lt; const <ref refid="classarrow_1_1_key_value_metadata" kindref="compound">KeyValueMetadata</ref> &gt; &amp;</type>
          <declname>metadata</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/record_batch.h" line="157" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_record_batch_1a0bd1bad353a59444d1f9ace0590eb0b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; arrow::RecordBatch::column_name</definition>
        <argsstring>(int i) const</argsstring>
        <name>column_name</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
<para>Name in i-th column. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/record_batch.h" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_record_batch_1a9cc71f8b2e351ea3e432686172f34546" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int arrow::RecordBatch::num_columns</definition>
        <argsstring>() const</argsstring>
        <name>num_columns</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of columns in the table </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/record_batch.h" line="164" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_record_batch_1aa1012641ffba9c70786dffbb2bb76d4f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t arrow::RecordBatch::num_rows</definition>
        <argsstring>() const</argsstring>
        <name>num_rows</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of rows (the corresponding length of each column) </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/record_batch.h" line="167" column="1" bodyfile="/arrow/cpp/src/arrow/record_batch.h" bodystart="167" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_record_batch_1a41f7ab5460497bbbbf54d02c10277bad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref> &gt;</type>
        <definition>virtual std::shared_ptr&lt;RecordBatch&gt; arrow::RecordBatch::Slice</definition>
        <argsstring>(int64_t offset) const</argsstring>
        <name>Slice</name>
        <param>
          <type>int64_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Slice each of the arrays in the record batch. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>the starting offset to slice, through end of batch </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new record batch </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/record_batch.h" line="172" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_record_batch_1afb8a0265b3b63463d533362341c0ed8a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref> &gt;</type>
        <definition>virtual std::shared_ptr&lt;RecordBatch&gt; arrow::RecordBatch::Slice</definition>
        <argsstring>(int64_t offset, int64_t length) const =0</argsstring>
        <name>Slice</name>
        <param>
          <type>int64_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>length</declname>
        </param>
        <briefdescription>
<para>Slice each of the arrays in the record batch. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">offset</parametername>
</parameternamelist>
<parameterdescription>
<para>the starting offset to slice </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">length</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of elements to slice from offset </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new record batch </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/record_batch.h" line="178" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_record_batch_1a8f351c307a2f924c2278c98df0d255c6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arrow::RecordBatch::ToString</definition>
        <argsstring>() const</argsstring>
        <name>ToString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>PrettyPrint representation suitable for debugging </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/record_batch.h" line="181" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_record_batch_1a7b30a4c8ae99b8f21527983ed0622a76" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>virtual Status arrow::RecordBatch::Validate</definition>
        <argsstring>() const</argsstring>
        <name>Validate</name>
        <briefdescription>
<para>Perform cheap validation checks to determine obvious inconsistencies within the record batch&apos;s schema and internal data. </para>        </briefdescription>
        <detaileddescription>
<para>This is O(k) where k is the total number of fields and array descendents.</para><para><simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/record_batch.h" line="189" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_record_batch_1a23583cb9f8da0f3f636e227a16ef8d0b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>virtual Status arrow::RecordBatch::ValidateFull</definition>
        <argsstring>() const</argsstring>
        <name>ValidateFull</name>
        <briefdescription>
<para>Perform extensive validation checks to determine inconsistencies within the record batch&apos;s schema and internal data. </para>        </briefdescription>
        <detaileddescription>
<para>This is potentially O(k*n) where n is the number of rows.</para><para><simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/record_batch.h" line="197" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1_record_batch_1af78e1d65d18d8a015ca5fa2b9742f37f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;RecordBatch&gt; arrow::RecordBatch::Make</definition>
        <argsstring>(std::shared_ptr&lt; Schema &gt; schema, int64_t num_rows, std::vector&lt; std::shared_ptr&lt; Array &gt;&gt; columns)</argsstring>
        <name>Make</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt;</type>
          <declname>schema</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>num_rows</declname>
        </param>
        <param>
          <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt;&gt;</type>
          <declname>columns</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">schema</parametername>
</parameternamelist>
<parameterdescription>
<para>The record batch schema </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">num_rows</parametername>
</parameternamelist>
<parameterdescription>
<para>length of fields in the record batch. Each array should have the same length as num_rows </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">columns</parametername>
</parameternamelist>
<parameterdescription>
<para>the record batch fields as vector of arrays </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/record_batch.h" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_record_batch_1a9381cc0a7e1744c00e285af7067f9f1a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;RecordBatch&gt; arrow::RecordBatch::Make</definition>
        <argsstring>(std::shared_ptr&lt; Schema &gt; schema, int64_t num_rows, std::vector&lt; std::shared_ptr&lt; ArrayData &gt;&gt; columns)</argsstring>
        <name>Make</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt;</type>
          <declname>schema</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>num_rows</declname>
        </param>
        <param>
          <type>std::vector&lt; std::shared_ptr&lt; <ref refid="structarrow_1_1_array_data" kindref="compound">ArrayData</ref> &gt;&gt;</type>
          <declname>columns</declname>
        </param>
        <briefdescription>
<para>Construct record batch from vector of internal data structures. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="since"><para>0.5.0</para></simplesect>
This class is intended for internal use, or advanced users.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>schema</parametername>
</parameternamelist>
<parameterdescription>
<para>the record batch schema </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>num_rows</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of semantic rows in the record batch. This should be equal to the length of each field </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>columns</parametername>
</parameternamelist>
<parameterdescription>
<para>the data for the batch&apos;s columns </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/record_batch.h" line="59" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_record_batch_1a33f17d79b12656fa430e24c56f5a33f3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref> &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;RecordBatch&gt; &gt; arrow::RecordBatch::FromStructArray</definition>
        <argsstring>(const std::shared_ptr&lt; Array &gt; &amp;array)</argsstring>
        <name>FromStructArray</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Construct record batch from struct array. </para>        </briefdescription>
        <detaileddescription>
<para>This constructs a record batch using the child arrays of the given array, which must be a struct array. Note that the struct array&apos;s own null bitmap is not reflected in the resulting record batch. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/record_batch.h" line="78" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_record_batch_1a589fe4694a2c39c7bf507cc18b00342a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::RecordBatch::FromStructArray</definition>
        <argsstring>(const std::shared_ptr&lt; Array &gt; &amp;array, std::shared_ptr&lt; RecordBatch &gt; *out)</argsstring>
        <name>FromStructArray</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; &amp;</type>
          <declname>array</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/record_batch.h" line="82" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classarrow_1_1_record_batch_1a9fa033d8c32b5754eada93238da7bfc6" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::RecordBatch::RecordBatch</definition>
        <argsstring>(const std::shared_ptr&lt; Schema &gt; &amp;schema, int64_t num_rows)</argsstring>
        <name>RecordBatch</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt; &amp;</type>
          <declname>schema</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>num_rows</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/record_batch.h" line="200" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classarrow_1_1_record_batch_1abc602cf9d4b79e6cbd5a640042ba71a3" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::RecordBatch::ARROW_DISALLOW_COPY_AND_ASSIGN</definition>
        <argsstring>(RecordBatch)</argsstring>
        <name>ARROW_DISALLOW_COPY_AND_ASSIGN</name>
        <param>
          <type><ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/record_batch.h" line="206" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Collection of equal-length arrays matching a particular <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref>. </para>    </briefdescription>
    <detaileddescription>
<para>A record batch is table-like data structure that is semantically a sequence of fields, each a contiguous Arrow array </para>    </detaileddescription>
    <location file="/arrow/cpp/src/arrow/record_batch.h" line="38" column="1" bodyfile="/arrow/cpp/src/arrow/record_batch.h" bodystart="38" bodyend="207"/>
    <listofallmembers>
      <member refid="classarrow_1_1_record_batch_1ae9df570cc6b4d8d092a21d531273cbb2" prot="public" virt="pure-virtual"><scope>arrow::RecordBatch</scope><name>AddColumn</name></member>
      <member refid="classarrow_1_1_record_batch_1ac2f3275848c63fb174379a7496d20297" prot="public" virt="non-virtual"><scope>arrow::RecordBatch</scope><name>AddColumn</name></member>
      <member refid="classarrow_1_1_record_batch_1ab1d52e71896674c0e4790d7db1d3d9ad" prot="public" virt="virtual"><scope>arrow::RecordBatch</scope><name>AddColumn</name></member>
      <member refid="classarrow_1_1_record_batch_1aba6bef82c6e8f0084c024cce8ebf86d2" prot="public" virt="non-virtual"><scope>arrow::RecordBatch</scope><name>AddColumn</name></member>
      <member refid="classarrow_1_1_record_batch_1ae5f6c3764a9b0a8473fb9736c67f8dab" prot="public" virt="non-virtual"><scope>arrow::RecordBatch</scope><name>ApproxEquals</name></member>
      <member refid="classarrow_1_1_record_batch_1abc602cf9d4b79e6cbd5a640042ba71a3" prot="private" virt="non-virtual"><scope>arrow::RecordBatch</scope><name>ARROW_DISALLOW_COPY_AND_ASSIGN</name></member>
      <member refid="classarrow_1_1_record_batch_1a45e8089b23491c64ae5fbe5b93f8b1c0" prot="public" virt="pure-virtual"><scope>arrow::RecordBatch</scope><name>column</name></member>
      <member refid="classarrow_1_1_record_batch_1a6e61dc823f7ae23d661a4acaa462cf03" prot="public" virt="pure-virtual"><scope>arrow::RecordBatch</scope><name>column_data</name></member>
      <member refid="classarrow_1_1_record_batch_1aba91d7076c24dde01218fe71785f6053" prot="public" virt="pure-virtual"><scope>arrow::RecordBatch</scope><name>column_data</name></member>
      <member refid="classarrow_1_1_record_batch_1a0bd1bad353a59444d1f9ace0590eb0b4" prot="public" virt="non-virtual"><scope>arrow::RecordBatch</scope><name>column_name</name></member>
      <member refid="classarrow_1_1_record_batch_1afaafcd11c10c2e149238cfc639dd306a" prot="public" virt="non-virtual"><scope>arrow::RecordBatch</scope><name>columns</name></member>
      <member refid="classarrow_1_1_record_batch_1a47c8573fed66267952960c821556d1ea" prot="public" virt="non-virtual"><scope>arrow::RecordBatch</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_record_batch_1a33f17d79b12656fa430e24c56f5a33f3" prot="public" virt="non-virtual"><scope>arrow::RecordBatch</scope><name>FromStructArray</name></member>
      <member refid="classarrow_1_1_record_batch_1a589fe4694a2c39c7bf507cc18b00342a" prot="public" virt="non-virtual"><scope>arrow::RecordBatch</scope><name>FromStructArray</name></member>
      <member refid="classarrow_1_1_record_batch_1ad03d7ec8857ab13350e791b9632e3563" prot="public" virt="non-virtual"><scope>arrow::RecordBatch</scope><name>GetColumnByName</name></member>
      <member refid="classarrow_1_1_record_batch_1af78e1d65d18d8a015ca5fa2b9742f37f" prot="public" virt="non-virtual"><scope>arrow::RecordBatch</scope><name>Make</name></member>
      <member refid="classarrow_1_1_record_batch_1a9381cc0a7e1744c00e285af7067f9f1a" prot="public" virt="non-virtual"><scope>arrow::RecordBatch</scope><name>Make</name></member>
      <member refid="classarrow_1_1_record_batch_1a9cc71f8b2e351ea3e432686172f34546" prot="public" virt="non-virtual"><scope>arrow::RecordBatch</scope><name>num_columns</name></member>
      <member refid="classarrow_1_1_record_batch_1aa1012641ffba9c70786dffbb2bb76d4f" prot="public" virt="non-virtual"><scope>arrow::RecordBatch</scope><name>num_rows</name></member>
      <member refid="classarrow_1_1_record_batch_1aa62597221dab95400905423cc0155611" prot="protected" virt="non-virtual"><scope>arrow::RecordBatch</scope><name>num_rows_</name></member>
      <member refid="classarrow_1_1_record_batch_1a9fa033d8c32b5754eada93238da7bfc6" prot="protected" virt="non-virtual"><scope>arrow::RecordBatch</scope><name>RecordBatch</name></member>
      <member refid="classarrow_1_1_record_batch_1a3e9353d8d24a59e09b1d61118f1256a8" prot="public" virt="pure-virtual"><scope>arrow::RecordBatch</scope><name>RemoveColumn</name></member>
      <member refid="classarrow_1_1_record_batch_1a30a918fdc7344244569626a429b1db44" prot="public" virt="non-virtual"><scope>arrow::RecordBatch</scope><name>RemoveColumn</name></member>
      <member refid="classarrow_1_1_record_batch_1a2132c8cd9b758fc2d5fad4e9042f3abc" prot="public" virt="pure-virtual"><scope>arrow::RecordBatch</scope><name>ReplaceSchemaMetadata</name></member>
      <member refid="classarrow_1_1_record_batch_1ab12ff2c2d5cca56fc185f9a4dfc64395" prot="public" virt="non-virtual"><scope>arrow::RecordBatch</scope><name>schema</name></member>
      <member refid="classarrow_1_1_record_batch_1a7ca77d78199001da4f3fd99ffd035922" prot="protected" virt="non-virtual"><scope>arrow::RecordBatch</scope><name>schema_</name></member>
      <member refid="classarrow_1_1_record_batch_1a41f7ab5460497bbbbf54d02c10277bad" prot="public" virt="virtual"><scope>arrow::RecordBatch</scope><name>Slice</name></member>
      <member refid="classarrow_1_1_record_batch_1afb8a0265b3b63463d533362341c0ed8a" prot="public" virt="pure-virtual"><scope>arrow::RecordBatch</scope><name>Slice</name></member>
      <member refid="classarrow_1_1_record_batch_1a8f351c307a2f924c2278c98df0d255c6" prot="public" virt="non-virtual"><scope>arrow::RecordBatch</scope><name>ToString</name></member>
      <member refid="classarrow_1_1_record_batch_1ac35bab2c8781711e54d5a4a66e8e01ea" prot="public" virt="non-virtual"><scope>arrow::RecordBatch</scope><name>ToStructArray</name></member>
      <member refid="classarrow_1_1_record_batch_1abf7bd312304bcb92e6a9100c855c2b86" prot="public" virt="non-virtual"><scope>arrow::RecordBatch</scope><name>ToStructArray</name></member>
      <member refid="classarrow_1_1_record_batch_1a7b30a4c8ae99b8f21527983ed0622a76" prot="public" virt="virtual"><scope>arrow::RecordBatch</scope><name>Validate</name></member>
      <member refid="classarrow_1_1_record_batch_1a23583cb9f8da0f3f636e227a16ef8d0b" prot="public" virt="virtual"><scope>arrow::RecordBatch</scope><name>ValidateFull</name></member>
      <member refid="classarrow_1_1_record_batch_1a2605e9ac846d543eb84c01cf5225d253" prot="public" virt="virtual"><scope>arrow::RecordBatch</scope><name>~RecordBatch</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
