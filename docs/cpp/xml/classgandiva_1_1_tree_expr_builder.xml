<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classgandiva_1_1_tree_expr_builder" kind="class" language="C++" prot="public">
    <compoundname>gandiva::TreeExprBuilder</compoundname>
    <includes refid="tree__expr__builder_8h" local="no">gandiva/tree_expr_builder.h</includes>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classgandiva_1_1_tree_expr_builder_1a04a1ef6fe9f36d67067ce93ff786d3e9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
        <definition>static NodePtr gandiva::TreeExprBuilder::MakeLiteral</definition>
        <argsstring>(bool value)</argsstring>
        <name>MakeLiteral</name>
        <param>
          <type>bool</type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>create a node on a literal. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/tree_expr_builder.h" line="37" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_tree_expr_builder_1a135ffe93ae5432adf5bf08687dba24a7" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
        <definition>static NodePtr gandiva::TreeExprBuilder::MakeLiteral</definition>
        <argsstring>(uint8_t value)</argsstring>
        <name>MakeLiteral</name>
        <param>
          <type>uint8_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/tree_expr_builder.h" line="38" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_tree_expr_builder_1a65099b59b06d24a7580a547bc96148d8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
        <definition>static NodePtr gandiva::TreeExprBuilder::MakeLiteral</definition>
        <argsstring>(uint16_t value)</argsstring>
        <name>MakeLiteral</name>
        <param>
          <type>uint16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/tree_expr_builder.h" line="39" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_tree_expr_builder_1aea13cbc98d25882f180d2abbf5f44996" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
        <definition>static NodePtr gandiva::TreeExprBuilder::MakeLiteral</definition>
        <argsstring>(uint32_t value)</argsstring>
        <name>MakeLiteral</name>
        <param>
          <type>uint32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/tree_expr_builder.h" line="40" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_tree_expr_builder_1a4e95f44a3d98dc56bdb73b9f33628632" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
        <definition>static NodePtr gandiva::TreeExprBuilder::MakeLiteral</definition>
        <argsstring>(uint64_t value)</argsstring>
        <name>MakeLiteral</name>
        <param>
          <type>uint64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/tree_expr_builder.h" line="41" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_tree_expr_builder_1a4c5393c4278b3789e322d1697c65d06b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
        <definition>static NodePtr gandiva::TreeExprBuilder::MakeLiteral</definition>
        <argsstring>(int8_t value)</argsstring>
        <name>MakeLiteral</name>
        <param>
          <type>int8_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/tree_expr_builder.h" line="42" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_tree_expr_builder_1a97c48e0b0865711340ce853f4278a7ae" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
        <definition>static NodePtr gandiva::TreeExprBuilder::MakeLiteral</definition>
        <argsstring>(int16_t value)</argsstring>
        <name>MakeLiteral</name>
        <param>
          <type>int16_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/tree_expr_builder.h" line="43" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_tree_expr_builder_1aff3b3f642448862d37cfe7f9801f6608" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
        <definition>static NodePtr gandiva::TreeExprBuilder::MakeLiteral</definition>
        <argsstring>(int32_t value)</argsstring>
        <name>MakeLiteral</name>
        <param>
          <type>int32_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/tree_expr_builder.h" line="44" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_tree_expr_builder_1ae46c90c329b7428369da77c936211345" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
        <definition>static NodePtr gandiva::TreeExprBuilder::MakeLiteral</definition>
        <argsstring>(int64_t value)</argsstring>
        <name>MakeLiteral</name>
        <param>
          <type>int64_t</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/tree_expr_builder.h" line="45" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_tree_expr_builder_1a8dadf4b82bf7a53da6e043fb8da5002d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
        <definition>static NodePtr gandiva::TreeExprBuilder::MakeLiteral</definition>
        <argsstring>(float value)</argsstring>
        <name>MakeLiteral</name>
        <param>
          <type>float</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/tree_expr_builder.h" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_tree_expr_builder_1ae0f5d8c5feb58284f84ff79e94d0ae13" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
        <definition>static NodePtr gandiva::TreeExprBuilder::MakeLiteral</definition>
        <argsstring>(double value)</argsstring>
        <name>MakeLiteral</name>
        <param>
          <type>double</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/tree_expr_builder.h" line="47" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_tree_expr_builder_1a169b9a972a98313459ee5f350c51b6aa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
        <definition>static NodePtr gandiva::TreeExprBuilder::MakeStringLiteral</definition>
        <argsstring>(const std::string &amp;value)</argsstring>
        <name>MakeStringLiteral</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/tree_expr_builder.h" line="48" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_tree_expr_builder_1a4bd0b2c6611f26bb19eed9cd9c287df9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
        <definition>static NodePtr gandiva::TreeExprBuilder::MakeBinaryLiteral</definition>
        <argsstring>(const std::string &amp;value)</argsstring>
        <name>MakeBinaryLiteral</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/tree_expr_builder.h" line="49" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_tree_expr_builder_1a28fadd9ff5d4f0972e2c35d80c771808" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
        <definition>static NodePtr gandiva::TreeExprBuilder::MakeDecimalLiteral</definition>
        <argsstring>(const DecimalScalar128 &amp;value)</argsstring>
        <name>MakeDecimalLiteral</name>
        <param>
          <type>const <ref refid="classgandiva_1_1_decimal_scalar128" kindref="compound">DecimalScalar128</ref> &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/tree_expr_builder.h" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_tree_expr_builder_1aaa6d86773fd49a6cbd9b948054f8639d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
        <definition>static NodePtr gandiva::TreeExprBuilder::MakeNull</definition>
        <argsstring>(DataTypePtr data_type)</argsstring>
        <name>MakeNull</name>
        <param>
          <type><ref refid="namespacegandiva_1a3e3446d98cf1dcf281b0d3f6c16a65d3" kindref="member">DataTypePtr</ref></type>
          <declname>data_type</declname>
        </param>
        <briefdescription>
<para>create a node on a null literal. </para>        </briefdescription>
        <detaileddescription>
<para>returns null if data_type is null or if it&apos;s not a supported datatype. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/tree_expr_builder.h" line="54" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_tree_expr_builder_1a627e66aedadd483c62c4574e3d56b996" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
        <definition>static NodePtr gandiva::TreeExprBuilder::MakeField</definition>
        <argsstring>(FieldPtr field)</argsstring>
        <name>MakeField</name>
        <param>
          <type><ref refid="namespacegandiva_1a8202d69b17c893247edc1c7653412438" kindref="member">FieldPtr</ref></type>
          <declname>field</declname>
        </param>
        <briefdescription>
<para>create a node on arrow field. </para>        </briefdescription>
        <detaileddescription>
<para>returns null if input is null. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/tree_expr_builder.h" line="58" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_tree_expr_builder_1a5af6415984b66fe5ab66eb5bac6fcd38" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
        <definition>static NodePtr gandiva::TreeExprBuilder::MakeFunction</definition>
        <argsstring>(const std::string &amp;name, const NodeVector &amp;params, DataTypePtr return_type)</argsstring>
        <name>MakeFunction</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegandiva_1ab396cd9ee14fd2c9a0ac0bffc034bd62" kindref="member">NodeVector</ref> &amp;</type>
          <declname>params</declname>
        </param>
        <param>
          <type><ref refid="namespacegandiva_1a3e3446d98cf1dcf281b0d3f6c16a65d3" kindref="member">DataTypePtr</ref></type>
          <declname>return_type</declname>
        </param>
        <briefdescription>
<para>create a node with a function. </para>        </briefdescription>
        <detaileddescription>
<para>returns null if return_type is null </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/tree_expr_builder.h" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_tree_expr_builder_1ad2d5a05319e424718ab448b58e96570e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
        <definition>static NodePtr gandiva::TreeExprBuilder::MakeIf</definition>
        <argsstring>(NodePtr condition, NodePtr then_node, NodePtr else_node, DataTypePtr result_type)</argsstring>
        <name>MakeIf</name>
        <param>
          <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
          <declname>condition</declname>
        </param>
        <param>
          <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
          <declname>then_node</declname>
        </param>
        <param>
          <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
          <declname>else_node</declname>
        </param>
        <param>
          <type><ref refid="namespacegandiva_1a3e3446d98cf1dcf281b0d3f6c16a65d3" kindref="member">DataTypePtr</ref></type>
          <declname>result_type</declname>
        </param>
        <briefdescription>
<para>create a node with an if-else expression. </para>        </briefdescription>
        <detaileddescription>
<para>returns null if any of the inputs is null. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/tree_expr_builder.h" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_tree_expr_builder_1af190d76854f6ea9bf1490eac0d855e7c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
        <definition>static NodePtr gandiva::TreeExprBuilder::MakeAnd</definition>
        <argsstring>(const NodeVector &amp;children)</argsstring>
        <name>MakeAnd</name>
        <param>
          <type>const <ref refid="namespacegandiva_1ab396cd9ee14fd2c9a0ac0bffc034bd62" kindref="member">NodeVector</ref> &amp;</type>
          <declname>children</declname>
        </param>
        <briefdescription>
<para>create a node with a boolean AND expression. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/tree_expr_builder.h" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_tree_expr_builder_1a95e9ba77c0b908db4a64dcc67d095751" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
        <definition>static NodePtr gandiva::TreeExprBuilder::MakeOr</definition>
        <argsstring>(const NodeVector &amp;children)</argsstring>
        <name>MakeOr</name>
        <param>
          <type>const <ref refid="namespacegandiva_1ab396cd9ee14fd2c9a0ac0bffc034bd62" kindref="member">NodeVector</ref> &amp;</type>
          <declname>children</declname>
        </param>
        <briefdescription>
<para>create a node with a boolean OR expression. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/tree_expr_builder.h" line="74" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_tree_expr_builder_1adbd17b9a69e6c29bb6f838ef0bf8d4d5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1a6735ddd686b37cdc7cda5f33008497c9" kindref="member">ExpressionPtr</ref></type>
        <definition>static ExpressionPtr gandiva::TreeExprBuilder::MakeExpression</definition>
        <argsstring>(NodePtr root_node, FieldPtr result_field)</argsstring>
        <name>MakeExpression</name>
        <param>
          <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
          <declname>root_node</declname>
        </param>
        <param>
          <type><ref refid="namespacegandiva_1a8202d69b17c893247edc1c7653412438" kindref="member">FieldPtr</ref></type>
          <declname>result_field</declname>
        </param>
        <briefdescription>
<para>create an expression with the specified root_node, and the result written to result_field. </para>        </briefdescription>
        <detaileddescription>
<para>returns null if the result_field is null. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/tree_expr_builder.h" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_tree_expr_builder_1aba52f83d347ef7b8022c7fb32e0a7e96" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1a6735ddd686b37cdc7cda5f33008497c9" kindref="member">ExpressionPtr</ref></type>
        <definition>static ExpressionPtr gandiva::TreeExprBuilder::MakeExpression</definition>
        <argsstring>(const std::string &amp;function, const FieldVector &amp;in_fields, FieldPtr out_field)</argsstring>
        <name>MakeExpression</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>function</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegandiva_1adb95d509a13fa694f593ecb37a7c68ac" kindref="member">FieldVector</ref> &amp;</type>
          <declname>in_fields</declname>
        </param>
        <param>
          <type><ref refid="namespacegandiva_1a8202d69b17c893247edc1c7653412438" kindref="member">FieldPtr</ref></type>
          <declname>out_field</declname>
        </param>
        <briefdescription>
<para>convenience function for simple function expressions. </para>        </briefdescription>
        <detaileddescription>
<para>returns null if the out_field is null. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/tree_expr_builder.h" line="83" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_tree_expr_builder_1afda2d0cfe39189ef159716ae35579a8c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1ac50f3d4579d827449480b7d45be3529f" kindref="member">ConditionPtr</ref></type>
        <definition>static ConditionPtr gandiva::TreeExprBuilder::MakeCondition</definition>
        <argsstring>(NodePtr root_node)</argsstring>
        <name>MakeCondition</name>
        <param>
          <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
          <declname>root_node</declname>
        </param>
        <briefdescription>
<para>create a condition with the specified root_node </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/tree_expr_builder.h" line="87" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_tree_expr_builder_1ad76d6d174df3bf2bdd41a1d58a7498ca" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1ac50f3d4579d827449480b7d45be3529f" kindref="member">ConditionPtr</ref></type>
        <definition>static ConditionPtr gandiva::TreeExprBuilder::MakeCondition</definition>
        <argsstring>(const std::string &amp;function, const FieldVector &amp;in_fields)</argsstring>
        <name>MakeCondition</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>function</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegandiva_1adb95d509a13fa694f593ecb37a7c68ac" kindref="member">FieldVector</ref> &amp;</type>
          <declname>in_fields</declname>
        </param>
        <briefdescription>
<para>convenience function for simple function conditions. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/tree_expr_builder.h" line="90" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_tree_expr_builder_1a88bfd64edacf462573b2af45444cc794" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
        <definition>static NodePtr gandiva::TreeExprBuilder::MakeInExpressionInt32</definition>
        <argsstring>(NodePtr node, const std::unordered_set&lt; int32_t &gt; &amp;constants)</argsstring>
        <name>MakeInExpressionInt32</name>
        <param>
          <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
          <declname>node</declname>
        </param>
        <param>
          <type>const std::unordered_set&lt; int32_t &gt; &amp;</type>
          <declname>constants</declname>
        </param>
        <briefdescription>
<para>creates an in expression </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/tree_expr_builder.h" line="94" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_tree_expr_builder_1a9026db369d1debe0cf0a8b36ca6bef28" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
        <definition>static NodePtr gandiva::TreeExprBuilder::MakeInExpressionInt64</definition>
        <argsstring>(NodePtr node, const std::unordered_set&lt; int64_t &gt; &amp;constants)</argsstring>
        <name>MakeInExpressionInt64</name>
        <param>
          <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
          <declname>node</declname>
        </param>
        <param>
          <type>const std::unordered_set&lt; int64_t &gt; &amp;</type>
          <declname>constants</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/tree_expr_builder.h" line="97" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_tree_expr_builder_1a786ddd3c4f3b5d8ff3e64b07b39c3b9a" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
        <definition>static NodePtr gandiva::TreeExprBuilder::MakeInExpressionString</definition>
        <argsstring>(NodePtr node, const std::unordered_set&lt; std::string &gt; &amp;constants)</argsstring>
        <name>MakeInExpressionString</name>
        <param>
          <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
          <declname>node</declname>
        </param>
        <param>
          <type>const std::unordered_set&lt; std::string &gt; &amp;</type>
          <declname>constants</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/tree_expr_builder.h" line="100" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_tree_expr_builder_1a26758546c1fd3e7ae35fa7fb63e61d74" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
        <definition>static NodePtr gandiva::TreeExprBuilder::MakeInExpressionBinary</definition>
        <argsstring>(NodePtr node, const std::unordered_set&lt; std::string &gt; &amp;constants)</argsstring>
        <name>MakeInExpressionBinary</name>
        <param>
          <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
          <declname>node</declname>
        </param>
        <param>
          <type>const std::unordered_set&lt; std::string &gt; &amp;</type>
          <declname>constants</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/tree_expr_builder.h" line="103" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_tree_expr_builder_1a6bccfce16df34a406e26a0884c0884a9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
        <definition>static NodePtr gandiva::TreeExprBuilder::MakeInExpressionDate32</definition>
        <argsstring>(NodePtr node, const std::unordered_set&lt; int32_t &gt; &amp;constants)</argsstring>
        <name>MakeInExpressionDate32</name>
        <param>
          <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
          <declname>node</declname>
        </param>
        <param>
          <type>const std::unordered_set&lt; int32_t &gt; &amp;</type>
          <declname>constants</declname>
        </param>
        <briefdescription>
<para>Date as s/millis since epoch. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/tree_expr_builder.h" line="107" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_tree_expr_builder_1a69f96150da5d7ca6d0ab1807f3347226" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
        <definition>static NodePtr gandiva::TreeExprBuilder::MakeInExpressionDate64</definition>
        <argsstring>(NodePtr node, const std::unordered_set&lt; int64_t &gt; &amp;constants)</argsstring>
        <name>MakeInExpressionDate64</name>
        <param>
          <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
          <declname>node</declname>
        </param>
        <param>
          <type>const std::unordered_set&lt; int64_t &gt; &amp;</type>
          <declname>constants</declname>
        </param>
        <briefdescription>
<para>Date as millis/us/ns since epoch. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/tree_expr_builder.h" line="111" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_tree_expr_builder_1a871571bf39d27c7d991ee0446c19f7aa" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
        <definition>static NodePtr gandiva::TreeExprBuilder::MakeInExpressionTime32</definition>
        <argsstring>(NodePtr node, const std::unordered_set&lt; int32_t &gt; &amp;constants)</argsstring>
        <name>MakeInExpressionTime32</name>
        <param>
          <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
          <declname>node</declname>
        </param>
        <param>
          <type>const std::unordered_set&lt; int32_t &gt; &amp;</type>
          <declname>constants</declname>
        </param>
        <briefdescription>
<para>Time as s/millis of day. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/tree_expr_builder.h" line="115" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_tree_expr_builder_1ac329306ef6fd5a20ae59dee184055113" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
        <definition>static NodePtr gandiva::TreeExprBuilder::MakeInExpressionTime64</definition>
        <argsstring>(NodePtr node, const std::unordered_set&lt; int64_t &gt; &amp;constants)</argsstring>
        <name>MakeInExpressionTime64</name>
        <param>
          <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
          <declname>node</declname>
        </param>
        <param>
          <type>const std::unordered_set&lt; int64_t &gt; &amp;</type>
          <declname>constants</declname>
        </param>
        <briefdescription>
<para>Time as millis/us/ns of day. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/tree_expr_builder.h" line="119" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_tree_expr_builder_1a74c22fb5f7d32734144cafd312674661" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
        <definition>static NodePtr gandiva::TreeExprBuilder::MakeInExpressionTimeStamp</definition>
        <argsstring>(NodePtr node, const std::unordered_set&lt; int64_t &gt; &amp;constants)</argsstring>
        <name>MakeInExpressionTimeStamp</name>
        <param>
          <type><ref refid="namespacegandiva_1aaf741be1e0ab1897069ab26377793d63" kindref="member">NodePtr</ref></type>
          <declname>node</declname>
        </param>
        <param>
          <type>const std::unordered_set&lt; int64_t &gt; &amp;</type>
          <declname>constants</declname>
        </param>
        <briefdescription>
<para>Timestamp as millis since epoch. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/tree_expr_builder.h" line="123" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Tree Builder for a nested expression. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/gandiva/tree_expr_builder.h" line="34" column="1" bodyfile="/arrow/cpp/src/gandiva/tree_expr_builder.h" bodystart="34" bodyend="125"/>
    <listofallmembers>
      <member refid="classgandiva_1_1_tree_expr_builder_1af190d76854f6ea9bf1490eac0d855e7c" prot="public" virt="non-virtual"><scope>gandiva::TreeExprBuilder</scope><name>MakeAnd</name></member>
      <member refid="classgandiva_1_1_tree_expr_builder_1a4bd0b2c6611f26bb19eed9cd9c287df9" prot="public" virt="non-virtual"><scope>gandiva::TreeExprBuilder</scope><name>MakeBinaryLiteral</name></member>
      <member refid="classgandiva_1_1_tree_expr_builder_1afda2d0cfe39189ef159716ae35579a8c" prot="public" virt="non-virtual"><scope>gandiva::TreeExprBuilder</scope><name>MakeCondition</name></member>
      <member refid="classgandiva_1_1_tree_expr_builder_1ad76d6d174df3bf2bdd41a1d58a7498ca" prot="public" virt="non-virtual"><scope>gandiva::TreeExprBuilder</scope><name>MakeCondition</name></member>
      <member refid="classgandiva_1_1_tree_expr_builder_1a28fadd9ff5d4f0972e2c35d80c771808" prot="public" virt="non-virtual"><scope>gandiva::TreeExprBuilder</scope><name>MakeDecimalLiteral</name></member>
      <member refid="classgandiva_1_1_tree_expr_builder_1adbd17b9a69e6c29bb6f838ef0bf8d4d5" prot="public" virt="non-virtual"><scope>gandiva::TreeExprBuilder</scope><name>MakeExpression</name></member>
      <member refid="classgandiva_1_1_tree_expr_builder_1aba52f83d347ef7b8022c7fb32e0a7e96" prot="public" virt="non-virtual"><scope>gandiva::TreeExprBuilder</scope><name>MakeExpression</name></member>
      <member refid="classgandiva_1_1_tree_expr_builder_1a627e66aedadd483c62c4574e3d56b996" prot="public" virt="non-virtual"><scope>gandiva::TreeExprBuilder</scope><name>MakeField</name></member>
      <member refid="classgandiva_1_1_tree_expr_builder_1a5af6415984b66fe5ab66eb5bac6fcd38" prot="public" virt="non-virtual"><scope>gandiva::TreeExprBuilder</scope><name>MakeFunction</name></member>
      <member refid="classgandiva_1_1_tree_expr_builder_1ad2d5a05319e424718ab448b58e96570e" prot="public" virt="non-virtual"><scope>gandiva::TreeExprBuilder</scope><name>MakeIf</name></member>
      <member refid="classgandiva_1_1_tree_expr_builder_1a26758546c1fd3e7ae35fa7fb63e61d74" prot="public" virt="non-virtual"><scope>gandiva::TreeExprBuilder</scope><name>MakeInExpressionBinary</name></member>
      <member refid="classgandiva_1_1_tree_expr_builder_1a6bccfce16df34a406e26a0884c0884a9" prot="public" virt="non-virtual"><scope>gandiva::TreeExprBuilder</scope><name>MakeInExpressionDate32</name></member>
      <member refid="classgandiva_1_1_tree_expr_builder_1a69f96150da5d7ca6d0ab1807f3347226" prot="public" virt="non-virtual"><scope>gandiva::TreeExprBuilder</scope><name>MakeInExpressionDate64</name></member>
      <member refid="classgandiva_1_1_tree_expr_builder_1a88bfd64edacf462573b2af45444cc794" prot="public" virt="non-virtual"><scope>gandiva::TreeExprBuilder</scope><name>MakeInExpressionInt32</name></member>
      <member refid="classgandiva_1_1_tree_expr_builder_1a9026db369d1debe0cf0a8b36ca6bef28" prot="public" virt="non-virtual"><scope>gandiva::TreeExprBuilder</scope><name>MakeInExpressionInt64</name></member>
      <member refid="classgandiva_1_1_tree_expr_builder_1a786ddd3c4f3b5d8ff3e64b07b39c3b9a" prot="public" virt="non-virtual"><scope>gandiva::TreeExprBuilder</scope><name>MakeInExpressionString</name></member>
      <member refid="classgandiva_1_1_tree_expr_builder_1a871571bf39d27c7d991ee0446c19f7aa" prot="public" virt="non-virtual"><scope>gandiva::TreeExprBuilder</scope><name>MakeInExpressionTime32</name></member>
      <member refid="classgandiva_1_1_tree_expr_builder_1ac329306ef6fd5a20ae59dee184055113" prot="public" virt="non-virtual"><scope>gandiva::TreeExprBuilder</scope><name>MakeInExpressionTime64</name></member>
      <member refid="classgandiva_1_1_tree_expr_builder_1a74c22fb5f7d32734144cafd312674661" prot="public" virt="non-virtual"><scope>gandiva::TreeExprBuilder</scope><name>MakeInExpressionTimeStamp</name></member>
      <member refid="classgandiva_1_1_tree_expr_builder_1a04a1ef6fe9f36d67067ce93ff786d3e9" prot="public" virt="non-virtual"><scope>gandiva::TreeExprBuilder</scope><name>MakeLiteral</name></member>
      <member refid="classgandiva_1_1_tree_expr_builder_1a135ffe93ae5432adf5bf08687dba24a7" prot="public" virt="non-virtual"><scope>gandiva::TreeExprBuilder</scope><name>MakeLiteral</name></member>
      <member refid="classgandiva_1_1_tree_expr_builder_1a65099b59b06d24a7580a547bc96148d8" prot="public" virt="non-virtual"><scope>gandiva::TreeExprBuilder</scope><name>MakeLiteral</name></member>
      <member refid="classgandiva_1_1_tree_expr_builder_1aea13cbc98d25882f180d2abbf5f44996" prot="public" virt="non-virtual"><scope>gandiva::TreeExprBuilder</scope><name>MakeLiteral</name></member>
      <member refid="classgandiva_1_1_tree_expr_builder_1a4e95f44a3d98dc56bdb73b9f33628632" prot="public" virt="non-virtual"><scope>gandiva::TreeExprBuilder</scope><name>MakeLiteral</name></member>
      <member refid="classgandiva_1_1_tree_expr_builder_1a4c5393c4278b3789e322d1697c65d06b" prot="public" virt="non-virtual"><scope>gandiva::TreeExprBuilder</scope><name>MakeLiteral</name></member>
      <member refid="classgandiva_1_1_tree_expr_builder_1a97c48e0b0865711340ce853f4278a7ae" prot="public" virt="non-virtual"><scope>gandiva::TreeExprBuilder</scope><name>MakeLiteral</name></member>
      <member refid="classgandiva_1_1_tree_expr_builder_1aff3b3f642448862d37cfe7f9801f6608" prot="public" virt="non-virtual"><scope>gandiva::TreeExprBuilder</scope><name>MakeLiteral</name></member>
      <member refid="classgandiva_1_1_tree_expr_builder_1ae46c90c329b7428369da77c936211345" prot="public" virt="non-virtual"><scope>gandiva::TreeExprBuilder</scope><name>MakeLiteral</name></member>
      <member refid="classgandiva_1_1_tree_expr_builder_1a8dadf4b82bf7a53da6e043fb8da5002d" prot="public" virt="non-virtual"><scope>gandiva::TreeExprBuilder</scope><name>MakeLiteral</name></member>
      <member refid="classgandiva_1_1_tree_expr_builder_1ae0f5d8c5feb58284f84ff79e94d0ae13" prot="public" virt="non-virtual"><scope>gandiva::TreeExprBuilder</scope><name>MakeLiteral</name></member>
      <member refid="classgandiva_1_1_tree_expr_builder_1aaa6d86773fd49a6cbd9b948054f8639d" prot="public" virt="non-virtual"><scope>gandiva::TreeExprBuilder</scope><name>MakeNull</name></member>
      <member refid="classgandiva_1_1_tree_expr_builder_1a95e9ba77c0b908db4a64dcc67d095751" prot="public" virt="non-virtual"><scope>gandiva::TreeExprBuilder</scope><name>MakeOr</name></member>
      <member refid="classgandiva_1_1_tree_expr_builder_1a169b9a972a98313459ee5f350c51b6aa" prot="public" virt="non-virtual"><scope>gandiva::TreeExprBuilder</scope><name>MakeStringLiteral</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
