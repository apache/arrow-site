<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacearrow_1_1dataset" kind="namespace" language="C++">
    <compoundname>arrow::dataset</compoundname>
    <innerclass refid="classarrow_1_1dataset_1_1_and_expression" prot="public">arrow::dataset::AndExpression</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_binary_expression" prot="public">arrow::dataset::BinaryExpression</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_cast_expression" prot="public">arrow::dataset::CastExpression</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_comparison_expression" prot="public">arrow::dataset::ComparisonExpression</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_custom_expression" prot="public">arrow::dataset::CustomExpression</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_dataset" prot="public">arrow::dataset::Dataset</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_dataset_factory" prot="public">arrow::dataset::DatasetFactory</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_default_partitioning" prot="public">arrow::dataset::DefaultPartitioning</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_directory_partitioning" prot="public">arrow::dataset::DirectoryPartitioning</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_expression" prot="public">arrow::dataset::Expression</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_expression_evaluator" prot="public">arrow::dataset::ExpressionEvaluator</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_expression_impl" prot="public">arrow::dataset::ExpressionImpl</innerclass>
    <innerclass refid="structarrow_1_1dataset_1_1_expression_type" prot="public">arrow::dataset::ExpressionType</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_field_expression" prot="public">arrow::dataset::FieldExpression</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_file_format" prot="public">arrow::dataset::FileFormat</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_file_fragment" prot="public">arrow::dataset::FileFragment</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_file_source" prot="public">arrow::dataset::FileSource</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_file_system_dataset" prot="public">arrow::dataset::FileSystemDataset</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_file_system_dataset_factory" prot="public">arrow::dataset::FileSystemDatasetFactory</innerclass>
    <innerclass refid="structarrow_1_1dataset_1_1_file_system_factory_options" prot="public">arrow::dataset::FileSystemFactoryOptions</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_filter_and_project_scan_task" prot="public">arrow::dataset::FilterAndProjectScanTask</innerclass>
    <innerclass refid="structarrow_1_1dataset_1_1_finish_options" prot="public">arrow::dataset::FinishOptions</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_fragment" prot="public">arrow::dataset::Fragment</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_function_partitioning" prot="public">arrow::dataset::FunctionPartitioning</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_hive_partitioning" prot="public">arrow::dataset::HivePartitioning</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_in_expression" prot="public">arrow::dataset::InExpression</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_in_memory_dataset" prot="public">arrow::dataset::InMemoryDataset</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_in_memory_fragment" prot="public">arrow::dataset::InMemoryFragment</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_in_memory_scan_task" prot="public">arrow::dataset::InMemoryScanTask</innerclass>
    <innerclass refid="structarrow_1_1dataset_1_1_inspect_options" prot="public">arrow::dataset::InspectOptions</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_ipc_file_format" prot="public">arrow::dataset::IpcFileFormat</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_is_valid_expression" prot="public">arrow::dataset::IsValidExpression</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_key_value_partitioning" prot="public">arrow::dataset::KeyValuePartitioning</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_not_expression" prot="public">arrow::dataset::NotExpression</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_or_expression" prot="public">arrow::dataset::OrExpression</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_parquet_file_format" prot="public">arrow::dataset::ParquetFileFormat</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_parquet_file_fragment" prot="public">arrow::dataset::ParquetFileFragment</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_partitioning" prot="public">arrow::dataset::Partitioning</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_partitioning_factory" prot="public">arrow::dataset::PartitioningFactory</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_partitioning_or_factory" prot="public">arrow::dataset::PartitioningOrFactory</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_record_batch_projector" prot="public">arrow::dataset::RecordBatchProjector</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_scalar_expression" prot="public">arrow::dataset::ScalarExpression</innerclass>
    <innerclass refid="structarrow_1_1dataset_1_1_scan_context" prot="public">arrow::dataset::ScanContext</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_scanner" prot="public">arrow::dataset::Scanner</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_scanner_builder" prot="public">arrow::dataset::ScannerBuilder</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_scan_options" prot="public">arrow::dataset::ScanOptions</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_scan_task" prot="public">arrow::dataset::ScanTask</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_segment_dictionary_partitioning" prot="public">arrow::dataset::SegmentDictionaryPartitioning</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_tree_evaluator" prot="public">arrow::dataset::TreeEvaluator</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_unary_expression" prot="public">arrow::dataset::UnaryExpression</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_union_dataset" prot="public">arrow::dataset::UnionDataset</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_union_dataset_factory" prot="public">arrow::dataset::UnionDatasetFactory</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_write_plan" prot="public">arrow::dataset::WritePlan</innerclass>
    <innerclass refid="classarrow_1_1dataset_1_1_write_task" prot="public">arrow::dataset::WriteTask</innerclass>
    <innernamespace refid="namespacearrow_1_1dataset_1_1string__literals">arrow::dataset::string_literals</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="namespacearrow_1_1dataset_1a97fdb65914e23bed4df3bb02b4e66981" prot="public" static="no">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1dataset_1_1_dataset" kindref="compound">Dataset</ref> &gt; &gt;</type>
        <definition>using arrow::dataset::DatasetVector = typedef std::vector&lt;std::shared_ptr&lt;Dataset&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>DatasetVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/type_fwd.h" line="45" column="1" bodyfile="/arrow/cpp/src/arrow/dataset/type_fwd.h" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacearrow_1_1dataset_1a6270dc3eca80575744d55456da9447c2" prot="public" static="no">
        <type><ref refid="classarrow_1_1_iterator" kindref="compound">Iterator</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1dataset_1_1_fragment" kindref="compound">Fragment</ref> &gt; &gt;</type>
        <definition>using arrow::dataset::FragmentIterator = typedef Iterator&lt;std::shared_ptr&lt;Fragment&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>FragmentIterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/type_fwd.h" line="48" column="1" bodyfile="/arrow/cpp/src/arrow/dataset/type_fwd.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacearrow_1_1dataset_1a8286c830ee882f779b0e6055158f65cc" prot="public" static="no">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1dataset_1_1_fragment" kindref="compound">Fragment</ref> &gt; &gt;</type>
        <definition>using arrow::dataset::FragmentVector = typedef std::vector&lt;std::shared_ptr&lt;Fragment&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>FragmentVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/type_fwd.h" line="49" column="1" bodyfile="/arrow/cpp/src/arrow/dataset/type_fwd.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacearrow_1_1dataset_1a2b7f7d9324d77bc7b43a96f1b09f5001" prot="public" static="no">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref> &gt; &gt;</type>
        <definition>using arrow::dataset::ExpressionVector = typedef std::vector&lt;std::shared_ptr&lt;Expression&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>ExpressionVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/type_fwd.h" line="62" column="1" bodyfile="/arrow/cpp/src/arrow/dataset/type_fwd.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacearrow_1_1dataset_1af5b29e15257ef093fbba4f65d5815dec" prot="public" static="no">
        <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1dataset_1_1_scan_task" kindref="compound">ScanTask</ref> &gt; &gt;</type>
        <definition>using arrow::dataset::ScanTaskVector = typedef std::vector&lt;std::shared_ptr&lt;ScanTask&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>ScanTaskVector</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/type_fwd.h" line="92" column="1" bodyfile="/arrow/cpp/src/arrow/dataset/type_fwd.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="namespacearrow_1_1dataset_1a43ffb5f1e9c4b4e7a7b95e434e32a169" prot="public" static="no">
        <type><ref refid="classarrow_1_1_iterator" kindref="compound">Iterator</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1dataset_1_1_scan_task" kindref="compound">ScanTask</ref> &gt; &gt;</type>
        <definition>using arrow::dataset::ScanTaskIterator = typedef Iterator&lt;std::shared_ptr&lt;ScanTask&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>ScanTaskIterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/type_fwd.h" line="93" column="1" bodyfile="/arrow/cpp/src/arrow/dataset/type_fwd.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacearrow_1_1dataset_1a69667b1cf74159561dbb4dd2e0992df8" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacearrow_1_1dataset_1a6270dc3eca80575744d55456da9447c2" kindref="member">FragmentIterator</ref></type>
        <definition>static FragmentIterator arrow::dataset::GetFragmentsFromDatasets</definition>
        <argsstring>(const DatasetVector &amp;datasets, std::shared_ptr&lt; ScanOptions &gt; options)</argsstring>
        <name>GetFragmentsFromDatasets</name>
        <param>
          <type>const <ref refid="namespacearrow_1_1dataset_1a97fdb65914e23bed4df3bb02b4e66981" kindref="member">DatasetVector</ref> &amp;</type>
          <declname>datasets</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1dataset_1_1_scan_options" kindref="compound">ScanOptions</ref> &gt;</type>
          <declname>options</declname>
        </param>
        <briefdescription>
<para>GetFragmentsFromDatasets transforms a vector&lt;Dataset&gt; into a flattened FragmentIterator. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/dataset_internal.h" line="37" column="1" bodyfile="/arrow/cpp/src/arrow/dataset/dataset_internal.h" bodystart="37" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1dataset_1a044734f2461671ec8b23fadaea92dfdf" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacearrow_1a98532acfa6b99a8c35c14d2484cd65bb" kindref="member">RecordBatchIterator</ref></type>
        <definition>static RecordBatchIterator arrow::dataset::IteratorFromReader</definition>
        <argsstring>(std::shared_ptr&lt; RecordBatchReader &gt; reader)</argsstring>
        <name>IteratorFromReader</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_record_batch_reader" kindref="compound">RecordBatchReader</ref> &gt;</type>
          <declname>reader</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/dataset_internal.h" line="54" column="1" bodyfile="/arrow/cpp/src/arrow/dataset/dataset_internal.h" bodystart="54" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1dataset_1aa3783c340aa2cfb6294b0a9ce3a80252" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;Schema&gt; arrow::dataset::SchemaFromColumnNames</definition>
        <argsstring>(const std::shared_ptr&lt; Schema &gt; &amp;input, const std::vector&lt; std::string &gt; &amp;column_names)</argsstring>
        <name>SchemaFromColumnNames</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt; &amp;</type>
          <declname>input</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>column_names</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/dataset_internal.h" line="59" column="1" bodyfile="/arrow/cpp/src/arrow/dataset/dataset_internal.h" bodystart="59" bodyend="70"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1dataset_1a5d63b36287db7c429b1418d63518680b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2dataset_2visibility_8h_1a8dd8d57cd1ce7b38ce34aa040b68a6b7" kindref="member">ARROW_DS_EXPORT</ref> std::shared_ptr&lt; <ref refid="classarrow_1_1dataset_1_1_and_expression" kindref="compound">AndExpression</ref> &gt;</type>
        <definition>ARROW_DS_EXPORT std::shared_ptr&lt;AndExpression&gt; arrow::dataset::and_</definition>
        <argsstring>(std::shared_ptr&lt; Expression &gt; lhs, std::shared_ptr&lt; Expression &gt; rhs)</argsstring>
        <name>and_</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref> &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref> &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/filter.h" line="439" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1dataset_1a4474b844c1459541b9c5ef9c47cfe031" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2dataset_2visibility_8h_1a8dd8d57cd1ce7b38ce34aa040b68a6b7" kindref="member">ARROW_DS_EXPORT</ref> std::shared_ptr&lt; <ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref> &gt;</type>
        <definition>ARROW_DS_EXPORT std::shared_ptr&lt;Expression&gt; arrow::dataset::and_</definition>
        <argsstring>(const ExpressionVector &amp;subexpressions)</argsstring>
        <name>and_</name>
        <param>
          <type>const <ref refid="namespacearrow_1_1dataset_1a2b7f7d9324d77bc7b43a96f1b09f5001" kindref="member">ExpressionVector</ref> &amp;</type>
          <declname>subexpressions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/filter.h" line="442" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1dataset_1a97fb68ccfd0fb66654b124725d354008" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2dataset_2visibility_8h_1a8dd8d57cd1ce7b38ce34aa040b68a6b7" kindref="member">ARROW_DS_EXPORT</ref> <ref refid="classarrow_1_1dataset_1_1_and_expression" kindref="compound">AndExpression</ref></type>
        <definition>ARROW_DS_EXPORT AndExpression arrow::dataset::operator&amp;&amp;</definition>
        <argsstring>(const Expression &amp;lhs, const Expression &amp;rhs)</argsstring>
        <name>operator &amp;&amp;</name>
        <param>
          <type>const <ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/filter.h" line="444" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1dataset_1a8075d0e76f7e41aca2ba87e8dd97d7d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2dataset_2visibility_8h_1a8dd8d57cd1ce7b38ce34aa040b68a6b7" kindref="member">ARROW_DS_EXPORT</ref> std::shared_ptr&lt; <ref refid="classarrow_1_1dataset_1_1_or_expression" kindref="compound">OrExpression</ref> &gt;</type>
        <definition>ARROW_DS_EXPORT std::shared_ptr&lt;OrExpression&gt; arrow::dataset::or_</definition>
        <argsstring>(std::shared_ptr&lt; Expression &gt; lhs, std::shared_ptr&lt; Expression &gt; rhs)</argsstring>
        <name>or_</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref> &gt;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref> &gt;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/filter.h" line="446" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1dataset_1a646b44ac3edbd789164805fea83ec91d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2dataset_2visibility_8h_1a8dd8d57cd1ce7b38ce34aa040b68a6b7" kindref="member">ARROW_DS_EXPORT</ref> std::shared_ptr&lt; <ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref> &gt;</type>
        <definition>ARROW_DS_EXPORT std::shared_ptr&lt;Expression&gt; arrow::dataset::or_</definition>
        <argsstring>(const ExpressionVector &amp;subexpressions)</argsstring>
        <name>or_</name>
        <param>
          <type>const <ref refid="namespacearrow_1_1dataset_1a2b7f7d9324d77bc7b43a96f1b09f5001" kindref="member">ExpressionVector</ref> &amp;</type>
          <declname>subexpressions</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/filter.h" line="449" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1dataset_1a59ab0466ab3e1f9910c05b91e4e72c2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2dataset_2visibility_8h_1a8dd8d57cd1ce7b38ce34aa040b68a6b7" kindref="member">ARROW_DS_EXPORT</ref> <ref refid="classarrow_1_1dataset_1_1_or_expression" kindref="compound">OrExpression</ref></type>
        <definition>ARROW_DS_EXPORT OrExpression arrow::dataset::operator||</definition>
        <argsstring>(const Expression &amp;lhs, const Expression &amp;rhs)</argsstring>
        <name>operator||</name>
        <param>
          <type>const <ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/filter.h" line="451" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1dataset_1a3058878af14d68822141e49ab3986dd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2dataset_2visibility_8h_1a8dd8d57cd1ce7b38ce34aa040b68a6b7" kindref="member">ARROW_DS_EXPORT</ref> std::shared_ptr&lt; <ref refid="classarrow_1_1dataset_1_1_not_expression" kindref="compound">NotExpression</ref> &gt;</type>
        <definition>ARROW_DS_EXPORT std::shared_ptr&lt;NotExpression&gt; arrow::dataset::not_</definition>
        <argsstring>(std::shared_ptr&lt; Expression &gt; operand)</argsstring>
        <name>not_</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref> &gt;</type>
          <declname>operand</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/filter.h" line="453" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1dataset_1adf8b44e79ce70631fc12e75d6bf3e207" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2dataset_2visibility_8h_1a8dd8d57cd1ce7b38ce34aa040b68a6b7" kindref="member">ARROW_DS_EXPORT</ref> <ref refid="classarrow_1_1dataset_1_1_not_expression" kindref="compound">NotExpression</ref></type>
        <definition>ARROW_DS_EXPORT NotExpression arrow::dataset::operator!</definition>
        <argsstring>(const Expression &amp;rhs)</argsstring>
        <name>operator!</name>
        <param>
          <type>const <ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/filter.h" line="455" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1dataset_1abbc0528fcaf8fe939da7b3784bb120d4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1dataset_1_1_scalar_expression" kindref="compound">ScalarExpression</ref> &gt;</type>
        <definition>std::shared_ptr&lt;ScalarExpression&gt; arrow::dataset::scalar</definition>
        <argsstring>(std::shared_ptr&lt; Scalar &gt; value)</argsstring>
        <name>scalar</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="structarrow_1_1_scalar" kindref="compound">Scalar</ref> &gt;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/filter.h" line="457" column="1" bodyfile="/arrow/cpp/src/arrow/dataset/filter.h" bodystart="457" bodyend="459"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1dataset_1af8dde5750bbce95449c6752de07c0b11" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto arrow::dataset::scalar</definition>
        <argsstring>(T &amp;&amp;value) -&gt; decltype(scalar(MakeScalar(std::forward&lt; T &gt;(value))))</argsstring>
        <name>scalar</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/filter.h" line="462" column="1" bodyfile="/arrow/cpp/src/arrow/dataset/filter.h" bodystart="462" bodyend="464"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1dataset_1abf7e2c331809b06808fd7f46400595ea" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1dataset_1_1_field_expression" kindref="compound">FieldExpression</ref> &gt;</type>
        <definition>std::shared_ptr&lt;FieldExpression&gt; arrow::dataset::field_ref</definition>
        <argsstring>(std::string name)</argsstring>
        <name>field_ref</name>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/filter.h" line="492" column="1" bodyfile="/arrow/cpp/src/arrow/dataset/filter.h" bodystart="492" bodyend="494"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1dataset_1a57ae27e6da86581df9e4615313d75674" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Visitor</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto arrow::dataset::VisitExpression</definition>
        <argsstring>(const Expression &amp;expr, Visitor &amp;&amp;visitor) -&gt; decltype(visitor(expr))</argsstring>
        <name>VisitExpression</name>
        <param>
          <type>const <ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref> &amp;</type>
          <declname>expr</declname>
        </param>
        <param>
          <type>Visitor &amp;&amp;</type>
          <declname>visitor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/filter.h" line="514" column="1" bodyfile="/arrow/cpp/src/arrow/dataset/filter.h" bodystart="514" bodyend="549"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1dataset_1a95b827aceba2fc24b3a2882ef5684a94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2dataset_2visibility_8h_1a8dd8d57cd1ce7b38ce34aa040b68a6b7" kindref="member">ARROW_DS_EXPORT</ref> <ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref> &gt; &gt;</type>
        <definition>ARROW_DS_EXPORT Result&lt;std::shared_ptr&lt;Expression&gt; &gt; arrow::dataset::InsertImplicitCasts</definition>
        <argsstring>(const Expression &amp;expr, const Schema &amp;schema)</argsstring>
        <name>InsertImplicitCasts</name>
        <param>
          <type>const <ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref> &amp;</type>
          <declname>expr</declname>
        </param>
        <param>
          <type>const <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &amp;</type>
          <declname>schema</declname>
        </param>
        <briefdescription>
<para>Insert CastExpressions where necessary to make a valid expression. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/filter.h" line="552" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1dataset_1ac75fca74c726dc902e652c13518362b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2dataset_2visibility_8h_1a8dd8d57cd1ce7b38ce34aa040b68a6b7" kindref="member">ARROW_DS_EXPORT</ref> std::vector&lt; std::string &gt;</type>
        <definition>ARROW_DS_EXPORT std::vector&lt;std::string&gt; arrow::dataset::FieldsInExpression</definition>
        <argsstring>(const Expression &amp;expr)</argsstring>
        <name>FieldsInExpression</name>
        <param>
          <type>const <ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref> &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
<para>Returns field names referenced in the expression. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/filter.h" line="556" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1dataset_1a109be54aba31dc084a2567a79e76eaf2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2dataset_2visibility_8h_1a8dd8d57cd1ce7b38ce34aa040b68a6b7" kindref="member">ARROW_DS_EXPORT</ref> std::vector&lt; std::string &gt;</type>
        <definition>ARROW_DS_EXPORT std::vector&lt;std::string&gt; arrow::dataset::FieldsInExpression</definition>
        <argsstring>(const std::shared_ptr&lt; Expression &gt; &amp;expr)</argsstring>
        <name>FieldsInExpression</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref> &gt; &amp;</type>
          <declname>expr</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/filter.h" line="558" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1dataset_1a65546ed3d641d274df12de3cd8f67717" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2dataset_2visibility_8h_1a8dd8d57cd1ce7b38ce34aa040b68a6b7" kindref="member">ARROW_DS_EXPORT</ref> <ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>ARROW_DS_EXPORT Status arrow::dataset::CheckProjectable</definition>
        <argsstring>(const Schema &amp;from, const Schema &amp;to)</argsstring>
        <name>CheckProjectable</name>
        <param>
          <type>const <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/projector.h" line="30" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1dataset_1a0148791459932f55a1260bcf98952793" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2dataset_2visibility_8h_1a8dd8d57cd1ce7b38ce34aa040b68a6b7" kindref="member">ARROW_DS_EXPORT</ref> <ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; <ref refid="namespacearrow_1_1dataset_1a43ffb5f1e9c4b4e7a7b95e434e32a169" kindref="member">ScanTaskIterator</ref> &gt;</type>
        <definition>ARROW_DS_EXPORT Result&lt;ScanTaskIterator&gt; arrow::dataset::ScanTaskIteratorFromRecordBatch</definition>
        <argsstring>(std::vector&lt; std::shared_ptr&lt; RecordBatch &gt;&gt; batches, std::shared_ptr&lt; ScanOptions &gt; options, std::shared_ptr&lt; ScanContext &gt;)</argsstring>
        <name>ScanTaskIteratorFromRecordBatch</name>
        <param>
          <type>std::vector&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref> &gt;&gt;</type>
          <declname>batches</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1dataset_1_1_scan_options" kindref="compound">ScanOptions</ref> &gt;</type>
          <declname>options</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="structarrow_1_1dataset_1_1_scan_context" kindref="compound">ScanContext</ref> &gt;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/scanner.h" line="140" column="1"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1dataset_1a4db76706150f42601ac86862a86dfcc6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacearrow_1a98532acfa6b99a8c35c14d2484cd65bb" kindref="member">RecordBatchIterator</ref></type>
        <definition>RecordBatchIterator arrow::dataset::FilterRecordBatch</definition>
        <argsstring>(RecordBatchIterator it, const ExpressionEvaluator &amp;evaluator, const Expression &amp;filter, MemoryPool *pool)</argsstring>
        <name>FilterRecordBatch</name>
        <param>
          <type><ref refid="namespacearrow_1a98532acfa6b99a8c35c14d2484cd65bb" kindref="member">RecordBatchIterator</ref></type>
          <declname>it</declname>
        </param>
        <param>
          <type>const <ref refid="classarrow_1_1dataset_1_1_expression_evaluator" kindref="compound">ExpressionEvaluator</ref> &amp;</type>
          <declname>evaluator</declname>
        </param>
        <param>
          <type>const <ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref> &amp;</type>
          <declname>filter</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/scanner_internal.h" line="30" column="1" bodyfile="/arrow/cpp/src/arrow/dataset/scanner_internal.h" bodystart="30" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1dataset_1ace97a080df0e959a9f4855d244069319" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacearrow_1a98532acfa6b99a8c35c14d2484cd65bb" kindref="member">RecordBatchIterator</ref></type>
        <definition>RecordBatchIterator arrow::dataset::ProjectRecordBatch</definition>
        <argsstring>(RecordBatchIterator it, RecordBatchProjector *projector, MemoryPool *pool)</argsstring>
        <name>ProjectRecordBatch</name>
        <param>
          <type><ref refid="namespacearrow_1a98532acfa6b99a8c35c14d2484cd65bb" kindref="member">RecordBatchIterator</ref></type>
          <declname>it</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1dataset_1_1_record_batch_projector" kindref="compound">RecordBatchProjector</ref> *</type>
          <declname>projector</declname>
        </param>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/scanner_internal.h" line="42" column="1" bodyfile="/arrow/cpp/src/arrow/dataset/scanner_internal.h" bodystart="42" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1dataset_1a8ea16a7a87de6f22706e4e287b7cd8b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="namespacearrow_1_1dataset_1a43ffb5f1e9c4b4e7a7b95e434e32a169" kindref="member">ScanTaskIterator</ref></type>
        <definition>ScanTaskIterator arrow::dataset::GetScanTaskIterator</definition>
        <argsstring>(FragmentIterator fragments, std::shared_ptr&lt; ScanContext &gt; context)</argsstring>
        <name>GetScanTaskIterator</name>
        <param>
          <type><ref refid="namespacearrow_1_1dataset_1a6270dc3eca80575744d55456da9447c2" kindref="member">FragmentIterator</ref></type>
          <declname>fragments</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="structarrow_1_1dataset_1_1_scan_context" kindref="compound">ScanContext</ref> &gt;</type>
          <declname>context</declname>
        </param>
        <briefdescription>
<para>GetScanTaskIterator transforms an Iterator&lt;Fragment&gt; in a flattened Iterator&lt;ScanTask&gt;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/scanner_internal.h" line="75" column="1" bodyfile="/arrow/cpp/src/arrow/dataset/scanner_internal.h" bodystart="75" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="namespacearrow_1_1dataset_1a56f730cfefe7aaa3663be9d90c206de9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="arrow_2dataset_2visibility_8h_1a8dd8d57cd1ce7b38ce34aa040b68a6b7" kindref="member">ARROW_DS_EXPORT</ref> std::shared_ptr&lt; <ref refid="classarrow_1_1dataset_1_1_scalar_expression" kindref="compound">ScalarExpression</ref> &gt;</type>
        <definition>ARROW_DS_EXPORT std::shared_ptr&lt;ScalarExpression&gt; arrow::dataset::scalar</definition>
        <argsstring>(bool)</argsstring>
        <name>scalar</name>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
<para>forward declared to facilitate scalar(true) as a default for <ref refid="classarrow_1_1dataset_1_1_expression" kindref="compound">Expression</ref> parameters </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/dataset/type_fwd.h" line="77" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/arrow/dataset/dataset.h" line="31" column="1"/>
  </compounddef>
</doxygen>
