<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classgandiva_1_1_literal_node" kind="class" language="C++" prot="public">
    <compoundname>gandiva::LiteralNode</compoundname>
    <basecompoundref refid="classgandiva_1_1_node" prot="public" virt="non-virtual">gandiva::Node</basecompoundref>
    <includes refid="node_8h" local="no">gandiva/node.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classgandiva_1_1_literal_node_1a78f474f43138169f7b7ed071dbdf186f" prot="private" static="no" mutable="no">
        <type><ref refid="namespacegandiva_1aa31f7f112a6f719fa79ed0980df84cba" kindref="member">LiteralHolder</ref></type>
        <definition>LiteralHolder gandiva::LiteralNode::holder_</definition>
        <argsstring></argsstring>
        <name>holder_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/node.h" line="93" column="1" bodyfile="/arrow/cpp/src/gandiva/node.h" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classgandiva_1_1_literal_node_1a0e7d87cc931467a2fb52e523063e675e" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool gandiva::LiteralNode::is_null_</definition>
        <argsstring></argsstring>
        <name>is_null_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/node.h" line="94" column="1" bodyfile="/arrow/cpp/src/gandiva/node.h" bodystart="94" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classgandiva_1_1_literal_node_1aed15316eeb500be707c80ac8a97d8e71" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>gandiva::LiteralNode::LiteralNode</definition>
        <argsstring>(DataTypePtr type, const LiteralHolder &amp;holder, bool is_null)</argsstring>
        <name>LiteralNode</name>
        <param>
          <type><ref refid="namespacegandiva_1a3e3446d98cf1dcf281b0d3f6c16a65d3" kindref="member">DataTypePtr</ref></type>
          <declname>type</declname>
        </param>
        <param>
          <type>const <ref refid="namespacegandiva_1aa31f7f112a6f719fa79ed0980df84cba" kindref="member">LiteralHolder</ref> &amp;</type>
          <declname>holder</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_null</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/node.h" line="58" column="1" bodyfile="/arrow/cpp/src/gandiva/node.h" bodystart="58" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_literal_node_1a46eca0a068d1ee52911ed8fd97afb672" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="namespacegandiva_1a9d5d996f2ef86ad9af06ccc89bbdb1f8" kindref="member">Status</ref></type>
        <definition>Status gandiva::LiteralNode::Accept</definition>
        <argsstring>(NodeVisitor &amp;visitor) const override</argsstring>
        <name>Accept</name>
        <reimplements refid="classgandiva_1_1_node_1a07a1ab1f2c7f363bdd27cbba8387ffa3">Accept</reimplements>
        <param>
          <type><ref refid="classgandiva_1_1_node_visitor" kindref="compound">NodeVisitor</ref> &amp;</type>
          <declname>visitor</declname>
        </param>
        <briefdescription>
<para>Derived classes should simply invoke the Visit api of the visitor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/node.h" line="61" column="1" bodyfile="/arrow/cpp/src/gandiva/node.h" bodystart="61" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_literal_node_1a9a48d654b88cef11dc43e88127179409" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const <ref refid="namespacegandiva_1aa31f7f112a6f719fa79ed0980df84cba" kindref="member">LiteralHolder</ref> &amp;</type>
        <definition>const LiteralHolder&amp; gandiva::LiteralNode::holder</definition>
        <argsstring>() const</argsstring>
        <name>holder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/node.h" line="63" column="1" bodyfile="/arrow/cpp/src/gandiva/node.h" bodystart="63" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_literal_node_1a59d7d3fd513215959183e9e645524e57" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool gandiva::LiteralNode::is_null</definition>
        <argsstring>() const</argsstring>
        <name>is_null</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/node.h" line="65" column="1" bodyfile="/arrow/cpp/src/gandiva/node.h" bodystart="65" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="classgandiva_1_1_literal_node_1aec1b02a78a7c14d0f14096c480b823fe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string gandiva::LiteralNode::ToString</definition>
        <argsstring>() const override</argsstring>
        <name>ToString</name>
        <reimplements refid="classgandiva_1_1_node_1a7e458c306e2162546c96a9c8eea0eef6">ToString</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/gandiva/node.h" line="67" column="1" bodyfile="/arrow/cpp/src/gandiva/node.h" bodystart="67" bodyend="90"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para><ref refid="classgandiva_1_1_node" kindref="compound">Node</ref> in the expression tree, representing a literal. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2889">
        <label>gandiva::LiteralNode</label>
        <link refid="classgandiva_1_1_literal_node"/>
        <childnode refid="2890" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2890">
        <label>gandiva::Node</label>
        <link refid="classgandiva_1_1_node"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2891">
        <label>gandiva::LiteralNode</label>
        <link refid="classgandiva_1_1_literal_node"/>
        <childnode refid="2892" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2892">
        <label>gandiva::Node</label>
        <link refid="classgandiva_1_1_node"/>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/gandiva/node.h" line="56" column="1" bodyfile="/arrow/cpp/src/gandiva/node.h" bodystart="56" bodyend="95"/>
    <listofallmembers>
      <member refid="classgandiva_1_1_literal_node_1a46eca0a068d1ee52911ed8fd97afb672" prot="public" virt="virtual"><scope>gandiva::LiteralNode</scope><name>Accept</name></member>
      <member refid="classgandiva_1_1_literal_node_1a9a48d654b88cef11dc43e88127179409" prot="public" virt="non-virtual"><scope>gandiva::LiteralNode</scope><name>holder</name></member>
      <member refid="classgandiva_1_1_literal_node_1a78f474f43138169f7b7ed071dbdf186f" prot="private" virt="non-virtual"><scope>gandiva::LiteralNode</scope><name>holder_</name></member>
      <member refid="classgandiva_1_1_literal_node_1a59d7d3fd513215959183e9e645524e57" prot="public" virt="non-virtual"><scope>gandiva::LiteralNode</scope><name>is_null</name></member>
      <member refid="classgandiva_1_1_literal_node_1a0e7d87cc931467a2fb52e523063e675e" prot="private" virt="non-virtual"><scope>gandiva::LiteralNode</scope><name>is_null_</name></member>
      <member refid="classgandiva_1_1_literal_node_1aed15316eeb500be707c80ac8a97d8e71" prot="public" virt="non-virtual"><scope>gandiva::LiteralNode</scope><name>LiteralNode</name></member>
      <member refid="classgandiva_1_1_node_1abb254ba06af6ededc023d840cb4ae4ca" prot="public" virt="non-virtual"><scope>gandiva::LiteralNode</scope><name>Node</name></member>
      <member refid="classgandiva_1_1_node_1ab196d58f5e486a054ff5d49e1d932e83" prot="public" virt="non-virtual"><scope>gandiva::LiteralNode</scope><name>return_type</name></member>
      <member refid="classgandiva_1_1_node_1a01cea0ee791882a488f56df5780874df" prot="protected" virt="non-virtual"><scope>gandiva::LiteralNode</scope><name>return_type_</name></member>
      <member refid="classgandiva_1_1_literal_node_1aec1b02a78a7c14d0f14096c480b823fe" prot="public" virt="virtual"><scope>gandiva::LiteralNode</scope><name>ToString</name></member>
      <member refid="classgandiva_1_1_node_1a8bddcf2654584db4ea12ac393a87b0d3" prot="public" virt="virtual"><scope>gandiva::LiteralNode</scope><name>~Node</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
