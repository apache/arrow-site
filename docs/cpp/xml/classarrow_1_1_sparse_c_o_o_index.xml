<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_sparse_c_o_o_index" kind="class" language="C++" prot="public">
    <compoundname>arrow::SparseCOOIndex</compoundname>
    <basecompoundref prot="public" virt="non-virtual">arrow::internal::SparseIndexBase&lt; SparseCOOIndex &gt;</basecompoundref>
    <includes refid="sparse__tensor_8h" local="no">arrow/sparse_tensor.h</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classarrow_1_1_sparse_c_o_o_index_1ab979e43c76d1c3ffe663a592837981b1" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="structarrow_1_1_sparse_tensor_format_1a0693b2fa5192ae86d525995fe6f64f3a" kindref="member">SparseTensorFormat::type</ref></type>
        <definition>constexpr SparseTensorFormat::type arrow::SparseCOOIndex::format_id</definition>
        <argsstring></argsstring>
        <name>format_id</name>
        <initializer>= <ref refid="structarrow_1_1_sparse_tensor_format_1a0693b2fa5192ae86d525995fe6f64f3aabaa7e5ab93ab151ead4102620d0a15ae" kindref="member">SparseTensorFormat::COO</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="107" column="1" bodyfile="/arrow/cpp/src/arrow/sparse_tensor.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classarrow_1_1_sparse_c_o_o_index_1a3ab7d60dbde319e6be6a78b7c164b302" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_tensor" kindref="compound">Tensor</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Tensor&gt; arrow::SparseCOOIndex::coords_</definition>
        <argsstring></argsstring>
        <name>coords_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="154" column="1" bodyfile="/arrow/cpp/src/arrow/sparse_tensor.h" bodystart="154" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1_sparse_c_o_o_index_1a004af159eeb0416605cc1b3714528a80" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_sparse_c_o_o_index" kindref="compound">SparseCOOIndex</ref> &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;SparseCOOIndex&gt; &gt; arrow::SparseCOOIndex::Make</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;indices_type, const std::vector&lt; int64_t &gt; &amp;indices_shape, const std::vector&lt; int64_t &gt; &amp;indices_strides, std::shared_ptr&lt; Buffer &gt; indices_data)</argsstring>
        <name>Make</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>indices_type</declname>
        </param>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>indices_shape</declname>
        </param>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>indices_strides</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;</type>
          <declname>indices_data</declname>
        </param>
        <briefdescription>
<para>Make <ref refid="classarrow_1_1_sparse_c_o_o_index" kindref="compound">SparseCOOIndex</ref> from raw properties. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="110" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_sparse_c_o_o_index_1a4cc0bf66ee8635d52a92052ecaea3399" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_sparse_c_o_o_index" kindref="compound">SparseCOOIndex</ref> &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;SparseCOOIndex&gt; &gt; arrow::SparseCOOIndex::Make</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;indices_type, const std::vector&lt; int64_t &gt; &amp;shape, int64_t non_zero_length, std::shared_ptr&lt; Buffer &gt; indices_data)</argsstring>
        <name>Make</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>indices_type</declname>
        </param>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>non_zero_length</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;</type>
          <declname>indices_data</declname>
        </param>
        <briefdescription>
<para>Make <ref refid="classarrow_1_1_sparse_c_o_o_index" kindref="compound">SparseCOOIndex</ref> from sparse tensor&apos;s shape properties and data. </para>        </briefdescription>
        <detaileddescription>
<para>The indices_data should be in row-major (C-like) order. If not, use the raw properties constructor. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="119" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1_sparse_c_o_o_index_1aa0532d52ee0549c52b5205a6c5717a96" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::SparseCOOIndex::SparseCOOIndex</definition>
        <argsstring>(const std::shared_ptr&lt; Tensor &gt; &amp;coords)</argsstring>
        <name>SparseCOOIndex</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_tensor" kindref="compound">Tensor</ref> &gt; &amp;</type>
          <declname>coords</declname>
        </param>
        <briefdescription>
<para>Construct <ref refid="classarrow_1_1_sparse_c_o_o_index" kindref="compound">SparseCOOIndex</ref> from column-major <ref refid="classarrow_1_1_numeric_tensor" kindref="compound">NumericTensor</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="124" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_sparse_c_o_o_index_1a7c9d18c0c246d4429dcfbbbf292ec96c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_tensor" kindref="compound">Tensor</ref> &gt; &amp;</type>
        <definition>const std::shared_ptr&lt;Tensor&gt;&amp; arrow::SparseCOOIndex::indices</definition>
        <argsstring>() const</argsstring>
        <name>indices</name>
        <briefdescription>
<para>Return a tensor that has the coordinates of the non-zero values. </para>        </briefdescription>
        <detaileddescription>
<para>The returned tensor is a N x D tensor where N is the number of non-zero values and D is the number of dimensions in the logical data. The column at index <computeroutput>i</computeroutput> is a D-tuple of coordinates indicating that the logical value at those coordinates should be found at physical index <computeroutput>i</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="132" column="1" bodyfile="/arrow/cpp/src/arrow/sparse_tensor.h" bodystart="132" bodyend="132"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_sparse_c_o_o_index_1a729e7fcdcdee32cc17f15d1a478c5a61" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string arrow::SparseCOOIndex::ToString</definition>
        <argsstring>() const override</argsstring>
        <name>ToString</name>
        <reimplements refid="classarrow_1_1_sparse_index_1a87f804e725e7ca43871862eb772f21ee">ToString</reimplements>
        <briefdescription>
<para>Return a string representation of the sparse index. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="135" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_sparse_c_o_o_index_1a11a5a7c5802b17c42d5d6eacc3b4a2ef" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::SparseCOOIndex::Equals</definition>
        <argsstring>(const SparseCOOIndex &amp;other) const</argsstring>
        <name>Equals</name>
        <param>
          <type>const <ref refid="classarrow_1_1_sparse_c_o_o_index" kindref="compound">SparseCOOIndex</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Return whether the COO indices are equal. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="138" column="1" bodyfile="/arrow/cpp/src/arrow/sparse_tensor.h" bodystart="138" bodyend="140"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_sparse_c_o_o_index_1aca914dd313622ea6e3be264053357520" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::SparseCOOIndex::ValidateShape</definition>
        <argsstring>(const std::vector&lt; int64_t &gt; &amp;shape) const override</argsstring>
        <name>ValidateShape</name>
        <reimplements refid="classarrow_1_1_sparse_index_1a9ab0a6d0752c18d422fcb1ce60d9412b">ValidateShape</reimplements>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="142" column="1" bodyfile="/arrow/cpp/src/arrow/sparse_tensor.h" bodystart="142" bodyend="151"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>EXPERIMENTAL: The index data for a COO sparse tensor. </para>    </briefdescription>
    <detaileddescription>
<para>A COO sparse index manages the location of its non-zero values by their coordinates. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="4219">
        <label>arrow::internal::SparseIndexBase&lt; SparseCOOIndex &gt;</label>
        <childnode refid="4220" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4218">
        <label>arrow::SparseCOOIndex</label>
        <link refid="classarrow_1_1_sparse_c_o_o_index"/>
        <childnode refid="4219" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4220">
        <label>arrow::SparseIndex</label>
        <link refid="classarrow_1_1_sparse_index"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="4222">
        <label>arrow::internal::SparseIndexBase&lt; SparseCOOIndex &gt;</label>
        <childnode refid="4223" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4221">
        <label>arrow::SparseCOOIndex</label>
        <link refid="classarrow_1_1_sparse_c_o_o_index"/>
        <childnode refid="4222" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4223">
        <label>arrow::SparseIndex</label>
        <link refid="classarrow_1_1_sparse_index"/>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/sparse_tensor.h" line="105" column="1" bodyfile="/arrow/cpp/src/arrow/sparse_tensor.h" bodystart="105" bodyend="155"/>
    <listofallmembers>
      <member refid="classarrow_1_1_sparse_c_o_o_index_1a3ab7d60dbde319e6be6a78b7c164b302" prot="protected" virt="non-virtual"><scope>arrow::SparseCOOIndex</scope><name>coords_</name></member>
      <member refid="classarrow_1_1_sparse_c_o_o_index_1a11a5a7c5802b17c42d5d6eacc3b4a2ef" prot="public" virt="non-virtual"><scope>arrow::SparseCOOIndex</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_sparse_c_o_o_index_1ab979e43c76d1c3ffe663a592837981b1" prot="public" virt="non-virtual"><scope>arrow::SparseCOOIndex</scope><name>format_id</name></member>
      <member refid="classarrow_1_1_sparse_index_1a1f44c6ddcec5d1f7e40e07bd0cdebe8a" prot="public" virt="non-virtual" ambiguityscope="SparseIndexBase&lt; SparseCOOIndex &gt;::"><scope>arrow::SparseCOOIndex</scope><name>format_id</name></member>
      <member refid="classarrow_1_1_sparse_index_1a69c44ac95e91a2c96e705bb11c0f4559" prot="protected" virt="non-virtual"><scope>arrow::SparseCOOIndex</scope><name>format_id_</name></member>
      <member refid="classarrow_1_1_sparse_c_o_o_index_1a7c9d18c0c246d4429dcfbbbf292ec96c" prot="public" virt="non-virtual"><scope>arrow::SparseCOOIndex</scope><name>indices</name></member>
      <member refid="classarrow_1_1_sparse_c_o_o_index_1a004af159eeb0416605cc1b3714528a80" prot="public" virt="non-virtual"><scope>arrow::SparseCOOIndex</scope><name>Make</name></member>
      <member refid="classarrow_1_1_sparse_c_o_o_index_1a4cc0bf66ee8635d52a92052ecaea3399" prot="public" virt="non-virtual"><scope>arrow::SparseCOOIndex</scope><name>Make</name></member>
      <member refid="classarrow_1_1_sparse_index_1a8ed4f5943abfbc36139f7477056e57b4" prot="public" virt="non-virtual"><scope>arrow::SparseCOOIndex</scope><name>non_zero_length</name></member>
      <member refid="classarrow_1_1_sparse_index_1aafc279016c04336211f8358ac9b8ab66" prot="protected" virt="non-virtual"><scope>arrow::SparseCOOIndex</scope><name>non_zero_length_</name></member>
      <member refid="classarrow_1_1_sparse_c_o_o_index_1aa0532d52ee0549c52b5205a6c5717a96" prot="public" virt="non-virtual"><scope>arrow::SparseCOOIndex</scope><name>SparseCOOIndex</name></member>
      <member refid="classarrow_1_1_sparse_index_1a6a4137b019e068be8b99ba50a5d2e03f" prot="public" virt="non-virtual"><scope>arrow::SparseCOOIndex</scope><name>SparseIndex</name></member>
      <member refid="classarrow_1_1_sparse_c_o_o_index_1a729e7fcdcdee32cc17f15d1a478c5a61" prot="public" virt="virtual"><scope>arrow::SparseCOOIndex</scope><name>ToString</name></member>
      <member refid="classarrow_1_1_sparse_c_o_o_index_1aca914dd313622ea6e3be264053357520" prot="public" virt="virtual"><scope>arrow::SparseCOOIndex</scope><name>ValidateShape</name></member>
      <member refid="classarrow_1_1_sparse_index_1a8832f2b37796039a82c2f81e118efa88" prot="public" virt="virtual"><scope>arrow::SparseCOOIndex</scope><name>~SparseIndex</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
