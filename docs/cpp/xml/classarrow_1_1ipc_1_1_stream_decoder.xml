<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1ipc_1_1_stream_decoder" kind="class" language="C++" prot="public">
    <compoundname>arrow::ipc::StreamDecoder</compoundname>
    <includes refid="arrow_2ipc_2reader_8h" local="no">arrow/ipc/reader.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classarrow_1_1ipc_1_1_stream_decoder_1acb9d9716845d4b761ff2b4881e886c93" prot="private" static="no" mutable="no">
        <type>std::unique_ptr&lt; StreamDecoderImpl &gt;</type>
        <definition>std::unique_ptr&lt;StreamDecoderImpl&gt; arrow::ipc::StreamDecoder::impl_</definition>
        <argsstring></argsstring>
        <name>impl_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/reader.h" line="389" column="1" bodyfile="/arrow/cpp/src/arrow/ipc/reader.h" bodystart="388" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_stream_decoder_1ac5bc8e67864d3f7b1dca7146d79bac43" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::ipc::StreamDecoder::StreamDecoder</definition>
        <argsstring>(std::shared_ptr&lt; Listener &gt; listener, const IpcReadOptions &amp;options=IpcReadOptions::Defaults())</argsstring>
        <name>StreamDecoder</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1ipc_1_1_listener" kindref="compound">Listener</ref> &gt;</type>
          <declname>listener</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1ipc_1_1_ipc_read_options" kindref="compound">IpcReadOptions</ref> &amp;</type>
          <declname>options</declname>
          <defval><ref refid="structarrow_1_1ipc_1_1_ipc_read_options_1a462535c293a55154c71c6a5666d71e17" kindref="member">IpcReadOptions::Defaults</ref>()</defval>
        </param>
        <briefdescription>
<para>Construct a stream decoder. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">listener</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classarrow_1_1ipc_1_1_listener" kindref="compound">Listener</ref> that must implement <ref refid="classarrow_1_1ipc_1_1_listener_1aee30e5b08a255a8a8be87f59b3e17417" kindref="member">Listener::OnRecordBatchDecoded()</ref> to receive decoded record batches </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">options</parametername>
</parameternamelist>
<parameterdescription>
<para>any IPC reading options (optional) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/reader.h" line="293" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_stream_decoder_1a2594b6e5630e0255146d5d37263b6fb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual arrow::ipc::StreamDecoder::~StreamDecoder</definition>
        <argsstring>()</argsstring>
        <name>~StreamDecoder</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/reader.h" line="296" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_stream_decoder_1a2b05c37f754e13c194878e8d240542b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::ipc::StreamDecoder::Consume</definition>
        <argsstring>(const uint8_t *data, int64_t size)</argsstring>
        <name>Consume</name>
        <param>
          <type>const uint8_t *</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Feed data to the decoder as a raw data. </para>        </briefdescription>
        <detaileddescription>
<para>If the decoder can read one or more record batches by the data, the decoder calls listener-&gt;OnRecordBatchDecoded() with a decoded record batch multiple times.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>a raw data to be processed. This data isn&apos;t copied. The passed memory must be kept alive through record batch processing. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>raw data size. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/reader.h" line="309" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_stream_decoder_1a79715886a8a5e3efc71b7e9107eddc98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::ipc::StreamDecoder::Consume</definition>
        <argsstring>(std::shared_ptr&lt; Buffer &gt; buffer)</argsstring>
        <name>Consume</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;</type>
          <declname>buffer</declname>
        </param>
        <briefdescription>
<para>Feed data to the decoder as a <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref>. </para>        </briefdescription>
        <detaileddescription>
<para>If the decoder can read one or more record batches by the <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref>, the decoder calls listener-&gt;RecordBatchReceived() with a decoded record batch multiple times.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>a <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> to be processed. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classarrow_1_1_status" kindref="compound">Status</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/reader.h" line="319" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_stream_decoder_1a1432cd43d83730480d2241e13835ce74" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Schema&gt; arrow::ipc::StreamDecoder::schema</definition>
        <argsstring>() const</argsstring>
        <name>schema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the shared schema of the record batches in the stream </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/reader.h" line="322" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_stream_decoder_1aa8c7ac5a806a8cc89306015095b098d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t arrow::ipc::StreamDecoder::next_required_size</definition>
        <argsstring>() const</argsstring>
        <name>next_required_size</name>
        <briefdescription>
<para>Return the number of bytes needed to advance the state of the decoder. </para>        </briefdescription>
        <detaileddescription>
<para>This method is provided for users who want to optimize performance. Normal users don&apos;t need to use this method.</para><para>Here is an example usage for normal users:</para><para><programlisting><codeline><highlight class="normal">decoder.Consume(buffer1);</highlight></codeline>
<codeline><highlight class="normal">decoder.Consume(buffer2);</highlight></codeline>
<codeline><highlight class="normal">decoder.Consume(buffer3);</highlight></codeline>
</programlisting></para><para>Decoder has internal buffer. If consumed data isn&apos;t enough to advance the state of the decoder, consumed data is buffered to the internal buffer. It causes performance overhead.</para><para>If you pass <ref refid="classarrow_1_1ipc_1_1_stream_decoder_1aa8c7ac5a806a8cc89306015095b098d2" kindref="member">next_required_size()</ref> size data to each <ref refid="classarrow_1_1ipc_1_1_stream_decoder_1a2b05c37f754e13c194878e8d240542b8" kindref="member">Consume()</ref> call, the decoder doesn&apos;t use its internal buffer. It improves performance.</para><para>Here is an example usage to avoid using internal buffer:</para><para><programlisting><codeline><highlight class="normal">buffer1<sp/>=<sp/>get_data(decoder.next_required_size());</highlight></codeline>
<codeline><highlight class="normal">decoder.Consume(buffer1);</highlight></codeline>
<codeline><highlight class="normal">buffer2<sp/>=<sp/>get_data(decoder.next_required_size());</highlight></codeline>
<codeline><highlight class="normal">decoder.Consume(buffer2);</highlight></codeline>
</programlisting></para><para>Users can use this method to avoid creating small chunks. Record batch data must be contiguous data. If users pass small chunks to the decoder, the decoder needs concatenate small chunks internally. It causes performance overhead.</para><para>Here is an example usage to reduce small chunks:</para><para><programlisting><codeline><highlight class="normal">buffer<sp/>=<sp/><ref refid="group__buffer-allocation-functions_1gaa44d72e6284de08b2171a710a01de2d6" kindref="member">AllocateResizableBuffer</ref>();</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>((small_chunk<sp/>=<sp/>get_data(&amp;small_chunk_size)))<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>current_buffer_size<sp/>=<sp/>buffer-&gt;size();</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>buffer-&gt;Resize(current_buffer_size<sp/>+<sp/>small_chunk_size);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>memcpy(buffer-&gt;mutable_data()<sp/>+<sp/>current_buffer_size,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>small_chunk,</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>small_chunk_size);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer-&gt;size()<sp/>&lt;<sp/>decoder.next_requied_size())<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;arrow::Buffer&gt;<sp/>chunk(buffer.release());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>decoder.Consume(chunk);</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>buffer<sp/>=<sp/><ref refid="group__buffer-allocation-functions_1gaa44d72e6284de08b2171a710a01de2d6" kindref="member">AllocateResizableBuffer</ref>();</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
<codeline><highlight class="normal"></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(buffer-&gt;size()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;arrow::Buffer&gt;<sp/>chunk(buffer.release());</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/>decoder.Consume(chunk);</highlight></codeline>
<codeline><highlight class="normal">}</highlight></codeline>
</programlisting></para><para><simplesect kind="return"><para>the number of bytes needed to advance the state of the decoder </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/reader.h" line="385" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classarrow_1_1ipc_1_1_stream_decoder_1ae4e4ca94e24fcbd69de10dcbf6ad515b" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::ipc::StreamDecoder::ARROW_DISALLOW_COPY_AND_ASSIGN</definition>
        <argsstring>(StreamDecoder)</argsstring>
        <name>ARROW_DISALLOW_COPY_AND_ASSIGN</name>
        <param>
          <type><ref refid="classarrow_1_1ipc_1_1_stream_decoder" kindref="compound">StreamDecoder</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/ipc/reader.h" line="391" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Push style stream decoder that receives data from user. </para>    </briefdescription>
    <detaileddescription>
<para>This class decodes the Apache Arrow IPC streaming format data.</para><para>This API is EXPERIMENTAL.</para><para><simplesect kind="see"><para><ulink url="https://arrow.apache.org/docs/format/Columnar.html#ipc-streaming-format">https://arrow.apache.org/docs/format/Columnar.html#ipc-streaming-format</ulink></para></simplesect>
<simplesect kind="since"><para>0.17.0 </para></simplesect>
</para>    </detaileddescription>
    <location file="/arrow/cpp/src/arrow/ipc/reader.h" line="286" column="1" bodyfile="/arrow/cpp/src/arrow/ipc/reader.h" bodystart="286" bodyend="392"/>
    <listofallmembers>
      <member refid="classarrow_1_1ipc_1_1_stream_decoder_1ae4e4ca94e24fcbd69de10dcbf6ad515b" prot="private" virt="non-virtual"><scope>arrow::ipc::StreamDecoder</scope><name>ARROW_DISALLOW_COPY_AND_ASSIGN</name></member>
      <member refid="classarrow_1_1ipc_1_1_stream_decoder_1a2b05c37f754e13c194878e8d240542b8" prot="public" virt="non-virtual"><scope>arrow::ipc::StreamDecoder</scope><name>Consume</name></member>
      <member refid="classarrow_1_1ipc_1_1_stream_decoder_1a79715886a8a5e3efc71b7e9107eddc98" prot="public" virt="non-virtual"><scope>arrow::ipc::StreamDecoder</scope><name>Consume</name></member>
      <member refid="classarrow_1_1ipc_1_1_stream_decoder_1acb9d9716845d4b761ff2b4881e886c93" prot="private" virt="non-virtual"><scope>arrow::ipc::StreamDecoder</scope><name>impl_</name></member>
      <member refid="classarrow_1_1ipc_1_1_stream_decoder_1aa8c7ac5a806a8cc89306015095b098d2" prot="public" virt="non-virtual"><scope>arrow::ipc::StreamDecoder</scope><name>next_required_size</name></member>
      <member refid="classarrow_1_1ipc_1_1_stream_decoder_1a1432cd43d83730480d2241e13835ce74" prot="public" virt="non-virtual"><scope>arrow::ipc::StreamDecoder</scope><name>schema</name></member>
      <member refid="classarrow_1_1ipc_1_1_stream_decoder_1ac5bc8e67864d3f7b1dca7146d79bac43" prot="public" virt="non-virtual"><scope>arrow::ipc::StreamDecoder</scope><name>StreamDecoder</name></member>
      <member refid="classarrow_1_1ipc_1_1_stream_decoder_1a2594b6e5630e0255146d5d37263b6fb5" prot="public" virt="virtual"><scope>arrow::ipc::StreamDecoder</scope><name>~StreamDecoder</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
