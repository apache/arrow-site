<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_tensor" kind="class" language="C++" prot="public">
    <compoundname>arrow::Tensor</compoundname>
    <derivedcompoundref refid="classarrow_1_1_numeric_tensor" prot="public" virt="non-virtual">arrow::NumericTensor&lt; TYPE &gt;</derivedcompoundref>
    <includes refid="tensor_8h" local="no">arrow/tensor.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classarrow_1_1_tensor_1ade1e4a39856e1377baf50c587b11272b" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::Tensor::type_</definition>
        <argsstring></argsstring>
        <name>type_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/tensor.h" line="169" column="1" bodyfile="/arrow/cpp/src/arrow/tensor.h" bodystart="169" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_tensor_1a00dd73d91a790484b94aabcb4fedcdc7" prot="protected" static="no" mutable="no">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Buffer&gt; arrow::Tensor::data_</definition>
        <argsstring></argsstring>
        <name>data_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/tensor.h" line="170" column="1" bodyfile="/arrow/cpp/src/arrow/tensor.h" bodystart="170" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_tensor_1adfbc5876ce2f4c71d5503554a1cba2f2" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; int64_t &gt;</type>
        <definition>std::vector&lt;int64_t&gt; arrow::Tensor::shape_</definition>
        <argsstring></argsstring>
        <name>shape_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/tensor.h" line="171" column="1" bodyfile="/arrow/cpp/src/arrow/tensor.h" bodystart="171" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_tensor_1a5224d67e07ebb71c1c9f83e07bec303f" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; int64_t &gt;</type>
        <definition>std::vector&lt;int64_t&gt; arrow::Tensor::strides_</definition>
        <argsstring></argsstring>
        <name>strides_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/tensor.h" line="172" column="1" bodyfile="/arrow/cpp/src/arrow/tensor.h" bodystart="172" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_tensor_1a84f88a8835ecb20532f89fb804b8ce2a" prot="protected" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; arrow::Tensor::dim_names_</definition>
        <argsstring></argsstring>
        <name>dim_names_</name>
        <briefdescription>
<para>These names are optional. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/tensor.h" line="175" column="1" bodyfile="/arrow/cpp/src/arrow/tensor.h" bodystart="175" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classarrow_1_1_tensor_1a2528b8b7811f0513cfdb3ee8751a010a" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename SparseIndexType</type>
          </param>
        </templateparamlist>
        <type>friend class</type>
        <definition>friend class SparseTensorImpl</definition>
        <argsstring></argsstring>
        <name>SparseTensorImpl</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/tensor.h" line="178" column="1" bodyfile="/arrow/cpp/src/arrow/tensor.h" bodystart="178" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1_tensor_1a85ca08ba70b81e474cef7d9eb73c2b34" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_tensor" kindref="compound">Tensor</ref> &gt; &gt;</type>
        <definition>static Result&lt;std::shared_ptr&lt;Tensor&gt; &gt; arrow::Tensor::Make</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;type, const std::shared_ptr&lt; Buffer &gt; &amp;data, const std::vector&lt; int64_t &gt; &amp;shape, const std::vector&lt; int64_t &gt; &amp;strides={}, const std::vector&lt; std::string &gt; &amp;dim_names={})</argsstring>
        <name>Make</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>strides</declname>
          <defval>{}</defval>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dim_names</declname>
          <defval>{}</defval>
        </param>
        <briefdescription>
<para>Create a <ref refid="classarrow_1_1_tensor" kindref="compound">Tensor</ref> with full parameters. </para>        </briefdescription>
        <detaileddescription>
<para>This factory function will return <ref refid="classarrow_1_1_status_1aa388393c060f3b44316876a630190576" kindref="member">Status::Invalid</ref> when the parameters are inconsistent</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">type</parametername>
</parameternamelist>
<parameterdescription>
<para>The data type of the tensor values </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer of the tensor content </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">shape</parametername>
</parameternamelist>
<parameterdescription>
<para>The shape of the tensor </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">strides</parametername>
</parameternamelist>
<parameterdescription>
<para>The strides of the tensor (if this is empty, the data assumed to be row-major) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">dim_names</parametername>
</parameternamelist>
<parameterdescription>
<para>The names of the tensor dimensions </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/tensor.h" line="86" column="1" bodyfile="/arrow/cpp/src/arrow/tensor.h" bodystart="86" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_tensor_1a78dae60d7cb7cc5a70b61f0cde2c585d" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int64_t</type>
        <definition>static int64_t arrow::Tensor::CalculateValueOffset</definition>
        <argsstring>(const std::vector&lt; int64_t &gt; &amp;strides, const std::vector&lt; int64_t &gt; &amp;index)</argsstring>
        <name>CalculateValueOffset</name>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>strides</declname>
        </param>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Return the offset of the given index on the given strides. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/tensor.h" line="147" column="1" bodyfile="/arrow/cpp/src/arrow/tensor.h" bodystart="147" bodyend="155"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1_tensor_1a90486db9727a9fa84746f4132311b16f" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual arrow::Tensor::~Tensor</definition>
        <argsstring>()=default</argsstring>
        <name>~Tensor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/tensor.h" line="95" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_tensor_1a979c34866a43fe9f2dfe4239e95e2b64" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::Tensor::Tensor</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;type, const std::shared_ptr&lt; Buffer &gt; &amp;data, const std::vector&lt; int64_t &gt; &amp;shape)</argsstring>
        <name>Tensor</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>shape</declname>
        </param>
        <briefdescription>
<para>Constructor with no dimension names or strides, data assumed to be row-major. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/tensor.h" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_tensor_1a1b6cd46945a5b6406c8007e78e15fb66" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::Tensor::Tensor</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;type, const std::shared_ptr&lt; Buffer &gt; &amp;data, const std::vector&lt; int64_t &gt; &amp;shape, const std::vector&lt; int64_t &gt; &amp;strides)</argsstring>
        <name>Tensor</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>strides</declname>
        </param>
        <briefdescription>
<para>Constructor with non-negative strides. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/tensor.h" line="102" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_tensor_1a6777ab3878c9aaabc8e6af8d2788e662" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::Tensor::Tensor</definition>
        <argsstring>(const std::shared_ptr&lt; DataType &gt; &amp;type, const std::shared_ptr&lt; Buffer &gt; &amp;data, const std::vector&lt; int64_t &gt; &amp;shape, const std::vector&lt; int64_t &gt; &amp;strides, const std::vector&lt; std::string &gt; &amp;dim_names)</argsstring>
        <name>Tensor</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt; &amp;</type>
          <declname>type</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>shape</declname>
        </param>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>strides</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>dim_names</declname>
        </param>
        <briefdescription>
<para>Constructor with non-negative strides and dimension names. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/tensor.h" line="106" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_tensor_1a9bcd93151c9086430ebde46c0c3e2370" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &gt;</type>
        <definition>std::shared_ptr&lt;DataType&gt; arrow::Tensor::type</definition>
        <argsstring>() const</argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/tensor.h" line="110" column="1" bodyfile="/arrow/cpp/src/arrow/tensor.h" bodystart="110" bodyend="110"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_tensor_1a27e72ed5e1ad825b0a5813bf6bd04010" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt;</type>
        <definition>std::shared_ptr&lt;Buffer&gt; arrow::Tensor::data</definition>
        <argsstring>() const</argsstring>
        <name>data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/tensor.h" line="111" column="1" bodyfile="/arrow/cpp/src/arrow/tensor.h" bodystart="111" bodyend="111"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_tensor_1a5dc0bc200a25fcb6bf313427133d7dce" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const uint8_t *</type>
        <definition>const uint8_t* arrow::Tensor::raw_data</definition>
        <argsstring>() const</argsstring>
        <name>raw_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/tensor.h" line="113" column="1" bodyfile="/arrow/cpp/src/arrow/tensor.h" bodystart="113" bodyend="113"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_tensor_1a3badcfee7ddfbceeb3accdf49f9959ac" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint8_t *</type>
        <definition>uint8_t* arrow::Tensor::raw_mutable_data</definition>
        <argsstring>()</argsstring>
        <name>raw_mutable_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/tensor.h" line="114" column="1" bodyfile="/arrow/cpp/src/arrow/tensor.h" bodystart="114" bodyend="114"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_tensor_1ad1135e664dda72de17680475a28fbee5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; int64_t &gt; &amp;</type>
        <definition>const std::vector&lt;int64_t&gt;&amp; arrow::Tensor::shape</definition>
        <argsstring>() const</argsstring>
        <name>shape</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/tensor.h" line="116" column="1" bodyfile="/arrow/cpp/src/arrow/tensor.h" bodystart="116" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_tensor_1adecc04e39498baf201453fb5ebddcc85" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; int64_t &gt; &amp;</type>
        <definition>const std::vector&lt;int64_t&gt;&amp; arrow::Tensor::strides</definition>
        <argsstring>() const</argsstring>
        <name>strides</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/tensor.h" line="117" column="1" bodyfile="/arrow/cpp/src/arrow/tensor.h" bodystart="117" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_tensor_1af5cafa13ed1ef13d6a2d68be1dc8820b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int arrow::Tensor::ndim</definition>
        <argsstring>() const</argsstring>
        <name>ndim</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/tensor.h" line="119" column="1" bodyfile="/arrow/cpp/src/arrow/tensor.h" bodystart="119" bodyend="119"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_tensor_1ad41ab4a1764534d20213970191b4bd0c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; std::string &gt; &amp;</type>
        <definition>const std::vector&lt;std::string&gt;&amp; arrow::Tensor::dim_names</definition>
        <argsstring>() const</argsstring>
        <name>dim_names</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/tensor.h" line="121" column="1" bodyfile="/arrow/cpp/src/arrow/tensor.h" bodystart="121" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_tensor_1a9af40b1b35447dd832873dc43b07d663" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; arrow::Tensor::dim_name</definition>
        <argsstring>(int i) const</argsstring>
        <name>dim_name</name>
        <param>
          <type>int</type>
          <declname>i</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/tensor.h" line="122" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_tensor_1aca5e2f0d617530dd732d8cb7f10db1d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>int64_t</type>
        <definition>int64_t arrow::Tensor::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
<para>Total number of value cells in the tensor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/tensor.h" line="125" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_tensor_1a8620cbf7de60ce9a2cd8527e30a2e8ad" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::Tensor::is_mutable</definition>
        <argsstring>() const</argsstring>
        <name>is_mutable</name>
        <briefdescription>
<para>Return true if the underlying data buffer is mutable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/tensor.h" line="128" column="1" bodyfile="/arrow/cpp/src/arrow/tensor.h" bodystart="128" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_tensor_1a907568a5bf3646ef440b0b6342b5ebfa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::Tensor::is_contiguous</definition>
        <argsstring>() const</argsstring>
        <name>is_contiguous</name>
        <briefdescription>
<para>Either row major or column major. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/tensor.h" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_tensor_1af76f12b10080b0a8e6302c7a1b17e294" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::Tensor::is_row_major</definition>
        <argsstring>() const</argsstring>
        <name>is_row_major</name>
        <briefdescription>
<para>AKA &quot;C order&quot;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/tensor.h" line="134" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_tensor_1a0008e372a7ebca8a386f7a37f4d01e31" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::Tensor::is_column_major</definition>
        <argsstring>() const</argsstring>
        <name>is_column_major</name>
        <briefdescription>
<para>AKA &quot;Fortran order&quot;. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/tensor.h" line="137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_tensor_1a52b0c43c0b897dfb87cd90cf250cf5eb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref></type>
        <definition>Type::type arrow::Tensor::type_id</definition>
        <argsstring>() const</argsstring>
        <name>type_id</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/tensor.h" line="139" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_tensor_1aab7f17af07a9db83afa3a72287ff3841" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::Tensor::Equals</definition>
        <argsstring>(const Tensor &amp;other, const EqualOptions &amp;=EqualOptions::Defaults()) const</argsstring>
        <name>Equals</name>
        <param>
          <type>const <ref refid="classarrow_1_1_tensor" kindref="compound">Tensor</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <param>
          <type>const <ref refid="classarrow_1_1_equal_options" kindref="compound">EqualOptions</ref> &amp;</type>
          <defval><ref refid="classarrow_1_1_equal_options_1aceb7c9984ead6d5a79ba4a725193d452" kindref="member">EqualOptions::Defaults</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/tensor.h" line="141" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_tensor_1a0969c2fc1357fe8d3c3834ceacc147dc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>Status arrow::Tensor::CountNonZero</definition>
        <argsstring>(int64_t *result) const</argsstring>
        <name>CountNonZero</name>
        <param>
          <type>int64_t *</type>
          <declname>result</declname>
        </param>
        <briefdescription>
<para>Compute the number of non-zero values in the tensor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/tensor.h" line="144" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_tensor_1ac1d387818d9e06c060555b7103120966" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ValueType</type>
          </param>
        </templateparamlist>
        <type>const ValueType::c_type &amp;</type>
        <definition>const ValueType::c_type&amp; arrow::Tensor::Value</definition>
        <argsstring>(const std::vector&lt; int64_t &gt; &amp;index) const</argsstring>
        <name>Value</name>
        <param>
          <type>const std::vector&lt; int64_t &gt; &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
<para>Returns the value at the given index without data-type and bounds checks. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/tensor.h" line="159" column="1" bodyfile="/arrow/cpp/src/arrow/tensor.h" bodystart="159" bodyend="164"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classarrow_1_1_tensor_1a2d08c525c1c829cf81f2f64c96b9e7d5" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::Tensor::Tensor</definition>
        <argsstring>()</argsstring>
        <name>Tensor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/tensor.h" line="167" column="1" bodyfile="/arrow/cpp/src/arrow/tensor.h" bodystart="167" bodyend="167"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classarrow_1_1_tensor_1af7dc658dc9c9f8b50b0ccf1952db29e2" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::Tensor::ARROW_DISALLOW_COPY_AND_ASSIGN</definition>
        <argsstring>(Tensor)</argsstring>
        <name>ARROW_DISALLOW_COPY_AND_ASSIGN</name>
        <param>
          <type><ref refid="classarrow_1_1_tensor" kindref="compound">Tensor</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/tensor.h" line="181" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="4567">
        <label>arrow::NumericTensor&lt; TYPE &gt;</label>
        <link refid="classarrow_1_1_numeric_tensor"/>
        <childnode refid="4566" relation="public-inheritance">
        </childnode>
      </node>
      <node id="4566">
        <label>arrow::Tensor</label>
        <link refid="classarrow_1_1_tensor"/>
      </node>
    </inheritancegraph>
    <location file="/arrow/cpp/src/arrow/tensor.h" line="73" column="1" bodyfile="/arrow/cpp/src/arrow/tensor.h" bodystart="73" bodyend="182"/>
    <listofallmembers>
      <member refid="classarrow_1_1_tensor_1af7dc658dc9c9f8b50b0ccf1952db29e2" prot="private" virt="non-virtual"><scope>arrow::Tensor</scope><name>ARROW_DISALLOW_COPY_AND_ASSIGN</name></member>
      <member refid="classarrow_1_1_tensor_1a78dae60d7cb7cc5a70b61f0cde2c585d" prot="public" virt="non-virtual"><scope>arrow::Tensor</scope><name>CalculateValueOffset</name></member>
      <member refid="classarrow_1_1_tensor_1a0969c2fc1357fe8d3c3834ceacc147dc" prot="public" virt="non-virtual"><scope>arrow::Tensor</scope><name>CountNonZero</name></member>
      <member refid="classarrow_1_1_tensor_1a27e72ed5e1ad825b0a5813bf6bd04010" prot="public" virt="non-virtual"><scope>arrow::Tensor</scope><name>data</name></member>
      <member refid="classarrow_1_1_tensor_1a00dd73d91a790484b94aabcb4fedcdc7" prot="protected" virt="non-virtual"><scope>arrow::Tensor</scope><name>data_</name></member>
      <member refid="classarrow_1_1_tensor_1a9af40b1b35447dd832873dc43b07d663" prot="public" virt="non-virtual"><scope>arrow::Tensor</scope><name>dim_name</name></member>
      <member refid="classarrow_1_1_tensor_1ad41ab4a1764534d20213970191b4bd0c" prot="public" virt="non-virtual"><scope>arrow::Tensor</scope><name>dim_names</name></member>
      <member refid="classarrow_1_1_tensor_1a84f88a8835ecb20532f89fb804b8ce2a" prot="protected" virt="non-virtual"><scope>arrow::Tensor</scope><name>dim_names_</name></member>
      <member refid="classarrow_1_1_tensor_1aab7f17af07a9db83afa3a72287ff3841" prot="public" virt="non-virtual"><scope>arrow::Tensor</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_tensor_1a0008e372a7ebca8a386f7a37f4d01e31" prot="public" virt="non-virtual"><scope>arrow::Tensor</scope><name>is_column_major</name></member>
      <member refid="classarrow_1_1_tensor_1a907568a5bf3646ef440b0b6342b5ebfa" prot="public" virt="non-virtual"><scope>arrow::Tensor</scope><name>is_contiguous</name></member>
      <member refid="classarrow_1_1_tensor_1a8620cbf7de60ce9a2cd8527e30a2e8ad" prot="public" virt="non-virtual"><scope>arrow::Tensor</scope><name>is_mutable</name></member>
      <member refid="classarrow_1_1_tensor_1af76f12b10080b0a8e6302c7a1b17e294" prot="public" virt="non-virtual"><scope>arrow::Tensor</scope><name>is_row_major</name></member>
      <member refid="classarrow_1_1_tensor_1a85ca08ba70b81e474cef7d9eb73c2b34" prot="public" virt="non-virtual"><scope>arrow::Tensor</scope><name>Make</name></member>
      <member refid="classarrow_1_1_tensor_1af5cafa13ed1ef13d6a2d68be1dc8820b" prot="public" virt="non-virtual"><scope>arrow::Tensor</scope><name>ndim</name></member>
      <member refid="classarrow_1_1_tensor_1a5dc0bc200a25fcb6bf313427133d7dce" prot="public" virt="non-virtual"><scope>arrow::Tensor</scope><name>raw_data</name></member>
      <member refid="classarrow_1_1_tensor_1a3badcfee7ddfbceeb3accdf49f9959ac" prot="public" virt="non-virtual"><scope>arrow::Tensor</scope><name>raw_mutable_data</name></member>
      <member refid="classarrow_1_1_tensor_1ad1135e664dda72de17680475a28fbee5" prot="public" virt="non-virtual"><scope>arrow::Tensor</scope><name>shape</name></member>
      <member refid="classarrow_1_1_tensor_1adfbc5876ce2f4c71d5503554a1cba2f2" prot="protected" virt="non-virtual"><scope>arrow::Tensor</scope><name>shape_</name></member>
      <member refid="classarrow_1_1_tensor_1aca5e2f0d617530dd732d8cb7f10db1d3" prot="public" virt="non-virtual"><scope>arrow::Tensor</scope><name>size</name></member>
      <member refid="classarrow_1_1_tensor_1adecc04e39498baf201453fb5ebddcc85" prot="public" virt="non-virtual"><scope>arrow::Tensor</scope><name>strides</name></member>
      <member refid="classarrow_1_1_tensor_1a5224d67e07ebb71c1c9f83e07bec303f" prot="protected" virt="non-virtual"><scope>arrow::Tensor</scope><name>strides_</name></member>
      <member refid="classarrow_1_1_tensor_1a979c34866a43fe9f2dfe4239e95e2b64" prot="public" virt="non-virtual"><scope>arrow::Tensor</scope><name>Tensor</name></member>
      <member refid="classarrow_1_1_tensor_1a1b6cd46945a5b6406c8007e78e15fb66" prot="public" virt="non-virtual"><scope>arrow::Tensor</scope><name>Tensor</name></member>
      <member refid="classarrow_1_1_tensor_1a6777ab3878c9aaabc8e6af8d2788e662" prot="public" virt="non-virtual"><scope>arrow::Tensor</scope><name>Tensor</name></member>
      <member refid="classarrow_1_1_tensor_1a2d08c525c1c829cf81f2f64c96b9e7d5" prot="protected" virt="non-virtual"><scope>arrow::Tensor</scope><name>Tensor</name></member>
      <member refid="classarrow_1_1_tensor_1a9bcd93151c9086430ebde46c0c3e2370" prot="public" virt="non-virtual"><scope>arrow::Tensor</scope><name>type</name></member>
      <member refid="classarrow_1_1_tensor_1ade1e4a39856e1377baf50c587b11272b" prot="protected" virt="non-virtual"><scope>arrow::Tensor</scope><name>type_</name></member>
      <member refid="classarrow_1_1_tensor_1a52b0c43c0b897dfb87cd90cf250cf5eb" prot="public" virt="non-virtual"><scope>arrow::Tensor</scope><name>type_id</name></member>
      <member refid="classarrow_1_1_tensor_1ac1d387818d9e06c060555b7103120966" prot="public" virt="non-virtual"><scope>arrow::Tensor</scope><name>Value</name></member>
      <member refid="classarrow_1_1_tensor_1a90486db9727a9fa84746f4132311b16f" prot="public" virt="virtual"><scope>arrow::Tensor</scope><name>~Tensor</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
