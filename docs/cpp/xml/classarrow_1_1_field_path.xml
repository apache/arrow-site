<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_field_path" kind="class" language="C++" prot="public">
    <compoundname>arrow::FieldPath</compoundname>
    <includes refid="type_8h" local="no">arrow/type.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classarrow_1_1_field_path_1a1b4e215c42593c2492aaa3b9655b6939" prot="private" static="no" mutable="no">
        <type>std::vector&lt; int &gt;</type>
        <definition>std::vector&lt;int&gt; arrow::FieldPath::indices_</definition>
        <argsstring></argsstring>
        <name>indices_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1446" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="1446" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1_field_path_1adee4227a5d0d5454fd91a8456c63ece9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::FieldPath::FieldPath</definition>
        <argsstring>()=default</argsstring>
        <name>FieldPath</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1412" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_field_path_1a76caea76a2f6f3f240b2f27b8cd2d740" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::FieldPath::FieldPath</definition>
        <argsstring>(std::vector&lt; int &gt; indices)</argsstring>
        <name>FieldPath</name>
        <param>
          <type>std::vector&lt; int &gt;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1414" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="1414" bodyend="1415"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_field_path_1a29881fadb83e45f1f66840e0fd05453c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::FieldPath::FieldPath</definition>
        <argsstring>(std::initializer_list&lt; int &gt; indices)</argsstring>
        <name>FieldPath</name>
        <param>
          <type>std::initializer_list&lt; int &gt;</type>
          <declname>indices</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1417" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="1417" bodyend="1418"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_field_path_1a02af52dc4fc4dbdf6d51126e201089f5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arrow::FieldPath::ToString</definition>
        <argsstring>() const</argsstring>
        <name>ToString</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1420" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_field_path_1a2e6c084ee6e72b1d1eb662070dba6bf1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t arrow::FieldPath::hash</definition>
        <argsstring>() const</argsstring>
        <name>hash</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1422" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_field_path_1a2bbf4202aaff305dd8bf6b1c08979888" prot="public" static="no" const="yes" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::FieldPath::operator bool</definition>
        <argsstring>() const</argsstring>
        <name>operator bool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1424" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="1424" bodyend="1424"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_field_path_1ab35a0d0ffa5692d1a529d21ba624a8e3" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::FieldPath::operator==</definition>
        <argsstring>(const FieldPath &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classarrow_1_1_field_path" kindref="compound">FieldPath</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1425" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="1425" bodyend="1425"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_field_path_1a405519d45e08fa4687a2492e2fdc3f95" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::FieldPath::operator!=</definition>
        <argsstring>(const FieldPath &amp;other) const</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classarrow_1_1_field_path" kindref="compound">FieldPath</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1426" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="1426" bodyend="1426"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_field_path_1a5c1ec626c4e15d8d1a351bd147d51ec7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; int &gt; &amp;</type>
        <definition>std::vector&lt;int&gt;&amp; arrow::FieldPath::indices</definition>
        <argsstring>()</argsstring>
        <name>indices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1428" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="1428" bodyend="1428"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_field_path_1ab438098b298a3f14e615cc389f399c26" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::vector&lt; int &gt; &amp;</type>
        <definition>const std::vector&lt;int&gt;&amp; arrow::FieldPath::indices</definition>
        <argsstring>() const</argsstring>
        <name>indices</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1429" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="1429" bodyend="1429"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_field_path_1a165fd942d59b8b8a6f45f1f939cb7a1b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;Field&gt; &gt; arrow::FieldPath::Get</definition>
        <argsstring>(const Schema &amp;schema) const</argsstring>
        <name>Get</name>
        <param>
          <type>const <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> &amp;</type>
          <declname>schema</declname>
        </param>
        <briefdescription>
<para>Retrieve the referenced child <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> from a <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref>, <ref refid="classarrow_1_1_field" kindref="compound">Field</ref>, or <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1432" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_field_path_1a8eb76ec5e982a39b5831622ff08f2aa0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;Field&gt; &gt; arrow::FieldPath::Get</definition>
        <argsstring>(const Field &amp;field) const</argsstring>
        <name>Get</name>
        <param>
          <type>const <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &amp;</type>
          <declname>field</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1433" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_field_path_1a0ff1da4cfdafcd7c32a888eec1de58b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;Field&gt; &gt; arrow::FieldPath::Get</definition>
        <argsstring>(const DataType &amp;type) const</argsstring>
        <name>Get</name>
        <param>
          <type>const <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> &amp;</type>
          <declname>type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1434" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_field_path_1a25cacfa6df2a2356d45af641c0b2ac6d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;Field&gt; &gt; arrow::FieldPath::Get</definition>
        <argsstring>(const FieldVector &amp;fields) const</argsstring>
        <name>Get</name>
        <param>
          <type>const <ref refid="namespacearrow_1a4599536b489227968fbdf37c1f9585cf" kindref="member">FieldVector</ref> &amp;</type>
          <declname>fields</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1435" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_field_path_1a247c5e002683bcbf70bc221d6bea18c6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;Array&gt; &gt; arrow::FieldPath::Get</definition>
        <argsstring>(const RecordBatch &amp;batch) const</argsstring>
        <name>Get</name>
        <param>
          <type>const <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref> &amp;</type>
          <declname>batch</declname>
        </param>
        <briefdescription>
<para>Retrieve the referenced column from a <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref> or <ref refid="classarrow_1_1_table" kindref="compound">Table</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1438" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_field_path_1a8b8a3028ac7d8eaa5b33eb37f557b0fc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_chunked_array" kindref="compound">ChunkedArray</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;ChunkedArray&gt; &gt; arrow::FieldPath::Get</definition>
        <argsstring>(const Table &amp;table) const</argsstring>
        <name>Get</name>
        <param>
          <type>const <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> &amp;</type>
          <declname>table</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1439" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_field_path_1a4bacca80b67ee959f5e838ad1de31485" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;Array&gt; &gt; arrow::FieldPath::Get</definition>
        <argsstring>(const Array &amp;array) const</argsstring>
        <name>Get</name>
        <param>
          <type>const <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
<para>Retrieve the referenced child <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> from an <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> or <ref refid="classarrow_1_1_chunked_array" kindref="compound">ChunkedArray</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1442" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_field_path_1afd3d76c460ce936feebbb588e8eefe58" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_result" kindref="compound">Result</ref>&lt; std::shared_ptr&lt; <ref refid="classarrow_1_1_chunked_array" kindref="compound">ChunkedArray</ref> &gt; &gt;</type>
        <definition>Result&lt;std::shared_ptr&lt;ChunkedArray&gt; &gt; arrow::FieldPath::Get</definition>
        <argsstring>(const ChunkedArray &amp;array) const</argsstring>
        <name>Get</name>
        <param>
          <type>const <ref refid="classarrow_1_1_chunked_array" kindref="compound">ChunkedArray</ref> &amp;</type>
          <declname>array</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="1443" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Represents a path to a nested field using indices of child fields. </para>    </briefdescription>
    <detaileddescription>
<para>For example, given indices {5, 9, 3} the field would be retrieved with schema-&gt;field(5)-&gt;type()-&gt;child(9)-&gt;type()-&gt;child(3)</para><para>Attempting to retrieve a child field using a <ref refid="classarrow_1_1_field_path" kindref="compound">FieldPath</ref> which is not valid for a given schema will raise an error. Invalid FieldPaths include:<itemizedlist>
<listitem><para>an index is out of range</para></listitem><listitem><para>the path is empty (note: a default constructed <ref refid="classarrow_1_1_field_path" kindref="compound">FieldPath</ref> will be empty)</para></listitem></itemizedlist>
</para><para>FieldPaths provide a number of accessors for drilling down to potentially nested children. They are overloaded for convenience to support <ref refid="classarrow_1_1_schema" kindref="compound">Schema</ref> (returns a field), <ref refid="classarrow_1_1_data_type" kindref="compound">DataType</ref> (returns a child field), <ref refid="classarrow_1_1_field" kindref="compound">Field</ref> (returns a child field of this field&apos;s type) <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> (returns a child array), <ref refid="classarrow_1_1_record_batch" kindref="compound">RecordBatch</ref> (returns a column), <ref refid="classarrow_1_1_chunked_array" kindref="compound">ChunkedArray</ref> (returns a <ref refid="classarrow_1_1_chunked_array" kindref="compound">ChunkedArray</ref> where each chunk is a child array of the corresponding original chunk) and <ref refid="classarrow_1_1_table" kindref="compound">Table</ref> (returns a column). </para>    </detaileddescription>
    <location file="/arrow/cpp/src/arrow/type.h" line="1410" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="1410" bodyend="1447"/>
    <listofallmembers>
      <member refid="classarrow_1_1_field_path_1adee4227a5d0d5454fd91a8456c63ece9" prot="public" virt="non-virtual"><scope>arrow::FieldPath</scope><name>FieldPath</name></member>
      <member refid="classarrow_1_1_field_path_1a76caea76a2f6f3f240b2f27b8cd2d740" prot="public" virt="non-virtual"><scope>arrow::FieldPath</scope><name>FieldPath</name></member>
      <member refid="classarrow_1_1_field_path_1a29881fadb83e45f1f66840e0fd05453c" prot="public" virt="non-virtual"><scope>arrow::FieldPath</scope><name>FieldPath</name></member>
      <member refid="classarrow_1_1_field_path_1a165fd942d59b8b8a6f45f1f939cb7a1b" prot="public" virt="non-virtual"><scope>arrow::FieldPath</scope><name>Get</name></member>
      <member refid="classarrow_1_1_field_path_1a8eb76ec5e982a39b5831622ff08f2aa0" prot="public" virt="non-virtual"><scope>arrow::FieldPath</scope><name>Get</name></member>
      <member refid="classarrow_1_1_field_path_1a0ff1da4cfdafcd7c32a888eec1de58b4" prot="public" virt="non-virtual"><scope>arrow::FieldPath</scope><name>Get</name></member>
      <member refid="classarrow_1_1_field_path_1a25cacfa6df2a2356d45af641c0b2ac6d" prot="public" virt="non-virtual"><scope>arrow::FieldPath</scope><name>Get</name></member>
      <member refid="classarrow_1_1_field_path_1a247c5e002683bcbf70bc221d6bea18c6" prot="public" virt="non-virtual"><scope>arrow::FieldPath</scope><name>Get</name></member>
      <member refid="classarrow_1_1_field_path_1a8b8a3028ac7d8eaa5b33eb37f557b0fc" prot="public" virt="non-virtual"><scope>arrow::FieldPath</scope><name>Get</name></member>
      <member refid="classarrow_1_1_field_path_1a4bacca80b67ee959f5e838ad1de31485" prot="public" virt="non-virtual"><scope>arrow::FieldPath</scope><name>Get</name></member>
      <member refid="classarrow_1_1_field_path_1afd3d76c460ce936feebbb588e8eefe58" prot="public" virt="non-virtual"><scope>arrow::FieldPath</scope><name>Get</name></member>
      <member refid="classarrow_1_1_field_path_1a2e6c084ee6e72b1d1eb662070dba6bf1" prot="public" virt="non-virtual"><scope>arrow::FieldPath</scope><name>hash</name></member>
      <member refid="classarrow_1_1_field_path_1a5c1ec626c4e15d8d1a351bd147d51ec7" prot="public" virt="non-virtual"><scope>arrow::FieldPath</scope><name>indices</name></member>
      <member refid="classarrow_1_1_field_path_1ab438098b298a3f14e615cc389f399c26" prot="public" virt="non-virtual"><scope>arrow::FieldPath</scope><name>indices</name></member>
      <member refid="classarrow_1_1_field_path_1a1b4e215c42593c2492aaa3b9655b6939" prot="private" virt="non-virtual"><scope>arrow::FieldPath</scope><name>indices_</name></member>
      <member refid="classarrow_1_1_field_path_1a2bbf4202aaff305dd8bf6b1c08979888" prot="public" virt="non-virtual"><scope>arrow::FieldPath</scope><name>operator bool</name></member>
      <member refid="classarrow_1_1_field_path_1a405519d45e08fa4687a2492e2fdc3f95" prot="public" virt="non-virtual"><scope>arrow::FieldPath</scope><name>operator!=</name></member>
      <member refid="classarrow_1_1_field_path_1ab35a0d0ffa5692d1a529d21ba624a8e3" prot="public" virt="non-virtual"><scope>arrow::FieldPath</scope><name>operator==</name></member>
      <member refid="classarrow_1_1_field_path_1a02af52dc4fc4dbdf6d51126e201089f5" prot="public" virt="non-virtual"><scope>arrow::FieldPath</scope><name>ToString</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
