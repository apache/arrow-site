<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_large_binary_type" kind="class" language="C++" prot="public">
    <compoundname>arrow::LargeBinaryType</compoundname>
    <basecompoundref refid="classarrow_1_1_base_binary_type" prot="public" virt="non-virtual">arrow::BaseBinaryType</basecompoundref>
    <derivedcompoundref refid="classarrow_1_1_large_string_type" prot="public" virt="non-virtual">arrow::LargeStringType</derivedcompoundref>
    <includes refid="type_8h" local="no">arrow/type.h</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classarrow_1_1_large_binary_type_1af062b46bc4740286b1f0c2f502203a05" prot="public" static="no">
        <type>int64_t</type>
        <definition>using arrow::LargeBinaryType::offset_type =  int64_t</definition>
        <argsstring></argsstring>
        <name>offset_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="822" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="822" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="classarrow_1_1_large_binary_type_1aba8fc6e3853d32df8a92d11c5d8dee36" prot="public" static="yes" mutable="no">
        <type>constexpr <ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref></type>
        <definition>constexpr Type::type arrow::LargeBinaryType::type_id</definition>
        <argsstring></argsstring>
        <name>type_id</name>
        <initializer>= <ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44ac15fc368bd8a9390a69d4e174635781d" kindref="member">Type::LARGE_BINARY</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="820" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="820" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_large_binary_type_1ace61abcc6beb04b35d835a1cc8d73d25" prot="public" static="yes" mutable="no">
        <type>constexpr bool</type>
        <definition>constexpr bool arrow::LargeBinaryType::is_utf8</definition>
        <argsstring></argsstring>
        <name>is_utf8</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="821" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="821" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1_large_binary_type_1a0ef94f53843747849d060e689d37be11" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>constexpr const char *</type>
        <definition>static constexpr const char* arrow::LargeBinaryType::type_name</definition>
        <argsstring>()</argsstring>
        <name>type_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="824" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="824" bodyend="824"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1_large_binary_type_1a9bfcd4b8120c8b03cdf2dfd8f5f57346" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::LargeBinaryType::LargeBinaryType</definition>
        <argsstring>()</argsstring>
        <name>LargeBinaryType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="826" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="826" bodyend="826"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_large_binary_type_1a224295a081273aa84c2e5134f0321997" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type><ref refid="structarrow_1_1_data_type_layout" kindref="compound">DataTypeLayout</ref></type>
        <definition>DataTypeLayout arrow::LargeBinaryType::layout</definition>
        <argsstring>() const override</argsstring>
        <name>layout</name>
        <reimplements refid="classarrow_1_1_data_type_1a4fe70f6a45eda029ea118c8470ff925e">layout</reimplements>
        <briefdescription>
<para>Return the data type layout. </para>        </briefdescription>
        <detaileddescription>
<para>Children are not included.</para><para><simplesect kind="note"><para>Experimental API </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="828" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="828" bodyend="832"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_large_binary_type_1a7872d009ffff66404157a0ca86162f54" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string arrow::LargeBinaryType::ToString</definition>
        <argsstring>() const override</argsstring>
        <name>ToString</name>
        <reimplements refid="classarrow_1_1_data_type_1a944727354fb11138ebd46368319598f2">ToString</reimplements>
        <reimplementedby refid="classarrow_1_1_large_string_type_1a5edecd7f1caaf74ecf35da22dbffb140">ToString</reimplementedby>
        <briefdescription>
<para>A string representation of the type, including any children. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="834" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_large_binary_type_1a13b91514b5c18c6ad41d84cb92e0c31f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>std::string</type>
        <definition>std::string arrow::LargeBinaryType::name</definition>
        <argsstring>() const override</argsstring>
        <name>name</name>
        <reimplements refid="classarrow_1_1_data_type_1a94985d12273f5dd353d6142921299d4d">name</reimplements>
        <reimplementedby refid="classarrow_1_1_large_string_type_1a07c2864eabf436e15ec944e488f17f6e">name</reimplementedby>
        <briefdescription>
<para>A string name of the type, omitting any child fields. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Experimental API </para></simplesect>
<simplesect kind="since"><para>0.7.0 </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="835" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="835" bodyend="835"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classarrow_1_1_large_binary_type_1a94ea74c58f4b2d5e45a1e210d8a55bab" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arrow::LargeBinaryType::ComputeFingerprint</definition>
        <argsstring>() const override</argsstring>
        <name>ComputeFingerprint</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="838" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_large_binary_type_1a6c29e5c9d8f7d4c49da7e19ccb8bc77f" prot="protected" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::LargeBinaryType::LargeBinaryType</definition>
        <argsstring>(Type::type logical_type)</argsstring>
        <name>LargeBinaryType</name>
        <param>
          <type><ref refid="structarrow_1_1_type_1a00a041cb19a3be373da8eec7d4bf1f44" kindref="member">Type::type</ref></type>
          <declname>logical_type</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/type.h" line="841" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="841" bodyend="841"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Concrete type class for large variable-size binary data. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2705">
        <label>arrow::DataType</label>
        <link refid="classarrow_1_1_data_type"/>
        <childnode refid="2706" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2703">
        <label>arrow::LargeBinaryType</label>
        <link refid="classarrow_1_1_large_binary_type"/>
        <childnode refid="2704" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2706">
        <label>arrow::detail::Fingerprintable</label>
      </node>
      <node id="2707">
        <label>arrow::LargeStringType</label>
        <link refid="classarrow_1_1_large_string_type"/>
        <childnode refid="2703" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2704">
        <label>arrow::BaseBinaryType</label>
        <link refid="classarrow_1_1_base_binary_type"/>
        <childnode refid="2705" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="2710">
        <label>arrow::DataType</label>
        <link refid="classarrow_1_1_data_type"/>
        <childnode refid="2711" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2708">
        <label>arrow::LargeBinaryType</label>
        <link refid="classarrow_1_1_large_binary_type"/>
        <childnode refid="2709" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2711">
        <label>arrow::detail::Fingerprintable</label>
      </node>
      <node id="2709">
        <label>arrow::BaseBinaryType</label>
        <link refid="classarrow_1_1_base_binary_type"/>
        <childnode refid="2710" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/type.h" line="818" column="1" bodyfile="/arrow/cpp/src/arrow/type.h" bodystart="818" bodyend="842"/>
    <listofallmembers>
      <member refid="classarrow_1_1_data_type_1a97571c4039e363f7ebcb09f7c789064a" prot="public" virt="non-virtual"><scope>arrow::LargeBinaryType</scope><name>Accept</name></member>
      <member refid="classarrow_1_1_data_type_1a3c9f77b8d895abd8618566386cbeb7c0" prot="public" virt="non-virtual"><scope>arrow::LargeBinaryType</scope><name>child</name></member>
      <member refid="classarrow_1_1_data_type_1a36061c037a2e6e974cc3b22dfb6a5bac" prot="public" virt="non-virtual"><scope>arrow::LargeBinaryType</scope><name>children</name></member>
      <member refid="classarrow_1_1_data_type_1a8dd2f042289733133c386463afcea902" prot="protected" virt="non-virtual"><scope>arrow::LargeBinaryType</scope><name>children_</name></member>
      <member refid="classarrow_1_1_large_binary_type_1a94ea74c58f4b2d5e45a1e210d8a55bab" prot="protected" virt="non-virtual"><scope>arrow::LargeBinaryType</scope><name>ComputeFingerprint</name></member>
      <member refid="classarrow_1_1_data_type_1a1e0bf7cc98ce39872b8044f375d7de6b" prot="protected" virt="non-virtual"><scope>arrow::LargeBinaryType</scope><name>ComputeMetadataFingerprint</name></member>
      <member refid="classarrow_1_1_data_type_1a1b8a7ece05983649f67396177f40e844" prot="public" virt="non-virtual"><scope>arrow::LargeBinaryType</scope><name>DataType</name></member>
      <member refid="classarrow_1_1_data_type_1aaf003113bb8f4c51a03a16f4b27a52bb" prot="public" virt="non-virtual"><scope>arrow::LargeBinaryType</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_data_type_1ae974f4c707ef998d25368d278818af6b" prot="public" virt="non-virtual"><scope>arrow::LargeBinaryType</scope><name>Equals</name></member>
      <member refid="classarrow_1_1_data_type_1a5ec6a1c93420c68e9c8065d4a56ad645" prot="public" virt="non-virtual"><scope>arrow::LargeBinaryType</scope><name>id</name></member>
      <member refid="classarrow_1_1_data_type_1aa2704f1cfc50018d02e109b32f67e422" prot="protected" virt="non-virtual"><scope>arrow::LargeBinaryType</scope><name>id_</name></member>
      <member refid="classarrow_1_1_large_binary_type_1ace61abcc6beb04b35d835a1cc8d73d25" prot="public" virt="non-virtual"><scope>arrow::LargeBinaryType</scope><name>is_utf8</name></member>
      <member refid="classarrow_1_1_large_binary_type_1a9bfcd4b8120c8b03cdf2dfd8f5f57346" prot="public" virt="non-virtual"><scope>arrow::LargeBinaryType</scope><name>LargeBinaryType</name></member>
      <member refid="classarrow_1_1_large_binary_type_1a6c29e5c9d8f7d4c49da7e19ccb8bc77f" prot="protected" virt="non-virtual"><scope>arrow::LargeBinaryType</scope><name>LargeBinaryType</name></member>
      <member refid="classarrow_1_1_large_binary_type_1a224295a081273aa84c2e5134f0321997" prot="public" virt="virtual"><scope>arrow::LargeBinaryType</scope><name>layout</name></member>
      <member refid="classarrow_1_1_large_binary_type_1a13b91514b5c18c6ad41d84cb92e0c31f" prot="public" virt="virtual"><scope>arrow::LargeBinaryType</scope><name>name</name></member>
      <member refid="classarrow_1_1_data_type_1ac8920179a6c1e7f434c495d5ec4662f1" prot="public" virt="non-virtual"><scope>arrow::LargeBinaryType</scope><name>num_children</name></member>
      <member refid="classarrow_1_1_large_binary_type_1af062b46bc4740286b1f0c2f502203a05" prot="public" virt="non-virtual"><scope>arrow::LargeBinaryType</scope><name>offset_type</name></member>
      <member refid="classarrow_1_1_large_binary_type_1a7872d009ffff66404157a0ca86162f54" prot="public" virt="virtual"><scope>arrow::LargeBinaryType</scope><name>ToString</name></member>
      <member refid="classarrow_1_1_large_binary_type_1aba8fc6e3853d32df8a92d11c5d8dee36" prot="public" virt="non-virtual"><scope>arrow::LargeBinaryType</scope><name>type_id</name></member>
      <member refid="classarrow_1_1_large_binary_type_1a0ef94f53843747849d060e689d37be11" prot="public" virt="non-virtual"><scope>arrow::LargeBinaryType</scope><name>type_name</name></member>
      <member refid="classarrow_1_1_data_type_1a268b7e57ebec17a48930c73d8c0605d2" prot="public" virt="non-virtual"><scope>arrow::LargeBinaryType</scope><name>~DataType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
