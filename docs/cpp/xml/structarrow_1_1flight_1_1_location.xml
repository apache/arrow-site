<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structarrow_1_1flight_1_1_location" kind="struct" language="C++" prot="public">
    <compoundname>arrow::flight::Location</compoundname>
    <includes refid="arrow_2flight_2types_8h" local="no">arrow/flight/types.h</includes>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structarrow_1_1flight_1_1_location_1a86769d0d82198bf33863991c833befa4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class FlightClient</definition>
        <argsstring></argsstring>
        <name>FlightClient</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="317" column="1" bodyfile="/arrow/cpp/src/arrow/flight/types.h" bodystart="317" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="structarrow_1_1flight_1_1_location_1a6186b623bb454d72225908e66dc4621f" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class FlightServerBase</definition>
        <argsstring></argsstring>
        <name>FlightServerBase</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="318" column="1" bodyfile="/arrow/cpp/src/arrow/flight/types.h" bodystart="318" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="structarrow_1_1flight_1_1_location_1a68504c57743016268bc610731fdb4c34" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator==</definition>
        <argsstring>(const Location &amp;left, const Location &amp;right)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structarrow_1_1flight_1_1_location" kindref="compound">Location</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1flight_1_1_location" kindref="compound">Location</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="309" column="1" bodyfile="/arrow/cpp/src/arrow/flight/types.h" bodystart="309" bodyend="311"/>
      </memberdef>
      <memberdef kind="friend" id="structarrow_1_1flight_1_1_location_1ab08bf4ff28e0e84ed5ba732d44a8889a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator!=</definition>
        <argsstring>(const Location &amp;left, const Location &amp;right)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="structarrow_1_1flight_1_1_location" kindref="compound">Location</ref> &amp;</type>
          <declname>left</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1flight_1_1_location" kindref="compound">Location</ref> &amp;</type>
          <declname>right</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="312" column="1" bodyfile="/arrow/cpp/src/arrow/flight/types.h" bodystart="312" bodyend="314"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structarrow_1_1flight_1_1_location_1a311a6b1e96cf05c6cf7dfbe1ddbb0877" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; arrow::internal::Uri &gt;</type>
        <definition>std::shared_ptr&lt;arrow::internal::Uri&gt; arrow::flight::Location::uri_</definition>
        <argsstring></argsstring>
        <name>uri_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="319" column="1" bodyfile="/arrow/cpp/src/arrow/flight/types.h" bodystart="319" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structarrow_1_1flight_1_1_location_1a7428db46789c3d40ccc63f40b2b823cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::flight::Location::Location</definition>
        <argsstring>()</argsstring>
        <name>Location</name>
        <briefdescription>
<para>Initialize a blank location. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="276" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1flight_1_1_location_1adaa5abc85f6f527e2c5b1ba3f52015cd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arrow::flight::Location::ToString</definition>
        <argsstring>() const</argsstring>
        <name>ToString</name>
        <briefdescription>
<para>Get a representation of this URI as a string. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="302" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1flight_1_1_location_1a9103044f6a0aee9674ff695a29a74db6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string arrow::flight::Location::scheme</definition>
        <argsstring>() const</argsstring>
        <name>scheme</name>
        <briefdescription>
<para>Get the scheme of this URI. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="305" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1flight_1_1_location_1a10cfd1bdecf25a222a7d4514a033744f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::flight::Location::Equals</definition>
        <argsstring>(const Location &amp;other) const</argsstring>
        <name>Equals</name>
        <param>
          <type>const <ref refid="structarrow_1_1flight_1_1_location" kindref="compound">Location</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="307" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="structarrow_1_1flight_1_1_location_1a4fad241023dedc589a7e8d39d89388bd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::flight::Location::Parse</definition>
        <argsstring>(const std::string &amp;uri_string, Location *location)</argsstring>
        <name>Parse</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>uri_string</declname>
        </param>
        <param>
          <type><ref refid="structarrow_1_1flight_1_1_location" kindref="compound">Location</ref> *</type>
          <declname>location</declname>
        </param>
        <briefdescription>
<para>Initialize a location by parsing a URI string. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="279" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1flight_1_1_location_1adce31bbfb95588667e49f68e7ce7fdec" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::flight::Location::ForGrpcTcp</definition>
        <argsstring>(const std::string &amp;host, const int port, Location *location)</argsstring>
        <name>ForGrpcTcp</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>host</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="structarrow_1_1flight_1_1_location" kindref="compound">Location</ref> *</type>
          <declname>location</declname>
        </param>
        <briefdescription>
<para>Initialize a location for a non-TLS, gRPC-based Flight service from a host and port. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">host</parametername>
</parameternamelist>
<parameterdescription>
<para>The hostname to connect to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">port</parametername>
</parameternamelist>
<parameterdescription>
<para>The port </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">location</parametername>
</parameternamelist>
<parameterdescription>
<para>The resulting location </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="286" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1flight_1_1_location_1a544226ce79e9ca24d4c18c9db9b80d62" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::flight::Location::ForGrpcTls</definition>
        <argsstring>(const std::string &amp;host, const int port, Location *location)</argsstring>
        <name>ForGrpcTls</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>host</declname>
        </param>
        <param>
          <type>const int</type>
          <declname>port</declname>
        </param>
        <param>
          <type><ref refid="structarrow_1_1flight_1_1_location" kindref="compound">Location</ref> *</type>
          <declname>location</declname>
        </param>
        <briefdescription>
<para>Initialize a location for a TLS-enabled, gRPC-based Flight service from a host and port. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">host</parametername>
</parameternamelist>
<parameterdescription>
<para>The hostname to connect to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">port</parametername>
</parameternamelist>
<parameterdescription>
<para>The port </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">location</parametername>
</parameternamelist>
<parameterdescription>
<para>The resulting location </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="293" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structarrow_1_1flight_1_1_location_1a1caa274c20ae70c70b97d4b3c3d7e3e5" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::flight::Location::ForGrpcUnix</definition>
        <argsstring>(const std::string &amp;path, Location *location)</argsstring>
        <name>ForGrpcUnix</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>path</declname>
        </param>
        <param>
          <type><ref refid="structarrow_1_1flight_1_1_location" kindref="compound">Location</ref> *</type>
          <declname>location</declname>
        </param>
        <briefdescription>
<para>Initialize a location for a domain socket-based Flight service. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">path</parametername>
</parameternamelist>
<parameterdescription>
<para>The path to the domain socket </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">location</parametername>
</parameternamelist>
<parameterdescription>
<para>The resulting location </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/flight/types.h" line="299" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A host location (a URI) </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/arrow/flight/types.h" line="273" column="1" bodyfile="/arrow/cpp/src/arrow/flight/types.h" bodystart="273" bodyend="320"/>
    <listofallmembers>
      <member refid="structarrow_1_1flight_1_1_location_1a10cfd1bdecf25a222a7d4514a033744f" prot="public" virt="non-virtual"><scope>arrow::flight::Location</scope><name>Equals</name></member>
      <member refid="structarrow_1_1flight_1_1_location_1adce31bbfb95588667e49f68e7ce7fdec" prot="public" virt="non-virtual"><scope>arrow::flight::Location</scope><name>ForGrpcTcp</name></member>
      <member refid="structarrow_1_1flight_1_1_location_1a544226ce79e9ca24d4c18c9db9b80d62" prot="public" virt="non-virtual"><scope>arrow::flight::Location</scope><name>ForGrpcTls</name></member>
      <member refid="structarrow_1_1flight_1_1_location_1a1caa274c20ae70c70b97d4b3c3d7e3e5" prot="public" virt="non-virtual"><scope>arrow::flight::Location</scope><name>ForGrpcUnix</name></member>
      <member refid="structarrow_1_1flight_1_1_location_1a7428db46789c3d40ccc63f40b2b823cd" prot="public" virt="non-virtual"><scope>arrow::flight::Location</scope><name>Location</name></member>
      <member refid="structarrow_1_1flight_1_1_location_1ab08bf4ff28e0e84ed5ba732d44a8889a" prot="public" virt="non-virtual"><scope>arrow::flight::Location</scope><name>operator!=</name></member>
      <member refid="structarrow_1_1flight_1_1_location_1a68504c57743016268bc610731fdb4c34" prot="public" virt="non-virtual"><scope>arrow::flight::Location</scope><name>operator==</name></member>
      <member refid="structarrow_1_1flight_1_1_location_1a4fad241023dedc589a7e8d39d89388bd" prot="public" virt="non-virtual"><scope>arrow::flight::Location</scope><name>Parse</name></member>
      <member refid="structarrow_1_1flight_1_1_location_1a9103044f6a0aee9674ff695a29a74db6" prot="public" virt="non-virtual"><scope>arrow::flight::Location</scope><name>scheme</name></member>
      <member refid="structarrow_1_1flight_1_1_location_1adaa5abc85f6f527e2c5b1ba3f52015cd" prot="public" virt="non-virtual"><scope>arrow::flight::Location</scope><name>ToString</name></member>
      <member refid="structarrow_1_1flight_1_1_location_1a311a6b1e96cf05c6cf7dfbe1ddbb0877" prot="private" virt="non-virtual"><scope>arrow::flight::Location</scope><name>uri_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
