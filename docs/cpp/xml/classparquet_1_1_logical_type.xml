<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classparquet_1_1_logical_type" kind="class" language="C++" prot="public">
    <compoundname>parquet::LogicalType</compoundname>
    <derivedcompoundref refid="classparquet_1_1_b_s_o_n_logical_type" prot="public" virt="non-virtual">parquet::BSONLogicalType</derivedcompoundref>
    <derivedcompoundref refid="classparquet_1_1_date_logical_type" prot="public" virt="non-virtual">parquet::DateLogicalType</derivedcompoundref>
    <derivedcompoundref refid="classparquet_1_1_decimal_logical_type" prot="public" virt="non-virtual">parquet::DecimalLogicalType</derivedcompoundref>
    <derivedcompoundref refid="classparquet_1_1_enum_logical_type" prot="public" virt="non-virtual">parquet::EnumLogicalType</derivedcompoundref>
    <derivedcompoundref refid="classparquet_1_1_interval_logical_type" prot="public" virt="non-virtual">parquet::IntervalLogicalType</derivedcompoundref>
    <derivedcompoundref refid="classparquet_1_1_int_logical_type" prot="public" virt="non-virtual">parquet::IntLogicalType</derivedcompoundref>
    <derivedcompoundref refid="classparquet_1_1_j_s_o_n_logical_type" prot="public" virt="non-virtual">parquet::JSONLogicalType</derivedcompoundref>
    <derivedcompoundref refid="classparquet_1_1_list_logical_type" prot="public" virt="non-virtual">parquet::ListLogicalType</derivedcompoundref>
    <derivedcompoundref refid="classparquet_1_1_map_logical_type" prot="public" virt="non-virtual">parquet::MapLogicalType</derivedcompoundref>
    <derivedcompoundref refid="classparquet_1_1_no_logical_type" prot="public" virt="non-virtual">parquet::NoLogicalType</derivedcompoundref>
    <derivedcompoundref refid="classparquet_1_1_null_logical_type" prot="public" virt="non-virtual">parquet::NullLogicalType</derivedcompoundref>
    <derivedcompoundref refid="classparquet_1_1_string_logical_type" prot="public" virt="non-virtual">parquet::StringLogicalType</derivedcompoundref>
    <derivedcompoundref refid="classparquet_1_1_time_logical_type" prot="public" virt="non-virtual">parquet::TimeLogicalType</derivedcompoundref>
    <derivedcompoundref refid="classparquet_1_1_timestamp_logical_type" prot="public" virt="non-virtual">parquet::TimestampLogicalType</derivedcompoundref>
    <derivedcompoundref refid="classparquet_1_1_unknown_logical_type" prot="public" virt="non-virtual">parquet::UnknownLogicalType</derivedcompoundref>
    <derivedcompoundref refid="classparquet_1_1_u_u_i_d_logical_type" prot="public" virt="non-virtual">parquet::UUIDLogicalType</derivedcompoundref>
    <includes refid="parquet_2types_8h" local="no">parquet/types.h</includes>
    <innerclass refid="structparquet_1_1_logical_type_1_1_time_unit" prot="public">parquet::LogicalType::TimeUnit</innerclass>
    <innerclass refid="structparquet_1_1_logical_type_1_1_type" prot="public">parquet::LogicalType::Type</innerclass>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classparquet_1_1_logical_type_1acbbf4fd554337b1d390fbbc2e8d1b512" prot="protected" static="no" mutable="no">
        <type>std::unique_ptr&lt; const Impl &gt;</type>
        <definition>std::unique_ptr&lt;const Impl&gt; parquet::LogicalType::impl_</definition>
        <argsstring></argsstring>
        <name>impl_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="277" column="1" bodyfile="/arrow/cpp/src/parquet/types.h" bodystart="276" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classparquet_1_1_logical_type_1a511bca411bcfb9bf6389392257b218af" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; const <ref refid="classparquet_1_1_logical_type" kindref="compound">LogicalType</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;const LogicalType&gt; parquet::LogicalType::FromConvertedType</definition>
        <argsstring>(const parquet::ConvertedType::type converted_type, const parquet::schema::DecimalMetadata converted_decimal_metadata={false, -1, -1})</argsstring>
        <name>FromConvertedType</name>
        <param>
          <type>const <ref refid="structparquet_1_1_converted_type_1a4c93674b47bffc29042acda48281e198" kindref="member">parquet::ConvertedType::type</ref></type>
          <declname>converted_type</declname>
        </param>
        <param>
          <type>const <ref refid="structparquet_1_1schema_1_1_decimal_metadata" kindref="compound">parquet::schema::DecimalMetadata</ref></type>
          <declname>converted_decimal_metadata</declname>
          <defval>{false, -1, -1}</defval>
        </param>
        <briefdescription>
<para>If possible, return a logical type equivalent to the given legacy converted type (and decimal metadata if applicable). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="168" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1afb8c25d39fcbb5dfb80564be035bfc45" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; const <ref refid="classparquet_1_1_logical_type" kindref="compound">LogicalType</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;const LogicalType&gt; parquet::LogicalType::FromThrift</definition>
        <argsstring>(const parquet::format::LogicalType &amp;thrift_logical_type)</argsstring>
        <name>FromThrift</name>
        <param>
          <type>const parquet::format::LogicalType &amp;</type>
          <declname>thrift_logical_type</declname>
        </param>
        <briefdescription>
<para>Return the logical type represented by the Thrift intermediary object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="174" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1acd390b472433cd52d63f4239cf39e01e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; const <ref refid="classparquet_1_1_logical_type" kindref="compound">LogicalType</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;const LogicalType&gt; parquet::LogicalType::String</definition>
        <argsstring>()</argsstring>
        <name>String</name>
        <briefdescription>
<para>Return the explicitly requested logical type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="178" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1a0883941e0bb3a3c93e3a0c28900d7e7f" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; const <ref refid="classparquet_1_1_logical_type" kindref="compound">LogicalType</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;const LogicalType&gt; parquet::LogicalType::Map</definition>
        <argsstring>()</argsstring>
        <name>Map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="179" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1a480a602a3e4a9bbbb7a0e4071a4612b3" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; const <ref refid="classparquet_1_1_logical_type" kindref="compound">LogicalType</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;const LogicalType&gt; parquet::LogicalType::List</definition>
        <argsstring>()</argsstring>
        <name>List</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="180" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1a6bef80cde3d20858dfcc1b482e6b1912" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; const <ref refid="classparquet_1_1_logical_type" kindref="compound">LogicalType</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;const LogicalType&gt; parquet::LogicalType::Enum</definition>
        <argsstring>()</argsstring>
        <name>Enum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="181" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1aa3c5ce22ec5c5c2b8cf5b0545b66b52d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; const <ref refid="classparquet_1_1_logical_type" kindref="compound">LogicalType</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;const LogicalType&gt; parquet::LogicalType::Decimal</definition>
        <argsstring>(int32_t precision, int32_t scale=0)</argsstring>
        <name>Decimal</name>
        <param>
          <type>int32_t</type>
          <declname>precision</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>scale</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="182" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1a2331d81d15abaca58f3bfe5815d5f43d" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; const <ref refid="classparquet_1_1_logical_type" kindref="compound">LogicalType</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;const LogicalType&gt; parquet::LogicalType::Date</definition>
        <argsstring>()</argsstring>
        <name>Date</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="183" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1a81e6cf4bfbb3facde926af2376639e65" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; const <ref refid="classparquet_1_1_logical_type" kindref="compound">LogicalType</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;const LogicalType&gt; parquet::LogicalType::Time</definition>
        <argsstring>(bool is_adjusted_to_utc, LogicalType::TimeUnit::unit time_unit)</argsstring>
        <name>Time</name>
        <param>
          <type>bool</type>
          <declname>is_adjusted_to_utc</declname>
        </param>
        <param>
          <type><ref refid="structparquet_1_1_logical_type_1_1_time_unit_1aff12474371123955037b45f28867d3cb" kindref="member">LogicalType::TimeUnit::unit</ref></type>
          <declname>time_unit</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="184" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1a4c4c1456e28155b1decc9063facd8b5b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; const <ref refid="classparquet_1_1_logical_type" kindref="compound">LogicalType</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;const LogicalType&gt; parquet::LogicalType::Timestamp</definition>
        <argsstring>(bool is_adjusted_to_utc, LogicalType::TimeUnit::unit time_unit, bool is_from_converted_type=false, bool force_set_converted_type=false)</argsstring>
        <name>Timestamp</name>
        <param>
          <type>bool</type>
          <declname>is_adjusted_to_utc</declname>
        </param>
        <param>
          <type><ref refid="structparquet_1_1_logical_type_1_1_time_unit_1aff12474371123955037b45f28867d3cb" kindref="member">LogicalType::TimeUnit::unit</ref></type>
          <declname>time_unit</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_from_converted_type</declname>
          <defval>false</defval>
        </param>
        <param>
          <type>bool</type>
          <declname>force_set_converted_type</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
<para>Create a Timestamp logical type. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">is_adjusted_to_utc</parametername>
</parameternamelist>
<parameterdescription>
<para>set true if the data is UTC-normalized </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">time_unit</parametername>
</parameternamelist>
<parameterdescription>
<para>the resolution of the timestamp </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">is_from_converted_type</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, the timestamp was generated by translating a legacy converted type of TIMESTAMP_MILLIS or TIMESTAMP_MICROS. Default is false. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">force_set_converted_type</parametername>
</parameternamelist>
<parameterdescription>
<para>if true, always set the legacy <ref refid="structparquet_1_1_converted_type" kindref="compound">ConvertedType</ref> TIMESTAMP_MICROS and TIMESTAMP_MILLIS metadata. Default is false </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="196" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1afe494daf5ac6d58d1455de2c0554aa50" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; const <ref refid="classparquet_1_1_logical_type" kindref="compound">LogicalType</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;const LogicalType&gt; parquet::LogicalType::Interval</definition>
        <argsstring>()</argsstring>
        <name>Interval</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="200" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1ab27f176c5bf6c1e7227216cf5b590628" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; const <ref refid="classparquet_1_1_logical_type" kindref="compound">LogicalType</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;const LogicalType&gt; parquet::LogicalType::Int</definition>
        <argsstring>(int bit_width, bool is_signed)</argsstring>
        <name>Int</name>
        <param>
          <type>int</type>
          <declname>bit_width</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_signed</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="201" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1aa04f3950a7dbc4b5d70da0aa8bcde8da" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; const <ref refid="classparquet_1_1_logical_type" kindref="compound">LogicalType</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;const LogicalType&gt; parquet::LogicalType::Null</definition>
        <argsstring>()</argsstring>
        <name>Null</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="202" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1ae67294dde8fc4a072d55d10c6181afbc" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; const <ref refid="classparquet_1_1_logical_type" kindref="compound">LogicalType</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;const LogicalType&gt; parquet::LogicalType::JSON</definition>
        <argsstring>()</argsstring>
        <name>JSON</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="203" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1aa3135f90a6a99e92d33766057c6ddae9" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; const <ref refid="classparquet_1_1_logical_type" kindref="compound">LogicalType</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;const LogicalType&gt; parquet::LogicalType::BSON</definition>
        <argsstring>()</argsstring>
        <name>BSON</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="204" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1a28faeae5e8bf49d30ab2a3e6f8e5ded4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; const <ref refid="classparquet_1_1_logical_type" kindref="compound">LogicalType</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;const LogicalType&gt; parquet::LogicalType::UUID</definition>
        <argsstring>()</argsstring>
        <name>UUID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="205" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1a23638949340206c75218c7d310a53210" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; const <ref refid="classparquet_1_1_logical_type" kindref="compound">LogicalType</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;const LogicalType&gt; parquet::LogicalType::None</definition>
        <argsstring>()</argsstring>
        <name>None</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="206" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1adee7c63e888e55b023f5bf965ac3b177" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; const <ref refid="classparquet_1_1_logical_type" kindref="compound">LogicalType</ref> &gt;</type>
        <definition>static std::shared_ptr&lt;const LogicalType&gt; parquet::LogicalType::Unknown</definition>
        <argsstring>()</argsstring>
        <name>Unknown</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="207" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classparquet_1_1_logical_type_1ad0f5165900a9b6be79e479e8ba87fd3c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool parquet::LogicalType::is_applicable</definition>
        <argsstring>(parquet::Type::type primitive_type, int32_t primitive_length=-1) const</argsstring>
        <name>is_applicable</name>
        <param>
          <type><ref refid="structparquet_1_1_type_1a2a4b0ad3da98a8a407a0dc3ecbf737ca" kindref="member">parquet::Type::type</ref></type>
          <declname>primitive_type</declname>
        </param>
        <param>
          <type>int32_t</type>
          <declname>primitive_length</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Return true if this logical type is consistent with the given underlying physical type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="211" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1a5b82b7164d118630ef7aabe19db9efc1" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool parquet::LogicalType::is_compatible</definition>
        <argsstring>(parquet::ConvertedType::type converted_type, parquet::schema::DecimalMetadata converted_decimal_metadata={ false, -1, -1}) const</argsstring>
        <name>is_compatible</name>
        <param>
          <type><ref refid="structparquet_1_1_converted_type_1a4c93674b47bffc29042acda48281e198" kindref="member">parquet::ConvertedType::type</ref></type>
          <declname>converted_type</declname>
        </param>
        <param>
          <type><ref refid="structparquet_1_1schema_1_1_decimal_metadata" kindref="compound">parquet::schema::DecimalMetadata</ref></type>
          <declname>converted_decimal_metadata</declname>
          <defval>{ false, -1, -1}</defval>
        </param>
        <briefdescription>
<para>Return true if this logical type is equivalent to the given legacy converted type (and decimal metadata if applicable). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="216" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1ae2d08d05495ca7c2ec5c5dcae5f53f65" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structparquet_1_1_converted_type_1a4c93674b47bffc29042acda48281e198" kindref="member">parquet::ConvertedType::type</ref></type>
        <definition>parquet::ConvertedType::type parquet::LogicalType::ToConvertedType</definition>
        <argsstring>(parquet::schema::DecimalMetadata *out_decimal_metadata) const</argsstring>
        <name>ToConvertedType</name>
        <param>
          <type><ref refid="structparquet_1_1schema_1_1_decimal_metadata" kindref="compound">parquet::schema::DecimalMetadata</ref> *</type>
          <declname>out_decimal_metadata</declname>
        </param>
        <briefdescription>
<para>If possible, return the legacy converted type (and decimal metadata if applicable) equivalent to this logical type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="222" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1ad0fee7f5a899857abcdc66abd0a9c1d9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string parquet::LogicalType::ToString</definition>
        <argsstring>() const</argsstring>
        <name>ToString</name>
        <briefdescription>
<para>Return a printable representation of this logical type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="226" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1a00783186d7cca3178b9e62b4ab8c46ab" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string parquet::LogicalType::ToJSON</definition>
        <argsstring>() const</argsstring>
        <name>ToJSON</name>
        <briefdescription>
<para>Return a JSON representation of this logical type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="229" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1afe9dd7b5f2be480774b329518f737aa9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>parquet::format::LogicalType</type>
        <definition>parquet::format::LogicalType parquet::LogicalType::ToThrift</definition>
        <argsstring>() const</argsstring>
        <name>ToThrift</name>
        <briefdescription>
<para>Return a serializable Thrift object for this logical type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="232" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1aab6d3ab0e1f344d38a867aabbacc8091" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool parquet::LogicalType::Equals</definition>
        <argsstring>(const LogicalType &amp;other) const</argsstring>
        <name>Equals</name>
        <param>
          <type>const <ref refid="classparquet_1_1_logical_type" kindref="compound">LogicalType</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
<para>Return true if the given logical type is equivalent to this logical type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="235" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1ad581be786934cec3a23b0d0f61ad697d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structparquet_1_1_logical_type_1_1_type_1a417e83a60f7d477e6d39173d1f67053f" kindref="member">LogicalType::Type::type</ref></type>
        <definition>LogicalType::Type::type parquet::LogicalType::type</definition>
        <argsstring>() const</argsstring>
        <name>type</name>
        <briefdescription>
<para>Return the enumerated type of this logical type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="238" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1a8983b31e9fa04698155d4a6ec92209d2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structparquet_1_1_sort_order_1a7aa8892393c3e16bd25f11595281eee8" kindref="member">SortOrder::type</ref></type>
        <definition>SortOrder::type parquet::LogicalType::sort_order</definition>
        <argsstring>() const</argsstring>
        <name>sort_order</name>
        <briefdescription>
<para>Return the appropriate sort order for this logical type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="241" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1a92642d7cba93b61ac51681b908bf29f2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool parquet::LogicalType::is_string</definition>
        <argsstring>() const</argsstring>
        <name>is_string</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="244" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1ac878a386e3adb6d15e6547751d2634d3" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool parquet::LogicalType::is_map</definition>
        <argsstring>() const</argsstring>
        <name>is_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="245" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1a5812d4336d8d7bd704bf469ca0c183df" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool parquet::LogicalType::is_list</definition>
        <argsstring>() const</argsstring>
        <name>is_list</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="246" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1aac6b204740854b2771d20d40259717e7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool parquet::LogicalType::is_enum</definition>
        <argsstring>() const</argsstring>
        <name>is_enum</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="247" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1ae2ea1717b2b94236d53ee9a3f4bd297c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool parquet::LogicalType::is_decimal</definition>
        <argsstring>() const</argsstring>
        <name>is_decimal</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="248" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1af354ee00e3fb12ded2f386e3ae001bf2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool parquet::LogicalType::is_date</definition>
        <argsstring>() const</argsstring>
        <name>is_date</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="249" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1a9ce7e9a3140480c0199ee27f2e2837ec" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool parquet::LogicalType::is_time</definition>
        <argsstring>() const</argsstring>
        <name>is_time</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="250" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1a64e648c9ba389e2b59bfbb850b6a1877" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool parquet::LogicalType::is_timestamp</definition>
        <argsstring>() const</argsstring>
        <name>is_timestamp</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="251" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1a78b986a5d720d79e38087aeffa2433d6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool parquet::LogicalType::is_interval</definition>
        <argsstring>() const</argsstring>
        <name>is_interval</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="252" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1adcd642efb27feeef88885e23c9d179c6" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool parquet::LogicalType::is_int</definition>
        <argsstring>() const</argsstring>
        <name>is_int</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="253" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1ab8d9e9c92686a0762faa9e8fcee4cdaa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool parquet::LogicalType::is_null</definition>
        <argsstring>() const</argsstring>
        <name>is_null</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="254" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1a76ab070a3b6b122f13f561a617ad75fc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool parquet::LogicalType::is_JSON</definition>
        <argsstring>() const</argsstring>
        <name>is_JSON</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="255" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1a8a5f336d3c94c613eb581d1d690367fb" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool parquet::LogicalType::is_BSON</definition>
        <argsstring>() const</argsstring>
        <name>is_BSON</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="256" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1a33856cf7c2b4a3acfc73f6d7afa24c9a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool parquet::LogicalType::is_UUID</definition>
        <argsstring>() const</argsstring>
        <name>is_UUID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="257" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1a0137761c9b90c064358e1fad754b59cd" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool parquet::LogicalType::is_none</definition>
        <argsstring>() const</argsstring>
        <name>is_none</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="258" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1aaf92bf46add07e844251a61ec0b65acc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool parquet::LogicalType::is_valid</definition>
        <argsstring>() const</argsstring>
        <name>is_valid</name>
        <briefdescription>
<para>Return true if this logical type is of a known type. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="260" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1a7b825b43b6907d552d17d420420cf302" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool parquet::LogicalType::is_invalid</definition>
        <argsstring>() const</argsstring>
        <name>is_invalid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="261" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1aa128e5255180e002cd0f20b7811e9109" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool parquet::LogicalType::is_nested</definition>
        <argsstring>() const</argsstring>
        <name>is_nested</name>
        <briefdescription>
<para>Return true if this logical type is suitable for a schema GroupNode. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="263" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1a237dbc719a02c2523714b84530dc06ad" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool parquet::LogicalType::is_nonnested</definition>
        <argsstring>() const</argsstring>
        <name>is_nonnested</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="264" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1aa900ddeb5a817e918d16d54df8eb4451" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool parquet::LogicalType::is_serialized</definition>
        <argsstring>() const</argsstring>
        <name>is_serialized</name>
        <briefdescription>
<para>Return true if this logical type is included in the Thrift output for its node. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="267" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1a5ffd1590547d8c6ceaeccec94ca03455" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>parquet::LogicalType::LogicalType</definition>
        <argsstring>(const LogicalType &amp;)=delete</argsstring>
        <name>LogicalType</name>
        <param>
          <type>const <ref refid="classparquet_1_1_logical_type" kindref="compound">LogicalType</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="269" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1aeda03f9461b9a429632b6630d2d157e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classparquet_1_1_logical_type" kindref="compound">LogicalType</ref> &amp;</type>
        <definition>LogicalType&amp; parquet::LogicalType::operator=</definition>
        <argsstring>(const LogicalType &amp;)=delete</argsstring>
        <name>operator=</name>
        <param>
          <type>const <ref refid="classparquet_1_1_logical_type" kindref="compound">LogicalType</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="270" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1_logical_type_1a7d75d23282731107e70d5d3c9b3f8156" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual parquet::LogicalType::~LogicalType</definition>
        <argsstring>() noexcept</argsstring>
        <name>~LogicalType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="271" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classparquet_1_1_logical_type_1a53bcd53ed17dbb9cac560bc1d8daf335" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>parquet::LogicalType::LogicalType</definition>
        <argsstring>()</argsstring>
        <name>LogicalType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/types.h" line="274" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Implementation of parquet.thrift <ref refid="classparquet_1_1_logical_type" kindref="compound">LogicalType</ref> types. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="2931">
        <label>parquet::TimeLogicalType</label>
        <link refid="classparquet_1_1_time_logical_type"/>
        <childnode refid="2918" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2920">
        <label>parquet::DateLogicalType</label>
        <link refid="classparquet_1_1_date_logical_type"/>
        <childnode refid="2918" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2928">
        <label>parquet::NoLogicalType</label>
        <link refid="classparquet_1_1_no_logical_type"/>
        <childnode refid="2918" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2921">
        <label>parquet::DecimalLogicalType</label>
        <link refid="classparquet_1_1_decimal_logical_type"/>
        <childnode refid="2918" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2929">
        <label>parquet::NullLogicalType</label>
        <link refid="classparquet_1_1_null_logical_type"/>
        <childnode refid="2918" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2926">
        <label>parquet::ListLogicalType</label>
        <link refid="classparquet_1_1_list_logical_type"/>
        <childnode refid="2918" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2930">
        <label>parquet::StringLogicalType</label>
        <link refid="classparquet_1_1_string_logical_type"/>
        <childnode refid="2918" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2932">
        <label>parquet::TimestampLogicalType</label>
        <link refid="classparquet_1_1_timestamp_logical_type"/>
        <childnode refid="2918" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2923">
        <label>parquet::IntervalLogicalType</label>
        <link refid="classparquet_1_1_interval_logical_type"/>
        <childnode refid="2918" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2933">
        <label>parquet::UnknownLogicalType</label>
        <link refid="classparquet_1_1_unknown_logical_type"/>
        <childnode refid="2918" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2919">
        <label>parquet::BSONLogicalType</label>
        <link refid="classparquet_1_1_b_s_o_n_logical_type"/>
        <childnode refid="2918" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2925">
        <label>parquet::JSONLogicalType</label>
        <link refid="classparquet_1_1_j_s_o_n_logical_type"/>
        <childnode refid="2918" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2922">
        <label>parquet::EnumLogicalType</label>
        <link refid="classparquet_1_1_enum_logical_type"/>
        <childnode refid="2918" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2934">
        <label>parquet::UUIDLogicalType</label>
        <link refid="classparquet_1_1_u_u_i_d_logical_type"/>
        <childnode refid="2918" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2924">
        <label>parquet::IntLogicalType</label>
        <link refid="classparquet_1_1_int_logical_type"/>
        <childnode refid="2918" relation="public-inheritance">
        </childnode>
      </node>
      <node id="2918">
        <label>parquet::LogicalType</label>
        <link refid="classparquet_1_1_logical_type"/>
      </node>
      <node id="2927">
        <label>parquet::MapLogicalType</label>
        <link refid="classparquet_1_1_map_logical_type"/>
        <childnode refid="2918" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/arrow/cpp/src/parquet/types.h" line="139" column="1" bodyfile="/arrow/cpp/src/parquet/types.h" bodystart="139" bodyend="278"/>
    <listofallmembers>
      <member refid="classparquet_1_1_logical_type_1aa3135f90a6a99e92d33766057c6ddae9" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>BSON</name></member>
      <member refid="classparquet_1_1_logical_type_1a2331d81d15abaca58f3bfe5815d5f43d" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>Date</name></member>
      <member refid="classparquet_1_1_logical_type_1aa3c5ce22ec5c5c2b8cf5b0545b66b52d" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>Decimal</name></member>
      <member refid="classparquet_1_1_logical_type_1a6bef80cde3d20858dfcc1b482e6b1912" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>Enum</name></member>
      <member refid="classparquet_1_1_logical_type_1aab6d3ab0e1f344d38a867aabbacc8091" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>Equals</name></member>
      <member refid="classparquet_1_1_logical_type_1a511bca411bcfb9bf6389392257b218af" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>FromConvertedType</name></member>
      <member refid="classparquet_1_1_logical_type_1afb8c25d39fcbb5dfb80564be035bfc45" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>FromThrift</name></member>
      <member refid="classparquet_1_1_logical_type_1acbbf4fd554337b1d390fbbc2e8d1b512" prot="protected" virt="non-virtual"><scope>parquet::LogicalType</scope><name>impl_</name></member>
      <member refid="classparquet_1_1_logical_type_1ab27f176c5bf6c1e7227216cf5b590628" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>Int</name></member>
      <member refid="classparquet_1_1_logical_type_1afe494daf5ac6d58d1455de2c0554aa50" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>Interval</name></member>
      <member refid="classparquet_1_1_logical_type_1ad0f5165900a9b6be79e479e8ba87fd3c" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>is_applicable</name></member>
      <member refid="classparquet_1_1_logical_type_1a8a5f336d3c94c613eb581d1d690367fb" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>is_BSON</name></member>
      <member refid="classparquet_1_1_logical_type_1a5b82b7164d118630ef7aabe19db9efc1" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>is_compatible</name></member>
      <member refid="classparquet_1_1_logical_type_1af354ee00e3fb12ded2f386e3ae001bf2" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>is_date</name></member>
      <member refid="classparquet_1_1_logical_type_1ae2ea1717b2b94236d53ee9a3f4bd297c" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>is_decimal</name></member>
      <member refid="classparquet_1_1_logical_type_1aac6b204740854b2771d20d40259717e7" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>is_enum</name></member>
      <member refid="classparquet_1_1_logical_type_1adcd642efb27feeef88885e23c9d179c6" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>is_int</name></member>
      <member refid="classparquet_1_1_logical_type_1a78b986a5d720d79e38087aeffa2433d6" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>is_interval</name></member>
      <member refid="classparquet_1_1_logical_type_1a7b825b43b6907d552d17d420420cf302" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>is_invalid</name></member>
      <member refid="classparquet_1_1_logical_type_1a76ab070a3b6b122f13f561a617ad75fc" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>is_JSON</name></member>
      <member refid="classparquet_1_1_logical_type_1a5812d4336d8d7bd704bf469ca0c183df" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>is_list</name></member>
      <member refid="classparquet_1_1_logical_type_1ac878a386e3adb6d15e6547751d2634d3" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>is_map</name></member>
      <member refid="classparquet_1_1_logical_type_1aa128e5255180e002cd0f20b7811e9109" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>is_nested</name></member>
      <member refid="classparquet_1_1_logical_type_1a0137761c9b90c064358e1fad754b59cd" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>is_none</name></member>
      <member refid="classparquet_1_1_logical_type_1a237dbc719a02c2523714b84530dc06ad" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>is_nonnested</name></member>
      <member refid="classparquet_1_1_logical_type_1ab8d9e9c92686a0762faa9e8fcee4cdaa" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>is_null</name></member>
      <member refid="classparquet_1_1_logical_type_1aa900ddeb5a817e918d16d54df8eb4451" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>is_serialized</name></member>
      <member refid="classparquet_1_1_logical_type_1a92642d7cba93b61ac51681b908bf29f2" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>is_string</name></member>
      <member refid="classparquet_1_1_logical_type_1a9ce7e9a3140480c0199ee27f2e2837ec" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>is_time</name></member>
      <member refid="classparquet_1_1_logical_type_1a64e648c9ba389e2b59bfbb850b6a1877" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>is_timestamp</name></member>
      <member refid="classparquet_1_1_logical_type_1a33856cf7c2b4a3acfc73f6d7afa24c9a" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>is_UUID</name></member>
      <member refid="classparquet_1_1_logical_type_1aaf92bf46add07e844251a61ec0b65acc" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>is_valid</name></member>
      <member refid="classparquet_1_1_logical_type_1ae67294dde8fc4a072d55d10c6181afbc" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>JSON</name></member>
      <member refid="classparquet_1_1_logical_type_1a480a602a3e4a9bbbb7a0e4071a4612b3" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>List</name></member>
      <member refid="classparquet_1_1_logical_type_1a5ffd1590547d8c6ceaeccec94ca03455" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>LogicalType</name></member>
      <member refid="classparquet_1_1_logical_type_1a53bcd53ed17dbb9cac560bc1d8daf335" prot="protected" virt="non-virtual"><scope>parquet::LogicalType</scope><name>LogicalType</name></member>
      <member refid="classparquet_1_1_logical_type_1a0883941e0bb3a3c93e3a0c28900d7e7f" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>Map</name></member>
      <member refid="classparquet_1_1_logical_type_1a23638949340206c75218c7d310a53210" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>None</name></member>
      <member refid="classparquet_1_1_logical_type_1aa04f3950a7dbc4b5d70da0aa8bcde8da" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>Null</name></member>
      <member refid="classparquet_1_1_logical_type_1aeda03f9461b9a429632b6630d2d157e4" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>operator=</name></member>
      <member refid="classparquet_1_1_logical_type_1a8983b31e9fa04698155d4a6ec92209d2" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>sort_order</name></member>
      <member refid="classparquet_1_1_logical_type_1acd390b472433cd52d63f4239cf39e01e" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>String</name></member>
      <member refid="classparquet_1_1_logical_type_1a81e6cf4bfbb3facde926af2376639e65" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>Time</name></member>
      <member refid="classparquet_1_1_logical_type_1a4c4c1456e28155b1decc9063facd8b5b" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>Timestamp</name></member>
      <member refid="classparquet_1_1_logical_type_1ae2d08d05495ca7c2ec5c5dcae5f53f65" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>ToConvertedType</name></member>
      <member refid="classparquet_1_1_logical_type_1a00783186d7cca3178b9e62b4ab8c46ab" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>ToJSON</name></member>
      <member refid="classparquet_1_1_logical_type_1ad0fee7f5a899857abcdc66abd0a9c1d9" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>ToString</name></member>
      <member refid="classparquet_1_1_logical_type_1afe9dd7b5f2be480774b329518f737aa9" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>ToThrift</name></member>
      <member refid="classparquet_1_1_logical_type_1ad581be786934cec3a23b0d0f61ad697d" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>type</name></member>
      <member refid="classparquet_1_1_logical_type_1adee7c63e888e55b023f5bf965ac3b177" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>Unknown</name></member>
      <member refid="classparquet_1_1_logical_type_1a28faeae5e8bf49d30ab2a3e6f8e5ded4" prot="public" virt="non-virtual"><scope>parquet::LogicalType</scope><name>UUID</name></member>
      <member refid="classparquet_1_1_logical_type_1a7d75d23282731107e70d5d3c9b3f8156" prot="public" virt="virtual"><scope>parquet::LogicalType</scope><name>~LogicalType</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
