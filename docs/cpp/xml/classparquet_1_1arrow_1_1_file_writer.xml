<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classparquet_1_1arrow_1_1_file_writer" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>parquet::arrow::FileWriter</compoundname>
    <includes refid="parquet_2arrow_2writer_8h" local="no">parquet/arrow/writer.h</includes>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classparquet_1_1arrow_1_1_file_writer_1a567371a1d3230dc0aa622ec98136c49c" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::<ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>::arrow::Status parquet::arrow::FileWriter::Make</definition>
        <argsstring>(MemoryPool *pool, std::unique_ptr&lt; ParquetFileWriter &gt; writer, std::shared_ptr&lt;::arrow::Schema &gt; schema, std::shared_ptr&lt; ArrowWriterProperties &gt; arrow_properties, std::unique_ptr&lt; FileWriter &gt; *out)</argsstring>
        <name>Make</name>
        <param>
          <type><ref refid="namespaceparquet_1a0d70b006a1f6feca958a1505b38a8cb7" kindref="member">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classparquet_1_1_parquet_file_writer" kindref="compound">ParquetFileWriter</ref> &gt;</type>
          <declname>writer</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt;::<ref refid="classarrow_1_1_schema" kindref="compound">arrow::Schema</ref> &gt;</type>
          <declname>schema</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classparquet_1_1_arrow_writer_properties" kindref="compound">ArrowWriterProperties</ref> &gt;</type>
          <declname>arrow_properties</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classparquet_1_1arrow_1_1_file_writer" kindref="compound">FileWriter</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/writer.h" line="48" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1arrow_1_1_file_writer_1a9301ccaa744b259c5acedece3a3affcd" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::<ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>::arrow::Status parquet::arrow::FileWriter::Open</definition>
        <argsstring>(const ::arrow::Schema &amp;schema, MemoryPool *pool, std::shared_ptr&lt;::arrow::io::OutputStream &gt; sink, std::shared_ptr&lt; WriterProperties &gt; properties, std::unique_ptr&lt; FileWriter &gt; *writer)</argsstring>
        <name>Open</name>
        <param>
          <type>const ::<ref refid="classarrow_1_1_schema" kindref="compound">arrow::Schema</ref> &amp;</type>
          <declname>schema</declname>
        </param>
        <param>
          <type><ref refid="namespaceparquet_1a0d70b006a1f6feca958a1505b38a8cb7" kindref="member">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt;::<ref refid="classarrow_1_1io_1_1_output_stream" kindref="compound">arrow::io::OutputStream</ref> &gt;</type>
          <declname>sink</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classparquet_1_1_writer_properties" kindref="compound">WriterProperties</ref> &gt;</type>
          <declname>properties</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classparquet_1_1arrow_1_1_file_writer" kindref="compound">FileWriter</ref> &gt; *</type>
          <declname>writer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/writer.h" line="53" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1arrow_1_1_file_writer_1acd802be5f1e82001fd92fd3220761c4b" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>::<ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>::arrow::Status parquet::arrow::FileWriter::Open</definition>
        <argsstring>(const ::arrow::Schema &amp;schema, MemoryPool *pool, std::shared_ptr&lt;::arrow::io::OutputStream &gt; sink, std::shared_ptr&lt; WriterProperties &gt; properties, std::shared_ptr&lt; ArrowWriterProperties &gt; arrow_properties, std::unique_ptr&lt; FileWriter &gt; *writer)</argsstring>
        <name>Open</name>
        <param>
          <type>const ::<ref refid="classarrow_1_1_schema" kindref="compound">arrow::Schema</ref> &amp;</type>
          <declname>schema</declname>
        </param>
        <param>
          <type><ref refid="namespaceparquet_1a0d70b006a1f6feca958a1505b38a8cb7" kindref="member">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt;::<ref refid="classarrow_1_1io_1_1_output_stream" kindref="compound">arrow::io::OutputStream</ref> &gt;</type>
          <declname>sink</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classparquet_1_1_writer_properties" kindref="compound">WriterProperties</ref> &gt;</type>
          <declname>properties</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classparquet_1_1_arrow_writer_properties" kindref="compound">ArrowWriterProperties</ref> &gt;</type>
          <declname>arrow_properties</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classparquet_1_1arrow_1_1_file_writer" kindref="compound">FileWriter</ref> &gt; *</type>
          <declname>writer</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/writer.h" line="58" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classparquet_1_1arrow_1_1_file_writer_1a9a7333ff8ab1442e4661efc7ccc8e541" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::shared_ptr&lt;::<ref refid="classarrow_1_1_schema" kindref="compound">arrow::Schema</ref> &gt;</type>
        <definition>virtual std::shared_ptr&lt;::arrow::Schema&gt; parquet::arrow::FileWriter::schema</definition>
        <argsstring>() const =0</argsstring>
        <name>schema</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/writer.h" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1arrow_1_1_file_writer_1a352d860058a12b9b6289cacbab5e393e" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>::<ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>virtual ::arrow::Status parquet::arrow::FileWriter::WriteTable</definition>
        <argsstring>(const ::arrow::Table &amp;table, int64_t chunk_size)=0</argsstring>
        <name>WriteTable</name>
        <param>
          <type>const ::<ref refid="classarrow_1_1_table" kindref="compound">arrow::Table</ref> &amp;</type>
          <declname>table</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>chunk_size</declname>
        </param>
        <briefdescription>
<para>Write a Table to Parquet. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/writer.h" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1arrow_1_1_file_writer_1aa2207ba97fafc5a4c4529e2ed9c477a7" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>::<ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>virtual ::arrow::Status parquet::arrow::FileWriter::NewRowGroup</definition>
        <argsstring>(int64_t chunk_size)=0</argsstring>
        <name>NewRowGroup</name>
        <param>
          <type>int64_t</type>
          <declname>chunk_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/writer.h" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1arrow_1_1_file_writer_1a0d9832e87312cbe60393bd8c5ea79987" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>::<ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>virtual ::arrow::Status parquet::arrow::FileWriter::WriteColumnChunk</definition>
        <argsstring>(const ::arrow::Array &amp;data)=0</argsstring>
        <name>WriteColumnChunk</name>
        <param>
          <type>const ::<ref refid="classarrow_1_1_array" kindref="compound">arrow::Array</ref> &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/writer.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1arrow_1_1_file_writer_1a9088abddc91ddcd9efffbd0c32a4ed63" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>::<ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>virtual ::arrow::Status parquet::arrow::FileWriter::WriteColumnChunk</definition>
        <argsstring>(const std::shared_ptr&lt;::arrow::ChunkedArray &gt; &amp;data, int64_t offset, int64_t size)=0</argsstring>
        <name>WriteColumnChunk</name>
        <param>
          <type>const std::shared_ptr&lt;::<ref refid="classarrow_1_1_chunked_array" kindref="compound">arrow::ChunkedArray</ref> &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>offset</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Write ColumnChunk in row group using slice of a ChunkedArray. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/writer.h" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1arrow_1_1_file_writer_1a678875b7b3f1c8b33816b98703957051" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>::<ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>virtual ::arrow::Status parquet::arrow::FileWriter::WriteColumnChunk</definition>
        <argsstring>(const std::shared_ptr&lt;::arrow::ChunkedArray &gt; &amp;data)=0</argsstring>
        <name>WriteColumnChunk</name>
        <param>
          <type>const std::shared_ptr&lt;::<ref refid="classarrow_1_1_chunked_array" kindref="compound">arrow::ChunkedArray</ref> &gt; &amp;</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/writer.h" line="77" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1arrow_1_1_file_writer_1ad6e3df38b54b23416895e88909f421ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>::<ref refid="classarrow_1_1_status" kindref="compound">arrow::Status</ref></type>
        <definition>virtual ::arrow::Status parquet::arrow::FileWriter::Close</definition>
        <argsstring>()=0</argsstring>
        <name>Close</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/writer.h" line="79" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1arrow_1_1_file_writer_1a6dae15890869f8bf59daf01f1e0486b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual parquet::arrow::FileWriter::~FileWriter</definition>
        <argsstring>()</argsstring>
        <name>~FileWriter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/writer.h" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1arrow_1_1_file_writer_1a642291318f9ac8d9741845f01c5bb9a2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceparquet_1a0d70b006a1f6feca958a1505b38a8cb7" kindref="member">MemoryPool</ref> *</type>
        <definition>virtual MemoryPool* parquet::arrow::FileWriter::memory_pool</definition>
        <argsstring>() const =0</argsstring>
        <name>memory_pool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/writer.h" line="82" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classparquet_1_1arrow_1_1_file_writer_1a1b621dd3919e60d65dc163b7e2c8580d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>const std::shared_ptr&lt; <ref refid="classparquet_1_1_file_meta_data" kindref="compound">FileMetaData</ref> &gt;</type>
        <definition>virtual const std::shared_ptr&lt;FileMetaData&gt; parquet::arrow::FileWriter::metadata</definition>
        <argsstring>() const =0</argsstring>
        <name>metadata</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/parquet/arrow/writer.h" line="83" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Iterative <ref refid="classparquet_1_1arrow_1_1_file_writer" kindref="compound">FileWriter</ref> class. </para>    </briefdescription>
    <detaileddescription>
<para>Start a new RowGroup or Chunk with NewRowGroup. Write column-by-column the whole column chunk. </para>    </detaileddescription>
    <location file="/arrow/cpp/src/parquet/arrow/writer.h" line="46" column="1" bodyfile="/arrow/cpp/src/parquet/arrow/writer.h" bodystart="46" bodyend="84"/>
    <listofallmembers>
      <member refid="classparquet_1_1arrow_1_1_file_writer_1ad6e3df38b54b23416895e88909f421ed" prot="public" virt="pure-virtual"><scope>parquet::arrow::FileWriter</scope><name>Close</name></member>
      <member refid="classparquet_1_1arrow_1_1_file_writer_1a567371a1d3230dc0aa622ec98136c49c" prot="public" virt="non-virtual"><scope>parquet::arrow::FileWriter</scope><name>Make</name></member>
      <member refid="classparquet_1_1arrow_1_1_file_writer_1a642291318f9ac8d9741845f01c5bb9a2" prot="public" virt="pure-virtual"><scope>parquet::arrow::FileWriter</scope><name>memory_pool</name></member>
      <member refid="classparquet_1_1arrow_1_1_file_writer_1a1b621dd3919e60d65dc163b7e2c8580d" prot="public" virt="pure-virtual"><scope>parquet::arrow::FileWriter</scope><name>metadata</name></member>
      <member refid="classparquet_1_1arrow_1_1_file_writer_1aa2207ba97fafc5a4c4529e2ed9c477a7" prot="public" virt="pure-virtual"><scope>parquet::arrow::FileWriter</scope><name>NewRowGroup</name></member>
      <member refid="classparquet_1_1arrow_1_1_file_writer_1a9301ccaa744b259c5acedece3a3affcd" prot="public" virt="non-virtual"><scope>parquet::arrow::FileWriter</scope><name>Open</name></member>
      <member refid="classparquet_1_1arrow_1_1_file_writer_1acd802be5f1e82001fd92fd3220761c4b" prot="public" virt="non-virtual"><scope>parquet::arrow::FileWriter</scope><name>Open</name></member>
      <member refid="classparquet_1_1arrow_1_1_file_writer_1a9a7333ff8ab1442e4661efc7ccc8e541" prot="public" virt="pure-virtual"><scope>parquet::arrow::FileWriter</scope><name>schema</name></member>
      <member refid="classparquet_1_1arrow_1_1_file_writer_1a0d9832e87312cbe60393bd8c5ea79987" prot="public" virt="pure-virtual"><scope>parquet::arrow::FileWriter</scope><name>WriteColumnChunk</name></member>
      <member refid="classparquet_1_1arrow_1_1_file_writer_1a9088abddc91ddcd9efffbd0c32a4ed63" prot="public" virt="pure-virtual"><scope>parquet::arrow::FileWriter</scope><name>WriteColumnChunk</name></member>
      <member refid="classparquet_1_1arrow_1_1_file_writer_1a678875b7b3f1c8b33816b98703957051" prot="public" virt="pure-virtual"><scope>parquet::arrow::FileWriter</scope><name>WriteColumnChunk</name></member>
      <member refid="classparquet_1_1arrow_1_1_file_writer_1a352d860058a12b9b6289cacbab5e393e" prot="public" virt="pure-virtual"><scope>parquet::arrow::FileWriter</scope><name>WriteTable</name></member>
      <member refid="classparquet_1_1arrow_1_1_file_writer_1a6dae15890869f8bf59daf01f1e0486b1" prot="public" virt="virtual"><scope>parquet::arrow::FileWriter</scope><name>~FileWriter</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
