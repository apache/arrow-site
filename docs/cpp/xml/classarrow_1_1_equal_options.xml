<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1_equal_options" kind="class" language="C++" prot="public">
    <compoundname>arrow::EqualOptions</compoundname>
    <includes refid="compare_8h" local="no">arrow/compare.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classarrow_1_1_equal_options_1ac5b77cb47642acc3ca7f60b728ed4dc7" prot="protected" static="no" mutable="no">
        <type>double</type>
        <definition>double arrow::EqualOptions::atol_</definition>
        <argsstring></argsstring>
        <name>atol_</name>
        <initializer>= kDefaultAbsoluteTolerance</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compare.h" line="77" column="1" bodyfile="/arrow/cpp/src/arrow/compare.h" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_equal_options_1a21d1c523626ab9edf40d6c7749b75965" prot="protected" static="no" mutable="no">
        <type>bool</type>
        <definition>bool arrow::EqualOptions::nans_equal_</definition>
        <argsstring></argsstring>
        <name>nans_equal_</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compare.h" line="78" column="1" bodyfile="/arrow/cpp/src/arrow/compare.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1_equal_options_1a5e03cebe9e4635acd764a62e1ba29c28" prot="protected" static="no" mutable="no">
        <type>std::ostream *</type>
        <definition>std::ostream* arrow::EqualOptions::diff_sink_</definition>
        <argsstring></argsstring>
        <name>diff_sink_</name>
        <initializer>= <ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compare.h" line="79" column="1" bodyfile="/arrow/cpp/src/arrow/compare.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1_equal_options_1ad2db936c7fa7f169761134be47933eef" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool arrow::EqualOptions::nans_equal</definition>
        <argsstring>() const</argsstring>
        <name>nans_equal</name>
        <briefdescription>
<para>Whether or not NaNs are considered equal. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compare.h" line="42" column="1" bodyfile="/arrow/cpp/src/arrow/compare.h" bodystart="42" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_equal_options_1a840a92804c5d78655b6181e468685666" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_equal_options" kindref="compound">EqualOptions</ref></type>
        <definition>EqualOptions arrow::EqualOptions::nans_equal</definition>
        <argsstring>(bool v) const</argsstring>
        <name>nans_equal</name>
        <param>
          <type>bool</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Return a new <ref refid="classarrow_1_1_equal_options" kindref="compound">EqualOptions</ref> object with the &quot;nans_equal&quot; property changed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compare.h" line="45" column="1" bodyfile="/arrow/cpp/src/arrow/compare.h" bodystart="45" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_equal_options_1a32a4b082f092bc6670b8e2a1b6d8afaf" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double arrow::EqualOptions::atol</definition>
        <argsstring>() const</argsstring>
        <name>atol</name>
        <briefdescription>
<para>The absolute tolerance for approximate comparisons of floating-point values. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compare.h" line="52" column="1" bodyfile="/arrow/cpp/src/arrow/compare.h" bodystart="52" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_equal_options_1a49be00a29ffc69f1113e09faa185e991" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_equal_options" kindref="compound">EqualOptions</ref></type>
        <definition>EqualOptions arrow::EqualOptions::atol</definition>
        <argsstring>(double v) const</argsstring>
        <name>atol</name>
        <param>
          <type>double</type>
          <declname>v</declname>
        </param>
        <briefdescription>
<para>Return a new <ref refid="classarrow_1_1_equal_options" kindref="compound">EqualOptions</ref> object with the &quot;atol&quot; property changed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compare.h" line="55" column="1" bodyfile="/arrow/cpp/src/arrow/compare.h" bodystart="55" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_equal_options_1a2cde1e8119519ea43b91c2fc1ba12c32" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream *</type>
        <definition>std::ostream* arrow::EqualOptions::diff_sink</definition>
        <argsstring>() const</argsstring>
        <name>diff_sink</name>
        <briefdescription>
<para>The ostream to which a diff will be formatted if arrays disagree. </para>        </briefdescription>
        <detaileddescription>
<para>If this is null (the default) no diff will be formatted. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compare.h" line="63" column="1" bodyfile="/arrow/cpp/src/arrow/compare.h" bodystart="63" bodyend="63"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1_equal_options_1abcfa5d061fe4d39c6b35bec9ee6800ed" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_equal_options" kindref="compound">EqualOptions</ref></type>
        <definition>EqualOptions arrow::EqualOptions::diff_sink</definition>
        <argsstring>(std::ostream *diff_sink) const</argsstring>
        <name>diff_sink</name>
        <param>
          <type>std::ostream *</type>
          <declname>diff_sink</declname>
        </param>
        <briefdescription>
<para>Return a new <ref refid="classarrow_1_1_equal_options" kindref="compound">EqualOptions</ref> object with the &quot;diff_sink&quot; property changed. </para>        </briefdescription>
        <detaileddescription>
<para>This option will be ignored if diff formatting of the types of compared arrays is not supported. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compare.h" line="68" column="1" bodyfile="/arrow/cpp/src/arrow/compare.h" bodystart="68" bodyend="72"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1_equal_options_1aceb7c9984ead6d5a79ba4a725193d452" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classarrow_1_1_equal_options" kindref="compound">EqualOptions</ref></type>
        <definition>static EqualOptions arrow::EqualOptions::Defaults</definition>
        <argsstring>()</argsstring>
        <name>Defaults</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/compare.h" line="74" column="1" bodyfile="/arrow/cpp/src/arrow/compare.h" bodystart="74" bodyend="74"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A container of options for equality comparisons. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/arrow/cpp/src/arrow/compare.h" line="39" column="1" bodyfile="/arrow/cpp/src/arrow/compare.h" bodystart="39" bodyend="80"/>
    <listofallmembers>
      <member refid="classarrow_1_1_equal_options_1a32a4b082f092bc6670b8e2a1b6d8afaf" prot="public" virt="non-virtual"><scope>arrow::EqualOptions</scope><name>atol</name></member>
      <member refid="classarrow_1_1_equal_options_1a49be00a29ffc69f1113e09faa185e991" prot="public" virt="non-virtual"><scope>arrow::EqualOptions</scope><name>atol</name></member>
      <member refid="classarrow_1_1_equal_options_1ac5b77cb47642acc3ca7f60b728ed4dc7" prot="protected" virt="non-virtual"><scope>arrow::EqualOptions</scope><name>atol_</name></member>
      <member refid="classarrow_1_1_equal_options_1aceb7c9984ead6d5a79ba4a725193d452" prot="public" virt="non-virtual"><scope>arrow::EqualOptions</scope><name>Defaults</name></member>
      <member refid="classarrow_1_1_equal_options_1a2cde1e8119519ea43b91c2fc1ba12c32" prot="public" virt="non-virtual"><scope>arrow::EqualOptions</scope><name>diff_sink</name></member>
      <member refid="classarrow_1_1_equal_options_1abcfa5d061fe4d39c6b35bec9ee6800ed" prot="public" virt="non-virtual"><scope>arrow::EqualOptions</scope><name>diff_sink</name></member>
      <member refid="classarrow_1_1_equal_options_1a5e03cebe9e4635acd764a62e1ba29c28" prot="protected" virt="non-virtual"><scope>arrow::EqualOptions</scope><name>diff_sink_</name></member>
      <member refid="classarrow_1_1_equal_options_1ad2db936c7fa7f169761134be47933eef" prot="public" virt="non-virtual"><scope>arrow::EqualOptions</scope><name>nans_equal</name></member>
      <member refid="classarrow_1_1_equal_options_1a840a92804c5d78655b6181e468685666" prot="public" virt="non-virtual"><scope>arrow::EqualOptions</scope><name>nans_equal</name></member>
      <member refid="classarrow_1_1_equal_options_1a21d1c523626ab9edf40d6c7749b75965" prot="protected" virt="non-virtual"><scope>arrow::EqualOptions</scope><name>nans_equal_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
