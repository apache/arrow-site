<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classplasma_1_1_quota_aware_policy" kind="class" language="C++" prot="public">
    <compoundname>plasma::QuotaAwarePolicy</compoundname>
    <basecompoundref refid="classplasma_1_1_eviction_policy" prot="public" virt="non-virtual">plasma::EvictionPolicy</basecompoundref>
    <includes refid="quota__aware__policy_8h" local="no">plasma/quota_aware_policy.h</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classplasma_1_1_quota_aware_policy_1a85b98fb39f5e961655493e4a64ecac01" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; <ref refid="structplasma_1_1_client" kindref="compound">Client</ref> *, std::unique_ptr&lt; <ref refid="classplasma_1_1_l_r_u_cache" kindref="compound">LRUCache</ref> &gt; &gt;</type>
        <definition>std::unordered_map&lt;Client*, std::unique_ptr&lt;LRUCache&gt; &gt; plasma::QuotaAwarePolicy::per_client_cache_</definition>
        <argsstring></argsstring>
        <name>per_client_cache_</name>
        <briefdescription>
<para>Per-client LRU caches, if quota is enabled. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/quota_aware_policy.h" line="79" column="1" bodyfile="/arrow/cpp/src/plasma/quota_aware_policy.h" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classplasma_1_1_quota_aware_policy_1a2a95758ea316eaed8d3a66e2ee371438" prot="private" static="no" mutable="no">
        <type>std::unordered_map&lt; <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref>, <ref refid="structplasma_1_1_client" kindref="compound">Client</ref> * &gt;</type>
        <definition>std::unordered_map&lt;ObjectID, Client*&gt; plasma::QuotaAwarePolicy::owned_by_client_</definition>
        <argsstring></argsstring>
        <name>owned_by_client_</name>
        <briefdescription>
<para>Tracks which client created which object. </para>        </briefdescription>
        <detaileddescription>
<para>This only applies to clients that have a memory quota set. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/quota_aware_policy.h" line="82" column="1" bodyfile="/arrow/cpp/src/plasma/quota_aware_policy.h" bodystart="82" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classplasma_1_1_quota_aware_policy_1a7a21792fc3f062aaa757d823482d6bc8" prot="private" static="no" mutable="no">
        <type>std::unordered_set&lt; <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &gt;</type>
        <definition>std::unordered_set&lt;ObjectID&gt; plasma::QuotaAwarePolicy::shared_for_read_</definition>
        <argsstring></argsstring>
        <name>shared_for_read_</name>
        <briefdescription>
<para>Tracks which objects are mapped for read and hence can&apos;t be evicted. </para>        </briefdescription>
        <detaileddescription>
<para>However these objects are still tracked within the client caches. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/quota_aware_policy.h" line="85" column="1" bodyfile="/arrow/cpp/src/plasma/quota_aware_policy.h" bodystart="85" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classplasma_1_1_quota_aware_policy_1a98d817c68823991781461efe53ad9248" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <type></type>
        <definition>plasma::QuotaAwarePolicy::QuotaAwarePolicy</definition>
        <argsstring>(PlasmaStoreInfo *store_info, int64_t max_size)</argsstring>
        <name>QuotaAwarePolicy</name>
        <param>
          <type><ref refid="structplasma_1_1_plasma_store_info" kindref="compound">PlasmaStoreInfo</ref> *</type>
          <declname>store_info</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>max_size</declname>
        </param>
        <briefdescription>
<para>Construct a quota-aware eviction policy. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>store_info</parametername>
</parameternamelist>
<parameterdescription>
<para>Information about the Plasma store that is exposed to the eviction policy. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max_size</parametername>
</parameternamelist>
<parameterdescription>
<para>Max size in bytes total of objects to store. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/quota_aware_policy.h" line="62" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_quota_aware_policy_1a2bdd1f9498409b2bb943ddc265e23b43" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void plasma::QuotaAwarePolicy::ObjectCreated</definition>
        <argsstring>(const ObjectID &amp;object_id, Client *client, bool is_create) override</argsstring>
        <name>ObjectCreated</name>
        <reimplements refid="classplasma_1_1_eviction_policy_1a444bb25633645dd61a4163f54ea6784b">ObjectCreated</reimplements>
        <param>
          <type>const <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &amp;</type>
          <declname>object_id</declname>
        </param>
        <param>
          <type><ref refid="structplasma_1_1_client" kindref="compound">Client</ref> *</type>
          <declname>client</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_create</declname>
        </param>
        <briefdescription>
<para>This method will be called whenever an object is first created in order to add it to the LRU cache. </para>        </briefdescription>
        <detaileddescription>
<para>This is done so that the first time, the Plasma store calls begin_object_access, we can remove the object from the LRU cache.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The object ID of the object that was created. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>client</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to the client. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_create</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether we are creating a new object (vs reading an object). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/quota_aware_policy.h" line="63" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_quota_aware_policy_1a2ab5a2897e21ef0d96859947755e2d8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool plasma::QuotaAwarePolicy::SetClientQuota</definition>
        <argsstring>(Client *client, int64_t output_memory_quota) override</argsstring>
        <name>SetClientQuota</name>
        <reimplements refid="classplasma_1_1_eviction_policy_1a084fcfb32d14d978bb18d140dcc4c64e">SetClientQuota</reimplements>
        <param>
          <type><ref refid="structplasma_1_1_client" kindref="compound">Client</ref> *</type>
          <declname>client</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>output_memory_quota</declname>
        </param>
        <briefdescription>
<para>Set quota for a client. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>client</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to the client. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>output_memory_quota</parametername>
</parameternamelist>
<parameterdescription>
<para>Set the quota for this client. This can only be called once per client. This is effectively the equivalent of giving the client its own LRU cache instance. The memory for this is taken out of the capacity of the global LRU cache for the client lifetime.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if enough space can be reserved for the given client quota. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/quota_aware_policy.h" line="64" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_quota_aware_policy_1afaba9f168db19d0e00bdfad7f7965677" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>bool</type>
        <definition>bool plasma::QuotaAwarePolicy::EnforcePerClientQuota</definition>
        <argsstring>(Client *client, int64_t size, bool is_create, std::vector&lt; ObjectID &gt; *objects_to_evict) override</argsstring>
        <name>EnforcePerClientQuota</name>
        <reimplements refid="classplasma_1_1_eviction_policy_1ac4a4c94e0291a5ba533af63077029e89">EnforcePerClientQuota</reimplements>
        <param>
          <type><ref refid="structplasma_1_1_client" kindref="compound">Client</ref> *</type>
          <declname>client</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>size</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_create</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &gt; *</type>
          <declname>objects_to_evict</declname>
        </param>
        <briefdescription>
<para>Determine what objects need to be evicted to enforce the given client&apos;s quota. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>client</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to the client creating the object. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the object to create. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>is_create</parametername>
</parameternamelist>
<parameterdescription>
<para>Whether we are creating a new object (vs reading an object). </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>objects_to_evict</parametername>
</parameternamelist>
<parameterdescription>
<para>The object IDs that were chosen for eviction will be stored into this vector.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True if enough space could be freed and false otherwise. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/quota_aware_policy.h" line="65" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_quota_aware_policy_1a67365071fc86ce8494ec1871a9ab2456" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void plasma::QuotaAwarePolicy::ClientDisconnected</definition>
        <argsstring>(Client *client) override</argsstring>
        <name>ClientDisconnected</name>
        <reimplements refid="classplasma_1_1_eviction_policy_1aa690a34a5cb611b8676e46e6cd8e6b6a">ClientDisconnected</reimplements>
        <param>
          <type><ref refid="structplasma_1_1_client" kindref="compound">Client</ref> *</type>
          <declname>client</declname>
        </param>
        <briefdescription>
<para>Called to clean up any resources allocated by this client. </para>        </briefdescription>
        <detaileddescription>
<para>This merges any per-client LRU queue created by SetClientQuota into the global LRU queue.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>client</parametername>
</parameternamelist>
<parameterdescription>
<para>The pointer to the client. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/quota_aware_policy.h" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_quota_aware_policy_1a3680e14ede7ac64700140f7941b69b8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void plasma::QuotaAwarePolicy::BeginObjectAccess</definition>
        <argsstring>(const ObjectID &amp;object_id) override</argsstring>
        <name>BeginObjectAccess</name>
        <reimplements refid="classplasma_1_1_eviction_policy_1acb7b3db12819c7f8632ef61a040cea97">BeginObjectAccess</reimplements>
        <param>
          <type>const <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &amp;</type>
          <declname>object_id</declname>
        </param>
        <briefdescription>
<para>This method will be called whenever an unused object in the Plasma store starts to be used. </para>        </briefdescription>
        <detaileddescription>
<para>When this method is called, the eviction policy will assume that the objects chosen to be evicted will in fact be evicted from the Plasma store by the caller.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the object that is now being used. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/quota_aware_policy.h" line="68" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_quota_aware_policy_1a2d8f9f74003f31d79ec9e13d269e3da8" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void plasma::QuotaAwarePolicy::EndObjectAccess</definition>
        <argsstring>(const ObjectID &amp;object_id) override</argsstring>
        <name>EndObjectAccess</name>
        <reimplements refid="classplasma_1_1_eviction_policy_1a176728d8bd0b60646b8db067a9e57be1">EndObjectAccess</reimplements>
        <param>
          <type>const <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &amp;</type>
          <declname>object_id</declname>
        </param>
        <briefdescription>
<para>This method will be called whenever an object in the Plasma store that was being used is no longer being used. </para>        </briefdescription>
        <detaileddescription>
<para>When this method is called, the eviction policy will assume that the objects chosen to be evicted will in fact be evicted from the Plasma store by the caller.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the object that is no longer being used. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/quota_aware_policy.h" line="69" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_quota_aware_policy_1a8d285fc3a0790b952ca9242a6a49a3aa" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void plasma::QuotaAwarePolicy::RemoveObject</definition>
        <argsstring>(const ObjectID &amp;object_id) override</argsstring>
        <name>RemoveObject</name>
        <reimplements refid="classplasma_1_1_eviction_policy_1ad0ffe94b655665efdfe1beb908b356a9">RemoveObject</reimplements>
        <param>
          <type>const <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &amp;</type>
          <declname>object_id</declname>
        </param>
        <briefdescription>
<para>This method will be called when an object is going to be removed. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>object_id</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the object that is now being used. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/quota_aware_policy.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_quota_aware_policy_1a4cb58b8cda6140abca62b9d7f6d45cbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>void plasma::QuotaAwarePolicy::RefreshObjects</definition>
        <argsstring>(const std::vector&lt; ObjectID &gt; &amp;object_ids) override</argsstring>
        <name>RefreshObjects</name>
        <reimplements refid="classplasma_1_1_eviction_policy_1abc9c15167b5a009763db5515814a313f">RefreshObjects</reimplements>
        <param>
          <type>const std::vector&lt; <ref refid="namespaceplasma_1adf1aa2f87f6f11e1993628f574e31e75" kindref="member">ObjectID</ref> &gt; &amp;</type>
          <declname>object_ids</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/quota_aware_policy.h" line="71" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classplasma_1_1_quota_aware_policy_1afb58e0563422446314e303e9460598c4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>std::string</type>
        <definition>std::string plasma::QuotaAwarePolicy::DebugString</definition>
        <argsstring>() const override</argsstring>
        <name>DebugString</name>
        <reimplements refid="classplasma_1_1_eviction_policy_1aa4e68f089858d59db533091c7a8a6f35">DebugString</reimplements>
        <briefdescription>
<para>Returns debugging information for this eviction policy. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/quota_aware_policy.h" line="72" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classplasma_1_1_quota_aware_policy_1af1dadbda838f8ca9b8983ed761c1acaf" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool plasma::QuotaAwarePolicy::HasQuota</definition>
        <argsstring>(Client *client, bool is_create)</argsstring>
        <name>HasQuota</name>
        <param>
          <type><ref refid="structplasma_1_1_client" kindref="compound">Client</ref> *</type>
          <declname>client</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>is_create</declname>
        </param>
        <briefdescription>
<para>Returns whether we are enforcing memory quotas for an operation. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/plasma/quota_aware_policy.h" line="76" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Extends the basic eviction policy to implement per-client memory quotas. </para>    </briefdescription>
    <detaileddescription>
<para>This effectively gives each client its own LRU queue, which caps its memory usage and protects this memory from being evicted by other clients.</para><para>The quotas are enforced when objects are first created, by evicting the necessary number of objects from the client&apos;s own LRU queue to cap its memory usage. Once that is done, allocation is handled by the normal eviction policy. This may result in the eviction of objects from the global LRU queue, if not enough memory can be allocated even after the evictions from the client&apos;s own LRU queue.</para><para>Some special cases:<itemizedlist>
<listitem><para>When a pinned object is &quot;evicted&quot; from a per-client queue, it is instead transferred into the global LRU queue.</para></listitem><listitem><para>When a client disconnects, its LRU queue is merged into the head of the global LRU queue. </para></listitem></itemizedlist>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="3731">
        <label>plasma::QuotaAwarePolicy</label>
        <link refid="classplasma_1_1_quota_aware_policy"/>
        <childnode refid="3732" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3732">
        <label>plasma::EvictionPolicy</label>
        <link refid="classplasma_1_1_eviction_policy"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="3735">
        <label>plasma::LRUCache</label>
        <link refid="classplasma_1_1_l_r_u_cache"/>
      </node>
      <node id="3733">
        <label>plasma::QuotaAwarePolicy</label>
        <link refid="classplasma_1_1_quota_aware_policy"/>
        <childnode refid="3734" relation="public-inheritance">
        </childnode>
      </node>
      <node id="3734">
        <label>plasma::EvictionPolicy</label>
        <link refid="classplasma_1_1_eviction_policy"/>
        <childnode refid="3735" relation="usage">
          <edgelabel>cache_</edgelabel>
        </childnode>
        <childnode refid="3736" relation="usage">
          <edgelabel>store_info_</edgelabel>
        </childnode>
      </node>
      <node id="3736">
        <label>plasma::PlasmaStoreInfo</label>
        <link refid="structplasma_1_1_plasma_store_info"/>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/plasma/quota_aware_policy.h" line="55" column="1" bodyfile="/arrow/cpp/src/plasma/quota_aware_policy.h" bodystart="55" bodyend="86"/>
    <listofallmembers>
      <member refid="classplasma_1_1_quota_aware_policy_1a3680e14ede7ac64700140f7941b69b8a" prot="public" virt="virtual"><scope>plasma::QuotaAwarePolicy</scope><name>BeginObjectAccess</name></member>
      <member refid="classplasma_1_1_eviction_policy_1ab035814f65b85c6692d15a49987aecbe" prot="protected" virt="non-virtual"><scope>plasma::QuotaAwarePolicy</scope><name>cache_</name></member>
      <member refid="classplasma_1_1_eviction_policy_1a019301658b3c0577de8f3b6f4122a850" prot="public" virt="virtual"><scope>plasma::QuotaAwarePolicy</scope><name>ChooseObjectsToEvict</name></member>
      <member refid="classplasma_1_1_quota_aware_policy_1a67365071fc86ce8494ec1871a9ab2456" prot="public" virt="virtual"><scope>plasma::QuotaAwarePolicy</scope><name>ClientDisconnected</name></member>
      <member refid="classplasma_1_1_quota_aware_policy_1afb58e0563422446314e303e9460598c4" prot="public" virt="virtual"><scope>plasma::QuotaAwarePolicy</scope><name>DebugString</name></member>
      <member refid="classplasma_1_1_quota_aware_policy_1a2d8f9f74003f31d79ec9e13d269e3da8" prot="public" virt="virtual"><scope>plasma::QuotaAwarePolicy</scope><name>EndObjectAccess</name></member>
      <member refid="classplasma_1_1_quota_aware_policy_1afaba9f168db19d0e00bdfad7f7965677" prot="public" virt="virtual"><scope>plasma::QuotaAwarePolicy</scope><name>EnforcePerClientQuota</name></member>
      <member refid="classplasma_1_1_eviction_policy_1aecc30b5188da8a25aeb813eeac2549c6" prot="public" virt="non-virtual"><scope>plasma::QuotaAwarePolicy</scope><name>EvictionPolicy</name></member>
      <member refid="classplasma_1_1_eviction_policy_1a118a523789648de2e552a3f571fe23f5" prot="protected" virt="non-virtual"><scope>plasma::QuotaAwarePolicy</scope><name>GetObjectSize</name></member>
      <member refid="classplasma_1_1_quota_aware_policy_1af1dadbda838f8ca9b8983ed761c1acaf" prot="private" virt="non-virtual"><scope>plasma::QuotaAwarePolicy</scope><name>HasQuota</name></member>
      <member refid="classplasma_1_1_quota_aware_policy_1a2bdd1f9498409b2bb943ddc265e23b43" prot="public" virt="virtual"><scope>plasma::QuotaAwarePolicy</scope><name>ObjectCreated</name></member>
      <member refid="classplasma_1_1_quota_aware_policy_1a2a95758ea316eaed8d3a66e2ee371438" prot="private" virt="non-virtual"><scope>plasma::QuotaAwarePolicy</scope><name>owned_by_client_</name></member>
      <member refid="classplasma_1_1_quota_aware_policy_1a85b98fb39f5e961655493e4a64ecac01" prot="private" virt="non-virtual"><scope>plasma::QuotaAwarePolicy</scope><name>per_client_cache_</name></member>
      <member refid="classplasma_1_1_eviction_policy_1aae9d0c10bfb3301a99a2ba1d6f85af41" prot="protected" virt="non-virtual"><scope>plasma::QuotaAwarePolicy</scope><name>pinned_memory_bytes_</name></member>
      <member refid="classplasma_1_1_quota_aware_policy_1a98d817c68823991781461efe53ad9248" prot="public" virt="non-virtual"><scope>plasma::QuotaAwarePolicy</scope><name>QuotaAwarePolicy</name></member>
      <member refid="classplasma_1_1_quota_aware_policy_1a4cb58b8cda6140abca62b9d7f6d45cbe" prot="public" virt="virtual"><scope>plasma::QuotaAwarePolicy</scope><name>RefreshObjects</name></member>
      <member refid="classplasma_1_1_quota_aware_policy_1a8d285fc3a0790b952ca9242a6a49a3aa" prot="public" virt="virtual"><scope>plasma::QuotaAwarePolicy</scope><name>RemoveObject</name></member>
      <member refid="classplasma_1_1_eviction_policy_1a27026ab6d95cf2554d5389efbc0912a8" prot="public" virt="virtual"><scope>plasma::QuotaAwarePolicy</scope><name>RequireSpace</name></member>
      <member refid="classplasma_1_1_quota_aware_policy_1a2ab5a2897e21ef0d96859947755e2d8a" prot="public" virt="virtual"><scope>plasma::QuotaAwarePolicy</scope><name>SetClientQuota</name></member>
      <member refid="classplasma_1_1_quota_aware_policy_1a7a21792fc3f062aaa757d823482d6bc8" prot="private" virt="non-virtual"><scope>plasma::QuotaAwarePolicy</scope><name>shared_for_read_</name></member>
      <member refid="classplasma_1_1_eviction_policy_1a080bf6e4bd6ff04d07a682eeae1ca74b" prot="protected" virt="non-virtual"><scope>plasma::QuotaAwarePolicy</scope><name>store_info_</name></member>
      <member refid="classplasma_1_1_eviction_policy_1a6eafeafec7f514890b6fc825f4ce712d" prot="public" virt="virtual"><scope>plasma::QuotaAwarePolicy</scope><name>~EvictionPolicy</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
