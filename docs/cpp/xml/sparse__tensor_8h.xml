<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="sparse__tensor_8h" kind="file" language="C++">
    <compoundname>sparse_tensor.h</compoundname>
    <includes local="no">cstddef</includes>
    <includes local="no">cstdint</includes>
    <includes local="no">memory</includes>
    <includes local="no">string</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includes refid="buffer_8h" local="yes">arrow/buffer.h</includes>
    <includes refid="compare_8h" local="yes">arrow/compare.h</includes>
    <includes refid="result_8h" local="yes">arrow/result.h</includes>
    <includes refid="status_8h" local="yes">arrow/status.h</includes>
    <includes refid="tensor_8h" local="yes">arrow/tensor.h</includes>
    <includes refid="type_8h" local="yes">arrow/type.h</includes>
    <includes refid="checked__cast_8h" local="yes">arrow/util/checked_cast.h</includes>
    <includes refid="macros_8h" local="yes">arrow/util/macros.h</includes>
    <includes refid="arrow_2util_2visibility_8h" local="yes">arrow/util/visibility.h</includes>
    <includedby refid="metadata__internal_8h" local="yes">/arrow/cpp/src/arrow/ipc/metadata_internal.h</includedby>
    <includedby refid="numpy__convert_8h" local="yes">/arrow/cpp/src/arrow/python/numpy_convert.h</includedby>
    <includedby refid="pyarrow_8h" local="yes">/arrow/cpp/src/arrow/python/pyarrow.h</includedby>
    <includedby refid="serialize_8h" local="yes">/arrow/cpp/src/arrow/python/serialize.h</includedby>
    <includedby refid="tensor_2converter_8h" local="yes">/arrow/cpp/src/arrow/tensor/converter.h</includedby>
    <incdepgraph>
      <node id="10894">
        <label>atomic</label>
      </node>
      <node id="10882">
        <label>arrow/util/compare.h</label>
        <link refid="util_2compare_8h"/>
        <childnode refid="10870" relation="include">
        </childnode>
        <childnode refid="10876" relation="include">
        </childnode>
        <childnode refid="10872" relation="include">
        </childnode>
        <childnode refid="10880" relation="include">
        </childnode>
      </node>
      <node id="10908">
        <label>limits</label>
      </node>
      <node id="10869">
        <label>cstdint</label>
      </node>
      <node id="10867">
        <label>/arrow/cpp/src/arrow/sparse_tensor.h</label>
        <link refid="sparse__tensor_8h"/>
        <childnode refid="10868" relation="include">
        </childnode>
        <childnode refid="10869" relation="include">
        </childnode>
        <childnode refid="10870" relation="include">
        </childnode>
        <childnode refid="10871" relation="include">
        </childnode>
        <childnode refid="10872" relation="include">
        </childnode>
        <childnode refid="10873" relation="include">
        </childnode>
        <childnode refid="10874" relation="include">
        </childnode>
        <childnode refid="10889" relation="include">
        </childnode>
        <childnode refid="10890" relation="include">
        </childnode>
        <childnode refid="10883" relation="include">
        </childnode>
        <childnode refid="10892" relation="include">
        </childnode>
        <childnode refid="10893" relation="include">
        </childnode>
        <childnode refid="10896" relation="include">
        </childnode>
        <childnode refid="10880" relation="include">
        </childnode>
        <childnode refid="10881" relation="include">
        </childnode>
      </node>
      <node id="10874">
        <label>arrow/buffer.h</label>
        <link refid="buffer_8h"/>
        <childnode refid="10869" relation="include">
        </childnode>
        <childnode refid="10875" relation="include">
        </childnode>
        <childnode refid="10870" relation="include">
        </childnode>
        <childnode refid="10871" relation="include">
        </childnode>
        <childnode refid="10876" relation="include">
        </childnode>
        <childnode refid="10872" relation="include">
        </childnode>
        <childnode refid="10873" relation="include">
        </childnode>
        <childnode refid="10877" relation="include">
        </childnode>
        <childnode refid="10878" relation="include">
        </childnode>
        <childnode refid="10883" relation="include">
        </childnode>
        <childnode refid="10879" relation="include">
        </childnode>
        <childnode refid="10880" relation="include">
        </childnode>
        <childnode refid="10887" relation="include">
        </childnode>
        <childnode refid="10881" relation="include">
        </childnode>
      </node>
      <node id="10902">
        <label>endian.h</label>
      </node>
      <node id="10883">
        <label>arrow/status.h</label>
        <link refid="status_8h"/>
        <childnode refid="10875" relation="include">
        </childnode>
        <childnode refid="10884" relation="include">
        </childnode>
        <childnode refid="10870" relation="include">
        </childnode>
        <childnode refid="10871" relation="include">
        </childnode>
        <childnode refid="10872" relation="include">
        </childnode>
        <childnode refid="10882" relation="include">
        </childnode>
        <childnode refid="10880" relation="include">
        </childnode>
        <childnode refid="10885" relation="include">
        </childnode>
        <childnode refid="10881" relation="include">
        </childnode>
      </node>
      <node id="10909">
        <label>arrow/util/functional.h</label>
        <link refid="functional_8h"/>
        <childnode refid="10910" relation="include">
        </childnode>
        <childnode refid="10876" relation="include">
        </childnode>
        <childnode refid="10880" relation="include">
        </childnode>
      </node>
      <node id="10879">
        <label>arrow/type_fwd.h</label>
        <link refid="type__fwd_8h"/>
        <childnode refid="10870" relation="include">
        </childnode>
        <childnode refid="10871" relation="include">
        </childnode>
        <childnode refid="10873" relation="include">
        </childnode>
        <childnode refid="10880" relation="include">
        </childnode>
        <childnode refid="10881" relation="include">
        </childnode>
      </node>
      <node id="10907">
        <label>cmath</label>
      </node>
      <node id="10906">
        <label>cassert</label>
      </node>
      <node id="10896">
        <label>arrow/util/checked_cast.h</label>
        <link refid="checked__cast_8h"/>
        <childnode refid="10870" relation="include">
        </childnode>
        <childnode refid="10876" relation="include">
        </childnode>
      </node>
      <node id="10871">
        <label>string</label>
      </node>
      <node id="10888">
        <label>arrow/vendored/string_view.hpp</label>
      </node>
      <node id="10889">
        <label>arrow/compare.h</label>
        <link refid="compare_8h"/>
        <childnode refid="10869" relation="include">
        </childnode>
        <childnode refid="10884" relation="include">
        </childnode>
        <childnode refid="10880" relation="include">
        </childnode>
        <childnode refid="10881" relation="include">
        </childnode>
      </node>
      <node id="10897">
        <label>arrow/util/variant.h</label>
        <link refid="variant_8h"/>
        <childnode refid="10898" relation="include">
        </childnode>
      </node>
      <node id="10899">
        <label>arrow/visitor.h</label>
        <link refid="visitor_8h"/>
        <childnode refid="10883" relation="include">
        </childnode>
        <childnode refid="10879" relation="include">
        </childnode>
        <childnode refid="10881" relation="include">
        </childnode>
      </node>
      <node id="10886">
        <label>ostream</label>
      </node>
      <node id="10881">
        <label>arrow/util/visibility.h</label>
        <link refid="arrow_2util_2visibility_8h"/>
      </node>
      <node id="10877">
        <label>arrow/device.h</label>
        <link refid="device_8h"/>
        <childnode refid="10869" relation="include">
        </childnode>
        <childnode refid="10870" relation="include">
        </childnode>
        <childnode refid="10871" relation="include">
        </childnode>
        <childnode refid="10878" relation="include">
        </childnode>
        <childnode refid="10879" relation="include">
        </childnode>
        <childnode refid="10882" relation="include">
        </childnode>
        <childnode refid="10880" relation="include">
        </childnode>
        <childnode refid="10881" relation="include">
        </childnode>
      </node>
      <node id="10901">
        <label>arrow/util/bit_util.h</label>
        <link refid="bit__util_8h"/>
        <childnode refid="10902" relation="include">
        </childnode>
        <childnode refid="10903" relation="include">
        </childnode>
        <childnode refid="10904" relation="include">
        </childnode>
        <childnode refid="10905" relation="include">
        </childnode>
        <childnode refid="10906" relation="include">
        </childnode>
        <childnode refid="10907" relation="include">
        </childnode>
        <childnode refid="10869" relation="include">
        </childnode>
        <childnode refid="10875" relation="include">
        </childnode>
        <childnode refid="10908" relation="include">
        </childnode>
        <childnode refid="10870" relation="include">
        </childnode>
        <childnode refid="10871" relation="include">
        </childnode>
        <childnode refid="10876" relation="include">
        </childnode>
        <childnode refid="10872" relation="include">
        </childnode>
        <childnode refid="10873" relation="include">
        </childnode>
        <childnode refid="10874" relation="include">
        </childnode>
        <childnode refid="10890" relation="include">
        </childnode>
        <childnode refid="10882" relation="include">
        </childnode>
        <childnode refid="10909" relation="include">
        </childnode>
        <childnode refid="10880" relation="include">
        </childnode>
        <childnode refid="10885" relation="include">
        </childnode>
        <childnode refid="10887" relation="include">
        </childnode>
        <childnode refid="10911" relation="include">
        </childnode>
        <childnode refid="10881" relation="include">
        </childnode>
      </node>
      <node id="10905">
        <label>bitset</label>
      </node>
      <node id="10910">
        <label>tuple</label>
      </node>
      <node id="10873">
        <label>vector</label>
      </node>
      <node id="10892">
        <label>arrow/tensor.h</label>
        <link refid="tensor_8h"/>
        <childnode refid="10869" relation="include">
        </childnode>
        <childnode refid="10870" relation="include">
        </childnode>
        <childnode refid="10871" relation="include">
        </childnode>
        <childnode refid="10873" relation="include">
        </childnode>
        <childnode refid="10889" relation="include">
        </childnode>
        <childnode refid="10893" relation="include">
        </childnode>
        <childnode refid="10879" relation="include">
        </childnode>
        <childnode refid="10900" relation="include">
        </childnode>
        <childnode refid="10880" relation="include">
        </childnode>
        <childnode refid="10881" relation="include">
        </childnode>
      </node>
      <node id="10891">
        <label>new</label>
      </node>
      <node id="10872">
        <label>utility</label>
      </node>
      <node id="10887">
        <label>arrow/util/string_view.h</label>
        <link refid="string__view_8h"/>
        <childnode refid="10869" relation="include">
        </childnode>
        <childnode refid="10871" relation="include">
        </childnode>
        <childnode refid="10888" relation="include">
        </childnode>
      </node>
      <node id="10904">
        <label>array</label>
      </node>
      <node id="10900">
        <label>arrow/type_traits.h</label>
        <link refid="type__traits_8h"/>
        <childnode refid="10870" relation="include">
        </childnode>
        <childnode refid="10871" relation="include">
        </childnode>
        <childnode refid="10876" relation="include">
        </childnode>
        <childnode refid="10873" relation="include">
        </childnode>
        <childnode refid="10879" relation="include">
        </childnode>
        <childnode refid="10901" relation="include">
        </childnode>
      </node>
      <node id="10878">
        <label>arrow/io/type_fwd.h</label>
        <link refid="io_2type__fwd_8h"/>
      </node>
      <node id="10884">
        <label>iosfwd</label>
      </node>
      <node id="10868">
        <label>cstddef</label>
      </node>
      <node id="10898">
        <label>arrow/vendored/variant.hpp</label>
      </node>
      <node id="10890">
        <label>arrow/result.h</label>
        <link refid="result_8h"/>
        <childnode refid="10891" relation="include">
        </childnode>
        <childnode refid="10871" relation="include">
        </childnode>
        <childnode refid="10876" relation="include">
        </childnode>
        <childnode refid="10872" relation="include">
        </childnode>
        <childnode refid="10883" relation="include">
        </childnode>
        <childnode refid="10882" relation="include">
        </childnode>
      </node>
      <node id="10895">
        <label>climits</label>
      </node>
      <node id="10893">
        <label>arrow/type.h</label>
        <link refid="type_8h"/>
        <childnode refid="10894" relation="include">
        </childnode>
        <childnode refid="10895" relation="include">
        </childnode>
        <childnode refid="10869" relation="include">
        </childnode>
        <childnode refid="10884" relation="include">
        </childnode>
        <childnode refid="10870" relation="include">
        </childnode>
        <childnode refid="10871" relation="include">
        </childnode>
        <childnode refid="10872" relation="include">
        </childnode>
        <childnode refid="10873" relation="include">
        </childnode>
        <childnode refid="10890" relation="include">
        </childnode>
        <childnode refid="10879" relation="include">
        </childnode>
        <childnode refid="10896" relation="include">
        </childnode>
        <childnode refid="10880" relation="include">
        </childnode>
        <childnode refid="10897" relation="include">
        </childnode>
        <childnode refid="10881" relation="include">
        </childnode>
        <childnode refid="10899" relation="include">
        </childnode>
      </node>
      <node id="10876">
        <label>type_traits</label>
      </node>
      <node id="10903">
        <label>algorithm</label>
      </node>
      <node id="10875">
        <label>cstring</label>
      </node>
      <node id="10885">
        <label>arrow/util/string_builder.h</label>
        <link refid="string__builder_8h"/>
        <childnode refid="10870" relation="include">
        </childnode>
        <childnode refid="10886" relation="include">
        </childnode>
        <childnode refid="10871" relation="include">
        </childnode>
        <childnode refid="10872" relation="include">
        </childnode>
        <childnode refid="10881" relation="include">
        </childnode>
      </node>
      <node id="10870">
        <label>memory</label>
      </node>
      <node id="10880">
        <label>arrow/util/macros.h</label>
        <link refid="macros_8h"/>
        <childnode refid="10869" relation="include">
        </childnode>
      </node>
      <node id="10911">
        <label>arrow/util/type_traits.h</label>
        <link refid="util_2type__traits_8h"/>
        <childnode refid="10876" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="10912">
        <label>/arrow/cpp/src/arrow/sparse_tensor.h</label>
        <link refid="sparse__tensor_8h"/>
        <childnode refid="10913" relation="include">
        </childnode>
        <childnode refid="10914" relation="include">
        </childnode>
        <childnode refid="10916" relation="include">
        </childnode>
        <childnode refid="10924" relation="include">
        </childnode>
        <childnode refid="10926" relation="include">
        </childnode>
      </node>
      <node id="10919">
        <label>/arrow/cpp/src/arrow/python/flight.h</label>
        <link refid="flight_8h"/>
      </node>
      <node id="10913">
        <label>/arrow/cpp/src/arrow/ipc/metadata_internal.h</label>
        <link refid="metadata__internal_8h"/>
      </node>
      <node id="10922">
        <label>/arrow/cpp/src/arrow/python/iterators.h</label>
        <link refid="iterators_8h"/>
      </node>
      <node id="10918">
        <label>/arrow/cpp/src/arrow/python/extension_type.h</label>
        <link refid="python_2extension__type_8h"/>
      </node>
      <node id="10920">
        <label>/arrow/cpp/src/arrow/python/inference.h</label>
        <link refid="inference_8h"/>
        <childnode refid="10915" relation="include">
        </childnode>
      </node>
      <node id="10914">
        <label>/arrow/cpp/src/arrow/python/numpy_convert.h</label>
        <link refid="numpy__convert_8h"/>
        <childnode refid="10915" relation="include">
        </childnode>
      </node>
      <node id="10924">
        <label>/arrow/cpp/src/arrow/python/serialize.h</label>
        <link refid="serialize_8h"/>
        <childnode refid="10915" relation="include">
        </childnode>
        <childnode refid="10925" relation="include">
        </childnode>
      </node>
      <node id="10916">
        <label>/arrow/cpp/src/arrow/python/pyarrow.h</label>
        <link refid="pyarrow_8h"/>
        <childnode refid="10917" relation="include">
        </childnode>
      </node>
      <node id="10915">
        <label>/arrow/cpp/src/arrow/python/api.h</label>
        <link refid="python_2api_8h"/>
      </node>
      <node id="10921">
        <label>/arrow/cpp/src/arrow/python/io.h</label>
        <link refid="arrow_2python_2io_8h"/>
        <childnode refid="10915" relation="include">
        </childnode>
      </node>
      <node id="10925">
        <label>/arrow/cpp/src/arrow/python/deserialize.h</label>
        <link refid="deserialize_8h"/>
        <childnode refid="10915" relation="include">
        </childnode>
      </node>
      <node id="10917">
        <label>/arrow/cpp/src/arrow/python/common.h</label>
        <link refid="arrow_2python_2common_8h"/>
        <childnode refid="10915" relation="include">
        </childnode>
        <childnode refid="10918" relation="include">
        </childnode>
        <childnode refid="10919" relation="include">
        </childnode>
        <childnode refid="10920" relation="include">
        </childnode>
        <childnode refid="10921" relation="include">
        </childnode>
        <childnode refid="10922" relation="include">
        </childnode>
        <childnode refid="10923" relation="include">
        </childnode>
      </node>
      <node id="10923">
        <label>/arrow/cpp/src/arrow/python/python_to_arrow.h</label>
        <link refid="python__to__arrow_8h"/>
        <childnode refid="10915" relation="include">
        </childnode>
      </node>
      <node id="10926">
        <label>/arrow/cpp/src/arrow/tensor/converter.h</label>
        <link refid="tensor_2converter_8h"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structarrow_1_1_sparse_tensor_format" prot="public">arrow::SparseTensorFormat</innerclass>
    <innerclass refid="classarrow_1_1_sparse_index" prot="public">arrow::SparseIndex</innerclass>
    <innerclass refid="classarrow_1_1_sparse_c_o_o_index" prot="public">arrow::SparseCOOIndex</innerclass>
    <innerclass refid="classarrow_1_1_sparse_c_s_r_index" prot="public">arrow::SparseCSRIndex</innerclass>
    <innerclass refid="classarrow_1_1_sparse_c_s_c_index" prot="public">arrow::SparseCSCIndex</innerclass>
    <innerclass refid="classarrow_1_1_sparse_c_s_f_index" prot="public">arrow::SparseCSFIndex</innerclass>
    <innerclass refid="classarrow_1_1_sparse_tensor" prot="public">arrow::SparseTensor</innerclass>
    <innerclass refid="classarrow_1_1_sparse_tensor_impl" prot="public">arrow::SparseTensorImpl</innerclass>
    <innernamespace refid="namespacearrow">arrow</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>Licensed<sp/>to<sp/>the<sp/>Apache<sp/>Software<sp/>Foundation<sp/>(ASF)<sp/>under<sp/>one</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/>or<sp/>more<sp/>contributor<sp/>license<sp/>agreements.<sp/><sp/>See<sp/>the<sp/>NOTICE<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>distributed<sp/>with<sp/>this<sp/>work<sp/>for<sp/>additional<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/>regarding<sp/>copyright<sp/>ownership.<sp/><sp/>The<sp/>ASF<sp/>licenses<sp/>this<sp/>file</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>you<sp/>under<sp/>the<sp/>Apache<sp/>License,<sp/>Version<sp/>2.0<sp/>(the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;License&quot;);<sp/>you<sp/>may<sp/>not<sp/>use<sp/>this<sp/>file<sp/>except<sp/>in<sp/>compliance</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>with<sp/>the<sp/>License.<sp/><sp/>You<sp/>may<sp/>obtain<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>License<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/>http://www.apache.org/licenses/LICENSE-2.0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Unless<sp/>required<sp/>by<sp/>applicable<sp/>law<sp/>or<sp/>agreed<sp/>to<sp/>in<sp/>writing,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//<sp/>software<sp/>distributed<sp/>under<sp/>the<sp/>License<sp/>is<sp/>distributed<sp/>on<sp/>an</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>&quot;AS<sp/>IS&quot;<sp/>BASIS,<sp/>WITHOUT<sp/>WARRANTIES<sp/>OR<sp/>CONDITIONS<sp/>OF<sp/>ANY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>KIND,<sp/>either<sp/>express<sp/>or<sp/>implied.<sp/><sp/>See<sp/>the<sp/>License<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>specific<sp/>language<sp/>governing<sp/>permissions<sp/>and<sp/>limitations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="comment">//<sp/>under<sp/>the<sp/>License.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#pragma<sp/>once</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="buffer_8h" kindref="compound">arrow/buffer.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="compare_8h" kindref="compound">arrow/compare.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="result_8h" kindref="compound">arrow/result.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="status_8h" kindref="compound">arrow/status.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="tensor_8h" kindref="compound">arrow/tensor.h</ref>&quot;</highlight><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>IWYU<sp/>pragma:<sp/>export</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="type_8h" kindref="compound">arrow/type.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="checked__cast_8h" kindref="compound">arrow/util/checked_cast.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="macros_8h" kindref="compound">arrow/util/macros.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="arrow_2util_2visibility_8h" kindref="compound">arrow/util/visibility.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacearrow" kindref="compound">arrow</ref><sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="namespaceparquet_1a0d70b006a1f6feca958a1505b38a8cb7" kindref="member">MemoryPool</ref>;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SparseIndex<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44" refid="structarrow_1_1_sparse_tensor_format" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structarrow_1_1_sparse_tensor_format" kindref="compound">SparseTensorFormat</ref><sp/>{</highlight></codeline>
<codeline lineno="46" refid="structarrow_1_1_sparse_tensor_format_1a0693b2fa5192ae86d525995fe6f64f3a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="structarrow_1_1_sparse_tensor_format_1a0693b2fa5192ae86d525995fe6f64f3a" kindref="member">type</ref><sp/>{</highlight></codeline>
<codeline lineno="48" refid="structarrow_1_1_sparse_tensor_format_1a0693b2fa5192ae86d525995fe6f64f3aabaa7e5ab93ab151ead4102620d0a15ae" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_sparse_tensor_format_1a0693b2fa5192ae86d525995fe6f64f3aabaa7e5ab93ab151ead4102620d0a15ae" kindref="member">COO</ref>,</highlight></codeline>
<codeline lineno="50" refid="structarrow_1_1_sparse_tensor_format_1a0693b2fa5192ae86d525995fe6f64f3aa639bcac72fe3163e571a8d66738aa4b1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_sparse_tensor_format_1a0693b2fa5192ae86d525995fe6f64f3aa639bcac72fe3163e571a8d66738aa4b1" kindref="member">CSR</ref>,</highlight></codeline>
<codeline lineno="52" refid="structarrow_1_1_sparse_tensor_format_1a0693b2fa5192ae86d525995fe6f64f3aa8e53eed9093b40c94a65034a572c26c4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_sparse_tensor_format_1a0693b2fa5192ae86d525995fe6f64f3aa8e53eed9093b40c94a65034a572c26c4" kindref="member">CSC</ref>,</highlight></codeline>
<codeline lineno="54" refid="structarrow_1_1_sparse_tensor_format_1a0693b2fa5192ae86d525995fe6f64f3aaeb7b593db5faea5772798b3ed0646ef3" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_sparse_tensor_format_1a0693b2fa5192ae86d525995fe6f64f3aaeb7b593db5faea5772798b3ed0646ef3" kindref="member">CSF</ref></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/>};</highlight></codeline>
<codeline lineno="56"><highlight class="normal">};</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="65" refid="classarrow_1_1_sparse_index" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_sparse_index" kindref="compound">SparseIndex</ref><sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="67" refid="classarrow_1_1_sparse_index_1a6a4137b019e068be8b99ba50a5d2e03f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_sparse_index_1a6a4137b019e068be8b99ba50a5d2e03f" kindref="member">SparseIndex</ref>(<ref refid="structarrow_1_1_sparse_tensor_format_1a0693b2fa5192ae86d525995fe6f64f3a" kindref="member">SparseTensorFormat::type</ref><sp/>format_id,<sp/>int64_t<sp/>non_zero_length)</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>format_id_(format_id),<sp/>non_zero_length_(non_zero_length)<sp/>{}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classarrow_1_1_sparse_index" kindref="compound">SparseIndex</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="classarrow_1_1_sparse_index_1a1f44c6ddcec5d1f7e40e07bd0cdebe8a" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_sparse_tensor_format_1a0693b2fa5192ae86d525995fe6f64f3a" kindref="member">SparseTensorFormat::type</ref><sp/><ref refid="classarrow_1_1_sparse_index_1a1f44c6ddcec5d1f7e40e07bd0cdebe8a" kindref="member">format_id</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>format_id_;<sp/>}</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="77" refid="classarrow_1_1_sparse_index_1a8ed4f5943abfbc36139f7477056e57b4" refkind="member"><highlight class="normal"><sp/><sp/>int64_t<sp/><ref refid="classarrow_1_1_sparse_index_1a8ed4f5943abfbc36139f7477056e57b4" kindref="member">non_zero_length</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>non_zero_length_;<sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>ValidateShape(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int64_t&gt;&amp;<sp/>shape)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="85" refid="classarrow_1_1_sparse_index_1a69c44ac95e91a2c96e705bb11c0f4559" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_sparse_tensor_format_1a0693b2fa5192ae86d525995fe6f64f3a" kindref="member">SparseTensorFormat::type</ref><sp/><ref refid="classarrow_1_1_sparse_index_1a69c44ac95e91a2c96e705bb11c0f4559" kindref="member">format_id_</ref>;</highlight></codeline>
<codeline lineno="86" refid="classarrow_1_1_sparse_index_1aafc279016c04336211f8358ac9b8ab66" refkind="member"><highlight class="normal"><sp/><sp/>int64_t<sp/><ref refid="classarrow_1_1_sparse_index_1aafc279016c04336211f8358ac9b8ab66" kindref="member">non_zero_length_</ref>;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">};</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SparseIndexType&gt;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SparseIndexBase<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_sparse_index" kindref="compound">SparseIndex</ref><sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>SparseIndexBase(int64_t<sp/>non_zero_length)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classarrow_1_1_sparse_index" kindref="compound">SparseIndex</ref>(SparseIndexType::format_id,<sp/>non_zero_length)<sp/>{}</highlight></codeline>
<codeline lineno="95"><highlight class="normal">};</highlight></codeline>
<codeline lineno="96"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SparseCOOIndex<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="classarrow_1_1_sparse_c_o_o_index" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_sparse_c_o_o_index" kindref="compound">SparseCOOIndex</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>internal::SparseIndexBase&lt;SparseCOOIndex&gt;<sp/>{</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="107" refid="classarrow_1_1_sparse_c_o_o_index_1ab979e43c76d1c3ffe663a592837981b1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="structarrow_1_1_sparse_tensor_format_1a0693b2fa5192ae86d525995fe6f64f3a" kindref="member">SparseTensorFormat::type</ref><sp/>format_id<sp/>=<sp/><ref refid="structarrow_1_1_sparse_tensor_format_1a0693b2fa5192ae86d525995fe6f64f3aabaa7e5ab93ab151ead4102620d0a15ae" kindref="member">SparseTensorFormat::COO</ref>;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;SparseCOOIndex&gt;</ref>&gt;<sp/>Make(</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>indices_type,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int64_t&gt;&amp;<sp/>indices_shape,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int64_t&gt;&amp;<sp/>indices_strides,<sp/>std::shared_ptr&lt;Buffer&gt;<sp/>indices_data);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;SparseCOOIndex&gt;</ref>&gt;<sp/>Make(</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>indices_type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int64_t&gt;&amp;<sp/>shape,</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>non_zero_length,<sp/>std::shared_ptr&lt;Buffer&gt;<sp/>indices_data);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_sparse_c_o_o_index" kindref="compound">SparseCOOIndex</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Tensor&gt;&amp;<sp/>coords);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="classarrow_1_1_sparse_c_o_o_index_1a7c9d18c0c246d4429dcfbbbf292ec96c" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Tensor&gt;&amp;<sp/><ref refid="classarrow_1_1_sparse_c_o_o_index_1a7c9d18c0c246d4429dcfbbbf292ec96c" kindref="member">indices</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>coords_;<sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="138" refid="classarrow_1_1_sparse_c_o_o_index_1a11a5a7c5802b17c42d5d6eacc3b4a2ef" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_sparse_c_o_o_index_1a11a5a7c5802b17c42d5d6eacc3b4a2ef" kindref="member">Equals</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_sparse_c_o_o_index" kindref="compound">SparseCOOIndex</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>indices()-&gt;Equals(*other.<ref refid="classarrow_1_1_sparse_c_o_o_index_1a7c9d18c0c246d4429dcfbbbf292ec96c" kindref="member">indices</ref>());</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142" refid="classarrow_1_1_sparse_c_o_o_index_1aca914dd313622ea6e3be264053357520" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_sparse_c_o_o_index_1aca914dd313622ea6e3be264053357520" kindref="member">ValidateShape</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int64_t&gt;&amp;<sp/>shape)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(<ref refid="classarrow_1_1_sparse_index_1a9ab0a6d0752c18d422fcb1ce60d9412b" kindref="member">SparseIndex::ValidateShape</ref>(shape));</highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(static_cast&lt;size_t&gt;(coords_-&gt;shape()[1])<sp/>==<sp/>shape.size())<sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1a5c0b0031db6eeec3dcc70485d24cfe03" kindref="member">Status::OK</ref>();</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1aa388393c060f3b44316876a630190576" kindref="member">Status::Invalid</ref>(</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;shape<sp/>length<sp/>is<sp/>inconsistent<sp/>with<sp/>the<sp/>coords<sp/>matrix<sp/>in<sp/>COO<sp/>index&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="154" refid="classarrow_1_1_sparse_c_o_o_index_1a3ab7d60dbde319e6be6a78b7c164b302" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Tensor&gt;<sp/><ref refid="classarrow_1_1_sparse_c_o_o_index_1a3ab7d60dbde319e6be6a78b7c164b302" kindref="member">coords_</ref>;</highlight></codeline>
<codeline lineno="155"><highlight class="normal">};</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="keyword">enum<sp/>class</highlight><highlight class="normal"><sp/>SparseMatrixCompressedAxis<sp/>:<sp/>char<sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/>ROW,</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/>COLUMN</highlight></codeline>
<codeline lineno="165"><highlight class="normal">};</highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>ValidateSparseCSXIndex(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>indptr_type,</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>indices_type,</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int64_t&gt;&amp;<sp/>indptr_shape,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int64_t&gt;&amp;<sp/>indices_shape,</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>type_name);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="175"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>CheckSparseCSXIndexValidity(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>indptr_type,</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>indices_type,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int64_t&gt;&amp;<sp/>indptr_shape,</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int64_t&gt;&amp;<sp/>indices_shape,</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>type_name);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SparseIndexType,<sp/>SparseMatrixCompressedAxis<sp/>COMPRESSED_AXIS&gt;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">SparseCSXIndex<sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>SparseIndexBase&lt;SparseIndexType&gt;<sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/>SparseMatrixCompressedAxis<sp/>kCompressedAxis<sp/>=<sp/>COMPRESSED_AXIS;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;SparseIndexType&gt;</ref>&gt;<sp/>Make(</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>indptr_type,</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>indices_type,</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int64_t&gt;&amp;<sp/>indptr_shape,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int64_t&gt;&amp;<sp/>indices_shape,</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Buffer&gt;<sp/>indptr_data,<sp/>std::shared_ptr&lt;Buffer&gt;<sp/>indices_data)<sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(ValidateSparseCSXIndex(indptr_type,<sp/>indices_type,<sp/>indptr_shape,</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices_shape,</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SparseIndexType::kTypeName));</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;SparseIndexType&gt;(</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_shared&lt;Tensor&gt;(indptr_type,<sp/>indptr_data,<sp/>indptr_shape),</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::make_shared&lt;Tensor&gt;(indices_type,<sp/>indices_data,<sp/>indices_shape));</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;SparseIndexType&gt;</ref>&gt;<sp/>Make(</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>indices_type,</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int64_t&gt;&amp;<sp/>indptr_shape,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int64_t&gt;&amp;<sp/>indices_shape,</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Buffer&gt;<sp/>indptr_data,<sp/>std::shared_ptr&lt;Buffer&gt;<sp/>indices_data)<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Make(indices_type,<sp/>indices_type,<sp/>indptr_shape,<sp/>indices_shape,<sp/>indptr_data,</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices_data);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;SparseIndexType&gt;</ref>&gt;<sp/>Make(</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>indptr_type,</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>indices_type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int64_t&gt;&amp;<sp/>shape,</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>non_zero_length,<sp/>std::shared_ptr&lt;Buffer&gt;<sp/>indptr_data,</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Buffer&gt;<sp/>indices_data)<sp/>{</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>indptr_shape({shape[0]<sp/>+<sp/>1});</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;int64_t&gt;<sp/>indices_shape({non_zero_length});</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Make(indptr_type,<sp/>indices_type,<sp/>indptr_shape,<sp/>indices_shape,<sp/>indptr_data,</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices_data);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;SparseIndexType&gt;</ref>&gt;<sp/>Make(</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>indices_type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int64_t&gt;&amp;<sp/>shape,</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>non_zero_length,<sp/>std::shared_ptr&lt;Buffer&gt;<sp/>indptr_data,</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Buffer&gt;<sp/>indices_data)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Make(indices_type,<sp/>indices_type,<sp/>shape,<sp/>non_zero_length,<sp/>indptr_data,</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices_data);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/>SparseCSXIndex(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Tensor&gt;&amp;<sp/>indptr,</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Tensor&gt;&amp;<sp/>indices)</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>SparseIndexBase&lt;SparseIndexType&gt;(indices-&gt;shape()[0]),</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indptr_(indptr),</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices_(indices)<sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>CheckSparseCSXIndexValidity(indptr_-&gt;type(),<sp/>indices_-&gt;type(),<sp/>indptr_-&gt;shape(),</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices_-&gt;shape(),<sp/>SparseIndexType::kTypeName);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Tensor&gt;&amp;<sp/>indptr()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>indptr_;<sp/>}</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Tensor&gt;&amp;<sp/>indices()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>indices_;<sp/>}</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::string(SparseIndexType::kTypeName);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Equals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>SparseIndexType&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>indptr()-&gt;Equals(*other.indptr())<sp/>&amp;&amp;<sp/>indices()-&gt;Equals(*other.indices());</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>ValidateShape(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int64_t&gt;&amp;<sp/>shape)</highlight><highlight class="keyword"><sp/>const<sp/>override<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(<ref refid="classarrow_1_1_sparse_index_1a9ab0a6d0752c18d422fcb1ce60d9412b" kindref="member">SparseIndex::ValidateShape</ref>(shape));</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape.size()<sp/>&lt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1aa388393c060f3b44316876a630190576" kindref="member">Status::Invalid</ref>(</highlight><highlight class="stringliteral">&quot;shape<sp/>length<sp/>is<sp/>too<sp/>short&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="264"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(shape.size()<sp/>&gt;<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1aa388393c060f3b44316876a630190576" kindref="member">Status::Invalid</ref>(</highlight><highlight class="stringliteral">&quot;shape<sp/>length<sp/>is<sp/>too<sp/>long&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="268"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(indptr_-&gt;shape()[0]<sp/>==<sp/>shape[</highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal">int64_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(kCompressedAxis)]<sp/>+<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1a5c0b0031db6eeec3dcc70485d24cfe03" kindref="member">Status::OK</ref>();</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1aa388393c060f3b44316876a630190576" kindref="member">Status::Invalid</ref>(</highlight><highlight class="stringliteral">&quot;shape<sp/>length<sp/>is<sp/>inconsistent<sp/>with<sp/>the<sp/>&quot;</highlight><highlight class="normal">,<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>());</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Tensor&gt;<sp/>indptr_;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Tensor&gt;<sp/>indices_;</highlight></codeline>
<codeline lineno="279"><highlight class="normal">};</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SparseCSRIndex<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"></highlight></codeline>
<codeline lineno="298" refid="classarrow_1_1_sparse_c_s_r_index" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_sparse_c_s_r_index" kindref="compound">SparseCSRIndex</ref></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>internal::SparseCSXIndex&lt;SparseCSRIndex,</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal::SparseMatrixCompressedAxis::ROW&gt;<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_sparse_c_s_r_index_1ad9a41d0221730aa3756889ba9829c481" kindref="member">BaseClass</ref><sp/>=</highlight></codeline>
<codeline lineno="303" refid="classarrow_1_1_sparse_c_s_r_index_1ad9a41d0221730aa3756889ba9829c481" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::SparseCSXIndex&lt;SparseCSRIndex,<sp/>internal::SparseMatrixCompressedAxis::ROW&gt;;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight></codeline>
<codeline lineno="305" refid="classarrow_1_1_sparse_c_s_r_index_1a4e72b51f4024d6e546433c29da1089c1" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="structarrow_1_1_sparse_tensor_format_1a0693b2fa5192ae86d525995fe6f64f3a" kindref="member">SparseTensorFormat::type</ref><sp/>format_id<sp/>=<sp/><ref refid="structarrow_1_1_sparse_tensor_format_1a0693b2fa5192ae86d525995fe6f64f3aa639bcac72fe3163e571a8d66738aa4b1" kindref="member">SparseTensorFormat::CSR</ref>;</highlight></codeline>
<codeline lineno="306" refid="classarrow_1_1_sparse_c_s_r_index_1a80471cbc0883fb83c48644948993a44a" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>kTypeName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;SparseCSRIndex&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"></highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>SparseCSXIndex::kCompressedAxis;</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>SparseCSXIndex::Make;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>SparseCSXIndex::SparseCSXIndex;</highlight></codeline>
<codeline lineno="311"><highlight class="normal">};</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SparseCSCIndex<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"></highlight></codeline>
<codeline lineno="328" refid="classarrow_1_1_sparse_c_s_c_index" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_sparse_c_s_c_index" kindref="compound">SparseCSCIndex</ref></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>internal::SparseCSXIndex&lt;SparseCSCIndex,</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal::SparseMatrixCompressedAxis::COLUMN&gt;<sp/>{</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_sparse_c_s_c_index_1a4bb80ae1184c92d3dce8195c050d1867" kindref="member">BaseClass</ref><sp/>=</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>internal::SparseCSXIndex&lt;<ref refid="classarrow_1_1_sparse_c_s_c_index" kindref="compound">SparseCSCIndex</ref>,</highlight></codeline>
<codeline lineno="334" refid="classarrow_1_1_sparse_c_s_c_index_1a4bb80ae1184c92d3dce8195c050d1867" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal::SparseMatrixCompressedAxis::COLUMN&gt;;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336" refid="classarrow_1_1_sparse_c_s_c_index_1adcfbaa2297ea0ea9c24f45c9879a3581" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="structarrow_1_1_sparse_tensor_format_1a0693b2fa5192ae86d525995fe6f64f3a" kindref="member">SparseTensorFormat::type</ref><sp/>format_id<sp/>=<sp/><ref refid="structarrow_1_1_sparse_tensor_format_1a0693b2fa5192ae86d525995fe6f64f3aa8e53eed9093b40c94a65034a572c26c4" kindref="member">SparseTensorFormat::CSC</ref>;</highlight></codeline>
<codeline lineno="337" refid="classarrow_1_1_sparse_c_s_c_index_1a8837fa10d74f03aaab3e26ed8682a91b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>kTypeName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;SparseCSCIndex&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>SparseCSXIndex::kCompressedAxis;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>SparseCSXIndex::Make;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">using</highlight><highlight class="normal"><sp/>SparseCSXIndex::SparseCSXIndex;</highlight></codeline>
<codeline lineno="342"><highlight class="normal">};</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SparseCSFIndex<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"></highlight></codeline>
<codeline lineno="357" refid="classarrow_1_1_sparse_c_s_f_index" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_sparse_c_s_f_index" kindref="compound">SparseCSFIndex</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>internal::SparseIndexBase&lt;SparseCSFIndex&gt;<sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="359" refid="classarrow_1_1_sparse_c_s_f_index_1a223ad7a537132e6dd921bfadc293ebf2" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/><ref refid="structarrow_1_1_sparse_tensor_format_1a0693b2fa5192ae86d525995fe6f64f3a" kindref="member">SparseTensorFormat::type</ref><sp/>format_id<sp/>=<sp/><ref refid="structarrow_1_1_sparse_tensor_format_1a0693b2fa5192ae86d525995fe6f64f3aaeb7b593db5faea5772798b3ed0646ef3" kindref="member">SparseTensorFormat::CSF</ref>;</highlight></codeline>
<codeline lineno="360" refid="classarrow_1_1_sparse_c_s_f_index_1a6eb4c9f291b36305f334fd73cf3fcc3f" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>constexpr<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>kTypeName<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;SparseCSFIndex&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;SparseCSFIndex&gt;</ref>&gt;<sp/>Make(</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>indptr_type,</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>indices_type,</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int64_t&gt;&amp;<sp/>indices_shapes,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int64_t&gt;&amp;<sp/>axis_order,</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;Buffer&gt;&gt;&amp;<sp/>indptr_data,</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;Buffer&gt;&gt;&amp;<sp/>indices_data);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"></highlight></codeline>
<codeline lineno="371" refid="classarrow_1_1_sparse_c_s_f_index_1a2eed6db65c80556ea20114ee40c83eab" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;SparseCSFIndex&gt;</ref>&gt;<sp/><ref refid="classarrow_1_1_sparse_c_s_f_index_1a2eed6db65c80556ea20114ee40c83eab" kindref="member">Make</ref>(</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>indices_type,</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int64_t&gt;&amp;<sp/>indices_shapes,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int64_t&gt;&amp;<sp/>axis_order,</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;Buffer&gt;&gt;&amp;<sp/>indptr_data,</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;Buffer&gt;&gt;&amp;<sp/>indices_data)<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Make(indices_type,<sp/>indices_type,<sp/>indices_shapes,<sp/>axis_order,<sp/>indptr_data,</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>indices_data);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_sparse_c_s_f_index" kindref="compound">SparseCSFIndex</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;Tensor&gt;&gt;&amp;<sp/>indptr,</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;Tensor&gt;&gt;&amp;<sp/>indices,</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int64_t&gt;&amp;<sp/>axis_order);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="386" refid="classarrow_1_1_sparse_c_s_f_index_1a3306579d18595ecaf5bf672985ba5087" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;Tensor&gt;&gt;&amp;<sp/><ref refid="classarrow_1_1_sparse_c_s_f_index_1a3306579d18595ecaf5bf672985ba5087" kindref="member">indptr</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>indptr_;<sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="389" refid="classarrow_1_1_sparse_c_s_f_index_1a6b6924ea0b2a17497376a55d95bb0149" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::shared_ptr&lt;Tensor&gt;&gt;&amp;<sp/><ref refid="classarrow_1_1_sparse_c_s_f_index_1a6b6924ea0b2a17497376a55d95bb0149" kindref="member">indices</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>indices_;<sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"></highlight></codeline>
<codeline lineno="392" refid="classarrow_1_1_sparse_c_s_f_index_1a21304e4a9e1f5af9ce03ed7660c04c76" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int64_t&gt;&amp;<sp/><ref refid="classarrow_1_1_sparse_c_s_f_index_1a21304e4a9e1f5af9ce03ed7660c04c76" kindref="member">axis_order</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>axis_order_;<sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/>std::string<sp/><ref refid="namespacearrow_1_1fs_1aae09319856c842fc30e6760f0ccb407a" kindref="member">ToString</ref>()<sp/></highlight><highlight class="keyword">const<sp/>override</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Equals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_sparse_c_s_f_index" kindref="compound">SparseCSFIndex</ref>&amp;<sp/>other)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="401" refid="classarrow_1_1_sparse_c_s_f_index_1ac6d434d24d508356ac6bd461d6b88396" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Tensor&gt;&gt;<sp/><ref refid="classarrow_1_1_sparse_c_s_f_index_1ac6d434d24d508356ac6bd461d6b88396" kindref="member">indptr_</ref>;</highlight></codeline>
<codeline lineno="402" refid="classarrow_1_1_sparse_c_s_f_index_1ab029bd000fd29a0bc1a8fc29c5509c53" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;std::shared_ptr&lt;Tensor&gt;&gt;<sp/><ref refid="classarrow_1_1_sparse_c_s_f_index_1ab029bd000fd29a0bc1a8fc29c5509c53" kindref="member">indices_</ref>;</highlight></codeline>
<codeline lineno="403" refid="classarrow_1_1_sparse_c_s_f_index_1a5001f79190be7ee5fba01cba2a9a4ee4" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;int64_t&gt;<sp/><ref refid="classarrow_1_1_sparse_c_s_f_index_1a5001f79190be7ee5fba01cba2a9a4ee4" kindref="member">axis_order_</ref>;</highlight></codeline>
<codeline lineno="404"><highlight class="normal">};</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SparseTensor<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="410" refid="classarrow_1_1_sparse_tensor" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal">ARROW_EXPORT<sp/><ref refid="classarrow_1_1_sparse_tensor" kindref="compound">SparseTensor</ref><sp/>{</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classarrow_1_1_sparse_tensor" kindref="compound">SparseTensor</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight></codeline>
<codeline lineno="414" refid="classarrow_1_1_sparse_tensor_1aab6562f2df4f3432091fe3ed57ce07fb" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="structarrow_1_1_sparse_tensor_format_1a0693b2fa5192ae86d525995fe6f64f3a" kindref="member">SparseTensorFormat::type</ref><sp/><ref refid="classarrow_1_1_sparse_tensor_1aab6562f2df4f3432091fe3ed57ce07fb" kindref="member">format_id</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sparse_index_-&gt;format_id();<sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"></highlight></codeline>
<codeline lineno="417" refid="classarrow_1_1_sparse_tensor_1a09025b42adfa15ff33aad026ae8f7dfb" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;DataType&gt;<sp/><ref refid="classarrow_1_1_sparse_tensor_1a09025b42adfa15ff33aad026ae8f7dfb" kindref="member">type</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>type_;<sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="420" refid="classarrow_1_1_sparse_tensor_1a09c5fe678e12a8f9ac60a672e0cc686b" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Buffer&gt;<sp/><ref refid="classarrow_1_1_sparse_tensor_1a09c5fe678e12a8f9ac60a672e0cc686b" kindref="member">data</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_;<sp/>}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
<codeline lineno="423" refid="classarrow_1_1_sparse_tensor_1a1a1fce4423a761cb71e76cdf4c22fe4b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>uint8_t*<sp/><ref refid="classarrow_1_1_sparse_tensor_1a1a1fce4423a761cb71e76cdf4c22fe4b" kindref="member">raw_data</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_-&gt;data();<sp/>}</highlight></codeline>
<codeline lineno="424"><highlight class="normal"></highlight></codeline>
<codeline lineno="426" refid="classarrow_1_1_sparse_tensor_1a3bfaf3952ca78265b1b65f3adf9bad92" refkind="member"><highlight class="normal"><sp/><sp/>uint8_t*<sp/><ref refid="classarrow_1_1_sparse_tensor_1a3bfaf3952ca78265b1b65f3adf9bad92" kindref="member">raw_mutable_data</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_-&gt;mutable_data();<sp/>}</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="429" refid="classarrow_1_1_sparse_tensor_1a326ccf3414aac22d0fd6a0b0b7aeb999" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int64_t&gt;&amp;<sp/><ref refid="classarrow_1_1_sparse_tensor_1a326ccf3414aac22d0fd6a0b0b7aeb999" kindref="member">shape</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>shape_;<sp/>}</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="432" refid="classarrow_1_1_sparse_tensor_1a06ea9b9c3ec29a62880433a6f52bf19b" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;SparseIndex&gt;&amp;<sp/><ref refid="classarrow_1_1_sparse_tensor_1a06ea9b9c3ec29a62880433a6f52bf19b" kindref="member">sparse_index</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sparse_index_;<sp/>}</highlight></codeline>
<codeline lineno="433"><highlight class="normal"></highlight></codeline>
<codeline lineno="435" refid="classarrow_1_1_sparse_tensor_1a517daac896ab6b6565016d3a74124d22" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_sparse_tensor_1a517daac896ab6b6565016d3a74124d22" kindref="member">ndim</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="keywordtype">int</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(shape_.size());<sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"></highlight></codeline>
<codeline lineno="438" refid="classarrow_1_1_sparse_tensor_1ace353930e273b6df117757d77cf00bd9" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;&amp;<sp/><ref refid="classarrow_1_1_sparse_tensor_1ace353930e273b6df117757d77cf00bd9" kindref="member">dim_names</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>dim_names_;<sp/>}</highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>dim_name(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/>int64_t<sp/>size()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="447" refid="classarrow_1_1_sparse_tensor_1ad36e1e26afb5c6c091ef0a877f1b70b4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_sparse_tensor_1ad36e1e26afb5c6c091ef0a877f1b70b4" kindref="member">is_mutable</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>data_-&gt;is_mutable();<sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="450" refid="classarrow_1_1_sparse_tensor_1a3728b0fe87415b007515b5747d57cdd1" refkind="member"><highlight class="normal"><sp/><sp/>int64_t<sp/><ref refid="classarrow_1_1_sparse_tensor_1a3728b0fe87415b007515b5747d57cdd1" kindref="member">non_zero_length</ref>()</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sparse_index_<sp/>?<sp/>sparse_index_-&gt;non_zero_length()<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>Equals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_sparse_tensor" kindref="compound">SparseTensor</ref>&amp;<sp/>other,</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_equal_options" kindref="compound">EqualOptions</ref>&amp;<sp/>=<sp/><ref refid="classarrow_1_1_equal_options_1aceb7c9984ead6d5a79ba4a725193d452" kindref="member">EqualOptions::Defaults</ref>())<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight></codeline>
<codeline lineno="461" refid="classarrow_1_1_sparse_tensor_1a65d724ff1245e12e220069feb3dd5928" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/><ref refid="classarrow_1_1_sparse_tensor_1a65d724ff1245e12e220069feb3dd5928" kindref="member">ToTensor</ref>(std::shared_ptr&lt;Tensor&gt;*<sp/>out)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ToTensor(<ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">default_memory_pool</ref>(),<sp/>out);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>ToTensor(<ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/>pool,<sp/>std::shared_ptr&lt;Tensor&gt;*<sp/>out)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>Constructor<sp/>with<sp/>all<sp/>attributes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_sparse_tensor" kindref="compound">SparseTensor</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/><ref refid="structarrow_1_1_sparse_tensor_format_1a0693b2fa5192ae86d525995fe6f64f3a" kindref="member">type</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Buffer&gt;&amp;<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>,</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int64_t&gt;&amp;<sp/>shape,</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;SparseIndex&gt;&amp;<sp/>sparse_index,</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;&amp;<sp/>dim_names);</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478" refid="classarrow_1_1_sparse_tensor_1a58e196efc866e19a8247f43788bcb230" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;DataType&gt;<sp/><ref refid="classarrow_1_1_sparse_tensor_1a58e196efc866e19a8247f43788bcb230" kindref="member">type_</ref>;</highlight></codeline>
<codeline lineno="479" refid="classarrow_1_1_sparse_tensor_1a1597140ec1d7da1601956c16f2591e77" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;Buffer&gt;<sp/><ref refid="classarrow_1_1_sparse_tensor_1a1597140ec1d7da1601956c16f2591e77" kindref="member">data_</ref>;</highlight></codeline>
<codeline lineno="480" refid="classarrow_1_1_sparse_tensor_1ac0e2a6c0d406a5880b547c479bd859e6" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;int64_t&gt;<sp/><ref refid="classarrow_1_1_sparse_tensor_1ac0e2a6c0d406a5880b547c479bd859e6" kindref="member">shape_</ref>;</highlight></codeline>
<codeline lineno="481" refid="classarrow_1_1_sparse_tensor_1acefbca7144aed7047e0b2c15f8eef73a" refkind="member"><highlight class="normal"><sp/><sp/>std::shared_ptr&lt;SparseIndex&gt;<sp/><ref refid="classarrow_1_1_sparse_tensor_1acefbca7144aed7047e0b2c15f8eef73a" kindref="member">sparse_index_</ref>;</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>names<sp/>are<sp/>optional</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="484" refid="classarrow_1_1_sparse_tensor_1a357ba9a894f60f742a18fb70ab78de7c" refkind="member"><highlight class="normal"><sp/><sp/>std::vector&lt;std::string&gt;<sp/><ref refid="classarrow_1_1_sparse_tensor_1a357ba9a894f60f742a18fb70ab78de7c" kindref="member">dim_names_</ref>;</highlight></codeline>
<codeline lineno="485"><highlight class="normal">};</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="comment">//<sp/>----------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight><highlight class="comment">//<sp/>SparseTensorImpl<sp/>class</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">internal<sp/>{</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal">ARROW_EXPORT</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><ref refid="classarrow_1_1_status" kindref="compound">Status</ref><sp/>MakeSparseTensorFromTensor(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_tensor" kindref="compound">Tensor</ref>&amp;<sp/>tensor,</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structarrow_1_1_sparse_tensor_format_1a0693b2fa5192ae86d525995fe6f64f3a" kindref="member">SparseTensorFormat::type</ref><sp/>sparse_format_id,</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>index_value_type,</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/>pool,</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;SparseIndex&gt;*<sp/>out_sparse_index,</highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Buffer&gt;*<sp/>out_data);</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>internal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>SparseIndexType&gt;</highlight></codeline>
<codeline lineno="505" refid="classarrow_1_1_sparse_tensor_impl" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classarrow_1_1_sparse_tensor_impl" kindref="compound">SparseTensorImpl</ref><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_sparse_tensor" kindref="compound">SparseTensor</ref><sp/>{</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classarrow_1_1_sparse_tensor_impl" kindref="compound">SparseTensorImpl</ref>()<sp/>=<sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="510" refid="classarrow_1_1_sparse_tensor_impl_1a9b410d9e21452f9de4a299f68d57d891" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_sparse_tensor_impl_1a9b410d9e21452f9de4a299f68d57d891" kindref="member">SparseTensorImpl</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;SparseIndexType&gt;&amp;<sp/>sparse_index,</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/><ref refid="structarrow_1_1_sparse_tensor_format_1a0693b2fa5192ae86d525995fe6f64f3a" kindref="member">type</ref>,</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Buffer&gt;&amp;<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int64_t&gt;&amp;<sp/>shape,</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;&amp;<sp/>dim_names)</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classarrow_1_1_sparse_tensor" kindref="compound">SparseTensor</ref>(type,<sp/>data,<sp/>shape,<sp/>sparse_index,<sp/>dim_names)<sp/>{}</highlight></codeline>
<codeline lineno="515"><highlight class="normal"></highlight></codeline>
<codeline lineno="517" refid="classarrow_1_1_sparse_tensor_impl_1a5e3846abcec2da92bc62149232b82bd7" refkind="member"><highlight class="normal"><sp/><sp/><ref refid="classarrow_1_1_sparse_tensor_impl_1a5e3846abcec2da92bc62149232b82bd7" kindref="member">SparseTensorImpl</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/><ref refid="structarrow_1_1_sparse_tensor_format_1a0693b2fa5192ae86d525995fe6f64f3a" kindref="member">type</ref>,</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int64_t&gt;&amp;<sp/>shape,</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;&amp;<sp/>dim_names<sp/>=<sp/>{})</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="classarrow_1_1_sparse_tensor_impl" kindref="compound">SparseTensorImpl</ref>(<ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>,<sp/>type,<sp/><ref refid="macros_8h_1a3ef7eab8cd0e570b6586628cc9d5ccab" kindref="member">NULLPTR</ref>,<sp/>shape,<sp/>dim_names)<sp/>{}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="523" refid="classarrow_1_1_sparse_tensor_impl_1aa3cfc7b57bc57464d59b67b37a99f2dd" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;SparseTensorImpl&lt;SparseIndexType&gt;</ref>&gt;&gt;<sp/><ref refid="classarrow_1_1_sparse_tensor_impl_1aa3cfc7b57bc57464d59b67b37a99f2dd" kindref="member">Make</ref>(</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;SparseIndexType&gt;&amp;<sp/>sparse_index,</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>type,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;Buffer&gt;&amp;<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>,</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;int64_t&gt;&amp;<sp/>shape,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;std::string&gt;&amp;<sp/>dim_names)<sp/>{</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!is_tensor_supported(type-&gt;id()))<sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1aa388393c060f3b44316876a630190576" kindref="member">Status::Invalid</ref>(type-&gt;ToString(),</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;<sp/>is<sp/>not<sp/>valid<sp/>data<sp/>type<sp/>for<sp/>a<sp/>sparse<sp/>tensor&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(sparse_index-&gt;ValidateShape(shape));</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(dim_names.size()<sp/>&gt;<sp/>0<sp/>&amp;&amp;<sp/>dim_names.size()<sp/>!=<sp/>shape.size())<sp/>{</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_status_1aa388393c060f3b44316876a630190576" kindref="member">Status::Invalid</ref>(</highlight><highlight class="stringliteral">&quot;dim_names<sp/>length<sp/>is<sp/>inconsistent<sp/>with<sp/>shape&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;SparseTensorImpl&lt;SparseIndexType&gt;&gt;(sparse_index,<sp/><ref refid="structarrow_1_1_sparse_tensor_format_1a0693b2fa5192ae86d525995fe6f64f3a" kindref="member">type</ref>,<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>,</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shape,<sp/>dim_names);</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"></highlight></codeline>
<codeline lineno="543" refid="classarrow_1_1_sparse_tensor_impl_1a1193d18e653218239a3c178038b84bc7" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;SparseTensorImpl&lt;SparseIndexType&gt;</ref>&gt;&gt;<sp/><ref refid="classarrow_1_1_sparse_tensor_impl_1a1193d18e653218239a3c178038b84bc7" kindref="member">Make</ref>(</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_tensor" kindref="compound">Tensor</ref>&amp;<sp/>tensor,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::shared_ptr&lt;DataType&gt;&amp;<sp/>index_value_type,</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/>pool<sp/>=<sp/><ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">default_memory_pool</ref>())<sp/>{</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;SparseIndex&gt;<sp/>sparse_index;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>std::shared_ptr&lt;Buffer&gt;<sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>;</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="status_8h_1a4a98c16fff26a2c4cf8c26d9244c1cb4" kindref="member">ARROW_RETURN_NOT_OK</ref>(internal::MakeSparseTensorFromTensor(</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tensor,<sp/>SparseIndexType::format_id,<sp/>index_value_type,<sp/>pool,<sp/>&amp;sparse_index,</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;data));</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>std::make_shared&lt;SparseTensorImpl&lt;SparseIndexType&gt;&gt;(</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>internal::checked_pointer_cast&lt;SparseIndexType&gt;(sparse_index),<sp/>tensor.<ref refid="classarrow_1_1_tensor_1a9bcd93151c9086430ebde46c0c3e2370" kindref="member">type</ref>(),</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="namespacemake__precompiled__bitcode_1a4be8fd83a685b255381089b8c3ecb5a0" kindref="member">data</ref>,<sp/>tensor.<ref refid="classarrow_1_1_tensor_1ad1135e664dda72de17680475a28fbee5" kindref="member">shape</ref>(),<sp/>tensor.<ref refid="classarrow_1_1_tensor_1a84f88a8835ecb20532f89fb804b8ce2a" kindref="member">dim_names_</ref>);</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556" refid="classarrow_1_1_sparse_tensor_impl_1a9a631048d4dd627a8d934f99d3b5c9c4" refkind="member"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_result" kindref="compound">Result&lt;std::shared_ptr&lt;SparseTensorImpl&lt;SparseIndexType&gt;</ref>&gt;&gt;<sp/><ref refid="classarrow_1_1_sparse_tensor_impl_1a9a631048d4dd627a8d934f99d3b5c9c4" kindref="member">Make</ref>(</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_tensor" kindref="compound">Tensor</ref>&amp;<sp/>tensor,<sp/><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref>*<sp/>pool<sp/>=<sp/><ref refid="namespacearrow_1aebe81d544faaf827b8f32c5a80b99820" kindref="member">default_memory_pool</ref>())<sp/>{</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Make(tensor,<sp/><ref refid="group__type-factories_1ga733b16be653069b8d926529662e34e79" kindref="member">int64</ref>(),<sp/>pool);</highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/>}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><ref refid="macros_8h_1a40d72e185b1488b5659b761f0b6115bb" kindref="member">ARROW_DISALLOW_COPY_AND_ASSIGN</ref>(<ref refid="classarrow_1_1_sparse_tensor_impl" kindref="compound">SparseTensorImpl</ref>);</highlight></codeline>
<codeline lineno="563"><highlight class="normal">};</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight></codeline>
<codeline lineno="566" refid="namespacearrow_1ac9b05a1d2db4d6cce70e2adc6ae983f9" refkind="member"><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_sparse_tensor_impl" kindref="compound">SparseCOOTensor</ref><sp/>=<sp/><ref refid="classarrow_1_1_sparse_tensor_impl" kindref="compound">SparseTensorImpl&lt;SparseCOOIndex&gt;</ref>;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="569" refid="namespacearrow_1a30853e74abee092db4aa50440dab9ce8" refkind="member"><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_sparse_tensor_impl" kindref="compound">SparseCSRMatrix</ref><sp/>=<sp/><ref refid="classarrow_1_1_sparse_tensor_impl" kindref="compound">SparseTensorImpl&lt;SparseCSRIndex&gt;</ref>;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="572" refid="namespacearrow_1a365a8eacbf769f8ce28bac334b84690c" refkind="member"><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_sparse_tensor_impl" kindref="compound">SparseCSCMatrix</ref><sp/>=<sp/><ref refid="classarrow_1_1_sparse_tensor_impl" kindref="compound">SparseTensorImpl&lt;SparseCSCIndex&gt;</ref>;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="575" refid="namespacearrow_1a425323660be318b4ad32315190d83371" refkind="member"><highlight class="keyword">using</highlight><highlight class="normal"><sp/><ref refid="classarrow_1_1_sparse_tensor_impl" kindref="compound">SparseCSFTensor</ref><sp/>=<sp/><ref refid="classarrow_1_1_sparse_tensor_impl" kindref="compound">SparseTensorImpl&lt;SparseCSFIndex&gt;</ref>;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal">}<sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>arrow</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/arrow/cpp/src/arrow/sparse_tensor.h"/>
  </compounddef>
</doxygen>
