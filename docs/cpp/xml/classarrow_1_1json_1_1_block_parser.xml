<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classarrow_1_1json_1_1_block_parser" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>arrow::json::BlockParser</compoundname>
    <includes refid="json_2parser_8h" local="no">arrow/json/parser.h</includes>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classarrow_1_1json_1_1_block_parser_1acf58856ebed1f9d90b5fa4ff2a82ae55" prot="protected" static="no" mutable="no">
        <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
        <definition>MemoryPool* arrow::json::BlockParser::pool_</definition>
        <argsstring></argsstring>
        <name>pool_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/json/parser.h" line="96" column="1" bodyfile="/arrow/cpp/src/arrow/json/parser.h" bodystart="96" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classarrow_1_1json_1_1_block_parser_1ad28d6dfe4b389a9fca33d8b21ad7f3ca" prot="protected" static="no" mutable="no">
        <type>int32_t</type>
        <definition>int32_t arrow::json::BlockParser::num_rows_</definition>
        <argsstring></argsstring>
        <name>num_rows_</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/json/parser.h" line="97" column="1" bodyfile="/arrow/cpp/src/arrow/json/parser.h" bodystart="97" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classarrow_1_1json_1_1_block_parser_1a014e4905354c3ad864399d24da33d550" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual arrow::json::BlockParser::~BlockParser</definition>
        <argsstring>()=default</argsstring>
        <name>~BlockParser</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/json/parser.h" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1json_1_1_block_parser_1ac1026911dd7cdb3de4bb536617c6bbc9" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>virtual Status arrow::json::BlockParser::ReserveScalarStorage</definition>
        <argsstring>(int64_t nbytes)=0</argsstring>
        <name>ReserveScalarStorage</name>
        <param>
          <type>int64_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
<para>Reserve storage for scalars parsed from a block of json. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/json/parser.h" line="70" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1json_1_1_block_parser_1a9c73d3cb97634efd0a022c17e2d57612" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>virtual Status arrow::json::BlockParser::Parse</definition>
        <argsstring>(const std::shared_ptr&lt; Buffer &gt; &amp;json)=0</argsstring>
        <name>Parse</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="classarrow_1_1_buffer" kindref="compound">Buffer</ref> &gt; &amp;</type>
          <declname>json</declname>
        </param>
        <briefdescription>
<para>Parse a block of data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/json/parser.h" line="73" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1json_1_1_block_parser_1a60820d3dc4a85e52be56b9c5b078b339" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>virtual Status arrow::json::BlockParser::Finish</definition>
        <argsstring>(std::shared_ptr&lt; Array &gt; *parsed)=0</argsstring>
        <name>Finish</name>
        <param>
          <type>std::shared_ptr&lt; <ref refid="classarrow_1_1_array" kindref="compound">Array</ref> &gt; *</type>
          <declname>parsed</declname>
        </param>
        <briefdescription>
<para>Extract parsed data. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/json/parser.h" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1json_1_1_block_parser_1a742eea94127446d9855701e1c28f4a32" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>int32_t</type>
        <definition>int32_t arrow::json::BlockParser::num_rows</definition>
        <argsstring>() const</argsstring>
        <name>num_rows</name>
        <briefdescription>
<para>Return the number of parsed rows. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/json/parser.h" line="79" column="1" bodyfile="/arrow/cpp/src/arrow/json/parser.h" bodystart="79" bodyend="79"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classarrow_1_1json_1_1_block_parser_1a3f82597967b216f8c68a86a0311b5817" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::json::BlockParser::Make</definition>
        <argsstring>(MemoryPool *pool, const ParseOptions &amp;options, std::unique_ptr&lt; BlockParser &gt; *out)</argsstring>
        <name>Make</name>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <param>
          <type>const <ref refid="structarrow_1_1json_1_1_parse_options" kindref="compound">ParseOptions</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classarrow_1_1json_1_1_block_parser" kindref="compound">BlockParser</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
<para>Construct a <ref refid="classarrow_1_1json_1_1_block_parser" kindref="compound">BlockParser</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">pool</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> to use when constructing parsed array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">options</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="structarrow_1_1json_1_1_parse_options" kindref="compound">ParseOptions</ref> to use when parsing JSON </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">out</parametername>
</parameternamelist>
<parameterdescription>
<para>constructed <ref refid="classarrow_1_1json_1_1_block_parser" kindref="compound">BlockParser</ref> </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/json/parser.h" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1json_1_1_block_parser_1a9b036bb5d7d0062e0fe58f8a80b3c698" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classarrow_1_1_status" kindref="compound">Status</ref></type>
        <definition>static Status arrow::json::BlockParser::Make</definition>
        <argsstring>(const ParseOptions &amp;options, std::unique_ptr&lt; BlockParser &gt; *out)</argsstring>
        <name>Make</name>
        <param>
          <type>const <ref refid="structarrow_1_1json_1_1_parse_options" kindref="compound">ParseOptions</ref> &amp;</type>
          <declname>options</declname>
        </param>
        <param>
          <type>std::unique_ptr&lt; <ref refid="classarrow_1_1json_1_1_block_parser" kindref="compound">BlockParser</ref> &gt; *</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/json/parser.h" line="89" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classarrow_1_1json_1_1_block_parser_1abbdda1eab30062a090df91327e4823ba" prot="protected" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>arrow::json::BlockParser::ARROW_DISALLOW_COPY_AND_ASSIGN</definition>
        <argsstring>(BlockParser)</argsstring>
        <name>ARROW_DISALLOW_COPY_AND_ASSIGN</name>
        <param>
          <type><ref refid="classarrow_1_1json_1_1_block_parser" kindref="compound">BlockParser</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/json/parser.h" line="92" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classarrow_1_1json_1_1_block_parser_1ab4936580aa44e36eec4c2505bfcff268" prot="protected" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>arrow::json::BlockParser::BlockParser</definition>
        <argsstring>(MemoryPool *pool)</argsstring>
        <name>BlockParser</name>
        <param>
          <type><ref refid="classarrow_1_1_memory_pool" kindref="compound">MemoryPool</ref> *</type>
          <declname>pool</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/arrow/cpp/src/arrow/json/parser.h" line="94" column="1" bodyfile="/arrow/cpp/src/arrow/json/parser.h" bodystart="94" bodyend="94"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>A reusable block-based parser for JSON data. </para>    </briefdescription>
    <detaileddescription>
<para>The parser takes a block of newline delimited JSON data and extracts Arrays of unconverted strings which can be fed to a <ref refid="classarrow_1_1json_1_1_converter" kindref="compound">Converter</ref> to obtain a usable <ref refid="classarrow_1_1_array" kindref="compound">Array</ref>.</para><para>Note that in addition to parse errors (such as malformed JSON) some conversion errors are caught at parse time:<itemizedlist>
<listitem><para>A null value in non-nullable column</para></listitem><listitem><para>Change in the JSON kind of a column. For example, if an explicit schema is provided which stipulates that field &quot;a&quot; is integral, a row of {&quot;a&quot;: &quot;not a number&quot;} will result in an error. This also applies to fields outside an explicit schema. </para></listitem></itemizedlist>
</para>    </detaileddescription>
    <collaborationgraph>
      <node id="361">
        <label>arrow::json::BlockParser</label>
        <link refid="classarrow_1_1json_1_1_block_parser"/>
        <childnode refid="362" relation="usage">
          <edgelabel>pool_</edgelabel>
        </childnode>
      </node>
      <node id="362">
        <label>arrow::MemoryPool</label>
        <link refid="classarrow_1_1_memory_pool"/>
      </node>
    </collaborationgraph>
    <location file="/arrow/cpp/src/arrow/json/parser.h" line="65" column="1" bodyfile="/arrow/cpp/src/arrow/json/parser.h" bodystart="65" bodyend="98"/>
    <listofallmembers>
      <member refid="classarrow_1_1json_1_1_block_parser_1abbdda1eab30062a090df91327e4823ba" prot="protected" virt="non-virtual"><scope>arrow::json::BlockParser</scope><name>ARROW_DISALLOW_COPY_AND_ASSIGN</name></member>
      <member refid="classarrow_1_1json_1_1_block_parser_1ab4936580aa44e36eec4c2505bfcff268" prot="protected" virt="non-virtual"><scope>arrow::json::BlockParser</scope><name>BlockParser</name></member>
      <member refid="classarrow_1_1json_1_1_block_parser_1a60820d3dc4a85e52be56b9c5b078b339" prot="public" virt="pure-virtual"><scope>arrow::json::BlockParser</scope><name>Finish</name></member>
      <member refid="classarrow_1_1json_1_1_block_parser_1a3f82597967b216f8c68a86a0311b5817" prot="public" virt="non-virtual"><scope>arrow::json::BlockParser</scope><name>Make</name></member>
      <member refid="classarrow_1_1json_1_1_block_parser_1a9b036bb5d7d0062e0fe58f8a80b3c698" prot="public" virt="non-virtual"><scope>arrow::json::BlockParser</scope><name>Make</name></member>
      <member refid="classarrow_1_1json_1_1_block_parser_1a742eea94127446d9855701e1c28f4a32" prot="public" virt="non-virtual"><scope>arrow::json::BlockParser</scope><name>num_rows</name></member>
      <member refid="classarrow_1_1json_1_1_block_parser_1ad28d6dfe4b389a9fca33d8b21ad7f3ca" prot="protected" virt="non-virtual"><scope>arrow::json::BlockParser</scope><name>num_rows_</name></member>
      <member refid="classarrow_1_1json_1_1_block_parser_1a9c73d3cb97634efd0a022c17e2d57612" prot="public" virt="pure-virtual"><scope>arrow::json::BlockParser</scope><name>Parse</name></member>
      <member refid="classarrow_1_1json_1_1_block_parser_1acf58856ebed1f9d90b5fa4ff2a82ae55" prot="protected" virt="non-virtual"><scope>arrow::json::BlockParser</scope><name>pool_</name></member>
      <member refid="classarrow_1_1json_1_1_block_parser_1ac1026911dd7cdb3de4bb536617c6bbc9" prot="public" virt="pure-virtual"><scope>arrow::json::BlockParser</scope><name>ReserveScalarStorage</name></member>
      <member refid="classarrow_1_1json_1_1_block_parser_1a014e4905354c3ad864399d24da33d550" prot="public" virt="virtual"><scope>arrow::json::BlockParser</scope><name>~BlockParser</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
