<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.4">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2018-12-05T18:41:18-05:00</updated><id>/feed.xml</id><entry><title type="html">Gandiva: A LLVM-based Analytical Expression Compiler for Apache Arrow</title><link href="/blog/2018/12/04/gandiva-donation/" rel="alternate" type="text/html" title="Gandiva: A LLVM-based Analytical Expression Compiler for Apache Arrow" /><published>2018-12-04T23:00:00-05:00</published><updated>2018-12-04T23:00:00-05:00</updated><id>/blog/2018/12/04/gandiva-donation</id><content type="html" xml:base="/blog/2018/12/04/gandiva-donation/">&lt;!--

--&gt;

&lt;p&gt;Today we’re happy to announce that the Gandiva Initiative for Apache Arrow, an LLVM-based execution kernel, is now part of the Apache Arrow project. Gandiva was kindly donated by &lt;a href=&quot;https://www.dremio.com/&quot;&gt;Dremio&lt;/a&gt;, where it was originally developed and open-sourced. Gandiva extends Arrow’s capabilities to provide high performance analytical execution and is composed of two main components:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;A runtime expression compiler leveraging LLVM&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A high performance execution environment&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Gandiva works as follows: applications submit an expression tree to the compiler, built in a language agnostic protobuf-based expression representation. From there, Gandiva then compiles the expression tree to native code for the current runtime environment and hardware. Once compiled, the Gandiva execution kernel then consumes and produces Arrow columnar batches. The generated code is highly optimized for parallel processing on modern CPUs. For example, on AVX-128 processors Gandiva can process 8 pairs of 2 byte values in a single vectorized operation, and on AVX-512 processors Gandiva can process 4x as many values in a single operation. Gandiva is built from the ground up to understand Arrow’s in-memory representation and optimize processing against it.&lt;/p&gt;

&lt;p&gt;While Gandiva is just starting within the Arrow community, it already supports hundreds of &lt;a href=&quot;https://github.com/apache/arrow/blob/master/cpp/src/gandiva/function_registry.cc&quot;&gt;expressions&lt;/a&gt;, ranging from math functions to case statements. Gandiva was built as a standalone C++ library built on top of the core Apache Arrow codebase and was donated with C++ and Java APIs construction and execution APIs for projection and filtering operations. The Arrow community is already looking to expand Gandiva’s capabilities. This will include incorporating more operations and supporting many new language bindings. As an example, multiple community members are already actively building new language bindings that allow use of Gandiva within Python and Ruby.&lt;/p&gt;

&lt;p&gt;While young within the Arrow community, Gandiva is already shipped and used in production by many Dremio customers as part of Dremio’s execution engine. Experiments have demonstrated &lt;a href=&quot;https://www.dremio.com/gandiva-performance-improvements-production-query/&quot;&gt;70x performance improvement&lt;/a&gt; on many SQL queries. We expect to see similar performance gains for many other projects that leverage Arrow.&lt;/p&gt;

&lt;p&gt;The Arrow community is working to ship the first formal Apache Arrow release that includes Gandiva, and we hope this will be available within the next couple months. This should make it much easier for the broader analytics and data science development communities to leverage runtime code generation for high-performance data processing in a variety of contexts and projects.&lt;/p&gt;

&lt;p&gt;We started the Arrow project a couple of years ago with the objective of creating an industry-standard columnar in-memory data representation for analytics. Within this short period of time, Apache Arrow has been adopted by dozens of both open source and commercial software products. Some key examples include technologies such as Apache Spark, Pandas, Nvidia RAPIDS, Dremio, and InfluxDB. This success has driven Arrow to now be downloaded more than 1 million times per month. Over 200 developers have already contributed to Apache Arrow. If you’re interested in contributing to Gandiva or any other part of the Apache Arrow project, feel free to reach out on the mailing list and join us!&lt;/p&gt;

&lt;p&gt;For additional technical details on Gandiva, you can check out some of the following resources:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.dremio.com/announcing-gandiva-initiative-for-apache-arrow/&quot;&gt;https://www.dremio.com/announcing-gandiva-initiative-for-apache-arrow/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.dremio.com/gandiva-performance-improvements-production-query/&quot;&gt;https://www.dremio.com/gandiva-performance-improvements-production-query/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.dremio.com/webinars/vectorized-query-processing-apache-arrow/&quot;&gt;https://www.dremio.com/webinars/vectorized-query-processing-apache-arrow/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://www.dremio.com/adding-a-user-define-function-to-gandiva/&quot;&gt;https://www.dremio.com/adding-a-user-define-function-to-gandiva/&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>wesm</name></author></entry><entry><title type="html">Apache Arrow 0.11.0 Release</title><link href="/blog/2018/10/09/0.11.0-release/" rel="alternate" type="text/html" title="Apache Arrow 0.11.0 Release" /><published>2018-10-09T00:00:00-04:00</published><updated>2018-10-09T00:00:00-04:00</updated><id>/blog/2018/10/09/0.11.0-release</id><content type="html" xml:base="/blog/2018/10/09/0.11.0-release/">&lt;!--

--&gt;

&lt;p&gt;The Apache Arrow team is pleased to announce the 0.11.0 release. It is the
product of 2 months of development and includes &lt;a href=&quot;https://issues.apache.org/jira/issues/?jql=project%20%3D%20ARROW%20AND%20status%20in%20(Resolved%2C%20Closed)%20AND%20fixVersion%20%3D%200.11.0&quot;&gt;&lt;strong&gt;287 resolved
issues&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&quot;https://arrow.apache.org/install&quot;&gt;Install Page&lt;/a&gt; to learn how to get the libraries for your
platform. The &lt;a href=&quot;https://arrow.apache.org/release/0.11.0.html&quot;&gt;complete changelog&lt;/a&gt; is also available.&lt;/p&gt;

&lt;p&gt;We discuss some highlights from the release and other project news in this
post.&lt;/p&gt;

&lt;h2 id=&quot;arrow-flight-rpc-and-messaging-framework&quot;&gt;Arrow Flight RPC and Messaging Framework&lt;/h2&gt;

&lt;p&gt;We are developing a new Arrow-native RPC framework, Arrow Flight, based on
&lt;a href=&quot;http://grpc.io&quot;&gt;gRPC&lt;/a&gt; for high performance Arrow-based messaging. Through low-level
extensions to gRPC’s internal memory management, we are able to avoid expensive
parsing when receiving datasets over the wire, unlocking unprecedented levels
of performance in moving datasets from one machine to another. We will be
writing more about Flight on the Arrow blog in the future.&lt;/p&gt;

&lt;p&gt;Prototype implementations are available in Java and C++, and we will be focused
in the coming months on hardening the Flight RPC framework for enterprise-grade
production use cases.&lt;/p&gt;

&lt;h2 id=&quot;parquet-and-arrow-c-communities-joining-forces&quot;&gt;Parquet and Arrow C++ communities joining forces&lt;/h2&gt;

&lt;p&gt;After discussion over the last year, the Apache Arrow and Apache Parquet C++
communities decide to merge the Parquet C++ codebase into the Arrow C++
codebase and work together in a “monorepo” structure. This should result in
better developer productivity in core Parquet work as well as in Arrow
integration.&lt;/p&gt;

&lt;p&gt;Before this codebase merge, we had a circular dependency between the Arrow and
Parquet codebases, since the Parquet C++ library is used in the Arrow Python
library.&lt;/p&gt;

&lt;h2 id=&quot;gandiva-llvm-expression-compiler-donation&quot;&gt;Gandiva LLVM Expression Compiler donation&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://dremio.com&quot;&gt;Dremio Corporation&lt;/a&gt; has donated the &lt;a href=&quot;http://github.com/dremio/gandiva&quot;&gt;Gandiva&lt;/a&gt; LLVM expression compiler
to Apache Arrow. We will be working on cross-platform builds, packaging, and
language bindings (e.g. in Python) for Gandiva in the upcoming 0.12 release and
beyond. We will write more about Gandiva in the future.&lt;/p&gt;

&lt;h2 id=&quot;parquet-c-glib-bindings-donation&quot;&gt;Parquet C GLib Bindings Donation&lt;/h2&gt;

&lt;p&gt;PMC member &lt;a href=&quot;https://github.com/kou&quot;&gt;Kouhei Sutou&lt;/a&gt; has donated GLib bindings for the Parquet C++
libraries, which are designed to work together with the existing Arrow GLib
bindings.&lt;/p&gt;

&lt;h2 id=&quot;c-csv-reader-project&quot;&gt;C++ CSV Reader Project&lt;/h2&gt;

&lt;p&gt;We have begun developing a general purpose multithreaded CSV file parser in
C++. The purpose of this library is to parse and convert comma-separated text
files into Arrow columnar record batches as efficiently as possible. The
prototype version features Python bindings, and any language that can use the
C++ libraries (including C, R, and Ruby).&lt;/p&gt;

&lt;h2 id=&quot;new-matlab-bindings&quot;&gt;New MATLAB bindings&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://mathworks.com&quot;&gt;The MathWorks&lt;/a&gt; has contributed an initial MEX file binding to the Arrow
C++ libraries. Initially, it is possible to read Arrow-based Feather files in
MATLAB. We are looking forward to seeing more developments for MATLAB users.&lt;/p&gt;

&lt;h2 id=&quot;r-library-in-development&quot;&gt;R Library in Development&lt;/h2&gt;

&lt;p&gt;The community has begun implementing &lt;a href=&quot;https://github.com/apache/arrow/tree/master/r&quot;&gt;R language bindings and interoperability&lt;/a&gt;
with the Arrow C++ libraries. This will include support for zero-copy shared
memory IPC and other tools needed to improve R integration with Apache Spark
and more.&lt;/p&gt;

&lt;h2 id=&quot;support-for-cuda-based-gpus-in-python&quot;&gt;Support for CUDA-based GPUs in Python&lt;/h2&gt;

&lt;p&gt;This release includes Python bindings to the Arrow CUDA integration C++
library. This work is targeting interoperability with &lt;a href=&quot;https://github.com/numba/numba&quot;&gt;Numba&lt;/a&gt; and the &lt;a href=&quot;http://gpuopenanalytics.com/&quot;&gt;GPU
Open Analytics Initiative&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;upcoming-roadmap&quot;&gt;Upcoming Roadmap&lt;/h2&gt;

&lt;p&gt;In the coming months, we will continue to make progress on many fronts, with
Gandiva packaging, expanded language support (especially in R), and improved
data access (e.g. CSV, Parquet files) in focus.&lt;/p&gt;</content><author><name>wesm</name></author></entry><entry><title type="html">Apache Arrow 0.10.0 Release</title><link href="/blog/2018/08/07/0.10.0-release/" rel="alternate" type="text/html" title="Apache Arrow 0.10.0 Release" /><published>2018-08-07T00:00:00-04:00</published><updated>2018-08-07T00:00:00-04:00</updated><id>/blog/2018/08/07/0.10.0-release</id><content type="html" xml:base="/blog/2018/08/07/0.10.0-release/">&lt;!--

--&gt;

&lt;p&gt;The Apache Arrow team is pleased to announce the 0.10.0 release. It is the
product of over 4 months of development and includes &lt;a href=&quot;https://issues.apache.org/jira/issues/?jql=project%20%3D%20ARROW%20AND%20status%20in%20(Resolved%2C%20Closed)%20AND%20fixVersion%20%3D%200.10.0&quot;&gt;&lt;strong&gt;470 resolved
issues&lt;/strong&gt;&lt;/a&gt;. It is the largest release so far in the project’s history. 90
individuals contributed to this release.&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&quot;https://arrow.apache.org/install&quot;&gt;Install Page&lt;/a&gt; to learn how to get the libraries for your
platform. The &lt;a href=&quot;https://arrow.apache.org/release/0.10.0.html&quot;&gt;complete changelog&lt;/a&gt; is also available.&lt;/p&gt;

&lt;p&gt;We discuss some highlights from the release and other project news in this
post.&lt;/p&gt;

&lt;h2 id=&quot;offical-binary-packages-and-packaging-automation&quot;&gt;Offical Binary Packages and Packaging Automation&lt;/h2&gt;

&lt;p&gt;One of the largest projects in this release cycle was automating our build and
packaging tooling to be able to easily and reproducibly create a &lt;a href=&quot;https://www.apache.org/dyn/closer.cgi/arrow/arrow-0.10.0/binaries&quot;&gt;comprehensive
set of binary artifacts&lt;/a&gt; which have been approved and released by the Arrow
PMC. We developed a tool called &lt;strong&gt;Crossbow&lt;/strong&gt; which uses Appveyor and Travis CI
to build each of the different supported packages on all 3 platforms (Linux,
macOS, and Windows). As a result of our efforts, we should be able to make more
frequent Arrow releases. This work was led by Phillip Cloud, Kouhei Sutou, and
Krisztián Szűcs. Bravo!&lt;/p&gt;

&lt;h2 id=&quot;new-programming-languages-go-ruby-rust&quot;&gt;New Programming Languages: Go, Ruby, Rust&lt;/h2&gt;

&lt;p&gt;This release also adds 3 new programming languages to the project: Go, Ruby,
and Rust. Together with C, C++, Java, JavaScript, and Python, &lt;strong&gt;we now have
some level of support for 8 programming languages&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;upcoming-roadmap&quot;&gt;Upcoming Roadmap&lt;/h2&gt;

&lt;p&gt;In the coming months, we will be working to move Apache Arrow closer to a 1.0.0
release. We will continue to grow new features, improve performance and
stability, and expand support for currently supported and new programming
languages.&lt;/p&gt;</content><author><name>wesm</name></author></entry><entry><title type="html">Faster, scalable memory allocations in Apache Arrow with jemalloc</title><link href="/blog/2018/07/20/jemalloc/" rel="alternate" type="text/html" title="Faster, scalable memory allocations in Apache Arrow with jemalloc" /><published>2018-07-20T07:00:00-04:00</published><updated>2018-07-20T07:00:00-04:00</updated><id>/blog/2018/07/20/jemalloc</id><content type="html" xml:base="/blog/2018/07/20/jemalloc/">&lt;!--

--&gt;

&lt;p&gt;With the release of the 0.9 version of Apache Arrow, we have switched our
default allocator for array buffers from the system allocator to jemalloc on
OSX and Linux. This applies to the C++/GLib/Python implementations of Arrow.
In most cases changing the default allocator is normally done to avoid problems
that occur with many small, frequent (de)allocations. In contrast, in Arrow we
normally deal with large in-memory datasets. While jemalloc provides good
strategies for &lt;a href=&quot;https://zapier.com/engineering/celery-python-jemalloc/&quot;&gt;avoiding RAM fragmentation for allocations that are lower than
a memory page (4kb)&lt;/a&gt;, it also provides functionality that improves
performance on allocations that span several memory pages.&lt;/p&gt;

&lt;p&gt;Outside of Apache Arrow, &lt;a href=&quot;https://www.facebook.com/notes/facebook-engineering/scalable-memory-allocation-using-jemalloc/480222803919/&quot;&gt;jemalloc powers the infrastructure of Facebook&lt;/a&gt;
(this is also where most of its development happens). It is also used as the
&lt;a href=&quot;https://github.com/rust-lang/rust/pull/6895&quot;&gt;default allocator in Rust&lt;/a&gt; as well as it helps &lt;a href=&quot;http://download.redis.io/redis-stable/README.md&quot;&gt;Redis reduce the memory
fragmentation on Linux&lt;/a&gt; (“Allocator”).&lt;/p&gt;

&lt;p&gt;One allocation specialty that we require in Arrow is that memory should be
64byte aligned. This is so that we can get the most performance out of SIMD
instruction sets like AVX. While the most modern SIMD instructions also work on
unaligned memory, their performance is much better on aligned memory. To get the
best performance for our analytical applications, we want all memory to be
allocated such that SIMD performance is maximized.&lt;/p&gt;

&lt;p&gt;For aligned allocations, the POSIX APIs only provide the
&lt;code class=&quot;highlighter-rouge&quot;&gt;aligned_alloc(void** ptr, size_t alignment, size_t size)&lt;/code&gt; function to
allocate aligned memory. There is also 
&lt;code class=&quot;highlighter-rouge&quot;&gt;posix_memalign(void **ptr, size_t alignment, size_t size)&lt;/code&gt; to modify an
allocation to the preferred alignment. But neither of them cater for expansions
of the allocation. While the &lt;code class=&quot;highlighter-rouge&quot;&gt;realloc&lt;/code&gt; function can often expand allocations
without moving them physically, it does not ensure that in the case the
allocation is moved that the alignment is kept.&lt;/p&gt;

&lt;p&gt;In the case when Arrow was built without jemalloc being enabled, this resulted
in copying the data on each new expansion of an allocation. To reduce the number
of memory copies, we use jemalloc’s &lt;code class=&quot;highlighter-rouge&quot;&gt;*allocx()&lt;/code&gt;-APIs to create, modify and free
aligned allocations. One of the typical tasks where this gives us a major
speedup is on the incremental construction of an Arrow table that consists of
several columns. We often don’t know the size of the table in advance and need
to expand our allocations as the data is loaded.&lt;/p&gt;

&lt;p&gt;To incrementally build a vector using memory expansion of a factor of 2, we
would use the following C-code with the standard POSIX APIs:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aligned_alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;aligned_alloc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;memcpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;free&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With jemalloc’s special APIs, we are able to omit the explicit call to &lt;code class=&quot;highlighter-rouge&quot;&gt;memcpy&lt;/code&gt;.
In the case where a memory expansion cannot be done in-place, it is still called
by the allocator but not needed on all occasions. This simplifies our user code
to:&lt;/p&gt;

&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;128&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mallocx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MALLOCX_ALIGN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rallocx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MALLOCX_ALIGN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dallocx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ptr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MALLOCX_ALIGN&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To see the real world benefits of using jemalloc, we look at the benchmarks in
Arrow C++. There we have modeled a typical use case of incrementally building up
an array of primitive values. For the build-up of the array, we don’t know the
number of elements in the final array so we need to continuously expand the
memory region in which the data is stored. The code for this benchmark is part
of the &lt;code class=&quot;highlighter-rouge&quot;&gt;builder-benchmark&lt;/code&gt; in the Arrow C++ sources as
&lt;code class=&quot;highlighter-rouge&quot;&gt;BuildPrimitiveArrayNoNulls&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Runtimes without &lt;code class=&quot;highlighter-rouge&quot;&gt;jemalloc&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;BM_BuildPrimitiveArrayNoNulls/repeats:3                 636726 us   804.114MB/s
BM_BuildPrimitiveArrayNoNulls/repeats:3                 621345 us   824.019MB/s
BM_BuildPrimitiveArrayNoNulls/repeats:3                 625008 us    819.19MB/s
BM_BuildPrimitiveArrayNoNulls/repeats:3_mean            627693 us   815.774MB/s
BM_BuildPrimitiveArrayNoNulls/repeats:3_median          625008 us    819.19MB/s
BM_BuildPrimitiveArrayNoNulls/repeats:3_stddev            8034 us   10.3829MB/s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Runtimes with &lt;code class=&quot;highlighter-rouge&quot;&gt;jemalloc&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;BM_BuildPrimitiveArrayNoNulls/repeats:3                 630881 us   811.563MB/s
BM_BuildPrimitiveArrayNoNulls/repeats:3                 352891 us   1.41687GB/s
BM_BuildPrimitiveArrayNoNulls/repeats:3                 351039 us   1.42434GB/s
BM_BuildPrimitiveArrayNoNulls/repeats:3_mean            444937 us   1.21125GB/s
BM_BuildPrimitiveArrayNoNulls/repeats:3_median          352891 us   1.41687GB/s
BM_BuildPrimitiveArrayNoNulls/repeats:3_stddev          161035 us   371.335MB/s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The benchmark was run three times for each configuration to see the performance
differences. The first run in each configuration yielded the same performance but
in all subsequent runs, the version using jemalloc was about twice as fast. In
these cases, the memory region that was used for constructing the array could be
expanded in place without moving the data around. This was possible as there
were memory pages assigned to the process that were unused but not reclaimed by
the operating system. Without &lt;code class=&quot;highlighter-rouge&quot;&gt;jemalloc&lt;/code&gt;, we cannot make use of them simply by
the fact that the default allocator has no API that provides aligned
reallocation.&lt;/p&gt;</content><author><name>uwe</name></author></entry><entry><title type="html">A Native Go Library for Apache Arrow</title><link href="/blog/2018/03/22/go-code-donation/" rel="alternate" type="text/html" title="A Native Go Library for Apache Arrow" /><published>2018-03-22T00:00:00-04:00</published><updated>2018-03-22T00:00:00-04:00</updated><id>/blog/2018/03/22/go-code-donation</id><content type="html" xml:base="/blog/2018/03/22/go-code-donation/">&lt;!--

--&gt;

&lt;p&gt;Since launching in early 2016, Apache Arrow has been growing fast. We have made
nine major releases through the efforts of over 120 distinct contributors. The
project’s scope has also expanded. We began by focusing on the development of
the standardized in-memory columnar data format, which now serves as a pillar
of the project. Since then, we have been growing into a more general
cross-language platform for in-memory data analysis through new additions to
the project like the &lt;a href=&quot;http://arrow.apache.org/blog/2017/08/16/0.6.0-release/&quot;&gt;Plasma shared memory object store&lt;/a&gt;. A primary goal of
the project is to enable data system developers to process and move data fast.&lt;/p&gt;

&lt;p&gt;So far, we officially have developed native Arrow implementations in C++, Java,
and JavaScript. We have created binding layers for the C++ libraries in C
(using the GLib libraries) and Python. We have also seen efforts to develop
interfaces to the Arrow C++ libraries in Go, Lua, Ruby, and Rust. While binding
layers serve many purposes, there can be benefits to native implementations,
and so we’ve been keen to see future work on native implementations in growing
systems languages like Go and Rust.&lt;/p&gt;

&lt;p&gt;This past October, engineers &lt;a href=&quot;https://github.com/stuartcarnie&quot;&gt;Stuart Carnie&lt;/a&gt;, &lt;a href=&quot;https://github.com/nathanielc&quot;&gt;Nathaniel Cook&lt;/a&gt;, and
&lt;a href=&quot;https://github.com/goller&quot;&gt;Chris Goller&lt;/a&gt;, employees of &lt;a href=&quot;https://influxdata.com&quot;&gt;InfluxData&lt;/a&gt;, began developing a native [Go
language implementation of the &lt;a href=&quot;https://github.com/influxdata/arrow&quot;&gt;Apache Arrow&lt;/a&gt; in-memory columnar format for
use in Go-based database systems like InfluxDB. We are excited to announce that
InfluxData has &lt;a href=&quot;https://www.businesswire.com/news/home/20180322005393/en/InfluxData-Announces-Language-Implementation-Contribution-Apache-Arrow&quot;&gt;donated this native Go implementation to the Apache Arrow
project&lt;/a&gt;, where it will continue to be developed. This work features
low-level integration with the Go runtime and native support for SIMD
instruction sets. We are looking forward to working more closely with the Go
community on solving in-memory analytics and data interoperability problems.&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;/img/native_go_implementation.png&quot; alt=&quot;Apache Arrow implementations and bindings&quot; width=&quot;60%&quot; class=&quot;img-responsive&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;One of the mantras in &lt;a href=&quot;https://www.apache.org&quot;&gt;The Apache Software Foundation&lt;/a&gt; is “Community over
Code”. By building an open and collaborative development community across many
programming language ecosystems, we will be able to development better and
longer-lived solutions to the systems problems faced by data developers.&lt;/p&gt;

&lt;p&gt;We are excited for what the future holds for the Apache Arrow project. Adding
first-class support for a popular systems programming language like Go is an
important step along the way. We welcome others from the Go community to get
involved in the project. We also welcome others who wish to explore building
Arrow support for other programming languages not yet represented. Learn more
at &lt;a href=&quot;https://arrow.apache.org&quot;&gt;https://arrow.apache.org&lt;/a&gt; and join the mailing list
&lt;a href=&quot;https://lists.apache.org/list.html?dev@arrow.apache.org&quot;&gt;dev@arrow.apache.org&lt;/a&gt;.&lt;/p&gt;</content><author><name>pmc</name></author></entry><entry><title type="html">Apache Arrow 0.9.0 Release</title><link href="/blog/2018/03/22/0.9.0-release/" rel="alternate" type="text/html" title="Apache Arrow 0.9.0 Release" /><published>2018-03-22T00:00:00-04:00</published><updated>2018-03-22T00:00:00-04:00</updated><id>/blog/2018/03/22/0.9.0-release</id><content type="html" xml:base="/blog/2018/03/22/0.9.0-release/">&lt;!--

--&gt;

&lt;p&gt;The Apache Arrow team is pleased to announce the 0.9.0 release. It is the
product of over 3 months of development and includes &lt;a href=&quot;https://issues.apache.org/jira/issues/?jql=project%20%3D%20ARROW%20AND%20status%20in%20(Resolved%2C%20Closed)%20AND%20fixVersion%20%3D%200.9.0&quot;&gt;&lt;strong&gt;260 resolved
JIRAs&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;While we made some of backwards-incompatible columnar binary format changes in
last December’s 0.8.0 release, the 0.9.0 release is backwards-compatible with
0.8.0. We will be working toward a 1.0.0 release this year, which will mark
longer-term binary stability for the Arrow columnar format and metadata.&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&quot;https://arrow.apache.org/install&quot;&gt;Install Page&lt;/a&gt; to learn how to get the libraries for your
platform. The &lt;a href=&quot;https://arrow.apache.org/release/0.8.0.html&quot;&gt;complete changelog&lt;/a&gt; is also available.&lt;/p&gt;

&lt;p&gt;We discuss some highlights from the release and other project news in this
post. This release has been overall focused more on bug fixes, compatibility,
and stability compared with previous releases which have pushed more on new and
expanded features.&lt;/p&gt;

&lt;h2 id=&quot;new-arrow-committers-and-pmc-members&quot;&gt;New Arrow committers and PMC members&lt;/h2&gt;

&lt;p&gt;Since the last release, we have added 2 new Arrow committers: &lt;a href=&quot;https://github.com/theneuralbit&quot;&gt;Brian
Hulette&lt;/a&gt; and &lt;a href=&quot;https://github.com/robertnishihara&quot;&gt;Robert Nishihara&lt;/a&gt;. Additionally, &lt;a href=&quot;https://github.com/cpcloud&quot;&gt;Phillip Cloud&lt;/a&gt; and
&lt;a href=&quot;https://github.com/pcmoritz&quot;&gt;Philipp Moritz&lt;/a&gt; have been promoted from committer to PMC
member. Congratulations and thank you for your contributions!&lt;/p&gt;

&lt;h2 id=&quot;plasma-object-store-improvements&quot;&gt;Plasma Object Store Improvements&lt;/h2&gt;

&lt;p&gt;The Plasma Object Store now supports managing interprocess shared memory on
CUDA-enabled GPUs. We are excited to see more GPU-related functionality develop
in Apache Arrow, as this has become a key computing environment for scalable
machine learning.&lt;/p&gt;

&lt;h2 id=&quot;python-improvements&quot;&gt;Python Improvements&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/pitrou&quot;&gt;Antoine Pitrou&lt;/a&gt; has joined the Python development efforts and helped
significantly this release with interoperability with built-in CPython data
structures and NumPy structured data types.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;New experimental support for reading Apache ORC files&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pyarrow.array&lt;/code&gt; now accepts lists of tuples or Python dicts for creating
Arrow struct type arrays.&lt;/li&gt;
  &lt;li&gt;NumPy structured dtypes (which are row/record-oriented) can be directly
converted to Arrow struct (column-oriented) arrays&lt;/li&gt;
  &lt;li&gt;Python 3.6 &lt;code class=&quot;highlighter-rouge&quot;&gt;pathlib&lt;/code&gt; objects for file paths are now accepted in many file
APIs, including for Parquet files&lt;/li&gt;
  &lt;li&gt;Arrow integer arrays with nulls can now be converted to NumPy object arrays
with &lt;code class=&quot;highlighter-rouge&quot;&gt;None&lt;/code&gt; values&lt;/li&gt;
  &lt;li&gt;New &lt;code class=&quot;highlighter-rouge&quot;&gt;pyarrow.foreign_buffer&lt;/code&gt; API for interacting with memory blocks located
at particular memory addresses&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;java-improvements&quot;&gt;Java Improvements&lt;/h2&gt;

&lt;p&gt;Java now fully supports the &lt;code class=&quot;highlighter-rouge&quot;&gt;FixedSizeBinary&lt;/code&gt; data type.&lt;/p&gt;

&lt;h2 id=&quot;javascript-improvements&quot;&gt;JavaScript Improvements&lt;/h2&gt;

&lt;p&gt;The JavaScript library has been significantly refactored and expanded. We are
making separate Apache releases (most recently &lt;code class=&quot;highlighter-rouge&quot;&gt;JS-0.3.1&lt;/code&gt;) for JavaScript,
which are being &lt;a href=&quot;https://www.npmjs.com/package/apache-arrow&quot;&gt;published to NPM&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;upcoming-roadmap&quot;&gt;Upcoming Roadmap&lt;/h2&gt;

&lt;p&gt;In the coming months, we will be working to move Apache Arrow closer to a 1.0.0
release. We will also be discussing plans to develop native Arrow-based
computational libraries within the project.&lt;/p&gt;</content><author><name>wesm</name></author></entry><entry><title type="html">Apache Arrow 0.8.0 Release</title><link href="/blog/2017/12/18/0.8.0-release/" rel="alternate" type="text/html" title="Apache Arrow 0.8.0 Release" /><published>2017-12-18T23:01:00-05:00</published><updated>2017-12-18T23:01:00-05:00</updated><id>/blog/2017/12/18/0.8.0-release</id><content type="html" xml:base="/blog/2017/12/18/0.8.0-release/">&lt;!--

--&gt;

&lt;p&gt;The Apache Arrow team is pleased to announce the 0.8.0 release. It is the
product of 10 weeks of development and includes &lt;a href=&quot;https://issues.apache.org/jira/issues/?jql=project%20%3D%20ARROW%20AND%20status%20in%20(Resolved%2C%20Closed)%20AND%20fixVersion%20%3D%200.8.0&quot;&gt;&lt;strong&gt;286 resolved JIRAs&lt;/strong&gt;&lt;/a&gt; with
many new features and bug fixes to the various language implementations. This
is the largest release since 0.3.0 earlier this year.&lt;/p&gt;

&lt;p&gt;As part of work towards a stabilizing the Arrow format and making a 1.0.0
release sometime in 2018, we made a series of backwards-incompatible changes to
the serialized Arrow metadata that requires Arrow readers and writers (0.7.1
and earlier) to upgrade in order to be compatible with 0.8.0 and higher. We
expect future backwards-incompatible changes to be rare going forward.&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&quot;https://arrow.apache.org/install&quot;&gt;Install Page&lt;/a&gt; to learn how to get the libraries for your
platform. The &lt;a href=&quot;https://arrow.apache.org/release/0.8.0.html&quot;&gt;complete changelog&lt;/a&gt; is also available.&lt;/p&gt;

&lt;p&gt;We discuss some highlights from the release and other project news in this
post.&lt;/p&gt;

&lt;h2 id=&quot;projects-powered-by-apache-arrow&quot;&gt;Projects “Powered By” Apache Arrow&lt;/h2&gt;

&lt;p&gt;A growing ecosystem of projects are using Arrow to solve in-memory analytics
and data interchange problems. We have added a new &lt;a href=&quot;http://arrow.apache.org/powered_by/&quot;&gt;Powered By&lt;/a&gt; page to the
Arrow website where we can acknowledge open source projects and companies which
are using Arrow. If you would like to add your project to the list as an Arrow
user, please let us know.&lt;/p&gt;

&lt;h2 id=&quot;new-arrow-committers&quot;&gt;New Arrow committers&lt;/h2&gt;

&lt;p&gt;Since the last release, we have added 5 new Apache committers:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/cpcloud&quot;&gt;Phillip Cloud&lt;/a&gt;, who has mainly contributed to C++ and Python&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/BryanCutler&quot;&gt;Bryan Cutler&lt;/a&gt;, who has mainly contributed to Java and Spark integration&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/icexelloss&quot;&gt;Li Jin&lt;/a&gt;, who has mainly contributed to Java and Spark integration&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/trxcllnt&quot;&gt;Paul Taylor&lt;/a&gt;, who has mainly contributed to JavaScript&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/siddharthteotia&quot;&gt;Siddharth Teotia&lt;/a&gt;, who has mainly contributed to Java&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Welcome to the Arrow team, and thank you for your contributions!&lt;/p&gt;

&lt;h2 id=&quot;improved-java-vector-api-performance-improvements&quot;&gt;Improved Java vector API, performance improvements&lt;/h2&gt;

&lt;p&gt;Siddharth Teotia led efforts to revamp the Java vector API to make things
simpler and faster. As part of this, we removed the dichotomy between nullable
and non-nullable vectors.&lt;/p&gt;

&lt;p&gt;See &lt;a href=&quot;https://arrow.apache.org/blog/2017/12/19/java-vector-improvements/&quot;&gt;Sidd’s blog post&lt;/a&gt; for more about these changes.&lt;/p&gt;

&lt;h2 id=&quot;decimal-support-in-c-python-consistency-with-java&quot;&gt;Decimal support in C++, Python, consistency with Java&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/cpcloud&quot;&gt;Phillip Cloud&lt;/a&gt; led efforts this release to harden details about exact
decimal values in the Arrow specification and ensure a consistent
implementation across Java, C++, and Python.&lt;/p&gt;

&lt;p&gt;Arrow now supports decimals represented internally as a 128-bit little-endian
integer, with a set precision and scale (as defined in many SQL-based
systems). As part of this work, we needed to change Java’s internal
representation from big- to little-endian.&lt;/p&gt;

&lt;p&gt;We are now integration testing decimals between Java, C++, and Python, which
will facilitate Arrow adoption in Apache Spark and other systems that use both
Java and Python.&lt;/p&gt;

&lt;p&gt;Decimal data can now be read and written by the &lt;a href=&quot;https://github.com/apache/parquet-cpp&quot;&gt;Apache Parquet C++
library&lt;/a&gt;, including via pyarrow.&lt;/p&gt;

&lt;p&gt;In the future, we may implement support for smaller-precision decimals
represented by 32- or 64-bit integers.&lt;/p&gt;

&lt;h2 id=&quot;c-improvements-expanded-kernels-library-and-more&quot;&gt;C++ improvements: expanded kernels library and more&lt;/h2&gt;

&lt;p&gt;In C++, we have continued developing the new &lt;code class=&quot;highlighter-rouge&quot;&gt;arrow::compute&lt;/code&gt; submodule
consisting of native computation fuctions for Arrow data. New contributor
&lt;a href=&quot;https://github.com/licht-t&quot;&gt;Licht Takeuchi&lt;/a&gt; helped expand the supported types for type casting in
&lt;code class=&quot;highlighter-rouge&quot;&gt;compute::Cast&lt;/code&gt;. We have also implemented new kernels &lt;code class=&quot;highlighter-rouge&quot;&gt;Unique&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;DictionaryEncode&lt;/code&gt; for computing the distinct elements of an array and
dictionary encoding (conversion to categorical), respectively.&lt;/p&gt;

&lt;p&gt;We expect the C++ computation “kernel” library to be a major expansion area for
the project over the next year and beyond. Here, we can also implement SIMD-
and GPU-accelerated versions of basic in-memory analytics functionality.&lt;/p&gt;

&lt;p&gt;As minor breaking API change in C++, we have made the &lt;code class=&quot;highlighter-rouge&quot;&gt;RecordBatch&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;Table&lt;/code&gt;
APIs “virtual” or abstract interfaces, to enable different implementations of a
record batch or table which conform to the standard interface. This will help
enable features like lazy IO or column loading.&lt;/p&gt;

&lt;p&gt;There was significant work improving the C++ library generally and supporting
work happening in Python and C. See the change log for full details.&lt;/p&gt;

&lt;h2 id=&quot;glib-c-improvements-meson-build-gpu-support&quot;&gt;GLib C improvements: Meson build, GPU support&lt;/h2&gt;

&lt;p&gt;Developing of the GLib-based C bindings has generally tracked work happening in
the C++ library. These bindings are being used to develop &lt;a href=&quot;https://github.com/red-data-tools&quot;&gt;data science tools
for Ruby users&lt;/a&gt; and elsewhere.&lt;/p&gt;

&lt;p&gt;The C bindings now support the &lt;a href=&quot;https://mesonbuild.com&quot;&gt;Meson build system&lt;/a&gt; in addition to
autotools, which enables them to be built on Windows.&lt;/p&gt;

&lt;p&gt;The Arrow GPU extension library is now also supported in the C bindings.&lt;/p&gt;

&lt;h2 id=&quot;javascript-first-independent-release-on-npm&quot;&gt;JavaScript: first independent release on NPM&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/TheNeuralBit&quot;&gt;Brian Hulette&lt;/a&gt; and &lt;a href=&quot;https://github.com/trxcllnt&quot;&gt;Paul Taylor&lt;/a&gt; have been continuing to drive efforts
on the TypeScript-based JavaScript implementation.&lt;/p&gt;

&lt;p&gt;Since the last release, we made a first JavaScript-only Apache release, version
0.2.0, which is &lt;a href=&quot;http://npmjs.org/package/apache-arrow&quot;&gt;now available on NPM&lt;/a&gt;. We decided to make separate
JavaScript releases to enable the JS library to release more frequently than
the rest of the project.&lt;/p&gt;

&lt;h2 id=&quot;python-improvements&quot;&gt;Python improvements&lt;/h2&gt;

&lt;p&gt;In addition to some of the new features mentioned above, we have made a variety
of usability and performance improvements for integrations with pandas, NumPy,
Dask, and other Python projects which may make use of pyarrow, the Arrow Python
library.&lt;/p&gt;

&lt;p&gt;Some of these improvements include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://arrow.apache.org/docs/python/ipc.html&quot;&gt;Component-based serialization&lt;/a&gt; for more flexible and memory-efficient
transport of large or complex Python objects&lt;/li&gt;
  &lt;li&gt;Substantially improved serialization performance for pandas objects when
using &lt;code class=&quot;highlighter-rouge&quot;&gt;pyarrow.serialize&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;pyarrow.deserialize&lt;/code&gt;. This includes a special
&lt;code class=&quot;highlighter-rouge&quot;&gt;pyarrow.pandas_serialization_context&lt;/code&gt; which further accelerates certain
internal details of pandas serialization * Support zero-copy reads for&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;pandas.DataFrame&lt;/code&gt; using &lt;code class=&quot;highlighter-rouge&quot;&gt;pyarrow.deserialize&lt;/code&gt; for objects without Python
objects&lt;/li&gt;
  &lt;li&gt;Multithreaded conversions from &lt;code class=&quot;highlighter-rouge&quot;&gt;pandas.DataFrame&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;pyarrow.Table&lt;/code&gt; (we
already supported multithreaded conversions from Arrow back to pandas)&lt;/li&gt;
  &lt;li&gt;More efficient conversion from 1-dimensional NumPy arrays to Arrow format&lt;/li&gt;
  &lt;li&gt;New generic buffer compression and decompression APIs &lt;code class=&quot;highlighter-rouge&quot;&gt;pyarrow.compress&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;pyarrow.decompress&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Enhanced Parquet cross-compatibility with &lt;a href=&quot;https://github.com/dask/fastparquet&quot;&gt;fastparquet&lt;/a&gt; and improved Dask
support&lt;/li&gt;
  &lt;li&gt;Python support for accessing Parquet row group column statistics&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;upcoming-roadmap&quot;&gt;Upcoming Roadmap&lt;/h2&gt;

&lt;p&gt;The 0.8.0 release includes some API and format changes, but upcoming releases
will focus on ompleting and stabilizing critical functionality to move the
project closer to a 1.0.0 release.&lt;/p&gt;

&lt;p&gt;With the ecosystem of projects using Arrow expanding rapidly, we will be
working to improve and expand the libraries in support of downstream use cases.&lt;/p&gt;

&lt;p&gt;We continue to look for more JavaScript, Julia, R, Rust, and other programming
language developers to join the project and expand the available
implementations and bindings to more languages.&lt;/p&gt;</content><author><name>wesm</name></author></entry><entry><title type="html">Improvements to Java Vector API in Apache Arrow 0.8.0</title><link href="/blog/2017/12/18/java-vector-improvements/" rel="alternate" type="text/html" title="Improvements to Java Vector API in Apache Arrow 0.8.0" /><published>2017-12-18T19:00:00-05:00</published><updated>2017-12-18T19:00:00-05:00</updated><id>/blog/2017/12/18/java-vector-improvements</id><content type="html" xml:base="/blog/2017/12/18/java-vector-improvements/">&lt;!--

--&gt;

&lt;p&gt;This post gives insight into the major improvements in the Java implementation
of vectors. We undertook this work over the last 10 weeks since the last Arrow
release.&lt;/p&gt;

&lt;h2 id=&quot;design-goals&quot;&gt;Design Goals&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;Improved maintainability and extensibility&lt;/li&gt;
  &lt;li&gt;Improved heap memory usage&lt;/li&gt;
  &lt;li&gt;No performance overhead on hot code paths&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;background&quot;&gt;Background&lt;/h2&gt;

&lt;h3 id=&quot;improved-maintainability-and-extensibility&quot;&gt;Improved maintainability and extensibility&lt;/h3&gt;

&lt;p&gt;We use templates in several places for compile time Java code generation for
different vector classes, readers, writers etc. Templates are helpful as the
developers don’t have to write a lot of duplicate code.&lt;/p&gt;

&lt;p&gt;However, we realized that over a period of time some specific Java
templates became extremely complex with giant if-else blocks, poor code indentation
and documentation. All this impacted the ability to easily extend these templates
for adding new functionality or improving the existing infrastructure.&lt;/p&gt;

&lt;p&gt;So we evaluated the usage of templates for compile time code generation and
decided not to use complex templates in some places by writing small amount of
duplicate code which is elegant, well documented and extensible.&lt;/p&gt;

&lt;h3 id=&quot;improved-heap-usage&quot;&gt;Improved heap usage&lt;/h3&gt;

&lt;p&gt;We did extensive memory analysis downstream in &lt;a href=&quot;https://www.dremio.com/&quot;&gt;Dremio&lt;/a&gt; where Arrow is used
heavily for in-memory query execution on columnar data. The general conclusion
was that Arrow’s Java vector classes have non-negligible heap overhead and
volume of objects was too high. There were places in code where we were
creating objects unnecessarily and using structures that could be substituted
with better alternatives.&lt;/p&gt;

&lt;h3 id=&quot;no-performance-overhead-on-hot-code-paths&quot;&gt;No performance overhead on hot code paths&lt;/h3&gt;

&lt;p&gt;Java vectors used delegation and abstraction heavily throughout the object
hierarchy. The performance critical get/set methods of vectors went through a
chain of function calls back and forth between different objects before doing
meaningful work. We also evaluated the usage of branches in vector APIs and
reimplemented some of them by avoiding branches completely.&lt;/p&gt;

&lt;p&gt;We took inspiration from how the Java memory code in &lt;code class=&quot;highlighter-rouge&quot;&gt;ArrowBuf&lt;/code&gt; works. For all
the performance critical methods, &lt;code class=&quot;highlighter-rouge&quot;&gt;ArrowBuf&lt;/code&gt; bypasses all the netty object
hierarchy, grabs the target virtual address and directly interacts with the
memory.&lt;/p&gt;

&lt;p&gt;There were cases where branches could be avoided all together.&lt;/p&gt;

&lt;p&gt;In case of nullable vectors, we were doing multiple checks to confirm if
the value at a given position in the vector is null or not.&lt;/p&gt;

&lt;h2 id=&quot;our-implementation-approach&quot;&gt;Our implementation approach&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;For scalars, the inheritance tree was simplified by writing different
abstract base classes for fixed and variable width scalars.&lt;/li&gt;
  &lt;li&gt;The base classes contained all the common functionality across different
types.&lt;/li&gt;
  &lt;li&gt;The individual subclasses implemented type specific APIs for fixed and
variable width scalar vectors.&lt;/li&gt;
  &lt;li&gt;For the performance critical methods, all the work is done either in
the vector class or corresponding ArrowBuf. There is no delegation to any
internal object.&lt;/li&gt;
  &lt;li&gt;The mutator and accessor based access to vector APIs is removed. These
objects led to unnecessary heap overhead and complicated the use of APIs.&lt;/li&gt;
  &lt;li&gt;Both scalar and complex vectors directly interact with underlying buffers
that manage the offsets, data and validity. Earlier we were creating different
inner vectors for each vector and delegating all the functionality to inner
vectors. This introduced a lot of bugs in memory management, excessive heap
overhead and performance penalty due to chain of delegations.&lt;/li&gt;
  &lt;li&gt;We reduced the number of vector classes by removing non-nullable vectors.
In the new implementation, all vectors in Java are nullable in nature.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Siddharth Teotia</name></author><summary type="html">This post describes the recent improvements in Java Vector code</summary></entry><entry><title type="html">Fast Python Serialization with Ray and Apache Arrow</title><link href="/blog/2017/10/15/fast-python-serialization-with-ray-and-arrow/" rel="alternate" type="text/html" title="Fast Python Serialization with Ray and Apache Arrow" /><published>2017-10-15T10:00:00-04:00</published><updated>2017-10-15T10:00:00-04:00</updated><id>/blog/2017/10/15/fast-python-serialization-with-ray-and-arrow</id><content type="html" xml:base="/blog/2017/10/15/fast-python-serialization-with-ray-and-arrow/">&lt;!--

--&gt;

&lt;p&gt;&lt;em&gt;This was originally posted on the &lt;a href=&quot;https://ray-project.github.io/&quot;&gt;Ray blog&lt;/a&gt;. &lt;a href=&quot;https://people.eecs.berkeley.edu/~pcmoritz/&quot;&gt;Philipp Moritz&lt;/a&gt; and &lt;a href=&quot;http://www.robertnishihara.com&quot;&gt;Robert Nishihara&lt;/a&gt; are graduate students at UC Berkeley.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This post elaborates on the integration between &lt;a href=&quot;http://ray.readthedocs.io/en/latest/index.html&quot;&gt;Ray&lt;/a&gt; and &lt;a href=&quot;https://arrow.apache.org/&quot;&gt;Apache Arrow&lt;/a&gt;.
The main problem this addresses is &lt;a href=&quot;https://en.wikipedia.org/wiki/Serialization&quot;&gt;data serialization&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;From &lt;a href=&quot;https://en.wikipedia.org/wiki/Serialization&quot;&gt;Wikipedia&lt;/a&gt;, &lt;strong&gt;serialization&lt;/strong&gt; is&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;… the process of translating data structures or object state into a format
that can be stored … or transmitted … and reconstructed later (possibly
in a different computer environment).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Why is any translation necessary? Well, when you create a Python object, it may
have pointers to other Python objects, and these objects are all allocated in
different regions of memory, and all of this has to make sense when unpacked by
another process on another machine.&lt;/p&gt;

&lt;p&gt;Serialization and deserialization are &lt;strong&gt;bottlenecks in parallel and distributed
computing&lt;/strong&gt;, especially in machine learning applications with large objects and
large quantities of data.&lt;/p&gt;

&lt;h2 id=&quot;design-goals&quot;&gt;Design Goals&lt;/h2&gt;

&lt;p&gt;As Ray is optimized for machine learning and AI applications, we have focused a
lot on serialization and data handling, with the following design goals:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;It should be very efficient with &lt;strong&gt;large numerical data&lt;/strong&gt; (this includes
NumPy arrays and Pandas DataFrames, as well as objects that recursively contain
Numpy arrays and Pandas DataFrames).&lt;/li&gt;
  &lt;li&gt;It should be about as fast as Pickle for &lt;strong&gt;general Python types&lt;/strong&gt;.&lt;/li&gt;
  &lt;li&gt;It should be compatible with &lt;strong&gt;shared memory&lt;/strong&gt;, allowing multiple processes
to use the same data without copying it.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Deserialization&lt;/strong&gt; should be extremely fast (when possible, it should not
require reading the entire serialized object).&lt;/li&gt;
  &lt;li&gt;It should be &lt;strong&gt;language independent&lt;/strong&gt; (eventually we’d like to enable Python
workers to use objects created by workers in Java or other languages and vice
versa).&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;our-approach-and-alternatives&quot;&gt;Our Approach and Alternatives&lt;/h2&gt;

&lt;p&gt;The go-to serialization approach in Python is the &lt;strong&gt;pickle&lt;/strong&gt; module. Pickle is
very general, especially if you use variants like &lt;a href=&quot;https://github.com/cloudpipe/cloudpickle/&quot;&gt;cloudpickle&lt;/a&gt;. However, it
does not satisfy requirements 1, 3, 4, or 5. Alternatives like &lt;strong&gt;json&lt;/strong&gt; satisfy
5, but not 1-4.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Our Approach:&lt;/strong&gt; To satisfy requirements 1-5, we chose to use the
&lt;a href=&quot;https://arrow.apache.org/&quot;&gt;Apache Arrow&lt;/a&gt; format as our underlying data representation. In collaboration
with the Apache Arrow team, we built &lt;a href=&quot;https://arrow.apache.org/docs/python/ipc.html#arbitrary-object-serialization&quot;&gt;libraries&lt;/a&gt; for mapping general Python
objects to and from the Arrow format. Some properties of this approach:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The data layout is language independent (requirement 5).&lt;/li&gt;
  &lt;li&gt;Offsets into a serialized data blob can be computed in constant time without
reading the full object (requirements 1 and 4).&lt;/li&gt;
  &lt;li&gt;Arrow supports &lt;strong&gt;zero-copy reads&lt;/strong&gt;, so objects can naturally be stored in
shared memory and used by multiple processes (requirements 1 and 3).&lt;/li&gt;
  &lt;li&gt;We can naturally fall back to pickle for anything we can’t handle well
(requirement 2).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Alternatives to Arrow:&lt;/strong&gt; We could have built on top of
&lt;a href=&quot;https://developers.google.com/protocol-buffers/&quot;&gt;&lt;strong&gt;Protocol Buffers&lt;/strong&gt;&lt;/a&gt;, but protocol buffers really isn’t designed for
numerical data, and that approach wouldn’t satisfy 1, 3, or 4. Building on top
of &lt;a href=&quot;https://google.github.io/flatbuffers/&quot;&gt;&lt;strong&gt;Flatbuffers&lt;/strong&gt;&lt;/a&gt; actually could be made to work, but it would have
required implementing a lot of the facilities that Arrow already has and we
preferred a columnar data layout more optimized for big data.&lt;/p&gt;

&lt;h2 id=&quot;speedups&quot;&gt;Speedups&lt;/h2&gt;

&lt;p&gt;Here we show some performance improvements over Python’s pickle module. The
experiments were done using &lt;code class=&quot;highlighter-rouge&quot;&gt;pickle.HIGHEST_PROTOCOL&lt;/code&gt;. Code for generating these
plots is included at the end of the post.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;With NumPy arrays:&lt;/strong&gt; In machine learning and AI applications, data (e.g.,
images, neural network weights, text documents) are typically represented as
data structures containing NumPy arrays. When using NumPy arrays, the speedups
are impressive.&lt;/p&gt;

&lt;p&gt;The fact that the Ray bars for deserialization are barely visible is not a
mistake. This is a consequence of the support for zero-copy reads (the savings
largely come from the lack of memory movement).&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/fast_python_serialization_with_ray_and_arrow/speedups0.png&quot; width=&quot;365&quot; height=&quot;255&quot; /&gt;
&lt;img src=&quot;/assets/fast_python_serialization_with_ray_and_arrow/speedups1.png&quot; width=&quot;365&quot; height=&quot;255&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;Note that the biggest wins are with deserialization. The speedups here are
multiple orders of magnitude and get better as the NumPy arrays get larger
(thanks to design goals 1, 3, and 4). Making &lt;strong&gt;deserialization&lt;/strong&gt; fast is
important for two reasons. First, an object may be serialized once and then
deserialized many times (e.g., an object that is broadcast to all workers).
Second, a common pattern is for many objects to be serialized in parallel and
then aggregated and deserialized one at a time on a single worker making
deserialization the bottleneck.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Without NumPy arrays:&lt;/strong&gt; When using regular Python objects, for which we
cannot take advantage of shared memory, the results are comparable to pickle.&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/fast_python_serialization_with_ray_and_arrow/speedups2.png&quot; width=&quot;365&quot; height=&quot;255&quot; /&gt;
&lt;img src=&quot;/assets/fast_python_serialization_with_ray_and_arrow/speedups3.png&quot; width=&quot;365&quot; height=&quot;255&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;These are just a few examples of interesting Python objects. The most important
case is the case where NumPy arrays are nested within other objects. Note that
our serialization library works with very general Python types including custom
Python classes and deeply nested objects.&lt;/p&gt;

&lt;h2 id=&quot;the-api&quot;&gt;The API&lt;/h2&gt;

&lt;p&gt;The serialization library can be used directly through pyarrow as follows. More
documentation is available &lt;a href=&quot;https://arrow.apache.org/docs/python/ipc.html#arbitrary-object-serialization&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;6.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;serialized_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pyarrow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;deserialized_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pyarrow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deserialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serialized_x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It can be used directly through the Ray API as follows.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;6.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;deserialized_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;data-representation&quot;&gt;Data Representation&lt;/h2&gt;

&lt;p&gt;We use Apache Arrow as the underlying language-independent data layout. Objects
are stored in two parts: a &lt;strong&gt;schema&lt;/strong&gt; and a &lt;strong&gt;data blob&lt;/strong&gt;. At a high level, the
data blob is roughly a flattened concatenation of all of the data values
recursively contained in the object, and the schema defines the types and
nesting structure of the data blob.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Technical Details:&lt;/strong&gt; Python sequences (e.g., dictionaries, lists, tuples,
sets) are encoded as Arrow &lt;a href=&quot;http://arrow.apache.org/docs/memory_layout.html#dense-union-type&quot;&gt;UnionArrays&lt;/a&gt; of other types (e.g., bools, ints,
strings, bytes, floats, doubles, date64s, tensors (i.e., NumPy arrays), lists,
tuples, dicts and sets). Nested sequences are encoded using Arrow
&lt;a href=&quot;http://arrow.apache.org/docs/memory_layout.html#list-type&quot;&gt;ListArrays&lt;/a&gt;. All tensors are collected and appended to the end of the
serialized object, and the UnionArray contains references to these tensors.&lt;/p&gt;

&lt;p&gt;To give a concrete example, consider the following object.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;[(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'hello'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;5.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;6.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;It would be represented in Arrow with the following structure.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;UnionArray(type_ids=[tuple, string, int, int, ndarray],
           tuples=ListArray(offsets=[0, 2],
                            UnionArray(type_ids=[int, int],
                                       ints=[1, 2])),
           strings=['hello'],
           ints=[3, 4],
           ndarrays=[&amp;lt;offset of numpy array&amp;gt;])
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Arrow uses Flatbuffers to encode serialized schemas. &lt;strong&gt;Using only the schema, we
can compute the offsets of each value in the data blob without scanning through
the data blob&lt;/strong&gt; (unlike Pickle, this is what enables fast deserialization). This
means that we can avoid copying or otherwise converting large arrays and other
values during deserialization. Tensors are appended at the end of the UnionArray
and can be efficiently shared and accessed using shared memory.&lt;/p&gt;

&lt;p&gt;Note that the actual object would be laid out in memory as shown below.&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/fast_python_serialization_with_ray_and_arrow/python_object.png&quot; width=&quot;600&quot; /&gt;
&lt;/div&gt;
&lt;div&gt;&lt;i&gt;The layout of a Python object in the heap. Each box is allocated in a
different memory region, and arrows between boxes represent pointers.&lt;/i&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;The Arrow serialized representation would be as follows.&lt;/p&gt;

&lt;div align=&quot;center&quot;&gt;
&lt;img src=&quot;/assets/fast_python_serialization_with_ray_and_arrow/arrow_object.png&quot; width=&quot;400&quot; /&gt;
&lt;/div&gt;
&lt;div&gt;&lt;i&gt;The memory layout of the Arrow-serialized object.&lt;/i&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;getting-involved&quot;&gt;Getting Involved&lt;/h2&gt;

&lt;p&gt;We welcome contributions, especially in the following areas.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Use the C++ and Java implementations of Arrow to implement versions of this
for C++ and Java.&lt;/li&gt;
  &lt;li&gt;Implement support for more Python types and better test coverage.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;reproducing-the-figures-above&quot;&gt;Reproducing the Figures Above&lt;/h2&gt;

&lt;p&gt;For reference, the figures can be reproduced with the following code.
Benchmarking &lt;code class=&quot;highlighter-rouge&quot;&gt;ray.put&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;ray.get&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;pyarrow.serialize&lt;/code&gt; and
&lt;code class=&quot;highlighter-rouge&quot;&gt;pyarrow.deserialize&lt;/code&gt; gives similar figures. The plots were generated at this
&lt;a href=&quot;https://github.com/apache/arrow/tree/894f7400977693b4e0e8f4b9845fd89481f6bf29&quot;&gt;commit&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pickle&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pyarrow&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;matplotlib.pyplot&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;timeit&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;benchmark_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Time serialization and deserialization for pickle.
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;pickle_serialize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pickle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pickle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HIGHEST_PROTOCOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;serialized_obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pickle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pickle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HIGHEST_PROTOCOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pickle_deserialize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pickle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;loads&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serialized_obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                                       &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# Time serialization and deserialization for Ray.
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;ray_serialize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pyarrow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;serialized_obj&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pyarrow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;ray_deserialize&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;timeit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timeit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;lambda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pyarrow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;deserialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;serialized_obj&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pickle_serialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pickle_deserialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ray_serialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ray_deserialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]]&lt;/span&gt;


&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pickle_times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ray_times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subplots&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_size_inches&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;3.8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;bar_width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.35&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;opacity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.6&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pickle_times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'r'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Pickle'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ray_times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar_width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;opacity&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'c'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;label&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Ray'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fontweight&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'bold'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ylabel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Time (seconds)'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fontsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'serialization'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'deserialization'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;xticks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bar_width&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;labels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fontsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;legend&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fontsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bbox_to_anchor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tight_layout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;yticks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fontsize&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savefig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'plot-'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'.png'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'png'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;


&lt;span class=&quot;n&quot;&gt;test_objects&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)],&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'weight-'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'string1'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'string2'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)},&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)]&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;titles&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'List of large numpy arrays'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'Dictionary of large numpy arrays'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'Large dictionary of small sets'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'Large list of strings'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;plot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;benchmark_object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;test_objects&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;titles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Philipp Moritz, Robert Nishihara</name></author><summary type="html">This post describes how serialization works in Ray.</summary></entry><entry><title type="html">Apache Arrow 0.7.0 Release</title><link href="/blog/2017/09/19/0.7.0-release/" rel="alternate" type="text/html" title="Apache Arrow 0.7.0 Release" /><published>2017-09-19T00:00:00-04:00</published><updated>2017-09-19T00:00:00-04:00</updated><id>/blog/2017/09/19/0.7.0-release</id><content type="html" xml:base="/blog/2017/09/19/0.7.0-release/">&lt;!--

--&gt;

&lt;p&gt;The Apache Arrow team is pleased to announce the 0.7.0 release. It includes
&lt;a href=&quot;https://issues.apache.org/jira/issues/?jql=project%20%3D%20ARROW%20AND%20status%20in%20(Resolved%2C%20Closed)%20AND%20fixVersion%20%3D%200.7.0&quot;&gt;&lt;strong&gt;133 resolved JIRAs&lt;/strong&gt;&lt;/a&gt; many new features and bug fixes to the various
language implementations. The Arrow memory format remains stable since the
0.3.x release.&lt;/p&gt;

&lt;p&gt;See the &lt;a href=&quot;http://arrow.apache.org/install&quot;&gt;Install Page&lt;/a&gt; to learn how to get the libraries for your
platform. The &lt;a href=&quot;http://arrow.apache.org/release/0.7.0.html&quot;&gt;complete changelog&lt;/a&gt; is also available.&lt;/p&gt;

&lt;p&gt;We include some highlights from the release in this post.&lt;/p&gt;

&lt;h2 id=&quot;new-pmc-member-kouhei-sutou&quot;&gt;New PMC Member: Kouhei Sutou&lt;/h2&gt;

&lt;p&gt;Since the last release we have added &lt;a href=&quot;https://github.com/kou&quot;&gt;Kou&lt;/a&gt; to the Arrow Project Management
Committee. He is also a PMC for Apache Subversion, and a major contributor to
many other open source projects.&lt;/p&gt;

&lt;p&gt;As an active member of the Ruby community in Japan, Kou has been developing the
GLib-based C bindings for Arrow with associated Ruby wrappers, to enable Ruby
users to benefit from the work that’s happening in Apache Arrow.&lt;/p&gt;

&lt;p&gt;We are excited to be collaborating with the Ruby community on shared
infrastructure for in-memory analytics and data science.&lt;/p&gt;

&lt;h2 id=&quot;expanded-javascript-typescript-implementation&quot;&gt;Expanded JavaScript (TypeScript) Implementation&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/trxcllnt&quot;&gt;Paul Taylor&lt;/a&gt; from the &lt;a href=&quot;https://github.com/netflix/falcor&quot;&gt;Falcor&lt;/a&gt; and &lt;a href=&quot;http://reactivex.io&quot;&gt;ReactiveX&lt;/a&gt; projects has worked to
expand the JavaScript implementation (which is written in TypeScript), using
the latest in modern JavaScript build and packaging technology. We are looking
forward to building out the JS implementation and bringing it up to full
functionality with the C++ and Java implementations.&lt;/p&gt;

&lt;p&gt;We are looking for more JavaScript developers to join the project and work
together to make Arrow for JS work well with many kinds of front end use cases,
like real time data visualization.&lt;/p&gt;

&lt;h2 id=&quot;type-casting-for-c-and-python&quot;&gt;Type casting for C++ and Python&lt;/h2&gt;

&lt;p&gt;As part of longer-term efforts to build an Arrow-native in-memory analytics
library, we implemented a variety of type conversion functions. These functions
are essential in ETL tasks when conforming one table schema to another. These
are similar to the &lt;code class=&quot;highlighter-rouge&quot;&gt;astype&lt;/code&gt; function in NumPy.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pyarrow&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pa&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;18&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pyarrow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BooleanArray&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x7ff6fb069b88&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;NA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;In&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cast&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pa&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;int32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;())&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Out&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pyarrow&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lib&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Int32Array&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;0x7ff6fb0383b8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;NA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Over time these will expand to support as many input-and-output type
combinations with optimized conversions.&lt;/p&gt;

&lt;h2 id=&quot;new-arrow-gpu-cuda-extension-library-for-c&quot;&gt;New Arrow GPU (CUDA) Extension Library for C++&lt;/h2&gt;

&lt;p&gt;To help with GPU-related projects using Arrow, like the &lt;a href=&quot;http://gpuopenanalytics.com/&quot;&gt;GPU Open Analytics
Initiative&lt;/a&gt;, we have started a C++ add-on library to simplify Arrow memory
management on CUDA-enabled graphics cards. We would like to expand this to
include a library of reusable CUDA kernel functions for GPU analytics on Arrow
columnar memory.&lt;/p&gt;

&lt;p&gt;For example, we could write a record batch from CPU memory to GPU device memory
like so (some error checking omitted):&lt;/p&gt;

&lt;div class=&quot;language-c++ highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;arrow/api.h&amp;gt;
#include &amp;lt;arrow/gpu/cuda_api.h&amp;gt;
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;using&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arrow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gpu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CudaDeviceManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shared_ptr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gpu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CudaContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gpu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CudaDeviceManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;manager&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;manager_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetContext&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;kGpuNumber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shared_ptr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RecordBatch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;batch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetCpuData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shared_ptr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;gpu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CudaBuffer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;device_serialized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gpu&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SerializeRecordBatch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;batch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;device_serialized&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We can then “read” the GPU record batch, but the returned &lt;code class=&quot;highlighter-rouge&quot;&gt;arrow::RecordBatch&lt;/code&gt;
internally will contain GPU device pointers that you can use for CUDA kernel
calls:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;std::shared_ptr&amp;lt;RecordBatch&amp;gt; device_batch;
gpu::ReadRecordBatch(batch-&amp;gt;schema(), device_serialized,
                     default_memory_pool(), &amp;amp;device_batch));

// Now run some CUDA kernels on device_batch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;decimal-integration-tests&quot;&gt;Decimal Integration Tests&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;http://github.com/cpcloud&quot;&gt;Phillip Cloud&lt;/a&gt; has been working on decimal support in C++ to enable Parquet
read/write support in C++ and Python, and also end-to-end testing against the
Arrow Java libraries.&lt;/p&gt;

&lt;p&gt;In the upcoming releases, we hope to complete the remaining data types that
need end-to-end testing between Java and C++:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Fixed size lists (variable-size lists already implemented)&lt;/li&gt;
  &lt;li&gt;Fixes size binary&lt;/li&gt;
  &lt;li&gt;Unions&lt;/li&gt;
  &lt;li&gt;Maps&lt;/li&gt;
  &lt;li&gt;Time intervals&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;other-notable-python-changes&quot;&gt;Other Notable Python Changes&lt;/h2&gt;

&lt;p&gt;Some highlights of Python development outside of bug fixes and general API
improvements include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Simplified &lt;code class=&quot;highlighter-rouge&quot;&gt;put&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;get&lt;/code&gt; arbitrary Python objects in Plasma objects&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://arrow.apache.org/docs/python/ipc.html&quot;&gt;High-speed, memory efficient object serialization&lt;/a&gt;. This is important
enough that we will likely write a dedicated blog post about it.&lt;/li&gt;
  &lt;li&gt;New &lt;code class=&quot;highlighter-rouge&quot;&gt;flavor='spark'&lt;/code&gt; option to &lt;code class=&quot;highlighter-rouge&quot;&gt;pyarrow.parquet.write_table&lt;/code&gt; to enable easy
writing of Parquet files maximized for Spark compatibility&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;parquet.write_to_dataset&lt;/code&gt; function with support for partitioned writes&lt;/li&gt;
  &lt;li&gt;Improved support for Dask filesystems&lt;/li&gt;
  &lt;li&gt;Improved Python usability for IPC: read and write schemas and record batches
more easily. See the &lt;a href=&quot;http://arrow.apache.org/docs/python/api.html&quot;&gt;API docs&lt;/a&gt; for more about these.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;the-road-ahead&quot;&gt;The Road Ahead&lt;/h2&gt;

&lt;p&gt;Upcoming Arrow releases will continue to expand the project to cover more use
cases. In addition to completing end-to-end testing for all the major data
types, some of us will be shifting attention to building Arrow-native in-memory
analytics libraries.&lt;/p&gt;

&lt;p&gt;We are looking for more JavaScript, R, and other programming language
developers to join the project and expand the available implementations and
bindings to more languages.&lt;/p&gt;</content><author><name>wesm</name></author></entry></feed>